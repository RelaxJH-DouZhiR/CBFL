dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line
defect4j,time,org/joda/time/Period,13,967,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,1.0,0,0
defect4j,time,org/joda/time/Period,13,968,"        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);",2,0,0,1,4,1,4,0,1,6,78,5,1.0,0,0
defect4j,time,org/joda/time/Period,13,969,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,1.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,337,            if (value != Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,30,6,0.5,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,338,                return calculateDigitCount(-value) + 1;,1,1,0,1,2,1,1,0,2,7,39,8,0.5,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,237,            buf.append('-');,0,0,0,1,2,0,2,0,1,4,16,7,0.33333,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,238,            if (value != Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,6,0.33333,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,239,                value = -value;,2,0,0,0,0,0,0,0,2,2,15,8,0.33333,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,81,                digits = 3;,1,0,0,0,0,0,0,0,1,2,11,9,0.25,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,251,            int d = ((value + 1) * 13421772) >> 27;,2,3,0,2,4,1,0,0,0,5,39,8,0.25,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,252,            buf.append((char) (d + '0'));,1,1,0,2,6,1,2,0,1,7,29,8,0.25,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,254,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,3,4,0,3,10,1,2,0,1,7,55,8,0.25,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,255,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.25,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,247,        } else if (value < 100) {,1,1,0,1,4,2,0,0,0,5,25,5,0.2,0,0
defect4j,time,org/joda/time/Period,13,226,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());",1,0,0,1,8,4,2,1,1,7,82,4,0.16667,0,0
defect4j,time,org/joda/time/Period,13,212,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());",1,0,0,1,8,4,2,1,1,7,83,4,0.125,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1103,                    sum -= 4; // remove three digits and decimal point,1,0,0,0,0,0,0,0,1,2,50,9,0.125,0,0
defect4j,time,org/joda/time/Period,13,110,"        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());",1,0,0,1,8,4,2,1,1,7,84,4,0.07143,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1651,                sum += iText.length();,1,0,0,1,2,0,2,0,1,5,22,8,0.07143,1,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1098,"                sum = Math.max(sum, 4);",1,0,0,0,2,0,3,0,1,4,23,7,0.07143,1,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1100,                sum++;,1,0,0,0,0,0,0,0,1,2,6,7,0.07143,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1101,                if (iFieldType == SECONDS_OPTIONAL_MILLIS &&,2,2,0,0,1,1,0,0,0,4,44,7,0.07143,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1106,                valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,0,0,0,1,3,60,7,0.07143,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1674,                buf.append(iText);,0,0,0,1,2,0,3,0,0,3,18,9,0.06667,1,1
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1127,                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);,4,1,0,1,4,1,0,0,1,6,64,7,0.06667,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1140,                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);,3,1,0,2,6,2,3,0,0,6,75,8,0.06667,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1141,                if (iFieldType == SECONDS_MILLIS || dp > 0) {,3,3,0,1,3,1,0,0,0,5,45,7,0.06667,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1142,                    buf.append('.');,0,0,0,1,2,0,2,0,1,4,16,10,0.06667,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1143,"                    FormatUtils.appendPaddedInteger(buf, dp, 3);",0,0,0,0,2,0,4,0,0,2,44,10,0.06667,0,0
defect4j,time,org/joda/time/PeriodType,13,692,        values[realIndex] = newValue;,1,0,1,0,2,0,0,0,1,4,29,4,0.05263,0,0
defect4j,time,org/joda/time/PeriodType,13,693,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.05263,0,0
defect4j,time,org/joda/time/PeriodType,13,688,        int realIndex = iIndices[index];,1,0,1,0,2,1,0,0,0,4,32,5,0.05,0,0
defect4j,time,org/joda/time/PeriodType,13,689,        if (realIndex == -1) {,1,1,0,1,3,1,0,0,1,6,22,4,0.05,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1650,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",1,2,0,0,6,2,4,0,0,5,74,6,0.05,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1673,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",1,2,0,0,6,2,4,0,0,5,74,6,0.04762,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,864,            return iText.length();,0,0,0,1,2,1,2,0,0,4,22,6,0.04348,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1422,                int seconds = period.get(DurationFieldType.seconds());,1,0,0,2,4,1,4,0,0,5,54,7,0.04348,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1423,                int millis = period.get(DurationFieldType.millis());,1,0,0,2,4,1,4,0,0,5,52,7,0.04348,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1424,                value = (seconds * (long) DateTimeConstants.MILLIS_PER_SECOND) + millis;,5,2,0,2,4,1,0,0,1,6,72,6,0.04348,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,868,            buf.append(iText);,0,0,0,1,2,0,3,0,0,3,18,6,0.04167,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,869,        },0,0,0,0,1,0,0,0,0,1,1,2,0.04167,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1553,            return iText.length();,0,0,0,1,2,1,2,0,0,4,22,6,0.03333,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1557,            buf.append(iText);,0,0,0,1,2,0,3,0,0,3,18,6,0.03226,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1558,        },0,0,0,0,1,0,0,0,0,1,1,2,0.03226,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1466,                    return false;,0,0,0,0,0,1,0,0,1,2,13,9,0.02703,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1441,                        return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,11,0.02632,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1494,                return type.isSupported(DurationFieldType.seconds()) ||,0,1,0,2,4,1,4,0,0,5,55,6,0.025,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1085,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.02439,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1091,                return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.02326,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1123,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.02326,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1114,                sum += iSuffix.calculatePrintedLength(value);,1,0,0,1,2,0,3,0,1,5,45,7,0.02222,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1147,"                iSuffix.printTo(buf, value);",0,0,0,0,2,0,4,0,0,2,28,8,0.02174,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1633,            PeriodPrinter before = iBeforePrinter;,2,0,0,0,0,0,0,1,0,2,38,5,0.02128,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1634,            PeriodPrinter after = iAfterPrinter;,2,0,0,0,0,0,0,1,0,2,36,5,0.02128,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1636,"            int sum = before.calculatePrintedLength(period, locale)",1,1,0,0,2,1,4,0,0,5,55,6,0.02128,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1639,            if (iUseBefore) {,1,0,0,1,3,1,0,0,0,4,17,5,0.02128,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1654,            return sum;,1,0,0,0,0,1,0,0,0,2,11,5,0.02128,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1658,            PeriodPrinter before = iBeforePrinter;,2,0,0,0,0,0,0,1,0,2,38,5,0.02083,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1659,            PeriodPrinter after = iAfterPrinter;,2,0,0,0,0,0,0,1,0,2,36,5,0.02083,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1661,"            before.printTo(buf, period, locale);",0,0,0,0,2,0,5,0,0,2,36,6,0.02083,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1662,            if (iUseBefore) {,1,0,0,1,3,1,0,0,0,4,17,5,0.02083,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1676,"            after.printTo(buf, period, locale);",0,0,0,0,2,0,5,0,0,2,35,6,0.02083,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1677,        },0,0,0,0,1,0,0,0,0,1,1,2,0.02083,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1412,                value = period.get(DurationFieldType.minutes());,1,0,0,2,4,0,4,0,1,5,48,6,0.02041,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1413,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.02041,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1403,                value = period.get(DurationFieldType.weeks());,1,0,0,2,4,0,4,0,1,5,46,6,0.01961,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1404,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.01961,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1400,                value = period.get(DurationFieldType.months());,1,0,0,2,4,0,4,0,1,5,47,6,0.01887,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1401,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.01887,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1406,                value = period.get(DurationFieldType.days());,1,0,0,2,4,0,4,0,1,5,45,6,0.01887,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1407,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.01887,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1409,                value = period.get(DurationFieldType.hours());,1,0,0,2,4,0,4,0,1,5,46,6,0.01786,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1410,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.01786,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1483,                return type.isSupported(DurationFieldType.days());,0,0,0,2,4,1,4,0,0,4,50,7,0.01695,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1434,                    if (isZero(period) && iFieldFormatters[iFieldType] == this) {,0,2,1,2,7,2,2,0,1,7,61,8,0.01667,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1481,                return type.isSupported(DurationFieldType.weeks());,0,0,0,2,4,1,4,0,0,4,51,7,0.01639,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1487,                return type.isSupported(DurationFieldType.minutes());,0,0,0,2,4,1,4,0,0,4,53,7,0.01639,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1479,                return type.isSupported(DurationFieldType.months());,0,0,0,2,4,1,4,0,0,4,52,7,0.01613,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1485,                return type.isSupported(DurationFieldType.hours());,0,0,0,2,4,1,4,0,0,4,51,7,0.01563,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1397,                value = period.get(DurationFieldType.years());,1,0,0,2,4,0,4,0,1,5,46,6,0.01515,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1398,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.01515,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1477,                return type.isSupported(DurationFieldType.years());,0,0,0,2,4,1,4,0,0,4,51,7,0.01493,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1464,"            for (int i = 0, isize = period.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,56,5,0.01471,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1465,                if (period.getValue(i) != 0) {,0,1,0,2,5,1,3,0,0,5,30,7,0.01471,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1083,                return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.01408,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,293,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.01389,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,294,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.01389,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,295,        iValues = values;,2,0,0,0,0,0,0,0,1,2,17,4,0.01389,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,296,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01389,0,0
defect4j,time,org/joda/time/Period,13,683,"        super(values, type);",2,0,0,0,2,1,0,0,1,4,20,3,0.01389,0,0
defect4j,time,org/joda/time/Period,13,684,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01389,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1430,                switch (iPrintZeroSetting) {,1,0,0,1,3,1,0,0,0,4,28,7,0.01316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1079,            if (stopAt <= 0) {,1,1,0,1,3,1,0,0,0,5,18,5,0.01299,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1082,            if (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) != Long.MAX_VALUE) {,4,3,0,2,5,1,2,0,1,7,88,5,0.01299,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1788,            int sum = 0;,1,0,0,0,0,1,0,0,0,2,12,6,0.01282,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1789,            PeriodPrinter[] printers = iPrinters;,2,0,0,0,2,0,0,1,0,3,37,5,0.01282,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1790,            for (int i=printers.length; sum < stopAt && --i>=0; ) {,6,3,0,1,3,2,0,0,1,6,55,5,0.01282,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1791,"                sum += printers[i].countFieldsToPrint(period, Integer.MAX_VALUE, locale);",3,0,1,0,4,0,3,0,1,5,73,7,0.01282,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1793,            return sum;,1,0,0,0,0,1,0,0,0,2,11,5,0.01282,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1135,"                FormatUtils.appendUnpaddedInteger(buf, value);",0,0,0,0,2,0,4,0,0,2,46,8,0.0125,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1385,                type = period.getPeriodType();,1,0,0,1,2,0,2,0,1,5,30,7,0.01235,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,246,            buf.append((char)(value + '0'));,1,1,0,2,6,1,2,0,1,7,32,7,0.01235,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1473,            switch (field) {,1,0,0,1,3,1,0,0,0,4,16,5,0.0122,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,236,        if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0122,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,245,        if (value < 10) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0122,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,258,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0122,0,0
defect4j,time,org/joda/time/PeriodType,13,638,        return (indexOf(type) >= 0);,0,1,0,2,4,1,2,0,1,6,28,5,0.01205,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1089,            long valueLong = getFieldValue(period);,1,0,0,1,2,1,2,0,1,6,39,6,0.01176,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1090,            if (valueLong == Long.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,34,5,0.01176,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1094,"            int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);",1,0,0,1,4,1,6,0,0,5,82,6,0.01176,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1095,            if (iFieldType >= SECONDS_MILLIS) {,2,1,0,1,3,1,0,0,0,5,35,5,0.01176,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1108,            int value = (int) valueLong;,2,0,0,1,2,2,0,0,0,4,28,6,0.01176,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1110,            if (iPrefix != null) {,1,1,0,1,3,1,0,0,0,5,22,5,0.01176,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1113,            if (iSuffix != null) {,1,1,0,1,3,1,0,0,0,5,22,5,0.01176,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1117,            return sum;,1,0,0,0,0,1,0,0,0,2,11,5,0.01176,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,336,        if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.01176,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,343,        return ,0,0,0,0,0,1,0,0,0,1,6,2,0.01176,0,0
defect4j,time,org/joda/time/PeriodType,13,251,        PeriodType type = cYDTime;,2,0,0,0,0,0,0,1,0,2,26,4,0.01163,0,0
defect4j,time,org/joda/time/PeriodType,13,252,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.01163,0,0
defect4j,time,org/joda/time/PeriodType,13,253,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.01163,0,0
defect4j,time,org/joda/time/PeriodType,13,262,            cYDTime = type;,2,0,0,0,0,0,0,0,1,2,15,6,0.01163,0,0
defect4j,time,org/joda/time/PeriodType,13,264,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,237,        checkPeriod(period);,0,0,0,1,2,0,2,0,1,4,20,4,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,239,        PeriodPrinter printer = getPrinter();,1,0,0,1,2,0,1,1,1,6,37,4,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,240,"        StringBuffer buf = new StringBuffer(printer.calculatePrintedLength(period, iLocale));",1,0,0,0,4,1,4,2,1,6,85,4,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,241,"        printer.printTo(buf, period, iLocale);",0,0,0,0,2,0,5,0,0,2,38,5,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,242,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1797,            int sum = 0;,1,0,0,0,0,1,0,0,0,2,12,6,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1798,            PeriodPrinter[] printers = iPrinters;,2,0,0,0,2,0,0,1,0,3,37,5,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1799,            for (int i=printers.length; --i>=0; ) {,4,1,0,1,3,2,0,0,1,6,39,5,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1800,"                sum += printers[i].calculatePrintedLength(period, locale);",1,0,1,0,4,0,3,0,1,5,58,7,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1802,            return sum;,1,0,0,0,0,1,0,0,0,2,11,5,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1121,            long valueLong = getFieldValue(period);,1,0,0,1,2,1,2,0,1,6,39,6,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1122,            if (valueLong == Long.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,34,5,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1125,            int value = (int) valueLong;,2,0,0,1,2,2,0,0,0,4,28,6,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1126,            if (iFieldType >= SECONDS_MILLIS) {,2,1,0,1,3,1,0,0,0,5,35,5,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1130,            if (iPrefix != null) {,1,1,0,1,3,1,0,0,0,5,22,5,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1133,            int minDigits = iMinPrintedDigits;,2,0,0,0,0,1,0,0,0,2,34,6,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1134,            if (minDigits <= 1) {,1,1,0,1,3,1,0,0,0,5,21,5,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1139,            if (iFieldType >= SECONDS_MILLIS) {,2,1,0,1,3,1,0,0,0,5,35,5,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1146,            if (iSuffix != null) {,1,1,0,1,3,1,0,0,0,5,22,5,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1149,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01163,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,236,        checkPrinter();,0,0,0,1,2,0,1,0,1,4,15,4,0.01149,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1806,            PeriodPrinter[] printers = iPrinters;,2,0,0,0,2,0,0,1,0,3,37,5,0.01149,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1807,            int len = printers.length;,3,0,0,0,0,1,0,0,0,2,26,6,0.01149,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1808,            for (int i=0; i<len; i++) {,4,1,0,1,3,2,0,0,1,6,27,5,0.01149,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1809,"                printers[i].printTo(buf, period, locale);",0,0,1,0,4,0,4,0,0,3,41,8,0.01149,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1811,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01149,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1382,            if (iPrintZeroSetting == PRINT_ZERO_ALWAYS) {,2,1,0,1,3,1,0,0,0,5,45,5,0.01149,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1387,"            if (type != null && isSupported(type, iFieldType) == false) {",1,3,0,0,5,1,3,0,2,6,61,5,0.01149,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1393,            switch (iFieldType) {,1,0,0,1,3,1,0,0,0,4,21,5,0.01149,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1429,            if (value == 0) {,1,1,0,1,3,1,0,0,0,5,17,5,0.01149,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1460,            return value;,1,0,0,0,0,1,0,0,0,2,13,5,0.01149,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,254,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01136,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,251,        if (iPrinter == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.01124,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,113,        int index = indexOf(type);,1,0,0,1,2,1,2,0,1,6,26,5,0.01111,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,114,        if (index == -1) {,1,1,0,1,3,1,0,0,1,6,18,4,0.01111,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,117,        return getValue(index);,0,0,0,1,2,1,2,0,1,5,23,4,0.01111,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,95,        int[] result = new int[size()];,1,0,0,1,6,3,1,0,1,6,31,5,0.0101,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,96,        for (int i = 0; i < result.length; i++) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0101,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,97,            result[i] = getValue(i);,0,0,1,1,4,0,2,0,2,5,24,6,0.0101,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,99,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0101,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,262,        if (period == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0099,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,265,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0099,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,392,            if (newValue != 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.00917,0,0
defect4j,time,org/joda/time/Period,13,353,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0087,0,0
defect4j,time,org/joda/time/Period,13,352,"        super(years, months, weeks, days, hours, minutes, seconds, millis, type);",9,0,0,0,2,1,0,0,1,4,73,3,0.00862,0,0
defect4j,time,org/joda/time/PeriodType,13,653,        return -1;,0,0,0,0,0,1,0,0,1,2,10,4,0.00855,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,80,            if (value < 1000) {,1,1,0,1,3,1,0,0,0,5,19,7,0.00769,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,87,            for (; size > digits; size--) {,3,1,0,1,3,1,0,0,1,6,31,7,0.00769,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,5,0,0,3,36,8,0.00769,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,67,        } else if (value < 100) {,1,1,0,1,4,2,0,0,0,5,25,5,0.00746,0,0
defect4j,time,org/joda/time/Period,13,329,"        super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());",8,0,0,1,4,1,2,0,1,6,90,3,0.00633,0,0
defect4j,time,org/joda/time/Period,13,330,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00633,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,50,        if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.00503,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,62,        if (value < 10) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00503,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,63,            for (; size > 1; size--) {,2,1,0,1,3,1,0,0,1,6,26,6,0.00503,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,64,                buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,9,0.00503,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,66,            buf.append((char)(value + '0'));,1,1,0,2,6,1,2,0,1,7,32,7,0.00503,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,92,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00503,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,94,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00498,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,455,"        checkAndUpdate(DurationFieldType.months(), newValues, months);",0,0,0,1,4,0,5,0,1,4,62,4,0.00498,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,456,"        checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);",0,0,0,1,4,0,5,0,1,4,60,4,0.00498,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,457,"        checkAndUpdate(DurationFieldType.days(), newValues, days);",0,0,0,1,4,0,5,0,1,4,58,4,0.00498,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,458,"        checkAndUpdate(DurationFieldType.hours(), newValues, hours);",0,0,0,1,4,0,5,0,1,4,60,4,0.00498,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,459,"        checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);",0,0,0,1,4,0,5,0,1,4,64,4,0.00498,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,460,"        checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);",0,0,0,1,4,0,5,0,1,4,64,4,0.00498,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,461,"        checkAndUpdate(DurationFieldType.millis(), newValues, millis);",0,0,0,1,4,0,5,0,1,4,62,4,0.00498,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,462,        return newValues;,1,0,0,0,0,1,0,0,0,2,17,4,0.00498,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,90,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00493,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,91,        type = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,29,4,0.00493,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,92,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.00493,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,93,"        iValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method",1,0,0,0,2,0,9,0,2,4,108,4,0.00493,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,453,        int[] newValues = new int[size()];,1,0,0,1,6,3,1,0,1,6,34,5,0.00493,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,454,"        checkAndUpdate(DurationFieldType.years(), newValues, years);",0,0,0,1,4,0,5,0,1,4,60,4,0.00493,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,397,            values[index] = newValue;,1,0,1,0,2,0,0,0,1,4,25,6,0.00418,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,399,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00418,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,390,        int index = indexOf(type);,1,0,0,1,2,1,2,0,1,6,26,5,0.00415,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,391,        if (index == -1) {,1,1,0,1,3,1,0,0,1,6,18,4,0.00415,0,0
defect4j,time,org/joda/time/PeriodType,13,650,                return i;,1,0,0,0,0,1,0,0,0,2,9,8,0.0038,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,137,        return getPeriodType().indexOf(type);,0,0,0,1,4,1,3,0,1,5,37,5,0.00377,0,0
defect4j,time,org/joda/time/PeriodType,13,648,"        for (int i = 0, isize = size(); i < isize; i++) {",5,1,0,1,5,2,1,0,2,7,49,4,0.00377,0,0
defect4j,time,org/joda/time/PeriodType,13,649,            if (iTypes[i] == type) {,1,1,1,1,5,1,0,0,0,6,24,6,0.00377,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,65,        if (cStandard == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.00373,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,66,            cStandard = new PeriodFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,40,6,0.00373,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,85,        return cStandard;,1,0,0,0,0,1,0,0,0,2,17,4,0.00373,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,500,        appendField(SECONDS_OPTIONAL_MILLIS);,0,0,0,1,2,0,2,0,1,4,37,4,0.00366,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,501,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.00366,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,555,        return appendSuffix(new SimpleAffix(text));,1,0,0,2,4,2,1,1,2,7,43,4,0.00366,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,652,"        return appendSeparator(text, text, null, false, true);",0,0,0,0,2,1,3,0,3,4,54,4,0.00366,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,552,        if (text == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00365,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1602,                iParsedForms = new String[] {text};,2,0,0,0,4,1,0,1,1,5,35,7,0.00364,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,31,    private static final double LOG_10 = Math.log(10);,1,0,0,1,2,4,2,0,3,6,50,2,0.00364,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,859,        SimpleAffix(String text) {,2,0,0,1,3,0,0,1,0,4,26,3,0.00361,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,860,            iText = text;,2,0,0,0,0,0,0,0,1,2,13,5,0.00361,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,861,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00361,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,228,        if (text == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00351,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,231,        clearPrefix();,0,0,0,1,2,0,1,0,1,4,14,4,0.00351,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,232,        Literal literal = new Literal(text);,2,0,0,1,2,1,0,2,1,6,36,4,0.00351,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,233,"        append0(literal, literal);",0,0,0,0,2,0,3,0,1,3,26,4,0.00351,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,234,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.00351,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1544,        Literal(String text) {,2,0,0,1,3,0,0,1,0,4,22,3,0.0035,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1545,            iText = text;,2,0,0,0,0,0,0,0,1,2,13,5,0.0035,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1546,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0035,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1541,"        static final Literal EMPTY = new Literal("""");",1,0,0,1,2,3,0,2,4,6,45,3,0.0035,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,319,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.00333,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,592,            originalPrinter = iElementPairs.get(iElementPairs.size() - 2);,1,1,0,2,4,0,4,0,1,6,62,6,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,593,            originalParser = iElementPairs.get(iElementPairs.size() - 1);,1,1,0,2,4,0,4,0,1,6,61,6,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,605,        clearPrefix();,0,0,0,1,2,0,1,0,1,4,14,4,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,606,"        FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);",3,0,0,1,4,1,0,3,1,6,87,4,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,607,"        iElementPairs.set(iElementPairs.size() - 2, newField);",0,1,0,1,4,0,5,0,0,4,54,5,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,608,"        iElementPairs.set(iElementPairs.size() - 1, newField);",0,1,0,1,4,0,5,0,0,4,54,5,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,609,        iFieldFormatters[newField.getFieldType()] = newField;,1,0,1,1,4,0,2,0,1,6,53,4,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,611,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1064,"        FieldFormatter(FieldFormatter field, PeriodFieldAffix suffix) {",3,0,0,0,3,0,0,2,0,3,63,3,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1065,            iMinPrintedDigits = field.iMinPrintedDigits;,3,0,0,0,0,0,0,0,1,2,44,5,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1066,            iPrintZeroSetting = field.iPrintZeroSetting;,3,0,0,0,0,0,0,0,1,2,44,5,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1067,            iMaxParsedDigits = field.iMaxParsedDigits;,3,0,0,0,0,0,0,0,1,2,42,5,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1068,            iRejectSignedValues = field.iRejectSignedValues;,3,0,0,0,0,0,0,0,1,2,48,5,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1069,            iFieldType = field.iFieldType;,3,0,0,0,0,0,0,0,1,2,30,5,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1070,            iFieldFormatters = field.iFieldFormatters;,3,0,0,0,0,0,0,0,1,2,42,5,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1071,            iPrefix = field.iPrefix;,3,0,0,0,0,0,0,0,1,2,24,5,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1072,            if (field.iSuffix != null) {,2,1,0,1,3,1,0,0,0,5,28,5,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1075,            iSuffix = suffix;,2,0,0,0,0,0,0,0,1,2,17,5,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1076,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1531,            return iFieldType;,1,0,0,0,0,1,0,0,0,2,18,5,0.00316,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,463,        appendField(MINUTES);,0,0,0,1,2,0,2,0,1,4,21,4,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,464,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,591,        if (iElementPairs.size() > 0) {,0,1,0,2,5,1,2,0,0,5,31,4,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,599,        if (originalPrinter == null || originalParser == null ||,2,5,0,0,1,1,0,0,0,4,56,4,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,730,        if (text == null || finalText == null) {,2,3,0,1,3,1,0,0,0,5,40,4,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,734,        clearPrefix();,0,0,0,1,2,0,1,0,1,4,14,4,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,737,        List<Object> pairs = iElementPairs;,2,0,0,0,0,0,0,2,0,2,35,4,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,738,        if (pairs.size() == 0) {,0,1,0,2,5,1,2,0,0,5,24,4,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,750,        Separator lastSeparator = null;,1,0,0,0,0,0,0,1,0,2,31,4,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,751,        for (i=pairs.size(); --i>=0; ) {,2,1,0,2,5,1,2,0,2,7,32,4,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,752,            if (pairs.get(i) instanceof Separator) {,0,0,0,2,5,2,3,1,0,5,40,7,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,757,            i--;  // element pairs,1,0,0,0,0,0,0,0,1,2,22,6,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,761,        if (lastSeparator != null && pairs.size() == 0) {,1,3,0,2,5,1,2,0,0,6,49,4,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,764,            Object[] comp = createComposite(pairs);,1,0,0,1,4,0,2,1,1,6,39,6,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,765,            pairs.clear();,0,0,0,1,2,0,2,0,0,3,14,7,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,766,            Separator separator = new Separator(,1,0,0,0,1,1,0,2,1,5,36,6,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,770,            pairs.add(separator);,0,0,0,1,2,0,3,0,0,3,21,7,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,771,            pairs.add(separator);,0,0,0,1,2,0,3,0,0,3,21,7,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,774,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,800,            Separator sep = (Separator) elementPairs.get(0);,1,0,0,1,4,0,2,2,0,5,48,6,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,801,            if (sep.iAfterParser == null && sep.iAfterPrinter == null) {,4,3,0,1,3,1,0,0,0,5,60,6,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,802,"                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);",1,0,0,0,4,0,6,1,1,5,86,8,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,803,"                sep = sep.finish(f.getPrinter(), f.getParser());",1,0,0,1,6,0,6,0,1,5,48,8,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,804,"                return new PeriodFormatter(sep, sep);",2,0,0,0,2,2,0,1,1,5,37,8,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1595,"                boolean useBefore, boolean useAfter) {",2,0,0,0,2,2,0,0,0,3,38,4,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1596,            iText = text;,2,0,0,0,0,0,0,0,1,2,13,5,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1597,            iFinalText = finalText;,2,0,0,0,0,0,0,0,1,2,23,5,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1599,            if ((finalText == null || text.equals(finalText)) &&,1,3,0,2,5,1,3,0,0,6,52,5,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1618,            iBeforePrinter = beforePrinter;,2,0,0,0,0,0,0,0,1,2,31,5,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1619,            iBeforeParser = beforeParser;,2,0,0,0,0,0,0,0,1,2,29,5,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1620,            iUseBefore = useBefore;,2,0,0,0,0,0,0,0,1,2,23,5,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1621,            iUseAfter = useAfter;,2,0,0,0,0,0,0,0,1,2,21,5,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1622,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1750,            iAfterPrinter = afterPrinter;,2,0,0,0,0,0,0,0,1,2,29,5,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1751,            iAfterParser = afterParser;,2,0,0,0,0,0,0,0,1,2,27,5,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1752,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1579,    static class Separator,1,0,0,0,0,2,0,0,1,3,22,2,0.00314,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,437,        appendField(DAYS);,0,0,0,1,2,0,2,0,1,4,18,4,0.00311,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,438,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.00311,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,411,        appendField(MONTHS);,0,0,0,1,2,0,2,0,1,4,20,4,0.00309,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,412,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.00309,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,424,        appendField(WEEKS);,0,0,0,1,2,0,2,0,1,4,19,4,0.00309,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,425,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.00309,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,146,        return iParser;,1,0,0,0,0,1,0,0,0,2,15,4,0.00308,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,450,        appendField(HOURS);,0,0,0,1,2,0,2,0,1,4,19,4,0.00308,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,451,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.00308,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,779,        if (iPrefix != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.00297,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,782,        iPrefix = null;,1,0,0,0,0,0,0,0,1,2,15,4,0.00297,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,783,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00297,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,398,        appendField(YEARS);,0,0,0,1,2,0,2,0,1,4,19,4,0.00296,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,399,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.00296,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,530,"        appendField(type, iMinPrintedDigits);",0,0,0,0,2,0,3,0,1,3,37,4,0.00279,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,531,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00279,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,128,        return iPrinter;,1,0,0,0,0,1,0,0,0,2,16,4,0.00278,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,534,"        FieldFormatter field = new FieldFormatter(minPrinted, iPrintZeroSetting,",3,0,0,0,1,1,0,2,1,5,72,4,0.00278,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,536,"        append0(field, field);",0,0,0,0,2,0,3,0,1,3,22,4,0.00278,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,537,        iFieldFormatters[type] = field;,1,0,1,0,2,0,0,0,1,4,31,4,0.00278,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,538,        iPrefix = null;,1,0,0,0,0,0,0,0,1,2,15,4,0.00278,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,539,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00278,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1053,"                       PeriodFieldAffix prefix, PeriodFieldAffix suffix) {",2,0,0,0,2,0,0,2,0,3,51,4,0.00278,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1054,            iMinPrintedDigits = minPrintedDigits;,2,0,0,0,0,0,0,0,1,2,37,5,0.00278,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1055,            iPrintZeroSetting = printZeroSetting;,2,0,0,0,0,0,0,0,1,2,37,5,0.00278,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1056,            iMaxParsedDigits = maxParsedDigits;,2,0,0,0,0,0,0,0,1,2,35,5,0.00278,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1057,            iRejectSignedValues = rejectSignedValues;,2,0,0,0,0,0,0,0,1,2,41,5,0.00278,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1058,            iFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,23,5,0.00278,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1059,            iFieldFormatters = fieldFormatters;,2,0,0,0,0,0,0,0,1,2,35,5,0.00278,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1060,            iPrefix = prefix;,2,0,0,0,0,0,0,0,1,2,17,5,0.00278,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1061,            iSuffix = suffix;,2,0,0,0,0,0,0,0,1,2,17,5,0.00278,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1062,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00278,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,87,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,88,        iPrinter = printer;,2,0,0,0,0,0,0,0,1,2,19,4,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,89,        iParser = parser;,2,0,0,0,0,0,0,0,1,2,17,4,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,90,        iLocale = null;,1,0,0,0,0,0,0,0,1,2,15,4,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,91,        iParseType = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,92,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,123,"        PeriodFormatter formatter = toFormatter(iElementPairs, iNotPrinter, iNotParser);",1,0,0,0,2,0,4,1,1,5,80,4,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,124,        iFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();,1,0,0,1,6,0,2,1,1,6,63,4,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,125,        return formatter;,1,0,0,0,0,1,0,0,0,2,17,4,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,786,        iElementPairs.add(printer);,0,0,0,1,2,0,3,0,0,3,27,5,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,787,        iElementPairs.add(parser);,0,0,0,1,2,0,3,0,0,3,26,5,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,788,        iNotPrinter |= (printer == null);,2,1,0,1,2,0,0,0,1,5,33,4,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,789,        iNotParser |= (parser == null);,2,1,0,1,2,0,0,0,1,5,31,4,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,790,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,795,        if (notPrinter && notParser) {,2,1,0,1,3,1,0,0,0,5,30,4,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,798,        int size = elementPairs.size();,1,0,0,1,2,1,2,0,0,5,31,5,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,799,        if (size >= 2 && elementPairs.get(0) instanceof Separator) {,1,2,0,2,5,2,2,1,0,7,60,4,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,807,        Object[] comp = createComposite(elementPairs);,1,0,0,1,4,0,2,1,1,6,46,4,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,808,        if (notPrinter) {,1,0,0,1,3,1,0,0,0,4,17,4,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,810,        } else if (notParser) {,1,0,0,1,4,2,0,0,0,4,23,5,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,813,"            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);",0,0,1,1,10,2,0,3,1,6,76,7,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,818,        switch (elementPairs.size()) {,0,0,0,2,5,1,2,0,0,4,30,5,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,824,                Composite comp = new Composite(elementPairs);,2,0,0,1,2,1,0,2,1,6,45,5,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,825,"                return new Object[] {comp, comp};",2,0,0,0,4,2,0,1,0,4,33,6,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1766,        Composite(List<Object> elementPairs) {,2,0,0,1,3,0,0,2,0,4,38,3,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1767,            List<Object> printerList = new ArrayList<Object>();,1,0,0,1,2,1,0,4,1,6,51,5,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1768,            List<Object> parserList = new ArrayList<Object>();,1,0,0,1,2,1,0,4,1,6,50,5,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1770,"            decompose(elementPairs, printerList, parserList);",0,0,0,0,2,0,4,0,1,3,49,5,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1772,            if (printerList.size() <= 0) {,0,1,0,2,5,1,2,0,0,5,30,5,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1775,                iPrinters = printerList.toArray(,1,0,0,0,1,0,2,0,1,4,32,7,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1779,            if (parserList.size() <= 0) {,0,1,0,2,5,1,2,0,0,5,29,5,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1782,                iParsers = parserList.toArray(,1,0,0,0,1,0,2,0,1,4,30,7,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1785,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1837,            int size = elementPairs.size();,1,0,0,1,2,1,2,0,0,5,31,6,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1838,            for (int i=0; i<size; i+=2) {,4,1,0,1,3,2,0,0,1,6,29,5,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1839,                Object element = elementPairs.get(i);,1,0,0,1,2,0,3,1,0,5,37,7,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1840,                if (element instanceof PeriodPrinter) {,1,0,0,1,3,2,0,1,0,5,39,8,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1841,                    if (element instanceof Composite) {,1,0,0,1,3,2,0,1,0,5,35,10,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1844,                        printerList.add(element);,0,0,0,1,2,0,3,0,0,3,25,12,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1848,                element = elementPairs.get(i + 1);,2,1,0,1,2,0,2,0,1,6,34,7,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1849,                if (element instanceof PeriodParser) {,1,0,0,1,3,2,0,1,0,5,38,8,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1850,                    if (element instanceof Composite) {,1,0,0,1,3,2,0,1,0,5,35,10,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1853,                        parserList.add(element);,0,0,0,1,2,0,3,0,0,3,24,12,0.00277,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1857,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00277,0,0
defect4j,time,org/joda/time/Period,13,298,"        super(0L, null, null);",0,0,0,0,2,1,0,0,1,3,22,3,0.00275,0,0
defect4j,time,org/joda/time/Period,13,299,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00275,0,0
defect4j,time,org/joda/time/Period,13,65,    public static final Period ZERO = new Period();,1,0,0,1,2,4,0,2,4,6,47,2,0.00275,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,101,    public PeriodFormatterBuilder() {,1,0,0,1,3,1,0,0,1,5,33,2,0.00272,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,102,        clear();,0,0,0,1,2,0,1,0,1,4,8,4,0.00272,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00272,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,171,        iMinPrintedDigits = 1;,1,0,0,0,0,0,0,0,1,2,22,4,0.00272,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,172,        iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;,2,0,0,0,0,0,0,0,1,2,43,4,0.00272,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,173,        iMaxParsedDigits = 10;,1,0,0,0,0,0,0,0,1,2,22,4,0.00272,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,174,        iRejectSignedValues = false;,1,0,0,0,0,0,0,0,2,2,28,4,0.00272,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,175,        iPrefix = null;,1,0,0,0,0,0,0,0,1,2,15,4,0.00272,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,176,        if (iElementPairs == null) {,1,1,0,1,3,1,0,0,0,5,28,4,0.00272,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,177,            iElementPairs = new ArrayList<Object>();,1,0,0,1,2,1,0,2,2,6,40,6,0.00272,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,181,        iNotPrinter = false;,1,0,0,0,0,0,0,0,2,2,20,4,0.00272,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,182,        iNotParser = false;,1,0,0,0,0,0,0,0,2,2,19,4,0.00272,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,183,        iFieldFormatters = new FieldFormatter[10];,1,0,0,0,2,1,0,1,1,5,42,4,0.00272,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,184,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00272,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,329,        return iValues[index];,0,0,1,0,2,1,0,0,0,3,22,5,0.0026,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,254,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00257,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,255,        type = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,29,4,0.00257,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,256,        chrono = DateTimeUtils.getChronology(chrono);,1,0,0,1,2,0,3,0,1,5,45,4,0.00257,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,257,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.00257,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,258,"        iValues = chrono.get(this, duration);",1,0,0,0,2,1,3,0,1,5,37,4,0.00257,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,259,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00257,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,317,            return PeriodType.standard();,0,0,0,1,2,1,2,0,0,4,29,7,0.00254,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,276,        int size = period.size();,1,0,0,1,2,1,2,0,0,5,25,5,0.0025,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,277,        int[] values = new int[size];,1,0,1,0,4,3,0,0,0,4,29,5,0.0025,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,278,        if (duration != 0) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0025,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,289,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0025,0,0
defect4j,time,org/joda/time/PeriodType,13,102,        PeriodType type = cStandard;,2,0,0,0,0,0,0,1,0,2,28,4,0.0024,0,0
defect4j,time,org/joda/time/PeriodType,13,103,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0024,0,0
defect4j,time,org/joda/time/PeriodType,13,104,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0024,0,0
defect4j,time,org/joda/time/PeriodType,13,114,            cStandard = type;,2,0,0,0,0,0,0,0,1,2,17,6,0.0024,0,0
defect4j,time,org/joda/time/PeriodType,13,116,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0024,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,308,        return DateTimeUtils.getPeriodType(type);,0,0,0,1,2,1,3,0,0,4,41,5,0.00235,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,316,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00235,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,57,    private static final ReadablePeriod DUMMY_PERIOD = new AbstractPeriod() {,1,0,0,1,3,4,0,2,4,6,73,2,0.00231,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,318,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.00231,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,45,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00231,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00231,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,56,        return getPeriodType().size();,0,0,0,1,4,1,2,0,1,5,30,5,0.00231,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,57,    private static final ReadablePeriod DUMMY_PERIOD = new AbstractPeriod() {,1,0,0,1,3,4,0,2,4,6,73,2,0.00231,0,0
defect4j,time,org/joda/time/PeriodType,13,617,        return iTypes.length;,2,0,0,0,0,1,0,0,0,2,21,5,0.00231,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,283,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.00194,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,98,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.00179,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,99,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,0,0,0,0,0,0,1,2,41,4,0.00179,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,100,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00179,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,112,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.00179,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,113,        cMillisProvider = new FixedMillisProvider(fixedMillis);,2,0,0,1,2,1,0,1,2,6,55,4,0.00179,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,114,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00179,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,159,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.00179,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,160,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00179,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,163,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00179,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,530,        FixedMillisProvider(long fixedMillis) {,2,0,0,1,3,1,0,0,0,4,39,3,0.00179,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,531,            iMillis = fixedMillis;,2,0,0,0,0,0,0,0,1,2,22,5,0.00179,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,532,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00179,0,0
defect4j,time,org/joda/time/DateTimeZone,13,174,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.00166,0,0
defect4j,time,org/joda/time/DateTimeZone,13,175,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00166,0,0
defect4j,time,org/joda/time/DateTimeZone,13,178,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00166,0,0
defect4j,time,org/joda/time/DateTimeZone,13,181,        synchronized(DateTimeZone.class) {,0,0,0,1,3,2,0,1,0,4,34,6,0.00166,0,0
defect4j,time,org/joda/time/DateTimeZone,13,182,            cDefault = zone;,2,0,0,0,0,0,0,0,1,2,16,6,0.00166,0,0
defect4j,time,org/joda/time/DateTimeZone,13,183,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00166,0,0
defect4j,time,org/joda/time/DateTimeZone,13,184,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00166,0,0
defect4j,time,org/joda/time/PeriodType,13,595,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00166,0,0
defect4j,time,org/joda/time/PeriodType,13,596,        iName = name;,2,0,0,0,0,0,0,0,1,2,13,4,0.00166,0,0
defect4j,time,org/joda/time/PeriodType,13,597,        iTypes = types;,2,0,0,0,0,0,0,0,1,2,15,4,0.00166,0,0
defect4j,time,org/joda/time/PeriodType,13,598,        iIndices = indices;,2,0,0,0,0,0,0,0,1,2,19,4,0.00166,0,0
defect4j,time,org/joda/time/PeriodType,13,599,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00166,0,0
defect4j,time,org/joda/time/PeriodType,13,56,"    private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);",1,0,0,1,2,4,0,6,4,6,90,2,0.00166,0,0
defect4j,time,org/joda/time/PeriodType,13,58,    static int YEAR_INDEX = 0;,1,0,0,0,0,2,0,0,1,3,26,2,0.00166,0,0
defect4j,time,org/joda/time/PeriodType,13,59,    static int MONTH_INDEX = 1;,1,0,0,0,0,2,0,0,1,3,27,2,0.00166,0,0
defect4j,time,org/joda/time/PeriodType,13,60,    static int WEEK_INDEX = 2;,1,0,0,0,0,2,0,0,1,3,26,2,0.00166,0,0
defect4j,time,org/joda/time/PeriodType,13,61,    static int DAY_INDEX = 3;,1,0,0,0,0,2,0,0,1,3,25,2,0.00166,0,0
defect4j,time,org/joda/time/PeriodType,13,62,    static int HOUR_INDEX = 4;,1,0,0,0,0,2,0,0,1,3,26,2,0.00166,0,0
defect4j,time,org/joda/time/PeriodType,13,63,    static int MINUTE_INDEX = 5;,1,0,0,0,0,2,0,0,1,3,28,2,0.00166,0,0
defect4j,time,org/joda/time/PeriodType,13,64,    static int SECOND_INDEX = 6;,1,0,0,0,0,2,0,0,1,3,28,2,0.00166,0,0
defect4j,time,org/joda/time/PeriodType,13,65,    static int MILLI_INDEX = 7;,1,0,0,0,0,2,0,0,1,3,27,2,0.00166,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,86,        return getInstance(DateTimeZone.getDefault());,0,0,0,2,4,1,3,0,1,5,46,4,0.00164,0,0
defect4j,time,org/joda/time/DateTimeZone,13,147,                        },0,0,0,0,1,0,0,0,0,1,1,2,0.00147,0,0
defect4j,time,org/joda/time/DateTimeZone,13,133,        DateTimeZone zone = cDefault;,2,0,0,0,0,0,0,1,0,2,29,4,0.00147,0,0
defect4j,time,org/joda/time/DateTimeZone,13,134,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00147,0,0
defect4j,time,org/joda/time/DateTimeZone,13,135,            synchronized(DateTimeZone.class) {,0,0,0,1,3,2,0,1,0,4,34,8,0.00147,0,0
defect4j,time,org/joda/time/DateTimeZone,13,136,                zone = cDefault;,2,0,0,0,0,0,0,0,1,2,16,8,0.00147,0,0
defect4j,time,org/joda/time/DateTimeZone,13,137,                if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,8,0.00147,0,0
defect4j,time,org/joda/time/DateTimeZone,13,138,                    DateTimeZone temp = null;,1,0,0,0,0,0,0,1,0,2,25,10,0.00147,0,0
defect4j,time,org/joda/time/DateTimeZone,13,141,"                            String id = System.getProperty(""user.timezone"");",1,0,0,1,2,0,2,1,1,6,48,14,0.00147,0,0
defect4j,time,org/joda/time/DateTimeZone,13,142,                            if (id != null) {  // null check avoids stack overflow,1,1,0,1,3,1,0,0,0,5,54,14,0.00147,0,0
defect4j,time,org/joda/time/DateTimeZone,13,143,                                temp = forID(id);,1,0,0,1,2,0,2,0,2,5,17,16,0.00147,0,0
defect4j,time,org/joda/time/DateTimeZone,13,148,                        if (temp == null) {,1,1,0,1,3,1,0,0,0,5,19,12,0.00147,0,0
defect4j,time,org/joda/time/DateTimeZone,13,153,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.00147,0,0
defect4j,time,org/joda/time/DateTimeZone,13,154,                    if (temp == null) {,1,1,0,1,3,1,0,0,0,5,19,10,0.00147,0,0
defect4j,time,org/joda/time/DateTimeZone,13,157,                    cDefault = zone = temp;,3,0,0,0,0,0,0,0,2,2,23,10,0.00147,0,0
defect4j,time,org/joda/time/DateTimeZone,13,159,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00147,0,0
defect4j,time,org/joda/time/DateTimeZone,13,161,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.00147,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,123,        return iZone.hashCode();,0,0,0,1,2,1,2,0,0,4,24,5,0.00142,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,96,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00135,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,2,2,0,1,4,1,3,0,0,6,66,5,0.00135,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,100,        ISOChronology chrono = cFastCache[index];,1,0,1,0,2,0,0,1,0,4,41,4,0.00135,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,101,        if (chrono != null && chrono.getZone() == zone) {,2,3,0,2,5,1,2,0,0,6,49,4,0.00135,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,104,        synchronized (cCache) {,1,0,0,1,3,1,0,0,0,4,23,4,0.00135,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,105,            chrono = cCache.get(zone);,1,0,0,1,2,0,3,0,1,5,26,6,0.00135,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,106,            if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.00135,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",1,0,0,0,4,1,4,1,2,6,76,8,0.00135,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,108,"                cCache.put(zone, chrono);",0,0,0,0,2,0,4,0,0,2,25,9,0.00135,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,110,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00135,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,111,        cFastCache[index] = chrono;,1,0,1,0,2,0,0,0,1,4,27,4,0.00135,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,112,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.00135,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1250,        return 57 + getID().hashCode();,0,1,0,1,4,1,2,0,1,6,31,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,4,0,0,4,70,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,131,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.00134,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,282,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,315,        return iParam;,1,0,0,0,0,1,0,0,0,2,14,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,315,        return iChronology.years();,0,0,0,1,2,1,2,0,0,4,27,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,334,        return iChronology.days();,0,0,0,1,2,1,2,0,0,4,26,5,0.00134,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,726,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.00134,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,160,            return iUnitMillis;,1,0,0,0,0,1,0,0,0,2,19,5,0.00134,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,55,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,95,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.00134,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,111,        return iChronology.days();,0,0,0,1,2,1,2,0,0,4,26,5,0.00134,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,218,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.00134,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,142,        long millis = iUnitMillis;,2,0,0,0,0,1,0,0,0,2,26,5,0.00134,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,143,        int hash = (int) (millis ^ (millis >>> 32));,3,2,0,2,6,2,0,0,0,5,44,5,0.00134,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,144,        hash += getType().hashCode();,1,0,0,1,4,0,2,0,2,5,29,4,0.00134,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,145,        return hash;,1,0,0,0,0,1,0,0,0,2,12,4,0.00134,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,122,        return iRangeField;,1,0,0,0,0,1,0,0,0,2,19,4,0.00134,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,141,        return iUnitField;,1,0,0,0,0,1,0,0,0,2,18,4,0.00134,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,101,        return getWrappedField().getLeapDurationField();,0,0,0,1,4,1,2,0,1,5,48,5,0.00134,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,13,90,        return iField.getRangeDurationField();,0,0,0,1,2,1,2,0,0,4,38,5,0.00134,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,139,        return iRangeField;,1,0,0,0,0,1,0,0,0,2,19,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,13,94,        return iChronology.weeks();,0,0,0,1,2,1,2,0,0,4,27,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,51,        return iChronology.months();,0,0,0,1,2,1,2,0,0,4,28,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,56,        return iChronology.years();,0,0,0,1,2,1,2,0,0,4,27,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,208,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.00134,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,220,        return iChronology.weeks();,0,0,0,1,2,1,2,0,0,4,27,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,58,        return iChronology.weekyears();,0,0,0,1,2,1,2,0,0,4,31,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,82,"        super(base, zone);",2,0,0,0,2,1,0,0,1,4,18,3,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,83,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,56,        if (base == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,59,        base = base.withUTC();,1,0,0,1,2,0,2,0,1,5,22,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,60,        if (base == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,63,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,66,"        return new ZonedChronology(base, zone);",2,0,0,0,2,2,0,1,1,5,39,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,72,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,3,4,0,1,2,1,2,0,0,6,87,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,86,        return (DateTimeZone)getParam();,0,0,0,1,4,1,1,1,1,6,32,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",1,0,0,1,2,1,0,6,1,6,66,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,157,"        fields.eras = convertField(fields.eras, converted);",4,0,0,0,2,0,2,0,2,4,51,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,158,"        fields.centuries = convertField(fields.centuries, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,159,"        fields.years = convertField(fields.years, converted);",4,0,0,0,2,0,2,0,2,4,53,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,160,"        fields.months = convertField(fields.months, converted);",4,0,0,0,2,0,2,0,2,4,55,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,161,"        fields.weekyears = convertField(fields.weekyears, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,162,"        fields.weeks = convertField(fields.weeks, converted);",4,0,0,0,2,0,2,0,2,4,53,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,163,"        fields.days = convertField(fields.days, converted);",4,0,0,0,2,0,2,0,2,4,51,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,165,"        fields.halfdays = convertField(fields.halfdays, converted);",4,0,0,0,2,0,2,0,2,4,59,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,166,"        fields.hours = convertField(fields.hours, converted);",4,0,0,0,2,0,2,0,2,4,53,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,167,"        fields.minutes = convertField(fields.minutes, converted);",4,0,0,0,2,0,2,0,2,4,57,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,168,"        fields.seconds = convertField(fields.seconds, converted);",4,0,0,0,2,0,2,0,2,4,57,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,169,"        fields.millis = convertField(fields.millis, converted);",4,0,0,0,2,0,2,0,2,4,55,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,173,"        fields.year = convertField(fields.year, converted);",4,0,0,0,2,0,2,0,2,4,51,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",4,0,0,0,2,0,2,0,2,4,69,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",4,0,0,0,2,0,2,0,2,4,67,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,177,"        fields.era = convertField(fields.era, converted);",4,0,0,0,2,0,2,0,2,4,49,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",4,0,0,0,2,0,2,0,2,4,63,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,183,"        fields.weekyear = convertField(fields.weekyear, converted);",4,0,0,0,2,0,2,0,2,4,59,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",4,0,0,0,2,0,2,0,2,4,77,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",4,0,0,0,2,0,2,0,2,4,67,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",4,0,0,0,2,0,2,0,2,4,69,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",4,0,0,0,2,0,2,0,2,4,79,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",4,0,0,0,2,0,2,0,2,4,67,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,197,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,200,        if (field == null || !field.isSupported()) {,1,2,0,2,5,1,2,0,1,7,44,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,201,            return field;,1,0,0,0,0,1,0,0,0,2,13,6,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,203,        if (converted.containsKey(field)) {,0,0,0,2,5,1,3,0,0,4,35,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,204,            return (DurationField)converted.get(field);,0,0,0,1,4,1,3,1,0,5,43,7,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",2,0,0,1,4,1,1,2,2,7,73,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,207,"        converted.put(field, zonedField);",0,0,0,0,2,0,4,0,0,2,33,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,208,        return zonedField;,1,0,0,0,0,1,0,0,0,2,18,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,212,        if (field == null || !field.isSupported()) {,1,2,0,2,5,1,2,0,1,7,44,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,215,        if (converted.containsKey(field)) {,0,0,0,2,5,1,3,0,0,4,35,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,218,        ZonedDateTimeField zonedField =,1,0,0,0,0,0,0,1,0,2,31,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,223,"        converted.put(field, zonedField);",0,0,0,0,2,0,4,0,0,2,33,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,224,        return zonedField;,1,0,0,0,0,1,0,0,0,2,18,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,284,            super(field.getType());,0,0,0,2,4,1,2,0,1,5,23,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,285,            if (!field.isSupported()) {,0,0,0,2,5,1,2,0,1,5,27,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,288,            iField = field;,2,0,0,0,0,0,0,0,1,2,15,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,289,            iTimeField = useTimeArithmetic(field);,1,0,0,1,2,0,2,0,2,5,38,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,290,            iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,291,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,298,            return iField.getUnitMillis();,0,0,0,1,2,1,2,0,0,4,30,6,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,389,            super(field.getType());,0,0,0,2,4,1,2,0,1,5,23,4,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,390,            if (!field.isSupported()) {,0,0,0,2,5,1,2,0,1,5,27,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,393,            iField = field;,2,0,0,0,0,0,0,0,1,2,15,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,394,            iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,395,            iDurationField = durationField;,2,0,0,0,0,0,0,0,1,2,31,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,396,            iTimeField = useTimeArithmetic(durationField);,1,0,0,1,2,0,2,0,2,5,46,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,397,            iRangeDurationField = rangeDurationField;,2,0,0,0,0,0,0,0,1,2,41,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,398,            iLeapDurationField = leapDurationField;,2,0,0,0,0,0,0,0,1,2,39,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,399,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00134,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,109,        return getWrappedField().getUnitMillis() * iScalar;,1,1,0,1,4,1,2,0,1,7,51,4,0.00134,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,147,        long scalar = iScalar;,2,0,0,0,0,1,0,0,0,2,22,5,0.00134,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,148,        int hash = (int) (scalar ^ (scalar >>> 32));,3,2,0,2,6,2,0,0,0,5,44,5,0.00134,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,149,        hash += getType().hashCode();,1,0,0,1,4,0,2,0,2,5,29,4,0.00134,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,150,        hash += getWrappedField().hashCode();,1,0,0,1,4,0,2,0,2,5,37,4,0.00134,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,151,        return hash;,1,0,0,0,0,1,0,0,0,2,12,4,0.00134,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,13,69,        return iField;,1,0,0,0,0,1,0,0,0,2,14,4,0.00134,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,49,        return DurationFieldType.millis();,0,0,0,1,2,1,2,0,0,4,34,5,0.00134,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,155,        return (int) getUnitMillis();,0,0,0,1,4,2,1,0,1,5,29,5,0.00134,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,133,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.00133,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,122,"        super(base, null);",1,0,0,0,2,1,0,0,1,4,18,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,123,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",1,0,0,1,2,4,0,6,4,6,106,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,1,0,1,0,2,1,0,1,1,6,48,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,1,0,0,2,4,1,2,1,2,7,71,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",2,0,0,0,2,0,3,0,0,3,43,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,68,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,169,        if (getBase().getZone() == DateTimeZone.UTC) {,2,1,0,2,7,1,2,0,1,7,46,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,171,            fields.centuryOfEra = new DividedDateTimeField(,2,0,0,0,1,1,0,1,2,5,47,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,173,            fields.yearOfCentury = new RemainderDateTimeField(,2,0,0,0,1,1,0,1,2,5,50,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,2,0,0,0,1,1,0,1,2,5,54,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,178,            fields.centuries = fields.centuryOfEra.getDurationField();,4,0,0,1,2,0,1,0,1,5,58,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,146,        return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,81,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",0,0,0,1,8,1,5,0,1,5,82,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,40,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,1,0,0,1,2,3,0,2,3,6,70,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,87,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,91,        return getWrappedField().getMaximumValue();,0,0,0,1,4,1,2,0,1,5,43,5,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,153,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,154,        iName = name;,2,0,0,0,0,0,0,0,1,2,13,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,155,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,73,    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,80,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,76,    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,88,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,79,    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,91,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,82,    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,92,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,85,    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,81,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,88,    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,88,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,91,    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,90,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,94,    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,89,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,97,    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,96,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,100,    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,85,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,103,    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,93,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,106,    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,88,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,110,    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,91,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,113,    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,92,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,116,    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,97,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,119,    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,93,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,122,    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,88,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,125,    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,90,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,128,    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,91,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,131,    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,90,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,134,    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,93,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,137,    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,90,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,140,    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,93,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,164,        return MILLIS_OF_SECOND_TYPE;,1,0,0,0,0,1,0,0,0,2,29,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,173,        return MILLIS_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,182,        return SECOND_OF_MINUTE_TYPE;,1,0,0,0,0,1,0,0,0,2,29,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,191,        return SECOND_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,200,        return MINUTE_OF_HOUR_TYPE;,1,0,0,0,0,1,0,0,0,2,27,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,209,        return MINUTE_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,218,        return HOUR_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,24,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,227,        return CLOCKHOUR_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,29,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,236,        return HOUR_OF_HALFDAY_TYPE;,1,0,0,0,0,1,0,0,0,2,28,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,245,        return CLOCKHOUR_OF_HALFDAY_TYPE;,1,0,0,0,0,1,0,0,0,2,33,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,254,        return HALFDAY_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,27,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,264,        return DAY_OF_WEEK_TYPE;,1,0,0,0,0,1,0,0,0,2,24,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,273,        return DAY_OF_MONTH_TYPE;,1,0,0,0,0,1,0,0,0,2,25,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,282,        return DAY_OF_YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,24,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,291,        return WEEK_OF_WEEKYEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,29,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,300,        return WEEKYEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,21,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,309,        return WEEKYEAR_OF_CENTURY_TYPE;,1,0,0,0,0,1,0,0,0,2,32,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,318,        return MONTH_OF_YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,26,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,327,        return YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,17,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,336,        return YEAR_OF_ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,24,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,345,        return YEAR_OF_CENTURY_TYPE;,1,0,0,0,0,1,0,0,0,2,28,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,354,        return CENTURY_OF_ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,27,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,363,        return ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,16,4,0.0013,0,0
defect4j,time,org/joda/time/DurationFieldType,13,141,        return HALFDAYS_TYPE;,1,0,0,0,0,1,0,0,0,2,21,4,0.0013,0,0
defect4j,time,org/joda/time/DurationFieldType,13,169,        return WEEKYEARS_TYPE;,1,0,0,0,0,1,0,0,0,2,22,4,0.0013,0,0
defect4j,time,org/joda/time/DurationFieldType,13,196,        return CENTURIES_TYPE;,1,0,0,0,0,1,0,0,0,2,22,4,0.0013,0,0
defect4j,time,org/joda/time/DurationFieldType,13,205,        return ERAS_TYPE;,1,0,0,0,0,1,0,0,0,2,17,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,99,"    protected AssembledChronology(Chronology base, Object param) {",3,0,0,0,3,1,0,2,1,5,62,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,100,        iBase = base;,2,0,0,0,0,0,0,0,1,2,13,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,101,        iParam = param;,2,0,0,0,0,0,0,0,1,2,15,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,102,        setFields();,0,0,0,1,2,0,1,0,1,4,12,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,156,        return iMillis;,1,0,0,0,0,1,0,0,0,2,15,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,160,        return iMillisOfSecond;,1,0,0,0,0,1,0,0,0,2,23,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,164,        return iMillisOfDay;,1,0,0,0,0,1,0,0,0,2,20,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,168,        return iSeconds;,1,0,0,0,0,1,0,0,0,2,16,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,172,        return iSecondOfMinute;,1,0,0,0,0,1,0,0,0,2,23,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,176,        return iSecondOfDay;,1,0,0,0,0,1,0,0,0,2,20,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,180,        return iMinutes;,1,0,0,0,0,1,0,0,0,2,16,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,184,        return iMinuteOfHour;,1,0,0,0,0,1,0,0,0,2,21,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,188,        return iMinuteOfDay;,1,0,0,0,0,1,0,0,0,2,20,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,192,        return iHours;,1,0,0,0,0,1,0,0,0,2,14,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,196,        return iHourOfDay;,1,0,0,0,0,1,0,0,0,2,18,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,200,        return iClockhourOfDay;,1,0,0,0,0,1,0,0,0,2,23,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,204,        return iHalfdays;,1,0,0,0,0,1,0,0,0,2,17,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,208,        return iHourOfHalfday;,1,0,0,0,0,1,0,0,0,2,22,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,212,        return iClockhourOfHalfday;,1,0,0,0,0,1,0,0,0,2,27,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,216,        return iHalfdayOfDay;,1,0,0,0,0,1,0,0,0,2,21,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,220,        return iDays;,1,0,0,0,0,1,0,0,0,2,13,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,224,        return iDayOfWeek;,1,0,0,0,0,1,0,0,0,2,18,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,228,        return iDayOfMonth;,1,0,0,0,0,1,0,0,0,2,19,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,232,        return iDayOfYear;,1,0,0,0,0,1,0,0,0,2,18,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,236,        return iWeeks;,1,0,0,0,0,1,0,0,0,2,14,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,240,        return iWeekOfWeekyear;,1,0,0,0,0,1,0,0,0,2,23,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,244,        return iWeekyears;,1,0,0,0,0,1,0,0,0,2,18,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,248,        return iWeekyear;,1,0,0,0,0,1,0,0,0,2,17,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,252,        return iWeekyearOfCentury;,1,0,0,0,0,1,0,0,0,2,26,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,256,        return iMonths;,1,0,0,0,0,1,0,0,0,2,15,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,260,        return iMonthOfYear;,1,0,0,0,0,1,0,0,0,2,20,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,264,        return iYears;,1,0,0,0,0,1,0,0,0,2,14,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,268,        return iYear;,1,0,0,0,0,1,0,0,0,2,13,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,272,        return iYearOfEra;,1,0,0,0,0,1,0,0,0,2,18,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,276,        return iYearOfCentury;,1,0,0,0,0,1,0,0,0,2,22,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,280,        return iCenturies;,1,0,0,0,0,1,0,0,0,2,18,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,284,        return iCenturyOfEra;,1,0,0,0,0,1,0,0,0,2,21,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,288,        return iEras;,1,0,0,0,0,1,0,0,0,2,13,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,292,        return iEra;,1,0,0,0,0,1,0,0,0,2,12,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,308,        return iBase;,1,0,0,0,0,1,0,0,0,2,13,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,319,        Fields fields = new Fields();,1,0,0,1,2,1,0,2,1,6,29,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,320,        if (iBase != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,321,            fields.copyFieldsFrom(iBase);,0,0,0,1,2,0,3,0,0,3,29,7,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,323,        assemble(fields);,0,0,0,1,2,0,2,0,1,4,17,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,6,1,0,1,4,1,0,0,2,6,65,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,6,1,0,1,4,1,0,0,2,6,66,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,6,1,0,1,4,1,0,0,2,6,66,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,6,1,0,1,4,1,0,0,2,6,64,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,6,1,0,1,4,1,0,0,2,6,67,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,332,            iDays      = (f = fields.days)      != null ? f : super.days();,6,1,0,1,4,1,0,0,2,6,63,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,6,1,0,1,4,1,0,0,2,6,64,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,6,1,0,1,4,1,0,0,2,6,68,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,6,1,0,1,4,1,0,0,2,6,65,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,336,            iYears     = (f = fields.years)     != null ? f : super.years();,6,1,0,1,4,1,0,0,2,6,64,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,6,1,0,1,4,1,0,0,2,6,68,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,6,1,0,1,4,1,0,0,2,6,63,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,6,1,0,1,4,1,0,0,2,6,91,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,6,1,0,1,4,1,0,0,2,6,88,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,6,1,0,1,4,1,0,0,2,6,91,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,6,1,0,1,4,1,0,0,2,6,88,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,6,1,0,1,4,1,0,0,2,6,89,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,6,1,0,1,4,1,0,0,2,6,88,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,6,1,0,1,4,1,0,0,2,6,86,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,6,1,0,1,4,1,0,0,2,6,91,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,6,1,0,1,4,1,0,0,2,6,90,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,6,1,0,1,4,1,0,0,2,6,95,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,6,1,0,1,4,1,0,0,2,6,89,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,6,1,0,1,4,1,0,0,2,6,86,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,6,1,0,1,4,1,0,0,2,6,87,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,6,1,0,1,4,1,0,0,2,6,86,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,6,1,0,1,4,1,0,0,2,6,91,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,6,1,0,1,4,1,0,0,2,6,85,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,6,1,0,1,4,1,0,0,2,6,94,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,6,1,0,1,4,1,0,0,2,6,88,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,361,            iYear               = (f = fields.year)               != null ? f : super.year();,6,1,0,1,4,1,0,0,2,6,81,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,6,1,0,1,4,1,0,0,2,6,86,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,6,1,0,1,4,1,0,0,2,6,90,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,6,1,0,1,4,1,0,0,2,6,89,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,365,            iEra                = (f = fields.era)                != null ? f : super.era();,6,1,0,1,4,1,0,0,2,6,80,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,369,        if (iBase == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,370,            flags = 0;,1,0,0,0,0,0,0,0,1,2,10,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,372,            flags = ,1,0,0,0,0,0,0,0,1,2,7,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,385,        iBaseFlags = flags;,2,0,0,0,0,0,0,0,1,2,19,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,386,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,4,0,0,4,70,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,13,37,"        super(chronology, 2);",1,0,0,0,2,1,0,0,1,4,21,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,13,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());",0,0,0,1,6,1,4,0,1,5,78,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,52,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,53,        iMax = iChronology.getMaxMonth();,1,0,0,1,2,0,2,0,1,5,33,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,54,        iLeapMonth = leapMonth;,2,0,0,0,0,0,0,0,1,2,23,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,55,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,55,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.0013,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,56,        iUnitMillis = unitMillis;,2,0,0,0,0,0,0,0,1,2,25,4,0.0013,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,57,        iDurationField = new LinkedDurationField(type.getDurationType());,1,0,0,2,4,1,2,1,2,7,65,4,0.0013,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,137,        return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,4,0.0013,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,50,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0013,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,51,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0013,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,54,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0013,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,55,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,58,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.0013,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,69,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeField,13,33,public abstract class DateTimeField {,1,0,0,0,1,3,0,0,2,4,37,1,0.0013,0,0
defect4j,time,org/joda/time/DurationField,13,30,public abstract class DurationField implements Comparable<DurationField> {,1,0,0,0,1,4,0,2,2,5,74,1,0.0013,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,151,        LinkedDurationField(DurationFieldType type) {,2,0,0,1,3,0,0,1,0,4,45,3,0.0013,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,152,            super(type);,1,0,0,1,2,1,0,0,1,5,12,4,0.0013,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,153,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,47,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0013,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,48,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0013,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,51,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0013,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,66,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,131,"        super(base, param);",2,0,0,0,2,1,0,0,1,4,19,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,126,    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];,1,0,1,0,4,4,0,2,3,6,77,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,133,        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {,2,3,0,1,3,1,0,0,0,5,55,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,138,        iMinDaysInFirstWeek = minDaysInFirstWeek;,2,0,0,0,0,0,0,0,1,2,41,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,139,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,76,        cMillisField = MillisDurationField.INSTANCE;,3,0,0,0,0,0,0,0,1,2,44,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,77,        cSecondsField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,40,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,79,        cMinutesField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,40,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,81,        cHoursField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,38,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,83,        cHalfdaysField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,41,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,85,        cDaysField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,37,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,87,        cWeeksField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,38,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,90,        cMillisOfSecondField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,47,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,93,        cMillisOfDayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,44,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,96,        cSecondOfMinuteField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,47,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,99,        cSecondOfDayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,44,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,102,        cMinuteOfHourField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,45,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,105,        cMinuteOfDayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,44,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,108,        cHourOfDayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,42,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,111,        cHourOfHalfdayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,46,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,114,        cClockhourOfDayField = new ZeroIsMaxDateTimeField,1,0,0,0,0,1,0,1,2,4,49,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,117,        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField,1,0,0,0,0,1,0,1,2,4,53,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,120,        cHalfdayOfDayField = new HalfdayField();,1,0,0,1,2,1,0,1,2,6,40,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,121,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,143,        if ((base = getBase()) != null) {,1,1,0,3,7,1,1,0,2,7,33,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,241,        fields.millis = cMillisField;,3,0,0,0,0,0,0,0,1,2,29,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,242,        fields.seconds = cSecondsField;,3,0,0,0,0,0,0,0,1,2,31,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,243,        fields.minutes = cMinutesField;,3,0,0,0,0,0,0,0,1,2,31,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,244,        fields.hours = cHoursField;,3,0,0,0,0,0,0,0,1,2,27,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,245,        fields.halfdays = cHalfdaysField;,3,0,0,0,0,0,0,0,1,2,33,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,246,        fields.days = cDaysField;,3,0,0,0,0,0,0,0,1,2,25,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,247,        fields.weeks = cWeeksField;,3,0,0,0,0,0,0,0,1,2,27,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,249,        fields.millisOfSecond = cMillisOfSecondField;,3,0,0,0,0,0,0,0,1,2,45,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,250,        fields.millisOfDay = cMillisOfDayField;,3,0,0,0,0,0,0,0,1,2,39,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,251,        fields.secondOfMinute = cSecondOfMinuteField;,3,0,0,0,0,0,0,0,1,2,45,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,252,        fields.secondOfDay = cSecondOfDayField;,3,0,0,0,0,0,0,0,1,2,39,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,253,        fields.minuteOfHour = cMinuteOfHourField;,3,0,0,0,0,0,0,0,1,2,41,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,254,        fields.minuteOfDay = cMinuteOfDayField;,3,0,0,0,0,0,0,0,1,2,39,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,255,        fields.hourOfDay = cHourOfDayField;,3,0,0,0,0,0,0,0,1,2,35,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,256,        fields.hourOfHalfday = cHourOfHalfdayField;,3,0,0,0,0,0,0,0,1,2,43,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,257,        fields.clockhourOfDay = cClockhourOfDayField;,3,0,0,0,0,0,0,0,1,2,45,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,258,        fields.clockhourOfHalfday = cClockhourOfHalfdayField;,3,0,0,0,0,0,0,0,1,2,53,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,259,        fields.halfdayOfDay = cHalfdayOfDayField;,3,0,0,0,0,0,0,0,1,2,41,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,264,        fields.year = new BasicYearDateTimeField(this);,2,0,0,1,2,2,0,1,2,6,47,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,265,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);",4,0,0,0,2,2,0,1,2,5,67,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,268,        DateTimeField field = new OffsetDateTimeField(,1,0,0,0,1,1,0,2,1,5,46,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,270,        fields.centuryOfEra = new DividedDateTimeField(,2,0,0,0,1,1,0,1,2,5,47,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,273,        field = new RemainderDateTimeField(,1,0,0,0,1,1,0,1,2,5,35,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,275,        fields.yearOfCentury = new OffsetDateTimeField(,2,0,0,0,1,1,0,1,2,5,47,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,278,        fields.era = new GJEraDateTimeField(this);,2,0,0,1,2,2,0,1,2,6,42,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,279,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);",4,0,0,0,2,2,0,1,2,5,67,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,280,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);",4,0,0,0,2,2,0,1,2,5,72,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,281,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);",4,0,0,0,2,2,0,1,2,5,70,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,282,        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);,2,0,0,1,2,2,0,1,2,6,58,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,283,        fields.weekyear = new BasicWeekyearDateTimeField(this);,2,0,0,1,2,2,0,1,2,6,55,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,284,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);",4,0,0,0,2,2,0,1,2,5,81,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,286,        field = new RemainderDateTimeField(,1,0,0,0,1,1,0,1,2,5,35,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,288,        fields.weekyearOfCentury = new OffsetDateTimeField(,2,0,0,0,1,1,0,1,2,5,51,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,294,        fields.years = fields.year.getDurationField();,4,0,0,1,2,0,1,0,1,5,46,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,295,        fields.centuries = fields.centuryOfEra.getDurationField();,4,0,0,1,2,0,1,0,1,5,58,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,296,        fields.months = fields.monthOfYear.getDurationField();,4,0,0,1,2,0,1,0,1,5,54,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,297,        fields.weekyears = fields.weekyear.getDurationField();,4,0,0,1,2,0,1,0,1,5,54,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,298,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,691,        return 12;,0,0,0,0,0,1,0,0,0,1,10,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,50,abstract class BasicChronology extends AssembledChronology {,1,0,0,0,1,3,0,1,1,5,60,1,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());",0,0,0,1,6,1,4,0,1,5,70,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,46,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,119,        return iChronology.getMaxYear();,0,0,0,1,2,1,2,0,0,4,32,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,46,        super(DateTimeFieldType.era());,0,0,0,2,4,1,2,0,1,5,31,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,47,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,70,    private UnsupportedDurationField(DurationFieldType type) {,2,0,0,1,3,1,0,1,1,6,58,2,0.0013,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,71,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0013,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,49,        if (cCache == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0013,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",1,0,0,1,2,1,0,3,2,6,69,6,0.0013,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,51,            field = null;,1,0,0,0,0,0,0,0,1,2,13,6,0.0013,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,53,            field = cCache.get(type);,1,0,0,1,2,0,3,0,1,5,25,6,0.0013,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,55,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0013,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,56,            field = new UnsupportedDurationField(type);,2,0,0,1,2,1,0,1,2,6,43,6,0.0013,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,57,"            cCache.put(type, field);",0,0,0,0,2,0,4,0,0,2,24,7,0.0013,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,59,        return field;,1,0,0,0,0,1,0,0,0,2,13,4,0.0013,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,92,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,148,"        super(base, param, minDaysInFirstWeek);",3,0,0,0,2,1,0,0,1,4,39,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,149,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",1,0,0,1,6,4,0,6,4,6,122,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,3,0,0,1,2,0,1,0,2,5,45,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,100,"        return getInstance(zone, 4);",0,0,0,0,2,1,2,0,1,4,28,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,111,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,115,        synchronized (cCache) {,1,0,0,1,3,1,0,0,0,4,23,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,116,            GregorianChronology[] chronos = cCache.get(zone);,1,0,0,1,4,0,3,1,0,5,49,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,117,            if (chronos == null) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,118,                chronos = new GregorianChronology[7];,1,0,0,0,2,1,0,1,1,5,37,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,119,"                cCache.put(zone, chronos);",0,0,0,0,2,0,4,0,0,2,26,9,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,122,                chrono = chronos[minDaysInFirstWeek - 1];,2,1,1,0,2,0,0,0,1,5,41,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,126,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,127,            if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,128,                if (zone == DateTimeZone.UTC) {,3,1,0,1,3,1,0,0,0,5,31,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",2,0,0,0,2,1,0,1,2,5,65,10,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,135,                chronos[minDaysInFirstWeek - 1] = chrono;,2,1,1,0,2,0,0,0,1,5,41,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,137,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,138,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,191,        if (getBase() == null) {,0,1,0,2,5,1,1,0,1,6,24,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,192,            super.assemble(fields);,2,0,0,1,2,1,0,0,0,4,23,7,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,194,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,225,        return MAX_YEAR;,1,0,0,0,0,1,0,0,0,2,16,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,229,        return MILLIS_PER_YEAR;,1,0,0,0,0,1,0,0,0,2,23,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,237,        return MILLIS_PER_MONTH;,1,0,0,0,0,1,0,0,0,2,24,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,45,public final class GregorianChronology extends BasicGJChronology {,1,0,0,0,1,4,0,1,2,5,66,1,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,75,"        super(base, param, minDaysInFirstWeek);",3,0,0,0,2,1,0,0,1,4,39,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,76,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,1,0,0,0,3,4,0,0,3,4,55,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,1,0,0,0,3,4,0,0,3,4,55,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,1,0,0,0,2,2,0,0,1,4,47,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,1,0,0,0,2,2,0,0,1,4,47,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,56,        long minSum = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,57,        long maxSum = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,58,        for (int i = 0; i < 11; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],1,1,1,0,2,1,0,0,0,5,41,7,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,61,            minSum += millis;,2,0,0,0,0,0,0,0,1,2,17,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,2,1,1,0,2,0,0,0,1,5,48,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],1,1,1,0,2,0,0,0,1,5,36,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,66,            maxSum += millis;,2,0,0,0,0,0,0,0,1,2,17,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,2,1,1,0,2,0,0,0,1,5,48,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,69,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,43,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,44,        iUnitMillis = unitMillis;,2,0,0,0,0,0,0,0,1,2,25,4,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,54,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,63,        return iUnitMillis;,1,0,0,0,0,1,0,0,0,2,19,4,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,57,"        super(type, unit);",2,0,0,0,2,1,0,0,1,4,18,3,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,59,        if (!range.isPrecise()) {,0,0,0,2,5,1,2,0,1,5,25,4,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,63,        long rangeMillis = range.getUnitMillis();,1,0,0,1,2,1,2,0,0,5,41,5,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,64,        iRange = (int)(rangeMillis / getUnitMillis());,2,1,0,2,6,1,1,0,2,7,46,4,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,65,        if (iRange < 2) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,69,        iRangeField = range;,2,0,0,0,0,0,0,0,1,2,20,4,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,48,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,50,        if (!unit.isPrecise()) {,0,0,0,2,5,1,2,0,1,5,24,4,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,54,        iUnitMillis = unit.getUnitMillis();,1,0,0,1,2,0,2,0,1,5,35,4,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,55,        if (iUnitMillis < 1) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,59,        iUnitField = unit;,2,0,0,0,0,0,0,0,1,2,18,4,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,150,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0013,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,154,        return iUnitMillis;,1,0,0,0,0,1,0,0,0,2,19,4,0.0013,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,45,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.0013,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,46,        if (field.getMinimumValue() != 0) {,0,1,0,2,5,1,2,0,0,5,35,4,0.0013,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,13,54,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.0013,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,13,55,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0013,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,13,58,        if (!field.isSupported()) {,0,0,0,2,5,1,2,0,1,5,27,4,0.0013,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,13,61,        iField = field;,2,0,0,0,0,0,0,0,1,2,15,4,0.0013,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,13,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,13,70,        return iField;,1,0,0,0,0,1,0,0,0,2,14,4,0.0013,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,13,86,        return iField.getDurationField();,0,0,0,1,2,1,2,0,0,4,33,5,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,750,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);",2,0,0,1,4,1,2,0,1,6,68,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,751,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,40,"        super(yearField, DateTimeFieldType.yearOfEra());",1,0,0,1,4,1,2,0,1,6,48,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,41,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,93,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,97,        return getWrappedField().getMaximumValue();,0,0,0,1,4,1,2,0,1,5,43,5,0.0013,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",7,1,0,2,6,1,2,0,0,6,100,4,0.0013,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",7,0,0,0,2,1,0,0,0,3,64,4,0.0013,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,59,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,73,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.0013,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,75,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0013,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,79,        iOffset = offset;,2,0,0,0,0,0,0,0,1,2,17,4,0.0013,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,81,        if (minValue < (field.getMinimumValue() + offset)) {,2,2,0,3,7,1,2,0,0,6,52,4,0.0013,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,82,            iMin = field.getMinimumValue() + offset;,2,1,0,1,2,0,2,0,1,6,40,6,0.0013,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,86,        if (maxValue > (field.getMaximumValue() + offset)) {,2,2,0,3,7,1,2,0,0,6,52,4,0.0013,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,87,            iMax = field.getMaximumValue() + offset;,2,1,0,1,2,0,2,0,1,6,40,6,0.0013,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,91,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,174,        return iMin;,1,0,0,0,0,1,0,0,0,2,12,4,0.0013,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,183,        return iMax;,1,0,0,0,0,1,0,0,0,2,12,4,0.0013,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,56,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.0013,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,58,        if (divisor < 2) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0013,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,62,        DurationField unitField = field.getDurationField();,1,0,0,1,2,0,2,1,0,5,51,4,0.0013,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,63,        if (unitField == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0013,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,66,            iDurationField = new ScaledDurationField(,1,0,0,0,1,1,0,1,2,5,41,6,0.0013,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,70,        iDivisor = divisor;,2,0,0,0,0,0,0,0,1,2,19,4,0.0013,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,72,        int i = field.getMinimumValue();,1,0,0,1,2,1,2,0,0,5,32,5,0.0013,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,73,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,6,5,0,2,6,1,0,0,0,5,59,5,0.0013,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,75,        int j = field.getMaximumValue();,1,0,0,1,2,1,2,0,0,5,32,5,0.0013,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,76,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,6,5,0,2,6,1,0,0,0,5,59,5,0.0013,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,78,        iMin = min;,2,0,0,0,0,0,0,0,1,2,11,4,0.0013,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,79,        iMax = max;,2,0,0,0,0,0,0,0,1,2,11,4,0.0013,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,80,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,182,        return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,4,0.0013,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,52,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.0013,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,54,        if (divisor < 2) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0013,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,58,        DurationField rangeField = field.getDurationField();,1,0,0,1,2,0,2,1,0,5,52,4,0.0013,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,59,        if (rangeField == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0013,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,62,            iRangeField = new ScaledDurationField(,1,0,0,0,1,1,0,1,2,5,38,6,0.0013,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,66,        iDivisor = divisor;,2,0,0,0,0,0,0,0,1,2,19,4,0.0013,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,67,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,76,"        this(dividedField, dividedField.getType());",1,0,0,1,4,1,2,0,0,5,43,4,0.0013,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,77,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,87,"        super(dividedField.getWrappedField(), type);",1,0,0,1,4,1,2,0,1,6,44,3,0.0013,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,88,        iDivisor = dividedField.iDivisor;,3,0,0,0,0,0,0,0,1,2,33,4,0.0013,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,89,        iRangeField = dividedField.iDurationField;,3,0,0,0,0,0,0,0,1,2,42,4,0.0013,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,90,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,148,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0013,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,158,        return iDivisor - 1;,1,1,0,0,0,1,0,0,0,3,20,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,13,45,"        super(DateTimeFieldType.dayOfWeek(), days);",1,0,0,1,4,1,2,0,1,6,43,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,13,46,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,13,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,41,"        super(DateTimeFieldType.dayOfMonth(), days);",1,0,0,1,4,1,2,0,1,6,44,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,42,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,43,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,41,"        super(DateTimeFieldType.dayOfYear(), days);",1,0,0,1,4,1,2,0,1,6,43,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,42,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,43,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());",0,0,0,1,6,1,4,0,1,5,74,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,45,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);",1,0,0,1,4,1,2,0,1,6,49,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,43,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.0013,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,436,        Fields() {,1,0,0,1,3,0,0,0,0,3,10,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,437,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,445,                if (isSupported(f = chrono.millis())) {,1,0,0,3,7,1,3,0,2,6,39,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,446,                    millis = f;,2,0,0,0,0,0,0,0,1,2,11,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,448,                if (isSupported(f = chrono.seconds())) {,1,0,0,3,7,1,3,0,2,6,40,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,449,                    seconds = f;,2,0,0,0,0,0,0,0,1,2,12,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,451,                if (isSupported(f = chrono.minutes())) {,1,0,0,3,7,1,3,0,2,6,40,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,452,                    minutes = f;,2,0,0,0,0,0,0,0,1,2,12,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,454,                if (isSupported(f = chrono.hours())) {,1,0,0,3,7,1,3,0,2,6,38,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,455,                    hours = f;,2,0,0,0,0,0,0,0,1,2,10,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,457,                if (isSupported(f = chrono.halfdays())) {,1,0,0,3,7,1,3,0,2,6,41,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,458,                    halfdays = f;,2,0,0,0,0,0,0,0,1,2,13,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,460,                if (isSupported(f = chrono.days())) {,1,0,0,3,7,1,3,0,2,6,37,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,461,                    days = f;,2,0,0,0,0,0,0,0,1,2,9,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,463,                if (isSupported(f = chrono.weeks())) {,1,0,0,3,7,1,3,0,2,6,38,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,464,                    weeks = f;,2,0,0,0,0,0,0,0,1,2,10,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,466,                if (isSupported(f = chrono.weekyears())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,467,                    weekyears = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,469,                if (isSupported(f = chrono.months())) {,1,0,0,3,7,1,3,0,2,6,39,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,470,                    months = f;,2,0,0,0,0,0,0,0,1,2,11,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,472,                if (isSupported(f = chrono.years())) {,1,0,0,3,7,1,3,0,2,6,38,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,473,                    years = f;,2,0,0,0,0,0,0,0,1,2,10,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,475,                if (isSupported(f = chrono.centuries())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,476,                    centuries = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,478,                if (isSupported(f = chrono.eras())) {,1,0,0,3,7,1,3,0,2,6,37,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,485,                if (isSupported(f = chrono.millisOfSecond())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,486,                    millisOfSecond = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,488,                if (isSupported(f = chrono.millisOfDay())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,489,                    millisOfDay = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,491,                if (isSupported(f = chrono.secondOfMinute())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,492,                    secondOfMinute = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,494,                if (isSupported(f = chrono.secondOfDay())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,495,                    secondOfDay = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,497,                if (isSupported(f = chrono.minuteOfHour())) {,1,0,0,3,7,1,3,0,2,6,45,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,498,                    minuteOfHour = f;,2,0,0,0,0,0,0,0,1,2,17,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,500,                if (isSupported(f = chrono.minuteOfDay())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,501,                    minuteOfDay = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,503,                if (isSupported(f = chrono.hourOfDay())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,504,                    hourOfDay = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,506,                if (isSupported(f = chrono.clockhourOfDay())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,507,                    clockhourOfDay = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,509,                if (isSupported(f = chrono.hourOfHalfday())) {,1,0,0,3,7,1,3,0,2,6,46,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,510,                    hourOfHalfday = f;,2,0,0,0,0,0,0,0,1,2,18,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,1,0,0,3,7,1,3,0,2,6,51,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,513,                    clockhourOfHalfday = f;,2,0,0,0,0,0,0,0,1,2,23,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,515,                if (isSupported(f = chrono.halfdayOfDay())) {,1,0,0,3,7,1,3,0,2,6,45,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,516,                    halfdayOfDay = f;,2,0,0,0,0,0,0,0,1,2,17,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,518,                if (isSupported(f = chrono.dayOfWeek())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,519,                    dayOfWeek = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,521,                if (isSupported(f = chrono.dayOfMonth())) {,1,0,0,3,7,1,3,0,2,6,43,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,522,                    dayOfMonth = f;,2,0,0,0,0,0,0,0,1,2,15,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,524,                if (isSupported(f = chrono.dayOfYear())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,525,                    dayOfYear = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,528,                    weekOfWeekyear = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,530,                if (isSupported(f = chrono.weekyear())) {,1,0,0,3,7,1,3,0,2,6,41,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,531,                    weekyear = f;,2,0,0,0,0,0,0,0,1,2,13,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,1,0,0,3,7,1,3,0,2,6,50,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,534,                    weekyearOfCentury = f;,2,0,0,0,0,0,0,0,1,2,22,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,536,                if (isSupported(f = chrono.monthOfYear())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,537,                    monthOfYear = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,539,                if (isSupported(f = chrono.year())) {,1,0,0,3,7,1,3,0,2,6,37,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,540,                    year = f;,2,0,0,0,0,0,0,0,1,2,9,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,542,                if (isSupported(f = chrono.yearOfEra())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,543,                    yearOfEra = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,545,                if (isSupported(f = chrono.yearOfCentury())) {,1,0,0,3,7,1,3,0,2,6,46,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,546,                    yearOfCentury = f;,2,0,0,0,0,0,0,0,1,2,18,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,548,                if (isSupported(f = chrono.centuryOfEra())) {,1,0,0,3,7,1,3,0,2,6,45,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,549,                    centuryOfEra = f;,2,0,0,0,0,0,0,0,1,2,17,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,551,                if (isSupported(f = chrono.era())) {,1,0,0,3,7,1,3,0,2,6,36,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,552,                    era = f;,2,0,0,0,0,0,0,0,1,2,8,8,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,555,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,558,            return field == null ? false : field.isSupported();,1,1,0,1,2,1,2,0,1,7,51,6,0.0013,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,562,            return field == null ? false : field.isSupported();,1,1,0,1,2,1,2,0,1,7,51,6,0.0013,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,47,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.0013,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,48,        if (scalar == 0 || scalar == 1) {,2,3,0,1,3,1,0,0,0,5,33,4,0.0013,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,51,        iScalar = scalar;,2,0,0,0,0,0,0,0,1,2,17,4,0.0013,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,13,52,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.0013,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,13,53,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0013,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,13,56,        if (!field.isSupported()) {,0,0,0,2,5,1,2,0,1,5,27,4,0.0013,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,13,59,        iField = field;,2,0,0,0,0,0,0,0,1,2,15,4,0.0013,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,13,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,44,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0013,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,38,    public static final DurationField INSTANCE = new MillisDurationField();,1,0,0,1,2,4,0,2,4,6,71,2,0.0013,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,62,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0013,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,71,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0013,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,80,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0013,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,2,4,0,1,4,1,2,0,1,7,68,4,0.0013,0,0
defect4j,time,org/joda/time/DurationFieldType,13,278,            return (1 << iOrdinal);,1,1,0,1,2,1,0,0,0,5,23,6,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,444,            super(name);,1,0,0,1,2,1,0,0,1,5,12,4,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,445,            iOrdinal = ordinal;,2,0,0,0,0,0,0,0,1,2,19,5,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,446,            iUnitType = unitType;,2,0,0,0,0,0,0,0,1,2,21,5,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,447,            iRangeType = rangeType;,2,0,0,0,0,0,0,0,1,2,23,5,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,448,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,452,            return iUnitType;,1,0,0,0,0,1,0,0,0,2,17,5,0.0013,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,457,            return iRangeType;,1,0,0,0,0,1,0,0,0,2,18,5,0.0013,0,0
defect4j,time,org/joda/time/Chronology,13,63,public abstract class Chronology {,1,0,0,0,1,3,0,0,2,4,34,1,0.0013,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,54,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0013,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,55,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0013,0,0
defect4j,time,org/joda/time/DurationFieldType,13,105,        return MILLIS_TYPE;,1,0,0,0,0,1,0,0,0,2,19,4,0.00129,0,0
defect4j,time,org/joda/time/DurationFieldType,13,178,        return MONTHS_TYPE;,1,0,0,0,0,1,0,0,0,2,19,4,0.00126,0,0
defect4j,time,org/joda/time/DurationFieldType,13,187,        return YEARS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,4,0.00126,0,0
defect4j,time,org/joda/time/DurationFieldType,13,160,        return WEEKS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,4,0.00125,0,0
defect4j,time,org/joda/time/DurationFieldType,13,114,        return SECONDS_TYPE;,1,0,0,0,0,1,0,0,0,2,20,4,0.00124,0,0
defect4j,time,org/joda/time/DurationFieldType,13,123,        return MINUTES_TYPE;,1,0,0,0,0,1,0,0,0,2,20,4,0.00124,0,0
defect4j,time,org/joda/time/DurationFieldType,13,132,        return HOURS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,4,0.00124,0,0
defect4j,time,org/joda/time/DurationFieldType,13,151,        return DAYS_TYPE;,1,0,0,0,0,1,0,0,0,2,17,4,0.00124,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,39,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,1,0,0,1,2,4,0,2,4,6,94,2,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,41,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,0,0,0,3,0,1,3,4,80,2,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,47,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();",1,0,0,1,2,1,0,6,1,6,74,4,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,48,"        map.put(""UT"", DateTimeZone.UTC);",2,0,0,0,2,0,2,0,1,4,32,5,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,49,"        map.put(""UTC"", DateTimeZone.UTC);",2,0,0,0,2,0,2,0,1,4,33,5,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,50,"        map.put(""GMT"", DateTimeZone.UTC);",2,0,0,0,2,0,2,0,1,4,33,5,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,51,"        put(map, ""EST"", ""America/New_York"");",0,0,0,0,2,0,2,0,3,3,36,4,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,52,"        put(map, ""EDT"", ""America/New_York"");",0,0,0,0,2,0,2,0,3,3,36,4,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,53,"        put(map, ""CST"", ""America/Chigaco"");",0,0,0,0,2,0,2,0,3,3,35,4,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,54,"        put(map, ""CDT"", ""America/Chigaco"");",0,0,0,0,2,0,2,0,3,3,35,4,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,55,"        put(map, ""MST"", ""America/Denver"");",0,0,0,0,2,0,2,0,3,3,34,4,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,56,"        put(map, ""MDT"", ""America/Denver"");",0,0,0,0,2,0,2,0,3,3,34,4,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,57,"        put(map, ""PST"", ""America/Los_Angeles"");",0,0,0,0,2,0,2,0,3,3,39,4,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,58,"        put(map, ""PDT"", ""America/Los_Angeles"");",0,0,0,0,2,0,2,0,3,3,39,4,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,59,        cZoneNames = Collections.unmodifiableMap(map);,1,0,0,1,2,0,3,0,1,5,46,4,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,63,"            map.put(name, DateTimeZone.forID(id));",0,0,0,1,4,0,6,0,0,3,38,7,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,66,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,64,        } catch (RuntimeException ex) {,1,0,0,1,4,1,0,1,0,5,31,6,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,67,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00123,0,0
defect4j,time,org/joda/time/DateTimeZone,13,214,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0,1,0,2,7,1,4,0,2,6,47,4,0.00123,0,0
defect4j,time,org/joda/time/DateTimeZone,13,223,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",1,1,0,1,2,2,0,1,3,7,90,4,0.00123,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,509,    static class SystemMillisProvider implements MillisProvider {,1,0,0,0,1,3,0,1,1,5,61,2,0.00123,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.00123,0,0
defect4j,time,org/joda/time/DurationFieldType,13,94,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,95,        iName = name;,2,0,0,0,0,0,0,0,1,2,13,4,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,96,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);",2,0,0,0,2,3,0,2,4,5,87,2,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);",2,0,0,0,2,3,0,2,4,5,102,2,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);",2,0,0,0,2,3,0,2,4,5,102,2,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);",2,0,0,0,2,3,0,2,4,5,90,2,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);",2,0,0,0,2,3,0,2,4,5,93,2,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);",2,0,0,0,2,3,0,2,4,5,90,2,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);",2,0,0,0,2,3,0,2,4,5,87,2,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);",2,0,0,0,2,3,0,2,4,5,99,2,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);",2,0,0,0,2,3,0,2,4,5,90,2,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);",2,0,0,0,2,3,0,2,4,5,96,2,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);",2,0,0,0,2,3,0,2,4,5,96,2,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);",2,0,0,0,2,3,0,2,4,5,93,2,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,259,            super(name);,1,0,0,1,2,1,0,0,1,5,12,4,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,260,            iOrdinal = ordinal;,2,0,0,0,0,0,0,0,1,2,19,5,0.00109,0,0
defect4j,time,org/joda/time/DurationFieldType,13,261,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00109,0,0
defect4j,time,org/joda/time/DateTimeZone,13,689,    protected DateTimeZone(String id) {,2,0,0,1,3,1,0,1,1,6,35,2,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,690,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,693,        iID = id;,2,0,0,0,0,0,0,0,1,2,9,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,694,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,95,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",1,0,0,0,2,4,0,2,6,5,81,2,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,115,        setProvider0(null);,0,0,0,1,2,0,1,0,1,4,19,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,116,        setNameProvider0(null);,0,0,0,1,2,0,1,0,1,4,23,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,117,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,204,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,207,"        if (id.equals(""UTC"")) {",0,0,0,2,5,1,2,0,1,5,23,5,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,210,        DateTimeZone zone = cProvider.getZone(id);,1,0,0,1,2,0,3,1,0,5,42,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,211,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,212,            return zone;,1,0,0,0,0,1,0,0,0,2,12,6,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,415,        if (provider == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,416,            provider = getDefaultProvider();,1,0,0,1,2,0,1,0,2,5,32,6,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,418,        Set<String> ids = provider.getAvailableIDs();,1,0,0,1,2,0,2,2,0,5,45,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,419,        if (ids == null || ids.size() == 0) {,1,3,0,2,5,1,2,0,0,6,37,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,423,"        if (!ids.contains(""UTC"")) {",0,0,0,2,5,1,2,0,2,5,27,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,426,"        if (!UTC.equals(provider.getZone(""UTC""))) {",0,0,0,3,7,1,4,0,2,5,43,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,429,        cProvider = provider;,2,0,0,0,0,0,0,0,1,2,21,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,430,        cAvailableIDs = ids;,2,0,0,0,0,0,0,0,1,2,20,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,431,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,443,        Provider provider = null;,1,0,0,0,0,0,0,1,0,2,25,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,446,            String providerClass =,1,0,0,0,0,0,0,1,0,2,22,6,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,448,            if (providerClass != null) {,1,1,0,1,3,1,0,0,0,5,28,6,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,458,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,460,        if (provider == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,462,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");",1,0,0,1,2,1,0,1,3,6,57,8,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,466,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,469,        if (provider == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,473,        return provider;,1,0,0,0,0,1,0,0,0,2,16,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,514,        if (nameProvider == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,515,            nameProvider = getDefaultNameProvider();,1,0,0,1,2,0,1,0,2,5,40,6,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,517,        cNameProvider = nameProvider;,2,0,0,0,0,0,0,0,1,2,29,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,518,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,529,        NameProvider nameProvider = null;,1,0,0,0,0,0,0,1,0,2,33,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,531,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");",1,0,0,1,2,0,2,1,1,6,85,6,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,532,            if (providerClass != null) {,1,1,0,1,3,1,0,0,0,5,28,6,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,542,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,544,        if (nameProvider == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,545,            nameProvider = new DefaultNameProvider();,1,0,0,1,2,1,0,1,2,6,41,6,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,548,        return nameProvider;,1,0,0,0,0,1,0,0,0,2,20,4,0.00104,0,0
defect4j,time,org/joda/time/DateTimeZone,13,706,        return iID;,1,0,0,0,0,1,0,0,0,2,11,4,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,504,        {,0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,3,5,0,1,3,1,0,0,3,6,48,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,509,            iMode = mode;,2,0,0,0,0,0,0,0,1,2,13,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,510,            iMonthOfYear = monthOfYear;,2,0,0,0,0,0,0,0,1,2,27,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,511,            iDayOfMonth = dayOfMonth;,2,0,0,0,0,0,0,0,1,2,25,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,512,            iDayOfWeek = dayOfWeek;,2,0,0,0,0,0,0,0,1,2,23,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,513,            iAdvance = advanceDayOfWeek;,2,0,0,0,0,0,0,0,1,2,28,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,514,            iMillisOfDay = millisOfDay;,2,0,0,0,0,0,0,0,1,2,27,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,515,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,482,"            return new OfYear((char)in.readUnsignedByte(),",0,0,0,1,5,3,2,1,1,6,46,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1176,            super(id);,1,0,0,1,2,1,0,0,1,5,10,4,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1177,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1178,            iStartRecurrence = startRecurrence;,2,0,0,0,0,0,0,0,1,2,35,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1179,            iEndRecurrence = endRecurrence;,2,0,0,0,0,0,0,0,1,2,31,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1180,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1166,"            return new DSTZone(id, (int)readMillis(in), ",1,0,0,1,5,3,2,1,2,7,43,5,0.00104,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,38,        super(id);,1,0,0,1,2,1,0,0,1,5,10,3,0.00104,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,39,        iNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,19,4,0.00104,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,40,        iWallOffset = wallOffset;,2,0,0,0,0,0,0,0,1,2,25,4,0.00104,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,41,        iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,4,0.00104,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,88,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.00104,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,89,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.00104,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,39,    public DefaultNameProvider() {,1,0,0,1,3,1,0,0,1,5,30,2,0.00104,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",1,0,0,1,2,1,1,7,2,7,89,2,0.00104,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,40,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,99,        return new HashMap(7);,0,0,0,1,2,2,0,1,1,5,22,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,82,"        this(resourcePath, null, false);",1,0,0,0,2,1,0,0,1,4,32,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,83,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,106,    {,0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,107,        if (resourcePath == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,110,"        if (!resourcePath.endsWith(""/"")) {",0,0,0,2,5,1,2,0,2,5,34,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,111,            resourcePath += '/';,1,0,0,0,0,0,0,0,2,2,20,6,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,114,        iFileDir = null;,1,0,0,0,0,0,0,0,1,2,16,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,115,        iResourcePath = resourcePath;,2,0,0,0,0,0,0,0,1,2,29,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,117,        if (loader == null && !favorSystemLoader) {,2,2,0,1,3,1,0,0,1,6,43,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,118,            loader = getClass().getClassLoader();,1,0,0,1,4,0,2,0,2,5,37,6,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,121,        iLoader = loader;,2,0,0,0,0,0,0,0,1,2,17,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",1,0,0,2,4,0,2,0,4,5,60,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,124,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,136,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,140,        Object obj = iZoneInfoMap.get(id);,1,0,0,1,2,0,3,1,0,5,34,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,141,        if (obj == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,145,        if (id.equals(obj)) {,0,0,0,2,5,1,3,0,0,4,21,5,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,147,            return loadZoneData(id);,0,0,0,1,2,1,2,0,1,5,24,6,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,150,        if (obj instanceof SoftReference<?>) {,1,0,0,1,3,2,0,1,0,5,38,5,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,152,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,2,0,0,1,2,0,0,4,0,4,68,6,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,153,            DateTimeZone tz = ref.get();,1,0,0,1,2,0,2,1,0,5,28,6,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,154,            if (tz != null) {,1,1,0,1,3,1,0,0,0,5,17,6,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,155,                return tz;,1,0,0,0,0,1,0,0,0,2,10,8,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,174,        return new TreeSet<String>(iZoneInfoMap.keySet());,0,0,0,2,4,2,2,2,1,6,50,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,196,        if (iFileDir != null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,199,            String path = iResourcePath.concat(name);,1,0,0,1,2,0,3,1,0,5,41,6,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,200,            if (iLoader != null) {,1,1,0,1,3,1,0,0,0,5,22,6,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,201,                in = iLoader.getResourceAsStream(path);,1,0,0,1,2,0,3,0,1,5,39,8,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,205,            if (in == null) {,1,1,0,1,3,1,0,0,0,5,17,6,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,214,        return in;,1,0,0,0,0,1,0,0,0,2,10,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,224,        InputStream in = null;,1,0,0,0,0,0,0,1,0,2,22,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,226,            in = openResource(id);,1,0,0,1,2,0,2,0,2,5,22,6,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",1,0,0,0,2,0,4,1,0,4,55,6,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",1,0,0,1,4,1,3,2,1,7,58,7,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,229,            return tz;,1,0,0,0,0,1,0,0,0,2,10,6,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,236,                if (in != null) {,1,1,0,1,3,1,0,0,0,5,17,8,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,237,                    in.close();,0,0,0,1,2,0,2,0,0,3,11,11,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,240,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",1,0,0,1,2,1,0,6,1,6,66,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,253,        DataInputStream din = new DataInputStream(in);,2,0,0,1,2,1,0,2,1,6,46,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,255,"            readZoneInfoMap(din, map);",0,0,0,0,2,0,3,0,1,3,26,6,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,258,                din.close();,0,0,0,1,2,0,2,0,0,3,12,9,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,260,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",2,0,0,1,4,1,2,2,2,7,66,5,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,263,        return map;,1,0,0,0,0,1,0,0,0,2,11,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,274,        int size = din.readUnsignedShort();,1,0,0,1,2,1,2,0,0,5,35,5,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,275,        String[] pool = new String[size];,1,0,1,0,4,1,0,2,0,5,33,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,276,        for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,277,            pool[i] = din.readUTF().intern();,0,0,1,1,6,0,3,0,1,5,33,6,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,281,        size = din.readUnsignedShort();,1,0,0,1,2,0,2,0,1,5,31,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,282,        for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,4,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0,0,1,1,10,0,6,0,0,4,72,9,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,287,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,289,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,95,        if (in instanceof DataInput) {,1,0,0,1,3,2,0,1,0,5,30,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,98,"            return readFrom((DataInput)new DataInputStream(in), id);",1,0,0,1,6,2,2,2,2,7,56,6,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,110,        switch (in.readUnsignedByte()) {,0,0,0,2,5,1,2,0,0,4,32,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0,0,0,0,4,1,6,0,0,3,70,6,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,183,        int v = in.readUnsignedByte();,1,0,0,1,2,1,2,0,0,5,30,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,184,        switch (v >> 6) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,187,            v = (v << (32 - 6)) >> (32 - 6);,2,4,0,2,6,0,0,0,1,5,32,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,188,            return v * (30 * 60000L);,1,2,0,1,2,1,0,0,0,5,25,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,192,            v = (v << (32 - 6)) >> (32 - 30);,2,4,0,2,6,0,0,0,1,5,33,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,193,            v |= (in.readUnsignedByte()) << 16;,1,1,0,2,4,0,2,0,1,6,35,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,194,            v |= (in.readUnsignedByte()) << 8;,1,1,0,2,4,0,2,0,1,6,34,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,195,            v |= (in.readUnsignedByte());,1,0,0,2,4,0,2,0,1,5,29,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,196,            return v * 60000L;,1,1,0,0,0,1,0,0,0,3,18,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,2,4,0,3,10,2,0,0,0,5,46,6,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,201,            w |= (in.readUnsignedByte()) << 24;,1,1,0,2,4,0,2,0,1,6,35,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,202,            w |= (in.readUnsignedByte()) << 16;,1,1,0,2,4,0,2,0,1,6,35,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,203,            w |= (in.readUnsignedByte()) << 8;,1,1,0,2,4,0,2,0,1,6,34,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,204,            w |= (in.readUnsignedByte());,1,0,0,2,4,0,2,0,1,5,29,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,205,            return w * 1000L;,1,1,0,0,0,1,0,0,0,3,17,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,209,            return in.readLong();,0,0,0,1,2,1,2,0,0,4,21,6,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1500,            super(id);,1,0,0,1,2,1,0,0,1,5,10,4,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1501,            iTransitions = transitions;,2,0,0,0,0,0,0,0,1,2,27,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1502,            iWallOffsets = wallOffsets;,2,0,0,0,0,0,0,0,1,2,27,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1503,            iStandardOffsets = standardOffsets;,2,0,0,0,0,0,0,0,1,2,35,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1504,            iNameKeys = nameKeys;,2,0,0,0,0,0,0,0,1,2,21,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1505,            iTailZone = tailZone;,2,0,0,0,0,0,0,0,1,2,21,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1506,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1341,            int poolSize = in.readUnsignedShort();,1,0,0,1,2,1,2,0,0,5,38,6,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1342,            String[] pool = new String[poolSize];,1,0,1,0,4,1,0,2,0,5,37,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1343,            for (int i=0; i<poolSize; i++) {,4,1,0,1,3,2,0,0,1,6,32,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1344,                pool[i] = in.readUTF();,0,0,1,1,4,0,2,0,1,5,23,7,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1347,            int size = in.readInt();,1,0,0,1,2,1,2,0,0,5,24,6,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1348,            long[] transitions = new long[size];,1,0,1,0,4,3,0,0,0,4,36,6,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1349,            int[] wallOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,34,6,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1350,            int[] standardOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,38,6,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1351,            String[] nameKeys = new String[size];,1,0,1,0,4,1,0,2,0,5,37,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1353,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1354,                transitions[i] = readMillis(in);,0,0,1,1,4,0,2,0,2,5,32,7,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1355,                wallOffsets[i] = (int)readMillis(in);,0,0,1,1,6,1,2,0,2,6,37,7,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1356,                standardOffsets[i] = (int)readMillis(in);,0,0,1,1,6,1,2,0,2,6,41,7,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1359,                    if (poolSize < 256) {,1,1,0,1,3,1,0,0,0,5,21,9,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1360,                        index = in.readUnsignedByte();,1,0,0,1,2,0,2,0,1,5,30,11,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1364,                    nameKeys[i] = pool[index];,0,0,1,0,4,0,0,0,1,3,26,9,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1367,                },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1370,            DSTZone tailZone = null;,1,0,0,0,0,0,0,1,0,2,24,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1371,            if (in.readBoolean()) {,0,0,0,2,5,1,2,0,0,4,23,6,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1372,"                tailZone = DSTZone.readFrom(in, id);",1,0,0,0,2,0,4,0,1,4,36,7,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1375,            return new PrecalculatedZone,0,0,0,0,0,2,0,1,1,3,28,5,0.00104,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,87,        super(zone.getID());,0,0,0,2,4,1,2,0,1,5,20,3,0.00104,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,84,    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];,2,1,0,0,4,3,0,2,2,6,63,2,0.00104,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,88,        iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,4,0.00104,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,89,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",1,0,0,1,2,0,2,0,2,5,67,6,0.00104,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,42,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,45,        if (i == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.00104,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,48,            cacheSize = 512; // (1 << 9),1,0,0,1,2,0,0,0,1,4,28,6,0.00104,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,61,        cInfoCacheMask = cacheSize - 1;,2,1,0,0,0,0,0,0,1,3,31,4,0.00104,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,68,        if (zone instanceof CachedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,41,5,0.00104,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,71,        return new CachedDateTimeZone(zone);,1,0,0,1,2,2,0,1,1,6,36,4,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",4,0,0,0,3,1,0,2,0,4,59,3,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,748,            iOfYear = ofYear;,2,0,0,0,0,0,0,0,1,2,17,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,749,            iNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,19,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,750,            iSaveMillis = saveMillis;,2,0,0,0,0,0,0,0,1,2,25,5,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,751,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00104,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0,0,0,1,10,3,7,1,2,6,78,5,0.00104,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,1,6,1,6,0,2,5,79,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,109,        iDateTimeFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,110,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,111,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,112,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,113,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,114,        iLowerBound = lowerBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,115,        iUpperBound = upperBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,116,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,117,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0,0,0,1,6,1,5,0,2,5,70,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,130,        iDateTimeFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,131,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,132,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,133,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,134,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,135,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,136,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,137,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,138,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,1,6,1,6,0,2,5,79,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,151,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,152,        iDurationFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,153,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,154,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,155,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,156,        iLowerBound = lowerBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,157,        iUpperBound = upperBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,158,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,159,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0,0,0,0,4,1,5,0,2,4,69,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,172,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,173,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,174,        iFieldName = fieldName;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,175,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,176,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,177,        iLowerBound = lowerBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,178,        iUpperBound = upperBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,179,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,189,"        super(createMessage(fieldType.getName(), value));",0,0,0,1,6,1,4,0,2,5,49,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,190,        iDateTimeFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,191,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,192,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,193,        iStringValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,194,        iNumberValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,195,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,196,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,197,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,198,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,207,"        super(createMessage(fieldType.getName(), value));",0,0,0,1,6,1,4,0,2,5,49,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,208,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,209,        iDurationFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,210,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,211,        iStringValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,212,        iNumberValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,213,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,214,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,215,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,216,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,225,"        super(createMessage(fieldName, value));",0,0,0,0,4,1,3,0,2,4,39,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,226,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,227,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,228,        iFieldName = fieldName;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,229,        iStringValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,230,        iNumberValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,231,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,232,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,233,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,234,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,41,        StringBuilder buf = new StringBuilder(),1,0,0,1,2,1,0,2,1,6,39,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,44,        if (lowerBound == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,45,            if (upperBound == null) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,46,"                buf.append(""is not supported"");",0,0,0,1,2,0,2,0,1,4,31,9,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,48,"                buf.append(""must not be larger than "").append(upperBound);",0,0,0,1,4,0,4,0,1,4,58,9,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,50,        } else if (upperBound == null) {,1,1,0,1,4,2,0,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0,0,0,1,4,0,4,0,1,4,59,8,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,53,"            buf.append(""must be in the range ["")",0,0,0,1,3,0,2,0,1,4,36,12,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,59,        if (explain != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,60,"            buf.append("": "").append(explain);",0,0,0,1,4,0,4,0,1,4,33,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,63,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",1,0,0,1,4,1,1,2,2,7,55,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,76,        if (value == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,77,"            buf.append(""null"");",0,0,0,1,2,0,2,0,1,4,19,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,79,"            buf.append('""');",0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,80,            buf.append(value);,0,0,0,1,2,0,3,0,0,3,18,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,81,"            buf.append('""');",0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0,0,0,1,8,1,6,0,3,5,77,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,86,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,243,        return iDateTimeFieldType;,1,0,0,0,0,1,0,0,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,252,        return iDurationFieldType;,1,0,0,0,0,1,0,0,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,261,        return iFieldName;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,270,        return iNumberValue;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,279,        return iStringValue;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,288,        String value = iStringValue;,2,0,0,0,0,0,0,1,0,2,28,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,289,        if (value == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,290,            value = String.valueOf(iNumberValue);,1,0,0,1,2,0,3,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,292,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,301,        return iLowerBound;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,310,        return iUpperBound;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,314,        return iMessage;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,323,        if (iMessage == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,324,            iMessage = message;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,325,        } else if (message != null) {,1,1,0,1,4,2,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,326,"            iMessage = message + "": "" + iMessage;",3,1,0,0,0,0,0,0,2,3,37,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,13,328,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,378,        return iName;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,410,        return getField(chronology).isSupported();,0,0,0,1,4,1,3,0,1,5,42,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,419,        return getName();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,41,public abstract class DateTimeFieldType implements Serializable {,1,0,0,0,1,4,0,1,2,5,65,1,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,216,        return iName;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,234,        return getField(chronology).isSupported();,0,0,0,1,4,1,3,0,1,5,42,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,243,        return getName();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,106,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,107,        type = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,29,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,108,        chrono = DateTimeUtils.getChronology(chrono);,1,0,0,1,2,0,3,0,1,5,45,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,109,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,110,"        iValues = chrono.get(this, startInstant, endInstant);",1,0,0,0,2,1,4,0,1,5,53,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,111,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,122,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,123,        type = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,29,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,124,        if (startInstant == null && endInstant == null) {,2,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,125,            iType = type;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,126,            iValues = new int[size()];,1,0,0,1,4,2,1,0,2,6,26,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,128,            long startMillis = DateTimeUtils.getInstantMillis(startInstant);,1,0,0,1,2,1,3,0,0,5,64,7,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,129,            long endMillis = DateTimeUtils.getInstantMillis(endInstant);,1,0,0,1,2,1,3,0,0,5,60,7,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,130,"            Chronology chrono = DateTimeUtils.getIntervalChronology(startInstant, endInstant);",1,0,0,0,2,0,4,1,0,4,82,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,131,            iType = type;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,132,"            iValues = chrono.get(this, startMillis, endMillis);",1,0,0,0,2,1,4,0,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,134,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,155,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,156,        if (start == null || end == null) {,2,3,0,1,3,1,0,0,0,5,35,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,157,"            throw new IllegalArgumentException(""ReadablePartial objects must not be null"");",0,0,0,1,2,2,0,1,2,5,79,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,159,        if (start instanceof BaseLocal && end instanceof BaseLocal && start.getClass() == end.getClass()) {,2,2,0,2,7,3,4,2,0,7,99,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,161,            type = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,29,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,162,            long startMillis = ((BaseLocal) start).getLocalMillis();,2,0,0,2,6,1,1,1,0,6,56,7,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,163,            long endMillis = ((BaseLocal) end).getLocalMillis();,2,0,0,2,6,1,1,1,0,6,52,7,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,164,            Chronology chrono = start.getChronology();,1,0,0,1,2,0,2,1,0,5,42,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,165,            chrono = DateTimeUtils.getChronology(chrono);,1,0,0,1,2,0,3,0,1,5,45,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,166,            iType = type;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,167,"            iValues = chrono.get(this, startMillis, endMillis);",1,0,0,0,2,1,4,0,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,168,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,169,            if (start.size() != end.size()) {,0,1,0,2,7,1,4,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,170,"                throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");",0,0,0,1,2,2,0,1,2,5,95,8,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,172,"            for (int i = 0, isize = start.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,55,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,173,                if (start.getFieldType(i) != end.getFieldType(i)) {,0,1,0,2,7,1,6,0,0,5,51,8,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,174,"                    throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");",0,0,0,1,2,2,0,1,2,5,95,10,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,177,            if (DateTimeUtils.isContiguous(start) == false) {,0,1,0,2,5,1,3,0,1,6,49,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,178,"                throw new IllegalArgumentException(""ReadablePartial objects must be contiguous"");",0,0,0,1,2,2,0,1,2,5,81,8,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,180,            iType = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,30,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,181,            Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();,1,0,0,2,6,0,5,1,0,5,81,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,182,"            iValues = chrono.get(this, chrono.set(start, 0L), chrono.set(end, 0L));",1,0,0,0,6,1,8,0,1,5,71,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,184,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,194,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,195,        type = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,29,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,196,        long startMillis = DateTimeUtils.getInstantMillis(startInstant);,1,0,0,1,2,1,3,0,0,5,64,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,197,        long durationMillis = DateTimeUtils.getDurationMillis(duration);,1,0,0,1,2,1,3,0,0,5,64,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,198,"        long endMillis = FieldUtils.safeAdd(startMillis, durationMillis);",1,0,0,0,2,1,4,0,0,4,65,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,199,        Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);,1,0,0,1,2,0,3,1,0,5,69,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,200,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,201,"        iValues = chrono.get(this, startMillis, endMillis);",1,0,0,0,2,1,4,0,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,202,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,212,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,213,        type = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,29,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,214,        long durationMillis = DateTimeUtils.getDurationMillis(duration);,1,0,0,1,2,1,3,0,0,5,64,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,215,        long endMillis = DateTimeUtils.getInstantMillis(endInstant);,1,0,0,1,2,1,3,0,0,5,60,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,216,"        long startMillis = FieldUtils.safeSubtract(endMillis, durationMillis);",1,0,0,0,2,1,4,0,0,4,70,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,217,        Chronology chrono = DateTimeUtils.getInstantChronology(endInstant);,1,0,0,1,2,0,3,1,0,5,67,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,218,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,219,"        iValues = chrono.get(this, startMillis, endMillis);",1,0,0,0,2,1,4,0,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,220,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,231,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,235,        iType = PeriodType.standard();,1,0,0,1,2,0,2,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,236,"        int[] values = ISOChronology.getInstanceUTC().get(DUMMY_PERIOD, duration);",1,0,0,1,6,1,5,0,0,5,74,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,237,        iValues = new int[8];,1,0,0,0,2,2,0,0,1,4,21,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,238,"        System.arraycopy(values, 0, iValues, 4, 4);",0,0,0,0,2,0,4,0,0,2,43,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,239,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,271,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,272,        PeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);,1,0,0,1,4,0,4,1,0,5,86,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,273,        type = (type == null ? converter.getPeriodType(period) : type);,3,1,0,2,4,0,3,0,1,6,63,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,274,        type = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,29,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,275,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,276,        if (this instanceof ReadWritablePeriod) {,0,0,0,1,3,3,0,1,0,4,41,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,277,            iValues = new int[size()];,1,0,0,1,4,2,1,0,2,6,26,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,278,            chrono = DateTimeUtils.getChronology(chrono);,1,0,0,1,2,0,3,0,1,5,45,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,279,"            converter.setInto((ReadWritablePeriod) this, period, chrono);",0,0,0,1,4,1,4,1,0,5,61,7,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,281,"            iValues = new MutablePeriod(period, type, chrono).getValues();",4,0,0,1,4,1,1,1,2,7,62,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,283,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,350,        long startMillis = DateTimeUtils.getInstantMillis(startInstant);,1,0,0,1,2,1,3,0,0,5,64,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,351,        Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);,1,0,0,1,2,0,3,1,0,5,69,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,352,"        long endMillis = chrono.add(this, startMillis, 1);",1,0,0,0,2,2,3,0,0,4,50,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,353,"        return new Duration(startMillis, endMillis);",2,0,0,0,2,2,0,1,1,5,44,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,374,        long endMillis = DateTimeUtils.getInstantMillis(endInstant);,1,0,0,1,2,1,3,0,0,5,60,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,375,        Chronology chrono = DateTimeUtils.getInstantChronology(endInstant);,1,0,0,1,2,0,3,1,0,5,67,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,376,"        long startMillis = chrono.add(this, endMillis, -1);",1,0,0,0,2,2,3,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,377,"        return new Duration(startMillis, endMillis);",2,0,0,0,2,2,0,1,1,5,44,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,393,                throw new IllegalArgumentException(,0,0,0,0,1,2,0,1,1,4,35,8,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,409,        if (period == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,410,            setValues(new int[size()]);,0,0,0,2,6,2,2,0,2,5,27,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,412,            setPeriodInternal(period);,0,0,0,1,2,0,2,0,1,4,26,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,414,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,420,        int[] newValues = new int[size()];,1,0,0,1,6,3,1,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,421,"        for (int i = 0, isize = period.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,56,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,422,            DurationFieldType type = period.getFieldType(i);,1,0,0,1,2,0,3,1,0,5,48,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,423,            int value = period.getValue(i);,1,0,0,1,2,1,3,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,424,"            checkAndUpdate(type, newValues, value);",0,0,0,0,2,0,4,0,1,3,39,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,426,        setValues(newValues);,0,0,0,1,2,0,2,0,1,4,21,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,427,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,444,"        int[] newValues = setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis);",1,0,0,0,4,1,9,0,1,5,97,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,445,        setValues(newValues);,0,0,0,1,2,0,2,0,1,4,21,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,446,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,474,"        setFieldInto(iValues, field, value);",0,0,0,0,2,0,4,0,1,3,36,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,475,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,486,        int index = indexOf(field);,1,0,0,1,2,1,2,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,487,        if (index == -1) {,1,1,0,1,3,1,0,0,1,6,18,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,488,            if (value != 0 || field == null) {,2,3,0,1,3,1,0,0,0,5,34,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,489,                throw new IllegalArgumentException(,0,0,0,0,1,2,0,1,1,4,35,8,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,493,            values[index] = value;,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,495,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,505,"        addFieldInto(iValues, field, value);",0,0,0,0,2,0,4,0,1,3,36,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,506,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,517,        int index = indexOf(field);,1,0,0,1,2,1,2,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,518,        if (index == -1) {,1,1,0,1,3,1,0,0,1,6,18,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,519,            if (value != 0 || field == null) {,2,3,0,1,3,1,0,0,0,5,34,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,520,                throw new IllegalArgumentException(,0,0,0,0,1,2,0,1,1,4,35,8,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,524,"            values[index] = FieldUtils.safeAdd(values[index], value);",0,0,1,0,6,0,3,0,1,4,57,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,526,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,535,        if (period != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,536,"            setValues(mergePeriodInto(getValues(), period));",0,0,0,1,6,0,4,0,3,4,48,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,538,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,549,"        for (int i = 0, isize = period.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,56,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,550,            DurationFieldType type = period.getFieldType(i);,1,0,0,1,2,0,3,1,0,5,48,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,551,            int value = period.getValue(i);,1,0,0,1,2,1,3,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,552,"            checkAndUpdate(type, values, value);",0,0,0,0,2,0,4,0,1,3,36,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,554,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,564,        if (period != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,565,"            setValues(addPeriodInto(getValues(), period));",0,0,0,1,6,0,4,0,3,4,46,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,567,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,578,"        for (int i = 0, isize = period.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,56,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,579,            DurationFieldType type = period.getFieldType(i);,1,0,0,1,2,0,3,1,0,5,48,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,580,            int value = period.getValue(i);,1,0,0,1,2,1,3,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,581,            if (value != 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,582,                int index = indexOf(type);,1,0,0,1,2,1,2,0,1,6,26,9,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,583,                if (index == -1) {,1,1,0,1,3,1,0,0,1,6,18,8,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,584,                    throw new IllegalArgumentException(,0,0,0,0,1,2,0,1,1,4,35,10,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,587,"                    values[index] = FieldUtils.safeAdd(getValue(index), value);",0,0,1,1,6,0,5,0,2,5,59,10,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,591,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,603,        iValues[index] = value;,1,0,1,0,2,0,0,0,1,4,23,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,604,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,616,"        System.arraycopy(values, 0, iValues, 0, iValues.length);",2,0,0,0,2,0,4,0,0,3,56,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,617,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,68,        return getPeriodType().getFieldType(index);,0,0,0,1,4,1,3,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,79,        DurationFieldType[] result = new DurationFieldType[size()];,1,0,0,1,6,1,1,2,1,7,59,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,80,        for (int i = 0; i < result.length; i++) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,81,            result[i] = getFieldType(i);,0,0,1,1,4,0,2,0,2,5,28,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,83,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,115,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,127,        return getPeriodType().isSupported(type);,0,0,0,1,4,1,3,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,147,        return new Period(this);,0,0,0,1,2,3,0,1,1,5,24,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,158,        return new MutablePeriod(this);,0,0,0,1,2,3,0,1,1,5,31,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,183,        if (this == period) {,1,1,0,1,3,2,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,184,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,186,        if (period instanceof ReadablePeriod == false) {,1,1,0,1,3,2,0,1,1,7,48,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,187,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,189,        ReadablePeriod other = (ReadablePeriod) period;,2,0,0,1,2,0,0,2,0,4,47,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,190,        if (size() != other.size()) {,0,1,0,2,7,1,3,0,1,6,29,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,191,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,193,"        for (int i = 0, isize = size(); i < isize; i++) {",5,1,0,1,5,2,1,0,2,7,49,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,194,            if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {,0,3,0,2,11,1,10,0,2,6,83,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,195,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,198,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,207,        int total = 17;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,208,"        for (int i = 0, isize = size(); i < isize; i++) {",5,1,0,1,5,2,1,0,2,7,49,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,209,            total = 27 * total + getValue(i);,2,2,0,1,2,0,2,0,2,6,33,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,210,            total = 27 * total + getFieldType(i).hashCode();,2,2,0,1,4,0,3,0,2,6,48,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,212,        return total;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,228,        return ISOPeriodFormat.standard().print(this);,0,0,0,1,4,2,3,0,0,4,46,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,240,        if (formatter == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,241,            return toString();,0,0,0,1,2,1,1,0,1,5,18,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,13,243,        return formatter.print(this);,0,0,0,1,2,2,2,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,59,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,13,62,            return PeriodType.time();,0,0,0,1,2,1,2,0,0,4,25,9,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,134,        PeriodType type = cYMDTime;,2,0,0,0,0,0,0,1,0,2,27,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,135,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,136,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,146,            cYMDTime = type;,2,0,0,0,0,0,0,0,1,2,16,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,148,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,163,        PeriodType type = cYMD;,2,0,0,0,0,0,0,1,0,2,23,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,164,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,165,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,173,            cYMD = type;,2,0,0,0,0,0,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,175,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,193,        PeriodType type = cYWDTime;,2,0,0,0,0,0,0,1,0,2,27,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,194,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,195,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,205,            cYWDTime = type;,2,0,0,0,0,0,0,0,1,2,16,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,207,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,222,        PeriodType type = cYWD;,2,0,0,0,0,0,0,1,0,2,23,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,223,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,224,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,232,            cYWD = type;,2,0,0,0,0,0,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,234,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,278,        PeriodType type = cYD;,2,0,0,0,0,0,0,1,0,2,22,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,279,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,280,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,287,            cYD = type;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,289,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,305,        PeriodType type = cDTime;,2,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,306,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,307,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,316,            cDTime = type;,2,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,318,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,333,        PeriodType type = cTime;,2,0,0,0,0,0,0,1,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,334,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,335,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,343,            cTime = type;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,345,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,354,        PeriodType type = cYears;,2,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,355,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,356,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,361,            cYears = type;,2,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,363,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,372,        PeriodType type = cMonths;,2,0,0,0,0,0,0,1,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,373,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,374,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,379,            cMonths = type;,2,0,0,0,0,0,0,0,1,2,15,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,381,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,390,        PeriodType type = cWeeks;,2,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,391,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,392,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,397,            cWeeks = type;,2,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,399,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,408,        PeriodType type = cDays;,2,0,0,0,0,0,0,1,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,409,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,410,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,415,            cDays = type;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,417,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,426,        PeriodType type = cHours;,2,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,427,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,428,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,433,            cHours = type;,2,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,435,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,444,        PeriodType type = cMinutes;,2,0,0,0,0,0,0,1,0,2,27,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,445,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,446,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,451,            cMinutes = type;,2,0,0,0,0,0,0,0,1,2,16,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,453,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,462,        PeriodType type = cSeconds;,2,0,0,0,0,0,0,1,0,2,27,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,463,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,464,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,469,            cSeconds = type;,2,0,0,0,0,0,0,0,1,2,16,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,471,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,480,        PeriodType type = cMillis;,2,0,0,0,0,0,0,1,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,481,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,482,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,487,            cMillis = type;,2,0,0,0,0,0,0,0,1,2,15,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,489,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,502,        if (types == null || types.length == 0) {,3,3,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,503,"            throw new IllegalArgumentException(""Types array must not be null or empty"");",0,0,0,1,2,2,0,1,2,5,76,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,505,        for (int i = 0; i < types.length; i++) {,5,1,0,1,3,2,0,0,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,506,            if (types[i] == null) {,0,1,1,1,5,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,507,"                throw new IllegalArgumentException(""Types array must not contain null"");",0,0,0,1,2,2,0,1,2,5,72,8,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,510,"        Map<PeriodType, Object> cache = cTypes;",2,0,0,0,0,0,0,3,0,2,39,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,511,        if (cache.isEmpty()) {,0,0,0,2,5,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,512,"            cache.put(standard(), standard());",0,0,0,1,6,0,4,0,2,4,34,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,513,"            cache.put(yearMonthDayTime(), yearMonthDayTime());",0,0,0,1,6,0,4,0,2,4,50,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,514,"            cache.put(yearMonthDay(), yearMonthDay());",0,0,0,1,6,0,4,0,2,4,42,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,515,"            cache.put(yearWeekDayTime(), yearWeekDayTime());",0,0,0,1,6,0,4,0,2,4,48,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,516,"            cache.put(yearWeekDay(), yearWeekDay());",0,0,0,1,6,0,4,0,2,4,40,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,517,"            cache.put(yearDayTime(), yearDayTime());",0,0,0,1,6,0,4,0,2,4,40,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,518,"            cache.put(yearDay(), yearDay());",0,0,0,1,6,0,4,0,2,4,32,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,519,"            cache.put(dayTime(), dayTime());",0,0,0,1,6,0,4,0,2,4,32,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,520,"            cache.put(time(), time());",0,0,0,1,6,0,4,0,2,4,26,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,521,"            cache.put(years(), years());",0,0,0,1,6,0,4,0,2,4,28,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,522,"            cache.put(months(), months());",0,0,0,1,6,0,4,0,2,4,30,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,523,"            cache.put(weeks(), weeks());",0,0,0,1,6,0,4,0,2,4,28,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,524,"            cache.put(days(), days());",0,0,0,1,6,0,4,0,2,4,26,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,525,"            cache.put(hours(), hours());",0,0,0,1,6,0,4,0,2,4,28,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,526,"            cache.put(minutes(), minutes());",0,0,0,1,6,0,4,0,2,4,32,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,527,"            cache.put(seconds(), seconds());",0,0,0,1,6,0,4,0,2,4,32,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,528,"            cache.put(millis(), millis());",0,0,0,1,6,0,4,0,2,4,30,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,530,"        PeriodType inPartType = new PeriodType(null, types, null);",2,0,0,0,2,1,0,2,1,5,58,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,531,        Object cached = cache.get(inPartType);,1,0,0,1,2,0,3,1,0,5,38,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,532,        if (cached instanceof PeriodType) {,1,0,0,1,3,2,0,1,0,5,35,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,533,            return (PeriodType) cached;,1,0,0,1,2,1,0,1,0,5,27,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,535,        if (cached != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,536,"            throw new IllegalArgumentException(""PeriodType does not support fields: "" + cached);",1,1,0,1,2,2,0,1,2,7,84,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,538,        PeriodType type = standard();,1,0,0,1,2,0,1,1,1,6,29,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,539,        List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types));,1,0,0,2,4,1,3,4,1,7,86,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,540,        if (list.remove(DurationFieldType.years()) == false) {,0,1,0,3,7,1,4,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,541,            type = type.withYearsRemoved();,1,0,0,1,2,0,2,0,1,5,31,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,543,        if (list.remove(DurationFieldType.months()) == false) {,0,1,0,3,7,1,4,0,1,6,55,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,544,            type = type.withMonthsRemoved();,1,0,0,1,2,0,2,0,1,5,32,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,546,        if (list.remove(DurationFieldType.weeks()) == false) {,0,1,0,3,7,1,4,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,547,            type = type.withWeeksRemoved();,1,0,0,1,2,0,2,0,1,5,31,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,549,        if (list.remove(DurationFieldType.days()) == false) {,0,1,0,3,7,1,4,0,1,6,53,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,550,            type = type.withDaysRemoved();,1,0,0,1,2,0,2,0,1,5,30,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,552,        if (list.remove(DurationFieldType.hours()) == false) {,0,1,0,3,7,1,4,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,553,            type = type.withHoursRemoved();,1,0,0,1,2,0,2,0,1,5,31,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,555,        if (list.remove(DurationFieldType.minutes()) == false) {,0,1,0,3,7,1,4,0,1,6,56,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,556,            type = type.withMinutesRemoved();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,558,        if (list.remove(DurationFieldType.seconds()) == false) {,0,1,0,3,7,1,4,0,1,6,56,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,559,            type = type.withSecondsRemoved();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,561,        if (list.remove(DurationFieldType.millis()) == false) {,0,1,0,3,7,1,4,0,1,6,55,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,562,            type = type.withMillisRemoved();,1,0,0,1,2,0,2,0,1,5,32,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,564,        if (list.size() > 0) {,0,1,0,2,5,1,2,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,565,"            cache.put(inPartType, list);",0,0,0,0,2,0,4,0,0,2,28,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,566,"            throw new IllegalArgumentException(""PeriodType does not support fields: "" + list);",1,1,0,1,2,2,0,1,2,7,82,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,569,"        PeriodType checkPartType = new PeriodType(null, type.iTypes, null);",3,0,0,0,2,1,0,2,1,5,67,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,570,        PeriodType checkedType = (PeriodType) cache.get(checkPartType);,1,0,0,1,4,0,3,2,0,5,63,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,571,        if (checkedType != null) {,1,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,572,"            cache.put(checkPartType, checkedType);",0,0,0,0,2,0,4,0,0,2,38,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,573,            return checkedType;,1,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,575,"        cache.put(checkPartType, type);",0,0,0,0,2,0,4,0,0,2,31,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,576,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,608,        return iName;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,628,        return iTypes[index];,0,0,1,0,2,1,0,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,662,"        return ""PeriodType["" + getName() + ""]"";",0,1,0,1,4,1,1,0,3,6,39,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,674,        int realIndex = iIndices[index];,1,0,1,0,2,1,0,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,675,        return (realIndex == -1 ? 0 : period.getValue(realIndex));,1,1,0,2,4,1,3,0,1,7,58,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,690,"            throw new UnsupportedOperationException(""Field is not supported"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,707,        if (valueToAdd == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,708,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,710,        int realIndex = iIndices[index];,1,0,1,0,2,1,0,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,711,        if (realIndex == -1) {,1,1,0,1,3,1,0,0,1,6,22,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,712,"            throw new UnsupportedOperationException(""Field is not supported"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,714,"        values[realIndex] = FieldUtils.safeAdd(values[realIndex], valueToAdd);",0,0,1,0,6,0,3,0,1,4,70,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,715,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,725,"        return withFieldRemoved(0, ""NoYears"");",0,0,0,0,2,1,1,0,2,4,38,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,734,"        return withFieldRemoved(1, ""NoMonths"");",0,0,0,0,2,1,1,0,2,4,39,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,743,"        return withFieldRemoved(2, ""NoWeeks"");",0,0,0,0,2,1,1,0,2,4,38,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,752,"        return withFieldRemoved(3, ""NoDays"");",0,0,0,0,2,1,1,0,2,4,37,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,761,"        return withFieldRemoved(4, ""NoHours"");",0,0,0,0,2,1,1,0,2,4,38,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,770,"        return withFieldRemoved(5, ""NoMinutes"");",0,0,0,0,2,1,1,0,2,4,40,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,779,"        return withFieldRemoved(6, ""NoSeconds"");",0,0,0,0,2,1,1,0,2,4,40,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,788,"        return withFieldRemoved(7, ""NoMillis"");",0,0,0,0,2,1,1,0,2,4,39,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,799,        int fieldIndex = iIndices[indicesIndex];,1,0,1,0,2,1,0,0,0,4,40,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,800,        if (fieldIndex == -1) {,1,1,0,1,3,1,0,0,1,6,23,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,801,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,804,        DurationFieldType[] types = new DurationFieldType[size() - 1];,1,1,0,1,6,1,1,2,1,8,62,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,805,        for (int i = 0; i < iTypes.length; i++) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,806,            if (i < fieldIndex) {,2,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,807,                types[i] = iTypes[i];,0,0,1,0,4,0,0,0,1,3,21,8,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,808,            } else if (i > fieldIndex) {,2,1,0,1,4,2,0,0,0,5,28,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,809,                types[i - 1] = iTypes[i];,1,1,1,0,4,0,0,0,1,5,25,9,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,813,        int[] indices = new int[8];,1,0,0,0,4,3,0,0,0,3,27,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,814,        for (int i = 0; i < indices.length; i++) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,815,            if (i < indicesIndex) {,2,1,0,1,3,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,816,                indices[i] = iIndices[i];,0,0,1,0,4,0,0,0,1,3,25,8,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,817,            } else if (i > indicesIndex) {,2,1,0,1,4,2,0,0,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,818,                indices[i] = (iIndices[i] == -1 ? -1 : iIndices[i] - 1);,0,2,1,1,8,0,0,0,3,5,56,9,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,820,                indices[i] = -1;,0,0,1,0,2,0,0,0,2,3,16,9,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,823,"        return new PeriodType(getName() + name, types, indices);",3,1,0,1,4,2,1,1,2,8,56,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,835,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,836,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,838,        if (obj instanceof PeriodType == false) {,1,1,0,1,3,2,0,1,1,7,41,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,839,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,841,        PeriodType other = (PeriodType) obj;,2,0,0,1,2,0,0,2,0,4,36,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,842,"        return (Arrays.equals(iTypes, other.iTypes));",2,0,0,0,4,1,3,0,0,4,45,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,851,        int hash = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,852,        for (int i = 0; i < iTypes.length; i++) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,853,            hash += iTypes[i].hashCode();,1,0,1,1,4,0,1,0,1,6,29,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,13,855,        return hash;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,312,"        super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard());",4,0,0,1,4,1,2,0,1,6,74,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,313,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,382,        super(duration);,1,0,0,1,2,1,0,0,1,5,16,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,383,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,402,"        super(duration, type, null);",2,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,403,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,423,"        super(duration, null, chronology);",2,0,0,0,2,1,0,0,1,4,34,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,424,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,444,"        super(duration, type, chronology);",3,0,0,0,2,1,0,0,1,4,34,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,445,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,455,"        super(startInstant, endInstant, null, null);",2,0,0,0,2,1,0,0,1,4,44,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,456,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,466,"        super(startInstant, endInstant, type, null);",3,0,0,0,2,1,0,0,1,4,44,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,467,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,478,"        super(startInstant, endInstant, null, chrono);",3,0,0,0,2,1,0,0,1,4,46,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,479,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,490,"        super(startInstant, endInstant, type, chrono);",4,0,0,0,2,1,0,0,1,4,46,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,491,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,501,"        super(startInstant, endInstant, null);",2,0,0,0,2,1,0,0,1,4,38,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,502,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,512,"        super(startInstant, endInstant, type);",3,0,0,0,2,1,0,0,1,4,38,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,513,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,537,"        super(start, end, null);",2,0,0,0,2,1,0,0,1,4,24,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,538,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,563,"        super(start, end, type);",3,0,0,0,2,1,0,0,1,4,24,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,564,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,573,"        super(startInstant, duration, null);",2,0,0,0,2,1,0,0,1,4,36,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,574,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,584,"        super(startInstant, duration, type);",3,0,0,0,2,1,0,0,1,4,36,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,585,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,594,"        super(duration, endInstant, null);",2,0,0,0,2,1,0,0,1,4,34,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,595,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,605,"        super(duration, endInstant, type);",3,0,0,0,2,1,0,0,1,4,34,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,606,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,621,"        super(period, null, null);",1,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,622,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,638,"        super(period, type, null);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,639,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,655,"        super(period, null, chrono);",2,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,656,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,673,"        super(period, type, chrono);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,time,org/joda/time/Period,13,674,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,81,"        return parse(str, ISOPeriodFormat.standard());",0,0,0,1,4,1,4,0,1,5,46,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,92,        return formatter.parsePeriod(str);,0,0,0,1,2,1,3,0,0,4,34,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,127,"        return new Period(new int[] {0, months, 0, 0, 0, 0, 0, 0}, PeriodType.standard());",1,0,0,1,8,4,2,1,1,7,82,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,144,"        return new Period(new int[] {0, 0, weeks, 0, 0, 0, 0, 0}, PeriodType.standard());",1,0,0,1,8,4,2,1,1,7,81,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,161,"        return new Period(new int[] {0, 0, 0, days, 0, 0, 0, 0}, PeriodType.standard());",1,0,0,1,8,4,2,1,1,7,80,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,178,"        return new Period(new int[] {0, 0, 0, 0, hours, 0, 0, 0}, PeriodType.standard());",1,0,0,1,8,4,2,1,1,7,81,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,195,"        return new Period(new int[] {0, 0, 0, 0, 0, minutes, 0, 0}, PeriodType.standard());",1,0,0,1,8,4,2,1,1,7,83,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,257,        if (start == null || end == null) {,2,3,0,1,3,1,0,0,0,5,35,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,258,"            throw new IllegalArgumentException(""ReadablePartial objects must not be null"");",0,0,0,1,2,2,0,1,2,5,79,6,0.0,0,0
defect4j,time,org/joda/time/Period,13,260,        if (start.size() != end.size()) {,0,1,0,2,7,1,4,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,261,"            throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");",0,0,0,1,2,2,0,1,2,5,95,6,0.0,0,0
defect4j,time,org/joda/time/Period,13,263,        DurationFieldType[] types = new DurationFieldType[start.size()];,1,0,0,1,6,1,2,2,0,6,64,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,264,        int[] values = new int[start.size()];,1,0,0,1,6,3,2,0,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,265,"        for (int i = 0, isize = start.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,55,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,266,            if (start.getFieldType(i) != end.getFieldType(i)) {,0,1,0,2,7,1,6,0,0,5,51,6,0.0,0,0
defect4j,time,org/joda/time/Period,13,267,"                throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");",0,0,0,1,2,2,0,1,2,5,95,8,0.0,0,0
defect4j,time,org/joda/time/Period,13,269,            types[i] = start.getFieldType(i).getDurationType();,0,0,1,1,6,0,4,0,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/Period,13,270,            if (i > 0 && types[i - 1] == types[i]) {,2,4,1,1,7,1,0,0,0,6,40,6,0.0,0,0
defect4j,time,org/joda/time/Period,13,271,"                throw new IllegalArgumentException(""ReadablePartial objects must not have overlapping fields"");",0,0,0,1,2,2,0,1,2,5,95,8,0.0,0,0
defect4j,time,org/joda/time/Period,13,273,            values[i] = end.getValue(i) - start.getValue(i);,0,1,1,1,6,0,6,0,1,6,48,6,0.0,0,0
defect4j,time,org/joda/time/Period,13,275,"        return new Period(values, PeriodType.forFields(types));",1,0,0,1,4,2,3,1,1,7,55,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,694,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,704,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);",2,0,0,1,4,2,2,0,1,6,68,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,713,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);",2,0,0,1,4,2,2,0,1,6,69,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,722,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);",2,0,0,1,4,2,2,0,1,6,68,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,731,"        return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);",2,0,0,1,4,2,2,0,1,6,67,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,741,"        return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);",2,0,0,1,4,2,2,0,1,6,68,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,750,"        return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);",2,0,0,1,4,2,2,0,1,6,70,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,759,"        return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);",2,0,0,1,4,2,2,0,1,6,70,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,768,"        return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);",2,0,0,1,4,2,2,0,1,6,69,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,783,        type = DateTimeUtils.getPeriodType(type);,1,0,0,1,2,0,3,0,1,5,41,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,784,        if (type.equals(getPeriodType())) {,0,0,0,3,7,1,3,0,1,5,35,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,785,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,787,"        return new Period(this, type);",1,0,0,0,2,3,0,1,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,801,        if (period == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,802,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,804,        int[] newValues = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,41,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,805,"        newValues = super.mergePeriodInto(newValues, period);",4,0,0,0,2,1,0,0,1,4,53,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,806,"        return new Period(newValues, getPeriodType());",1,0,0,1,4,2,1,1,2,7,46,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,821,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,822,"            throw new IllegalArgumentException(""Field must not be null"");",0,0,0,1,2,2,0,1,2,5,61,6,0.0,0,0
defect4j,time,org/joda/time/Period,13,824,        int[] newValues = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,41,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,825,"        super.setFieldInto(newValues, field, value);",4,0,0,0,2,1,0,0,0,3,44,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,826,"        return new Period(newValues, getPeriodType());",1,0,0,1,4,2,1,1,2,7,46,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,840,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,841,"            throw new IllegalArgumentException(""Field must not be null"");",0,0,0,1,2,2,0,1,2,5,61,6,0.0,0,0
defect4j,time,org/joda/time/Period,13,843,        if (value == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,844,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,846,        int[] newValues = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,41,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,847,"        super.addFieldInto(newValues, field, value);",4,0,0,0,2,1,0,0,0,3,44,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,848,"        return new Period(newValues, getPeriodType());",1,0,0,1,4,2,1,1,2,7,46,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,862,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,863,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);",2,0,0,1,4,1,4,0,1,6,76,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,864,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,877,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,878,"        getPeriodType().setIndexedField(this, PeriodType.MONTH_INDEX, values, months);",2,0,0,1,4,1,4,0,1,6,78,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,879,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,892,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,893,"        getPeriodType().setIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);",2,0,0,1,4,1,4,0,1,6,76,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,894,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,907,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,908,"        getPeriodType().setIndexedField(this, PeriodType.DAY_INDEX, values, days);",2,0,0,1,4,1,4,0,1,6,74,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,909,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,922,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,923,"        getPeriodType().setIndexedField(this, PeriodType.HOUR_INDEX, values, hours);",2,0,0,1,4,1,4,0,1,6,76,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,924,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,937,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,938,"        getPeriodType().setIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);",2,0,0,1,4,1,4,0,1,6,80,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,939,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,952,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,953,"        getPeriodType().setIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);",2,0,0,1,4,1,4,0,1,6,80,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,954,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,991,        if (period == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,992,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,994,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,995,"        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, period.get(DurationFieldType.YEARS_TYPE));",4,0,0,1,6,1,5,0,1,6,111,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,996,"        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, period.get(DurationFieldType.MONTHS_TYPE));",4,0,0,1,6,1,5,0,1,6,113,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,997,"        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, period.get(DurationFieldType.WEEKS_TYPE));",4,0,0,1,6,1,5,0,1,6,111,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,998,"        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, period.get(DurationFieldType.DAYS_TYPE));",4,0,0,1,6,1,5,0,1,6,109,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,999,"        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, period.get(DurationFieldType.HOURS_TYPE));",4,0,0,1,6,1,5,0,1,6,111,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1000,"        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, period.get(DurationFieldType.MINUTES_TYPE));",4,0,0,1,6,1,5,0,1,6,115,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1001,"        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, period.get(DurationFieldType.SECONDS_TYPE));",4,0,0,1,6,1,5,0,1,6,115,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1002,"        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, period.get(DurationFieldType.MILLIS_TYPE));",4,0,0,1,6,1,5,0,1,6,113,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1003,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1017,        if (years == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1018,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,1020,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1021,"        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, years);",2,0,0,1,4,1,4,0,1,6,76,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1022,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1035,        if (months == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1036,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,1038,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1039,"        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, months);",2,0,0,1,4,1,4,0,1,6,78,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1040,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1053,        if (weeks == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1054,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,1056,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1057,"        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);",2,0,0,1,4,1,4,0,1,6,76,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1058,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1071,        if (days == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1072,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,1074,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1075,"        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, days);",2,0,0,1,4,1,4,0,1,6,74,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1076,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1089,        if (hours == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1090,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,1092,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1093,"        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, hours);",2,0,0,1,4,1,4,0,1,6,76,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1094,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1107,        if (minutes == 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1108,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,1110,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1111,"        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);",2,0,0,1,4,1,4,0,1,6,80,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1112,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1125,        if (seconds == 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1126,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,1128,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1129,"        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);",2,0,0,1,4,1,4,0,1,6,80,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1130,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1143,        if (millis == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1144,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,1146,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1147,"        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, millis);",2,0,0,1,4,1,4,0,1,6,78,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1148,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1170,        if (period == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1171,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,1173,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1174,"        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, -period.get(DurationFieldType.YEARS_TYPE));",4,0,0,1,6,1,5,0,2,6,112,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1175,"        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, -period.get(DurationFieldType.MONTHS_TYPE));",4,0,0,1,6,1,5,0,2,6,114,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1176,"        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, -period.get(DurationFieldType.WEEKS_TYPE));",4,0,0,1,6,1,5,0,2,6,112,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1177,"        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, -period.get(DurationFieldType.DAYS_TYPE));",4,0,0,1,6,1,5,0,2,6,110,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1178,"        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, -period.get(DurationFieldType.HOURS_TYPE));",4,0,0,1,6,1,5,0,2,6,112,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1179,"        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, -period.get(DurationFieldType.MINUTES_TYPE));",4,0,0,1,6,1,5,0,2,6,116,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1180,"        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, -period.get(DurationFieldType.SECONDS_TYPE));",4,0,0,1,6,1,5,0,2,6,116,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1181,"        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, -period.get(DurationFieldType.MILLIS_TYPE));",4,0,0,1,6,1,5,0,2,6,114,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1182,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1196,        return plusYears(-years);,1,0,0,1,2,1,1,0,2,6,25,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1209,        return plusMonths(-months);,1,0,0,1,2,1,1,0,2,6,27,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1222,        return plusWeeks(-weeks);,1,0,0,1,2,1,1,0,2,6,25,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1235,        return plusDays(-days);,1,0,0,1,2,1,1,0,2,6,23,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1248,        return plusHours(-hours);,1,0,0,1,2,1,1,0,2,6,25,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1261,        return plusMinutes(-minutes);,1,0,0,1,2,1,1,0,2,6,29,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1274,        return plusSeconds(-seconds);,1,0,0,1,2,1,1,0,2,6,29,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1287,        return plusMillis(-millis);,1,0,0,1,2,1,1,0,2,6,27,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1301,        if (this == ZERO || scalar == 1) {,2,3,0,1,3,2,0,0,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1302,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,1304,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1305,        for (int i = 0; i < values.length; i++) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1306,"            values[i] = FieldUtils.safeMultiply(values[i], scalar);",0,0,1,0,6,0,3,0,1,4,55,6,0.0,0,0
defect4j,time,org/joda/time/Period,13,1308,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1319,        return multipliedBy(-1);,0,0,0,1,2,1,1,0,2,5,24,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1343,"        checkYearsAndMonths(""Weeks"");",0,0,0,1,2,0,1,0,2,4,29,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1344,        long millis = getMillis();  // assign to a long,1,0,0,1,2,1,1,0,1,6,47,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1345,        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;,3,1,0,2,6,1,1,0,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1346,        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;,3,1,0,2,6,1,1,0,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1347,        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;,3,1,0,2,6,1,1,0,2,7,66,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1348,        millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;,3,1,0,2,6,1,1,0,2,7,64,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1349,        long weeks = ((long) getWeeks()) + millis / DateTimeConstants.MILLIS_PER_WEEK;,4,2,0,2,6,2,1,0,1,7,78,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1350,        return Weeks.weeks(FieldUtils.safeToInt(weeks));,0,0,0,2,4,1,5,0,0,4,48,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1373,"        checkYearsAndMonths(""Days"");",0,0,0,1,2,0,1,0,2,4,28,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1374,        long millis = getMillis();  // assign to a long,1,0,0,1,2,1,1,0,1,6,47,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1375,        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;,3,1,0,2,6,1,1,0,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1376,        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;,3,1,0,2,6,1,1,0,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1377,        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;,3,1,0,2,6,1,1,0,2,7,66,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1378,        long days = millis / DateTimeConstants.MILLIS_PER_DAY;,4,1,0,0,0,1,0,0,0,3,54,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1379,"        days = FieldUtils.safeAdd(days, getDays());",1,0,0,1,4,0,4,0,2,5,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1380,"        days = FieldUtils.safeAdd(days, ((long) getWeeks()) * ((long) DateTimeConstants.DAYS_PER_WEEK));",3,1,0,2,12,2,4,0,2,7,96,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1381,        return Days.days(FieldUtils.safeToInt(days));,0,0,0,2,4,1,5,0,0,4,45,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1404,"        checkYearsAndMonths(""Hours"");",0,0,0,1,2,0,1,0,2,4,29,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1405,        long millis = getMillis();  // assign to a long,1,0,0,1,2,1,1,0,1,6,47,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1406,        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;,3,1,0,2,6,1,1,0,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1407,        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;,3,1,0,2,6,1,1,0,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1408,        long hours = millis / DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,1,0,0,0,3,56,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1409,"        hours = FieldUtils.safeAdd(hours, getHours());",1,0,0,1,4,0,4,0,2,5,46,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1410,"        hours = FieldUtils.safeAdd(hours, ((long) getDays()) * ((long) DateTimeConstants.HOURS_PER_DAY));",3,1,0,2,12,2,4,0,2,7,97,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1411,"        hours = FieldUtils.safeAdd(hours, ((long) getWeeks()) * ((long) DateTimeConstants.HOURS_PER_WEEK));",3,1,0,2,12,2,4,0,2,7,99,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1412,        return Hours.hours(FieldUtils.safeToInt(hours));,0,0,0,2,4,1,5,0,0,4,48,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1435,"        checkYearsAndMonths(""Minutes"");",0,0,0,1,2,0,1,0,2,4,31,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1436,        long millis = getMillis();  // assign to a long,1,0,0,1,2,1,1,0,1,6,47,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1437,        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;,3,1,0,2,6,1,1,0,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1438,        long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,1,0,0,0,3,60,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1439,"        minutes = FieldUtils.safeAdd(minutes, getMinutes());",1,0,0,1,4,0,4,0,2,5,52,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1440,"        minutes = FieldUtils.safeAdd(minutes, ((long) getHours()) * ((long) DateTimeConstants.MINUTES_PER_HOUR));",3,1,0,2,12,2,4,0,2,7,105,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1441,"        minutes = FieldUtils.safeAdd(minutes, ((long) getDays()) * ((long) DateTimeConstants.MINUTES_PER_DAY));",3,1,0,2,12,2,4,0,2,7,103,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1442,"        minutes = FieldUtils.safeAdd(minutes, ((long) getWeeks()) * ((long) DateTimeConstants.MINUTES_PER_WEEK));",3,1,0,2,12,2,4,0,2,7,105,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1443,        return Minutes.minutes(FieldUtils.safeToInt(minutes));,0,0,0,2,4,1,5,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1466,"        checkYearsAndMonths(""Seconds"");",0,0,0,1,2,0,1,0,2,4,31,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1467,        long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND;,3,1,0,1,2,1,1,0,1,7,65,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1468,"        seconds = FieldUtils.safeAdd(seconds, getSeconds());",1,0,0,1,4,0,4,0,2,5,52,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1469,"        seconds = FieldUtils.safeAdd(seconds, ((long) getMinutes()) * ((long) DateTimeConstants.SECONDS_PER_MINUTE));",3,1,0,2,12,2,4,0,2,7,109,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1470,"        seconds = FieldUtils.safeAdd(seconds, ((long) getHours()) * ((long) DateTimeConstants.SECONDS_PER_HOUR));",3,1,0,2,12,2,4,0,2,7,105,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1471,"        seconds = FieldUtils.safeAdd(seconds, ((long) getDays()) * ((long) DateTimeConstants.SECONDS_PER_DAY));",3,1,0,2,12,2,4,0,2,7,103,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1472,"        seconds = FieldUtils.safeAdd(seconds, ((long) getWeeks()) * ((long) DateTimeConstants.SECONDS_PER_WEEK));",3,1,0,2,12,2,4,0,2,7,105,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1473,        return Seconds.seconds(FieldUtils.safeToInt(seconds));,0,0,0,2,4,1,5,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1496,"        checkYearsAndMonths(""Duration"");",0,0,0,1,2,0,1,0,2,4,32,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1497,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs",1,0,0,1,2,1,1,0,1,6,83,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1498,        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));,3,1,0,3,12,2,1,0,2,7,81,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1499,        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));,3,1,0,3,12,2,1,0,2,7,81,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1500,        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));,3,1,0,3,12,2,1,0,2,7,77,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1501,        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));,3,1,0,3,12,2,1,0,2,7,75,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1502,        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));,3,1,0,3,12,2,1,0,2,7,77,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1503,        return new Duration(millis);,1,0,0,1,2,2,0,1,1,6,28,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1513,        if (getMonths() != 0) {,0,1,0,2,5,1,1,0,1,6,23,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1514,"            throw new UnsupportedOperationException(""Cannot convert to "" + destintionType + "" as this period contains months and months vary in length"");",1,1,0,1,2,3,0,1,3,7,141,6,0.0,0,0
defect4j,time,org/joda/time/Period,13,1516,        if (getYears() != 0) {,0,1,0,2,5,1,1,0,1,6,22,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1517,"            throw new UnsupportedOperationException(""Cannot convert to "" + destintionType + "" as this period contains years and years vary in length"");",1,1,0,1,2,3,0,1,3,7,139,6,0.0,0,0
defect4j,time,org/joda/time/Period,13,1519,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,13,1548,        return normalizedStandard(PeriodType.standard());,0,0,0,2,4,1,3,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1584,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs",1,0,0,1,2,1,1,0,1,6,83,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1585,        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));,3,1,0,3,12,2,1,0,2,7,81,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1586,        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));,3,1,0,3,12,2,1,0,2,7,81,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1587,        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));,3,1,0,3,12,2,1,0,2,7,77,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1588,        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));,3,1,0,3,12,2,1,0,2,7,75,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1589,        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));,3,1,0,3,12,2,1,0,2,7,77,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1590,"        Period result = new Period(millis, DateTimeUtils.getPeriodType(type), ISOChronology.getInstanceUTC());",2,0,0,1,6,1,5,2,1,7,102,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1591,        int years = getYears();,1,0,0,1,2,1,1,0,1,6,23,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1592,        int months = getMonths();,1,0,0,1,2,1,1,0,1,6,25,5,0.0,0,0
defect4j,time,org/joda/time/Period,13,1593,        if (years != 0 || months != 0) {,2,3,0,1,3,1,0,0,0,5,32,4,0.0,0,0
defect4j,time,org/joda/time/Period,13,1594,"            years = FieldUtils.safeAdd(years, months / 12);",2,1,0,0,2,0,3,0,1,5,47,6,0.0,0,0
defect4j,time,org/joda/time/Period,13,1595,            months = months % 12;,2,1,0,0,0,0,0,0,1,3,21,6,0.0,0,0
defect4j,time,org/joda/time/Period,13,1596,            if (years != 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,time,org/joda/time/Period,13,1597,                result = result.withYears(years);,1,0,0,1,2,0,3,0,1,5,33,8,0.0,0,0
defect4j,time,org/joda/time/Period,13,1599,            if (months != 0) {,1,1,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,time,org/joda/time/Period,13,1600,                result = result.withMonths(months);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,time,org/joda/time/Period,13,1603,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,105,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,106,        iPrinter = printer;,2,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,107,        iParser = parser;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,108,        iLocale = locale;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,109,        iParseType = type;,2,0,0,0,0,0,0,0,1,2,18,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,110,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,119,        return (iPrinter != null);,1,1,0,1,2,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,137,        return (iParser != null);,1,1,0,1,2,1,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,161,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,2,4,0,4,11,1,4,0,2,7,78,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,162,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,164,"        return new PeriodFormatter(iPrinter, iParser, locale, iParseType);",4,0,0,0,2,2,0,1,1,5,66,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,173,        return iLocale;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,187,        if (type == iParseType) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,188,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,190,"        return new PeriodFormatter(iPrinter, iParser, iLocale, type);",4,0,0,0,2,2,0,1,1,5,61,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,199,        return iParseType;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,210,        checkPrinter();,0,0,0,1,2,0,1,0,1,4,15,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,211,        checkPeriod(period);,0,0,0,1,2,0,2,0,1,4,20,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,213,"        getPrinter().printTo(buf, period, iLocale);",0,0,0,1,4,0,5,0,1,4,43,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,214,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,223,        checkPrinter();,0,0,0,1,2,0,1,0,1,4,15,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,224,        checkPeriod(period);,0,0,0,1,2,0,2,0,1,4,20,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,226,"        getPrinter().printTo(out, period, iLocale);",0,0,0,1,4,0,5,0,1,4,43,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,227,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,252,"            throw new UnsupportedOperationException(""Printing not supported"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,263,"            throw new IllegalArgumentException(""Period must not be null"");",0,0,0,1,2,2,0,1,2,5,62,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,288,        checkParser();,0,0,0,1,2,0,1,0,1,4,14,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,289,        checkPeriod(period);,0,0,0,1,2,0,2,0,1,4,20,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,291,"        return getParser().parseInto(period, text, position, iLocale);",0,0,0,1,4,1,6,0,1,5,62,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,302,        checkParser();,0,0,0,1,2,0,1,0,1,4,14,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,304,        return parseMutablePeriod(text).toPeriod();,0,0,0,1,4,1,3,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,315,        checkParser();,0,0,0,1,2,0,1,0,1,4,14,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,317,"        MutablePeriod period = new MutablePeriod(0, iParseType);",2,0,0,0,2,1,0,2,1,5,56,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,318,"        int newPos = getParser().parseInto(period, text, 0, iLocale);",1,0,0,1,4,1,5,0,1,6,61,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,319,        if (newPos >= 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,320,            if (newPos >= text.length()) {,1,1,0,2,5,1,2,0,0,6,30,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,321,                return period;,1,0,0,0,0,1,0,0,0,2,14,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,324,            newPos = ~newPos;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,326,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,0,4,2,4,1,1,5,81,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,335,        if (iParser == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,336,"            throw new UnsupportedOperationException(""Parsing not supported"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatter,13,338,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,73,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,74,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,86,        return cMillisProvider.getMillis();,0,0,0,1,2,1,2,0,0,4,35,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,127,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,128,        if (offsetMillis == 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,129,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,0,0,0,0,0,0,1,2,41,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,131,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,2,0,0,1,2,1,0,1,2,6,57,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,133,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,146,        if (millisProvider == null) {,1,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,147,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0,0,0,1,2,2,0,1,2,5,74,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,149,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,150,        cMillisProvider = millisProvider;,2,0,0,0,0,0,0,0,1,2,33,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,151,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,161,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0,0,0,2,4,1,2,1,2,6,70,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,176,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,177,            return DateTimeUtils.currentTimeMillis();,0,0,0,1,2,1,2,0,0,4,41,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,179,        return instant.getMillis();,0,0,0,1,2,1,2,0,0,4,27,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,194,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,195,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,197,        Chronology chrono = instant.getChronology();,1,0,0,1,2,0,2,1,0,5,44,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,198,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,199,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,201,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,217,        Chronology chrono = null;,1,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,218,        if (start != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,219,            chrono = start.getChronology();,1,0,0,1,2,0,2,0,1,5,31,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,220,        } else if (end != null) {,1,1,0,1,4,2,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,221,            chrono = end.getChronology();,1,0,0,1,2,0,2,0,1,5,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,223,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,224,            chrono = ISOChronology.getInstance();,1,0,0,1,2,0,2,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,226,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,241,        if (interval == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,242,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,244,        Chronology chrono = interval.getChronology();,1,0,0,1,2,0,2,1,0,5,45,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,245,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,246,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,248,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,264,        if (interval == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,265,            long now = DateTimeUtils.currentTimeMillis();,1,0,0,1,2,1,2,0,0,5,45,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,266,"            interval = new Interval(now, now);",3,0,0,0,2,1,0,1,2,5,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,268,        return interval;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,285,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,299,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,300,            return DateTimeZone.getDefault();,0,0,0,1,2,1,2,0,0,4,33,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,302,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,333,        if (duration == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,334,            return 0L;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,336,        return duration.getMillis();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,364,        if (partial == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,365,"            throw new IllegalArgumentException(""Partial must not be null"");",0,0,0,1,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,367,        DurationFieldType lastType = null;,1,0,0,0,0,0,0,1,0,2,34,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,368,        for (int i = 0; i < partial.size(); i++) {,3,1,0,2,5,2,2,0,1,7,42,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,369,            DateTimeField loopField = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,46,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,370,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,371,                if (loopField.getRangeDurationField().getType() != lastType) {,1,1,0,2,7,1,3,0,0,6,62,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,372,                    return false;,0,0,0,0,0,1,0,0,1,2,13,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,375,            lastType = loopField.getDurationField().getType();,1,0,0,1,4,0,3,0,1,5,50,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,377,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,395,"            Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});",1,0,0,0,6,3,1,4,1,6,93,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,396,"            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});",1,0,0,1,8,2,2,2,0,6,70,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,397,        } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,398,            return new DateFormatSymbols(locale);,1,0,0,1,2,2,0,1,1,6,37,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,412,        return cZoneNames;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,424,"        cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));",2,0,0,1,4,1,2,3,2,7,83,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,425,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,451,        double epochDay = epochMillis / 86400000d;,2,1,0,0,0,1,0,0,0,3,42,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,452,        return epochDay + 2440587.5d;,1,1,0,0,0,1,0,0,0,3,29,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,471,        return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);,0,1,0,2,6,2,4,0,1,6,58,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,484,        double epochDay = julianDay - 2440587.5d;,2,1,0,0,0,1,0,0,0,3,41,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,485,        return (long) (epochDay * 86400000d);,1,1,0,1,4,2,0,0,0,5,37,6,0.0,0,0
defect4j,time,org/joda/time/JodaTimePermission,13,57,        super(name);,1,0,0,1,2,1,0,0,1,5,12,3,0.0,0,0
defect4j,time,org/joda/time/JodaTimePermission,13,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,77,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,97,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,102,            return chrono;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,143,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,144,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,146,        if (zone == getZone()) {,1,1,0,2,5,1,1,0,1,7,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,147,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,149,        return getInstance(zone);,0,0,0,1,2,1,2,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,160,"        String str = ""ISOChronology"";",1,0,0,0,0,0,0,1,1,3,29,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,161,        DateTimeZone zone = getZone();,1,0,0,1,2,0,1,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,162,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,163,            str = str + '[' + zone.getID() + ']';,2,1,0,1,4,0,2,0,3,6,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,165,        return str;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,190,        return super.equals(obj);,2,0,0,1,2,2,0,0,0,4,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0,2,0,1,6,1,3,0,2,6,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,208,        return new Stub(getZone());,0,0,0,2,4,2,1,1,2,6,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,107,        if ((base = iBase) != null) {,2,1,0,2,5,1,0,0,1,6,29,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,108,            return base.getZone();,0,0,0,1,2,1,2,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,110,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,3,4,0,2,7,1,0,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0,0,0,0,2,1,6,0,0,3,74,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",5,0,0,0,2,2,0,0,0,3,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,3,4,0,2,7,1,0,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,5,0,0,3,60,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",4,0,0,0,1,2,0,0,0,3,61,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,3,4,0,2,7,1,0,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,148,            return base.getDateTimeMillis,0,0,0,0,0,1,2,0,0,2,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,151,        return super.getDateTimeMillis,1,0,0,0,0,2,0,0,0,2,30,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,389,        in.defaultReadObject();,0,0,0,1,2,0,2,0,0,3,23,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,390,        setFields();,0,0,0,1,2,0,1,0,1,4,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,391,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,102,"        long instant = year().set(0, year);",1,0,0,1,4,1,3,0,1,6,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,103,"        instant = monthOfYear().set(instant, monthOfYear);",1,0,0,1,4,0,4,0,2,5,50,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",1,0,0,1,4,0,4,0,2,5,48,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,105,"        return millisOfDay().set(instant, millisOfDay);",0,0,0,1,4,1,4,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,132,"        long instant = year().set(0, year);",1,0,0,1,4,1,3,0,1,6,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,133,"        instant = monthOfYear().set(instant, monthOfYear);",1,0,0,1,4,0,4,0,2,5,50,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",1,0,0,1,4,0,4,0,2,5,48,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,135,"        instant = hourOfDay().set(instant, hourOfDay);",1,0,0,1,4,0,4,0,2,5,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",1,0,0,1,4,0,4,0,2,5,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",1,0,0,1,4,0,4,0,2,5,56,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,138,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,1,4,1,4,0,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,163,"        instant = hourOfDay().set(instant, hourOfDay);",1,0,0,1,4,0,4,0,2,5,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",1,0,0,1,4,0,4,0,2,5,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",1,0,0,1,4,0,4,0,2,5,56,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,166,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,1,4,1,4,0,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,183,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,184,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,185,            int value = values[i];,1,0,1,0,2,1,0,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,186,            DateTimeField field = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,187,            if (value < field.getMinimumValue()) {,1,1,0,2,5,1,2,0,0,6,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,188,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,192,            if (value > field.getMaximumValue()) {,1,1,0,2,5,1,2,0,0,6,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,193,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,199,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,200,            int value = values[i];,1,0,1,0,2,1,0,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,201,            DateTimeField field = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,202,"            if (value < field.getMinimumValue(partial, values)) {",1,1,0,0,5,1,4,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,203,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,207,"            if (value > field.getMaximumValue(partial, values)) {",1,1,0,0,5,1,4,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,208,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,213,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,223,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,224,        int[] values = new int[size];,1,0,1,0,4,3,0,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,225,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0,0,1,1,8,1,6,0,1,6,64,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,228,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,57,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",1,0,0,1,8,1,9,0,1,6,83,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,242,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,255,        int size = period.size();,1,0,0,1,2,1,2,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,256,        int[] values = new int[size];,1,0,1,0,4,3,0,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,257,        if (startInstant != endInstant) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,258,            for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,259,                DurationField field = period.getFieldType(i).getField(this);,1,0,0,1,4,1,4,1,0,6,60,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,260,"                int value = field.getDifference(endInstant, startInstant);",1,0,0,0,2,1,4,0,0,4,58,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,261,"                startInstant = field.add(startInstant, value);",1,0,0,0,2,0,4,0,1,4,46,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,262,                values[i] = value;,1,0,1,0,2,0,0,0,1,4,18,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,265,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,279,            long current = 0;,1,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,280,            for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,281,                DurationField field = period.getFieldType(i).getField(this);,1,0,0,1,4,1,4,1,0,6,60,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,282,                if (field.isPrecise()) {,0,0,0,2,5,1,2,0,0,4,24,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,283,"                    int value = field.getDifference(duration, current);",1,0,0,0,2,1,4,0,0,4,51,11,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,284,"                    current = field.add(current, value);",1,0,0,0,2,0,4,0,1,4,36,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,285,                    values[i] = value;,1,0,1,0,2,0,0,0,1,4,18,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,301,        if (scalar != 0 && period != null) {,2,3,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,56,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),1,0,0,1,4,3,3,0,0,5,82,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,304,                if (value != 0) {,1,1,0,1,3,1,0,0,0,5,17,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",3,1,0,1,6,1,6,0,1,7,77,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,309,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,322,        if (duration == 0 || scalar == 0) {,2,3,0,1,3,1,0,0,0,5,35,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,323,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",1,0,0,0,2,1,4,0,0,4,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,326,"        return FieldUtils.safeAdd(instant, add);",0,0,0,0,2,1,4,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0,0,0,2,4,1,4,0,0,4,72,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0,0,0,1,6,1,5,0,1,5,90,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0,0,0,1,6,1,5,0,1,5,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0,0,0,2,4,1,4,0,0,4,73,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0,0,0,1,6,1,5,0,1,5,91,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0,0,0,2,4,1,4,0,0,4,73,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0,0,0,1,6,1,5,0,1,5,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0,0,0,2,4,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0,0,0,1,6,1,5,0,1,5,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0,0,0,1,6,1,5,0,1,5,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0,0,0,2,4,1,4,0,0,4,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0,0,0,1,6,1,5,0,1,5,93,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0,0,0,1,6,1,5,0,1,5,90,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0,0,0,2,4,1,4,0,0,4,70,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0,0,0,1,6,1,5,0,1,5,83,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0,0,0,1,6,1,5,0,1,5,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0,0,0,1,6,1,5,0,1,5,83,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0,0,0,2,4,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0,0,0,1,6,1,5,0,1,5,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0,0,0,2,4,1,4,0,0,4,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0,0,0,1,6,1,5,0,1,5,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0,0,0,1,6,1,5,0,1,5,96,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0,0,0,2,4,1,4,0,0,4,72,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0,0,0,1,6,1,5,0,1,5,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0,0,0,2,4,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0,0,0,1,6,1,5,0,1,5,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0,0,0,1,6,1,5,0,1,5,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0,0,0,2,4,1,4,0,0,4,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0,0,0,1,6,1,5,0,1,5,91,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,13,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0,0,0,1,6,1,5,0,1,5,77,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,691,"            throw new IllegalArgumentException(""Id must not be null"");",0,0,0,1,2,2,0,1,2,5,58,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,145,                        } catch (RuntimeException ex) {,1,0,0,1,4,1,0,1,0,5,31,14,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,149,                            temp = forTimeZone(TimeZone.getDefault());,1,0,0,2,4,0,3,0,2,5,42,14,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,151,                    } catch (IllegalArgumentException ex) {,1,0,0,1,4,1,0,1,0,5,39,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,155,                        temp = UTC;,2,0,0,0,0,0,0,0,1,2,11,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0,0,0,2,4,1,2,1,2,6,70,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0,0,0,1,2,2,0,1,2,5,73,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,205,            return getDefault();,0,0,0,1,2,1,1,0,1,5,20,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,208,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,215,            int offset = parseOffset(id);,1,0,0,1,2,1,2,0,1,6,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,216,            if (offset == 0L) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,217,                return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,219,                id = printOffset(offset);,1,0,0,1,2,0,2,0,2,5,25,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,220,"                return fixedOffsetZone(id, offset);",0,0,0,0,2,1,3,0,1,4,35,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,237,"        return forOffsetHoursMinutes(hoursOffset, 0);",0,0,0,0,2,1,2,0,1,4,45,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,254,        if (hoursOffset == 0 && minutesOffset == 0) {,2,3,0,1,3,1,0,0,0,5,45,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,255,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,257,        if (minutesOffset < 0 || minutesOffset > 59) {,2,3,0,1,3,1,0,0,0,5,46,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",1,1,0,1,2,2,0,1,2,7,77,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,260,        int offset = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",1,0,0,0,2,1,3,0,0,4,62,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,263,            if (hoursInMinutes < 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",2,0,0,0,2,0,3,0,2,4,67,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",1,0,0,0,2,0,4,0,1,4,66,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",3,0,0,0,2,0,3,0,1,4,85,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,271,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,269,        } catch (ArithmeticException ex) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,270,"            throw new IllegalArgumentException(""Offset is too large"");",0,0,0,1,2,2,0,1,2,5,58,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,272,        return forOffsetMillis(offset);,0,0,0,1,2,1,2,0,1,5,31,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,282,        String id = printOffset(millisOffset);,1,0,0,1,2,0,2,1,1,6,38,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,283,"        return fixedOffsetZone(id, millisOffset);",0,0,0,0,2,1,3,0,1,4,41,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,302,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,303,            return getDefault();,0,0,0,1,2,1,1,0,1,5,20,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,305,        final String id = zone.getID();,1,0,0,1,2,1,2,1,1,7,31,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,306,"        if (id.equals(""UTC"")) {",0,0,0,2,5,1,2,0,1,5,23,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,307,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,311,        DateTimeZone dtz = null;,1,0,0,0,0,0,0,1,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,312,        String convId = getConvertedId(id);,1,0,0,1,2,0,2,1,1,6,35,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,313,        if (convId != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,314,            dtz = cProvider.getZone(convId);,1,0,0,1,2,0,3,0,1,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,316,        if (dtz == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,317,            dtz = cProvider.getZone(id);,1,0,0,1,2,0,3,0,1,5,28,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,319,        if (dtz != null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,320,            return dtz;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,324,        if (convId == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,325,            convId = zone.getID();,1,0,0,1,2,0,2,0,1,5,22,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,326,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0,1,0,2,7,1,4,0,2,6,61,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,327,                convId = convId.substring(3);,1,0,0,1,2,0,2,0,1,5,29,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,328,                int offset = parseOffset(convId);,1,0,0,1,2,1,2,0,1,6,33,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,329,                if (offset == 0L) {,1,1,0,1,3,1,0,0,0,5,19,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,330,                    return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,332,                    convId = printOffset(offset);,1,0,0,1,2,0,2,0,2,5,29,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,333,"                    return fixedOffsetZone(convId, offset);",0,0,0,0,2,1,3,0,1,4,39,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,337,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",1,1,0,1,2,2,0,1,3,7,90,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,349,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,350,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,352,        if (iFixedOffsetCache == null) {,1,1,0,1,3,1,0,0,0,5,32,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",1,0,0,1,2,1,0,4,2,6,71,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,356,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,1,0,0,1,2,0,3,2,0,5,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,357,        if (ref != null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,358,            zone = ref.get();,1,0,0,1,2,0,2,0,1,5,17,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,359,            if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,360,                return zone;,1,0,0,0,0,1,0,0,0,2,12,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);",4,0,0,0,2,1,0,1,2,5,55,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",1,0,0,1,4,1,3,2,1,7,65,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,365,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,374,        return cAvailableIDs;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,387,        return cProvider;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,401,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,402,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,403,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0,0,0,2,4,1,2,1,2,6,71,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,405,        setProvider0(provider);,0,0,0,1,2,0,2,0,1,4,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,406,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,420,            throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,424,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0,0,0,1,2,2,0,1,2,5,71,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,427,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,450,                    provider = (Provider) Class.forName(providerClass).newInstance();,1,0,0,1,6,0,4,1,1,6,65,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,454,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,451,                } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,452,                    Thread thread = Thread.currentThread();,1,0,0,1,2,0,2,1,0,5,39,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,453,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0,0,0,1,4,0,5,0,0,3,54,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,456,        } catch (SecurityException ex) {,1,0,0,1,4,1,0,1,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,463,            } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,464,                Thread thread = Thread.currentThread();,1,0,0,1,2,0,2,1,0,5,39,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,465,"                thread.getThreadGroup().uncaughtException(thread, ex);",0,0,0,1,4,0,5,0,0,3,54,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,470,            provider = new UTCProvider();,1,0,0,1,2,1,0,1,2,6,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,486,        return cNameProvider;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,500,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,501,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,502,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0,0,0,2,4,1,2,1,2,6,75,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,504,        setNameProvider0(nameProvider);,0,0,0,1,2,0,2,0,1,4,31,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,505,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,534,                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();,1,0,0,1,6,0,4,1,1,6,73,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,538,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,535,                } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,536,                    Thread thread = Thread.currentThread();,1,0,0,1,2,0,2,1,0,5,39,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,537,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0,0,0,1,4,0,5,0,0,3,54,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,540,        } catch (SecurityException ex) {,1,0,0,1,4,1,0,1,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,559,"        Map<String, String> map = cZoneIdConversion;",2,0,0,0,0,0,0,3,0,2,44,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,560,        if (map == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,562,"            map = new HashMap<String, String>();",1,0,0,1,2,1,0,3,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,563,"            map.put(""GMT"", ""UTC"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,564,"            map.put(""WET"", ""WET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,565,"            map.put(""CET"", ""CET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,566,"            map.put(""MET"", ""CET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,567,"            map.put(""ECT"", ""CET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,568,"            map.put(""EET"", ""EET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,569,"            map.put(""MIT"", ""Pacific/Apia"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,570,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0,0,0,0,2,0,2,0,2,3,58,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,571,"            map.put(""AST"", ""America/Anchorage"");",0,0,0,0,2,0,2,0,2,3,36,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,572,"            map.put(""PST"", ""America/Los_Angeles"");",0,0,0,0,2,0,2,0,2,3,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,573,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",0,0,0,0,2,0,2,0,2,3,56,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,574,"            map.put(""PNT"", ""America/Phoenix"");",0,0,0,0,2,0,2,0,2,3,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,575,"            map.put(""CST"", ""America/Chicago"");",0,0,0,0,2,0,2,0,2,3,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,576,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0,0,0,0,2,0,2,0,2,3,58,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,577,"            map.put(""IET"", ""America/Indiana/Indianapolis"");",0,0,0,0,2,0,2,0,2,3,47,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,578,"            map.put(""PRT"", ""America/Puerto_Rico"");",0,0,0,0,2,0,2,0,2,3,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,579,"            map.put(""CNT"", ""America/St_Johns"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,580,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");",0,0,0,0,2,0,2,0,2,3,49,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,581,"            map.put(""BET"", ""America/Sao_Paulo"");",0,0,0,0,2,0,2,0,2,3,36,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,582,"            map.put(""ART"", ""Africa/Cairo"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,583,"            map.put(""CAT"", ""Africa/Harare"");",0,0,0,0,2,0,2,0,2,3,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,584,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0,0,0,0,2,0,2,0,2,3,37,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,585,"            map.put(""NET"", ""Asia/Yerevan"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,586,"            map.put(""PLT"", ""Asia/Karachi"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,587,"            map.put(""IST"", ""Asia/Kolkata"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,588,"            map.put(""BST"", ""Asia/Dhaka"");",0,0,0,0,2,0,2,0,2,3,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,589,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,590,"            map.put(""CTT"", ""Asia/Shanghai"");",0,0,0,0,2,0,2,0,2,3,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,591,"            map.put(""JST"", ""Asia/Tokyo"");",0,0,0,0,2,0,2,0,2,3,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,592,"            map.put(""ACT"", ""Australia/Darwin"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,593,"            map.put(""AET"", ""Australia/Sydney"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,594,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0,0,0,0,2,0,2,0,2,3,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,595,"            map.put(""NST"", ""Pacific/Auckland"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,596,            cZoneIdConversion = map;,2,0,0,0,0,0,0,0,1,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,598,        return map.get(id);,0,0,0,1,2,1,3,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,604,        Chronology chrono = new BaseChronology() {,1,0,0,1,3,1,0,2,1,6,42,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,618,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,0,0,0,1,8,2,5,0,2,5,72,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,631,        StringBuffer buf = new StringBuffer();,1,0,0,1,2,1,0,2,1,6,38,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,632,        if (offset >= 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,633,            buf.append('+');,0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,635,            buf.append('-');,0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,636,            offset = -offset;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,639,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,1,0,0,0,3,55,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,0,2,0,4,0,0,2,47,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,1,2,1,0,0,1,6,58,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,643,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,1,0,0,0,3,59,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,644,        buf.append(':');,0,0,0,1,2,0,2,0,1,4,16,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,0,2,0,4,0,0,2,49,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,647,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,648,            return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,651,        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,1,0,0,0,3,59,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,652,        buf.append(':');,0,0,0,1,2,0,2,0,1,4,16,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,653,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0,0,0,0,2,0,4,0,0,2,49,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,654,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,655,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,656,            return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,659,        buf.append('.');,0,0,0,1,2,0,2,0,1,4,16,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,660,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0,0,0,0,2,0,4,0,0,2,48,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,661,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,670,        if (cOffsetFormatter == null) {,1,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,49,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,675,        return cOffsetFormatter;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,729,"        return getShortName(instant, null);",0,0,0,0,2,1,2,0,1,4,35,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,744,        if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,745,            locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,747,        String nameKey = getNameKey(instant);,1,0,0,1,2,0,2,1,1,6,37,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,748,        if (nameKey == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,749,            return iID;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,751,"        String name = cNameProvider.getShortName(locale, iID, nameKey);",1,0,0,0,2,0,5,1,0,4,63,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,752,        if (name != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,753,            return name;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,755,        return printOffset(getOffset(instant));,0,0,0,2,4,1,3,0,2,5,39,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,769,"        return getName(instant, null);",0,0,0,0,2,1,2,0,1,4,30,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,784,        if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,785,            locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,787,        String nameKey = getNameKey(instant);,1,0,0,1,2,0,2,1,1,6,37,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,788,        if (nameKey == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,789,            return iID;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,791,"        String name = cNameProvider.getName(locale, iID, nameKey);",1,0,0,0,2,0,5,1,0,4,58,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,792,        if (name != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,793,            return name;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,795,        return printOffset(getOffset(instant));,0,0,0,2,4,1,3,0,2,5,39,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,813,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,814,            return getOffset(DateTimeUtils.currentTimeMillis());,0,0,0,2,4,1,3,0,1,5,52,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,816,        return getOffset(instant.getMillis());,0,0,0,2,4,1,3,0,1,5,38,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,844,        return getOffset(instant) == getStandardOffset(instant);,0,1,0,1,4,1,4,0,2,6,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,882,        final int offsetLocal = getOffset(instantLocal);,1,0,0,1,2,2,2,0,2,6,48,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,884,        final long instantAdjusted = instantLocal - offsetLocal;,3,1,0,0,0,2,0,0,1,4,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,885,        final int offsetAdjusted = getOffset(instantAdjusted);,1,0,0,1,2,2,2,0,2,6,54,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,887,        if (offsetLocal != offsetAdjusted) {,2,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,890,            if ((offsetLocal - offsetAdjusted) < 0) {,2,2,0,2,5,1,0,0,0,5,41,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,894,                long nextLocal = nextTransition(instantAdjusted);,1,0,0,1,2,1,2,0,1,6,49,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,895,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,3,1,0,1,2,1,1,0,1,7,66,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,896,                if (nextLocal != nextAdjusted) {,2,1,0,1,3,1,0,0,0,5,32,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,897,                    return offsetLocal;,1,0,0,0,0,1,0,0,0,2,19,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,899,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,900,        } else if (offsetLocal >= 0) {,1,1,0,1,4,2,0,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,901,            long prev = previousTransition(instantAdjusted);,1,0,0,1,2,1,2,0,1,6,48,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,902,            if (prev < instantAdjusted) {,2,1,0,1,3,1,0,0,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,903,                int offsetPrev = getOffset(prev);,1,0,0,1,2,1,2,0,1,6,33,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,904,                int diff = offsetPrev - offsetLocal;,3,1,0,0,0,1,0,0,0,3,36,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,905,                if (instantAdjusted - prev <= diff) {,3,2,0,1,3,1,0,0,0,5,37,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,906,                    return offsetPrev;,1,0,0,0,0,1,0,0,0,2,18,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,910,        return offsetAdjusted;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,924,        int offset = getOffset(instantUTC);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,925,        long instantLocal = instantUTC + offset;,3,1,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,927,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,4,5,0,2,7,1,0,0,0,5,68,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,928,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,73,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,930,        return instantLocal;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,951,        int offsetOriginal = getOffset(originalInstantUTC);,1,0,0,1,2,1,2,0,1,6,51,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,952,        long instantUTC = instantLocal - offsetOriginal;,3,1,0,0,0,1,0,0,0,3,48,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,953,        int offsetLocalFromOriginal = getOffset(instantUTC);,1,0,0,1,2,1,2,0,1,6,52,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,954,        if (offsetLocalFromOriginal == offsetOriginal) {,2,1,0,1,3,1,0,0,0,5,48,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,955,            return instantUTC;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,957,"        return convertLocalToUTC(instantLocal, strict);",0,0,0,0,2,1,3,0,1,4,47,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,974,        int offsetLocal = getOffset(instantLocal);,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,976,        int offset = getOffset(instantLocal - offsetLocal);,3,1,0,1,2,1,1,0,1,7,51,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,978,        if (offsetLocal != offset) {,2,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,982,            if (strict || offsetLocal < 0) {,2,2,0,1,3,1,0,0,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,984,                long nextLocal = nextTransition(instantLocal - offsetLocal);,3,1,0,1,2,1,1,0,1,7,60,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,985,                if (nextLocal == (instantLocal - offsetLocal)) {,3,2,0,2,5,1,0,0,0,5,48,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,986,                    nextLocal = Long.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,27,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,988,                long nextAdjusted = nextTransition(instantLocal - offset);,3,1,0,1,2,1,1,0,1,7,58,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,989,                if (nextAdjusted == (instantLocal - offset)) {,3,2,0,2,5,1,0,0,0,5,46,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,990,                    nextAdjusted = Long.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,30,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,992,                if (nextLocal != nextAdjusted) {,2,1,0,1,3,1,0,0,0,5,32,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,994,                    if (strict) {,1,0,0,1,3,1,0,0,0,4,13,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,996,"                        throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" +",0,1,0,0,1,2,0,1,2,5,91,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1003,                        offset = offsetLocal;,2,0,0,0,0,0,0,0,1,2,21,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1009,        long instantUTC = instantLocal - offset;,3,1,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1011,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,4,5,0,2,7,1,0,0,0,5,69,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1012,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,78,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1014,        return instantUTC;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1028,        if (newZone == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1029,            newZone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,36,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1031,        if (newZone == this) {,1,1,0,1,3,2,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1032,            return oldInstant;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1034,        long instantLocal = convertUTCToLocal(oldInstant);,1,0,0,1,2,1,2,0,1,6,50,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1035,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",0,0,0,0,2,1,4,0,1,4,66,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1145,        if (isFixed()) {,0,0,0,2,5,1,1,0,1,5,16,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1146,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1149,            localDateTime.toDateTime(this);,0,0,0,1,2,1,2,0,0,4,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1150,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1151,        } catch (IllegalArgumentException ex) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1152,            return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1167,        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;,4,2,0,0,0,1,0,0,0,3,69,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1168,        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;,4,2,0,0,0,1,0,0,0,3,68,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1169,        long offsetBefore = getOffset(instantBefore);,1,0,0,1,2,1,2,0,1,6,45,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1170,        long offsetAfter = getOffset(instantAfter);,1,0,0,1,2,1,2,0,1,6,43,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1171,        if (offsetBefore <= offsetAfter) {,2,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1172,"            return instant;  // not an overlap (less than is a gap, equal is normal case)",1,0,0,0,2,2,0,0,0,3,77,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1176,        long diff = offsetBefore - offsetAfter;,3,1,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1177,        long transition = nextTransition(instantBefore);,1,0,0,1,2,1,2,0,1,6,48,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1178,        long overlapStart = transition - diff;,3,1,0,0,0,1,0,0,0,3,38,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1179,        long overlapEnd = transition + diff;,3,1,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1180,        if (instant < overlapStart || instant >= overlapEnd) {,4,3,0,1,3,1,0,0,0,5,54,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1181,          return instant;  // not an overlap,1,0,0,0,0,1,0,0,0,2,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1185,        long afterStart = instant - overlapStart;,3,1,0,0,0,1,0,0,0,3,41,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1186,        if (afterStart >= diff) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1188,          return earlierOrLater ? instant : instant - diff;,4,1,0,0,0,1,0,0,0,3,49,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1191,          return earlierOrLater ? instant + diff : instant;,4,1,0,0,0,1,0,0,0,3,49,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1233,        return java.util.TimeZone.getTimeZone(iID);,3,0,0,1,2,1,2,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1258,        return getID();,0,0,0,1,2,1,1,0,1,5,15,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1268,        return new Stub(iID);,1,0,0,1,2,2,0,1,1,6,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,515,            return System.currentTimeMillis();,0,0,0,1,2,1,2,0,0,4,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,554,        OffsetMillisProvider(long offsetMillis) {,2,0,0,1,3,1,0,0,0,4,41,3,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,555,            iMillis = offsetMillis;,2,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,556,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,563,            return System.currentTimeMillis() + iMillis;,1,1,0,1,2,1,2,0,0,6,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,13,42,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);,0,0,0,1,4,1,5,0,0,4,76,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,13,47,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);,0,0,0,1,4,1,5,0,0,4,81,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,13,52,        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);,0,0,0,1,4,1,5,0,0,4,70,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,13,57,        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();,0,0,0,1,4,1,4,0,0,4,65,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,13,62,        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();,0,0,0,1,4,1,4,0,0,4,70,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,59,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,72,        return iChronology.getMonthOfYear(instant);,0,0,0,1,2,1,3,0,0,4,43,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,92,        if (months == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,93,            return instant; // the easy case,1,0,0,0,0,1,0,0,0,2,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,98,        long timePart = iChronology.getMillisOfDay(instant);,1,0,0,1,2,1,3,0,0,5,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,103,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",1,0,0,0,2,1,4,0,0,4,62,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,112,        int monthToUse = thisMonth - 1 + months;,3,2,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,113,        if (monthToUse >= 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,114,            yearToUse = thisYear + (monthToUse / iMax);,4,2,0,1,2,0,0,0,1,5,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,115,            monthToUse = (monthToUse % iMax) + 1;,3,2,0,1,2,0,0,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,117,            yearToUse = thisYear + (monthToUse / iMax) - 1;,4,3,0,1,2,0,0,0,1,5,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,118,            monthToUse = Math.abs(monthToUse);,1,0,0,1,2,0,3,0,1,5,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,119,            int remMonthToUse = monthToUse % iMax;,3,1,0,0,0,1,0,0,0,3,38,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,121,            if (remMonthToUse == 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,122,                remMonthToUse = iMax;,2,0,0,0,0,0,0,0,1,2,21,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,124,            monthToUse = iMax - remMonthToUse + 1;,3,2,0,0,0,0,0,0,1,3,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,126,            if (monthToUse == 1) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,127,                yearToUse += 1;,1,0,0,0,0,0,0,0,1,2,15,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",1,0,0,0,2,1,5,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",1,0,0,0,2,1,4,0,0,4,67,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,138,        if (dayToUse > maxDay) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,139,            dayToUse = maxDay;,2,0,0,0,0,0,0,0,1,2,18,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,144,        long datePart =,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,146,        return datePart + timePart;,2,1,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,151,        int i_months = (int)months;,2,0,0,1,2,2,0,0,0,4,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,152,        if (i_months == months) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,153,"            return add(instant, i_months);",0,0,0,0,2,1,3,0,1,4,30,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,158,        long timePart = iChronology.getMillisOfDay(instant);,1,0,0,1,2,1,3,0,0,5,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,160,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",1,0,0,0,2,1,4,0,0,4,62,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,164,        long monthToUse = thisMonth - 1 + months;,3,2,0,0,0,1,0,0,0,3,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,165,        if (monthToUse >= 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,166,            yearToUse = thisYear + (monthToUse / iMax);,4,2,0,1,2,0,0,0,1,5,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,167,            monthToUse = (monthToUse % iMax) + 1;,3,2,0,1,2,0,0,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,169,            yearToUse = thisYear + (monthToUse / iMax) - 1;,4,3,0,1,2,0,0,0,1,5,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,170,            monthToUse = Math.abs(monthToUse);,1,0,0,1,2,0,3,0,1,5,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,171,            int remMonthToUse = (int)(monthToUse % iMax);,3,1,0,1,4,2,0,0,0,5,45,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,172,            if (remMonthToUse == 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,173,                remMonthToUse = iMax;,2,0,0,0,0,0,0,0,1,2,21,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,175,            monthToUse = iMax - remMonthToUse + 1;,3,2,0,0,0,0,0,0,1,3,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,176,            if (monthToUse == 1) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,177,                yearToUse += 1;,1,0,0,0,0,0,0,0,1,2,15,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,181,        if (yearToUse < iChronology.getMinYear() ||,1,2,0,1,3,1,2,0,0,6,43,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,184,            throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,188,        int i_yearToUse = (int)yearToUse;,2,0,0,1,2,2,0,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,189,        int i_monthToUse = (int)monthToUse;,2,0,0,1,2,2,0,0,0,4,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",1,0,0,0,2,1,5,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);",1,0,0,0,2,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,193,        if (dayToUse > maxDay) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,194,            dayToUse = maxDay;,2,0,0,0,0,0,0,0,1,2,18,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,197,        long datePart =,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,199,        return datePart + timePart;,2,1,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,206,        if (valueToAdd == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,207,            return values;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,209,        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {,1,4,0,3,11,1,7,0,0,6,111,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,211,            int curMonth0 = partial.getValue(0) - 1;,1,1,0,1,2,1,2,0,0,6,40,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,212,            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;,3,4,0,3,6,1,0,0,0,5,63,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,213,"            return set(partial, 0, values, newMonth);",0,0,0,0,2,1,4,0,1,4,41,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,215,        if (DateTimeUtils.isContiguous(partial)) {,0,0,0,2,5,1,3,0,0,4,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,216,            long instant = 0L;,1,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,217,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,57,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,218,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",1,0,1,1,8,0,7,0,1,6,80,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,220,"            instant = add(instant, valueToAdd);",1,0,0,0,2,0,3,0,2,4,35,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,221,"            return iChronology.get(partial, instant);",0,0,0,0,2,1,4,0,0,3,41,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,223,"            return super.add(partial, fieldIndex, values, valueToAdd);",5,0,0,0,2,2,0,0,0,3,58,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,238,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));",0,0,0,1,6,1,9,0,2,5,81,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,243,        if (minuendInstant < subtrahendInstant) {,2,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,244,"            return -getDifference(subtrahendInstant, minuendInstant);",0,0,0,0,2,1,3,0,2,4,57,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,247,        int minuendYear = iChronology.getYear(minuendInstant);,1,0,0,1,2,1,3,0,0,5,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,248,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",1,0,0,0,2,1,4,0,0,4,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,249,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,1,0,0,1,2,1,3,0,0,5,60,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,250,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",1,0,0,0,2,1,4,0,0,4,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,252,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,6,4,0,2,6,2,0,0,0,5,98,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,256,        int minuendDom = iChronology.getDayOfMonth,1,0,0,0,0,1,2,0,0,3,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,258,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",1,1,0,0,5,1,4,0,0,5,78,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,260,            int subtrahendDom = iChronology.getDayOfMonth,1,0,0,0,0,1,2,0,0,3,45,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,262,            if (subtrahendDom > minuendDom) {,2,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,266,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);",1,0,0,1,4,0,5,0,1,5,80,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,271,        long minuendRem = minuendInstant,2,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,273,        long subtrahendRem = subtrahendInstant,2,1,0,0,0,1,0,0,0,3,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,276,        if (minuendRem < subtrahendRem) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,277,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,280,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,298,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0,0,0,0,2,1,5,0,0,3,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,300,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,302,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",1,0,0,0,2,1,4,0,0,4,59,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,303,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",1,0,0,0,2,1,4,0,0,4,61,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,304,        if (thisDom > maxDom) {,2,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,306,            thisDom = maxDom;,2,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,309,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0,1,0,0,2,1,5,0,0,4,68,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,320,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,321,        if (iChronology.isLeapYear(thisYear)) {,0,0,0,2,5,1,3,0,0,4,39,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,322,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);",1,1,0,0,4,1,4,0,0,5,69,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,324,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,329,        return isLeap(instant) ? 1 : 0;,0,0,0,1,2,1,2,0,1,5,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,339,        return MIN;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,344,        return iMax;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,349,        int year = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,350,"        int month = iChronology.getMonthOfYear(instant, year);",1,0,0,0,2,1,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,351,"        return iChronology.getYearMonthMillis(year, month);",0,0,0,0,2,1,4,0,0,3,51,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,356,        return instant - roundFloor(instant);,1,1,0,1,2,1,2,0,1,7,37,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,13,364,        return iChronology.monthOfYear();,0,0,0,1,2,1,2,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,0,4,1,5,0,1,4,84,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,118,        if (minuendInstant < subtrahendInstant) {,2,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);",0,0,0,0,2,1,3,0,2,4,63,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,122,        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;,4,2,0,1,2,1,0,0,0,5,69,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {",1,1,0,0,5,1,3,0,1,6,58,4,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,125,                difference++;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);",1,1,0,0,5,1,3,0,1,6,63,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,127,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {",1,1,0,0,6,2,3,0,1,6,65,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,130,                difference--;,1,0,0,0,0,0,0,0,1,2,13,9,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);",1,1,0,0,5,1,3,0,1,6,62,7,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,133,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,145,        return iUnitMillis;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,52,"            throw new IllegalArgumentException(""The type must not be null"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,62,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,94,"        return getAsText(get(instant), locale);",0,0,0,1,4,1,4,0,2,5,39,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,106,"        return getAsText(instant, null);",0,0,0,0,2,1,2,0,1,4,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,121,"        return getAsText(fieldValue, locale);",0,0,0,0,2,1,3,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,136,"        return getAsText(partial, partial.get(getType()), locale);",0,0,0,2,6,1,6,0,2,5,58,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,153,        return Integer.toString(fieldValue);,0,0,0,1,2,1,3,0,0,4,36,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,168,"        return getAsShortText(get(instant), locale);",0,0,0,1,4,1,4,0,2,5,44,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,180,"        return getAsShortText(instant, null);",0,0,0,0,2,1,2,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,195,"        return getAsShortText(fieldValue, locale);",0,0,0,0,2,1,3,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,210,"        return getAsShortText(partial, partial.get(getType()), locale);",0,0,0,2,6,1,6,0,2,5,63,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,227,"        return getAsText(fieldValue, locale);",0,0,0,0,2,1,3,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,253,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,267,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,298,        if (valueToAdd == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,299,            return values;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,304,        DateTimeField nextField = null;,1,0,0,0,0,0,0,1,0,2,31,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,306,        while (valueToAdd > 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,307,"            int max = getMaximumValue(instant, values);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,308,            long proposed = values[fieldIndex] + valueToAdd;,2,1,1,0,2,1,0,0,0,5,48,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,309,            if (proposed <= max) {,2,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,310,                values[fieldIndex] = (int) proposed;,1,0,1,1,4,1,0,0,1,6,36,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,311,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,313,            if (nextField == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,314,                if (fieldIndex == 0) {,1,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0,0,0,1,2,3,0,1,2,5,69,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,317,                nextField = instant.getField(fieldIndex - 1);,2,1,0,1,2,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0,1,0,2,11,1,5,0,1,6,82,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0,0,0,1,2,3,0,1,2,5,61,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,2,2,1,1,4,0,0,0,1,6,74,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",2,1,0,0,2,0,4,0,1,5,90,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0,0,1,0,4,1,3,0,2,5,83,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,326,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,327,        while (valueToAdd < 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,328,"            int min = getMinimumValue(instant, values);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,329,            long proposed = values[fieldIndex] + valueToAdd;,2,1,1,0,2,1,0,0,0,5,48,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,330,            if (proposed >= min) {,2,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,331,                values[fieldIndex] = (int) proposed;,1,0,1,1,4,1,0,0,1,6,36,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,332,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,334,            if (nextField == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,335,                if (fieldIndex == 0) {,1,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0,0,0,1,2,3,0,1,2,5,69,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,338,                nextField = instant.getField(fieldIndex - 1);,2,1,0,1,2,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,339,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0,1,0,2,11,1,5,0,1,6,82,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0,0,0,1,2,3,0,1,2,5,61,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,343,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,2,2,1,1,4,0,0,0,1,6,74,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",2,1,0,0,2,0,4,0,2,5,98,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0,0,1,0,4,1,3,0,2,5,88,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,346,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0,0,1,0,4,1,4,0,1,5,87,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,379,        if (valueToAdd == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,380,            return values;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,385,        DateTimeField nextField = null;,1,0,0,0,0,0,0,1,0,2,31,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,387,        while (valueToAdd > 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,388,"            int max = getMaximumValue(instant, values);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,389,            long proposed = values[fieldIndex] + valueToAdd;,2,1,1,0,2,1,0,0,0,5,48,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,390,            if (proposed <= max) {,2,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,391,                values[fieldIndex] = (int) proposed;,1,0,1,1,4,1,0,0,1,6,36,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,392,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,394,            if (nextField == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,395,                if (fieldIndex == 0) {,1,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,396,                    valueToAdd -= (max + 1) - values[fieldIndex];,2,2,1,1,4,0,0,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,397,"                    values[fieldIndex] = getMinimumValue(instant, values);",0,0,1,0,4,0,3,0,2,4,54,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,398,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,400,                nextField = instant.getField(fieldIndex - 1);,2,1,0,1,2,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,402,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0,1,0,2,11,1,5,0,1,6,82,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0,0,0,1,2,3,0,1,2,5,61,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,406,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,2,2,1,1,4,0,0,0,1,6,74,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",2,1,0,0,2,0,4,0,1,5,101,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0,0,1,0,4,1,3,0,2,5,83,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,409,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,410,        while (valueToAdd < 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,411,"            int min = getMinimumValue(instant, values);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,412,            long proposed = values[fieldIndex] + valueToAdd;,2,1,1,0,2,1,0,0,0,5,48,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,413,            if (proposed >= min) {,2,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,414,                values[fieldIndex] = (int) proposed;,1,0,1,1,4,1,0,0,1,6,36,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,415,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,417,            if (nextField == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,418,                if (fieldIndex == 0) {,1,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,419,                    valueToAdd -= (min - 1) - values[fieldIndex];,2,2,1,1,4,0,0,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,420,"                    values[fieldIndex] = getMaximumValue(instant, values);",0,0,1,0,4,0,3,0,2,4,54,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,421,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,423,                nextField = instant.getField(fieldIndex - 1);,2,1,0,1,2,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,424,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0,1,0,2,11,1,5,0,1,6,82,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0,0,0,1,2,3,0,1,2,5,61,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,428,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,2,2,1,1,4,0,0,0,1,6,74,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",2,1,0,0,2,0,4,0,2,5,109,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0,0,1,0,4,1,3,0,2,5,88,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,431,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0,0,1,0,4,1,4,0,1,5,87,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,461,        int current = get(instant);,1,0,0,1,2,1,2,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,462,        int wrapped = FieldUtils.getWrappedValue,1,0,0,0,0,1,2,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,464,"        return set(instant, wrapped);",0,0,0,0,2,1,3,0,1,4,29,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,495,        int current = values[fieldIndex];,1,0,1,0,2,1,0,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,496,        int wrapped = FieldUtils.getWrappedValue,1,0,0,0,0,1,2,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields",0,0,0,0,2,1,5,0,1,4,76,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,75,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,81,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));",0,0,0,0,6,1,9,0,2,4,113,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,586,        values[fieldIndex] = newValue;,1,0,1,0,2,0,0,0,1,4,30,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,589,        for (int i = fieldIndex + 1; i < partial.size(); i++) {,4,2,0,2,5,2,2,0,1,7,55,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,590,            DateTimeField field = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,42,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,591,"            if (values[i] > field.getMaximumValue(partial, values)) {",0,1,1,0,7,1,4,0,0,5,57,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,592,"                values[i] = field.getMaximumValue(partial, values);",0,0,1,0,4,0,4,0,1,4,51,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,594,"            if (values[i] < field.getMinimumValue(partial, values)) {",0,1,1,0,7,1,4,0,0,5,57,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,595,"                values[i] = field.getMinimumValue(partial, values);",0,0,1,0,4,0,4,0,1,4,51,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,598,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,618,"        int value = convertText(text, locale);",1,0,0,0,2,1,3,0,1,5,38,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,619,"        return set(instant, value);",0,0,0,0,2,1,3,0,1,4,27,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,635,"        return set(instant, text, null);",0,0,0,0,2,1,3,0,1,4,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,654,"        int value = convertText(text, locale);",1,0,0,0,2,1,3,0,1,5,38,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,655,"        return set(instant, fieldIndex, values, value);",0,0,0,0,2,1,5,0,1,4,47,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,668,            return Integer.parseInt(text);,0,0,0,1,2,1,3,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,669,        } catch (NumberFormatException ex) {,1,0,0,1,4,1,0,1,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,670,"            throw new IllegalFieldValueException(getType(), text);",1,0,0,1,4,2,1,1,2,7,54,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,704,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,716,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,746,        return getMinimumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,758,        return getMinimumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,772,        return getMinimumValue(instant);,0,0,0,1,2,1,2,0,1,5,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,792,        return getMaximumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,804,        return getMaximumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,818,        return getMaximumValue(instant);,0,0,0,1,2,1,2,0,1,5,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,829,        int max = getMaximumValue();,1,0,0,1,2,1,1,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,830,        if (max >= 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,831,            if (max < 10) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,832,                return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,833,            } else if (max < 100) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,834,                return 2;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,835,            } else if (max < 1000) {,1,1,0,1,4,2,0,0,0,5,24,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,836,                return 3;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,839,        return Integer.toString(max).length();,0,0,0,1,4,1,4,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,850,        return getMaximumTextLength(locale);,0,0,0,1,2,1,2,0,1,5,36,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,886,        long newInstant = roundFloor(instant);,1,0,0,1,2,1,2,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,887,        if (newInstant != instant) {,2,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,888,"            instant = add(newInstant, 1);",1,0,0,0,2,0,2,0,2,4,29,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,890,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,903,        long floor = roundFloor(instant);,1,0,0,1,2,1,2,0,1,6,33,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,904,        long ceiling = roundCeiling(instant);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,906,        long diffFromFloor = instant - floor;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,907,        long diffToCeiling = ceiling - instant;,3,1,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,909,        if (diffFromFloor <= diffToCeiling) {,2,1,0,1,3,1,0,0,0,5,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,911,            return floor;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,913,            return ceiling;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,927,        long floor = roundFloor(instant);,1,0,0,1,2,1,2,0,1,6,33,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,928,        long ceiling = roundCeiling(instant);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,930,        long diffFromFloor = instant - floor;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,931,        long diffToCeiling = ceiling - instant;,3,1,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,933,        if (diffToCeiling <= diffFromFloor) {,2,1,0,1,3,1,0,0,0,5,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,935,            return ceiling;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,937,            return floor;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,955,        long floor = roundFloor(instant);,1,0,0,1,2,1,2,0,1,6,33,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,956,        long ceiling = roundCeiling(instant);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,958,        long diffFromFloor = instant - floor;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,959,        long diffToCeiling = ceiling - instant;,3,1,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,961,        if (diffFromFloor < diffToCeiling) {,2,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,963,            return floor;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,964,        } else if (diffToCeiling < diffFromFloor) {,2,1,0,1,4,2,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,966,            return ceiling;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,970,            if ((get(ceiling) & 1) == 0) {,0,2,0,3,7,1,2,0,1,6,30,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,971,                return ceiling;,1,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,973,            return floor;,1,0,0,0,0,1,0,0,0,2,13,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,994,        return instant - roundFloor(instant);,1,1,0,1,2,1,2,0,1,7,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,13,1003,"        return ""DateTimeField["" + getName() + ']';",0,1,0,1,4,1,1,0,3,6,42,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,13,209,        if (value == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,13,210,"            return subtract(instant, (long) value);",1,0,0,1,4,2,2,0,1,6,39,6,0.0,0,0
defect4j,time,org/joda/time/DurationField,13,212,"        return add(instant, -value);",1,0,0,0,2,1,2,0,2,5,28,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,13,224,        if (value == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,13,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/DurationField,13,227,"        return add(instant, -value);",1,0,0,0,2,1,2,0,2,5,28,4,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,156,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,164,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,169,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",2,1,0,0,2,2,3,0,0,5,65,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",2,1,0,0,2,2,3,0,0,5,65,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,182,"            return ImpreciseDateTimeField.this.add(instant, value);",1,0,0,0,2,2,3,0,0,4,55,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,186,"            return ImpreciseDateTimeField.this.add(instant, value);",1,0,0,0,2,2,3,0,0,4,55,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,190,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,13,195,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,49,"            throw new IllegalArgumentException(""The type must not be null"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,59,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,79,        return FieldUtils.safeToInt(getValueAsLong(duration));,0,0,0,2,4,1,4,0,1,5,54,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,91,        return duration / getUnitMillis();,1,1,0,1,2,1,1,0,1,7,34,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));",0,0,0,0,4,1,5,0,1,4,63,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,123,        return value * getUnitMillis();  // safe,1,1,0,1,2,1,1,0,1,7,40,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());",0,0,0,1,4,1,4,0,1,5,55,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,0,4,1,5,0,1,4,84,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,146,        long otherMillis = otherField.getUnitMillis();,1,0,0,1,2,1,2,0,0,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,147,        long thisMillis = getUnitMillis();,1,0,0,1,2,1,1,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,149,        if (thisMillis == otherMillis) {,2,1,0,1,3,1,0,0,0,5,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,152,        if (thisMillis < otherMillis) {,2,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,153,            return -1;,0,0,0,0,0,1,0,0,1,2,10,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,155,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,165,"        return ""DurationField["" + getName() + ']';",0,1,0,1,4,1,1,0,3,6,42,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,13,38,public abstract class BaseDurationField extends DurationField implements Serializable {,1,0,0,0,1,5,0,2,2,5,87,1,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,134,            throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,144,            return base.getZone();,0,0,0,1,2,1,2,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,153,        if ((base = getBase()) != null) {,1,1,0,3,7,1,1,0,2,7,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0,0,0,0,2,1,6,0,0,3,74,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,157,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,2,0,0,1,28,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",1,1,0,0,2,1,4,0,1,6,74,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,167,        if ((base = getBase()) != null) {,1,1,0,3,7,1,1,0,2,7,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,5,0,0,3,60,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0,0,0,1,4,0,5,0,0,3,78,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0,0,0,1,4,0,5,0,0,3,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0,0,0,1,4,0,5,0,0,3,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0,0,0,1,4,0,5,0,0,3,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0,4,0,0,2,1,4,0,1,5,59,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,185,        return iMinDaysInFirstWeek;,1,0,0,0,0,1,0,0,0,2,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,196,        return super.equals(obj);,2,0,0,1,2,2,0,0,0,4,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,206,        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();,0,3,0,1,12,1,6,0,3,6,97,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,217,        StringBuilder sb = new StringBuilder(60);,1,0,0,1,2,1,0,2,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,218,        String name = getClass().getName();,1,0,0,1,4,0,2,1,1,6,35,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,219,        int index = name.lastIndexOf('.');,1,0,0,1,2,1,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,220,        if (index >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,221,            name = name.substring(index + 1);,2,1,0,1,2,0,2,0,1,6,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,223,        sb.append(name);,0,0,0,1,2,0,3,0,0,3,16,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,224,        sb.append('[');,0,0,0,1,3,0,2,0,1,4,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,225,        DateTimeZone zone = getZone();,1,0,0,1,2,0,1,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,226,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,227,            sb.append(zone.getID());,0,0,0,2,4,0,4,0,0,3,24,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,229,        if (getMinimumDaysInFirstWeek() != 4) {,0,1,0,2,5,1,1,0,1,6,39,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,230,"            sb.append("",mdfw="");",0,0,0,0,2,0,2,0,1,3,20,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,231,            sb.append(getMinimumDaysInFirstWeek());,0,0,0,2,4,0,3,0,1,4,39,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,233,        sb.append(']');,0,0,0,1,3,0,2,0,1,4,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,234,        return sb.toString();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,307,        return 366;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,317,        return isLeapYear(year) ? 366 : 365;,0,0,0,1,2,1,2,0,1,5,36,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,327,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,1,0,0,1,2,1,2,0,1,6,55,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,328,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,2,1,0,1,2,1,1,0,1,7,59,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,329,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,4,2,0,2,6,2,0,0,0,5,89,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,339,        long jan1millis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,340,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,1,0,0,1,2,1,2,0,1,6,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,342,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,2,2,0,2,5,1,0,0,0,5,48,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,344,            return jan1millis + (8 - jan1dayOfWeek),2,3,0,1,2,1,0,0,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,348,            return jan1millis - (jan1dayOfWeek - 1),2,3,0,1,2,1,0,0,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,360,        return getYearInfo(year).iFirstDayMillis;,1,0,0,1,2,1,2,0,1,6,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,371,        long millis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,372,"        millis += getTotalMillisByYearMonth(year, month);",1,0,0,0,2,0,3,0,2,4,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,373,        return millis;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,385,        long millis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,386,"        millis += getTotalMillisByYearMonth(year, month);",1,0,0,0,2,0,3,0,2,4,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,387,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,4,3,0,1,4,2,0,0,0,5,74,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,1,0,0,1,2,1,1,0,1,6,56,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,2,2,0,1,4,1,1,0,1,7,64,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,401,        if (i2 < 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,402,            i2 = i2 - unitMillis + 1;,3,2,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,404,        int year = (int) (i2 / unitMillis);,3,1,0,1,4,2,0,0,0,5,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,406,        long yearStart = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,407,        long diff = instant - yearStart;,3,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,409,        if (diff < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,410,            year--;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,3,2,0,1,4,2,0,0,0,5,61,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,414,            if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,415,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,3,1,0,0,0,0,0,0,1,3,50,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,417,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,3,1,0,0,0,0,0,0,1,3,50,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,420,            yearStart += oneYear;,2,0,0,0,0,0,0,0,1,2,21,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,422,            if (yearStart <= instant) {,2,1,0,1,3,1,0,0,0,5,27,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,424,                year++;,1,0,0,0,0,0,0,0,1,2,7,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,428,        return year;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,435,"        return getMonthOfYear(millis, getYear(millis));",0,0,0,1,4,1,4,0,2,5,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,448,        int year = getYear(millis);,1,0,0,1,2,1,2,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,449,"        int month = getMonthOfYear(millis, year);",1,0,0,0,2,1,3,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,450,"        return getDayOfMonth(millis, year, month);",0,0,0,0,2,1,4,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,458,"        int month = getMonthOfYear(millis, year);",1,0,0,0,2,1,3,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,459,"        return getDayOfMonth(millis, year, month);",0,0,0,0,2,1,4,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,468,        long dateMillis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",1,0,0,0,2,0,3,0,2,4,53,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,4,3,0,2,6,2,0,0,0,5,76,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,477,"        return getDayOfYear(instant, getYear(instant));",0,0,0,1,4,1,4,0,2,5,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,485,        long yearStart = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,4,3,0,2,6,2,0,0,0,5,76,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,493,        int year = getYear(instant);,1,0,0,1,2,1,2,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,494,"        int week = getWeekOfWeekyear(instant, year);",1,0,0,0,2,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,495,        if (week == 1) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,3,1,0,1,2,1,1,0,1,7,60,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,497,        } else if (week > 51) {,1,1,0,1,4,2,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,498,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,3,2,0,2,4,1,1,0,1,7,66,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,500,            return year;,1,0,0,0,0,1,0,0,0,2,12,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,508,"        return getWeekOfWeekyear(instant, getYear(instant));",0,0,0,1,4,1,4,0,2,5,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,516,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,1,0,0,1,2,1,2,0,1,6,55,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,517,        if (instant < firstWeekMillis1) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,518,            return getWeeksInYear(year - 1);,1,1,0,1,2,1,1,0,1,7,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,520,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,2,1,0,1,2,1,1,0,1,7,59,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,521,        if (instant >= firstWeekMillis2) {,2,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,522,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,524,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,4,3,0,2,6,2,0,0,0,5,84,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,534,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,535,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,4,1,0,0,0,0,0,0,1,3,63,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),4,3,0,2,4,0,0,0,1,5,70,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,539,            if (daysSince19700101 < -3) {,1,1,0,1,3,1,0,0,1,6,29,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,1,3,0,2,6,2,0,0,0,5,47,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,544,        return 1 + (int) ((daysSince19700101 + 3) % 7);,1,3,0,2,6,2,0,0,0,5,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,551,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,552,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,3,1,0,1,4,2,0,0,0,5,58,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),2,2,0,1,2,1,0,0,0,5,45,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,565,        return 31;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,575,        int thisYear = getYear(instant);,1,0,0,1,2,1,2,0,1,6,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",1,0,0,0,2,1,3,0,1,5,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,577,"        return getDaysInYearMonth(thisYear, thisMonth);",0,0,0,0,2,1,3,0,1,4,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,590,        return getDaysInMonthMax(instant);,0,0,0,1,2,1,2,0,1,5,34,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0,0,0,1,8,0,7,0,2,4,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0,0,0,1,6,0,7,0,1,4,97,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0,0,0,1,6,0,8,0,1,4,115,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0,0,0,0,2,1,4,0,1,4,60,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,682,        return getMaxMonth();,0,0,0,1,2,1,1,0,1,5,21,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,738,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,3,1,1,0,2,0,0,1,0,5,50,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,739,        if (info == null || info.iYear != year) {,4,3,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",2,0,0,1,4,1,2,1,3,7,63,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,741,            iYearInfoCache[year & CACHE_MASK] = info;,3,1,1,0,2,0,0,0,1,5,41,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,743,        return info;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,50,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,54,        return iChronology.getYear(instant);,0,0,0,1,2,1,3,0,0,4,36,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,58,        if (years == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,59,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,61,        int thisYear = get(instant);,1,0,0,1,2,1,2,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",1,0,0,0,2,1,4,0,0,4,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,63,"        return set(instant, newYear);",0,0,0,0,2,1,3,0,1,4,29,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,67,"        return add(instant, FieldUtils.safeToInt(years));",0,0,0,1,4,1,5,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,71,        if (years == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,72,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,75,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,76,        int wrappedYear = FieldUtils.getWrappedValue,1,0,0,0,0,1,2,0,0,3,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,78,"        return set(instant, wrappedYear);",0,0,0,0,2,1,3,0,1,4,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,82,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,2,0,0,1,28,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,84,"        return iChronology.setYear(instant, year);",0,0,0,0,2,1,4,0,0,3,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,88,        if (minuendInstant < subtrahendInstant) {,2,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);",0,0,0,0,2,1,4,0,1,4,73,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,72,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,99,        return iChronology.isLeapYear(get(instant));,0,0,0,2,4,1,4,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,103,        if (iChronology.isLeapYear(get(instant))) {,0,0,0,3,7,1,4,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,104,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,106,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,115,        return iChronology.getMinYear();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,123,        return iChronology.getYearMillis(get(instant));,0,0,0,2,4,1,4,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,127,        int year = get(instant);,1,0,0,1,2,1,2,0,1,6,24,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,128,        long yearStartMillis = iChronology.getYearMillis(year);,1,0,0,1,2,1,3,0,0,5,55,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,129,        if (instant != yearStartMillis) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,131,            instant = iChronology.getYearMillis(year + 1);,2,1,0,1,2,0,2,0,1,6,46,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,133,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,137,        return instant - roundFloor(instant);,1,1,0,1,2,1,2,0,1,7,37,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,13,144,        return iChronology.year();,0,0,0,1,2,1,2,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,51,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,60,        if (iChronology.getYear(instant) <= 0) {,0,1,0,2,5,1,3,0,0,5,40,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,61,            return DateTimeConstants.BCE;,2,0,0,0,0,1,0,0,0,2,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,63,            return DateTimeConstants.CE;,2,0,0,0,0,1,0,0,0,2,28,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,68,        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);,0,0,0,1,4,1,5,0,0,4,68,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);",4,0,0,0,2,1,3,0,0,4,85,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,82,        int oldEra = get(instant);,1,0,0,1,2,1,2,0,1,6,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,83,        if (oldEra != era) {,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,84,            int year = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,40,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,85,"            return iChronology.setYear(instant, -year);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,87,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));",0,0,0,1,6,1,7,0,1,5,76,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,96,        if (get(instant) == DateTimeConstants.CE) {,2,1,0,2,5,1,2,0,1,7,43,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,97,"            return iChronology.setYear(0, 1);",0,0,0,0,2,1,2,0,0,3,33,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,99,            return Long.MIN_VALUE;,2,0,0,0,0,1,0,0,0,2,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,104,        if (get(instant) == DateTimeConstants.BCE) {,2,1,0,2,5,1,2,0,1,7,44,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,105,"            return iChronology.setYear(0, 1);",0,0,0,0,2,1,2,0,0,3,33,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,107,            return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,113,        return roundFloor(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,118,        return roundFloor(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,123,        return roundFloor(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,135,        return DateTimeConstants.BCE;,2,0,0,0,0,1,0,0,0,2,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,139,        return DateTimeConstants.CE;,2,0,0,0,0,1,0,0,0,2,28,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,143,        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();,0,0,0,1,4,1,4,0,0,4,63,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,13,150,        return iChronology.era();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,79,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,83,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,101,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,110,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,119,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,128,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,137,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,146,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,155,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,164,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,173,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,182,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,191,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,200,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,209,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,227,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,238,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,239,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,240,        } else if (obj instanceof UnsupportedDurationField) {,1,0,0,1,4,3,0,1,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,241,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,2,0,0,1,2,0,0,2,0,4,64,7,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,242,            if (other.getName() == null) {,0,1,0,2,5,1,2,0,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,243,                return (getName() == null);,0,1,0,2,4,1,1,0,1,6,27,10,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,245,            return (other.getName().equals(getName()));,0,0,0,3,8,1,4,0,1,5,43,9,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,247,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,256,        return getName().hashCode();,0,0,0,1,4,1,2,0,1,5,28,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,265,"        return ""UnsupportedDurationField["" + getName() + ']';",0,1,0,1,4,1,1,0,3,6,53,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,272,        return getInstance(iType);,0,0,0,1,2,1,2,0,1,5,26,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",1,1,0,1,2,2,0,1,2,7,74,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,13,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,1,0,0,0,1,5,0,2,2,5,91,1,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,90,"        return getInstance(DateTimeZone.getDefault(), 4);",0,0,0,1,4,1,3,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,112,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,123,            } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,124,                throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",3,0,0,0,2,0,2,0,2,4,59,10,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,132,                    chrono = new GregorianChronology,1,0,0,0,0,1,0,1,2,4,32,10,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,155,        Chronology base = getBase();,1,0,0,1,2,0,1,1,1,6,28,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,156,        int minDays = getMinimumDaysInFirstWeek();,1,0,0,1,2,1,1,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,157,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,3,1,0,1,2,0,0,0,1,5,77,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,158,        return base == null ?,1,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,171,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,181,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,182,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,184,        if (zone == getZone()) {,1,1,0,2,5,1,1,0,1,7,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,185,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,187,        return getInstance(zone);,0,0,0,1,2,1,2,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,3,8,0,2,10,1,0,0,0,5,69,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,202,        int leapYears = year / 100;,2,1,0,0,0,1,0,0,0,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,203,        if (year < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,4,7,0,2,8,0,0,0,1,5,71,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,4,4,0,1,4,0,0,0,1,5,55,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,212,            if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,213,                leapYears--;,1,0,0,0,0,0,0,0,1,2,12,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,5,4,0,2,4,1,0,0,0,5,90,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,221,        return MIN_YEAR;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,233,        return MILLIS_PER_YEAR / 2;,1,1,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,13,241,        return (1970L * MILLIS_PER_YEAR) / 2;,1,2,0,1,2,1,0,0,0,5,37,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,2,2,0,3,8,2,2,0,1,7,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,93,        return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,120,        if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,134,        return (value > 28 ? getDaysInMonthMax(instant) : 28);,1,1,0,2,4,1,2,0,1,7,54,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,139,        if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,148,        int minuendYear = getYear(minuendInstant);,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,149,        int subtrahendYear = getYear(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,2,1,0,1,2,1,2,0,1,7,62,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,153,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,2,1,0,1,2,1,2,0,1,7,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,156,        if (subtrahendRem >= FEB_29) {,2,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,157,            if (isLeapYear(subtrahendYear)) {,0,0,0,2,5,1,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,158,                if (!isLeapYear(minuendYear)) {,0,0,0,2,5,1,2,0,2,5,31,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,159,                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;,3,0,0,0,0,0,0,0,1,2,50,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,2,2,0,2,6,2,2,0,1,7,61,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,162,                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;,3,0,0,0,0,0,0,0,1,2,47,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,166,        int difference = minuendYear - subtrahendYear;,3,1,0,0,0,1,0,0,0,3,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,167,        if (minuendRem < subtrahendRem) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,168,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,170,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,175,        int thisYear = getYear(instant);,1,0,0,1,2,1,2,0,1,6,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",1,0,0,0,2,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,177,        int millisOfDay = getMillisOfDay(instant);,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,1,2,0,2,5,1,0,0,0,5,44,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,180,            if (isLeapYear(thisYear)) {,0,0,0,2,5,1,2,0,1,5,27,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,182,                if (!isLeapYear(year)) {,0,0,0,2,5,1,2,0,2,5,24,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,184,                    dayOfYear--;,1,0,0,0,0,0,0,0,1,2,12,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,188,                if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,190,                    dayOfYear++;,1,0,0,0,0,0,0,0,1,2,12,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",1,0,0,0,2,0,3,0,2,4,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,196,        instant += millisOfDay;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,13,198,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",3,0,0,0,3,1,0,2,1,5,87,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,83,        if (type == null || durationField == null) {,2,3,0,1,3,1,0,0,0,5,44,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,84,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,86,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,87,        iDurationField = durationField;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,88,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,55,        if (cCache == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",1,0,0,1,2,1,0,3,2,6,69,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,57,            field = null;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,59,            field = cCache.get(type);,1,0,0,1,2,0,3,0,1,5,25,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,60,            if (field != null && field.getDurationField() != durationField) {,2,3,0,2,5,1,2,0,0,6,65,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,61,                field = null;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,64,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,65,"            field = new UnsupportedDateTimeField(type, durationField);",3,0,0,0,2,1,0,1,2,5,58,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,66,"            cCache.put(type, field);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,68,        return field;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,95,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,99,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,108,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,117,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,126,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,135,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,144,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,153,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,162,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,171,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,180,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,189,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,198,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,207,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,216,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,225,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,234,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,243,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,252,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,261,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,270,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,75,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,81,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,297,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,306,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,315,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,324,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,333,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,343,        return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,352,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,361,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,370,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,379,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,388,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,397,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,406,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,415,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,424,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,433,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,442,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,451,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,460,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,469,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,478,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,487,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,496,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,505,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,514,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,523,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,533,"        return ""UnsupportedDateTimeField"";",0,0,0,0,0,1,0,0,1,2,34,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,540,"        return getInstance(iType, iDurationField);",0,0,0,0,2,1,3,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,13,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",1,1,0,1,2,2,0,1,2,7,74,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,76,        return duration / iUnitMillis;  // safe,2,1,0,0,0,1,0,0,0,3,39,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,88,        return value * iUnitMillis;  // safe,2,1,0,0,0,1,0,0,0,3,36,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);",0,0,0,0,2,1,4,0,0,3,51,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,104,        long addition = value * iUnitMillis;  // safe,3,1,0,0,0,1,0,0,0,3,45,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,105,"        return FieldUtils.safeAdd(instant, addition);",0,0,0,0,2,1,4,0,0,3,45,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);",1,0,0,0,2,1,4,0,0,4,60,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,110,"        return FieldUtils.safeAdd(instant, addition);",0,0,0,0,2,1,4,0,0,3,45,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",1,0,0,0,2,1,4,0,0,4,77,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,115,        return difference / iUnitMillis;,2,1,0,0,0,1,0,0,0,3,32,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,127,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,128,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,129,        } else if (obj instanceof PreciseDurationField) {,1,0,0,1,4,3,0,1,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,130,            PreciseDurationField other = (PreciseDurationField) obj;,2,0,0,1,2,0,0,2,0,4,56,7,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,131,            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);,3,3,0,2,8,1,3,0,1,7,76,7,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,13,133,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");",0,0,0,1,2,2,0,1,2,5,75,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");",0,0,0,1,2,2,0,1,2,5,77,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,79,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,80,            return (int) ((instant / getUnitMillis()) % iRange);,2,2,0,3,8,2,1,0,1,7,52,8,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,3,5,0,3,10,2,1,0,1,7,71,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,95,        int thisValue = get(instant);,1,0,0,1,2,1,2,0,1,6,29,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,96,        int wrappedValue = FieldUtils.getWrappedValue,1,0,0,0,0,1,2,0,0,3,45,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,99,        return instant + (wrappedValue - thisValue) * getUnitMillis();,3,3,0,1,4,1,1,0,1,7,62,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0,0,0,1,6,1,5,0,2,5,80,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,112,        return instant + (value - get(instant)) * iUnitMillis;,3,3,0,2,4,1,2,0,1,7,54,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,131,        return iRange - 1;,1,1,0,0,0,1,0,0,0,3,18,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,13,143,        return iRange;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");",0,0,0,1,2,2,0,1,2,5,74,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");",0,0,0,1,2,2,0,1,2,5,79,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,66,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0,0,0,1,3,1,4,0,1,5,60,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,80,        return instant + (value - get(instant)) * iUnitMillis;,3,3,0,2,4,1,2,0,1,7,54,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,92,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,93,            return instant - instant % iUnitMillis;,3,2,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,95,            instant += 1;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,96,            return instant - instant % iUnitMillis - iUnitMillis;,4,3,0,0,0,1,0,0,0,3,53,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,109,        if (instant > 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,110,            instant -= 1;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,111,            return instant - instant % iUnitMillis + iUnitMillis;,4,3,0,0,0,1,0,0,0,3,53,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,113,            return instant - instant % iUnitMillis;,3,2,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,126,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,127,            return instant % iUnitMillis;,2,1,0,0,0,1,0,0,0,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,3,4,0,1,2,1,0,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,13,163,        return getMaximumValue(instant);,0,0,0,1,2,1,2,0,1,5,32,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");",0,0,0,1,2,2,0,1,2,5,81,6,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,52,        int value = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,43,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,53,        if (value == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,54,            value = getMaximumValue();,1,0,0,1,2,0,1,0,2,5,26,6,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,56,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,60,"        return getWrappedField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,64,"        return getWrappedField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,68,"        return getWrappedField().addWrapField(instant, value);",0,0,0,1,4,1,4,0,1,5,54,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);",0,0,0,1,4,1,6,0,1,5,79,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,80,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,84,        int max = getMaximumValue();,1,0,0,1,2,1,1,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);",0,0,0,0,2,1,4,0,0,3,50,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,86,        if (value == max) {,2,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,87,            value = 0;,1,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,89,"        return getWrappedField().set(instant, value);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,93,        return getWrappedField().isLeap(instant);,0,0,0,1,4,1,3,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,97,        return getWrappedField().getLeapAmount(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,110,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,119,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,128,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,137,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,147,        return getWrappedField().getMaximumValue() + 1;,0,1,0,1,4,1,2,0,1,6,47,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,157,        return getWrappedField().getMaximumValue(instant) + 1;,0,1,0,1,4,1,3,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,167,        return getWrappedField().getMaximumValue(instant) + 1;,0,1,0,1,4,1,3,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;",0,1,0,1,4,1,4,0,1,6,62,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,181,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,185,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,189,        return getWrappedField().roundHalfFloor(instant);,0,0,0,1,4,1,3,0,1,5,49,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,193,        return getWrappedField().roundHalfCeiling(instant);,0,0,0,1,4,1,3,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,197,        return getWrappedField().roundHalfEven(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,13,201,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,13,56,"            throw new IllegalArgumentException(""The field must not be null"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,13,59,"            throw new IllegalArgumentException(""The field must be supported"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,13,74,        return iField.isLenient();,0,0,0,1,2,1,2,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,13,78,        return iField.get(instant);,0,0,0,1,2,1,3,0,0,4,27,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,13,82,"        return iField.set(instant, value);",0,0,0,0,2,1,4,0,0,3,34,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,13,94,        return iField.getMinimumValue();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,13,98,        return iField.getMaximumValue();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,13,102,        return iField.roundFloor(instant);,0,0,0,1,2,1,3,0,0,4,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,754,            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);,0,0,0,1,4,1,5,0,0,4,72,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,758,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));",0,0,0,1,6,1,7,0,1,5,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,762,            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();,0,0,0,1,4,1,4,0,0,4,67,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,45,        int year = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,46,        if (year <= 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,47,            year = 1 - year;,2,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,49,        return year;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,53,"        return getWrappedField().add(instant, years);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,57,"        return getWrappedField().add(instant, years);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,61,"        return getWrappedField().addWrapField(instant, years);",0,0,0,1,4,1,4,0,1,5,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0,0,0,1,4,1,6,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,80,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());",0,0,0,1,4,1,4,0,1,5,63,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,86,        if (iChronology.getYear(instant) <= 0) {,0,1,0,2,5,1,3,0,0,5,40,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,87,            year = 1 - year;,2,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,89,"        return super.set(instant, year);",3,0,0,0,2,2,0,0,0,3,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,101,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,105,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,109,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,13,116,        return iChronology.yearOfEra();,0,0,0,1,2,1,2,0,0,4,31,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,84,            iMin = minValue;,2,0,0,0,0,0,0,0,1,2,16,6,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,89,            iMax = maxValue;,2,0,0,0,0,0,0,0,1,2,16,6,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,100,        return super.get(instant) + iOffset;,3,1,0,1,2,2,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,112,"        instant = super.add(instant, amount);",4,0,0,0,2,1,0,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0,0,0,1,4,1,6,0,1,5,61,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,114,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,126,"        instant = super.add(instant, amount);",4,0,0,0,2,1,0,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0,0,0,1,4,1,6,0,1,5,61,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,128,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0,0,0,1,6,1,9,0,2,5,82,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0,0,0,0,2,1,5,0,0,3,54,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,153,"        return super.set(instant, value - iOffset);",4,1,0,0,2,2,0,0,0,4,43,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,157,        return getWrappedField().isLeap(instant);,0,0,0,1,4,1,3,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,161,        return getWrappedField().getLeapAmount(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,165,        return getWrappedField().getLeapDurationField();,0,0,0,1,4,1,2,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,187,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,191,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,195,        return getWrappedField().roundHalfFloor(instant);,0,0,0,1,4,1,3,0,1,5,49,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,199,        return getWrappedField().roundHalfCeiling(instant);,0,0,0,1,4,1,3,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,203,        return getWrappedField().roundHalfEven(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,207,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,13,216,        return iOffset;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0,0,0,1,2,2,0,1,2,5,69,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,64,            iDurationField = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,90,"        super(remainderField.getWrappedField(), type);",1,0,0,1,4,1,2,0,1,6,46,3,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,91,        int divisor = iDivisor = remainderField.iDivisor;,4,0,0,0,0,1,0,0,1,3,49,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,92,        iDurationField = remainderField.iRangeField;,3,0,0,0,0,0,0,0,1,2,44,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,94,        DateTimeField field = getWrappedField();,1,0,0,1,2,0,1,1,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,95,        int i = field.getMinimumValue();,1,0,0,1,2,1,2,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,96,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,6,5,0,2,6,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,98,        int j = field.getMaximumValue();,1,0,0,1,2,1,2,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,99,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,6,5,0,2,6,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,101,        iMin = min;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,102,        iMax = max;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,112,        int value = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,43,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,113,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,114,            return value / iDivisor;,2,1,0,0,0,1,0,0,0,3,24,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,116,            return ((value + 1) / iDivisor) - 1;,2,3,0,2,4,1,0,0,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,129,"        return getWrappedField().add(instant, amount * iDivisor);",2,1,0,1,4,1,3,0,1,7,57,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,141,"        return getWrappedField().add(instant, amount * iDivisor);",2,1,0,1,4,1,3,0,1,7,57,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0,0,0,1,6,1,9,0,2,5,82,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;",1,1,0,1,4,1,4,0,1,7,85,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;",1,1,0,1,4,1,4,0,1,7,91,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0,0,0,0,2,1,5,0,0,3,54,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,174,        int remainder = getRemainder(getWrappedField().get(instant));,1,0,0,2,6,1,4,0,2,6,61,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);",3,2,0,1,4,1,3,0,1,7,68,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,191,        return iMin;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,200,        return iMax;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,204,        DateTimeField field = getWrappedField();,1,0,0,1,2,0,1,1,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));",1,1,0,1,6,1,7,0,1,7,69,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,209,"        return set(instant, get(getWrappedField().remainder(instant)));",0,0,0,2,8,1,6,0,3,5,63,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,218,        return iDivisor;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,222,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,223,            return value % iDivisor;,2,1,0,0,0,1,0,0,0,3,24,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,13,225,            return (iDivisor - 1) + ((value + 1) % iDivisor);,3,4,0,2,6,1,0,0,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0,0,0,1,2,2,0,1,2,5,69,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,60,            iRangeField = null;,1,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,100,        int value = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,43,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,101,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,102,            return value % iDivisor;,2,1,0,0,0,1,0,0,0,3,24,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,104,            return (iDivisor - 1) + ((value + 1) % iDivisor);,3,4,0,2,6,1,0,0,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));",1,1,0,1,6,1,7,0,2,7,87,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);",1,1,0,0,2,1,3,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,131,        int divided = getDivided(getWrappedField().get(instant));,1,0,0,2,6,1,4,0,2,6,57,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,132,"        return getWrappedField().set(instant, divided * iDivisor + value);",3,2,0,1,4,1,3,0,1,7,66,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,162,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,166,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,170,        return getWrappedField().roundHalfFloor(instant);,0,0,0,1,4,1,3,0,1,5,49,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,174,        return getWrappedField().roundHalfCeiling(instant);,0,0,0,1,4,1,3,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,178,        return getWrappedField().roundHalfEven(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,182,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,191,        return iDivisor;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,195,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,196,            return value / iDivisor;,2,1,0,0,0,1,0,0,0,3,24,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,13,198,            return ((value + 1) / iDivisor) - 1;,2,3,0,2,4,1,0,0,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,13,56,        return iChronology.getDayOfWeek(instant);,0,0,0,1,2,1,3,0,0,4,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,13,67,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);,0,0,0,1,4,1,5,0,0,4,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,13,78,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);,0,0,0,1,4,1,5,0,0,4,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,13,90,        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);,0,0,0,1,4,1,5,0,0,4,68,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,13,103,        return DateTimeConstants.MONDAY;,2,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,13,112,        return DateTimeConstants.SUNDAY;,2,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,13,122,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();,0,0,0,1,4,1,4,0,0,4,69,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,13,132,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();,0,0,0,1,4,1,4,0,0,4,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,13,139,        return iChronology.dayOfWeek();,0,0,0,1,2,1,2,0,0,4,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,47,        return iChronology.getDayOfMonth(instant);,0,0,0,1,2,1,3,0,0,4,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,55,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,59,        return iChronology.getDaysInMonthMax();,0,0,0,1,2,1,2,0,0,4,39,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,63,        return iChronology.getDaysInMonthMax(instant);,0,0,0,1,2,1,3,0,0,4,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,67,        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {,0,0,0,3,7,1,4,0,0,4,59,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,68,            int month = partial.get(DateTimeFieldType.monthOfYear());,1,0,0,2,4,1,4,0,0,5,57,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,69,            if (partial.isSupported(DateTimeFieldType.year())) {,0,0,0,3,7,1,4,0,0,4,52,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,70,                int year = partial.get(DateTimeFieldType.year());,1,0,0,2,4,1,4,0,0,5,49,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,71,"                return iChronology.getDaysInYearMonth(year, month);",0,0,0,0,2,1,4,0,0,3,51,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,73,            return iChronology.getDaysInMonthMax(month);,0,0,0,1,2,1,3,0,0,4,44,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,75,        return getMaximumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,79,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,80,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0,1,0,2,7,1,5,0,0,5,65,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,82,                int month = values[i];,1,0,1,0,2,1,0,0,0,4,22,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,83,                for (int j = 0; j < size; j++) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0,1,0,2,7,1,5,0,0,5,58,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,85,                        int year = values[j];,1,0,1,0,2,1,0,0,0,4,21,13,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,86,"                        return iChronology.getDaysInYearMonth(year, month);",0,0,0,0,2,1,4,0,0,3,51,13,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,89,                return iChronology.getDaysInMonthMax(month);,0,0,0,1,2,1,3,0,0,4,44,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,92,        return getMaximumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0,0,0,0,2,1,4,0,0,3,59,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,13,103,        return iChronology.dayOfMonth();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,52,        return iChronology.getDayOfYear(instant);,0,0,0,1,2,1,3,0,0,4,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,60,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,64,        return iChronology.getDaysInYearMax();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,68,        int year = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,69,        return iChronology.getDaysInYear(year);,0,0,0,1,2,1,3,0,0,4,39,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,73,        if (partial.isSupported(DateTimeFieldType.year())) {,0,0,0,3,7,1,4,0,0,4,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,74,            int year = partial.get(DateTimeFieldType.year());,1,0,0,2,4,1,4,0,0,5,49,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,75,            return iChronology.getDaysInYear(year);,0,0,0,1,2,1,3,0,0,4,39,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,77,        return iChronology.getDaysInYearMax();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,81,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,82,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,83,            if (partial.getFieldType(i) == DateTimeFieldType.year()) {,0,1,0,2,7,1,5,0,0,5,58,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,84,                int year = values[i];,1,0,1,0,2,1,0,0,0,4,21,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,85,                return iChronology.getDaysInYear(year);,0,0,0,1,2,1,3,0,0,4,39,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,88,        return iChronology.getDaysInYearMax();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,92,        int maxLessOne = iChronology.getDaysInYearMax() - 1;,1,1,0,1,2,1,2,0,0,6,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,93,        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;,4,3,0,1,4,1,2,0,1,7,81,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,13,100,        return iChronology.dayOfYear();,0,0,0,1,2,1,2,0,0,4,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,49,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,60,        return iChronology.getWeekyear(instant);,0,0,0,1,2,1,3,0,0,4,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,72,        if (years == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,73,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,75,"        return set(instant, get(instant) + years);",1,1,0,1,4,1,4,0,2,7,42,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,79,"        return add(instant, FieldUtils.safeToInt(value));",0,0,0,1,4,1,5,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,92,"        return add(instant, years);",0,0,0,0,2,1,3,0,1,4,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,96,        if (minuendInstant < subtrahendInstant) {,2,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,97,"            return -getDifference(subtrahendInstant, minuendInstant);",0,0,0,0,2,1,3,0,2,4,57,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,100,        int minuendWeekyear = get(minuendInstant);,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,101,        int subtrahendWeekyear = get(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,103,        long minuendRem = remainder(minuendInstant);,1,0,0,1,2,1,2,0,1,6,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,104,        long subtrahendRem = remainder(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,107,        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {,2,3,0,2,5,1,3,0,0,6,84,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,108,            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;,3,0,0,0,0,0,0,0,1,2,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,111,        int difference = minuendWeekyear - subtrahendWeekyear;,3,1,0,0,0,1,0,0,0,3,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,112,        if (minuendRem < subtrahendRem) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,113,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,115,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0,0,0,1,3,1,5,0,0,4,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,133,        int thisWeekyear = get( instant );,1,0,0,1,2,1,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,134,        if ( thisWeekyear == year ) {,2,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,135,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,140,        int thisDow = iChronology.getDayOfWeek(instant);,1,0,0,1,2,1,3,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,1,0,0,1,2,1,3,0,0,5,65,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,1,0,0,1,2,1,3,0,0,5,55,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,3,1,0,1,2,1,0,0,0,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,1,0,0,1,2,1,3,0,0,5,55,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,155,        if ( setToWeek > maxOutWeeks ) {,2,1,0,1,3,1,0,0,0,5,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,156,            setToWeek = maxOutWeeks;,2,0,0,0,0,0,0,0,1,2,24,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,162,        long workInstant = instant; // Get a copy,2,0,0,0,0,1,0,0,0,2,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,168,"        workInstant = iChronology.setYear( workInstant, year );",1,0,0,0,2,0,4,0,1,4,55,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,173,        int workWoyYear = get( workInstant );,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,179,        if ( workWoyYear < year ) {,2,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,180,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,3,0,0,0,0,0,0,0,1,2,49,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,181,        } else if ( workWoyYear > year ) {,2,1,0,1,4,2,0,0,0,5,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,182,            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;,3,0,0,0,0,0,0,0,1,2,49,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,1,0,0,1,2,1,3,0,0,5,64,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),4,3,0,1,2,0,0,0,1,5,56,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",1,0,0,1,4,0,5,0,1,5,66,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,204,        return workInstant;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,212,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;,0,1,0,2,4,1,5,0,0,5,73,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,216,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;,0,1,0,2,4,1,5,0,0,5,73,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,224,        return iChronology.getMinYear();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,228,        return iChronology.getMaxYear();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,1,0,0,1,4,0,4,0,1,5,59,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,235,        int wow = iChronology.getWeekOfWeekyear(instant);,1,0,0,1,2,1,3,0,0,5,49,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,236,        if (wow > 1) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,4,2,0,2,6,1,0,0,1,6,66,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,239,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,243,        return instant - roundFloor(instant);,1,1,0,1,2,1,2,0,1,7,37,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,13,250,        return iChronology.weekyear();,0,0,0,1,2,1,2,0,0,4,30,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,54,        return iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,1,3,0,0,4,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),4,3,0,1,2,2,0,0,0,5,71,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,70,        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),4,3,0,1,2,2,0,0,0,5,73,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,75,        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);,4,2,0,1,2,2,0,0,0,5,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,79,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,83,        return 53;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,87,        int weekyear = iChronology.getWeekyear(instant);,1,0,0,1,2,1,3,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,88,        return iChronology.getWeeksInYear(weekyear);,0,0,0,1,2,1,3,0,0,4,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,92,        if (partial.isSupported(DateTimeFieldType.weekyear())) {,0,0,0,3,7,1,4,0,0,4,56,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,93,            int weekyear = partial.get(DateTimeFieldType.weekyear());,1,0,0,2,4,1,4,0,0,5,57,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,94,            return iChronology.getWeeksInYear(weekyear);,0,0,0,1,2,1,3,0,0,4,44,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,96,        return 53;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,100,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,101,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,102,            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {,0,1,0,2,7,1,5,0,0,5,62,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,103,                int weekyear = values[i];,1,0,1,0,2,1,0,0,0,4,25,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,104,                return iChronology.getWeeksInYear(weekyear);,0,0,0,1,2,1,3,0,0,4,44,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,107,        return 53;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,111,        return value > 52 ? getMaximumValue(instant) : 52;,1,1,0,1,2,1,2,0,1,7,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,13,118,        return iChronology.weekOfWeekyear();,0,0,0,1,2,1,2,0,0,4,36,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,57,"            throw new IllegalArgumentException(""Must supply a chronology"");",0,0,0,1,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,61,"            throw new IllegalArgumentException(""UTC chronology must not be null"");",0,0,0,1,2,2,0,1,2,5,70,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,64,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");",0,0,0,1,2,2,0,1,2,5,68,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,90,        return getBase();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,94,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,95,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,97,        if (zone == getParam()) {,1,1,0,2,5,1,1,0,1,7,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,98,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,100,        if (zone == DateTimeZone.UTC) {,3,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,101,            return getBase();,0,0,0,1,2,1,1,0,1,5,17,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,103,"        return new ZonedChronology(getBase(), zone);",1,0,0,1,4,2,1,1,2,7,44,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,110,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,3,0,2,5,45,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,119,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,3,0,2,5,45,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,129,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,3,0,2,5,45,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,139,        DateTimeZone zone = getZone();,1,0,0,1,2,0,1,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,140,        int offset = zone.getOffsetFromLocal(instant);,1,0,0,1,2,1,3,0,0,5,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,141,        instant -= offset;,2,0,0,0,0,0,0,0,1,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,142,        if (offset != zone.getOffset(instant)) {,1,1,0,2,5,1,3,0,0,6,40,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,143,            throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,147,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,213,            return field;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,216,            return (DateTimeField)converted.get(field);,0,0,0,1,4,1,3,1,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,237,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,238,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,240,        if (obj instanceof ZonedChronology == false) {,1,1,0,1,3,2,0,1,1,7,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,241,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,243,        ZonedChronology chrono = (ZonedChronology) obj;,2,0,0,1,2,0,0,2,0,4,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,244,        return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,256,        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;,0,4,0,1,8,1,4,0,2,6,69,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,265,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';",0,1,0,1,8,1,3,0,5,6,71,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,13,479,                    eras = f;,2,0,0,0,0,0,0,0,1,2,9,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,770,"        YearInfo(int year, long firstDayMillis) {",3,0,0,0,3,2,0,0,0,3,41,3,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,771,            iYear = year;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,772,            iFirstDayMillis = firstDayMillis;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,13,773,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,50,        int year = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,51,        return year < 0 ? -year : year;,3,1,0,0,0,1,0,0,1,4,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,55,"        return getWrappedField().add(instant, years);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,59,"        return getWrappedField().add(instant, years);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,63,"        return getWrappedField().addWrapField(instant, years);",0,0,0,1,4,1,4,0,1,5,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,67,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0,0,0,1,4,1,6,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,71,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,75,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,80,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,79,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());",0,0,0,1,4,1,4,0,1,5,63,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,80,        if (getWrappedField().get(instant) < 0) {,0,1,0,2,7,1,3,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,81,            year = -year;,2,0,0,0,0,0,0,0,2,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,83,"        return super.set(instant, year);",3,0,0,0,2,2,0,0,0,3,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,95,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,99,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,103,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,13,110,        return INSTANCE;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,286,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,294,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,2,1,0,1,6,2,5,0,0,6,84,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,302,"            return iField.getValue(duration, addOffset(instant));",0,0,0,1,4,1,5,0,1,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,306,"            return iField.getValueAsLong(duration, addOffset(instant));",0,0,0,1,4,1,5,0,1,5,59,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,310,"            return iField.getMillis(value, addOffset(instant));",0,0,0,1,4,1,5,0,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,314,"            return iField.getMillis(value, addOffset(instant));",0,0,0,1,4,1,5,0,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,318,            int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,319,"            instant = iField.add(instant + offset, value);",3,1,0,0,2,0,3,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,3,1,0,2,4,1,2,0,1,7,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,324,            int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,325,"            instant = iField.add(instant + offset, value);",3,1,0,0,2,0,3,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,326,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,3,1,0,2,4,1,2,0,1,7,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,330,            int offset = getOffsetToAdd(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,331,            return iField.getDifference,0,0,0,0,0,1,2,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,337,            int offset = getOffsetToAdd(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,338,            return iField.getDifferenceAsLong,0,0,0,0,0,1,2,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,344,            int offset = this.iZone.getOffset(instant);,2,0,0,1,2,2,2,0,0,5,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,345,            long sum = instant + offset;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,4,5,0,2,7,1,0,0,0,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,348,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,73,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,350,            return offset;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,354,            int offset = this.iZone.getOffsetFromLocal(instant);,2,0,0,1,2,2,2,0,0,5,52,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,355,            long diff = instant - offset;,3,1,0,0,0,1,0,0,0,3,29,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,357,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,4,5,0,2,7,1,0,0,0,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,358,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,78,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,360,            return offset;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,364,            return iZone.convertUTCToLocal(instant);,0,0,0,1,2,1,3,0,0,4,40,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,391,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,402,            return iField.isLenient();,0,0,0,1,2,1,2,0,0,4,26,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,406,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,407,            return iField.get(localInstant);,0,0,0,1,2,1,3,0,0,4,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,411,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,412,"            return iField.getAsText(localInstant, locale);",0,0,0,0,2,1,4,0,0,3,46,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,416,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,417,"            return iField.getAsShortText(localInstant, locale);",0,0,0,0,2,1,4,0,0,3,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,421,"            return iField.getAsText(fieldValue, locale);",0,0,0,0,2,1,4,0,0,3,44,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,425,"            return iField.getAsShortText(fieldValue, locale);",0,0,0,0,2,1,4,0,0,3,49,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,429,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,430,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,431,"                long localInstant = iField.add(instant + offset, value);",3,1,0,0,2,1,3,0,0,5,56,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,432,                return localInstant - offset;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,434,               long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,435,"               localInstant = iField.add(localInstant, value);",1,0,0,0,2,0,4,0,1,4,47,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,436,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,441,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,442,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,443,"                long localInstant = iField.add(instant + offset, value);",3,1,0,0,2,1,3,0,0,5,56,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,444,                return localInstant - offset;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,446,               long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,447,"               localInstant = iField.add(localInstant, value);",1,0,0,0,2,0,4,0,1,4,47,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,448,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,453,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,454,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,455,"                long localInstant = iField.addWrapField(instant + offset, value);",3,1,0,0,2,1,3,0,0,5,65,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,456,                return localInstant - offset;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,458,                long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,459,"                localInstant = iField.addWrapField(localInstant, value);",1,0,0,0,2,0,4,0,1,4,56,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,460,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,465,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,466,"            localInstant = iField.set(localInstant, value);",1,0,0,0,2,0,4,0,1,4,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",1,0,0,0,2,1,4,0,1,5,68,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,468,            if (get(result) != value) {,1,1,0,2,5,1,2,0,1,7,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,469,"                throw new IllegalFieldValueException(iField.getType(), Integer.valueOf(value),",0,0,0,1,5,2,5,1,1,6,78,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,474,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,479,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,480,"            localInstant = iField.set(localInstant, text, locale);",1,0,0,0,2,0,5,0,1,4,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,481,"            return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,485,            int offset = getOffsetToAdd(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,486,            return iField.getDifference,0,0,0,0,0,1,2,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,492,            int offset = getOffsetToAdd(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,493,            return iField.getDifferenceAsLong,0,0,0,0,0,1,2,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,499,            return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,503,            return iRangeDurationField;,1,0,0,0,0,1,0,0,0,2,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,507,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,508,            return iField.isLeap(localInstant);,0,0,0,1,2,1,3,0,0,4,35,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,512,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,513,            return iField.getLeapAmount(localInstant);,0,0,0,1,2,1,3,0,0,4,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,517,            return iLeapDurationField;,1,0,0,0,0,1,0,0,0,2,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,521,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,522,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,523,                instant = iField.roundFloor(instant + offset);,3,1,0,1,2,0,2,0,1,6,46,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,524,                return instant - offset;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,526,                long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,527,                localInstant = iField.roundFloor(localInstant);,1,0,0,1,2,0,3,0,1,5,47,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,528,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,533,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,534,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,535,                instant = iField.roundCeiling(instant + offset);,3,1,0,1,2,0,2,0,1,6,48,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,536,                return instant - offset;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,538,                long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,539,                localInstant = iField.roundCeiling(localInstant);,1,0,0,1,2,0,3,0,1,5,49,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,540,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,545,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,546,            return iField.remainder(localInstant);,0,0,0,1,2,1,3,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,550,            return iField.getMinimumValue();,0,0,0,1,2,1,2,0,0,4,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,554,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,555,            return iField.getMinimumValue(localInstant);,0,0,0,1,2,1,3,0,0,4,44,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,559,            return iField.getMinimumValue(instant);,0,0,0,1,2,1,3,0,0,4,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,563,"            return iField.getMinimumValue(instant, values);",0,0,0,0,2,1,4,0,0,3,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,567,            return iField.getMaximumValue();,0,0,0,1,2,1,2,0,0,4,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,571,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,572,            return iField.getMaximumValue(localInstant);,0,0,0,1,2,1,3,0,0,4,44,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,576,            return iField.getMaximumValue(instant);,0,0,0,1,2,1,3,0,0,4,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,580,"            return iField.getMaximumValue(instant, values);",0,0,0,0,2,1,4,0,0,3,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,584,            return iField.getMaximumTextLength(locale);,0,0,0,1,2,1,3,0,0,4,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,588,            return iField.getMaximumShortTextLength(locale);,0,0,0,1,2,1,3,0,0,4,48,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,592,            int offset = this.iZone.getOffset(instant);,2,0,0,1,2,2,2,0,0,5,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,593,            long sum = instant + offset;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,595,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,4,5,0,2,7,1,0,0,0,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,596,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,73,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,13,598,            return offset;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,216,        Stub(DateTimeZone zone) {,2,0,0,1,3,0,0,1,0,4,25,3,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,217,            iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,218,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,221,            return ISOChronology.getInstance(iZone);,0,0,0,1,2,1,3,0,0,4,40,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,225,            out.writeObject(iZone);,0,0,0,1,2,0,3,0,0,3,23,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,226,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,231,            iZone = (DateTimeZone)in.readObject();,1,0,0,1,4,0,2,1,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,13,232,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,604,        Chronology chrono = new BaseChronology() {,1,0,0,1,3,1,0,2,1,6,42,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,606,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,609,                return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,612,                return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,615,                return getClass().getName();,0,0,0,1,4,1,2,0,1,5,28,11,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");",0,0,0,1,2,2,0,1,2,5,68,6,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,55,        return getWrappedField().getValue(duration) / iScalar;,1,1,0,1,4,1,3,0,1,7,54,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,59,        return getWrappedField().getValueAsLong(duration) / iScalar;,1,1,0,1,4,1,3,0,1,7,60,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,63,"        return getWrappedField().getValue(duration, instant) / iScalar;",1,1,0,1,4,1,4,0,1,7,63,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;",1,1,0,1,4,1,4,0,1,7,69,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,71,        long scaled = ((long) value) * ((long) iScalar);,3,1,0,2,8,3,0,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,72,        return getWrappedField().getMillis(scaled);,0,0,0,1,4,1,3,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",1,0,0,0,2,1,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,77,        return getWrappedField().getMillis(scaled);,0,0,0,1,4,1,3,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,81,        long scaled = ((long) value) * ((long) iScalar);,3,1,0,2,8,3,0,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,82,"        return getWrappedField().getMillis(scaled, instant);",0,0,0,1,4,1,4,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",1,0,0,0,2,1,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,87,"        return getWrappedField().getMillis(scaled, instant);",0,0,0,1,4,1,4,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,91,        long scaled = ((long) value) * ((long) iScalar);,3,1,0,2,8,3,0,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,92,"        return getWrappedField().add(instant, scaled);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",1,0,0,0,2,1,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,97,"        return getWrappedField().add(instant, scaled);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;",1,1,0,1,4,1,4,0,1,7,84,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;",1,1,0,1,4,1,4,0,1,7,90,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,119,        return iScalar;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,130,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,131,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,132,        } else if (obj instanceof ScaledDurationField) {,1,0,0,1,4,3,0,1,0,5,48,6,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,133,            ScaledDurationField other = (ScaledDurationField) obj;,2,0,0,1,2,0,0,2,0,4,54,7,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,134,            return (getWrappedField().equals(other.getWrappedField())) &&,0,1,0,3,8,1,4,0,1,6,61,7,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,13,138,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,13,54,"            throw new IllegalArgumentException(""The field must not be null"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,13,57,"            throw new IllegalArgumentException(""The field must be supported"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,13,73,        return iField.isPrecise();,0,0,0,1,2,1,2,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,13,77,"        return iField.getValueAsLong(duration, instant);",0,0,0,0,2,1,4,0,0,3,48,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,13,81,"        return iField.getMillis(value, instant);",0,0,0,0,2,1,4,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,13,85,"        return iField.getMillis(value, instant);",0,0,0,0,2,1,4,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,13,89,"        return iField.add(instant, value);",0,0,0,0,2,1,4,0,0,3,34,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,13,93,"        return iField.add(instant, value);",0,0,0,0,2,1,4,0,0,3,34,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,13,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,69,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,13,101,        return iField.getUnitMillis();,0,0,0,1,2,1,2,0,0,4,30,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,53,"        return ""millis"";",0,0,0,0,0,1,0,0,1,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,85,        return FieldUtils.safeToInt(duration);,0,0,0,1,2,1,3,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,89,        return duration;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,93,        return FieldUtils.safeToInt(duration);,0,0,0,1,2,1,3,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,97,        return duration;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,101,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,105,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,109,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,113,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,117,"        return FieldUtils.safeAdd(instant, value);",0,0,0,0,2,1,4,0,0,3,42,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,121,"        return FieldUtils.safeAdd(instant, value);",0,0,0,0,2,1,4,0,0,3,42,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0,0,0,0,4,1,6,0,0,3,88,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,66,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,134,        long otherMillis = otherField.getUnitMillis();,1,0,0,1,2,1,2,0,0,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,135,        long thisMillis = getUnitMillis();,1,0,0,1,2,1,1,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,137,        if (thisMillis == otherMillis) {,2,1,0,1,3,1,0,0,0,5,32,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,138,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,140,        if (thisMillis < otherMillis) {,2,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,141,            return -1;,0,0,0,0,0,1,0,0,1,2,10,6,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,143,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,148,        if (obj instanceof MillisDurationField) {,1,0,0,1,3,2,0,1,0,5,41,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,149,            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();,1,1,0,2,8,1,2,1,1,8,70,6,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,151,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,164,"        return ""DurationField[millis]"";",0,0,0,0,2,1,0,0,1,3,31,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,171,        return INSTANCE;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,13,32,public final class MillisDurationField extends DurationField implements Serializable {,1,0,0,0,1,5,0,2,2,5,86,1,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,13,539,            return iMillis;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",4,0,0,0,3,2,0,1,0,4,55,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,817,            iRecurrence = recurrence;,2,0,0,0,0,0,0,0,1,2,25,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,818,            iFromYear = fromYear;,2,0,0,0,0,0,0,0,1,2,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,819,            iToYear = toYear;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,820,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,823,            return iFromYear;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,827,            return iToYear;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,831,            return iRecurrence.getOfYear();,0,0,0,1,2,1,2,0,0,4,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,835,            return iRecurrence.getNameKey();,0,0,0,1,2,1,2,0,0,4,32,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,839,            return iRecurrence.getSaveMillis();,0,0,0,1,2,1,2,0,0,4,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,843,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,845,            final int wallOffset = standardOffset + saveMillis;,3,1,0,0,0,2,0,0,1,4,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,846,            long testInstant = instant;,2,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,849,            if (instant == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,850,                year = Integer.MIN_VALUE;,3,0,0,0,0,0,0,0,1,2,25,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,852,                year = chrono.year().get(instant + wallOffset);,3,1,0,1,4,0,3,0,1,6,47,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,855,            if (year < iFromYear) {,2,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",2,1,0,1,4,0,4,0,1,6,59,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,860,                testInstant -= 1;,1,0,0,0,0,0,0,0,1,2,17,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",1,0,0,0,2,1,5,0,0,4,70,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,865,            if (next > instant) {,2,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,866,                year = chrono.year().get(next + wallOffset);,3,1,0,1,4,0,3,0,1,6,44,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,867,                if (year > iToYear) {,2,1,0,1,3,1,0,0,0,5,21,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,869,                    next = instant;,2,0,0,0,0,0,0,0,1,2,15,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,873,            return next;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",1,1,0,1,2,2,0,1,2,7,60,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,522,            if (iMode == 'w') {,1,1,0,1,3,1,0,0,1,6,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,523,                offset = standardOffset + saveMillis;,3,1,0,0,0,0,0,0,1,3,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,524,            } else if (iMode == 's') {,1,1,0,1,4,2,0,0,1,6,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,525,                offset = standardOffset;,2,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,527,                offset = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,530,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,531,"            long millis = chrono.year().set(0, year);",1,0,0,1,4,1,4,0,0,5,41,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",1,0,0,1,4,0,5,0,1,5,56,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",1,0,0,1,4,0,5,0,1,5,56,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,534,"            millis = setDayOfMonth(chrono, millis);",1,0,0,0,2,0,3,0,2,4,39,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,536,            if (iDayOfWeek != 0) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,537,"                millis = setDayOfWeek(chrono, millis);",1,0,0,0,2,0,3,0,2,4,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,541,            return millis - offset;,2,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,549,            if (iMode == 'w') {,1,1,0,1,3,1,0,0,1,6,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,550,                offset = standardOffset + saveMillis;,3,1,0,0,0,0,0,0,1,3,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,551,            } else if (iMode == 's') {,1,1,0,1,4,2,0,0,1,6,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,552,                offset = standardOffset;,2,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,554,                offset = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,558,            instant += offset;,2,0,0,0,0,0,0,0,1,2,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,560,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",1,0,0,1,4,1,5,0,0,5,60,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,563,"            next = chrono.millisOfDay().set(next, 0);",1,0,0,1,4,0,4,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",1,0,0,1,4,0,5,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,565,"            next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,567,            if (iDayOfWeek == 0) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,568,                if (next <= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,569,"                    next = chrono.year().add(next, 1);",1,0,0,1,4,0,4,0,1,5,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,570,"                    next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,573,"                next = setDayOfWeek(chrono, next);",1,0,0,0,2,0,3,0,2,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,574,                if (next <= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,575,"                    next = chrono.year().add(next, 1);",1,0,0,1,4,0,4,0,1,5,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",1,0,0,1,4,0,5,0,1,5,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,577,"                    next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,578,"                    next = setDayOfWeek(chrono, next);",1,0,0,0,2,0,3,0,2,4,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,583,            return next - offset;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,591,            if (iMode == 'w') {,1,1,0,1,3,1,0,0,1,6,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,592,                offset = standardOffset + saveMillis;,3,1,0,0,0,0,0,0,1,3,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,593,            } else if (iMode == 's') {,1,1,0,1,4,2,0,0,1,6,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,594,                offset = standardOffset;,2,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,596,                offset = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,600,            instant += offset;,2,0,0,0,0,0,0,0,1,2,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,602,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",1,0,0,1,4,1,5,0,0,5,60,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,605,"            prev = chrono.millisOfDay().set(prev, 0);",1,0,0,1,4,0,4,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",1,0,0,1,4,0,5,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,607,"            prev = setDayOfMonthPrevious(chrono, prev);",1,0,0,0,2,0,3,0,2,4,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,609,            if (iDayOfWeek == 0) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,610,                if (prev >= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,611,"                    prev = chrono.year().add(prev, -1);",1,0,0,1,4,0,4,0,2,5,35,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",1,0,0,0,2,0,3,0,2,4,43,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,615,"                prev = setDayOfWeek(chrono, prev);",1,0,0,0,2,0,3,0,2,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,616,                if (prev >= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,617,"                    prev = chrono.year().add(prev, -1);",1,0,0,1,4,0,4,0,2,5,35,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",1,0,0,1,4,0,5,0,1,5,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",1,0,0,0,2,0,3,0,2,4,43,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,620,"                    prev = setDayOfWeek(chrono, prev);",1,0,0,0,2,0,3,0,2,4,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,625,            return prev - offset;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,629,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,630,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,632,            if (obj instanceof OfYear) {,1,0,0,1,3,2,0,1,0,5,28,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,633,                OfYear other = (OfYear)obj;,2,0,0,1,2,0,0,2,0,4,27,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,634,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,642,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,659,            out.writeByte(iMode);,0,0,0,1,2,0,3,0,0,3,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,660,            out.writeByte(iMonthOfYear);,0,0,0,1,2,0,3,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,661,            out.writeByte(iDayOfMonth);,0,0,0,1,2,0,3,0,0,3,27,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,662,            out.writeByte(iDayOfWeek);,0,0,0,1,2,0,3,0,0,3,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,663,            out.writeBoolean(iAdvance);,0,0,0,1,2,0,3,0,0,3,27,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,664,"            writeMillis(out, iMillisOfDay);",0,0,0,0,2,0,3,0,1,3,31,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,665,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,672,"                next = setDayOfMonth(chrono, next);",1,0,0,0,2,0,3,0,2,4,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,682,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,673,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,2,3,0,1,3,1,0,0,0,5,45,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,675,                    while (chrono.year().isLeap(next) == false) {,0,1,0,2,7,1,4,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,676,"                        next = chrono.year().add(next, 1);",1,0,0,1,4,0,4,0,1,5,34,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,678,"                    next = setDayOfMonth(chrono, next);",1,0,0,0,2,0,3,0,2,4,35,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,680,                    throw e;,1,0,0,0,0,1,0,0,0,2,8,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,683,            return next;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,691,"                prev = setDayOfMonth(chrono, prev);",1,0,0,0,2,0,3,0,2,4,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,701,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,692,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,2,3,0,1,3,1,0,0,0,5,45,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,694,                    while (chrono.year().isLeap(prev) == false) {,0,1,0,2,7,1,4,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,695,"                        prev = chrono.year().add(prev, -1);",1,0,0,1,4,0,4,0,2,5,35,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,697,"                    prev = setDayOfMonth(chrono, prev);",1,0,0,0,2,0,3,0,2,4,35,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,699,                    throw e;,1,0,0,0,0,1,0,0,0,2,8,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,702,            return prev;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,706,            if (iDayOfMonth >= 0) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",1,0,0,1,4,0,5,0,1,5,56,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,709,"                instant = chrono.dayOfMonth().set(instant, 1);",1,0,0,1,4,0,4,0,1,5,46,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,710,"                instant = chrono.monthOfYear().add(instant, 1);",1,0,0,1,4,0,4,0,1,5,47,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",1,0,0,1,4,0,5,0,1,5,56,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,713,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,1,0,0,1,4,1,4,0,0,5,48,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,3,1,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,719,            if (daysToAdd != 0) {,1,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,720,                if (iAdvance) {,1,0,0,1,3,1,0,0,0,4,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,721,                    if (daysToAdd < 0) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,722,                        daysToAdd += 7;,1,0,0,0,0,0,0,0,1,2,15,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,725,                    if (daysToAdd > 0) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,726,                        daysToAdd -= 7;,1,0,0,0,0,0,0,0,1,2,15,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",1,0,0,1,4,0,5,0,1,5,53,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,731,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,963,        RuleSet() {,1,0,0,1,3,0,0,0,0,3,11,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,964,            iRules = new ArrayList<Rule>(10);,1,0,0,1,2,1,0,2,2,6,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,965,            iUpperYear = Integer.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,31,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,966,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,971,        RuleSet(RuleSet rs) {,2,0,0,1,3,0,0,1,0,4,21,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,972,            iStandardOffset = rs.iStandardOffset;,3,0,0,0,0,0,0,0,1,2,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,973,            iRules = new ArrayList<Rule>(rs.iRules);,3,0,0,1,2,1,0,2,2,6,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,974,            iInitialNameKey = rs.iInitialNameKey;,3,0,0,0,0,0,0,0,1,2,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,3,0,0,0,0,0,0,0,1,2,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,976,            iUpperYear = rs.iUpperYear;,3,0,0,0,0,0,0,0,1,2,27,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,977,            iUpperOfYear = rs.iUpperOfYear;,3,0,0,0,0,0,0,0,1,2,31,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,978,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,948,            long now = DateTimeUtils.currentTimeMillis();,1,0,0,1,2,1,2,0,0,5,45,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,1,1,0,1,6,0,5,0,1,6,66,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,950,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,981,            return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,985,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,986,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,989,            iInitialNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,26,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,990,            iInitialSaveMillis = saveMillis;,2,0,0,0,0,0,0,0,1,2,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,991,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,994,            if (!iRules.contains(rule)) {,0,0,0,2,5,1,3,0,1,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,995,                iRules.add(rule);,0,0,0,1,2,0,3,0,0,3,17,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,997,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1000,            iUpperYear = year;,2,0,0,0,0,0,0,0,1,2,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1001,            iUpperOfYear = ofYear;,2,0,0,0,0,0,0,0,1,2,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1002,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1011,            if (iInitialNameKey != null) {,1,1,0,1,3,1,0,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1013,"                return new Transition(firstMillis, iInitialNameKey,",2,0,0,0,1,2,0,1,1,5,51,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,2,0,0,1,2,1,0,4,1,6,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1024,            long millis = Long.MIN_VALUE;,3,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1025,            int saveMillis = 0;,1,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1026,            Transition first = null;,1,0,0,0,0,0,0,1,0,2,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",1,1,0,0,7,1,3,0,2,6,61,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1030,                millis = next.getMillis();,1,0,0,1,2,0,2,0,1,5,26,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1032,                if (millis == firstMillis) {,2,1,0,1,3,1,0,0,0,5,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1033,"                    first = new Transition(firstMillis, next);",3,0,0,0,2,1,0,1,2,5,42,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1034,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1037,                if (millis > firstMillis) {,2,1,0,1,3,1,0,0,0,5,27,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1038,                    if (first == null) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1042,                        for (Rule rule : copy) {,2,0,0,1,3,1,0,1,0,5,24,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1043,                            if (rule.getSaveMillis() == 0) {,0,1,0,2,5,1,2,0,0,5,32,13,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",4,0,0,0,2,1,0,1,2,5,59,15,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1045,                                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1047,                        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1049,                    if (first == null) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1053,"                        first = new Transition(firstMillis, next.getNameKey(),",2,0,0,1,3,1,2,1,2,7,54,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1061,"                first = new Transition(firstMillis, next);",3,0,0,0,2,1,0,1,2,5,42,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1063,                saveMillis = next.getSaveMillis();,1,0,0,1,2,0,2,0,1,5,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1066,            iRules = copy;,2,0,0,0,0,0,0,0,1,2,14,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1067,            return first;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1085,            Rule nextRule = null;,1,0,0,0,0,0,0,1,0,2,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1086,            long nextMillis = Long.MAX_VALUE;,3,0,0,0,0,1,0,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1088,            Iterator<Rule> it = iRules.iterator();,1,0,0,1,2,0,2,2,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1089,            while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1090,                Rule rule = it.next();,1,0,0,1,2,0,2,1,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",1,0,0,0,2,1,5,0,0,4,60,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1092,                if (next <= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1093,                    it.remove();,0,0,0,1,2,0,2,0,0,3,12,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1094,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1098,                if (next <= nextMillis) {,2,1,0,1,3,1,0,0,0,5,25,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1100,                    nextRule = rule;,2,0,0,0,0,0,0,0,1,2,16,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1101,                    nextMillis = next;,2,0,0,0,0,0,0,0,1,2,18,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1103,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1105,            if (nextRule == null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1106,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,1,1,0,2,7,1,4,0,0,6,50,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1111,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1115,            if (iUpperYear < Integer.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1116,                long upperMillis =,1,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1118,                if (nextMillis >= upperMillis) {,2,1,0,1,3,1,0,0,0,5,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1120,                    return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",3,0,0,0,2,2,0,1,1,5,61,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1131,            if (iUpperYear == Integer.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1132,                return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0,0,0,0,2,1,5,0,0,3,72,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1141,            if (iRules.size() == 2) {,0,1,0,2,5,1,2,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1142,                Rule startRule = iRules.get(0);,1,0,0,1,2,0,2,1,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1143,                Rule endRule = iRules.get(1);,1,0,0,1,2,0,2,1,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,2,2,0,1,3,1,2,0,0,6,49,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1154,"                    return new DSTZone(id, iStandardOffset,",2,0,0,0,1,2,0,1,1,5,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1158,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,883,"        Transition(long millis, Transition tr) {",3,0,0,0,3,1,0,1,0,4,40,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,884,            iMillis = millis;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,885,            iNameKey = tr.iNameKey;,3,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,886,            iWallOffset = tr.iWallOffset;,3,0,0,0,0,0,0,0,1,2,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,887,            iStandardOffset = tr.iStandardOffset;,3,0,0,0,0,0,0,0,1,2,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,888,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,890,"        Transition(long millis, Rule rule, int standardOffset) {",4,0,0,0,3,2,0,1,0,4,56,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,891,            iMillis = millis;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,892,            iNameKey = rule.getNameKey();,1,0,0,1,2,0,2,0,1,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,893,            iWallOffset = standardOffset + rule.getSaveMillis();,2,1,0,1,2,0,2,0,1,6,52,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,894,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,895,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,898,"                   int wallOffset, int standardOffset) {",2,0,0,0,2,2,0,0,0,3,37,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,899,            iMillis = millis;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,900,            iNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,901,            iWallOffset = wallOffset;,2,0,0,0,0,0,0,0,1,2,25,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,902,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,903,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,906,            return iMillis;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,910,            return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,914,            return iWallOffset;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,918,            return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,922,            return iWallOffset - iStandardOffset;,2,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,929,            if (other == null) {,1,1,0,1,3,1,0,0,0,5,20,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,930,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,932,            return iMillis > other.iMillis &&,3,2,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1183,            return findMatchingRecurrence(instant).getNameKey();,0,0,0,1,4,1,3,0,1,5,52,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,1,1,0,1,4,1,3,0,1,7,73,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1191,            return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1195,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1199,            int standardOffset = iStandardOffset;,2,0,0,0,0,1,0,0,0,2,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1200,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,0,1,0,2,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1201,            Recurrence endRecurrence = iEndRecurrence;,2,0,0,0,0,0,0,1,0,2,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1206,                start = startRecurrence.next,1,0,0,0,0,0,2,0,1,3,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1208,                if (instant > 0 && start < 0) {,2,3,0,1,3,1,0,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1210,                    start = instant;,2,0,0,0,0,0,0,0,1,2,16,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1218,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1212,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1214,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1215,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1217,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1221,                end = endRecurrence.next,1,0,0,0,0,0,2,0,1,3,24,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1223,                if (instant > 0 && end < 0) {,2,3,0,1,3,1,0,0,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1225,                    end = instant;,2,0,0,0,0,0,0,0,1,2,14,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1233,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1227,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1229,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1230,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1232,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1235,            return (start > end) ? end : start;,4,1,0,1,2,1,0,0,0,5,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1241,            instant++;,1,0,0,0,0,0,0,0,1,2,10,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1243,            int standardOffset = iStandardOffset;,2,0,0,0,0,1,0,0,0,2,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1244,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,0,1,0,2,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1245,            Recurrence endRecurrence = iEndRecurrence;,2,0,0,0,0,0,0,1,0,2,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1250,                start = startRecurrence.previous,1,0,0,0,0,0,2,0,1,3,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1252,                if (instant < 0 && start > 0) {,2,3,0,1,3,1,0,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1254,                    start = instant;,2,0,0,0,0,0,0,0,1,2,16,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1262,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1256,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1258,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1259,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1261,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1265,                end = endRecurrence.previous,1,0,0,0,0,0,2,0,1,3,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1267,                if (instant < 0 && end > 0) {,2,3,0,1,3,1,0,0,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1269,                    end = instant;,2,0,0,0,0,0,0,0,1,2,14,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1277,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1271,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1273,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1274,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1276,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1279,            return ((start > end) ? start : end) - 1;,4,2,0,2,4,1,0,0,0,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1283,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1284,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1286,            if (obj instanceof DSTZone) {,1,0,0,1,3,2,0,1,0,5,29,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1287,                DSTZone other = (DSTZone)obj;,2,0,0,1,2,0,0,2,0,4,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1288,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1294,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1298,"            writeMillis(out, iStandardOffset);",0,0,0,0,2,0,3,0,1,3,34,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1299,            iStartRecurrence.writeTo(out);,0,0,0,1,2,0,3,0,0,3,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1300,            iEndRecurrence.writeTo(out);,0,0,0,1,2,0,3,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1301,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1304,            int standardOffset = iStandardOffset;,2,0,0,0,0,1,0,0,0,2,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1305,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,0,1,0,2,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1306,            Recurrence endRecurrence = iEndRecurrence;,2,0,0,0,0,0,0,1,0,2,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1311,                start = startRecurrence.next,1,0,0,0,0,0,2,0,1,3,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1319,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1313,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1315,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1316,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1318,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1322,                end = endRecurrence.next,1,0,0,0,0,0,2,0,1,3,24,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1330,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1324,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1326,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1327,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1329,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1332,            return (start > end) ? startRecurrence : endRecurrence;,4,1,0,1,2,1,0,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,180,"        Info(DateTimeZone zone, long periodStart) {",3,0,0,0,3,1,0,1,0,4,43,3,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,177,        private int iOffset = Integer.MIN_VALUE;,3,0,0,0,0,2,0,0,1,3,40,3,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,178,        private int iStandardOffset = Integer.MIN_VALUE;,3,0,0,0,0,2,0,0,1,3,48,3,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,181,            iPeriodStart = periodStart;,2,0,0,0,0,0,0,0,1,2,27,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,182,            iZoneRef = zone;,2,0,0,0,0,0,0,0,1,2,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,183,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,186,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,4,3,0,1,3,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,187,                if (iNameKey == null) {,1,1,0,1,3,1,0,0,0,5,23,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,188,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,1,0,0,1,2,0,3,0,1,5,45,9,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,190,                return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,192,            return iNextInfo.getNameKey(millis);,0,0,0,1,2,1,3,0,0,4,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,196,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,4,3,0,1,3,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,197,                if (iOffset == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,198,                    iOffset = iZoneRef.getOffset(iPeriodStart);,1,0,0,1,2,0,3,0,1,5,43,9,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,200,                return iOffset;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,202,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,3,0,0,4,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,206,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,4,3,0,1,3,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,207,                if (iStandardOffset == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,208,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,1,0,0,1,2,0,3,0,1,5,59,9,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,210,                return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,212,            return iNextInfo.getStandardOffset(millis);,0,0,0,1,2,1,3,0,0,4,43,6,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,45,        return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,49,        return iWallOffset;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,53,        return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,57,        return iWallOffset;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,61,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,65,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,69,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,77,        String id = getID();,1,0,0,1,2,0,1,1,1,6,20,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0,3,0,3,11,1,6,0,2,6,69,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",3,1,0,2,4,1,2,0,2,7,55,7,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",4,0,0,1,4,2,1,0,2,6,58,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,91,        if (obj instanceof FixedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,39,5,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,92,            FixedDateTimeZone other = (FixedDateTimeZone) obj;,2,0,0,1,2,0,0,2,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,93,            return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,13,98,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",1,0,0,0,4,0,4,1,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,44,        return nameSet == null ? null : nameSet[0];,1,1,1,0,2,1,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",1,0,0,0,4,0,4,1,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,49,        return nameSet == null ? null : nameSet[1];,1,1,1,0,2,1,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,53,        if (locale == null || id == null || nameKey == null) {,3,5,0,1,3,1,0,0,0,5,54,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,54,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",1,0,0,1,2,0,3,5,0,5,72,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,58,        if (byIdCache == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",1,0,0,1,4,0,4,0,2,5,54,7,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",1,0,0,1,2,0,3,3,0,5,55,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,63,        if (byNameKeyCache == null) {,1,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,64,"            byIdCache.put(id, byNameKeyCache = createCache());",1,0,0,1,4,0,4,0,2,5,50,7,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,66,            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();,3,0,0,1,8,0,3,1,0,5,95,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,67,            String[] setEn = null;,1,0,0,0,2,0,0,1,0,3,22,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,68,            for (String[] strings : zoneStringsEn) {,2,0,0,1,5,1,0,1,0,5,40,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,69,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,3,4,1,2,7,1,2,0,0,7,70,8,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,70,                setEn = strings;,2,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,71,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,74,            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,1,0,0,1,8,0,4,1,0,5,88,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,75,            String[] setLoc = null;,1,0,0,0,2,0,0,1,0,3,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,76,            for (String[] strings : zoneStringsLoc) {,2,0,0,1,5,1,0,1,0,5,41,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,77,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,3,4,1,2,7,1,2,0,0,7,70,8,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,78,                setLoc = strings;,2,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,79,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,83,            if (setEn != null && setLoc != null) {,2,3,0,1,3,1,0,0,0,5,38,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});",0,0,1,0,12,1,2,1,0,5,66,9,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,88,              if (setEn[2].equals(setEn[4])) {,0,0,1,2,9,1,1,0,0,5,32,9,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});",0,1,1,0,12,1,2,1,1,7,78,11,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});",0,0,1,0,12,1,2,1,0,5,66,11,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,13,95,        return (String[]) byNameKeyCache.get(nameKey);,0,0,0,1,6,1,3,1,0,5,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,56,    public ZoneInfoProvider(File fileDir) throws IOException {,3,0,0,1,3,2,0,1,1,6,58,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,57,        if (fileDir == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,58,"            throw new IllegalArgumentException(""No file directory provided"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,60,        if (!fileDir.exists()) {,0,0,0,2,5,1,2,0,1,5,24,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",1,1,0,1,2,2,0,1,2,7,66,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,63,        if (!fileDir.isDirectory()) {,0,0,0,2,5,1,2,0,1,5,29,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",1,1,0,1,2,2,0,1,2,7,71,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,67,        iFileDir = fileDir;,2,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,68,        iResourcePath = null;,1,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,69,        iLoader = null;,1,0,0,0,0,0,0,0,1,2,15,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",1,0,0,2,4,0,2,0,4,5,60,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,96,"        this(resourcePath, loader, true);",2,0,0,0,2,1,0,0,1,4,33,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,97,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,108,"            throw new IllegalArgumentException(""No resource path provided"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,137,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,158,            return loadZoneData(id);,0,0,0,1,2,1,2,0,1,5,24,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,162,        return getZone((String)obj);,1,0,0,2,4,1,1,1,1,7,28,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,183,        Thread t = Thread.currentThread();,1,0,0,1,2,0,2,1,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,184,"        t.getThreadGroup().uncaughtException(t, ex);",0,0,0,1,4,0,5,0,0,3,44,5,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,185,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,197,"            in = new FileInputStream(new File(iFileDir, name));",3,0,0,0,4,2,0,2,3,5,51,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,203,                in = ClassLoader.getSystemResourceAsStream(path);,1,0,0,1,2,0,3,0,1,5,49,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,206,                StringBuilder buf = new StringBuilder(40),1,0,0,1,2,1,0,2,1,6,41,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,211,                throw new IOException(buf.toString());,0,0,0,2,4,2,2,1,1,6,38,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,239,            } catch (IOException ex) {,1,0,0,1,4,1,0,1,0,5,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,230,        } catch (IOException ex) {,1,0,0,1,4,1,0,1,0,5,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,231,            uncaughtException(ex);,0,0,0,1,2,0,2,0,1,4,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,232,            iZoneInfoMap.remove(id);,0,0,0,1,2,0,3,0,0,3,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,233,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,235,            try {,0,0,0,0,1,1,0,0,0,2,5,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,259,            } catch (IOException ex) {,1,0,0,1,4,1,0,1,0,5,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,261,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,257,            try {,0,0,0,0,1,1,0,0,0,2,5,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,285,            } catch (ArrayIndexOutOfBoundsException ex) {,1,0,0,1,4,1,0,1,0,5,45,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,13,286,"                throw new IOException(""Corrupt zone info map"");",0,0,0,1,2,2,0,1,2,5,47,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,225,    public DateTimeZoneBuilder() {,1,0,0,1,3,1,0,0,1,5,30,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,226,        iRuleSets = new ArrayList<RuleSet>(10);,1,0,0,1,2,1,0,2,2,6,39,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,227,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,96,"            return readFrom((DataInput)in, id);",1,0,0,1,4,1,2,1,1,7,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,112,            DateTimeZone fixed = new FixedDateTimeZone,1,0,0,0,0,1,0,2,1,4,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,114,            if (fixed.equals(DateTimeZone.UTC)) {,2,0,0,2,5,1,2,0,0,5,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,115,                fixed = DateTimeZone.UTC;,3,0,0,0,0,0,0,0,1,2,25,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,117,            return fixed;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,121,"            return PrecalculatedZone.readFrom(in, id);",0,0,0,0,2,1,4,0,0,3,42,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,123,"            throw new IOException(""Invalid encoding"");",0,0,0,1,2,2,0,1,2,5,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,140,        if (millis % (30 * 60000L) == 0) {,1,3,0,2,5,1,0,0,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,142,            long units = millis / (30 * 60000L);,2,2,0,1,2,1,0,0,0,5,36,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,2,5,0,4,11,1,0,0,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,145,                out.writeByte((int)(units & 0x3f));,1,1,0,2,6,1,2,0,0,6,35,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,146,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,150,        if (millis % 60000L == 0) {,1,2,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,152,            long minutes = millis / 60000L;,2,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,2,5,0,4,11,1,0,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,1,2,0,2,6,1,2,0,0,6,55,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,156,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,160,        if (millis % 1000L == 0) {,1,2,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,162,            long seconds = millis / 1000L;,2,1,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,2,5,0,4,11,1,0,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,1,3,0,3,8,1,2,0,0,6,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,166,                out.writeInt((int)(seconds & 0xffffffff));,1,1,0,2,6,1,2,0,0,6,42,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,167,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,1,1,0,1,2,0,2,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,176,        out.writeLong(millis);,0,0,0,1,2,0,3,0,0,3,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,177,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0,2,0,1,5,1,5,0,1,6,45,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,217,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",4,0,0,0,2,2,0,1,1,5,70,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,252,        if (iRuleSets.size() > 0) {,0,1,0,2,5,1,2,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,253,            OfYear ofYear = new OfYear,1,0,0,0,0,1,0,2,1,4,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,1,1,0,2,4,0,4,1,0,6,58,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0,0,0,0,2,0,4,0,0,2,40,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,258,        iRuleSets.add(new RuleSet());,0,0,0,2,4,1,2,1,1,6,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,259,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,268,        getLastRuleSet().setStandardOffset(standardOffset);,0,0,0,1,4,0,3,0,1,4,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,269,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0,0,0,1,4,0,4,0,1,4,54,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,277,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,309,        if (fromYear <= toYear) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,310,            OfYear ofYear = new OfYear,1,0,0,0,0,1,0,2,1,4,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",4,0,0,0,2,1,0,2,1,5,68,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",4,0,0,0,2,1,0,2,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,314,            getLastRuleSet().addRule(rule);,0,0,0,1,4,0,3,0,1,4,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,316,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,320,        if (iRuleSets.size() == 0) {,0,1,0,2,5,1,2,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",2,0,0,0,2,0,1,0,3,4,54,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,323,        return iRuleSets.get(iRuleSets.size() - 1);,0,1,0,2,4,1,4,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,333,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,334,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,1,0,0,1,2,1,0,4,1,6,64,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,343,        DSTZone tailZone = null;,1,0,0,0,0,0,0,1,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,345,        long millis = Long.MIN_VALUE;,3,0,0,0,0,1,0,0,0,2,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,346,        int saveMillis = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,348,        int ruleSetCount = iRuleSets.size();,1,0,0,1,2,1,2,0,0,5,36,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,349,        for (int i=0; i<ruleSetCount; i++) {,4,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,350,            RuleSet rs = iRuleSets.get(i);,1,0,0,1,2,0,3,1,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,351,            Transition next = rs.firstTransition(millis);,1,0,0,1,2,0,3,1,0,5,45,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,352,            if (next == null) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,353,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,355,"            addTransition(transitions, next);",0,0,0,0,2,0,3,0,1,3,33,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,356,            millis = next.getMillis();,1,0,0,1,2,0,2,0,1,5,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,357,            saveMillis = next.getSaveMillis();,1,0,0,1,2,0,2,0,1,5,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,360,            rs = new RuleSet(rs);,2,0,0,1,2,1,0,1,2,6,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",1,1,0,0,7,1,4,0,1,6,64,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,363,"                if (addTransition(transitions, next)) {",0,0,0,0,5,1,3,0,1,4,39,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,364,                    if (tailZone != null) {,1,1,0,1,3,1,0,0,0,5,23,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,366,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,369,                millis = next.getMillis();,1,0,0,1,2,0,2,0,1,5,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,370,                saveMillis = next.getSaveMillis();,1,0,0,1,2,0,2,0,1,5,34,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,371,                if (tailZone == null && i == ruleSetCount - 1) {,3,4,0,1,3,1,0,0,0,5,48,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,372,                    tailZone = rs.buildTailZone(id);,1,0,0,1,2,0,3,0,1,5,32,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,379,            millis = rs.getUpperLimit(saveMillis);,1,0,0,1,2,0,3,0,1,5,38,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,383,        if (transitions.size() == 0) {,0,1,0,2,5,1,2,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,384,            if (tailZone != null) {,1,1,0,1,3,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,386,                return tailZone;,1,0,0,0,0,1,0,0,0,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0,0,0,0,2,1,2,0,2,4,39,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,390,        if (transitions.size() == 1 && tailZone == null) {,1,3,0,2,5,1,2,0,0,6,50,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,391,            Transition tr = transitions.get(0);,1,0,0,1,2,0,2,1,0,5,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,392,"            return buildFixedZone(id, tr.getNameKey(),",0,0,0,1,3,1,4,0,1,5,42,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",1,0,0,0,2,0,6,1,0,4,87,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,397,        if (zone.isCachable()) {,0,0,0,2,5,1,2,0,0,4,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,398,            return CachedDateTimeZone.forZone(zone);,0,0,0,1,2,1,3,0,0,4,40,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,400,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,404,        int size = transitions.size();,1,0,0,1,2,1,2,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,405,        if (size == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,406,            transitions.add(tr);,0,0,0,1,2,0,3,0,0,3,20,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,407,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,410,        Transition last = transitions.get(size - 1);,2,1,0,1,2,0,2,1,0,6,44,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,411,        if (!tr.isTransitionFrom(last)) {,0,0,0,2,5,1,3,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,412,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,417,        int offsetForLast = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,418,        if (size >= 2) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,2,1,0,1,4,0,3,0,1,6,58,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,421,        int offsetForNew = last.getWallOffset();,1,0,0,1,2,1,2,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,423,        long lastLocal = last.getMillis() + offsetForLast;,2,1,0,1,2,1,2,0,0,6,50,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,424,        long newLocal = tr.getMillis() + offsetForNew;,2,1,0,1,2,1,2,0,0,6,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,426,        if (newLocal != lastLocal) {,2,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,427,            transitions.add(tr);,0,0,0,1,2,0,3,0,0,3,20,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,428,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,431,        transitions.remove(size - 1);,1,1,0,1,2,0,2,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,432,"        return addTransition(transitions, tr);",0,0,0,0,2,1,3,0,1,4,38,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,443,        if (out instanceof DataOutput) {,1,0,0,1,3,2,0,1,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,444,"            writeTo(zoneID, (DataOutput)out);",1,0,0,1,4,0,2,1,1,6,33,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",1,0,0,1,6,1,2,2,2,7,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,448,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",1,0,0,0,2,0,2,1,2,5,50,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,461,        if (zone instanceof FixedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,462,            out.writeByte('F'); // 'F' for fixed,0,0,0,1,2,1,2,0,1,5,36,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,463,            out.writeUTF(zone.getNameKey(0));,0,0,0,2,4,0,4,0,0,3,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,464,"            writeMillis(out, zone.getOffset(0));",0,0,0,1,4,0,4,0,1,4,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,465,"            writeMillis(out, zone.getStandardOffset(0));",0,0,0,1,4,0,4,0,1,4,44,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,467,            if (zone instanceof CachedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,41,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0,0,0,1,2,1,2,0,1,5,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,2,0,0,2,6,0,1,1,1,6,52,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0,0,0,1,2,1,2,0,1,5,54,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,473,            ((PrecalculatedZone)zone).writeTo(out);,1,0,0,2,6,0,2,1,0,5,39,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,475,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1362,                        index = in.readUnsignedShort();,1,0,0,1,2,0,2,0,1,5,31,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1365,                } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1366,"                    throw new IOException(""Invalid encoding"");",0,0,0,1,2,2,0,1,2,5,42,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1389,            int size = transitions.size();,1,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1390,            if (size == 0) {,1,1,0,1,3,1,0,0,0,5,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1391,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1394,            long[] trans = new long[size];,1,0,1,0,4,3,0,0,0,4,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1395,            int[] wallOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1396,            int[] standardOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1397,            String[] nameKeys = new String[size];,1,0,1,0,4,1,0,2,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1399,            Transition last = null;,1,0,0,0,0,0,0,1,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1400,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1401,                Transition tr = transitions.get(i);,1,0,0,1,2,0,3,1,0,5,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1403,                if (!tr.isTransitionFrom(last)) {,0,0,0,2,5,1,3,0,1,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1404,                    throw new IllegalArgumentException(id);,1,0,0,1,2,2,0,1,1,6,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1407,                trans[i] = tr.getMillis();,0,0,1,1,4,0,2,0,1,5,26,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1408,                wallOffsets[i] = tr.getWallOffset();,0,0,1,1,4,0,2,0,1,5,36,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1409,                standardOffsets[i] = tr.getStandardOffset();,0,0,1,1,4,0,2,0,1,5,44,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1410,                nameKeys[i] = tr.getNameKey();,0,0,1,1,4,0,2,0,1,5,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1412,                last = tr;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1417,            String[] zoneNameData = new String[5];,1,0,0,0,4,1,0,2,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1418,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,3,0,0,1,8,1,1,2,1,7,80,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1419,            for (int j = 0; j < zoneStrings.length; j++) {,5,1,0,1,3,2,0,0,1,6,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1420,                String[] set = zoneStrings[j];,1,0,1,0,4,0,0,1,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,3,4,1,2,7,1,2,0,0,7,58,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1422,                    zoneNameData = set;,2,0,0,0,0,0,0,0,1,2,19,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1426,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,5,2,0,1,3,2,0,0,1,6,47,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1429,                String curNameKey = nameKeys[i];,1,0,1,0,2,0,0,1,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1430,                String nextNameKey = nameKeys[i + 1];,2,1,1,0,2,0,0,1,0,5,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1431,                long curOffset = wallOffsets[i];,1,0,1,0,2,1,0,0,0,4,32,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1432,                long nextOffset = wallOffsets[i + 1];,2,1,1,0,2,1,0,0,0,5,37,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1433,                long curStdOffset = standardOffsets[i];,1,0,1,0,2,1,0,0,0,4,39,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1434,                long nextStdOffset = standardOffsets[i + 1];,2,1,1,0,2,1,0,0,0,5,44,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",3,1,1,1,8,1,2,2,1,9,81,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1436,                if (curOffset != nextOffset &&,2,8,0,0,1,1,0,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1443,                    if (ZoneInfoCompiler.verbose()) {,0,0,0,2,5,1,2,0,0,4,33,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",3,1,0,1,2,0,1,0,1,6,65,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",3,1,1,0,5,1,1,1,2,8,63,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1448,                    if (curOffset > nextOffset) {,2,1,0,1,3,1,0,0,0,5,29,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",1,1,1,1,6,0,1,0,2,7,48,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1450,                    } else if (curOffset < nextOffset) {,2,1,0,1,4,2,0,0,0,5,36,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",2,2,1,1,6,0,1,0,2,7,53,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1452,                        i++;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1457,            if (tailZone != null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1458,                if (tailZone.iStartRecurrence.getNameKey(),2,0,0,1,3,1,1,0,0,5,42,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1460,                    if (ZoneInfoCompiler.verbose()) {,0,0,0,2,5,1,2,0,0,4,33,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",2,1,0,0,1,0,1,0,1,5,61,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1464,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,2,1,0,2,5,1,1,0,0,6,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1465,                        tailZone = new DSTZone(,1,0,0,0,1,1,0,1,2,5,23,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1471,                        tailZone = new DSTZone(,1,0,0,0,1,1,0,1,2,5,23,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1480,            return new PrecalculatedZone,0,0,0,0,0,2,0,1,1,3,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1509,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1510,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1511,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1512,                return iNameKeys[i];,0,0,1,0,2,1,0,0,0,3,20,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1514,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1515,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1516,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1517,                    return iNameKeys[i - 1];,1,1,1,0,2,1,0,0,0,5,24,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1519,"                return ""UTC"";",0,0,0,0,0,1,0,0,1,2,13,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1521,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1522,                return iNameKeys[i - 1];,1,1,1,0,2,1,0,0,0,5,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1524,            return iTailZone.getNameKey(instant);,0,0,0,1,2,1,3,0,0,4,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1528,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1529,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1530,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1531,                return iWallOffsets[i];,0,0,1,0,2,1,0,0,0,3,23,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1533,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1534,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1535,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1536,                    return iWallOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,27,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1538,                return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1540,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1541,                return iWallOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,27,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1543,            return iTailZone.getOffset(instant);,0,0,0,1,2,1,3,0,0,4,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1547,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1548,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1549,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1550,                return iStandardOffsets[i];,0,0,1,0,2,1,0,0,0,3,27,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1552,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1553,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1554,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1555,                    return iStandardOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,31,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1557,                return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1559,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1560,                return iStandardOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,31,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1562,            return iTailZone.getStandardOffset(instant);,0,0,0,1,2,1,3,0,0,4,44,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1566,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1570,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1571,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1572,            i = (i >= 0) ? (i + 1) : ~i;,4,2,0,1,4,0,0,0,2,5,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1573,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1574,                return transitions[i];,0,0,1,0,2,1,0,0,0,3,22,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1576,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1577,                return instant;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1579,            long end = transitions[transitions.length - 1];,3,1,1,0,2,1,0,0,0,5,47,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1580,            if (instant < end) {,2,1,0,1,3,1,0,0,0,5,20,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1581,                instant = end;,2,0,0,0,0,0,0,0,1,2,14,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1583,            return iTailZone.nextTransition(instant);,0,0,0,1,2,1,3,0,0,4,41,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1587,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1588,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1589,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1590,                if (instant > Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1591,                    return instant - 1;,1,1,0,0,0,1,0,0,0,3,19,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1593,                return instant;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1595,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1596,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1597,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1598,                    long prev = transitions[i - 1];,2,1,1,0,2,1,0,0,0,5,31,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1599,                    if (prev > Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,28,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1600,                        return prev - 1;,1,1,0,0,0,1,0,0,0,3,16,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1603,                return instant;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1605,            if (iTailZone != null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1606,                long prev = iTailZone.previousTransition(instant);,1,0,0,1,2,1,3,0,0,5,50,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1607,                if (prev < instant) {,2,1,0,1,3,1,0,0,0,5,21,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1608,                    return prev;,1,0,0,0,0,1,0,0,0,2,12,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1611,            long prev = transitions[i - 1];,2,1,1,0,2,1,0,0,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1612,            if (prev > Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1613,                return prev - 1;,1,1,0,0,0,1,0,0,0,3,16,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1615,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1619,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1620,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1622,            if (obj instanceof PrecalculatedZone) {,1,0,0,1,3,2,0,1,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1623,                PrecalculatedZone other = (PrecalculatedZone)obj;,2,0,0,1,2,0,0,2,0,4,49,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1624,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1634,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1638,            int size = iTransitions.length;,3,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1641,            Set<String> poolSet = new HashSet<String>();,1,0,0,1,2,1,0,4,1,6,44,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1642,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1643,                poolSet.add(iNameKeys[i]);,0,0,1,1,4,0,2,0,0,4,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1646,            int poolSize = poolSet.size();,1,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1647,            if (poolSize > 65535) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1648,"                throw new UnsupportedOperationException(""String pool is too large"");",0,0,0,1,2,2,0,1,2,5,68,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1650,            String[] pool = new String[poolSize];,1,0,1,0,4,1,0,2,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1651,            Iterator<String> it = poolSet.iterator();,1,0,0,1,2,0,2,2,0,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1652,            for (int i=0; it.hasNext(); i++) {,2,0,0,2,5,2,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1653,                pool[i] = it.next();,0,0,1,1,4,0,2,0,1,5,20,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1657,            out.writeShort(poolSize);,0,0,0,1,2,0,3,0,0,3,25,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1658,            for (int i=0; i<poolSize; i++) {,4,1,0,1,3,2,0,0,1,6,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1659,                out.writeUTF(pool[i]);,0,0,1,1,4,0,2,0,0,4,22,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1662,            out.writeInt(size);,0,0,0,1,2,0,3,0,0,3,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1664,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1665,"                writeMillis(out, iTransitions[i]);",0,0,1,0,4,0,2,0,1,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1666,"                writeMillis(out, iWallOffsets[i]);",0,0,1,0,4,0,2,0,1,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1667,"                writeMillis(out, iStandardOffsets[i]);",0,0,1,0,4,0,2,0,1,4,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1670,                String nameKey = iNameKeys[i];,1,0,1,0,2,0,0,1,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1671,                for (int j=0; j<poolSize; j++) {,4,1,0,1,3,2,0,0,1,6,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1672,                    if (pool[j].equals(nameKey)) {,0,0,1,2,7,1,2,0,0,5,30,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1673,                        if (poolSize < 256) {,1,1,0,1,3,1,0,0,0,5,21,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1674,                            out.writeByte(j);,0,0,0,1,2,0,3,0,0,3,17,14,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1676,                            out.writeShort(j);,0,0,0,1,2,0,3,0,0,3,18,14,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1678,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1683,            out.writeBoolean(iTailZone != null);,1,1,0,1,2,0,2,0,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1684,            if (iTailZone != null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1685,                iTailZone.writeTo(out);,0,0,0,1,2,0,3,0,0,3,23,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1687,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1690,            if (iTailZone != null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1691,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1693,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1694,            if (transitions.length <= 1) {,2,1,0,1,3,1,0,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1695,                return false;,0,0,0,0,0,1,0,0,1,2,13,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1700,            double distances = 0;,1,0,0,0,0,1,0,0,0,2,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1701,            int count = 0;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1703,            for (int i=1; i<transitions.length; i++) {,5,1,0,1,3,2,0,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1704,                long diff = transitions[i] - transitions[i - 1];,2,2,1,0,4,1,0,0,0,5,48,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1705,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,1,3,0,3,7,1,0,0,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1706,                    distances += (double)diff;,2,0,0,1,2,1,0,0,1,5,26,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1707,                    count++;,1,0,0,0,0,0,0,0,1,2,8,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1711,            if (count > 0) {,1,1,0,1,3,1,0,0,0,5,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1712,                double avg = distances / count;,3,1,0,0,0,1,0,0,0,3,31,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1713,                avg /= 24 * 60 * 60 * 1000;,1,1,0,0,0,0,0,0,1,3,27,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1714,                if (avg >= 25) {,1,1,0,1,3,1,0,0,0,5,16,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1721,                    return true;,0,0,0,0,0,1,0,0,1,2,12,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,1725,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,40,        } catch (SecurityException e) {,1,0,0,1,4,1,0,1,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,41,            i = null;,1,0,0,0,0,0,0,0,1,2,9,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,50,            cacheSize = i.intValue();,1,0,0,1,2,0,2,0,1,5,25,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,52,            cacheSize--;,1,0,0,0,0,0,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,53,            int shift = 0;,1,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,54,            while (cacheSize > 0) {,1,1,0,1,3,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,55,                shift++;,1,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,56,                cacheSize >>= 1;,1,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,58,            cacheSize = 1 << shift;,2,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,69,            return (CachedDateTimeZone)zone;,1,0,0,1,2,1,0,1,0,5,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,95,        return iZone;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,99,        return getInfo(instant).getNameKey(instant);,0,0,0,1,4,1,4,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,103,        return getInfo(instant).getOffset(instant);,0,0,0,1,4,1,4,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,107,        return getInfo(instant).getStandardOffset(instant);,0,0,0,1,4,1,4,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,111,        return iZone.isFixed();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,115,        return iZone.nextTransition(instant);,0,0,0,1,2,1,3,0,0,4,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,119,        return iZone.previousTransition(instant);,0,0,0,1,2,1,3,0,0,4,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,127,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,128,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,130,        if (obj instanceof CachedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,131,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,2,0,0,3,6,1,2,1,0,6,53,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,133,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,140,        int period = (int)(millis >> 32);,2,1,0,1,4,2,0,0,0,5,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,141,        Info[] cache = iInfoCache;,2,0,0,0,2,0,0,1,0,3,26,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,142,        int index = period & cInfoCacheMask;,3,1,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,143,        Info info = cache[index];,1,0,1,0,2,0,0,1,0,4,25,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,144,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,4,4,0,3,9,2,0,0,0,5,65,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,145,            info = createInfo(millis);,1,0,0,1,2,0,2,0,2,5,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,146,            cache[index] = info;,1,0,1,0,2,0,0,0,1,4,20,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,148,        return info;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,152,        long periodStart = millis & (0xffffffffL << 32);,2,2,0,1,2,1,0,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,153,"        Info info = new Info(iZone, periodStart);",3,0,0,0,2,1,0,2,1,5,41,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,155,        long end = periodStart | 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,156,        Info chain = info;,2,0,0,0,0,0,0,1,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,158,            long next = iZone.nextTransition(periodStart);,1,0,0,1,2,1,3,0,0,5,46,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,159,            if (next == periodStart || next > end) {,4,3,0,1,3,1,0,0,0,5,40,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,160,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,162,            periodStart = next;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",5,0,0,0,4,1,0,1,3,5,57,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,164,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,13,166,        return info;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,754,            return iOfYear;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0,0,0,0,2,1,5,0,0,3,57,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0,0,0,0,2,1,5,0,0,3,61,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,772,            return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,776,            return iSaveMillis;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,780,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,781,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,783,            if (obj instanceof Recurrence) {,1,0,0,1,3,2,0,1,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,784,                Recurrence other = (Recurrence)obj;,2,0,0,1,2,0,0,2,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,785,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,790,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,794,            iOfYear.writeTo(out);,0,0,0,1,2,0,3,0,0,3,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,795,            out.writeUTF(iNameKey);,0,0,0,1,2,0,3,0,0,3,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,796,"            writeMillis(out, iSaveMillis);",0,0,0,0,2,0,3,0,1,3,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,797,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",3,0,0,0,2,2,0,1,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,13,804,            return rename((iNameKey + appendNameKey).intern());,2,1,0,2,6,1,2,0,1,7,51,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,872,            out.write(iText);,0,0,0,1,2,0,3,0,0,3,17,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,873,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,876,            String text = iText;,2,0,0,0,0,0,0,1,0,2,20,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,877,            int textLength = text.length();,1,0,0,1,2,1,2,0,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,878,"            if (periodStr.regionMatches(true, position, text, 0, textLength)) {",0,0,0,0,5,1,5,0,1,4,67,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,879,                return position + textLength;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,881,            return ~position;,1,0,0,0,0,1,0,0,1,3,17,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,885,            String text = iText;,2,0,0,0,0,0,0,1,0,2,20,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,886,            int textLength = text.length();,1,0,0,1,2,1,2,0,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,887,            int sourceLength = periodStr.length();,1,0,0,1,2,1,2,0,0,5,38,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,889,            for (int pos = position; pos < sourceLength; pos++) {,5,1,0,1,3,2,0,0,1,6,53,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,890,"                if (periodStr.regionMatches(true, pos, text, 0, textLength)) {",0,0,0,0,5,1,5,0,1,4,62,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,891,                    return pos;,1,0,0,0,0,1,0,0,0,2,11,10,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,894,                switch (periodStr.charAt(pos)) {,0,0,0,2,5,1,3,0,0,4,32,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,898,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,900,                    break search;,1,0,0,0,0,1,0,0,0,2,13,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,903,            return ~position;,1,0,0,0,0,1,0,0,1,3,17,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,141,        if (iNotPrinter) {,1,0,0,1,3,1,0,0,0,4,18,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,144,        return toFormatter().getPrinter();,0,0,0,1,4,1,2,0,1,5,34,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,160,        if (iNotParser) {,1,0,0,1,3,1,0,0,0,4,17,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,161,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,163,        return toFormatter().getParser();,0,0,0,1,4,1,2,0,1,5,33,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,179,            iElementPairs.clear();,0,0,0,1,2,0,2,0,0,3,22,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,192,        if (formatter == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,193,"            throw new IllegalArgumentException(""No formatter supplied"");",0,0,0,1,2,2,0,1,2,5,60,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,195,        clearPrefix();,0,0,0,1,2,0,1,0,1,4,14,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,196,"        append0(formatter.getPrinter(), formatter.getParser());",0,0,0,1,6,0,5,0,1,4,55,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,197,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,212,        if (printer == null && parser == null) {,2,3,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,213,"            throw new IllegalArgumentException(""No printer or parser supplied"");",0,0,0,1,2,2,0,1,2,5,68,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,215,        clearPrefix();,0,0,0,1,2,0,1,0,1,4,14,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,216,"        append0(printer, parser);",0,0,0,0,2,0,3,0,1,3,25,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,217,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,229,"            throw new IllegalArgumentException(""Literal must not be null"");",0,0,0,1,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,245,        iMinPrintedDigits = minDigits;,2,0,0,0,0,0,0,0,1,2,30,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,246,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,256,        iMaxParsedDigits = maxDigits;,2,0,0,0,0,0,0,0,1,2,29,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,257,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,266,        iRejectSignedValues = v;,2,0,0,0,0,0,0,0,1,2,24,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,267,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,280,        iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;,2,0,0,0,0,0,0,0,1,2,43,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,281,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,292,        iPrintZeroSetting = PRINT_ZERO_RARELY_FIRST;,2,0,0,0,0,0,0,0,1,2,44,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,293,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,303,        iPrintZeroSetting = PRINT_ZERO_IF_SUPPORTED;,2,0,0,0,0,0,0,0,1,2,44,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,304,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,315,        iPrintZeroSetting = PRINT_ZERO_ALWAYS;,2,0,0,0,0,0,0,0,1,2,38,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,316,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,329,        iPrintZeroSetting = PRINT_ZERO_NEVER;,2,0,0,0,0,0,0,0,1,2,37,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,330,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,343,        if (text == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,344,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,346,        return appendPrefix(new SimpleAffix(text));,1,0,0,2,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,363,        if (singularText == null || pluralText == null) {,2,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,364,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,366,"        return appendPrefix(new PluralAffix(singularText, pluralText));",2,0,0,0,4,2,1,1,2,6,63,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,378,        if (prefix == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,379,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,381,        if (iPrefix != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,382,"            prefix = new CompositeAffix(iPrefix, prefix);",3,0,0,0,2,1,0,1,2,5,45,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,384,        iPrefix = prefix;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,385,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,476,        appendField(SECONDS);,0,0,0,1,2,0,2,0,1,4,21,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,477,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,488,        appendField(SECONDS_MILLIS);,0,0,0,1,2,0,2,0,1,4,28,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,489,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,513,        appendField(MILLIS);,0,0,0,1,2,0,2,0,1,4,20,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,514,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,525,"        appendField(7, 3);",0,0,0,0,2,0,1,0,1,3,18,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,526,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,553,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,573,        if (singularText == null || pluralText == null) {,2,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,574,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,576,"        return appendSuffix(new PluralAffix(singularText, pluralText));",2,0,0,0,4,2,1,1,2,6,63,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,595,            originalPrinter = null;,1,0,0,0,0,0,0,0,1,2,23,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,596,            originalParser = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,602,"            throw new IllegalStateException(""No field to apply suffix to"");",0,0,0,1,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,632,"        return appendSeparator(text, text, null, true, true);",0,0,0,0,2,1,3,0,3,4,53,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,672,"        return appendSeparator(text, text, null, true, false);",0,0,0,0,2,1,3,0,3,4,54,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,697,"        return appendSeparator(text, finalText, null, true, true);",0,0,0,0,2,1,3,0,3,4,58,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,724,"        return appendSeparator(text, finalText, variants, true, true);",0,0,0,0,2,1,4,0,3,4,62,4,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,731,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,739,            if (useAfter && useBefore == false) {,2,2,0,1,3,1,0,0,1,6,37,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,740,                Separator separator = new Separator(,1,0,0,0,1,1,0,2,1,5,36,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,743,"                append0(separator, separator);",0,0,0,0,2,0,3,0,1,3,30,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,745,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,753,                lastSeparator = (Separator) pairs.get(i);,1,0,0,1,4,0,3,1,1,6,41,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,754,"                pairs = pairs.subList(i + 1, pairs.size());",2,1,0,1,4,0,4,0,1,6,43,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,755,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,762,"            throw new IllegalStateException(""Cannot have two adjacent separators"");",0,0,0,1,2,2,0,1,2,5,71,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,780,"            throw new IllegalStateException(""Prefix not followed by field"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,796,"            throw new IllegalStateException(""Builder has created neither a printer nor a parser"");",0,0,0,1,2,2,0,1,2,5,86,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,809,"            return new PeriodFormatter(null, (PeriodParser) comp[1]);",0,0,1,1,6,2,0,2,1,6,57,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,811,"            return new PeriodFormatter((PeriodPrinter) comp[0], null);",0,0,1,1,6,2,0,2,1,6,58,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,820,"                return new Object[] {Literal.EMPTY, Literal.EMPTY};",4,0,0,0,4,2,0,1,0,4,51,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,822,"                return new Object[] {elementPairs.get(0), elementPairs.get(1)};",0,0,0,1,8,2,4,1,0,5,63,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1773,                iPrinters = null;,1,0,0,0,0,0,0,0,1,2,17,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1780,                iParsers = null;,1,0,0,0,0,0,0,0,1,2,16,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1814,            PeriodPrinter[] printers = iPrinters;,2,0,0,0,2,0,0,1,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1815,            int len = printers.length;,3,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1816,            for (int i=0; i<len; i++) {,4,1,0,1,3,2,0,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1817,"                printers[i].printTo(out, period, locale);",0,0,1,0,4,0,4,0,0,3,41,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1819,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1824,            PeriodParser[] parsers = iParsers;,2,0,0,0,2,0,0,1,0,3,34,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1825,            if (parsers == null) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1826,                throw new UnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,42,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1829,            int len = parsers.length;,3,0,0,0,0,1,0,0,0,2,25,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1830,            for (int i=0; i<len && position >= 0; i++) {,5,3,0,1,3,2,0,0,1,6,44,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1831,"                position = parsers[i].parseInto(period, periodStr, position, locale);",1,0,1,0,4,0,5,0,1,5,69,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1833,            return position;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1842,"                        addArrayToList(printerList, ((Composite) element).iPrinters);",2,0,0,2,6,0,2,1,1,6,61,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1851,"                        addArrayToList(parserList, ((Composite) element).iParsers);",2,0,0,2,6,0,2,1,1,6,59,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1860,            if (array != null) {,1,1,0,1,3,1,0,0,0,5,20,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1861,                for (int i=0; i<array.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1862,                    list.add(array[i]);,0,0,1,1,4,0,2,0,0,4,19,10,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1865,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1605,                TreeSet<String> parsedSet = new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);,3,0,0,1,2,1,0,4,1,6,79,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1606,                parsedSet.add(text);,0,0,0,1,2,0,3,0,0,3,20,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1607,                parsedSet.add(finalText);,0,0,0,1,2,0,3,0,0,3,25,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1608,                if (variants != null) {,1,1,0,1,3,1,0,0,0,5,23,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1609,                    for (int i=variants.length; --i>=0; ) {,4,1,0,1,3,2,0,0,1,6,39,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1610,                        parsedSet.add(variants[i]);,0,0,1,1,4,0,2,0,0,4,27,12,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1613,                ArrayList<String> parsedList = new ArrayList<String>(parsedSet);,2,0,0,1,2,1,0,4,1,6,64,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1614,                Collections.reverse(parsedList);,0,0,0,1,2,0,3,0,0,3,32,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1615,                iParsedForms = parsedList.toArray(new String[parsedList.size()]);,1,0,0,2,6,1,4,1,1,7,65,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1625,"            int sum = iBeforePrinter.countFieldsToPrint(period, stopAt, locale);",1,0,0,0,2,1,5,0,0,4,68,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1626,            if (sum < stopAt) {,2,1,0,1,3,1,0,0,0,5,19,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1627,"                sum += iAfterPrinter.countFieldsToPrint(period, stopAt, locale);",1,0,0,0,2,0,5,0,1,4,64,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1629,            return sum;,1,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1640,"                if (before.countFieldsToPrint(period, 1, locale) > 0) {",0,1,0,0,5,1,4,0,0,4,55,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1641,                    if (iUseAfter) {,1,0,0,1,3,1,0,0,0,4,16,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1642,"                        int afterCount = after.countFieldsToPrint(period, 2, locale);",1,0,0,0,2,1,4,0,0,4,61,12,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1643,                        if (afterCount > 0) {,1,1,0,1,3,1,0,0,0,5,21,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1644,                            sum += (afterCount > 1 ? iText : iFinalText).length();,4,1,0,1,4,0,1,0,1,6,54,13,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1646,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1647,                        sum += iText.length();,1,0,0,1,2,0,2,0,1,5,22,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1663,"                if (before.countFieldsToPrint(period, 1, locale) > 0) {",0,1,0,0,5,1,4,0,0,4,55,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1664,                    if (iUseAfter) {,1,0,0,1,3,1,0,0,0,4,16,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1665,"                        int afterCount = after.countFieldsToPrint(period, 2, locale);",1,0,0,0,2,1,4,0,0,4,61,12,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1666,                        if (afterCount > 0) {,1,1,0,1,3,1,0,0,0,5,21,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1667,                            buf.append(afterCount > 1 ? iText : iFinalText);,3,1,0,1,2,0,2,0,0,5,48,14,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1669,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1670,                        buf.append(iText);,0,0,0,1,2,0,3,0,0,3,18,12,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1680,            PeriodPrinter before = iBeforePrinter;,2,0,0,0,0,0,0,1,0,2,38,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1681,            PeriodPrinter after = iAfterPrinter;,2,0,0,0,0,0,0,1,0,2,36,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1683,"            before.printTo(out, period, locale);",0,0,0,0,2,0,5,0,0,2,36,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1684,            if (iUseBefore) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1685,"                if (before.countFieldsToPrint(period, 1, locale) > 0) {",0,1,0,0,5,1,4,0,0,4,55,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1686,                    if (iUseAfter) {,1,0,0,1,3,1,0,0,0,4,16,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1687,"                        int afterCount = after.countFieldsToPrint(period, 2, locale);",1,0,0,0,2,1,4,0,0,4,61,12,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1688,                        if (afterCount > 0) {,1,1,0,1,3,1,0,0,0,5,21,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1689,                            out.write(afterCount > 1 ? iText : iFinalText);,3,1,0,1,2,0,2,0,0,5,47,14,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1691,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1692,                        out.write(iText);,0,0,0,1,2,0,3,0,0,3,17,12,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1695,"            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {",1,2,0,0,6,2,4,0,0,5,74,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1696,                out.write(iText);,0,0,0,1,2,0,3,0,0,3,17,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1698,"            after.printTo(out, period, locale);",0,0,0,0,2,0,5,0,0,2,35,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1699,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1704,            int oldPos = position;,2,0,0,0,0,1,0,0,0,2,22,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1705,"            position = iBeforeParser.parseInto(period, periodStr, position, locale);",1,0,0,0,2,0,6,0,1,4,72,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1707,            if (position < 0) {,1,1,0,1,3,1,0,0,0,5,19,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1708,                return position;,1,0,0,0,0,1,0,0,0,2,16,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1711,            boolean found = false;,1,0,0,0,0,1,0,0,1,3,22,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1712,            if (position > oldPos) {,2,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1714,                String[] parsedForms = iParsedForms;,2,0,0,0,2,0,0,1,0,3,36,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1715,                int length = parsedForms.length;,3,0,0,0,0,1,0,0,0,2,32,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1716,                for (int i=0; i < length; i++) {,4,1,0,1,3,2,0,0,1,6,32,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1717,                    String parsedForm = parsedForms[i];,1,0,1,0,2,0,0,1,0,4,35,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1718,                    if ((parsedForm == null || parsedForm.length() == 0) ||,1,4,0,2,5,1,2,0,0,6,55,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1722,                        position += (parsedForm == null ? 0 : parsedForm.length());,2,1,0,2,4,0,2,0,1,6,59,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1723,                        found = true;,1,0,0,0,0,0,0,0,2,2,13,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1724,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1729,            oldPos = position;,2,0,0,0,0,0,0,0,1,2,18,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1730,"            position = iAfterParser.parseInto(period, periodStr, position, locale);",1,0,0,0,2,0,6,0,1,4,71,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1732,            if (position < 0) {,1,1,0,1,3,1,0,0,0,5,19,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1733,                return position;,1,0,0,0,0,1,0,0,0,2,16,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1736,            if (found && position == oldPos) {,3,2,0,1,3,1,0,0,0,5,34,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1738,                return ~oldPos;,1,0,0,0,0,1,0,0,1,3,15,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1741,            if (position > oldPos && !found && !iUseBefore) {,4,3,0,1,3,1,0,0,2,6,49,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1743,                return ~oldPos;,1,0,0,0,0,1,0,0,1,3,15,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1746,            return position;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1549,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1561,            out.write(iText);,0,0,0,1,2,0,3,0,0,3,17,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1562,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1567,"            if (periodStr.regionMatches(true, position, iText, 0, iText.length())) {",0,0,0,1,7,1,6,0,1,5,72,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1568,                return position + iText.length();,1,1,0,1,2,1,2,0,0,6,33,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1570,            return ~position;,1,0,0,0,0,1,0,0,1,3,17,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1073,"                suffix = new CompositeAffix(field.iSuffix, suffix);",4,0,0,0,2,1,0,1,2,5,51,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1080,                return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1111,                sum += iPrefix.calculatePrintedLength(value);,1,0,0,1,2,0,3,0,1,5,45,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1131,"                iPrefix.printTo(buf, value);",0,0,0,0,2,0,4,0,0,2,28,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1137,"                FormatUtils.appendPaddedInteger(buf, value, minDigits);",0,0,0,0,2,0,5,0,0,2,55,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1152,            long valueLong = getFieldValue(period);,1,0,0,1,2,1,2,0,1,6,39,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1153,            if (valueLong == Long.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,34,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1154,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1156,            int value = (int) valueLong;,2,0,0,1,2,2,0,0,0,4,28,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1157,            if (iFieldType >= SECONDS_MILLIS) {,2,1,0,1,3,1,0,0,0,5,35,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1158,                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);,4,1,0,1,4,1,0,0,1,6,64,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1161,            if (iPrefix != null) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1162,"                iPrefix.printTo(out, value);",0,0,0,0,2,0,4,0,0,2,28,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1164,            int minDigits = iMinPrintedDigits;,2,0,0,0,0,1,0,0,0,2,34,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1165,            if (minDigits <= 1) {,1,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1166,"                FormatUtils.writeUnpaddedInteger(out, value);",0,0,0,0,2,0,4,0,0,2,45,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1168,"                FormatUtils.writePaddedInteger(out, value, minDigits);",0,0,0,0,2,0,5,0,0,2,54,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1170,            if (iFieldType >= SECONDS_MILLIS) {,2,1,0,1,3,1,0,0,0,5,35,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1171,                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);,3,1,0,2,6,2,3,0,0,6,75,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1172,                if (iFieldType == SECONDS_MILLIS || dp > 0) {,3,3,0,1,3,1,0,0,0,5,45,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1173,                    out.write('.');,0,0,0,1,2,0,2,0,1,4,15,10,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1174,"                    FormatUtils.writePaddedInteger(out, dp, 3);",0,0,0,0,2,0,4,0,0,2,43,10,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1177,            if (iSuffix != null) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1178,"                iSuffix.printTo(out, value);",0,0,0,0,2,0,4,0,0,2,28,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1180,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1186,            boolean mustParse = (iPrintZeroSetting == PRINT_ZERO_ALWAYS);,3,1,0,1,2,1,0,0,0,5,61,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1189,            if (position >= text.length()) {,1,1,0,2,5,1,2,0,0,6,32,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1190,                return mustParse ? ~position : position;,3,0,0,0,0,1,0,0,1,3,40,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1193,            if (iPrefix != null) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1194,"                position = iPrefix.parse(text, position);",1,0,0,0,2,0,4,0,1,4,41,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1195,                if (position >= 0) {,1,1,0,1,3,1,0,0,0,5,20,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1197,                    mustParse = true;,1,0,0,0,0,0,0,0,2,2,17,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1200,                    if (!mustParse) {,1,0,0,1,3,1,0,0,1,5,17,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1204,                        return ~position;,1,0,0,0,0,1,0,0,1,3,17,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1206,                    return position;,1,0,0,0,0,1,0,0,0,2,16,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1210,            int suffixPos = -1;,1,0,0,0,0,1,0,0,1,3,19,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1211,            if (iSuffix != null && !mustParse) {,2,2,0,1,3,1,0,0,1,6,36,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1214,"                suffixPos = iSuffix.scan(text, position);",1,0,0,0,2,0,4,0,1,4,41,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1215,                if (suffixPos >= 0) {,1,1,0,1,3,1,0,0,0,5,21,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1217,                    mustParse = true;,1,0,0,0,0,0,0,0,2,2,17,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1220,                    if (!mustParse) {,1,0,0,1,3,1,0,0,1,5,17,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1224,                        return ~suffixPos;,1,0,0,0,0,1,0,0,1,3,18,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1226,                    return suffixPos;,1,0,0,0,0,1,0,0,0,2,17,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1230,"            if (!mustParse && !isSupported(period.getPeriodType(), iFieldType)) {",1,1,0,1,7,1,4,0,3,7,69,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1233,                return position;,1,0,0,0,0,1,0,0,0,2,16,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1237,            if (suffixPos > 0) {,1,1,0,1,3,1,0,0,0,5,20,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1238,"                limit = Math.min(iMaxParsedDigits, suffixPos - position);",3,1,0,0,2,0,3,0,1,5,57,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1240,"                limit = Math.min(iMaxParsedDigits, text.length() - position);",2,1,0,1,4,0,5,0,1,6,61,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1244,            int length = 0;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1245,            int fractPos = -1;,1,0,0,0,0,1,0,0,1,3,18,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1246,            boolean hasDigits = false;,1,0,0,0,0,1,0,0,1,3,26,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1247,            while (length < limit) {,2,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1248,                char c = text.charAt(position + length);,3,1,0,1,2,1,2,0,0,6,40,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1250,                if (length == 0 && (c == '-' || c == '+') && !iRejectSignedValues) {,4,6,0,2,5,1,0,0,3,6,68,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1251,                    boolean negative = c == '-';,2,1,0,0,0,1,0,0,1,4,28,10,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1254,                    if (length + 1 >= limit || ,2,4,0,0,1,1,0,0,0,4,26,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1257,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1260,                    if (negative) {,1,0,0,1,3,1,0,0,0,4,15,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1261,                        length++;,1,0,0,0,0,0,0,0,1,2,9,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1264,                        position++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1267,"                    limit = Math.min(limit + 1, text.length() - position);",3,2,0,1,4,0,4,0,1,6,54,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1268,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1271,                if (c >= '0' && c <= '9') {,2,3,0,1,3,1,0,0,2,6,27,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1272,                    hasDigits = true;,1,0,0,0,0,0,0,0,2,2,17,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1274,"                    if ((c == '.' || c == ',')",2,4,0,0,3,1,0,0,2,5,26,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1276,                        if (fractPos >= 0) {,1,1,0,1,3,1,0,0,0,5,20,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1278,                            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1280,                        fractPos = position + length + 1;,3,1,0,0,0,0,0,0,1,3,33,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1282,"                        limit = Math.min(limit + 1, text.length() - position);",3,2,0,1,4,0,4,0,1,6,54,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1287,                length++;,1,0,0,0,0,0,0,0,1,2,9,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1288,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1290,            if (!hasDigits) {,1,0,0,1,3,1,0,0,1,5,17,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1291,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1294,            if (suffixPos >= 0 && position + length != suffixPos) {,4,4,0,1,3,1,0,0,0,5,55,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1299,                return position;,1,0,0,0,0,1,0,0,0,2,16,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1302,            if (iFieldType != SECONDS_MILLIS && iFieldType != SECONDS_OPTIONAL_MILLIS) {,4,3,0,1,3,1,0,0,0,5,76,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1304,"                setFieldValue(period, iFieldType, parseInt(text, position, length));",0,0,0,0,4,0,7,0,2,3,68,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1305,            } else if (fractPos < 0) {,1,1,0,1,4,2,0,0,0,5,26,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1306,"                setFieldValue(period, SECONDS, parseInt(text, position, length));",0,0,0,0,4,0,7,0,2,3,65,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1307,"                setFieldValue(period, MILLIS, 0);",0,0,0,0,2,0,3,0,1,3,33,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1309,"                int wholeValue = parseInt(text, position, fractPos - position - 1);",3,1,0,0,2,1,3,0,1,6,67,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1310,"                setFieldValue(period, SECONDS, wholeValue);",0,0,0,0,2,0,4,0,1,3,43,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1312,                int fractLen = position + length - fractPos;,4,2,0,0,0,1,0,0,0,3,44,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1314,                if (fractLen <= 0) {,1,1,0,1,3,1,0,0,0,5,20,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1315,                    fractValue = 0;,1,0,0,0,0,0,0,0,1,2,15,10,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1317,                    if (fractLen >= 3) {,1,1,0,1,3,1,0,0,0,5,20,10,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1318,"                        fractValue = parseInt(text, fractPos, 3);",1,0,0,0,2,0,3,0,2,4,41,12,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1320,"                        fractValue = parseInt(text, fractPos, fractLen);",1,0,0,0,2,0,4,0,2,4,48,12,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1321,                        if (fractLen == 1) {,1,1,0,1,3,1,0,0,0,5,20,12,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1322,                            fractValue *= 100;,1,0,0,0,0,0,0,0,1,2,18,14,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1324,                            fractValue *= 10;,1,0,0,0,0,0,0,0,1,2,17,14,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1327,                    if (wholeValue < 0) {,1,1,0,1,3,1,0,0,0,5,21,10,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1328,                        fractValue = -fractValue;,2,0,0,0,0,0,0,0,2,2,25,12,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1332,"                setFieldValue(period, MILLIS, fractValue);",0,0,0,0,2,0,4,0,1,3,42,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1335,            position += length;,2,0,0,0,0,0,0,0,1,2,19,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1337,            if (position >= 0 && iSuffix != null) {,2,3,0,1,3,1,0,0,0,5,39,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1338,"                position = iSuffix.parse(text, position);",1,0,0,0,2,0,4,0,1,4,41,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1341,            return position;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1351,            if (length >= 10) {,1,1,0,1,3,1,0,0,0,5,19,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1353,"                return Integer.parseInt(text.substring(position, position + length));",2,1,0,0,4,1,5,0,0,5,69,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1355,            if (length <= 0) {,1,1,0,1,3,1,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1356,                return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1358,            int value = text.charAt(position++);,2,0,0,1,2,1,2,0,1,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1359,            length--;,1,0,0,0,0,0,0,0,1,2,9,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1361,            if (value == '-') {,1,1,0,1,3,1,0,0,1,6,19,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1362,                if (--length < 0) {,1,1,0,1,3,1,0,0,1,6,19,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1363,                    return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1365,                negative = true;,1,0,0,0,0,0,0,0,2,2,16,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1366,                value = text.charAt(position++);,2,0,0,1,2,0,2,0,2,5,32,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1368,                negative = false;,1,0,0,0,0,0,0,0,2,2,17,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1370,            value -= '0';,1,0,0,0,0,0,0,0,2,2,13,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1371,            while (length-- > 0) {,1,1,0,1,3,1,0,0,1,6,22,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1372,                value = ((value << 3) + (value << 1)) + text.charAt(position++) - '0';,4,5,0,2,8,0,2,0,3,6,70,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1374,            return negative ? -value : value;,3,0,0,0,0,1,0,0,1,3,33,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1383,                type = null; // Don't need to check if supported.,1,0,0,0,0,1,0,0,1,3,49,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1388,                return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1395,                return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1415,                value = period.get(DurationFieldType.seconds());,1,0,0,2,4,0,4,0,1,5,48,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1416,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1418,                value = period.get(DurationFieldType.millis());,1,0,0,2,4,0,4,0,1,5,47,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1419,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1432,                    return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1435,                        for (int i = iFieldType + 1; i <= MAX_FIELD; i++) {,5,2,0,1,3,2,0,0,1,6,51,10,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1436,"                            if (isSupported(type, i) && iFieldFormatters[i] != null) {",0,2,1,0,7,1,3,0,1,6,58,12,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1437,                                return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,15,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1445,                    if (isZero(period) && iFieldFormatters[iFieldType] == this) {,0,2,1,2,7,2,2,0,1,7,61,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1446,"                        int i = Math.min(iFieldType, 8);  // line split out for IBM JDK",1,0,0,0,2,2,3,0,0,4,63,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1447,                        i--;                              // see bug 1660490,1,0,0,0,0,0,0,0,1,2,52,10,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1448,                        for (; i >= 0 && i <= MAX_FIELD; i--) {,4,3,0,1,3,1,0,0,1,6,39,10,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1449,"                            if (isSupported(type, i) && iFieldFormatters[i] != null) {",0,2,1,0,7,1,3,0,1,6,58,12,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1450,                                return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,15,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1453,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1454,                        return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,11,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1469,            return true;,0,0,0,0,0,1,0,0,1,2,12,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1475,                return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1489,                return type.isSupported(DurationFieldType.seconds());,0,0,0,2,4,1,4,0,0,4,53,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1491,                return type.isSupported(DurationFieldType.millis());,0,0,0,2,4,1,4,0,0,4,52,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1500,            switch (field) {,1,0,0,1,3,1,0,0,0,4,16,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1502,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1504,                period.setYears(value);,0,0,0,1,2,0,3,0,0,3,23,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1505,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1507,                period.setMonths(value);,0,0,0,1,2,0,3,0,0,3,24,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1508,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1510,                period.setWeeks(value);,0,0,0,1,2,0,3,0,0,3,23,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1511,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1513,                period.setDays(value);,0,0,0,1,2,0,3,0,0,3,22,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1514,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1516,                period.setHours(value);,0,0,0,1,2,0,3,0,0,3,23,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1517,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1519,                period.setMinutes(value);,0,0,0,1,2,0,3,0,0,3,25,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1520,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1522,                period.setSeconds(value);,0,0,0,1,2,0,3,0,0,3,25,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1523,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1525,                period.setMillis(value);,0,0,0,1,2,0,3,0,0,3,24,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1528,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,991,"        CompositeAffix(PeriodFieldAffix left, PeriodFieldAffix right) {",3,0,0,0,3,0,0,2,0,3,63,3,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,992,            iLeft = left;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,993,            iRight = right;,2,0,0,0,0,0,0,0,1,2,15,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,994,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,997,            return iLeft.calculatePrintedLength(value),0,1,0,1,2,1,3,0,0,5,42,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1002,"            iLeft.printTo(buf, value);",0,0,0,0,2,0,4,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1003,"            iRight.printTo(buf, value);",0,0,0,0,2,0,4,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1004,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1007,"            iLeft.printTo(out, value);",0,0,0,0,2,0,4,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1008,"            iRight.printTo(out, value);",0,0,0,0,2,0,4,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1009,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1012,"            position = iLeft.parse(periodStr, position);",1,0,0,0,2,0,4,0,1,4,44,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1013,            if (position >= 0) {,1,1,0,1,3,1,0,0,0,5,20,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1014,"                position = iRight.parse(periodStr, position);",1,0,0,0,2,0,4,0,1,4,45,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1016,            return position;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1020,"            int pos = iLeft.scan(periodStr, position);",1,0,0,0,2,1,4,0,0,4,42,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1021,            if (pos >= 0) {,1,1,0,1,3,1,0,0,0,5,15,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1022,"                return iRight.scan(periodStr, pos);",0,0,0,0,2,1,4,0,0,3,35,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,1024,            return ~position;,1,0,0,0,0,1,0,0,1,3,17,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,916,"        PluralAffix(String singularText, String pluralText) {",3,0,0,0,3,0,0,2,0,3,53,3,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,917,            iSingularText = singularText;,2,0,0,0,0,0,0,0,1,2,29,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,918,            iPluralText = pluralText;,2,0,0,0,0,0,0,0,1,2,25,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,919,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,922,            return (value == 1 ? iSingularText : iPluralText).length();,3,1,0,1,4,1,1,0,0,6,59,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,926,            buf.append(value == 1 ? iSingularText : iPluralText);,3,1,0,1,2,0,2,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,927,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,930,            out.write(value == 1 ? iSingularText : iPluralText);,3,1,0,1,2,0,2,0,0,5,52,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,931,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,934,            String text1 = iPluralText;,2,0,0,0,0,0,0,1,0,2,27,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,935,            String text2 = iSingularText; ,2,0,0,0,0,0,0,1,0,2,29,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,937,            if (text1.length() < text2.length()) {,0,1,0,2,7,1,4,0,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,939,                String temp = text1;,2,0,0,0,0,0,0,1,0,2,20,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,940,                text1 = text2;,2,0,0,0,0,0,0,0,1,2,14,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,941,                text2 = temp;,2,0,0,0,0,0,0,0,1,2,13,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,944,            if (periodStr.regionMatches,0,0,0,0,1,1,2,0,0,3,27,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,946,                return position + text1.length();,1,1,0,1,2,1,2,0,0,6,33,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,948,            if (periodStr.regionMatches,0,0,0,0,1,1,2,0,0,3,27,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,950,                return position + text2.length();,1,1,0,1,2,1,2,0,0,6,33,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,953,            return ~position;,1,0,0,0,0,1,0,0,1,3,17,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,957,            String text1 = iPluralText;,2,0,0,0,0,0,0,1,0,2,27,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,958,            String text2 = iSingularText; ,2,0,0,0,0,0,0,1,0,2,29,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,960,            if (text1.length() < text2.length()) {,0,1,0,2,7,1,4,0,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,962,                String temp = text1;,2,0,0,0,0,0,0,1,0,2,20,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,963,                text1 = text2;,2,0,0,0,0,0,0,0,1,2,14,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,964,                text2 = temp;,2,0,0,0,0,0,0,0,1,2,13,7,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,967,            int textLength1 = text1.length();,1,0,0,1,2,1,2,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,968,            int textLength2 = text2.length();,1,0,0,1,2,1,2,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,970,            int sourceLength = periodStr.length();,1,0,0,1,2,1,2,0,0,5,38,6,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,971,            for (int pos = position; pos < sourceLength; pos++) {,5,1,0,1,3,2,0,0,1,6,53,5,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,972,"                if (periodStr.regionMatches(true, pos, text1, 0, textLength1)) {",0,0,0,0,5,1,5,0,1,4,64,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,973,                    return pos;,1,0,0,0,0,1,0,0,0,2,11,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,975,"                if (periodStr.regionMatches(true, pos, text2, 0, textLength2)) {",0,0,0,0,5,1,5,0,1,4,64,8,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,976,                    return pos;,1,0,0,0,0,1,0,0,0,2,11,9,0.0,0,0
defect4j,time,org/joda/time/format/PeriodFormatterBuilder,13,979,            return ~position;,1,0,0,0,0,1,0,0,1,3,17,5,0.0,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,52,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,97,        if (cAlternate == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,98,            cAlternate = new PeriodFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,41,6,0.0,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,112,        return cAlternate;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,124,        if (cAlternateExtended == null) {,1,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,125,            cAlternateExtended = new PeriodFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,49,6,0.0,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,143,        return cAlternateExtended;,1,0,0,0,0,1,0,0,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,155,        if (cAlternateWithWeeks == null) {,1,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,156,            cAlternateWithWeeks = new PeriodFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,50,6,0.0,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,171,        return cAlternateWithWeeks;,1,0,0,0,0,1,0,0,0,2,27,4,0.0,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,183,        if (cAlternateExtendedWihWeeks == null) {,1,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,184,            cAlternateExtendedWihWeeks = new PeriodFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,57,6,0.0,0,0
defect4j,time,org/joda/time/format/ISOPeriodFormat,13,203,        return cAlternateExtendedWihWeeks;,1,0,0,0,0,1,0,0,0,2,34,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,36,    private FormatUtils() {,1,0,0,1,3,1,0,0,1,5,23,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,37,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,51,            buf.append('-');,0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,52,            if (value != Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,53,                value = -value;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,55,                for (; size > 10; size--) {,2,1,0,1,3,1,0,0,1,6,27,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,56,                    buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,58,"                buf.append("""" + -(long)Integer.MIN_VALUE);",2,1,0,2,4,1,2,0,2,7,42,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,59,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,68,            for (; size > 2; size--) {,2,1,0,1,3,1,0,0,1,6,26,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,69,                buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,74,            int d = ((value + 1) * 13421772) >> 27;,2,3,0,2,4,1,0,0,0,5,39,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,75,            buf.append((char) (d + '0'));,1,1,0,2,6,1,2,0,1,7,29,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,3,4,0,3,10,1,2,0,1,7,55,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,78,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,82,            } else if (value < 10000) {,1,1,0,1,4,2,0,0,0,5,27,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,83,                digits = 4;,1,0,0,0,0,0,0,0,1,2,11,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,85,                digits = (int)(Math.log(value) / LOG_10) + 1;,2,2,0,2,6,1,3,0,1,7,45,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,88,                buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,105,        int intValue = (int)value;,2,0,0,1,2,2,0,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,106,        if (intValue == value) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,107,"            appendPaddedInteger(buf, intValue, size);",0,0,0,0,2,0,4,0,1,3,41,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,108,        } else if (size <= 19) {,1,1,0,1,4,2,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,109,            buf.append(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,33,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,111,            if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,112,                buf.append('-');,0,0,0,1,2,0,2,0,1,4,16,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,113,                if (value != Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,30,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,114,                    value = -value;,2,0,0,0,0,0,0,0,2,2,15,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,116,                    for (; size > 19; size--) {,2,1,0,1,3,1,0,0,1,6,27,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,117,                        buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,14,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,119,"                    buf.append(""9223372036854775808"");",0,0,0,1,2,0,2,0,1,4,34,12,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,120,                    return;,0,0,0,0,0,1,0,0,1,2,7,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,123,            int digits = (int)(Math.log(value) / LOG_10) + 1;,2,2,0,2,6,2,3,0,0,6,49,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,124,            for (; size > digits; size--) {,3,1,0,1,3,1,0,0,1,6,31,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,125,                buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,127,            buf.append(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,33,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,129,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,144,        if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,145,            out.write('-');,0,0,0,1,2,0,2,0,1,4,15,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,146,            if (value != Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,147,                value = -value;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,149,                for (; size > 10; size--) {,2,1,0,1,3,1,0,0,1,6,27,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,150,                    out.write('0');,0,0,0,1,2,0,2,0,1,4,15,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,152,"                out.write("""" + -(long)Integer.MIN_VALUE);",2,1,0,2,4,1,2,0,2,7,41,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,153,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,156,        if (value < 10) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,157,            for (; size > 1; size--) {,2,1,0,1,3,1,0,0,1,6,26,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,158,                out.write('0');,0,0,0,1,2,0,2,0,1,4,15,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,160,            out.write(value + '0');,1,1,0,1,2,0,2,0,1,6,23,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,161,        } else if (value < 100) {,1,1,0,1,4,2,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,162,            for (; size > 2; size--) {,2,1,0,1,3,1,0,0,1,6,26,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,163,                out.write('0');,0,0,0,1,2,0,2,0,1,4,15,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,168,            int d = ((value + 1) * 13421772) >> 27;,2,3,0,2,4,1,0,0,0,5,39,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,169,            out.write(d + '0');,1,1,0,1,2,0,2,0,1,6,19,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,171,            out.write(value - (d << 3) - (d << 1) + '0');,3,4,0,2,6,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,172,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,174,            if (value < 1000) {,1,1,0,1,3,1,0,0,0,5,19,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,175,                digits = 3;,1,0,0,0,0,0,0,0,1,2,11,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,176,            } else if (value < 10000) {,1,1,0,1,4,2,0,0,0,5,27,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,177,                digits = 4;,1,0,0,0,0,0,0,0,1,2,11,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,179,                digits = (int)(Math.log(value) / LOG_10) + 1;,2,2,0,2,6,1,3,0,1,7,45,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,181,            for (; size > digits; size--) {,3,1,0,1,3,1,0,0,1,6,31,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,182,                out.write('0');,0,0,0,1,2,0,2,0,1,4,15,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,184,            out.write(Integer.toString(value));,0,0,0,2,4,0,5,0,0,3,35,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,186,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,201,        int intValue = (int)value;,2,0,0,1,2,2,0,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,202,        if (intValue == value) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,203,"            writePaddedInteger(out, intValue, size);",0,0,0,0,2,0,4,0,1,3,40,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,204,        } else if (size <= 19) {,1,1,0,1,4,2,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,205,            out.write(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,32,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,207,            if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,208,                out.write('-');,0,0,0,1,2,0,2,0,1,4,15,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,209,                if (value != Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,30,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,210,                    value = -value;,2,0,0,0,0,0,0,0,2,2,15,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,212,                    for (; size > 19; size--) {,2,1,0,1,3,1,0,0,1,6,27,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,213,                        out.write('0');,0,0,0,1,2,0,2,0,1,4,15,14,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,215,"                    out.write(""9223372036854775808"");",0,0,0,1,2,0,2,0,1,4,33,12,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,216,                    return;,0,0,0,0,0,1,0,0,1,2,7,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,219,            int digits = (int)(Math.log(value) / LOG_10) + 1;,2,2,0,2,6,2,3,0,0,6,49,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,220,            for (; size > digits; size--) {,3,1,0,1,3,1,0,0,1,6,31,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,221,                out.write('0');,0,0,0,1,2,0,2,0,1,4,15,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,223,            out.write(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,32,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,225,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,241,"                buf.append("""" + -(long)Integer.MIN_VALUE);",2,1,0,2,4,1,2,0,2,7,42,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,242,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,256,            buf.append(Integer.toString(value));,0,0,0,2,4,0,5,0,0,3,36,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,269,        int intValue = (int)value;,2,0,0,1,2,2,0,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,270,        if (intValue == value) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,271,"            appendUnpaddedInteger(buf, intValue);",0,0,0,0,2,0,3,0,1,3,37,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,273,            buf.append(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,33,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,275,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,288,        if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,289,            out.write('-');,0,0,0,1,2,0,2,0,1,4,15,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,290,            if (value != Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,291,                value = -value;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,293,"                out.write("""" + -(long)Integer.MIN_VALUE);",2,1,0,2,4,1,2,0,2,7,41,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,294,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,297,        if (value < 10) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,298,            out.write(value + '0');,1,1,0,1,2,0,2,0,1,6,23,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,299,        } else if (value < 100) {,1,1,0,1,4,2,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,303,            int d = ((value + 1) * 13421772) >> 27;,2,3,0,2,4,1,0,0,0,5,39,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,304,            out.write(d + '0');,1,1,0,1,2,0,2,0,1,6,19,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,306,            out.write(value - (d << 3) - (d << 1) + '0');,3,4,0,2,6,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,307,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,308,            out.write(Integer.toString(value));,0,0,0,2,4,0,5,0,0,3,35,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,310,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,323,        int intValue = (int)value;,2,0,0,1,2,2,0,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,324,        if (intValue == value) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,325,"            writeUnpaddedInteger(out, intValue);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,327,            out.write(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,32,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,329,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,340,                return 20;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,352,        int value = text.charAt(position) - '0';,1,1,0,1,2,1,3,0,1,7,40,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,3,6,0,2,8,1,2,0,1,7,71,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,357,        int sampleLen = errorPos + 32;,2,1,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,359,        if (text.length() <= sampleLen + 3) {,1,2,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,360,            sampleText = text;,2,0,0,0,0,0,0,0,1,2,18,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,362,"            sampleText = text.substring(0, sampleLen).concat(""..."");",1,0,0,1,4,0,4,0,2,5,56,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,365,        if (errorPos <= 0) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,366,"            return ""Invalid format: \"""" + sampleText + '""';",1,1,0,0,0,1,0,0,2,4,47,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,369,        if (errorPos >= text.length()) {,1,1,0,2,5,1,2,0,0,6,32,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,370,"            return ""Invalid format: \"""" + sampleText + ""\"" is too short"";",1,1,0,0,0,2,0,0,2,4,61,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,13,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +",1,1,0,0,0,1,0,0,2,4,68,4,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,266,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,267,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,269,            if (obj instanceof StandardDurationFieldType) {,1,0,0,1,3,2,0,1,0,5,47,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,3,1,0,2,4,1,0,1,0,6,62,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,272,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,282,            chronology = DateTimeUtils.getChronology(chronology);,1,0,0,1,2,0,3,0,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,284,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,286,                    return chronology.eras();,0,0,0,1,2,1,2,0,0,4,25,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,288,                    return chronology.centuries();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,290,                    return chronology.weekyears();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,292,                    return chronology.years();,0,0,0,1,2,1,2,0,0,4,26,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,294,                    return chronology.months();,0,0,0,1,2,1,2,0,0,4,27,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,296,                    return chronology.weeks();,0,0,0,1,2,1,2,0,0,4,26,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,298,                    return chronology.days();,0,0,0,1,2,1,2,0,0,4,25,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,300,                    return chronology.halfdays();,0,0,0,1,2,1,2,0,0,4,29,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,302,                    return chronology.hours();,0,0,0,1,2,1,2,0,0,4,26,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,304,                    return chronology.minutes();,0,0,0,1,2,1,2,0,0,4,28,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,306,                    return chronology.seconds();,0,0,0,1,2,1,2,0,0,4,28,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,308,                    return chronology.millis();,0,0,0,1,2,1,2,0,0,4,27,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,311,                    throw new InternalError();,0,0,0,1,2,2,0,1,1,5,26,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,321,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,323,                    return ERAS_TYPE;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,325,                    return CENTURIES_TYPE;,1,0,0,0,0,1,0,0,0,2,22,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,327,                    return WEEKYEARS_TYPE;,1,0,0,0,0,1,0,0,0,2,22,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,329,                    return YEARS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,331,                    return MONTHS_TYPE;,1,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,333,                    return WEEKS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,335,                    return DAYS_TYPE;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,337,                    return HALFDAYS_TYPE;,1,0,0,0,0,1,0,0,0,2,21,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,339,                    return HOURS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,341,                    return MINUTES_TYPE;,1,0,0,0,0,1,0,0,0,2,20,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,343,                    return SECONDS_TYPE;,1,0,0,0,0,1,0,0,0,2,20,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,345,                    return MILLIS_TYPE;,1,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,13,348,                    return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,463,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,464,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,466,            if (obj instanceof StandardDateTimeFieldType) {,1,0,0,1,3,2,0,1,0,5,47,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,467,                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;,3,1,0,2,4,1,0,1,0,6,62,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,469,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,475,            return (1 << iOrdinal);,1,1,0,1,2,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,480,            chronology = DateTimeUtils.getChronology(chronology);,1,0,0,1,2,0,3,0,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,482,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,484,                    return chronology.era();,0,0,0,1,2,1,2,0,0,4,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,486,                    return chronology.yearOfEra();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,488,                    return chronology.centuryOfEra();,0,0,0,1,2,1,2,0,0,4,33,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,490,                    return chronology.yearOfCentury();,0,0,0,1,2,1,2,0,0,4,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,492,                    return chronology.year();,0,0,0,1,2,1,2,0,0,4,25,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,494,                    return chronology.dayOfYear();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,2,0,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,2,0,0,4,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,500,                    return chronology.weekyearOfCentury();,0,0,0,1,2,1,2,0,0,4,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,502,                    return chronology.weekyear();,0,0,0,1,2,1,2,0,0,4,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,504,                    return chronology.weekOfWeekyear();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,506,                    return chronology.dayOfWeek();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,508,                    return chronology.halfdayOfDay();,0,0,0,1,2,1,2,0,0,4,33,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,510,                    return chronology.hourOfHalfday();,0,0,0,1,2,1,2,0,0,4,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,512,                    return chronology.clockhourOfHalfday();,0,0,0,1,2,1,2,0,0,4,39,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,514,                    return chronology.clockhourOfDay();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,518,                    return chronology.minuteOfDay();,0,0,0,1,2,1,2,0,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,520,                    return chronology.minuteOfHour();,0,0,0,1,2,1,2,0,0,4,33,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,522,                    return chronology.secondOfDay();,0,0,0,1,2,1,2,0,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,524,                    return chronology.secondOfMinute();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,526,                    return chronology.millisOfDay();,0,0,0,1,2,1,2,0,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,528,                    return chronology.millisOfSecond();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,531,                    throw new InternalError();,0,0,0,1,2,2,0,1,1,5,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,541,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,543,                    return ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,16,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,545,                    return YEAR_OF_ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,547,                    return CENTURY_OF_ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,549,                    return YEAR_OF_CENTURY_TYPE;,1,0,0,0,0,1,0,0,0,2,28,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,551,                    return YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,553,                    return DAY_OF_YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,555,                    return MONTH_OF_YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,557,                    return DAY_OF_MONTH_TYPE;,1,0,0,0,0,1,0,0,0,2,25,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,559,                    return WEEKYEAR_OF_CENTURY_TYPE;,1,0,0,0,0,1,0,0,0,2,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,561,                    return WEEKYEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,21,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,563,                    return WEEK_OF_WEEKYEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,565,                    return DAY_OF_WEEK_TYPE;,1,0,0,0,0,1,0,0,0,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,567,                    return HALFDAY_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,569,                    return HOUR_OF_HALFDAY_TYPE;,1,0,0,0,0,1,0,0,0,2,28,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,571,                    return CLOCKHOUR_OF_HALFDAY_TYPE;,1,0,0,0,0,1,0,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,573,                    return CLOCKHOUR_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,575,                    return HOUR_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,577,                    return MINUTE_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,579,                    return MINUTE_OF_HOUR_TYPE;,1,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,581,                    return SECOND_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,583,                    return SECOND_OF_MINUTE_TYPE;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,585,                    return MILLIS_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,587,                    return MILLIS_OF_SECOND_TYPE;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,13,590,                    return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1284,        Stub(String id) {,2,0,0,1,3,0,0,1,0,4,17,3,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1285,            iID = id;,2,0,0,0,0,0,0,0,1,2,9,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1286,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1289,            out.writeUTF(iID);,0,0,0,1,2,0,3,0,0,3,18,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1290,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1293,            iID = in.readUTF();,1,0,0,1,2,0,2,0,1,5,19,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1294,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,13,1297,            return forID(iID);,0,0,0,1,2,1,2,0,1,5,18,5,0.0,0,0
