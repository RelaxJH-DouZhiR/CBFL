dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,61,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,1.33333,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,80,        return new Period(getMillis());,0,0,0,2,4,2,1,1,2,6,31,4,0.5,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,57,        return iWallOffset;,1,0,0,0,0,1,0,0,0,2,19,4,0.33333,0,0
defect4j,time,org/joda/time/Period,22,382,        super(duration);,1,0,0,1,2,1,0,0,1,5,16,3,0.12903,0,0
defect4j,time,org/joda/time/Period,22,383,    },0,0,0,0,1,0,0,0,0,1,1,2,0.12903,0,0
defect4j,time,org/joda/time/DateTimeZone,22,237,"        return forOffsetHoursMinutes(hoursOffset, 0);",0,0,0,0,2,1,2,0,1,4,45,4,0.08696,0,0
defect4j,time,org/joda/time/DateTimeZone,22,254,        if (hoursOffset == 0 && minutesOffset == 0) {,2,3,0,1,3,1,0,0,0,5,45,4,0.08511,0,0
defect4j,time,org/joda/time/DateTimeZone,22,257,        if (minutesOffset < 0 || minutesOffset > 59) {,2,3,0,1,3,1,0,0,0,5,46,4,0.08511,0,0
defect4j,time,org/joda/time/DateTimeZone,22,260,        int offset = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.08511,0,0
defect4j,time,org/joda/time/DateTimeZone,22,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",1,0,0,0,2,1,3,0,0,4,62,7,0.08511,0,0
defect4j,time,org/joda/time/DateTimeZone,22,263,            if (hoursInMinutes < 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.08511,0,0
defect4j,time,org/joda/time/DateTimeZone,22,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",1,0,0,0,2,0,4,0,1,4,66,8,0.08511,0,0
defect4j,time,org/joda/time/DateTimeZone,22,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",3,0,0,0,2,0,3,0,1,4,85,6,0.08511,0,0
defect4j,time,org/joda/time/DateTimeZone,22,271,        },0,0,0,0,1,0,0,0,0,1,1,2,0.08511,0,0
defect4j,time,org/joda/time/DateTimeZone,22,272,        return forOffsetMillis(offset);,0,0,0,1,2,1,2,0,1,5,31,4,0.08511,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,222,"        this(duration, null, null);",1,0,0,0,2,1,0,0,0,3,27,4,0.08333,1,0
defect4j,time,org/joda/time/base/BasePeriod,22,224,    },0,0,0,0,1,0,0,0,0,1,1,2,0.08333,1,1
defect4j,time,org/joda/time/DateTimeZone,22,282,        String id = printOffset(millisOffset);,1,0,0,1,2,0,2,1,1,6,38,4,0.07143,0,0
defect4j,time,org/joda/time/DateTimeZone,22,283,"        return fixedOffsetZone(id, millisOffset);",0,0,0,0,2,1,3,0,1,4,41,4,0.07143,0,0
defect4j,time,org/joda/time/DateTimeZone,22,349,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,352,        if (iFixedOffsetCache == null) {,1,1,0,1,3,1,0,0,0,5,32,4,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",1,0,0,1,2,1,0,4,2,6,71,6,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,356,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,1,0,0,1,2,0,3,2,0,5,56,4,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,357,        if (ref != null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);",4,0,0,0,2,1,0,1,2,5,55,4,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",1,0,0,1,4,1,3,2,1,7,65,5,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,365,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,631,        StringBuffer buf = new StringBuffer();,1,0,0,1,2,1,0,2,1,6,38,4,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,632,        if (offset >= 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,633,            buf.append('+');,0,0,0,1,2,0,2,0,1,4,16,7,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,639,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,1,0,0,0,3,55,5,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,0,2,0,4,0,0,2,47,5,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,1,2,1,0,0,1,6,58,4,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,643,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,1,0,0,0,3,59,5,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,644,        buf.append(':');,0,0,0,1,2,0,2,0,1,4,16,5,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,0,2,0,4,0,0,2,49,5,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,0,0,0,1,3,56,4,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,647,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0597,0,0
defect4j,time,org/joda/time/DateTimeZone,22,648,            return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,7,0.0597,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,49,        return iWallOffset;,1,0,0,0,0,1,0,0,0,2,19,4,0.05556,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,119,        long total = (long) val1 * (long) val2;,3,1,0,1,4,3,0,0,0,5,39,5,0.04938,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,61,4,0.04938,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,124,        return (int) total;,1,0,0,1,2,2,0,0,0,4,19,5,0.04938,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,294,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,2,1,0,1,6,2,5,0,0,6,84,6,0.04762,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,156,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.04167,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,284,"                    current = field.add(current, value);",1,0,0,0,2,0,4,0,1,4,36,10,0.0404,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,285,                    values[i] = value;,1,0,1,0,2,0,0,0,1,4,18,10,0.0404,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,279,            long current = 0;,1,0,0,0,0,1,0,0,0,2,17,7,0.0396,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,280,            for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0396,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,281,                DurationField field = period.getFieldType(i).getField(this);,1,0,0,1,4,1,4,1,0,6,60,8,0.0396,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,282,                if (field.isPrecise()) {,0,0,0,2,5,1,2,0,0,4,24,9,0.0396,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,283,"                    int value = field.getDifference(duration, current);",1,0,0,0,2,1,4,0,0,4,51,11,0.0396,0,0
defect4j,time,org/joda/time/Period,22,704,"        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);",2,0,0,1,4,2,2,0,1,6,68,5,0.03636,0,0
defect4j,time,org/joda/time/Period,22,713,"        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);",2,0,0,1,4,2,2,0,1,6,69,5,0.03636,0,0
defect4j,time,org/joda/time/Period,22,722,"        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);",2,0,0,1,4,2,2,0,1,6,68,5,0.03571,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,354,            int offset = this.iZone.getOffsetFromLocal(instant);,2,0,0,1,2,2,2,0,0,5,52,6,0.03008,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,355,            long diff = instant - offset;,3,1,0,0,0,1,0,0,0,3,29,6,0.03008,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,357,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,4,5,0,2,7,1,0,0,0,5,53,5,0.03008,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,360,            return offset;,1,0,0,0,0,1,0,0,0,2,14,5,0.03008,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0,0,0,0,4,1,6,0,0,3,88,5,0.02548,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,330,            int offset = getOffsetToAdd(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,47,6,0.02439,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,331,            return iField.getDifference,0,0,0,0,0,1,2,0,0,2,27,6,0.02439,0,0
defect4j,time,org/joda/time/DurationFieldType,22,278,                    return chronology.weeks();,0,0,0,1,2,1,2,0,0,4,26,7,0.02381,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,0,4,1,5,0,1,4,84,5,0.02105,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",1,0,0,0,2,1,4,0,0,4,77,5,0.02105,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,115,        return difference / iUnitMillis;,2,1,0,0,0,1,0,0,0,3,32,4,0.02105,0,0
defect4j,time,org/joda/time/DurationFieldType,22,290,                    return chronology.millis();,0,0,0,1,2,1,2,0,0,4,27,7,0.02094,0,0
defect4j,time,org/joda/time/DurationFieldType,22,288,                    return chronology.seconds();,0,0,0,1,2,1,2,0,0,4,28,7,0.02041,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,100,        long diff = val1 - val2;,3,1,0,0,0,1,0,0,0,3,24,5,0.0197,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,4,5,0,2,7,1,0,0,0,5,45,4,0.0197,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,106,        return diff;,1,0,0,0,0,1,0,0,0,2,12,4,0.0197,0,0
defect4j,time,org/joda/time/DurationFieldType,22,274,                    return chronology.years();,0,0,0,1,2,1,2,0,0,4,26,7,0.01914,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,318,            int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,6,0.01762,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,319,"            instant = iField.add(instant + offset, value);",3,1,0,0,2,0,3,0,1,5,46,5,0.01762,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,3,1,0,2,4,1,2,0,1,7,79,5,0.01762,0,0
defect4j,time,org/joda/time/DurationFieldType,22,286,                    return chronology.minutes();,0,0,0,1,2,1,2,0,0,4,28,7,0.01606,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,185,            return (int) value;,1,0,0,1,2,2,0,0,0,4,19,7,0.01594,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,63,            for (; size > 1; size--) {,2,1,0,1,3,1,0,0,1,6,26,6,0.01575,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,64,                buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,9,0.01575,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,66,            buf.append((char)(value + '0'));,1,1,0,2,6,1,2,0,1,7,32,7,0.01575,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,184,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,63,4,0.01556,0,0
defect4j,time,org/joda/time/DurationFieldType,22,276,                    return chronology.months();,0,0,0,1,2,1,2,0,0,4,27,7,0.01509,0,0
defect4j,time,org/joda/time/PeriodType,22,674,        int realIndex = iIndices[index];,1,0,1,0,2,1,0,0,0,4,32,5,0.01493,0,0
defect4j,time,org/joda/time/PeriodType,22,675,        return (realIndex == -1 ? 0 : period.getValue(realIndex));,1,1,0,2,4,1,3,0,1,7,58,6,0.01493,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,344,            int offset = this.iZone.getOffset(instant);,2,0,0,1,2,2,2,0,0,5,43,6,0.01476,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,345,            long sum = instant + offset;,3,1,0,0,0,1,0,0,0,3,28,6,0.01476,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,4,5,0,2,7,1,0,0,0,5,53,5,0.01476,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,350,            return offset;,1,0,0,0,0,1,0,0,0,2,14,5,0.01476,0,0
defect4j,time,org/joda/time/DurationFieldType,22,280,                    return chronology.days();,0,0,0,1,2,1,2,0,0,4,25,7,0.01404,0,0
defect4j,time,org/joda/time/DurationFieldType,22,284,                    return chronology.hours();,0,0,0,1,2,1,2,0,0,4,26,7,0.01389,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,50,        if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0137,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,62,        if (value < 10) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0137,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,92,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0137,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,324,        return iType.getFieldType(index);,0,0,0,1,2,1,3,0,0,4,33,5,0.01201,0,0
defect4j,time,org/joda/time/PeriodType,22,628,        return iTypes[index];,0,0,1,0,2,1,0,0,0,3,21,5,0.01201,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,31,    private static final double LOG_10 = Math.log(10);,1,0,0,1,2,4,2,0,3,6,50,2,0.01087,0,0
defect4j,time,org/joda/time/Period,22,298,"        super(0L, null, null);",0,0,0,0,2,1,0,0,1,3,22,3,0.00955,0,0
defect4j,time,org/joda/time/Period,22,299,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00955,0,0
defect4j,time,org/joda/time/Period,22,65,    public static final Period ZERO = new Period();,1,0,0,1,2,4,0,2,4,6,47,2,0.00955,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,115,        return iMillis;,1,0,0,0,0,1,0,0,0,2,15,4,0.00952,0,0
defect4j,time,org/joda/time/DurationFieldType,22,264,            chronology = DateTimeUtils.getChronology(chronology);,1,0,0,1,2,0,3,0,1,5,53,5,0.00937,0,0
defect4j,time,org/joda/time/DurationFieldType,22,266,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,0.00937,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,287,            return PeriodType.standard();,0,0,0,1,2,1,2,0,0,4,29,7,0.00868,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,117,"        return FieldUtils.safeAdd(instant, value);",0,0,0,0,2,1,4,0,0,3,42,5,0.00866,0,0
defect4j,time,org/joda/time/Duration,22,176,        super(duration);,1,0,0,1,2,1,0,0,1,5,16,3,0.00847,0,0
defect4j,time,org/joda/time/Duration,22,177,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00847,0,0
defect4j,time,org/joda/time/Duration,22,43,    public static final Duration ZERO = new Duration(0L);,1,0,0,1,2,4,0,2,4,6,53,2,0.00847,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,70,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.00842,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,239,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0084,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,240,        type = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,29,4,0.0084,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,241,        chrono = DateTimeUtils.getChronology(chrono);,1,0,0,1,2,0,3,0,1,5,45,4,0.0084,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,242,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0084,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,243,"        iValues = chrono.get(this, duration);",1,0,0,0,2,1,3,0,1,5,37,4,0.0084,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,244,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0084,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,61,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0084,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,62,        iMillis = duration;,2,0,0,0,0,0,0,0,1,2,19,4,0.0084,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,63,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0084,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,44,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0084,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0084,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,64,        int sum = val1 + val2;,3,1,0,0,0,1,0,0,0,3,22,5,0.00839,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,4,5,0,2,7,1,0,0,0,5,45,4,0.00839,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,276,        int size = period.size();,1,0,0,1,2,1,2,0,0,5,25,5,0.00826,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,277,        int[] values = new int[size];,1,0,1,0,4,3,0,0,0,4,29,5,0.00826,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,278,        if (duration != 0) {,1,1,0,1,3,1,0,0,0,5,20,4,0.00826,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,289,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.00826,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,303,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.00815,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,335,        return iValues[index];,0,0,1,0,2,1,0,0,0,3,22,5,0.00805,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,104,        long addition = value * iUnitMillis;  // safe,3,1,0,0,0,1,0,0,0,3,45,5,0.00762,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,105,"        return FieldUtils.safeAdd(instant, addition);",0,0,0,0,2,1,4,0,0,3,45,5,0.00762,0,0
defect4j,time,org/joda/time/PeriodType,22,102,        PeriodType type = cStandard;,2,0,0,0,0,0,0,1,0,2,28,4,0.00752,0,0
defect4j,time,org/joda/time/PeriodType,22,103,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00752,0,0
defect4j,time,org/joda/time/PeriodType,22,104,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.00752,0,0
defect4j,time,org/joda/time/PeriodType,22,114,            cStandard = type;,2,0,0,0,0,0,0,0,1,2,17,6,0.00752,0,0
defect4j,time,org/joda/time/PeriodType,22,116,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.00752,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,286,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00725,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,293,        return DateTimeUtils.getPeriodType(type);,0,0,0,1,2,1,3,0,0,4,41,5,0.00725,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,313,        return iType.size();,0,0,0,1,2,1,2,0,0,4,20,5,0.00725,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,45,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00725,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00725,0,0
defect4j,time,org/joda/time/PeriodType,22,617,        return iTypes.length;,2,0,0,0,0,1,0,0,0,2,21,5,0.00725,0,0
defect4j,time,org/joda/time/PeriodType,22,836,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.00719,0,0
defect4j,time,org/joda/time/PeriodType,22,835,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.00676,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,82,        long sum = val1 + val2;,3,1,0,0,0,1,0,0,0,3,23,5,0.00627,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,4,5,0,2,7,1,0,0,0,5,45,4,0.00627,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,88,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.00627,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,102,            return chrono;,1,0,0,0,0,1,0,0,0,2,14,6,0.00563,0,0
defect4j,time,org/joda/time/PeriodType,22,595,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00551,0,0
defect4j,time,org/joda/time/PeriodType,22,596,        iName = name;,2,0,0,0,0,0,0,0,1,2,13,4,0.00551,0,0
defect4j,time,org/joda/time/PeriodType,22,597,        iTypes = types;,2,0,0,0,0,0,0,0,1,2,15,4,0.00551,0,0
defect4j,time,org/joda/time/PeriodType,22,598,        iIndices = indices;,2,0,0,0,0,0,0,0,1,2,19,4,0.00551,0,0
defect4j,time,org/joda/time/PeriodType,22,599,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00551,0,0
defect4j,time,org/joda/time/PeriodType,22,56,"    private static final Map<PeriodType, Object> cTypes = new HashMap<PeriodType, Object>(32);",1,0,0,1,2,4,0,6,4,6,90,2,0.00551,0,0
defect4j,time,org/joda/time/PeriodType,22,58,    static int YEAR_INDEX = 0;,1,0,0,0,0,2,0,0,1,3,26,2,0.00551,0,0
defect4j,time,org/joda/time/PeriodType,22,59,    static int MONTH_INDEX = 1;,1,0,0,0,0,2,0,0,1,3,27,2,0.00551,0,0
defect4j,time,org/joda/time/PeriodType,22,60,    static int WEEK_INDEX = 2;,1,0,0,0,0,2,0,0,1,3,26,2,0.00551,0,0
defect4j,time,org/joda/time/PeriodType,22,61,    static int DAY_INDEX = 3;,1,0,0,0,0,2,0,0,1,3,25,2,0.00551,0,0
defect4j,time,org/joda/time/PeriodType,22,62,    static int HOUR_INDEX = 4;,1,0,0,0,0,2,0,0,1,3,26,2,0.00551,0,0
defect4j,time,org/joda/time/PeriodType,22,63,    static int MINUTE_INDEX = 5;,1,0,0,0,0,2,0,0,1,3,28,2,0.00551,0,0
defect4j,time,org/joda/time/PeriodType,22,64,    static int SECOND_INDEX = 6;,1,0,0,0,0,2,0,0,1,3,28,2,0.00551,0,0
defect4j,time,org/joda/time/PeriodType,22,65,    static int MILLI_INDEX = 7;,1,0,0,0,0,2,0,0,1,3,27,2,0.00551,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,253,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.00481,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,107,        if ((base = iBase) != null) {,2,1,0,2,5,1,0,0,1,6,29,4,0.00425,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,108,            return base.getZone();,0,0,0,1,2,1,2,0,0,4,22,7,0.00425,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,86,        return getInstance(DateTimeZone.getDefault());,0,0,0,2,4,1,3,0,1,5,46,4,0.00374,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,255,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.00312,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,68,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.00291,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,69,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,0,0,0,0,0,0,1,2,41,4,0.00291,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00291,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,82,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.00291,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,83,        cMillisProvider = new FixedMillisProvider(fixedMillis);,2,0,0,1,2,1,0,1,2,6,55,4,0.00291,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,84,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00291,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,129,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.00291,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,130,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00291,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,133,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00291,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,414,        FixedMillisProvider(long fixedMillis) {,2,0,0,1,3,1,0,0,0,4,39,3,0.00291,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,415,            iMillis = fixedMillis;,2,0,0,0,0,0,0,0,1,2,22,5,0.00291,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,416,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00291,0,0
defect4j,time,org/joda/time/DateTimeZone,22,174,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.0028,0,0
defect4j,time,org/joda/time/DateTimeZone,22,175,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0028,0,0
defect4j,time,org/joda/time/DateTimeZone,22,178,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0028,0,0
defect4j,time,org/joda/time/DateTimeZone,22,181,        synchronized(DateTimeZone.class) {,0,0,0,1,3,2,0,1,0,4,34,6,0.0028,0,0
defect4j,time,org/joda/time/DateTimeZone,22,182,            cDefault = zone;,2,0,0,0,0,0,0,0,1,2,16,6,0.0028,0,0
defect4j,time,org/joda/time/DateTimeZone,22,183,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0028,0,0
defect4j,time,org/joda/time/DateTimeZone,22,184,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0028,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",1,0,0,0,4,1,4,1,2,6,76,8,0.00278,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,108,"                cCache.put(zone, chrono);",0,0,0,0,2,0,4,0,0,2,25,9,0.00278,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,96,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00277,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,2,2,0,1,4,1,3,0,0,6,66,5,0.00277,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,100,        ISOChronology chrono = cFastCache[index];,1,0,1,0,2,0,0,1,0,4,41,4,0.00277,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,101,        if (chrono != null && chrono.getZone() == zone) {,2,3,0,2,5,1,2,0,0,6,49,4,0.00277,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,104,        synchronized (cCache) {,1,0,0,1,3,1,0,0,0,4,23,4,0.00277,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,105,            chrono = cCache.get(zone);,1,0,0,1,2,0,3,0,1,5,26,6,0.00277,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,106,            if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.00277,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,110,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00277,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,111,        cFastCache[index] = chrono;,1,0,1,0,2,0,0,0,1,4,27,4,0.00277,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,112,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.00277,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,133,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.00265,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,252,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.00261,0,0
defect4j,time,org/joda/time/DateTimeZone,22,147,                        },0,0,0,0,1,0,0,0,0,1,1,2,0.00261,0,0
defect4j,time,org/joda/time/DateTimeZone,22,133,        DateTimeZone zone = cDefault;,2,0,0,0,0,0,0,1,0,2,29,4,0.0026,0,0
defect4j,time,org/joda/time/DateTimeZone,22,134,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0026,0,0
defect4j,time,org/joda/time/DateTimeZone,22,135,            synchronized(DateTimeZone.class) {,0,0,0,1,3,2,0,1,0,4,34,8,0.0026,0,0
defect4j,time,org/joda/time/DateTimeZone,22,136,                zone = cDefault;,2,0,0,0,0,0,0,0,1,2,16,8,0.0026,0,0
defect4j,time,org/joda/time/DateTimeZone,22,137,                if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,8,0.0026,0,0
defect4j,time,org/joda/time/DateTimeZone,22,138,                    DateTimeZone temp = null;,1,0,0,0,0,0,0,1,0,2,25,10,0.0026,0,0
defect4j,time,org/joda/time/DateTimeZone,22,141,"                            String id = System.getProperty(""user.timezone"");",1,0,0,1,2,0,2,1,1,6,48,14,0.0026,0,0
defect4j,time,org/joda/time/DateTimeZone,22,142,                            if (id != null) {  // null check avoids stack overflow,1,1,0,1,3,1,0,0,0,5,54,14,0.0026,0,0
defect4j,time,org/joda/time/DateTimeZone,22,143,                                temp = forID(id);,1,0,0,1,2,0,2,0,2,5,17,16,0.0026,0,0
defect4j,time,org/joda/time/DateTimeZone,22,148,                        if (temp == null) {,1,1,0,1,3,1,0,0,0,5,19,12,0.0026,0,0
defect4j,time,org/joda/time/DateTimeZone,22,153,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.0026,0,0
defect4j,time,org/joda/time/DateTimeZone,22,154,                    if (temp == null) {,1,1,0,1,3,1,0,0,0,5,19,10,0.0026,0,0
defect4j,time,org/joda/time/DateTimeZone,22,157,                    cDefault = zone = temp;,3,0,0,0,0,0,0,0,2,2,23,10,0.0026,0,0
defect4j,time,org/joda/time/DateTimeZone,22,159,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0026,0,0
defect4j,time,org/joda/time/DateTimeZone,22,161,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.0026,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,218,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,82,"        super(base, zone);",2,0,0,0,2,1,0,0,1,4,18,3,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,83,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,56,        if (base == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,59,        base = base.withUTC();,1,0,0,1,2,0,2,0,1,5,22,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,60,        if (base == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,63,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,66,"        return new ZonedChronology(base, zone);",2,0,0,0,2,2,0,1,1,5,39,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,72,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,3,4,0,1,2,1,2,0,0,6,87,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,86,        return (DateTimeZone)getParam();,0,0,0,1,4,1,1,1,1,6,32,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",1,0,0,1,2,1,0,6,1,6,66,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,157,"        fields.eras = convertField(fields.eras, converted);",4,0,0,0,2,0,2,0,2,4,51,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,158,"        fields.centuries = convertField(fields.centuries, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,159,"        fields.years = convertField(fields.years, converted);",4,0,0,0,2,0,2,0,2,4,53,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,160,"        fields.months = convertField(fields.months, converted);",4,0,0,0,2,0,2,0,2,4,55,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,161,"        fields.weekyears = convertField(fields.weekyears, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,162,"        fields.weeks = convertField(fields.weeks, converted);",4,0,0,0,2,0,2,0,2,4,53,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,163,"        fields.days = convertField(fields.days, converted);",4,0,0,0,2,0,2,0,2,4,51,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,165,"        fields.halfdays = convertField(fields.halfdays, converted);",4,0,0,0,2,0,2,0,2,4,59,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,166,"        fields.hours = convertField(fields.hours, converted);",4,0,0,0,2,0,2,0,2,4,53,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,167,"        fields.minutes = convertField(fields.minutes, converted);",4,0,0,0,2,0,2,0,2,4,57,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,168,"        fields.seconds = convertField(fields.seconds, converted);",4,0,0,0,2,0,2,0,2,4,57,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,169,"        fields.millis = convertField(fields.millis, converted);",4,0,0,0,2,0,2,0,2,4,55,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,173,"        fields.year = convertField(fields.year, converted);",4,0,0,0,2,0,2,0,2,4,51,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",4,0,0,0,2,0,2,0,2,4,69,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",4,0,0,0,2,0,2,0,2,4,67,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,177,"        fields.era = convertField(fields.era, converted);",4,0,0,0,2,0,2,0,2,4,49,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",4,0,0,0,2,0,2,0,2,4,63,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,183,"        fields.weekyear = convertField(fields.weekyear, converted);",4,0,0,0,2,0,2,0,2,4,59,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",4,0,0,0,2,0,2,0,2,4,77,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",4,0,0,0,2,0,2,0,2,4,67,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",4,0,0,0,2,0,2,0,2,4,69,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",4,0,0,0,2,0,2,0,2,4,79,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",4,0,0,0,2,0,2,0,2,4,67,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,197,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,200,        if (field == null || !field.isSupported()) {,1,2,0,2,5,1,2,0,1,7,44,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,201,            return field;,1,0,0,0,0,1,0,0,0,2,13,6,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,203,        if (converted.containsKey(field)) {,0,0,0,2,5,1,3,0,0,4,35,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,204,            return (DurationField)converted.get(field);,0,0,0,1,4,1,3,1,0,5,43,7,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",2,0,0,1,4,1,1,2,2,7,73,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,207,"        converted.put(field, zonedField);",0,0,0,0,2,0,4,0,0,2,33,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,208,        return zonedField;,1,0,0,0,0,1,0,0,0,2,18,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,212,        if (field == null || !field.isSupported()) {,1,2,0,2,5,1,2,0,1,7,44,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,215,        if (converted.containsKey(field)) {,0,0,0,2,5,1,3,0,0,4,35,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,218,        ZonedDateTimeField zonedField =,1,0,0,0,0,0,0,1,0,2,31,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,223,"        converted.put(field, zonedField);",0,0,0,0,2,0,4,0,0,2,33,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,224,        return zonedField;,1,0,0,0,0,1,0,0,0,2,18,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,389,            super(field.getType());,0,0,0,2,4,1,2,0,1,5,23,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,390,            if (!field.isSupported()) {,0,0,0,2,5,1,2,0,1,5,27,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,393,            iField = field;,2,0,0,0,0,0,0,0,1,2,15,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,394,            iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,395,            iDurationField = durationField;,2,0,0,0,0,0,0,0,1,2,31,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,396,            iTimeField = useTimeArithmetic(durationField);,1,0,0,1,2,0,2,0,2,5,46,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,397,            iRangeDurationField = rangeDurationField;,2,0,0,0,0,0,0,0,1,2,41,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,398,            iLeapDurationField = leapDurationField;,2,0,0,0,0,0,0,0,1,2,39,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,399,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,284,            super(field.getType());,0,0,0,2,4,1,2,0,1,5,23,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,285,            if (!field.isSupported()) {,0,0,0,2,5,1,2,0,1,5,27,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,288,            iField = field;,2,0,0,0,0,0,0,0,1,2,15,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,289,            iTimeField = useTimeArithmetic(field);,1,0,0,1,2,0,2,0,2,5,38,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,290,            iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,291,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00258,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,298,            return iField.getUnitMillis();,0,0,0,1,2,1,2,0,0,4,30,6,0.00258,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,109,        return getWrappedField().getUnitMillis() * iScalar;,1,1,0,1,4,1,2,0,1,7,51,4,0.00258,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,328,        return iChronology.days();,0,0,0,1,2,1,2,0,0,4,26,5,0.00258,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,726,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.00258,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,220,        return iChronology.weeks();,0,0,0,1,2,1,2,0,0,4,27,5,0.00258,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,142,        long millis = iUnitMillis;,2,0,0,0,0,1,0,0,0,2,26,5,0.00258,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,143,        int hash = (int) (millis ^ (millis >>> 32));,3,2,0,2,6,2,0,0,0,5,44,5,0.00258,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,144,        hash += getType().hashCode();,1,0,0,1,4,0,2,0,2,5,29,4,0.00258,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,145,        return hash;,1,0,0,0,0,1,0,0,0,2,12,4,0.00258,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,101,        return getWrappedField().getLeapDurationField();,0,0,0,1,4,1,2,0,1,5,48,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,111,        return iChronology.days();,0,0,0,1,2,1,2,0,0,4,26,5,0.00258,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,147,        long scalar = iScalar;,2,0,0,0,0,1,0,0,0,2,22,5,0.00258,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,148,        int hash = (int) (scalar ^ (scalar >>> 32));,3,2,0,2,6,2,0,0,0,5,44,5,0.00258,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,149,        hash += getType().hashCode();,1,0,0,1,4,0,2,0,2,5,29,4,0.00258,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,150,        hash += getWrappedField().hashCode();,1,0,0,1,4,0,2,0,2,5,37,4,0.00258,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,151,        return hash;,1,0,0,0,0,1,0,0,0,2,12,4,0.00258,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,22,69,        return iField;,1,0,0,0,0,1,0,0,0,2,14,4,0.00258,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,49,        return DurationFieldType.millis();,0,0,0,1,2,1,2,0,0,4,34,5,0.00258,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,22,94,        return iChronology.weeks();,0,0,0,1,2,1,2,0,0,4,27,5,0.00257,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,4,0,0,4,70,5,0.00257,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,131,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.00257,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,160,            return iUnitMillis;,1,0,0,0,0,1,0,0,0,2,19,5,0.00256,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,315,        return iParam;,1,0,0,0,0,1,0,0,0,2,14,4,0.00256,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,55,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.00256,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,208,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.00256,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,90,        return iField.getRangeDurationField();,0,0,0,1,2,1,2,0,0,4,38,5,0.00256,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,139,        return iRangeField;,1,0,0,0,0,1,0,0,0,2,19,4,0.00256,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,56,        return iChronology.years();,0,0,0,1,2,1,2,0,0,4,27,5,0.00256,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,58,        return iChronology.weekyears();,0,0,0,1,2,1,2,0,0,4,31,5,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,122,"        super(base, null);",1,0,0,0,2,1,0,0,1,4,18,3,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,123,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",1,0,0,1,2,4,0,6,4,6,106,2,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,1,0,1,0,2,1,0,1,1,6,48,4,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,1,0,0,2,4,1,2,1,2,7,71,4,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",2,0,0,0,2,0,3,0,0,3,43,5,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,68,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,169,        if (getBase().getZone() == DateTimeZone.UTC) {,2,1,0,2,7,1,2,0,1,7,46,4,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,171,            fields.centuryOfEra = new DividedDateTimeField(,2,0,0,0,1,1,0,1,2,5,47,6,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,173,            fields.yearOfCentury = new RemainderDateTimeField(,2,0,0,0,1,1,0,1,2,5,50,6,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,2,0,0,0,1,1,0,1,2,5,54,6,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,178,            fields.centuries = fields.centuryOfEra.getDurationField();,4,0,0,1,2,0,1,0,1,5,58,6,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00256,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,146,        return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,5,0.00256,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,81,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",0,0,0,1,8,1,5,0,1,5,82,3,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,40,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,1,0,0,1,2,3,0,2,3,6,70,2,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,87,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.00256,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,91,        return getWrappedField().getMaximumValue();,0,0,0,1,4,1,2,0,1,5,43,5,0.00256,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,143,        if ((base = getBase()) != null) {,1,1,0,3,7,1,1,0,2,7,33,4,0.00256,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,309,        return iChronology.years();,0,0,0,1,2,1,2,0,0,4,27,5,0.00255,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,122,        return iRangeField;,1,0,0,0,0,1,0,0,0,2,19,4,0.00255,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,95,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.00255,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,51,        return iChronology.months();,0,0,0,1,2,1,2,0,0,4,28,5,0.00255,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,141,        return iUnitField;,1,0,0,0,0,1,0,0,0,2,18,4,0.00255,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,321,            fields.copyFieldsFrom(iBase);,0,0,0,1,2,0,3,0,0,3,29,7,0.00253,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,372,            flags = ,1,0,0,0,0,0,0,0,1,2,7,6,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,691,        return 12;,0,0,0,0,0,1,0,0,0,1,10,2,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,148,"        super(base, param, minDaysInFirstWeek);",3,0,0,0,2,1,0,0,1,4,39,3,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,149,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",1,0,0,1,6,4,0,6,4,6,122,2,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,3,0,0,1,2,0,1,0,2,5,45,4,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,100,"        return getInstance(zone, 4);",0,0,0,0,2,1,2,0,1,4,28,4,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,111,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,115,        synchronized (cCache) {,1,0,0,1,3,1,0,0,0,4,23,4,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,116,            GregorianChronology[] chronos = cCache.get(zone);,1,0,0,1,4,0,3,1,0,5,49,6,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,117,            if (chronos == null) {,1,1,0,1,3,1,0,0,0,5,22,6,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,118,                chronos = new GregorianChronology[7];,1,0,0,0,2,1,0,1,1,5,37,8,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,119,"                cCache.put(zone, chronos);",0,0,0,0,2,0,4,0,0,2,26,9,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,122,                chrono = chronos[minDaysInFirstWeek - 1];,2,1,1,0,2,0,0,0,1,5,41,8,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,126,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,127,            if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,128,                if (zone == DateTimeZone.UTC) {,3,1,0,1,3,1,0,0,0,5,31,8,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",2,0,0,0,2,1,0,1,2,5,65,10,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,135,                chronos[minDaysInFirstWeek - 1] = chrono;,2,1,1,0,2,0,0,0,1,5,41,8,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,137,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,138,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,191,        if (getBase() == null) {,0,1,0,2,5,1,1,0,1,6,24,4,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,192,            super.assemble(fields);,2,0,0,1,2,1,0,0,0,4,23,7,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,194,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,225,        return MAX_YEAR;,1,0,0,0,0,1,0,0,0,2,16,4,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,229,        return MILLIS_PER_YEAR;,1,0,0,0,0,1,0,0,0,2,23,4,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,237,        return MILLIS_PER_MONTH;,1,0,0,0,0,1,0,0,0,2,24,4,0.00253,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,45,public final class GregorianChronology extends BasicGJChronology {,1,0,0,0,1,4,0,1,2,5,66,1,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,75,"        super(base, param, minDaysInFirstWeek);",3,0,0,0,2,1,0,0,1,4,39,3,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,76,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,1,0,0,0,3,4,0,0,3,4,55,2,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,1,0,0,0,3,4,0,0,3,4,55,2,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,1,0,0,0,2,2,0,0,1,4,47,4,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,1,0,0,0,2,2,0,0,1,4,47,4,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,56,        long minSum = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,57,        long maxSum = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,58,        for (int i = 0; i < 11; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],1,1,1,0,2,1,0,0,0,5,41,7,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,61,            minSum += millis;,2,0,0,0,0,0,0,0,1,2,17,6,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,2,1,1,0,2,0,0,0,1,5,48,6,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],1,1,1,0,2,0,0,0,1,5,36,6,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,66,            maxSum += millis;,2,0,0,0,0,0,0,0,1,2,17,6,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,2,1,1,0,2,0,0,0,1,5,48,6,0.00253,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,69,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00253,0,0
defect4j,time,org/joda/time/DurationFieldType,22,141,        return HALFDAYS_TYPE;,1,0,0,0,0,1,0,0,0,2,21,4,0.00252,0,0
defect4j,time,org/joda/time/DurationFieldType,22,169,        return WEEKYEARS_TYPE;,1,0,0,0,0,1,0,0,0,2,22,4,0.00252,0,0
defect4j,time,org/joda/time/DurationFieldType,22,196,        return CENTURIES_TYPE;,1,0,0,0,0,1,0,0,0,2,22,4,0.00252,0,0
defect4j,time,org/joda/time/DurationFieldType,22,205,        return ERAS_TYPE;,1,0,0,0,0,1,0,0,0,2,17,4,0.00252,0,0
defect4j,time,org/joda/time/DurationField,22,30,public abstract class DurationField implements Comparable<DurationField> {,1,0,0,0,1,4,0,2,2,5,74,1,0.00252,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,4,0,0,4,70,5,0.00252,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,70,    private UnsupportedDurationField(DurationFieldType type) {,2,0,0,1,3,1,0,1,1,6,58,2,0.00252,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,71,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.00252,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,49,        if (cCache == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.00252,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",1,0,0,1,2,1,0,3,2,6,69,6,0.00252,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,51,            field = null;,1,0,0,0,0,0,0,0,1,2,13,6,0.00252,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,53,            field = cCache.get(type);,1,0,0,1,2,0,3,0,1,5,25,6,0.00252,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,55,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.00252,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,56,            field = new UnsupportedDurationField(type);,2,0,0,1,2,1,0,1,2,6,43,6,0.00252,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,57,"            cCache.put(type, field);",0,0,0,0,2,0,4,0,0,2,24,7,0.00252,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,59,        return field;,1,0,0,0,0,1,0,0,0,2,13,4,0.00252,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,92,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeField,22,33,public abstract class DateTimeField {,1,0,0,0,1,3,0,0,2,4,37,1,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,444,            super(name);,1,0,0,1,2,1,0,0,1,5,12,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,445,            iOrdinal = ordinal;,2,0,0,0,0,0,0,0,1,2,19,5,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,446,            iUnitType = unitType;,2,0,0,0,0,0,0,0,1,2,21,5,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,447,            iRangeType = rangeType;,2,0,0,0,0,0,0,0,1,2,23,5,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,448,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,452,            return iUnitType;,1,0,0,0,0,1,0,0,0,2,17,5,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,457,            return iRangeType;,1,0,0,0,0,1,0,0,0,2,18,5,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,153,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,154,        iName = name;,2,0,0,0,0,0,0,0,1,2,13,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,155,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,73,    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,80,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,76,    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,88,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,79,    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,91,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,82,    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,92,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,85,    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,81,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,88,    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,88,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,91,    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,90,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,94,    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,89,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,97,    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,96,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,100,    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,85,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,103,    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,93,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,106,    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,88,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,110,    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,91,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,113,    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,92,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,116,    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,97,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,119,    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,93,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,122,    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,88,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,125,    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,90,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,128,    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,91,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,131,    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,90,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,134,    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,93,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,137,    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,90,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,140,    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,93,2,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,164,        return MILLIS_OF_SECOND_TYPE;,1,0,0,0,0,1,0,0,0,2,29,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,173,        return MILLIS_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,182,        return SECOND_OF_MINUTE_TYPE;,1,0,0,0,0,1,0,0,0,2,29,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,191,        return SECOND_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,200,        return MINUTE_OF_HOUR_TYPE;,1,0,0,0,0,1,0,0,0,2,27,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,209,        return MINUTE_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,218,        return HOUR_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,24,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,227,        return CLOCKHOUR_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,29,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,236,        return HOUR_OF_HALFDAY_TYPE;,1,0,0,0,0,1,0,0,0,2,28,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,245,        return CLOCKHOUR_OF_HALFDAY_TYPE;,1,0,0,0,0,1,0,0,0,2,33,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,254,        return HALFDAY_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,27,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,264,        return DAY_OF_WEEK_TYPE;,1,0,0,0,0,1,0,0,0,2,24,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,273,        return DAY_OF_MONTH_TYPE;,1,0,0,0,0,1,0,0,0,2,25,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,282,        return DAY_OF_YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,24,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,291,        return WEEK_OF_WEEKYEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,29,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,300,        return WEEKYEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,21,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,309,        return WEEKYEAR_OF_CENTURY_TYPE;,1,0,0,0,0,1,0,0,0,2,32,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,318,        return MONTH_OF_YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,26,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,327,        return YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,17,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,336,        return YEAR_OF_ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,24,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,345,        return YEAR_OF_CENTURY_TYPE;,1,0,0,0,0,1,0,0,0,2,28,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,354,        return CENTURY_OF_ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,27,4,0.00252,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,363,        return ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,16,4,0.00252,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,2,4,0,1,4,1,2,0,1,7,68,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,99,"    protected AssembledChronology(Chronology base, Object param) {",3,0,0,0,3,1,0,2,1,5,62,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,100,        iBase = base;,2,0,0,0,0,0,0,0,1,2,13,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,101,        iParam = param;,2,0,0,0,0,0,0,0,1,2,15,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,102,        setFields();,0,0,0,1,2,0,1,0,1,4,12,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,156,        return iMillis;,1,0,0,0,0,1,0,0,0,2,15,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,160,        return iMillisOfSecond;,1,0,0,0,0,1,0,0,0,2,23,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,164,        return iMillisOfDay;,1,0,0,0,0,1,0,0,0,2,20,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,168,        return iSeconds;,1,0,0,0,0,1,0,0,0,2,16,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,172,        return iSecondOfMinute;,1,0,0,0,0,1,0,0,0,2,23,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,176,        return iSecondOfDay;,1,0,0,0,0,1,0,0,0,2,20,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,180,        return iMinutes;,1,0,0,0,0,1,0,0,0,2,16,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,184,        return iMinuteOfHour;,1,0,0,0,0,1,0,0,0,2,21,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,188,        return iMinuteOfDay;,1,0,0,0,0,1,0,0,0,2,20,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,192,        return iHours;,1,0,0,0,0,1,0,0,0,2,14,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,196,        return iHourOfDay;,1,0,0,0,0,1,0,0,0,2,18,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,200,        return iClockhourOfDay;,1,0,0,0,0,1,0,0,0,2,23,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,204,        return iHalfdays;,1,0,0,0,0,1,0,0,0,2,17,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,208,        return iHourOfHalfday;,1,0,0,0,0,1,0,0,0,2,22,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,212,        return iClockhourOfHalfday;,1,0,0,0,0,1,0,0,0,2,27,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,216,        return iHalfdayOfDay;,1,0,0,0,0,1,0,0,0,2,21,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,220,        return iDays;,1,0,0,0,0,1,0,0,0,2,13,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,224,        return iDayOfWeek;,1,0,0,0,0,1,0,0,0,2,18,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,228,        return iDayOfMonth;,1,0,0,0,0,1,0,0,0,2,19,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,232,        return iDayOfYear;,1,0,0,0,0,1,0,0,0,2,18,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,236,        return iWeeks;,1,0,0,0,0,1,0,0,0,2,14,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,240,        return iWeekOfWeekyear;,1,0,0,0,0,1,0,0,0,2,23,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,244,        return iWeekyears;,1,0,0,0,0,1,0,0,0,2,18,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,248,        return iWeekyear;,1,0,0,0,0,1,0,0,0,2,17,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,252,        return iWeekyearOfCentury;,1,0,0,0,0,1,0,0,0,2,26,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,256,        return iMonths;,1,0,0,0,0,1,0,0,0,2,15,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,260,        return iMonthOfYear;,1,0,0,0,0,1,0,0,0,2,20,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,264,        return iYears;,1,0,0,0,0,1,0,0,0,2,14,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,268,        return iYear;,1,0,0,0,0,1,0,0,0,2,13,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,272,        return iYearOfEra;,1,0,0,0,0,1,0,0,0,2,18,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,276,        return iYearOfCentury;,1,0,0,0,0,1,0,0,0,2,22,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,280,        return iCenturies;,1,0,0,0,0,1,0,0,0,2,18,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,284,        return iCenturyOfEra;,1,0,0,0,0,1,0,0,0,2,21,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,288,        return iEras;,1,0,0,0,0,1,0,0,0,2,13,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,292,        return iEra;,1,0,0,0,0,1,0,0,0,2,12,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,308,        return iBase;,1,0,0,0,0,1,0,0,0,2,13,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,319,        Fields fields = new Fields();,1,0,0,1,2,1,0,2,1,6,29,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,320,        if (iBase != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,323,        assemble(fields);,0,0,0,1,2,0,2,0,1,4,17,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,6,1,0,1,4,1,0,0,2,6,65,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,6,1,0,1,4,1,0,0,2,6,66,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,6,1,0,1,4,1,0,0,2,6,66,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,6,1,0,1,4,1,0,0,2,6,64,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,6,1,0,1,4,1,0,0,2,6,67,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,332,            iDays      = (f = fields.days)      != null ? f : super.days();,6,1,0,1,4,1,0,0,2,6,63,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,6,1,0,1,4,1,0,0,2,6,64,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,6,1,0,1,4,1,0,0,2,6,68,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,6,1,0,1,4,1,0,0,2,6,65,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,336,            iYears     = (f = fields.years)     != null ? f : super.years();,6,1,0,1,4,1,0,0,2,6,64,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,6,1,0,1,4,1,0,0,2,6,68,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,6,1,0,1,4,1,0,0,2,6,63,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,6,1,0,1,4,1,0,0,2,6,91,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,6,1,0,1,4,1,0,0,2,6,88,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,6,1,0,1,4,1,0,0,2,6,91,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,6,1,0,1,4,1,0,0,2,6,88,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,6,1,0,1,4,1,0,0,2,6,89,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,6,1,0,1,4,1,0,0,2,6,88,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,6,1,0,1,4,1,0,0,2,6,86,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,6,1,0,1,4,1,0,0,2,6,91,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,6,1,0,1,4,1,0,0,2,6,90,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,6,1,0,1,4,1,0,0,2,6,95,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,6,1,0,1,4,1,0,0,2,6,89,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,6,1,0,1,4,1,0,0,2,6,86,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,6,1,0,1,4,1,0,0,2,6,87,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,6,1,0,1,4,1,0,0,2,6,86,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,6,1,0,1,4,1,0,0,2,6,91,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,6,1,0,1,4,1,0,0,2,6,85,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,6,1,0,1,4,1,0,0,2,6,94,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,6,1,0,1,4,1,0,0,2,6,88,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,361,            iYear               = (f = fields.year)               != null ? f : super.year();,6,1,0,1,4,1,0,0,2,6,81,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,6,1,0,1,4,1,0,0,2,6,86,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,6,1,0,1,4,1,0,0,2,6,90,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,6,1,0,1,4,1,0,0,2,6,89,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,365,            iEra                = (f = fields.era)                != null ? f : super.era();,6,1,0,1,4,1,0,0,2,6,80,5,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,369,        if (iBase == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,370,            flags = 0;,1,0,0,0,0,0,0,0,1,2,10,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,385,        iBaseFlags = flags;,2,0,0,0,0,0,0,0,1,2,19,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,386,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,22,37,"        super(chronology, 2);",1,0,0,0,2,1,0,0,1,4,21,3,0.00252,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,22,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());",0,0,0,1,6,1,4,0,1,5,78,3,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,52,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,53,        iMax = iChronology.getMaxMonth();,1,0,0,1,2,0,2,0,1,5,33,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,54,        iLeapMonth = leapMonth;,2,0,0,0,0,0,0,0,1,2,23,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,55,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,55,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.00252,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,56,        iUnitMillis = unitMillis;,2,0,0,0,0,0,0,0,1,2,25,4,0.00252,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,57,        iDurationField = new LinkedDurationField(type.getDurationType());,1,0,0,2,4,1,2,1,2,7,65,4,0.00252,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,137,        return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,4,0.00252,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,50,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00252,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,51,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00252,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,54,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.00252,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,55,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,58,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.00252,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,69,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.00252,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,151,        LinkedDurationField(DurationFieldType type) {,2,0,0,1,3,0,0,1,0,4,45,3,0.00252,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,152,            super(type);,1,0,0,1,2,1,0,0,1,5,12,4,0.00252,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,153,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,47,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00252,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,48,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00252,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,51,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.00252,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,66,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,131,"        super(base, param);",2,0,0,0,2,1,0,0,1,4,19,3,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,126,    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];,1,0,1,0,4,4,0,2,3,6,77,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,133,        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {,2,3,0,1,3,1,0,0,0,5,55,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,138,        iMinDaysInFirstWeek = minDaysInFirstWeek;,2,0,0,0,0,0,0,0,1,2,41,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,139,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,76,        cMillisField = MillisDurationField.INSTANCE;,3,0,0,0,0,0,0,0,1,2,44,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,77,        cSecondsField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,40,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,79,        cMinutesField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,40,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,81,        cHoursField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,38,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,83,        cHalfdaysField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,41,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,85,        cDaysField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,37,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,87,        cWeeksField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,38,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,90,        cMillisOfSecondField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,47,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,93,        cMillisOfDayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,44,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,96,        cSecondOfMinuteField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,47,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,99,        cSecondOfDayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,44,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,102,        cMinuteOfHourField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,45,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,105,        cMinuteOfDayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,44,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,108,        cHourOfDayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,42,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,111,        cHourOfHalfdayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,46,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,114,        cClockhourOfDayField = new ZeroIsMaxDateTimeField,1,0,0,0,0,1,0,1,2,4,49,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,117,        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField,1,0,0,0,0,1,0,1,2,4,53,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,120,        cHalfdayOfDayField = new HalfdayField();,1,0,0,1,2,1,0,1,2,6,40,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,121,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,241,        fields.millis = cMillisField;,3,0,0,0,0,0,0,0,1,2,29,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,242,        fields.seconds = cSecondsField;,3,0,0,0,0,0,0,0,1,2,31,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,243,        fields.minutes = cMinutesField;,3,0,0,0,0,0,0,0,1,2,31,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,244,        fields.hours = cHoursField;,3,0,0,0,0,0,0,0,1,2,27,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,245,        fields.halfdays = cHalfdaysField;,3,0,0,0,0,0,0,0,1,2,33,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,246,        fields.days = cDaysField;,3,0,0,0,0,0,0,0,1,2,25,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,247,        fields.weeks = cWeeksField;,3,0,0,0,0,0,0,0,1,2,27,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,249,        fields.millisOfSecond = cMillisOfSecondField;,3,0,0,0,0,0,0,0,1,2,45,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,250,        fields.millisOfDay = cMillisOfDayField;,3,0,0,0,0,0,0,0,1,2,39,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,251,        fields.secondOfMinute = cSecondOfMinuteField;,3,0,0,0,0,0,0,0,1,2,45,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,252,        fields.secondOfDay = cSecondOfDayField;,3,0,0,0,0,0,0,0,1,2,39,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,253,        fields.minuteOfHour = cMinuteOfHourField;,3,0,0,0,0,0,0,0,1,2,41,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,254,        fields.minuteOfDay = cMinuteOfDayField;,3,0,0,0,0,0,0,0,1,2,39,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,255,        fields.hourOfDay = cHourOfDayField;,3,0,0,0,0,0,0,0,1,2,35,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,256,        fields.hourOfHalfday = cHourOfHalfdayField;,3,0,0,0,0,0,0,0,1,2,43,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,257,        fields.clockhourOfDay = cClockhourOfDayField;,3,0,0,0,0,0,0,0,1,2,45,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,258,        fields.clockhourOfHalfday = cClockhourOfHalfdayField;,3,0,0,0,0,0,0,0,1,2,53,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,259,        fields.halfdayOfDay = cHalfdayOfDayField;,3,0,0,0,0,0,0,0,1,2,41,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,264,        fields.year = new BasicYearDateTimeField(this);,2,0,0,1,2,2,0,1,2,6,47,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,265,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);",4,0,0,0,2,2,0,1,2,5,67,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,268,        DateTimeField field = new OffsetDateTimeField(,1,0,0,0,1,1,0,2,1,5,46,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,270,        fields.centuryOfEra = new DividedDateTimeField(,2,0,0,0,1,1,0,1,2,5,47,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,273,        field = new RemainderDateTimeField(,1,0,0,0,1,1,0,1,2,5,35,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,275,        fields.yearOfCentury = new OffsetDateTimeField(,2,0,0,0,1,1,0,1,2,5,47,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,278,        fields.era = new GJEraDateTimeField(this);,2,0,0,1,2,2,0,1,2,6,42,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,279,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);",4,0,0,0,2,2,0,1,2,5,67,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,280,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);",4,0,0,0,2,2,0,1,2,5,72,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,281,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);",4,0,0,0,2,2,0,1,2,5,70,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,282,        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);,2,0,0,1,2,2,0,1,2,6,58,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,283,        fields.weekyear = new BasicWeekyearDateTimeField(this);,2,0,0,1,2,2,0,1,2,6,55,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,284,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);",4,0,0,0,2,2,0,1,2,5,81,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,286,        field = new RemainderDateTimeField(,1,0,0,0,1,1,0,1,2,5,35,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,288,        fields.weekyearOfCentury = new OffsetDateTimeField(,2,0,0,0,1,1,0,1,2,5,51,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,294,        fields.years = fields.year.getDurationField();,4,0,0,1,2,0,1,0,1,5,46,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,295,        fields.centuries = fields.centuryOfEra.getDurationField();,4,0,0,1,2,0,1,0,1,5,58,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,296,        fields.months = fields.monthOfYear.getDurationField();,4,0,0,1,2,0,1,0,1,5,54,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,297,        fields.weekyears = fields.weekyear.getDurationField();,4,0,0,1,2,0,1,0,1,5,54,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,298,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,50,abstract class BasicChronology extends AssembledChronology {,1,0,0,0,1,3,0,1,1,5,60,1,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,750,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);",2,0,0,1,4,1,2,0,1,6,68,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,751,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,57,"        super(type, unit);",2,0,0,0,2,1,0,0,1,4,18,3,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,59,        if (!range.isPrecise()) {,0,0,0,2,5,1,2,0,1,5,25,4,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,63,        long rangeMillis = range.getUnitMillis();,1,0,0,1,2,1,2,0,0,5,41,5,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,64,        iRange = (int)(rangeMillis / getUnitMillis());,2,1,0,2,6,1,1,0,2,7,46,4,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,65,        if (iRange < 2) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,69,        iRangeField = range;,2,0,0,0,0,0,0,0,1,2,20,4,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,48,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,50,        if (!unit.isPrecise()) {,0,0,0,2,5,1,2,0,1,5,24,4,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,54,        iUnitMillis = unit.getUnitMillis();,1,0,0,1,2,0,2,0,1,5,35,4,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,55,        if (iUnitMillis < 1) {,1,1,0,1,3,1,0,0,0,5,22,4,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,59,        iUnitField = unit;,2,0,0,0,0,0,0,0,1,2,18,4,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,150,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,154,        return iUnitMillis;,1,0,0,0,0,1,0,0,0,2,19,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());",0,0,0,1,6,1,4,0,1,5,74,3,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,45,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,22,45,"        super(DateTimeFieldType.dayOfWeek(), days);",1,0,0,1,4,1,2,0,1,6,43,3,0.00252,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,22,46,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,22,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,40,"        super(yearField, DateTimeFieldType.yearOfEra());",1,0,0,1,4,1,2,0,1,6,48,3,0.00252,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,41,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,93,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,97,        return getWrappedField().getMaximumValue();,0,0,0,1,4,1,2,0,1,5,43,5,0.00252,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,54,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.00252,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,55,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.00252,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,58,        if (!field.isSupported()) {,0,0,0,2,5,1,2,0,1,5,27,4,0.00252,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,61,        iField = field;,2,0,0,0,0,0,0,0,1,2,15,4,0.00252,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,70,        return iField;,1,0,0,0,0,1,0,0,0,2,14,4,0.00252,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,86,        return iField.getDurationField();,0,0,0,1,2,1,2,0,0,4,33,5,0.00252,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,56,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.00252,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,58,        if (divisor < 2) {,1,1,0,1,3,1,0,0,0,5,18,4,0.00252,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,62,        DurationField unitField = field.getDurationField();,1,0,0,1,2,0,2,1,0,5,51,4,0.00252,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,63,        if (unitField == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.00252,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,66,            iDurationField = new ScaledDurationField(,1,0,0,0,1,1,0,1,2,5,41,6,0.00252,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,70,        iDivisor = divisor;,2,0,0,0,0,0,0,0,1,2,19,4,0.00252,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,72,        int i = field.getMinimumValue();,1,0,0,1,2,1,2,0,0,5,32,5,0.00252,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,73,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,6,5,0,2,6,1,0,0,0,5,59,5,0.00252,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,75,        int j = field.getMaximumValue();,1,0,0,1,2,1,2,0,0,5,32,5,0.00252,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,76,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,6,5,0,2,6,1,0,0,0,5,59,5,0.00252,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,78,        iMin = min;,2,0,0,0,0,0,0,0,1,2,11,4,0.00252,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,79,        iMax = max;,2,0,0,0,0,0,0,0,1,2,11,4,0.00252,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,80,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,182,        return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,4,0.00252,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,52,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.00252,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,54,        if (divisor < 2) {,1,1,0,1,3,1,0,0,0,5,18,4,0.00252,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,58,        DurationField rangeField = field.getDurationField();,1,0,0,1,2,0,2,1,0,5,52,4,0.00252,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,59,        if (rangeField == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.00252,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,62,            iRangeField = new ScaledDurationField(,1,0,0,0,1,1,0,1,2,5,38,6,0.00252,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,66,        iDivisor = divisor;,2,0,0,0,0,0,0,0,1,2,19,4,0.00252,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,67,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,76,"        this(dividedField, dividedField.getType());",1,0,0,1,4,1,2,0,0,5,43,4,0.00252,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,77,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,87,"        super(dividedField.getWrappedField(), type);",1,0,0,1,4,1,2,0,1,6,44,3,0.00252,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,88,        iDivisor = dividedField.iDivisor;,3,0,0,0,0,0,0,0,1,2,33,4,0.00252,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,89,        iRangeField = dividedField.iDurationField;,3,0,0,0,0,0,0,0,1,2,42,4,0.00252,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,90,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,148,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.00252,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,158,        return iDivisor - 1;,1,1,0,0,0,1,0,0,0,3,20,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,436,        Fields() {,1,0,0,1,3,0,0,0,0,3,10,3,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,437,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,445,                if (isSupported(f = chrono.millis())) {,1,0,0,3,7,1,3,0,2,6,39,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,446,                    millis = f;,2,0,0,0,0,0,0,0,1,2,11,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,448,                if (isSupported(f = chrono.seconds())) {,1,0,0,3,7,1,3,0,2,6,40,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,449,                    seconds = f;,2,0,0,0,0,0,0,0,1,2,12,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,451,                if (isSupported(f = chrono.minutes())) {,1,0,0,3,7,1,3,0,2,6,40,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,452,                    minutes = f;,2,0,0,0,0,0,0,0,1,2,12,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,454,                if (isSupported(f = chrono.hours())) {,1,0,0,3,7,1,3,0,2,6,38,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,455,                    hours = f;,2,0,0,0,0,0,0,0,1,2,10,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,457,                if (isSupported(f = chrono.halfdays())) {,1,0,0,3,7,1,3,0,2,6,41,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,458,                    halfdays = f;,2,0,0,0,0,0,0,0,1,2,13,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,460,                if (isSupported(f = chrono.days())) {,1,0,0,3,7,1,3,0,2,6,37,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,461,                    days = f;,2,0,0,0,0,0,0,0,1,2,9,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,463,                if (isSupported(f = chrono.weeks())) {,1,0,0,3,7,1,3,0,2,6,38,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,464,                    weeks = f;,2,0,0,0,0,0,0,0,1,2,10,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,466,                if (isSupported(f = chrono.weekyears())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,467,                    weekyears = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,469,                if (isSupported(f = chrono.months())) {,1,0,0,3,7,1,3,0,2,6,39,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,470,                    months = f;,2,0,0,0,0,0,0,0,1,2,11,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,472,                if (isSupported(f = chrono.years())) {,1,0,0,3,7,1,3,0,2,6,38,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,473,                    years = f;,2,0,0,0,0,0,0,0,1,2,10,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,475,                if (isSupported(f = chrono.centuries())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,476,                    centuries = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,478,                if (isSupported(f = chrono.eras())) {,1,0,0,3,7,1,3,0,2,6,37,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,485,                if (isSupported(f = chrono.millisOfSecond())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,486,                    millisOfSecond = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,488,                if (isSupported(f = chrono.millisOfDay())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,489,                    millisOfDay = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,491,                if (isSupported(f = chrono.secondOfMinute())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,492,                    secondOfMinute = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,494,                if (isSupported(f = chrono.secondOfDay())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,495,                    secondOfDay = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,497,                if (isSupported(f = chrono.minuteOfHour())) {,1,0,0,3,7,1,3,0,2,6,45,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,498,                    minuteOfHour = f;,2,0,0,0,0,0,0,0,1,2,17,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,500,                if (isSupported(f = chrono.minuteOfDay())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,501,                    minuteOfDay = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,503,                if (isSupported(f = chrono.hourOfDay())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,504,                    hourOfDay = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,506,                if (isSupported(f = chrono.clockhourOfDay())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,507,                    clockhourOfDay = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,509,                if (isSupported(f = chrono.hourOfHalfday())) {,1,0,0,3,7,1,3,0,2,6,46,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,510,                    hourOfHalfday = f;,2,0,0,0,0,0,0,0,1,2,18,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,1,0,0,3,7,1,3,0,2,6,51,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,513,                    clockhourOfHalfday = f;,2,0,0,0,0,0,0,0,1,2,23,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,515,                if (isSupported(f = chrono.halfdayOfDay())) {,1,0,0,3,7,1,3,0,2,6,45,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,516,                    halfdayOfDay = f;,2,0,0,0,0,0,0,0,1,2,17,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,518,                if (isSupported(f = chrono.dayOfWeek())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,519,                    dayOfWeek = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,521,                if (isSupported(f = chrono.dayOfMonth())) {,1,0,0,3,7,1,3,0,2,6,43,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,522,                    dayOfMonth = f;,2,0,0,0,0,0,0,0,1,2,15,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,524,                if (isSupported(f = chrono.dayOfYear())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,525,                    dayOfYear = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,528,                    weekOfWeekyear = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,530,                if (isSupported(f = chrono.weekyear())) {,1,0,0,3,7,1,3,0,2,6,41,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,531,                    weekyear = f;,2,0,0,0,0,0,0,0,1,2,13,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,1,0,0,3,7,1,3,0,2,6,50,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,534,                    weekyearOfCentury = f;,2,0,0,0,0,0,0,0,1,2,22,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,536,                if (isSupported(f = chrono.monthOfYear())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,537,                    monthOfYear = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,539,                if (isSupported(f = chrono.year())) {,1,0,0,3,7,1,3,0,2,6,37,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,540,                    year = f;,2,0,0,0,0,0,0,0,1,2,9,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,542,                if (isSupported(f = chrono.yearOfEra())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,543,                    yearOfEra = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,545,                if (isSupported(f = chrono.yearOfCentury())) {,1,0,0,3,7,1,3,0,2,6,46,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,546,                    yearOfCentury = f;,2,0,0,0,0,0,0,0,1,2,18,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,548,                if (isSupported(f = chrono.centuryOfEra())) {,1,0,0,3,7,1,3,0,2,6,45,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,549,                    centuryOfEra = f;,2,0,0,0,0,0,0,0,1,2,17,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,551,                if (isSupported(f = chrono.era())) {,1,0,0,3,7,1,3,0,2,6,36,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,552,                    era = f;,2,0,0,0,0,0,0,0,1,2,8,8,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,555,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,558,            return field == null ? false : field.isSupported();,1,1,0,1,2,1,2,0,1,7,51,6,0.00252,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,562,            return field == null ? false : field.isSupported();,1,1,0,1,2,1,2,0,1,7,51,6,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,43,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,44,        iUnitMillis = unitMillis;,2,0,0,0,0,0,0,0,1,2,25,4,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,54,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.00252,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,63,        return iUnitMillis;,1,0,0,0,0,1,0,0,0,2,19,4,0.00252,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,45,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.00252,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,46,        if (field.getMinimumValue() != 0) {,0,1,0,2,5,1,2,0,0,5,35,4,0.00252,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());",0,0,0,1,6,1,4,0,1,5,70,3,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,46,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,119,        return iChronology.getMaxYear();,0,0,0,1,2,1,2,0,0,4,32,5,0.00252,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",7,1,0,2,6,1,2,0,0,6,100,4,0.00252,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",7,0,0,0,2,1,0,0,0,3,64,4,0.00252,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,59,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,73,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.00252,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,75,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.00252,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,79,        iOffset = offset;,2,0,0,0,0,0,0,0,1,2,17,4,0.00252,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,81,        if (minValue < (field.getMinimumValue() + offset)) {,2,2,0,3,7,1,2,0,0,6,52,4,0.00252,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,82,            iMin = field.getMinimumValue() + offset;,2,1,0,1,2,0,2,0,1,6,40,6,0.00252,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,86,        if (maxValue > (field.getMaximumValue() + offset)) {,2,2,0,3,7,1,2,0,0,6,52,4,0.00252,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,87,            iMax = field.getMaximumValue() + offset;,2,1,0,1,2,0,2,0,1,6,40,6,0.00252,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,91,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,174,        return iMin;,1,0,0,0,0,1,0,0,0,2,12,4,0.00252,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,183,        return iMax;,1,0,0,0,0,1,0,0,0,2,12,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,46,        super(DateTimeFieldType.era());,0,0,0,2,4,1,2,0,1,5,31,3,0.00252,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,47,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,41,"        super(DateTimeFieldType.dayOfMonth(), days);",1,0,0,1,4,1,2,0,1,6,44,3,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,42,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,43,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,41,"        super(DateTimeFieldType.dayOfYear(), days);",1,0,0,1,4,1,2,0,1,6,43,3,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,42,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,43,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);",1,0,0,1,4,1,2,0,1,6,49,3,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,43,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00252,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,47,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.00252,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,48,        if (scalar == 0 || scalar == 1) {,2,3,0,1,3,1,0,0,0,5,33,4,0.00252,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,51,        iScalar = scalar;,2,0,0,0,0,0,0,0,1,2,17,4,0.00252,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,22,52,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.00252,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,22,53,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.00252,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,22,56,        if (!field.isSupported()) {,0,0,0,2,5,1,2,0,1,5,27,4,0.00252,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,22,59,        iField = field;,2,0,0,0,0,0,0,0,1,2,15,4,0.00252,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,22,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,44,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00252,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,38,    public static final DurationField INSTANCE = new MillisDurationField();,1,0,0,1,2,4,0,2,4,6,71,2,0.00252,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,62,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.00252,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,71,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.00252,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,80,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.00252,0,0
defect4j,time,org/joda/time/Chronology,22,63,public abstract class Chronology {,1,0,0,0,1,3,0,0,2,4,34,1,0.00252,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,54,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00252,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,55,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00252,0,0
defect4j,time,org/joda/time/DurationFieldType,22,105,        return MILLIS_TYPE;,1,0,0,0,0,1,0,0,0,2,19,4,0.00246,0,0
defect4j,time,org/joda/time/DurationFieldType,22,178,        return MONTHS_TYPE;,1,0,0,0,0,1,0,0,0,2,19,4,0.00244,0,0
defect4j,time,org/joda/time/DurationFieldType,22,187,        return YEARS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,4,0.00244,0,0
defect4j,time,org/joda/time/DurationFieldType,22,160,        return WEEKS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,4,0.00242,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,35,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,1,0,0,1,2,4,0,2,4,6,94,2,0.00242,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,37,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,0,0,0,3,0,1,3,4,80,2,0.00242,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,393,    static class SystemMillisProvider implements MillisProvider {,1,0,0,0,1,3,0,1,1,5,61,2,0.00242,0,0
defect4j,time,org/joda/time/DurationFieldType,22,114,        return SECONDS_TYPE;,1,0,0,0,0,1,0,0,0,2,20,4,0.00242,0,0
defect4j,time,org/joda/time/DurationFieldType,22,123,        return MINUTES_TYPE;,1,0,0,0,0,1,0,0,0,2,20,4,0.00242,0,0
defect4j,time,org/joda/time/DurationFieldType,22,132,        return HOURS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,4,0.00242,0,0
defect4j,time,org/joda/time/DurationFieldType,22,151,        return DAYS_TYPE;,1,0,0,0,0,1,0,0,0,2,17,4,0.00242,0,0
defect4j,time,org/joda/time/DurationFieldType,22,259,            super(name);,1,0,0,1,2,1,0,0,1,5,12,4,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,260,            iOrdinal = ordinal;,2,0,0,0,0,0,0,0,1,2,19,5,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,261,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,94,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,95,        iName = name;,2,0,0,0,0,0,0,0,1,2,13,4,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,96,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);",2,0,0,0,2,3,0,2,4,5,87,2,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);",2,0,0,0,2,3,0,2,4,5,102,2,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);",2,0,0,0,2,3,0,2,4,5,102,2,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);",2,0,0,0,2,3,0,2,4,5,90,2,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);",2,0,0,0,2,3,0,2,4,5,93,2,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);",2,0,0,0,2,3,0,2,4,5,90,2,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);",2,0,0,0,2,3,0,2,4,5,87,2,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);",2,0,0,0,2,3,0,2,4,5,99,2,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);",2,0,0,0,2,3,0,2,4,5,90,2,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);",2,0,0,0,2,3,0,2,4,5,96,2,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);",2,0,0,0,2,3,0,2,4,5,96,2,0.00226,0,0
defect4j,time,org/joda/time/DurationFieldType,22,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);",2,0,0,0,2,3,0,2,4,5,93,2,0.00226,0,0
defect4j,time,org/joda/time/DateTimeZone,22,212,            return zone;,1,0,0,0,0,1,0,0,0,2,12,6,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,706,        return iID;,1,0,0,0,0,1,0,0,0,2,11,4,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1500,            super(id);,1,0,0,1,2,1,0,0,1,5,10,4,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1501,            iTransitions = transitions;,2,0,0,0,0,0,0,0,1,2,27,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1502,            iWallOffsets = wallOffsets;,2,0,0,0,0,0,0,0,1,2,27,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1503,            iStandardOffsets = standardOffsets;,2,0,0,0,0,0,0,0,1,2,35,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1504,            iNameKeys = nameKeys;,2,0,0,0,0,0,0,0,1,2,21,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1505,            iTailZone = tailZone;,2,0,0,0,0,0,0,0,1,2,21,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1506,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1341,            int poolSize = in.readUnsignedShort();,1,0,0,1,2,1,2,0,0,5,38,6,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1342,            String[] pool = new String[poolSize];,1,0,1,0,4,1,0,2,0,5,37,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1343,            for (int i=0; i<poolSize; i++) {,4,1,0,1,3,2,0,0,1,6,32,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1344,                pool[i] = in.readUTF();,0,0,1,1,4,0,2,0,1,5,23,7,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1347,            int size = in.readInt();,1,0,0,1,2,1,2,0,0,5,24,6,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1348,            long[] transitions = new long[size];,1,0,1,0,4,3,0,0,0,4,36,6,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1349,            int[] wallOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,34,6,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1350,            int[] standardOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,38,6,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1351,            String[] nameKeys = new String[size];,1,0,1,0,4,1,0,2,0,5,37,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1353,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1354,                transitions[i] = readMillis(in);,0,0,1,1,4,0,2,0,2,5,32,7,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1355,                wallOffsets[i] = (int)readMillis(in);,0,0,1,1,6,1,2,0,2,6,37,7,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1356,                standardOffsets[i] = (int)readMillis(in);,0,0,1,1,6,1,2,0,2,6,41,7,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1359,                    if (poolSize < 256) {,1,1,0,1,3,1,0,0,0,5,21,9,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1360,                        index = in.readUnsignedByte();,1,0,0,1,2,0,2,0,1,5,30,11,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1364,                    nameKeys[i] = pool[index];,0,0,1,0,4,0,0,0,1,3,26,9,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1367,                },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1370,            DSTZone tailZone = null;,1,0,0,0,0,0,0,1,0,2,24,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1371,            if (in.readBoolean()) {,0,0,0,2,5,1,2,0,0,4,23,6,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1372,"                tailZone = DSTZone.readFrom(in, id);",1,0,0,0,2,0,4,0,1,4,36,7,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1375,            return new PrecalculatedZone,0,0,0,0,0,2,0,1,1,3,28,5,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,147,            return loadZoneData(id);,0,0,0,1,2,1,2,0,1,5,24,6,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,224,        InputStream in = null;,1,0,0,0,0,0,0,1,0,2,22,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,226,            in = openResource(id);,1,0,0,1,2,0,2,0,2,5,22,6,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",1,0,0,0,2,0,4,1,0,4,55,6,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",1,0,0,1,4,1,3,2,1,7,58,7,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,229,            return tz;,1,0,0,0,0,1,0,0,0,2,10,6,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,236,                if (in != null) {,1,1,0,1,3,1,0,0,0,5,17,8,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,237,                    in.close();,0,0,0,1,2,0,2,0,0,3,11,11,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,240,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,504,        {,0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,3,5,0,1,3,1,0,0,3,6,48,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,509,            iMode = mode;,2,0,0,0,0,0,0,0,1,2,13,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,510,            iMonthOfYear = monthOfYear;,2,0,0,0,0,0,0,0,1,2,27,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,511,            iDayOfMonth = dayOfMonth;,2,0,0,0,0,0,0,0,1,2,25,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,512,            iDayOfWeek = dayOfWeek;,2,0,0,0,0,0,0,0,1,2,23,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,513,            iAdvance = advanceDayOfWeek;,2,0,0,0,0,0,0,0,1,2,28,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,514,            iMillisOfDay = millisOfDay;,2,0,0,0,0,0,0,0,1,2,27,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,515,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,482,"            return new OfYear((char)in.readUnsignedByte(),",0,0,0,1,5,3,2,1,1,6,46,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1176,            super(id);,1,0,0,1,2,1,0,0,1,5,10,4,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1177,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1178,            iStartRecurrence = startRecurrence;,2,0,0,0,0,0,0,0,1,2,35,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1179,            iEndRecurrence = endRecurrence;,2,0,0,0,0,0,0,0,1,2,31,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1180,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1166,"            return new DSTZone(id, (int)readMillis(in), ",1,0,0,1,5,3,2,1,2,7,43,5,0.00221,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,87,        super(zone.getID());,0,0,0,2,4,1,2,0,1,5,20,3,0.00221,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,88,        iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,4,0.00221,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,89,        iInfoCache = new Info[cInfoCacheMask + 1];,2,1,0,0,2,1,0,1,1,6,42,4,0.00221,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,90,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",1,0,0,1,2,0,2,0,2,5,67,6,0.00221,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,42,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,45,        if (i == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.00221,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,48,            cacheSize = 512; // (1 << 9),1,0,0,1,2,0,0,0,1,4,28,6,0.00221,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,61,        cInfoCacheMask = cacheSize - 1;,2,1,0,0,0,0,0,0,1,3,31,4,0.00221,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,68,        if (zone instanceof CachedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,41,5,0.00221,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,71,        return new CachedDateTimeZone(zone);,1,0,0,1,2,2,0,1,1,6,36,4,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,95,        if (in instanceof DataInput) {,1,0,0,1,3,2,0,1,0,5,30,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,98,"            return readFrom((DataInput)new DataInputStream(in), id);",1,0,0,1,6,2,2,2,2,7,56,6,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,110,        switch (in.readUnsignedByte()) {,0,0,0,2,5,1,2,0,0,4,32,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0,0,0,0,4,1,6,0,0,3,70,6,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,183,        int v = in.readUnsignedByte();,1,0,0,1,2,1,2,0,0,5,30,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,184,        switch (v >> 6) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,187,            v = (v << (32 - 6)) >> (32 - 6);,2,4,0,2,6,0,0,0,1,5,32,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,188,            return v * (30 * 60000L);,1,2,0,1,2,1,0,0,0,5,25,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,192,            v = (v << (32 - 6)) >> (32 - 30);,2,4,0,2,6,0,0,0,1,5,33,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,193,            v |= (in.readUnsignedByte()) << 16;,1,1,0,2,4,0,2,0,1,6,35,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,194,            v |= (in.readUnsignedByte()) << 8;,1,1,0,2,4,0,2,0,1,6,34,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,195,            v |= (in.readUnsignedByte());,1,0,0,2,4,0,2,0,1,5,29,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,196,            return v * 60000L;,1,1,0,0,0,1,0,0,0,3,18,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,2,4,0,3,10,2,0,0,0,5,46,6,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,201,            w |= (in.readUnsignedByte()) << 24;,1,1,0,2,4,0,2,0,1,6,35,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,202,            w |= (in.readUnsignedByte()) << 16;,1,1,0,2,4,0,2,0,1,6,35,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,203,            w |= (in.readUnsignedByte()) << 8;,1,1,0,2,4,0,2,0,1,6,34,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,204,            w |= (in.readUnsignedByte());,1,0,0,2,4,0,2,0,1,5,29,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,205,            return w * 1000L;,1,1,0,0,0,1,0,0,0,3,17,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,209,            return in.readLong();,0,0,0,1,2,1,2,0,0,4,21,6,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",4,0,0,0,3,1,0,2,0,4,59,3,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,748,            iOfYear = ofYear;,2,0,0,0,0,0,0,0,1,2,17,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,749,            iNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,19,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,750,            iSaveMillis = saveMillis;,2,0,0,0,0,0,0,0,1,2,25,5,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,751,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0,0,0,1,10,3,7,1,2,6,78,5,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,689,    protected DateTimeZone(String id) {,2,0,0,1,3,1,0,1,1,6,35,2,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,690,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,693,        iID = id;,2,0,0,0,0,0,0,0,1,2,9,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,694,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,95,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",1,0,0,0,2,4,0,2,6,5,81,2,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,115,        setProvider0(null);,0,0,0,1,2,0,1,0,1,4,19,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,116,        setNameProvider0(null);,0,0,0,1,2,0,1,0,1,4,23,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,117,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,204,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,207,"        if (id.equals(""UTC"")) {",0,0,0,2,5,1,2,0,1,5,23,5,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,210,        DateTimeZone zone = cProvider.getZone(id);,1,0,0,1,2,0,3,1,0,5,42,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,211,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,415,        if (provider == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,416,            provider = getDefaultProvider();,1,0,0,1,2,0,1,0,2,5,32,6,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,418,        Set<String> ids = provider.getAvailableIDs();,1,0,0,1,2,0,2,2,0,5,45,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,419,        if (ids == null || ids.size() == 0) {,1,3,0,2,5,1,2,0,0,6,37,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,423,"        if (!ids.contains(""UTC"")) {",0,0,0,2,5,1,2,0,2,5,27,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,426,"        if (!UTC.equals(provider.getZone(""UTC""))) {",0,0,0,3,7,1,4,0,2,5,43,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,429,        cProvider = provider;,2,0,0,0,0,0,0,0,1,2,21,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,430,        cAvailableIDs = ids;,2,0,0,0,0,0,0,0,1,2,20,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,431,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,443,        Provider provider = null;,1,0,0,0,0,0,0,1,0,2,25,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,446,            String providerClass =,1,0,0,0,0,0,0,1,0,2,22,6,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,448,            if (providerClass != null) {,1,1,0,1,3,1,0,0,0,5,28,6,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,458,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,460,        if (provider == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,462,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");",1,0,0,1,2,1,0,1,3,6,57,8,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,466,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,469,        if (provider == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,473,        return provider;,1,0,0,0,0,1,0,0,0,2,16,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,514,        if (nameProvider == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,515,            nameProvider = getDefaultNameProvider();,1,0,0,1,2,0,1,0,2,5,40,6,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,517,        cNameProvider = nameProvider;,2,0,0,0,0,0,0,0,1,2,29,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,518,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,529,        NameProvider nameProvider = null;,1,0,0,0,0,0,0,1,0,2,33,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,531,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");",1,0,0,1,2,0,2,1,1,6,85,6,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,532,            if (providerClass != null) {,1,1,0,1,3,1,0,0,0,5,28,6,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,542,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,544,        if (nameProvider == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,545,            nameProvider = new DefaultNameProvider();,1,0,0,1,2,1,0,1,2,6,41,6,0.00221,0,0
defect4j,time,org/joda/time/DateTimeZone,22,548,        return nameProvider;,1,0,0,0,0,1,0,0,0,2,20,4,0.00221,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,38,        super(id);,1,0,0,1,2,1,0,0,1,5,10,3,0.00221,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,39,        iNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,19,4,0.00221,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,40,        iWallOffset = wallOffset;,2,0,0,0,0,0,0,0,1,2,25,4,0.00221,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,41,        iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,4,0.00221,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,88,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.00221,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,89,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,82,"        this(resourcePath, null, false);",1,0,0,0,2,1,0,0,1,4,32,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,83,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,106,    {,0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,107,        if (resourcePath == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,110,"        if (!resourcePath.endsWith(""/"")) {",0,0,0,2,5,1,2,0,2,5,34,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,111,            resourcePath += '/';,1,0,0,0,0,0,0,0,2,2,20,6,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,114,        iFileDir = null;,1,0,0,0,0,0,0,0,1,2,16,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,115,        iResourcePath = resourcePath;,2,0,0,0,0,0,0,0,1,2,29,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,117,        if (loader == null && !favorSystemLoader) {,2,2,0,1,3,1,0,0,1,6,43,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,118,            loader = getClass().getClassLoader();,1,0,0,1,4,0,2,0,2,5,37,6,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,121,        iLoader = loader;,2,0,0,0,0,0,0,0,1,2,17,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",1,0,0,2,4,0,2,0,4,5,60,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,124,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,136,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,140,        Object obj = iZoneInfoMap.get(id);,1,0,0,1,2,0,3,1,0,5,34,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,141,        if (obj == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,145,        if (id.equals(obj)) {,0,0,0,2,5,1,3,0,0,4,21,5,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,150,        if (obj instanceof SoftReference<?>) {,1,0,0,1,3,2,0,1,0,5,38,5,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,152,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,2,0,0,1,2,0,0,4,0,4,68,6,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,153,            DateTimeZone tz = ref.get();,1,0,0,1,2,0,2,1,0,5,28,6,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,154,            if (tz != null) {,1,1,0,1,3,1,0,0,0,5,17,6,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,155,                return tz;,1,0,0,0,0,1,0,0,0,2,10,8,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,174,        return new TreeSet<String>(iZoneInfoMap.keySet());,0,0,0,2,4,2,2,2,1,6,50,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,196,        if (iFileDir != null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,199,            String path = iResourcePath.concat(name);,1,0,0,1,2,0,3,1,0,5,41,6,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,200,            if (iLoader != null) {,1,1,0,1,3,1,0,0,0,5,22,6,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,201,                in = iLoader.getResourceAsStream(path);,1,0,0,1,2,0,3,0,1,5,39,8,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,205,            if (in == null) {,1,1,0,1,3,1,0,0,0,5,17,6,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,214,        return in;,1,0,0,0,0,1,0,0,0,2,10,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",1,0,0,1,2,1,0,6,1,6,66,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,253,        DataInputStream din = new DataInputStream(in);,2,0,0,1,2,1,0,2,1,6,46,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,255,"            readZoneInfoMap(din, map);",0,0,0,0,2,0,3,0,1,3,26,6,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,258,                din.close();,0,0,0,1,2,0,2,0,0,3,12,9,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,260,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",2,0,0,1,4,1,2,2,2,7,66,5,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,263,        return map;,1,0,0,0,0,1,0,0,0,2,11,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,274,        int size = din.readUnsignedShort();,1,0,0,1,2,1,2,0,0,5,35,5,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,275,        String[] pool = new String[size];,1,0,1,0,4,1,0,2,0,5,33,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,276,        for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,277,            pool[i] = din.readUTF().intern();,0,0,1,1,6,0,3,0,1,5,33,6,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,281,        size = din.readUnsignedShort();,1,0,0,1,2,0,2,0,1,5,31,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,282,        for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,4,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0,0,1,1,10,0,6,0,0,4,72,9,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,287,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,289,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,39,    public DefaultNameProvider() {,1,0,0,1,3,1,0,0,1,5,30,2,0.00221,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",1,0,0,1,2,1,1,7,2,7,89,2,0.00221,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,40,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00221,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,87,        return new HashMap(7);,0,0,0,1,2,2,0,1,1,5,22,4,0.00221,0,0
defect4j,time,org/joda/time/DurationFieldType,22,268,                    return chronology.eras();,0,0,0,1,2,1,2,0,0,4,25,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,270,                    return chronology.centuries();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,272,                    return chronology.weekyears();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,282,                    return chronology.halfdays();,0,0,0,1,2,1,2,0,0,4,29,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,293,                    throw new InternalError();,0,0,0,1,2,2,0,1,1,5,26,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,303,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,305,                    return ERAS_TYPE;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,307,                    return CENTURIES_TYPE;,1,0,0,0,0,1,0,0,0,2,22,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,309,                    return WEEKYEARS_TYPE;,1,0,0,0,0,1,0,0,0,2,22,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,311,                    return YEARS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,313,                    return MONTHS_TYPE;,1,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,315,                    return WEEKS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,317,                    return DAYS_TYPE;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,319,                    return HALFDAYS_TYPE;,1,0,0,0,0,1,0,0,0,2,21,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,321,                    return HOURS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,323,                    return MINUTES_TYPE;,1,0,0,0,0,1,0,0,0,2,20,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,325,                    return SECONDS_TYPE;,1,0,0,0,0,1,0,0,0,2,20,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,327,                    return MILLIS_TYPE;,1,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,330,                    return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,216,        return iName;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,234,        return getField(chronology).isSupported();,0,0,0,1,4,1,3,0,1,5,42,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,22,243,        return getName();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,22,209,        if (value == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,22,210,"            return subtract(instant, (long) value);",1,0,0,1,4,2,2,0,1,6,39,6,0.0,0,0
defect4j,time,org/joda/time/DurationField,22,212,"        return add(instant, -value);",1,0,0,0,2,1,2,0,2,5,28,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,22,224,        if (value == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,22,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/DurationField,22,227,"        return add(instant, -value);",1,0,0,0,2,1,2,0,2,5,28,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,438,        OffsetMillisProvider(long offsetMillis) {,2,0,0,1,3,1,0,0,0,4,41,3,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,439,            iMillis = offsetMillis;,2,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,440,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,447,            return System.currentTimeMillis() + iMillis;,1,1,0,1,2,1,2,0,0,6,44,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,43,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,56,        return cMillisProvider.getMillis();,0,0,0,1,2,1,2,0,0,4,35,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,97,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,98,        if (offsetMillis == 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,99,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,0,0,0,0,0,0,1,2,41,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,101,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,2,0,0,1,2,1,0,1,2,6,57,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,116,        if (millisProvider == null) {,1,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,117,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0,0,0,1,2,2,0,1,2,5,74,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,119,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,120,        cMillisProvider = millisProvider;,2,0,0,0,0,0,0,0,1,2,33,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,121,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,131,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0,0,0,2,4,1,2,1,2,6,70,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,146,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,147,            return DateTimeUtils.currentTimeMillis();,0,0,0,1,2,1,2,0,0,4,41,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,149,        return instant.getMillis();,0,0,0,1,2,1,2,0,0,4,27,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,164,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,165,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,167,        Chronology chrono = instant.getChronology();,1,0,0,1,2,0,2,1,0,5,44,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,168,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,169,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,171,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,187,        Chronology chrono = null;,1,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,188,        if (start != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,189,            chrono = start.getChronology();,1,0,0,1,2,0,2,0,1,5,31,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,190,        } else if (end != null) {,1,1,0,1,4,2,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,191,            chrono = end.getChronology();,1,0,0,1,2,0,2,0,1,5,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,193,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,194,            chrono = ISOChronology.getInstance();,1,0,0,1,2,0,2,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,196,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,211,        if (interval == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,212,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,214,        Chronology chrono = interval.getChronology();,1,0,0,1,2,0,2,1,0,5,45,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,215,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,216,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,218,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,234,        if (interval == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,235,            long now = DateTimeUtils.currentTimeMillis();,1,0,0,1,2,1,2,0,0,5,45,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,236,"            interval = new Interval(now, now);",3,0,0,0,2,1,0,1,2,5,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,238,        return interval;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,269,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,270,            return DateTimeZone.getDefault();,0,0,0,1,2,1,2,0,0,4,33,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,272,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,289,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,303,        if (duration == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,304,            return 0L;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,306,        return duration.getMillis();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,334,        if (partial == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,335,"            throw new IllegalArgumentException(""Partial must not be null"");",0,0,0,1,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,337,        DurationFieldType lastType = null;,1,0,0,0,0,0,0,1,0,2,34,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,338,        for (int i = 0; i < partial.size(); i++) {,3,1,0,2,5,2,2,0,1,7,42,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,339,            DateTimeField loopField = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,46,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,340,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,341,                if (loopField.getRangeDurationField().getType() != lastType) {,1,1,0,2,7,1,3,0,0,6,62,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,342,                    return false;,0,0,0,0,0,1,0,0,1,2,13,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,345,            lastType = loopField.getDurationField().getType();,1,0,0,1,4,0,3,0,1,5,50,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,347,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,365,"        	Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});        	",1,0,0,0,6,3,1,4,1,6,93,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,366,"        	return (DateFormatSymbols) method.invoke(null, new Object[] {locale});        	",1,0,0,1,8,2,2,2,0,6,70,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,367,        } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,368,        	return new DateFormatSymbols(locale);,1,0,0,1,2,2,0,1,1,6,37,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1261,        Stub(String id) {,2,0,0,1,3,0,0,1,0,4,17,3,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1262,            iID = id;,2,0,0,0,0,0,0,0,1,2,9,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1263,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1266,            out.writeUTF(iID);,0,0,0,1,2,0,3,0,0,3,18,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1267,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1270,            iID = in.readUTF();,1,0,0,1,2,0,2,0,1,5,19,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1271,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1274,            return forID(iID);,0,0,0,1,2,1,2,0,1,5,18,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,604,        Chronology chrono = new BaseChronology() {,1,0,0,1,3,1,0,2,1,6,42,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,606,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,609,                return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,612,                return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,615,                return getClass().getName();,0,0,0,1,4,1,2,0,1,5,28,11,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,102,"        long instant = year().set(0, year);",1,0,0,1,4,1,3,0,1,6,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,103,"        instant = monthOfYear().set(instant, monthOfYear);",1,0,0,1,4,0,4,0,2,5,50,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",1,0,0,1,4,0,4,0,2,5,48,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,105,"        return millisOfDay().set(instant, millisOfDay);",0,0,0,1,4,1,4,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,132,"        long instant = year().set(0, year);",1,0,0,1,4,1,3,0,1,6,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,133,"        instant = monthOfYear().set(instant, monthOfYear);",1,0,0,1,4,0,4,0,2,5,50,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",1,0,0,1,4,0,4,0,2,5,48,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,135,"        instant = hourOfDay().set(instant, hourOfDay);",1,0,0,1,4,0,4,0,2,5,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",1,0,0,1,4,0,4,0,2,5,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",1,0,0,1,4,0,4,0,2,5,56,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,138,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,1,4,1,4,0,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,163,"        instant = hourOfDay().set(instant, hourOfDay);",1,0,0,1,4,0,4,0,2,5,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",1,0,0,1,4,0,4,0,2,5,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",1,0,0,1,4,0,4,0,2,5,56,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,166,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,1,4,1,4,0,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,183,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,184,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,185,            int value = values[i];,1,0,1,0,2,1,0,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,186,            DateTimeField field = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,187,            if (value < field.getMinimumValue()) {,1,1,0,2,5,1,2,0,0,6,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,188,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,192,            if (value > field.getMaximumValue()) {,1,1,0,2,5,1,2,0,0,6,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,193,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,199,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,200,            int value = values[i];,1,0,1,0,2,1,0,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,201,            DateTimeField field = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,202,"            if (value < field.getMinimumValue(partial, values)) {",1,1,0,0,5,1,4,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,203,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,207,"            if (value > field.getMaximumValue(partial, values)) {",1,1,0,0,5,1,4,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,208,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,213,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,223,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,224,        int[] values = new int[size];,1,0,1,0,4,3,0,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,225,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0,0,1,1,8,1,6,0,1,6,64,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,228,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,57,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",1,0,0,1,8,1,9,0,1,6,83,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,242,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,255,        int size = period.size();,1,0,0,1,2,1,2,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,256,        int[] values = new int[size];,1,0,1,0,4,3,0,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,257,        if (startInstant != endInstant) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,258,            for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,259,                DurationField field = period.getFieldType(i).getField(this);,1,0,0,1,4,1,4,1,0,6,60,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,260,"                int value = field.getDifference(endInstant, startInstant);",1,0,0,0,2,1,4,0,0,4,58,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,261,"                startInstant = field.add(startInstant, value);",1,0,0,0,2,0,4,0,1,4,46,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,262,                values[i] = value;,1,0,1,0,2,0,0,0,1,4,18,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,265,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,301,        if (scalar != 0 && period != null) {,2,3,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,56,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),1,0,0,1,4,3,3,0,0,5,82,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,304,                if (value != 0) {,1,1,0,1,3,1,0,0,0,5,17,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",3,1,0,1,6,1,6,0,1,7,77,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,309,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,322,        if (duration == 0 || scalar == 0) {,2,3,0,1,3,1,0,0,0,5,35,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,323,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",1,0,0,0,2,1,4,0,0,4,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,326,"        return FieldUtils.safeAdd(instant, add);",0,0,0,0,2,1,4,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0,0,0,2,4,1,4,0,0,4,72,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0,0,0,1,6,1,5,0,1,5,90,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0,0,0,1,6,1,5,0,1,5,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0,0,0,2,4,1,4,0,0,4,73,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0,0,0,1,6,1,5,0,1,5,91,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0,0,0,2,4,1,4,0,0,4,73,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0,0,0,1,6,1,5,0,1,5,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0,0,0,2,4,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0,0,0,1,6,1,5,0,1,5,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0,0,0,1,6,1,5,0,1,5,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0,0,0,2,4,1,4,0,0,4,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0,0,0,1,6,1,5,0,1,5,93,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0,0,0,1,6,1,5,0,1,5,90,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0,0,0,2,4,1,4,0,0,4,70,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0,0,0,1,6,1,5,0,1,5,83,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0,0,0,1,6,1,5,0,1,5,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0,0,0,1,6,1,5,0,1,5,83,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0,0,0,2,4,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0,0,0,1,6,1,5,0,1,5,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0,0,0,2,4,1,4,0,0,4,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0,0,0,1,6,1,5,0,1,5,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0,0,0,1,6,1,5,0,1,5,96,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0,0,0,2,4,1,4,0,0,4,72,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0,0,0,1,6,1,5,0,1,5,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0,0,0,2,4,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0,0,0,1,6,1,5,0,1,5,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0,0,0,1,6,1,5,0,1,5,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0,0,0,2,4,1,4,0,0,4,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0,0,0,1,6,1,5,0,1,5,91,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,22,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0,0,0,1,6,1,5,0,1,5,77,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,691,"            throw new IllegalArgumentException(""Id must not be null"");",0,0,0,1,2,2,0,1,2,5,58,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,145,                        } catch (RuntimeException ex) {,1,0,0,1,4,1,0,1,0,5,31,14,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,149,                            temp = forTimeZone(TimeZone.getDefault());,1,0,0,2,4,0,3,0,2,5,42,14,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,151,                    } catch (IllegalArgumentException ex) {,1,0,0,1,4,1,0,1,0,5,39,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,155,                        temp = UTC;,2,0,0,0,0,0,0,0,1,2,11,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0,0,0,2,4,1,2,1,2,6,70,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0,0,0,1,2,2,0,1,2,5,73,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,205,            return getDefault();,0,0,0,1,2,1,1,0,1,5,20,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,208,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,214,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0,1,0,2,7,1,4,0,2,6,47,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,215,            int offset = parseOffset(id);,1,0,0,1,2,1,2,0,1,6,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,216,            if (offset == 0L) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,217,                return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,219,                id = printOffset(offset);,1,0,0,1,2,0,2,0,2,5,25,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,220,"                return fixedOffsetZone(id, offset);",0,0,0,0,2,1,3,0,1,4,35,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,223,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",1,1,0,1,2,2,0,1,3,7,90,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,255,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",1,1,0,1,2,2,0,1,2,7,77,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",2,0,0,0,2,0,3,0,2,4,67,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,269,        } catch (ArithmeticException ex) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,270,"            throw new IllegalArgumentException(""Offset is too large"");",0,0,0,1,2,2,0,1,2,5,58,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,302,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,303,            return getDefault();,0,0,0,1,2,1,1,0,1,5,20,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,305,        final String id = zone.getID();,1,0,0,1,2,1,2,1,1,7,31,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,306,"        if (id.equals(""UTC"")) {",0,0,0,2,5,1,2,0,1,5,23,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,307,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,311,        DateTimeZone dtz = null;,1,0,0,0,0,0,0,1,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,312,        String convId = getConvertedId(id);,1,0,0,1,2,0,2,1,1,6,35,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,313,        if (convId != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,314,            dtz = cProvider.getZone(convId);,1,0,0,1,2,0,3,0,1,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,316,        if (dtz == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,317,            dtz = cProvider.getZone(id);,1,0,0,1,2,0,3,0,1,5,28,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,319,        if (dtz != null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,320,            return dtz;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,324,        if (convId == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,325,            convId = zone.getDisplayName();,1,0,0,1,2,0,2,0,1,5,31,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,326,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0,1,0,2,7,1,4,0,2,6,61,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,327,                convId = convId.substring(3);,1,0,0,1,2,0,2,0,1,5,29,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,328,                int offset = parseOffset(convId);,1,0,0,1,2,1,2,0,1,6,33,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,329,                if (offset == 0L) {,1,1,0,1,3,1,0,0,0,5,19,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,330,                    return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,332,                    convId = printOffset(offset);,1,0,0,1,2,0,2,0,2,5,29,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,333,"                    return fixedOffsetZone(convId, offset);",0,0,0,0,2,1,3,0,1,4,39,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,337,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",1,1,0,1,2,2,0,1,3,7,90,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,350,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,358,            zone = ref.get();,1,0,0,1,2,0,2,0,1,5,17,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,359,            if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,360,                return zone;,1,0,0,0,0,1,0,0,0,2,12,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,374,        return cAvailableIDs;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,387,        return cProvider;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,401,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,402,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,403,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0,0,0,2,4,1,2,1,2,6,71,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,405,        setProvider0(provider);,0,0,0,1,2,0,2,0,1,4,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,406,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,420,            throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,424,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0,0,0,1,2,2,0,1,2,5,71,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,427,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,450,                    provider = (Provider) Class.forName(providerClass).newInstance();,1,0,0,1,6,0,4,1,1,6,65,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,454,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,451,                } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,452,                    Thread thread = Thread.currentThread();,1,0,0,1,2,0,2,1,0,5,39,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,453,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0,0,0,1,4,0,5,0,0,3,54,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,456,        } catch (SecurityException ex) {,1,0,0,1,4,1,0,1,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,463,            } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,464,                Thread thread = Thread.currentThread();,1,0,0,1,2,0,2,1,0,5,39,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,465,"                thread.getThreadGroup().uncaughtException(thread, ex);",0,0,0,1,4,0,5,0,0,3,54,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,470,            provider = new UTCProvider();,1,0,0,1,2,1,0,1,2,6,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,486,        return cNameProvider;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,500,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,501,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,502,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0,0,0,2,4,1,2,1,2,6,75,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,504,        setNameProvider0(nameProvider);,0,0,0,1,2,0,2,0,1,4,31,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,505,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,534,                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();,1,0,0,1,6,0,4,1,1,6,73,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,538,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,535,                } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,536,                    Thread thread = Thread.currentThread();,1,0,0,1,2,0,2,1,0,5,39,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,537,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0,0,0,1,4,0,5,0,0,3,54,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,540,        } catch (SecurityException ex) {,1,0,0,1,4,1,0,1,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,559,"        Map<String, String> map = cZoneIdConversion;",2,0,0,0,0,0,0,3,0,2,44,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,560,        if (map == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,562,"            map = new HashMap<String, String>();",1,0,0,1,2,1,0,3,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,563,"            map.put(""GMT"", ""UTC"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,564,"            map.put(""WET"", ""WET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,565,"            map.put(""CET"", ""CET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,566,"            map.put(""MET"", ""CET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,567,"            map.put(""ECT"", ""CET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,568,"            map.put(""EET"", ""EET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,569,"            map.put(""MIT"", ""Pacific/Apia"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,570,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0,0,0,0,2,0,2,0,2,3,58,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,571,"            map.put(""AST"", ""America/Anchorage"");",0,0,0,0,2,0,2,0,2,3,36,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,572,"            map.put(""PST"", ""America/Los_Angeles"");",0,0,0,0,2,0,2,0,2,3,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,573,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",0,0,0,0,2,0,2,0,2,3,56,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,574,"            map.put(""PNT"", ""America/Phoenix"");",0,0,0,0,2,0,2,0,2,3,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,575,"            map.put(""CST"", ""America/Chicago"");",0,0,0,0,2,0,2,0,2,3,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,576,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0,0,0,0,2,0,2,0,2,3,58,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,577,"            map.put(""IET"", ""America/Indiana/Indianapolis"");",0,0,0,0,2,0,2,0,2,3,47,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,578,"            map.put(""PRT"", ""America/Puerto_Rico"");",0,0,0,0,2,0,2,0,2,3,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,579,"            map.put(""CNT"", ""America/St_Johns"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,580,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");",0,0,0,0,2,0,2,0,2,3,49,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,581,"            map.put(""BET"", ""America/Sao_Paulo"");",0,0,0,0,2,0,2,0,2,3,36,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,582,"            map.put(""ART"", ""Africa/Cairo"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,583,"            map.put(""CAT"", ""Africa/Harare"");",0,0,0,0,2,0,2,0,2,3,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,584,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0,0,0,0,2,0,2,0,2,3,37,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,585,"            map.put(""NET"", ""Asia/Yerevan"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,586,"            map.put(""PLT"", ""Asia/Karachi"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,587,"            map.put(""IST"", ""Asia/Kolkata"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,588,"            map.put(""BST"", ""Asia/Dhaka"");",0,0,0,0,2,0,2,0,2,3,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,589,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,590,"            map.put(""CTT"", ""Asia/Shanghai"");",0,0,0,0,2,0,2,0,2,3,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,591,"            map.put(""JST"", ""Asia/Tokyo"");",0,0,0,0,2,0,2,0,2,3,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,592,"            map.put(""ACT"", ""Australia/Darwin"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,593,"            map.put(""AET"", ""Australia/Sydney"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,594,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0,0,0,0,2,0,2,0,2,3,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,595,"            map.put(""NST"", ""Pacific/Auckland"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,596,            cZoneIdConversion = map;,2,0,0,0,0,0,0,0,1,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,598,        return map.get(id);,0,0,0,1,2,1,3,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,604,        Chronology chrono = new BaseChronology() {,1,0,0,1,3,1,0,2,1,6,42,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,618,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,0,0,0,1,8,2,5,0,2,5,72,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,635,            buf.append('-');,0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,636,            offset = -offset;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,651,        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,1,0,0,0,3,59,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,652,        buf.append(':');,0,0,0,1,2,0,2,0,1,4,16,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,653,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0,0,0,0,2,0,4,0,0,2,49,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,654,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,655,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,656,            return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,659,        buf.append('.');,0,0,0,1,2,0,2,0,1,4,16,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,660,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0,0,0,0,2,0,4,0,0,2,48,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,661,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,670,        if (cOffsetFormatter == null) {,1,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,49,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,675,        return cOffsetFormatter;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,729,"        return getShortName(instant, null);",0,0,0,0,2,1,2,0,1,4,35,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,744,        if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,745,            locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,747,        String nameKey = getNameKey(instant);,1,0,0,1,2,0,2,1,1,6,37,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,748,        if (nameKey == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,749,            return iID;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,751,"        String name = cNameProvider.getShortName(locale, iID, nameKey);",1,0,0,0,2,0,5,1,0,4,63,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,752,        if (name != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,753,            return name;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,755,        return printOffset(getOffset(instant));,0,0,0,2,4,1,3,0,2,5,39,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,769,"        return getName(instant, null);",0,0,0,0,2,1,2,0,1,4,30,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,784,        if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,785,            locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,787,        String nameKey = getNameKey(instant);,1,0,0,1,2,0,2,1,1,6,37,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,788,        if (nameKey == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,789,            return iID;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,791,"        String name = cNameProvider.getName(locale, iID, nameKey);",1,0,0,0,2,0,5,1,0,4,58,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,792,        if (name != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,793,            return name;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,795,        return printOffset(getOffset(instant));,0,0,0,2,4,1,3,0,2,5,39,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,813,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,814,            return getOffset(DateTimeUtils.currentTimeMillis());,0,0,0,2,4,1,3,0,1,5,52,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,816,        return getOffset(instant.getMillis());,0,0,0,2,4,1,3,0,1,5,38,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,844,        return getOffset(instant) == getStandardOffset(instant);,0,1,0,1,4,1,4,0,2,6,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,882,        final int offsetLocal = getOffset(instantLocal);,1,0,0,1,2,2,2,0,2,6,48,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,884,        final long instantAdjusted = instantLocal - offsetLocal;,3,1,0,0,0,2,0,0,1,4,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,885,        final int offsetAdjusted = getOffset(instantAdjusted);,1,0,0,1,2,2,2,0,2,6,54,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,887,        if (offsetLocal != offsetAdjusted) {,2,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,890,            if ((offsetLocal - offsetAdjusted) < 0) {,2,2,0,2,5,1,0,0,0,5,41,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,894,                long nextLocal = nextTransition(instantAdjusted);,1,0,0,1,2,1,2,0,1,6,49,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,895,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,3,1,0,1,2,1,1,0,1,7,66,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,896,                if (nextLocal != nextAdjusted) {,2,1,0,1,3,1,0,0,0,5,32,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,897,                    return offsetLocal;,1,0,0,0,0,1,0,0,0,2,19,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,899,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,900,        } else if (offsetLocal > 0) {,1,1,0,1,4,2,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,901,            long prev = previousTransition(instantAdjusted);,1,0,0,1,2,1,2,0,1,6,48,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,902,            if (prev < instantAdjusted) {,2,1,0,1,3,1,0,0,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,903,                int offsetPrev = getOffset(prev);,1,0,0,1,2,1,2,0,1,6,33,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,904,                int diff = offsetPrev - offsetLocal;,3,1,0,0,0,1,0,0,0,3,36,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,905,                if (instantAdjusted - prev <= diff) {,3,2,0,1,3,1,0,0,0,5,37,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,906,                    return offsetPrev;,1,0,0,0,0,1,0,0,0,2,18,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,910,        return offsetAdjusted;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,924,        int offset = getOffset(instantUTC);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,925,        long instantLocal = instantUTC + offset;,3,1,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,927,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,4,5,0,2,7,1,0,0,0,5,68,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,928,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,73,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,930,        return instantLocal;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,951,        int offsetOriginal = getOffset(originalInstantUTC);,1,0,0,1,2,1,2,0,1,6,51,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,952,        long instantUTC = instantLocal - offsetOriginal;,3,1,0,0,0,1,0,0,0,3,48,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,953,        int offsetLocalFromOriginal = getOffset(instantUTC);,1,0,0,1,2,1,2,0,1,6,52,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,954,        if (offsetLocalFromOriginal == offsetOriginal) {,2,1,0,1,3,1,0,0,0,5,48,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,955,            return instantUTC;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,957,"        return convertLocalToUTC(instantLocal, strict);",0,0,0,0,2,1,3,0,1,4,47,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,974,        int offsetLocal = getOffset(instantLocal);,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,976,        int offset = getOffset(instantLocal - offsetLocal);,3,1,0,1,2,1,1,0,1,7,51,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,978,        if (offsetLocal != offset) {,2,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,982,            if (strict || offsetLocal < 0) {,2,2,0,1,3,1,0,0,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,984,                long nextLocal = nextTransition(instantLocal - offsetLocal);,3,1,0,1,2,1,1,0,1,7,60,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,985,                if (nextLocal == (instantLocal - offsetLocal)) {,3,2,0,2,5,1,0,0,0,5,48,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,986,                    nextLocal = Long.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,27,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,988,                long nextAdjusted = nextTransition(instantLocal - offset);,3,1,0,1,2,1,1,0,1,7,58,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,989,                if (nextAdjusted == (instantLocal - offset)) {,3,2,0,2,5,1,0,0,0,5,46,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,990,                    nextAdjusted = Long.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,30,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,992,                if (nextLocal != nextAdjusted) {,2,1,0,1,3,1,0,0,0,5,32,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,994,                    if (strict) {,1,0,0,1,3,1,0,0,0,4,13,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,996,"                        throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" +",0,1,0,0,1,2,0,1,2,5,91,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1003,                        offset = offsetLocal;,2,0,0,0,0,0,0,0,1,2,21,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1009,        long instantUTC = instantLocal - offset;,3,1,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1011,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,4,5,0,2,7,1,0,0,0,5,69,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1012,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,78,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1014,        return instantUTC;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1028,        if (newZone == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1029,            newZone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,36,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1031,        if (newZone == this) {,1,1,0,1,3,2,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1032,            return oldInstant;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1034,        long instantLocal = convertUTCToLocal(oldInstant);,1,0,0,1,2,1,2,0,1,6,50,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1035,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",0,0,0,0,2,1,4,0,1,4,66,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1145,        if (isFixed()) {,0,0,0,2,5,1,1,0,1,5,16,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1146,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1149,            localDateTime.toDateTime(this);,0,0,0,1,2,1,2,0,0,4,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1150,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1151,        } catch (IllegalArgumentException ex) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1152,            return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1164,        long before = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,4,2,0,1,2,1,1,0,1,7,81,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1165,        long after = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);,4,2,0,1,2,1,1,0,1,7,80,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1166,        if (before == after) {,2,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1167,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1169,        long local = convertUTCToLocal(instant);,1,0,0,1,2,1,2,0,1,6,40,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1170,"        return convertLocalToUTC(local, false, earlierOrLater ? after : before);",3,0,0,0,2,1,2,0,2,5,72,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1210,        return java.util.TimeZone.getTimeZone(iID);,3,0,0,1,2,1,2,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1227,        return 57 + getID().hashCode();,0,1,0,1,4,1,2,0,1,6,31,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1235,        return getID();,0,0,0,1,2,1,1,0,1,5,15,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,22,1245,        return new Stub(iID);,1,0,0,1,2,2,0,1,1,6,21,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,79,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,83,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,101,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,110,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,119,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,128,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,137,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,146,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,155,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,164,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,173,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,182,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,191,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,200,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,209,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,227,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,238,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,239,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,240,        } else if (obj instanceof UnsupportedDurationField) {,1,0,0,1,4,3,0,1,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,241,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,2,0,0,1,2,0,0,2,0,4,64,7,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,242,            if (other.getName() == null) {,0,1,0,2,5,1,2,0,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,243,                return (getName() == null);,0,1,0,2,4,1,1,0,1,6,27,10,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,245,            return (other.getName().equals(getName()));,0,0,0,3,8,1,4,0,1,5,43,9,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,247,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,256,        return getName().hashCode();,0,0,0,1,4,1,2,0,1,5,28,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,265,"        return ""UnsupportedDurationField["" + getName() + ']';",0,1,0,1,4,1,1,0,3,6,53,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,272,        return getInstance(iType);,0,0,0,1,2,1,2,0,1,5,26,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",1,1,0,1,2,2,0,1,2,7,74,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,22,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,1,0,0,0,1,5,0,2,2,5,91,1,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",3,0,0,0,3,1,0,2,1,5,87,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,83,        if (type == null || durationField == null) {,2,3,0,1,3,1,0,0,0,5,44,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,84,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,86,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,87,        iDurationField = durationField;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,88,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,55,        if (cCache == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",1,0,0,1,2,1,0,3,2,6,69,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,57,            field = null;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,59,            field = cCache.get(type);,1,0,0,1,2,0,3,0,1,5,25,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,60,            if (field != null && field.getDurationField() != durationField) {,2,3,0,2,5,1,2,0,0,6,65,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,61,                field = null;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,64,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,65,"            field = new UnsupportedDateTimeField(type, durationField);",3,0,0,0,2,1,0,1,2,5,58,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,66,"            cCache.put(type, field);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,68,        return field;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,95,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,99,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,108,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,117,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,126,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,135,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,144,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,153,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,162,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,171,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,180,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,189,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,198,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,207,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,216,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,225,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,234,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,243,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,252,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,261,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,270,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,75,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,81,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,297,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,306,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,315,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,324,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,333,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,343,        return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,352,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,361,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,370,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,379,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,388,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,397,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,406,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,415,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,424,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,433,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,442,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,451,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,460,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,469,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,478,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,487,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,496,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,505,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,514,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,523,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,533,"        return ""UnsupportedDateTimeField"";",0,0,0,0,0,1,0,0,1,2,34,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,540,"        return getInstance(iType, iDurationField);",0,0,0,0,2,1,3,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,22,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",1,1,0,1,2,2,0,1,2,7,74,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,1,6,1,6,0,2,5,79,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,109,        iDateTimeFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,110,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,111,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,112,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,113,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,114,        iLowerBound = lowerBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,115,        iUpperBound = upperBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,116,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,117,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0,0,0,1,6,1,5,0,2,5,70,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,130,        iDateTimeFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,131,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,132,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,133,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,134,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,135,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,136,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,137,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,138,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,1,6,1,6,0,2,5,79,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,151,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,152,        iDurationFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,153,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,154,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,155,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,156,        iLowerBound = lowerBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,157,        iUpperBound = upperBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,158,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,159,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0,0,0,0,4,1,5,0,2,4,69,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,172,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,173,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,174,        iFieldName = fieldName;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,175,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,176,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,177,        iLowerBound = lowerBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,178,        iUpperBound = upperBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,179,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,189,"        super(createMessage(fieldType.getName(), value));",0,0,0,1,6,1,4,0,2,5,49,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,190,        iDateTimeFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,191,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,192,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,193,        iStringValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,194,        iNumberValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,195,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,196,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,197,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,198,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,207,"        super(createMessage(fieldType.getName(), value));",0,0,0,1,6,1,4,0,2,5,49,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,208,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,209,        iDurationFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,210,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,211,        iStringValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,212,        iNumberValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,213,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,214,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,215,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,216,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,225,"        super(createMessage(fieldName, value));",0,0,0,0,4,1,3,0,2,4,39,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,226,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,227,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,228,        iFieldName = fieldName;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,229,        iStringValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,230,        iNumberValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,231,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,232,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,233,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,234,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,41,        StringBuffer buf = new StringBuffer(),1,0,0,1,2,1,0,2,1,6,37,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,44,        if (lowerBound == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,45,            if (upperBound == null) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,46,"                buf.append(""is not supported"");",0,0,0,1,2,0,2,0,1,4,31,9,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,48,"                buf.append(""must not be larger than "").append(upperBound);",0,0,0,1,4,0,4,0,1,4,58,9,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,50,        } else if (upperBound == null) {,1,1,0,1,4,2,0,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0,0,0,1,4,0,4,0,1,4,59,8,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,53,"            buf.append(""must be in the range ["")",0,0,0,1,3,0,2,0,1,4,36,12,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,59,        if (explain != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,60,"            buf.append("": "").append(explain);",0,0,0,1,4,0,4,0,1,4,33,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,63,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",1,0,0,1,4,1,1,2,2,7,55,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,76,        if (value == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,77,"            buf.append(""null"");",0,0,0,1,2,0,2,0,1,4,19,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,79,"            buf.append('""');",0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,80,            buf.append(value);,0,0,0,1,2,0,3,0,0,3,18,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,81,"            buf.append('""');",0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0,0,0,1,8,1,6,0,3,5,77,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,86,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,243,        return iDateTimeFieldType;,1,0,0,0,0,1,0,0,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,252,        return iDurationFieldType;,1,0,0,0,0,1,0,0,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,261,        return iFieldName;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,270,        return iNumberValue;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,279,        return iStringValue;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,288,        String value = iStringValue;,2,0,0,0,0,0,0,1,0,2,28,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,289,        if (value == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,290,            value = String.valueOf(iNumberValue);,1,0,0,1,2,0,3,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,292,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,301,        return iLowerBound;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,310,        return iUpperBound;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,314,        return iMessage;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,323,        if (iMessage == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,324,            iMessage = message;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,325,        } else if (message != null) {,1,1,0,1,4,2,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,326,"            iMessage = message + "": "" + iMessage;",3,1,0,0,0,0,0,0,2,3,37,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,22,328,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,36,    private FormatUtils() {,1,0,0,1,3,1,0,0,1,5,23,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,37,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,51,            buf.append('-');,0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,52,            if (value != Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,53,                value = -value;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,55,                for (; size > 10; size--) {,2,1,0,1,3,1,0,0,1,6,27,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,56,                    buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,58,"                buf.append("""" + -(long)Integer.MIN_VALUE);",2,1,0,2,4,1,2,0,2,7,42,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,59,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,67,        } else if (value < 100) {,1,1,0,1,4,2,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,68,            for (; size > 2; size--) {,2,1,0,1,3,1,0,0,1,6,26,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,69,                buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,74,            int d = ((value + 1) * 13421772) >> 27;,2,3,0,2,4,1,0,0,0,5,39,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,75,            buf.append((char) (d + '0'));,1,1,0,2,6,1,2,0,1,7,29,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,3,4,0,3,10,1,2,0,1,7,55,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,78,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,80,            if (value < 1000) {,1,1,0,1,3,1,0,0,0,5,19,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,81,                digits = 3;,1,0,0,0,0,0,0,0,1,2,11,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,82,            } else if (value < 10000) {,1,1,0,1,4,2,0,0,0,5,27,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,83,                digits = 4;,1,0,0,0,0,0,0,0,1,2,11,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,85,                digits = (int)(Math.log(value) / LOG_10) + 1;,2,2,0,2,6,1,3,0,1,7,45,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,87,            for (; size > digits; size--) {,3,1,0,1,3,1,0,0,1,6,31,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,88,                buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,5,0,0,3,36,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,105,        int intValue = (int)value;,2,0,0,1,2,2,0,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,106,        if (intValue == value) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,107,"            appendPaddedInteger(buf, intValue, size);",0,0,0,0,2,0,4,0,1,3,41,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,108,        } else if (size <= 19) {,1,1,0,1,4,2,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,109,            buf.append(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,33,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,111,            if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,112,                buf.append('-');,0,0,0,1,2,0,2,0,1,4,16,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,113,                if (value != Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,30,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,114,                    value = -value;,2,0,0,0,0,0,0,0,2,2,15,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,116,                    for (; size > 19; size--) {,2,1,0,1,3,1,0,0,1,6,27,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,117,                        buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,14,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,119,"                    buf.append(""9223372036854775808"");",0,0,0,1,2,0,2,0,1,4,34,12,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,120,                    return;,0,0,0,0,0,1,0,0,1,2,7,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,123,            int digits = (int)(Math.log(value) / LOG_10) + 1;,2,2,0,2,6,2,3,0,0,6,49,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,124,            for (; size > digits; size--) {,3,1,0,1,3,1,0,0,1,6,31,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,125,                buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,127,            buf.append(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,33,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,129,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,144,        if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,145,            out.write('-');,0,0,0,1,2,0,2,0,1,4,15,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,146,            if (value != Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,147,                value = -value;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,149,                for (; size > 10; size--) {,2,1,0,1,3,1,0,0,1,6,27,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,150,                    out.write('0');,0,0,0,1,2,0,2,0,1,4,15,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,152,"                out.write("""" + -(long)Integer.MIN_VALUE);",2,1,0,2,4,1,2,0,2,7,41,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,153,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,156,        if (value < 10) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,157,            for (; size > 1; size--) {,2,1,0,1,3,1,0,0,1,6,26,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,158,                out.write('0');,0,0,0,1,2,0,2,0,1,4,15,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,160,            out.write(value + '0');,1,1,0,1,2,0,2,0,1,6,23,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,161,        } else if (value < 100) {,1,1,0,1,4,2,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,162,            for (; size > 2; size--) {,2,1,0,1,3,1,0,0,1,6,26,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,163,                out.write('0');,0,0,0,1,2,0,2,0,1,4,15,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,168,            int d = ((value + 1) * 13421772) >> 27;,2,3,0,2,4,1,0,0,0,5,39,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,169,            out.write(d + '0');,1,1,0,1,2,0,2,0,1,6,19,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,171,            out.write(value - (d << 3) - (d << 1) + '0');,3,4,0,2,6,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,172,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,174,            if (value < 1000) {,1,1,0,1,3,1,0,0,0,5,19,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,175,                digits = 3;,1,0,0,0,0,0,0,0,1,2,11,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,176,            } else if (value < 10000) {,1,1,0,1,4,2,0,0,0,5,27,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,177,                digits = 4;,1,0,0,0,0,0,0,0,1,2,11,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,179,                digits = (int)(Math.log(value) / LOG_10) + 1;,2,2,0,2,6,1,3,0,1,7,45,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,181,            for (; size > digits; size--) {,3,1,0,1,3,1,0,0,1,6,31,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,182,                out.write('0');,0,0,0,1,2,0,2,0,1,4,15,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,184,            out.write(Integer.toString(value));,0,0,0,2,4,0,5,0,0,3,35,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,186,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,201,        int intValue = (int)value;,2,0,0,1,2,2,0,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,202,        if (intValue == value) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,203,"            writePaddedInteger(out, intValue, size);",0,0,0,0,2,0,4,0,1,3,40,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,204,        } else if (size <= 19) {,1,1,0,1,4,2,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,205,            out.write(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,32,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,207,            if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,208,                out.write('-');,0,0,0,1,2,0,2,0,1,4,15,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,209,                if (value != Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,30,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,210,                    value = -value;,2,0,0,0,0,0,0,0,2,2,15,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,212,                    for (; size > 19; size--) {,2,1,0,1,3,1,0,0,1,6,27,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,213,                        out.write('0');,0,0,0,1,2,0,2,0,1,4,15,14,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,215,"                    out.write(""9223372036854775808"");",0,0,0,1,2,0,2,0,1,4,33,12,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,216,                    return;,0,0,0,0,0,1,0,0,1,2,7,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,219,            int digits = (int)(Math.log(value) / LOG_10) + 1;,2,2,0,2,6,2,3,0,0,6,49,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,220,            for (; size > digits; size--) {,3,1,0,1,3,1,0,0,1,6,31,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,221,                out.write('0');,0,0,0,1,2,0,2,0,1,4,15,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,223,            out.write(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,32,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,225,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,236,        if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,237,            buf.append('-');,0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,238,            if (value != Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,239,                value = -value;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,241,"                buf.append("""" + -(long)Integer.MIN_VALUE);",2,1,0,2,4,1,2,0,2,7,42,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,242,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,245,        if (value < 10) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,246,            buf.append((char)(value + '0'));,1,1,0,2,6,1,2,0,1,7,32,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,247,        } else if (value < 100) {,1,1,0,1,4,2,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,251,            int d = ((value + 1) * 13421772) >> 27;,2,3,0,2,4,1,0,0,0,5,39,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,252,            buf.append((char) (d + '0'));,1,1,0,2,6,1,2,0,1,7,29,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,254,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,3,4,0,3,10,1,2,0,1,7,55,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,255,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,256,            buf.append(Integer.toString(value));,0,0,0,2,4,0,5,0,0,3,36,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,258,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,269,        int intValue = (int)value;,2,0,0,1,2,2,0,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,270,        if (intValue == value) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,271,"            appendUnpaddedInteger(buf, intValue);",0,0,0,0,2,0,3,0,1,3,37,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,273,            buf.append(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,33,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,275,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,288,        if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,289,            out.write('-');,0,0,0,1,2,0,2,0,1,4,15,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,290,            if (value != Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,291,                value = -value;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,293,"                out.write("""" + -(long)Integer.MIN_VALUE);",2,1,0,2,4,1,2,0,2,7,41,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,294,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,297,        if (value < 10) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,298,            out.write(value + '0');,1,1,0,1,2,0,2,0,1,6,23,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,299,        } else if (value < 100) {,1,1,0,1,4,2,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,303,            int d = ((value + 1) * 13421772) >> 27;,2,3,0,2,4,1,0,0,0,5,39,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,304,            out.write(d + '0');,1,1,0,1,2,0,2,0,1,6,19,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,306,            out.write(value - (d << 3) - (d << 1) + '0');,3,4,0,2,6,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,307,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,308,            out.write(Integer.toString(value));,0,0,0,2,4,0,5,0,0,3,35,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,310,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,323,        int intValue = (int)value;,2,0,0,1,2,2,0,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,324,        if (intValue == value) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,325,"            writeUnpaddedInteger(out, intValue);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,327,            out.write(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,32,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,329,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,336,        if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,337,            if (value != Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,338,                return calculateDigitCount(-value) + 1;,1,1,0,1,2,1,1,0,2,7,39,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,340,                return 20;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,343,        return ,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,352,        int value = text.charAt(position) - '0';,1,1,0,1,2,1,3,0,1,7,40,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,3,6,0,2,8,1,2,0,1,7,71,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,357,        int sampleLen = errorPos + 32;,2,1,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,359,        if (text.length() <= sampleLen + 3) {,1,2,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,360,            sampleText = text;,2,0,0,0,0,0,0,0,1,2,18,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,362,"            sampleText = text.substring(0, sampleLen).concat(""..."");",1,0,0,1,4,0,4,0,2,5,56,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,365,        if (errorPos <= 0) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,366,"            return ""Invalid format: \"""" + sampleText + '""';",1,1,0,0,0,1,0,0,2,4,47,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,369,        if (errorPos >= text.length()) {,1,1,0,2,5,1,2,0,0,6,32,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,370,"            return ""Invalid format: \"""" + sampleText + ""\"" is too short"";",1,1,0,0,0,2,0,0,2,4,61,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,22,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +",1,1,0,0,0,1,0,0,2,4,68,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,463,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,464,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,466,            if (obj instanceof StandardDateTimeFieldType) {,1,0,0,1,3,2,0,1,0,5,47,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,467,                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;,3,1,0,2,4,1,0,1,0,6,62,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,469,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,475,            return iOrdinal;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,480,            chronology = DateTimeUtils.getChronology(chronology);,1,0,0,1,2,0,3,0,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,482,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,484,                    return chronology.era();,0,0,0,1,2,1,2,0,0,4,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,486,                    return chronology.yearOfEra();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,488,                    return chronology.centuryOfEra();,0,0,0,1,2,1,2,0,0,4,33,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,490,                    return chronology.yearOfCentury();,0,0,0,1,2,1,2,0,0,4,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,492,                    return chronology.year();,0,0,0,1,2,1,2,0,0,4,25,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,494,                    return chronology.dayOfYear();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,2,0,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,2,0,0,4,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,500,                    return chronology.weekyearOfCentury();,0,0,0,1,2,1,2,0,0,4,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,502,                    return chronology.weekyear();,0,0,0,1,2,1,2,0,0,4,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,504,                    return chronology.weekOfWeekyear();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,506,                    return chronology.dayOfWeek();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,508,                    return chronology.halfdayOfDay();,0,0,0,1,2,1,2,0,0,4,33,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,510,                    return chronology.hourOfHalfday();,0,0,0,1,2,1,2,0,0,4,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,512,                    return chronology.clockhourOfHalfday();,0,0,0,1,2,1,2,0,0,4,39,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,514,                    return chronology.clockhourOfDay();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,518,                    return chronology.minuteOfDay();,0,0,0,1,2,1,2,0,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,520,                    return chronology.minuteOfHour();,0,0,0,1,2,1,2,0,0,4,33,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,522,                    return chronology.secondOfDay();,0,0,0,1,2,1,2,0,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,524,                    return chronology.secondOfMinute();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,526,                    return chronology.millisOfDay();,0,0,0,1,2,1,2,0,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,528,                    return chronology.millisOfSecond();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,531,                    throw new InternalError();,0,0,0,1,2,2,0,1,1,5,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,541,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,543,                    return ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,16,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,545,                    return YEAR_OF_ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,547,                    return CENTURY_OF_ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,549,                    return YEAR_OF_CENTURY_TYPE;,1,0,0,0,0,1,0,0,0,2,28,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,551,                    return YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,553,                    return DAY_OF_YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,555,                    return MONTH_OF_YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,557,                    return DAY_OF_MONTH_TYPE;,1,0,0,0,0,1,0,0,0,2,25,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,559,                    return WEEKYEAR_OF_CENTURY_TYPE;,1,0,0,0,0,1,0,0,0,2,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,561,                    return WEEKYEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,21,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,563,                    return WEEK_OF_WEEKYEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,565,                    return DAY_OF_WEEK_TYPE;,1,0,0,0,0,1,0,0,0,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,567,                    return HALFDAY_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,569,                    return HOUR_OF_HALFDAY_TYPE;,1,0,0,0,0,1,0,0,0,2,28,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,571,                    return CLOCKHOUR_OF_HALFDAY_TYPE;,1,0,0,0,0,1,0,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,573,                    return CLOCKHOUR_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,575,                    return HOUR_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,577,                    return MINUTE_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,579,                    return MINUTE_OF_HOUR_TYPE;,1,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,581,                    return SECOND_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,583,                    return SECOND_OF_MINUTE_TYPE;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,585,                    return MILLIS_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,587,                    return MILLIS_OF_SECOND_TYPE;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,590,                    return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,378,        return iName;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,410,        return getField(chronology).isSupported();,0,0,0,1,4,1,3,0,1,5,42,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,419,        return getName();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,22,41,public abstract class DateTimeFieldType implements Serializable {,1,0,0,0,1,4,0,1,2,5,65,1,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,81,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,82,        type = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,29,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,83,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,84,"        setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); // internal method",0,0,0,0,2,0,9,0,1,3,98,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,85,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,97,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,98,        type = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,29,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,99,        chrono = DateTimeUtils.getChronology(chrono);,1,0,0,1,2,0,3,0,1,5,45,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,100,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,101,"        iValues = chrono.get(this, startInstant, endInstant);",1,0,0,0,2,1,4,0,1,5,53,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,102,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,113,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,114,        type = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,29,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,115,        if (startInstant == null && endInstant == null) {,2,3,0,1,3,1,0,0,0,5,49,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,116,            iType = type;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,117,            iValues = new int[size()];,1,0,0,1,4,2,1,0,2,6,26,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,119,            long startMillis = DateTimeUtils.getInstantMillis(startInstant);,1,0,0,1,2,1,3,0,0,5,64,7,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,120,            long endMillis = DateTimeUtils.getInstantMillis(endInstant);,1,0,0,1,2,1,3,0,0,5,60,7,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,121,"            Chronology chrono = DateTimeUtils.getIntervalChronology(startInstant, endInstant);",1,0,0,0,2,0,4,1,0,4,82,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,122,            iType = type;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,123,"            iValues = chrono.get(this, startMillis, endMillis);",1,0,0,0,2,1,4,0,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,125,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,146,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,147,        if (start == null || end == null) {,2,3,0,1,3,1,0,0,0,5,35,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,148,"            throw new IllegalArgumentException(""ReadablePartial objects must not be null"");",0,0,0,1,2,2,0,1,2,5,79,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,150,        if (start instanceof BaseLocal && end instanceof BaseLocal && start.getClass() == end.getClass()) {,2,2,0,2,7,3,4,2,0,7,99,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,152,            type = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,29,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,153,            long startMillis = ((BaseLocal) start).getLocalMillis();,2,0,0,2,6,1,1,1,0,6,56,7,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,154,            long endMillis = ((BaseLocal) end).getLocalMillis();,2,0,0,2,6,1,1,1,0,6,52,7,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,155,            Chronology chrono = start.getChronology();,1,0,0,1,2,0,2,1,0,5,42,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,156,            chrono = DateTimeUtils.getChronology(chrono);,1,0,0,1,2,0,3,0,1,5,45,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,157,            iType = type;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,158,"            iValues = chrono.get(this, startMillis, endMillis);",1,0,0,0,2,1,4,0,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,159,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,160,            if (start.size() != end.size()) {,0,1,0,2,7,1,4,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,161,"                throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");",0,0,0,1,2,2,0,1,2,5,95,8,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,163,"            for (int i = 0, isize = start.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,55,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,164,                if (start.getFieldType(i) != end.getFieldType(i)) {,0,1,0,2,7,1,6,0,0,5,51,8,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,165,"                    throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");",0,0,0,1,2,2,0,1,2,5,95,10,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,168,            if (DateTimeUtils.isContiguous(start) == false) {,0,1,0,2,5,1,3,0,1,6,49,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,169,"                throw new IllegalArgumentException(""ReadablePartial objects must be contiguous"");",0,0,0,1,2,2,0,1,2,5,81,8,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,171,            iType = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,30,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,172,            Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();,1,0,0,2,6,0,5,1,0,5,81,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,173,"            iValues = chrono.get(this, chrono.set(start, 0L), chrono.set(end, 0L));",1,0,0,0,6,1,8,0,1,5,71,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,175,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,185,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,186,        type = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,29,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,187,        long startMillis = DateTimeUtils.getInstantMillis(startInstant);,1,0,0,1,2,1,3,0,0,5,64,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,188,        long durationMillis = DateTimeUtils.getDurationMillis(duration);,1,0,0,1,2,1,3,0,0,5,64,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,189,"        long endMillis = FieldUtils.safeAdd(startMillis, durationMillis);",1,0,0,0,2,1,4,0,0,4,65,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,190,        Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);,1,0,0,1,2,0,3,1,0,5,69,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,191,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,192,"        iValues = chrono.get(this, startMillis, endMillis);",1,0,0,0,2,1,4,0,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,193,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,203,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,204,        type = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,29,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,205,        long durationMillis = DateTimeUtils.getDurationMillis(duration);,1,0,0,1,2,1,3,0,0,5,64,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,206,        long endMillis = DateTimeUtils.getInstantMillis(endInstant);,1,0,0,1,2,1,3,0,0,5,60,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,207,"        long startMillis = FieldUtils.safeSubtract(endMillis, durationMillis);",1,0,0,0,2,1,4,0,0,4,70,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,208,        Chronology chrono = DateTimeUtils.getInstantChronology(endInstant);,1,0,0,1,2,0,3,1,0,5,67,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,209,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,210,"        iValues = chrono.get(this, startMillis, endMillis);",1,0,0,0,2,1,4,0,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,211,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,256,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,257,        PeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);,1,0,0,1,4,0,4,1,0,5,86,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,258,        type = (type == null ? converter.getPeriodType(period) : type);,3,1,0,2,4,0,3,0,1,6,63,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,259,        type = checkPeriodType(type);,1,0,0,1,2,0,2,0,2,5,29,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,260,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,261,        if (this instanceof ReadWritablePeriod) {,0,0,0,1,3,3,0,1,0,4,41,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,262,            iValues = new int[size()];,1,0,0,1,4,2,1,0,2,6,26,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,263,            chrono = DateTimeUtils.getChronology(chrono);,1,0,0,1,2,0,3,0,1,5,45,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,264,"            converter.setInto((ReadWritablePeriod) this, period, chrono);",0,0,0,1,4,1,4,1,0,5,61,7,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,266,"            iValues = new MutablePeriod(period, type, chrono).getValues();",4,0,0,1,4,1,1,1,2,7,62,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,268,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,278,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,279,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,280,        iValues = values;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,281,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,356,        long startMillis = DateTimeUtils.getInstantMillis(startInstant);,1,0,0,1,2,1,3,0,0,5,64,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,357,        Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);,1,0,0,1,2,0,3,1,0,5,69,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,358,"        long endMillis = chrono.add(this, startMillis, 1);",1,0,0,0,2,2,3,0,0,4,50,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,359,"        return new Duration(startMillis, endMillis);",2,0,0,0,2,2,0,1,1,5,44,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,380,        long endMillis = DateTimeUtils.getInstantMillis(endInstant);,1,0,0,1,2,1,3,0,0,5,60,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,381,        Chronology chrono = DateTimeUtils.getInstantChronology(endInstant);,1,0,0,1,2,0,3,1,0,5,67,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,382,"        long startMillis = chrono.add(this, endMillis, -1);",1,0,0,0,2,2,3,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,383,"        return new Duration(startMillis, endMillis);",2,0,0,0,2,2,0,1,1,5,44,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,396,        int index = indexOf(type);,1,0,0,1,2,1,2,0,1,6,26,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,397,        if (index == -1) {,1,1,0,1,3,1,0,0,1,6,18,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,398,            if (newValue != 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,399,                throw new IllegalArgumentException(,0,0,0,0,1,2,0,1,1,4,35,8,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,403,            values[index] = newValue;,1,0,1,0,2,0,0,0,1,4,25,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,405,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,415,        if (period == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,416,            setValues(new int[size()]);,0,0,0,2,6,2,2,0,2,5,27,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,418,            setPeriodInternal(period);,0,0,0,1,2,0,2,0,1,4,26,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,420,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,426,        int[] newValues = new int[size()];,1,0,0,1,6,3,1,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,427,"        for (int i = 0, isize = period.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,56,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,428,            DurationFieldType type = period.getFieldType(i);,1,0,0,1,2,0,3,1,0,5,48,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,429,            int value = period.getValue(i);,1,0,0,1,2,1,3,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,430,"            checkAndUpdate(type, newValues, value);",0,0,0,0,2,0,4,0,1,3,39,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,432,        iValues = newValues;,2,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,433,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,450,"        setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis);",0,0,0,0,2,0,9,0,1,3,79,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,451,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,458,        int[] newValues = new int[size()];,1,0,0,1,6,3,1,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,459,"        checkAndUpdate(DurationFieldType.years(), newValues, years);",0,0,0,1,4,0,5,0,1,4,60,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,460,"        checkAndUpdate(DurationFieldType.months(), newValues, months);",0,0,0,1,4,0,5,0,1,4,62,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,461,"        checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);",0,0,0,1,4,0,5,0,1,4,60,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,462,"        checkAndUpdate(DurationFieldType.days(), newValues, days);",0,0,0,1,4,0,5,0,1,4,58,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,463,"        checkAndUpdate(DurationFieldType.hours(), newValues, hours);",0,0,0,1,4,0,5,0,1,4,60,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,464,"        checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);",0,0,0,1,4,0,5,0,1,4,64,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,465,"        checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);",0,0,0,1,4,0,5,0,1,4,64,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,466,"        checkAndUpdate(DurationFieldType.millis(), newValues, millis);",0,0,0,1,4,0,5,0,1,4,62,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,467,        iValues = newValues;,2,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,468,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,479,"        setFieldInto(iValues, field, value);",0,0,0,0,2,0,4,0,1,3,36,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,480,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,491,        int index = indexOf(field);,1,0,0,1,2,1,2,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,492,        if (index == -1) {,1,1,0,1,3,1,0,0,1,6,18,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,493,            if (value != 0 || field == null) {,2,3,0,1,3,1,0,0,0,5,34,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,494,                throw new IllegalArgumentException(,0,0,0,0,1,2,0,1,1,4,35,8,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,498,            values[index] = value;,1,0,1,0,2,0,0,0,1,4,22,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,500,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,510,"        addFieldInto(iValues, field, value);",0,0,0,0,2,0,4,0,1,3,36,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,511,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,522,        int index = indexOf(field);,1,0,0,1,2,1,2,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,523,        if (index == -1) {,1,1,0,1,3,1,0,0,1,6,18,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,524,            if (value != 0 || field == null) {,2,3,0,1,3,1,0,0,0,5,34,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,525,                throw new IllegalArgumentException(,0,0,0,0,1,2,0,1,1,4,35,8,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,529,"            values[index] = FieldUtils.safeAdd(values[index], value);",0,0,1,0,6,0,3,0,1,4,57,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,531,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,540,        if (period != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,541,"            iValues = mergePeriodInto(getValues(), period);",1,0,0,1,4,0,3,0,3,5,47,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,543,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,554,"         for (int i = 0, isize = period.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,56,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,555,             DurationFieldType type = period.getFieldType(i);,1,0,0,1,2,0,3,1,0,5,48,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,556,             int value = period.getValue(i);,1,0,0,1,2,1,3,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,557,"             checkAndUpdate(type, values, value);",0,0,0,0,2,0,4,0,1,3,36,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,559,         return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,569,        if (period != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,570,"            iValues = addPeriodInto(getValues(), period);",1,0,0,1,4,0,3,0,3,5,45,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,572,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,583,"         for (int i = 0, isize = period.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,56,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,584,             DurationFieldType type = period.getFieldType(i);,1,0,0,1,2,0,3,1,0,5,48,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,585,             int value = period.getValue(i);,1,0,0,1,2,1,3,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,586,             if (value != 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,587,                 int index = indexOf(type);,1,0,0,1,2,1,2,0,1,6,26,9,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,588,                 if (index == -1) {,1,1,0,1,3,1,0,0,1,6,18,8,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,589,                     throw new IllegalArgumentException(,0,0,0,0,1,2,0,1,1,4,35,10,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,592,"                     values[index] = FieldUtils.safeAdd(getValue(index), value);",0,0,1,1,6,0,5,0,2,5,59,10,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,596,         return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,608,        iValues[index] = value;,1,0,1,0,2,0,0,0,1,4,23,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,609,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,617,        iValues = values;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,time,org/joda/time/base/BasePeriod,22,618,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,57,        DurationFieldType[] result = new DurationFieldType[size()];,1,0,0,1,6,1,1,2,1,7,59,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,58,        for (int i = 0; i < result.length; i++) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,59,            result[i] = getFieldType(i);,0,0,1,1,4,0,2,0,2,5,28,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,61,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,73,        int[] result = new int[size()];,1,0,0,1,6,3,1,0,1,6,31,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,74,        for (int i = 0; i < result.length; i++) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,75,            result[i] = getValue(i);,0,0,1,1,4,0,2,0,2,5,24,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,77,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,91,        int index = indexOf(type);,1,0,0,1,2,1,2,0,1,6,26,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,92,        if (index == -1) {,1,1,0,1,3,1,0,0,1,6,18,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,93,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,95,        return getValue(index);,0,0,0,1,2,1,2,0,1,5,23,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,105,        return getPeriodType().isSupported(type);,0,0,0,1,4,1,3,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,115,        return getPeriodType().indexOf(type);,0,0,0,1,4,1,3,0,1,5,37,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,125,        return new Period(this);,0,0,0,1,2,3,0,1,1,5,24,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,136,        return new MutablePeriod(this);,0,0,0,1,2,3,0,1,1,5,31,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,161,        if (this == period) {,1,1,0,1,3,2,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,162,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,164,        if (period instanceof ReadablePeriod == false) {,1,1,0,1,3,2,0,1,1,7,48,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,165,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,167,        ReadablePeriod other = (ReadablePeriod) period;,2,0,0,1,2,0,0,2,0,4,47,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,168,        if (size() != other.size()) {,0,1,0,2,7,1,3,0,1,6,29,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,169,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,171,"        for (int i = 0, isize = size(); i < isize; i++) {",5,1,0,1,5,2,1,0,2,7,49,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,172,            if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {,0,3,0,2,11,1,10,0,2,6,83,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,173,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,176,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,185,        int total = 17;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,186,"        for (int i = 0, isize = size(); i < isize; i++) {",5,1,0,1,5,2,1,0,2,7,49,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,187,            total = 27 * total + getValue(i);,2,2,0,1,2,0,2,0,2,6,33,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,188,            total = 27 * total + getFieldType(i).hashCode();,2,2,0,1,4,0,3,0,2,6,48,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,190,        return total;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,206,        return ISOPeriodFormat.standard().print(this);,0,0,0,1,4,2,3,0,0,4,46,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,218,        if (formatter == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,219,            return toString();,0,0,0,1,2,1,1,0,1,5,18,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPeriod,22,221,        return formatter.print(this);,0,0,0,1,2,2,2,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,73,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,74,"        iMillis = FieldUtils.safeAdd(endInstant, -startInstant);",2,0,0,0,2,0,3,0,2,4,56,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,85,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,86,        if (start == end) {,2,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,87,            iMillis = 0L;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,89,            long startMillis = DateTimeUtils.getInstantMillis(start);,1,0,0,1,2,1,3,0,0,5,57,7,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,90,            long endMillis = DateTimeUtils.getInstantMillis(end);,1,0,0,1,2,1,3,0,0,5,53,7,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,91,"            iMillis = FieldUtils.safeAdd(endMillis, -startMillis);",2,0,0,0,2,0,3,0,2,4,54,6,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,93,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,103,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,104,        DurationConverter converter = ConverterManager.getInstance().getDurationConverter(duration);,1,0,0,1,4,0,4,1,0,5,92,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,105,        iMillis = converter.getDurationMillis(duration);,1,0,0,1,2,0,3,0,1,5,48,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,106,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,125,        iMillis = duration;,2,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,126,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,144,"        return new Period(getMillis(), type);",1,0,0,1,4,2,1,1,2,7,37,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,164,"        return new Period(getMillis(), chrono);",1,0,0,1,4,2,1,1,2,7,39,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,185,"        return new Period(getMillis(), type, chrono);",2,0,0,1,4,2,1,1,2,7,45,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,200,"        return new Period(startInstant, this);",1,0,0,0,2,3,0,1,1,5,38,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,216,"        return new Period(startInstant, this, type);",2,0,0,0,2,3,0,1,1,5,44,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,232,"        return new Period(this, endInstant);",1,0,0,0,2,3,0,1,1,5,36,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,249,"        return new Period(this, endInstant, type);",2,0,0,0,2,3,0,1,1,5,42,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,259,"        return new Interval(startInstant, this);",1,0,0,0,2,3,0,1,1,5,40,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDuration,22,269,"        return new Interval(this, endInstant);",1,0,0,0,2,3,0,1,1,5,38,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,54,        return new Duration(getMillis());,0,0,0,2,4,2,1,1,2,6,33,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,93,        long thisMillis = this.getMillis();,1,0,0,1,2,2,1,0,0,5,35,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,94,        long otherMillis = other.getMillis();,1,0,0,1,2,1,2,0,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,97,        if (thisMillis < otherMillis) {,2,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,98,            return -1;,0,0,0,0,0,1,0,0,1,2,10,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,100,        if (thisMillis > otherMillis) {,2,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,101,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,103,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,113,        if (duration == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,114,            duration = Duration.ZERO;,3,0,0,0,0,0,0,0,1,2,25,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,116,        return compareTo(duration) == 0;,0,1,0,1,2,1,2,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,126,        if (duration == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,127,            duration = Duration.ZERO;,3,0,0,0,0,0,0,0,1,2,25,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,129,        return compareTo(duration) > 0;,0,1,0,1,2,1,2,0,1,6,31,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,139,        if (duration == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,140,            duration = Duration.ZERO;,3,0,0,0,0,0,0,0,1,2,25,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,142,        return compareTo(duration) < 0;,0,1,0,1,2,1,2,0,1,6,31,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,154,        if (this == duration) {,1,1,0,1,3,2,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,155,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,157,        if (duration instanceof ReadableDuration == false) {,1,1,0,1,3,2,0,1,1,7,52,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,158,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,160,        ReadableDuration other = (ReadableDuration) duration;,2,0,0,1,2,0,0,2,0,4,53,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,161,        return (getMillis() == other.getMillis());,0,1,0,2,6,1,3,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,171,        long len = getMillis();,1,0,0,1,2,1,1,0,1,6,23,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,172,        return (int) (len ^ (len >>> 32));,2,2,0,2,6,2,0,0,0,5,34,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,189,        long millis = getMillis();,1,0,0,1,2,1,1,0,1,6,26,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,190,        StringBuffer buf = new StringBuffer();,1,0,0,1,2,1,0,2,1,6,38,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,191,"        buf.append(""PT"");",0,0,0,1,2,0,2,0,1,4,17,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,192,        boolean negative = (millis < 0);,2,1,0,1,2,1,0,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,193,"        FormatUtils.appendUnpaddedInteger(buf, millis);",0,0,0,0,2,0,4,0,0,2,47,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,194,        while (buf.length() < (negative ? 7 : 6)) {,1,1,0,2,7,1,2,0,0,6,43,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,195,"            buf.insert(negative ? 3 : 2, ""0"");",1,0,0,0,2,0,2,0,1,4,34,7,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,197,        if ((millis / 1000) * 1000 == millis) {,2,3,0,2,5,1,0,0,0,5,39,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,198,            buf.setLength(buf.length() - 3);,0,1,0,2,4,0,4,0,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,200,"            buf.insert(buf.length() - 3, ""."");",0,1,0,1,4,0,4,0,1,5,34,7,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,202,        buf.append('S');,0,0,0,1,2,0,2,0,1,4,16,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,203,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDuration,22,38,public abstract class AbstractDuration implements ReadableDuration {,1,0,0,0,1,4,0,1,2,5,68,1,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,423,            return iMillis;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1362,                        index = in.readUnsignedShort();,1,0,0,1,2,0,2,0,1,5,31,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1365,                } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1366,"                    throw new IOException(""Invalid encoding"");",0,0,0,1,2,2,0,1,2,5,42,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1389,            int size = transitions.size();,1,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1390,            if (size == 0) {,1,1,0,1,3,1,0,0,0,5,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1391,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1394,            long[] trans = new long[size];,1,0,1,0,4,3,0,0,0,4,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1395,            int[] wallOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1396,            int[] standardOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1397,            String[] nameKeys = new String[size];,1,0,1,0,4,1,0,2,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1399,            Transition last = null;,1,0,0,0,0,0,0,1,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1400,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1401,                Transition tr = transitions.get(i);,1,0,0,1,2,0,3,1,0,5,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1403,                if (!tr.isTransitionFrom(last)) {,0,0,0,2,5,1,3,0,1,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1404,                    throw new IllegalArgumentException(id);,1,0,0,1,2,2,0,1,1,6,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1407,                trans[i] = tr.getMillis();,0,0,1,1,4,0,2,0,1,5,26,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1408,                wallOffsets[i] = tr.getWallOffset();,0,0,1,1,4,0,2,0,1,5,36,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1409,                standardOffsets[i] = tr.getStandardOffset();,0,0,1,1,4,0,2,0,1,5,44,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1410,                nameKeys[i] = tr.getNameKey();,0,0,1,1,4,0,2,0,1,5,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1412,                last = tr;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1417,            String[] zoneNameData = new String[5];,1,0,0,0,4,1,0,2,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1418,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,3,0,0,1,8,1,1,2,1,7,80,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1419,            for (int j = 0; j < zoneStrings.length; j++) {,5,1,0,1,3,2,0,0,1,6,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1420,                String[] set = zoneStrings[j];,1,0,1,0,4,0,0,1,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,3,4,1,2,7,1,2,0,0,7,58,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1422,                    zoneNameData = set;,2,0,0,0,0,0,0,0,1,2,19,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1426,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,5,2,0,1,3,2,0,0,1,6,47,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1429,                String curNameKey = nameKeys[i];,1,0,1,0,2,0,0,1,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1430,                String nextNameKey = nameKeys[i + 1];,2,1,1,0,2,0,0,1,0,5,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1431,                long curOffset = wallOffsets[i];,1,0,1,0,2,1,0,0,0,4,32,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1432,                long nextOffset = wallOffsets[i + 1];,2,1,1,0,2,1,0,0,0,5,37,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1433,                long curStdOffset = standardOffsets[i];,1,0,1,0,2,1,0,0,0,4,39,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1434,                long nextStdOffset = standardOffsets[i + 1];,2,1,1,0,2,1,0,0,0,5,44,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",3,1,1,1,8,1,2,2,1,9,81,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1436,                if (curOffset != nextOffset &&,2,8,0,0,1,1,0,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1443,                    if (ZoneInfoCompiler.verbose()) {,0,0,0,2,5,1,2,0,0,4,33,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",3,1,0,1,2,0,1,0,1,6,65,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",3,1,1,0,5,1,1,1,2,8,63,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1448,                    if (curOffset > nextOffset) {,2,1,0,1,3,1,0,0,0,5,29,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",1,1,1,1,6,0,1,0,2,7,48,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1450,                    } else if (curOffset < nextOffset) {,2,1,0,1,4,2,0,0,0,5,36,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",2,2,1,1,6,0,1,0,2,7,53,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1452,                        i++;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1457,            if (tailZone != null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1458,                if (tailZone.iStartRecurrence.getNameKey(),2,0,0,1,3,1,1,0,0,5,42,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1460,                    if (ZoneInfoCompiler.verbose()) {,0,0,0,2,5,1,2,0,0,4,33,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",2,1,0,0,1,0,1,0,1,5,61,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1464,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,2,1,0,2,5,1,1,0,0,6,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1465,                        tailZone = new DSTZone(,1,0,0,0,1,1,0,1,2,5,23,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1471,                        tailZone = new DSTZone(,1,0,0,0,1,1,0,1,2,5,23,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1480,            return new PrecalculatedZone,0,0,0,0,0,2,0,1,1,3,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1509,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1510,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1511,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1512,                return iNameKeys[i];,0,0,1,0,2,1,0,0,0,3,20,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1514,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1515,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1516,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1517,                    return iNameKeys[i - 1];,1,1,1,0,2,1,0,0,0,5,24,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1519,"                return ""UTC"";",0,0,0,0,0,1,0,0,1,2,13,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1521,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1522,                return iNameKeys[i - 1];,1,1,1,0,2,1,0,0,0,5,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1524,            return iTailZone.getNameKey(instant);,0,0,0,1,2,1,3,0,0,4,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1528,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1529,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1530,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1531,                return iWallOffsets[i];,0,0,1,0,2,1,0,0,0,3,23,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1533,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1534,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1535,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1536,                    return iWallOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,27,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1538,                return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1540,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1541,                return iWallOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,27,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1543,            return iTailZone.getOffset(instant);,0,0,0,1,2,1,3,0,0,4,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1547,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1548,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1549,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1550,                return iStandardOffsets[i];,0,0,1,0,2,1,0,0,0,3,27,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1552,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1553,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1554,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1555,                    return iStandardOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,31,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1557,                return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1559,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1560,                return iStandardOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,31,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1562,            return iTailZone.getStandardOffset(instant);,0,0,0,1,2,1,3,0,0,4,44,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1566,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1570,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1571,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1572,            i = (i >= 0) ? (i + 1) : ~i;,4,2,0,1,4,0,0,0,2,5,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1573,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1574,                return transitions[i];,0,0,1,0,2,1,0,0,0,3,22,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1576,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1577,                return instant;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1579,            long end = transitions[transitions.length - 1];,3,1,1,0,2,1,0,0,0,5,47,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1580,            if (instant < end) {,2,1,0,1,3,1,0,0,0,5,20,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1581,                instant = end;,2,0,0,0,0,0,0,0,1,2,14,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1583,            return iTailZone.nextTransition(instant);,0,0,0,1,2,1,3,0,0,4,41,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1587,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1588,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1589,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1590,                if (instant > Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1591,                    return instant - 1;,1,1,0,0,0,1,0,0,0,3,19,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1593,                return instant;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1595,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1596,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1597,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1598,                    long prev = transitions[i - 1];,2,1,1,0,2,1,0,0,0,5,31,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1599,                    if (prev > Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,28,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1600,                        return prev - 1;,1,1,0,0,0,1,0,0,0,3,16,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1603,                return instant;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1605,            if (iTailZone != null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1606,                long prev = iTailZone.previousTransition(instant);,1,0,0,1,2,1,3,0,0,5,50,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1607,                if (prev < instant) {,2,1,0,1,3,1,0,0,0,5,21,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1608,                    return prev;,1,0,0,0,0,1,0,0,0,2,12,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1611,            long prev = transitions[i - 1];,2,1,1,0,2,1,0,0,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1612,            if (prev > Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1613,                return prev - 1;,1,1,0,0,0,1,0,0,0,3,16,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1615,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1619,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1620,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1622,            if (obj instanceof PrecalculatedZone) {,1,0,0,1,3,2,0,1,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1623,                PrecalculatedZone other = (PrecalculatedZone)obj;,2,0,0,1,2,0,0,2,0,4,49,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1624,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1634,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1638,            int size = iTransitions.length;,3,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1641,            Set<String> poolSet = new HashSet<String>();,1,0,0,1,2,1,0,4,1,6,44,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1642,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1643,                poolSet.add(iNameKeys[i]);,0,0,1,1,4,0,2,0,0,4,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1646,            int poolSize = poolSet.size();,1,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1647,            if (poolSize > 65535) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1648,"                throw new UnsupportedOperationException(""String pool is too large"");",0,0,0,1,2,2,0,1,2,5,68,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1650,            String[] pool = new String[poolSize];,1,0,1,0,4,1,0,2,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1651,            Iterator<String> it = poolSet.iterator();,1,0,0,1,2,0,2,2,0,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1652,            for (int i=0; it.hasNext(); i++) {,2,0,0,2,5,2,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1653,                pool[i] = it.next();,0,0,1,1,4,0,2,0,1,5,20,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1657,            out.writeShort(poolSize);,0,0,0,1,2,0,3,0,0,3,25,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1658,            for (int i=0; i<poolSize; i++) {,4,1,0,1,3,2,0,0,1,6,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1659,                out.writeUTF(pool[i]);,0,0,1,1,4,0,2,0,0,4,22,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1662,            out.writeInt(size);,0,0,0,1,2,0,3,0,0,3,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1664,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1665,"                writeMillis(out, iTransitions[i]);",0,0,1,0,4,0,2,0,1,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1666,"                writeMillis(out, iWallOffsets[i]);",0,0,1,0,4,0,2,0,1,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1667,"                writeMillis(out, iStandardOffsets[i]);",0,0,1,0,4,0,2,0,1,4,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1670,                String nameKey = iNameKeys[i];,1,0,1,0,2,0,0,1,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1671,                for (int j=0; j<poolSize; j++) {,4,1,0,1,3,2,0,0,1,6,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1672,                    if (pool[j].equals(nameKey)) {,0,0,1,2,7,1,2,0,0,5,30,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1673,                        if (poolSize < 256) {,1,1,0,1,3,1,0,0,0,5,21,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1674,                            out.writeByte(j);,0,0,0,1,2,0,3,0,0,3,17,14,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1676,                            out.writeShort(j);,0,0,0,1,2,0,3,0,0,3,18,14,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1678,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1683,            out.writeBoolean(iTailZone != null);,1,1,0,1,2,0,2,0,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1684,            if (iTailZone != null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1685,                iTailZone.writeTo(out);,0,0,0,1,2,0,3,0,0,3,23,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1687,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1690,            if (iTailZone != null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1691,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1693,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1694,            if (transitions.length <= 1) {,2,1,0,1,3,1,0,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1695,                return false;,0,0,0,0,0,1,0,0,1,2,13,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1700,            double distances = 0;,1,0,0,0,0,1,0,0,0,2,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1701,            int count = 0;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1703,            for (int i=1; i<transitions.length; i++) {,5,1,0,1,3,2,0,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1704,                long diff = transitions[i] - transitions[i - 1];,2,2,1,0,4,1,0,0,0,5,48,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1705,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,1,3,0,3,7,1,0,0,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1706,                    distances += (double)diff;,2,0,0,1,2,1,0,0,1,5,26,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1707,                    count++;,1,0,0,0,0,0,0,0,1,2,8,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1711,            if (count > 0) {,1,1,0,1,3,1,0,0,0,5,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1712,                double avg = distances / count;,3,1,0,0,0,1,0,0,0,3,31,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1713,                avg /= 24 * 60 * 60 * 1000;,1,1,0,0,0,0,0,0,1,3,27,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1714,                if (avg >= 25) {,1,1,0,1,3,1,0,0,0,5,16,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1721,                    return true;,0,0,0,0,0,1,0,0,1,2,12,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1725,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/JodaTimePermission,22,57,        super(name);,1,0,0,1,2,1,0,0,1,5,12,3,0.0,0,0
defect4j,time,org/joda/time/JodaTimePermission,22,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,45,        return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,53,        return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,65,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,69,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,77,        String id = getID();,1,0,0,1,2,0,1,1,1,6,20,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0,3,0,3,11,1,6,0,2,6,69,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",3,1,0,2,4,1,2,0,2,7,55,7,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",4,0,0,1,4,2,1,0,2,6,58,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,91,        if (obj instanceof FixedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,39,5,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,92,            FixedDateTimeZone other = (FixedDateTimeZone)obj;,2,0,0,1,2,0,0,2,0,4,49,6,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,93,            return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,22,98,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,77,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,97,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,143,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,144,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,146,        if (zone == getZone()) {,1,1,0,2,5,1,1,0,1,7,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,147,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,149,        return getInstance(zone);,0,0,0,1,2,1,2,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,160,"        String str = ""ISOChronology"";",1,0,0,0,0,0,0,1,1,3,29,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,161,        DateTimeZone zone = getZone();,1,0,0,1,2,0,1,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,162,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,163,            str = str + '[' + zone.getID() + ']';,2,1,0,1,4,0,2,0,3,6,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,165,        return str;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,190,        return super.equals(obj);,2,0,0,1,2,2,0,0,0,4,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0,2,0,1,6,1,3,0,2,6,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,208,        return new Stub(getZone());,0,0,0,2,4,2,1,1,2,6,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,110,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,3,4,0,2,7,1,0,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0,0,0,0,2,1,6,0,0,3,74,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",5,0,0,0,2,2,0,0,0,3,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,3,4,0,2,7,1,0,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,5,0,0,3,60,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",4,0,0,0,1,2,0,0,0,3,61,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,3,4,0,2,7,1,0,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,148,            return base.getDateTimeMillis,0,0,0,0,0,1,2,0,0,2,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,151,        return super.getDateTimeMillis,1,0,0,0,0,2,0,0,0,2,30,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,389,        in.defaultReadObject();,0,0,0,1,2,0,2,0,0,3,23,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,390,        setFields();,0,0,0,1,2,0,1,0,1,4,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,391,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,56,    public ZoneInfoProvider(File fileDir) throws IOException {,3,0,0,1,3,2,0,1,1,6,58,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,57,        if (fileDir == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,58,"            throw new IllegalArgumentException(""No file directory provided"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,60,        if (!fileDir.exists()) {,0,0,0,2,5,1,2,0,1,5,24,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",1,1,0,1,2,2,0,1,2,7,66,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,63,        if (!fileDir.isDirectory()) {,0,0,0,2,5,1,2,0,1,5,29,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",1,1,0,1,2,2,0,1,2,7,71,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,67,        iFileDir = fileDir;,2,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,68,        iResourcePath = null;,1,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,69,        iLoader = null;,1,0,0,0,0,0,0,0,1,2,15,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",1,0,0,2,4,0,2,0,4,5,60,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,96,"        this(resourcePath, loader, true);",2,0,0,0,2,1,0,0,1,4,33,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,97,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,108,"            throw new IllegalArgumentException(""No resource path provided"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,137,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,158,            return loadZoneData(id);,0,0,0,1,2,1,2,0,1,5,24,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,162,        return getZone((String)obj);,1,0,0,2,4,1,1,1,1,7,28,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,183,        Thread t = Thread.currentThread();,1,0,0,1,2,0,2,1,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,184,"        t.getThreadGroup().uncaughtException(t, ex);",0,0,0,1,4,0,5,0,0,3,44,5,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,185,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,197,"            in = new FileInputStream(new File(iFileDir, name));",3,0,0,0,4,2,0,2,3,5,51,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,203,                in = ClassLoader.getSystemResourceAsStream(path);,1,0,0,1,2,0,3,0,1,5,49,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,206,                StringBuffer buf = new StringBuffer(40),1,0,0,1,2,1,0,2,1,6,39,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,211,                throw new IOException(buf.toString());,0,0,0,2,4,2,2,1,1,6,38,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,239,            } catch (IOException e) {,1,0,0,1,4,1,0,1,0,5,25,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,230,        } catch (IOException e) {,1,0,0,1,4,1,0,1,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,231,            uncaughtException(e);,0,0,0,1,2,0,2,0,1,4,21,7,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,232,            iZoneInfoMap.remove(id);,0,0,0,1,2,0,3,0,0,3,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,233,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,235,            try {,0,0,0,0,1,1,0,0,0,2,5,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,259,            } catch (IOException e) {,1,0,0,1,4,1,0,1,0,5,25,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,261,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,257,            try {,0,0,0,0,1,1,0,0,0,2,5,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,285,            } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,22,286,"                throw new IOException(""Corrupt zone info map"");",0,0,0,1,2,2,0,1,2,5,47,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",1,1,0,1,2,2,0,1,2,7,60,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,522,            if (iMode == 'w') {,1,1,0,1,3,1,0,0,1,6,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,523,                offset = standardOffset + saveMillis;,3,1,0,0,0,0,0,0,1,3,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,524,            } else if (iMode == 's') {,1,1,0,1,4,2,0,0,1,6,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,525,                offset = standardOffset;,2,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,527,                offset = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,530,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,531,"            long millis = chrono.year().set(0, year);",1,0,0,1,4,1,4,0,0,5,41,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",1,0,0,1,4,0,5,0,1,5,56,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",1,0,0,1,4,0,5,0,1,5,56,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,534,"            millis = setDayOfMonth(chrono, millis);",1,0,0,0,2,0,3,0,2,4,39,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,536,            if (iDayOfWeek != 0) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,537,"                millis = setDayOfWeek(chrono, millis);",1,0,0,0,2,0,3,0,2,4,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,541,            return millis - offset;,2,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,549,            if (iMode == 'w') {,1,1,0,1,3,1,0,0,1,6,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,550,                offset = standardOffset + saveMillis;,3,1,0,0,0,0,0,0,1,3,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,551,            } else if (iMode == 's') {,1,1,0,1,4,2,0,0,1,6,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,552,                offset = standardOffset;,2,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,554,                offset = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,558,            instant += offset;,2,0,0,0,0,0,0,0,1,2,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,560,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",1,0,0,1,4,1,5,0,0,5,60,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,563,"            next = chrono.millisOfDay().set(next, 0);",1,0,0,1,4,0,4,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",1,0,0,1,4,0,5,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,565,"            next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,567,            if (iDayOfWeek == 0) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,568,                if (next <= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,569,"                    next = chrono.year().add(next, 1);",1,0,0,1,4,0,4,0,1,5,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,570,"                    next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,573,"                next = setDayOfWeek(chrono, next);",1,0,0,0,2,0,3,0,2,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,574,                if (next <= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,575,"                    next = chrono.year().add(next, 1);",1,0,0,1,4,0,4,0,1,5,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",1,0,0,1,4,0,5,0,1,5,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,577,"                    next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,578,"                    next = setDayOfWeek(chrono, next);",1,0,0,0,2,0,3,0,2,4,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,583,            return next - offset;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,591,            if (iMode == 'w') {,1,1,0,1,3,1,0,0,1,6,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,592,                offset = standardOffset + saveMillis;,3,1,0,0,0,0,0,0,1,3,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,593,            } else if (iMode == 's') {,1,1,0,1,4,2,0,0,1,6,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,594,                offset = standardOffset;,2,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,596,                offset = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,600,            instant += offset;,2,0,0,0,0,0,0,0,1,2,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,602,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",1,0,0,1,4,1,5,0,0,5,60,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,605,"            prev = chrono.millisOfDay().set(prev, 0);",1,0,0,1,4,0,4,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",1,0,0,1,4,0,5,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,607,"            prev = setDayOfMonthPrevious(chrono, prev);",1,0,0,0,2,0,3,0,2,4,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,609,            if (iDayOfWeek == 0) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,610,                if (prev >= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,611,"                    prev = chrono.year().add(prev, -1);",1,0,0,1,4,0,4,0,2,5,35,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",1,0,0,0,2,0,3,0,2,4,43,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,615,"                prev = setDayOfWeek(chrono, prev);",1,0,0,0,2,0,3,0,2,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,616,                if (prev >= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,617,"                    prev = chrono.year().add(prev, -1);",1,0,0,1,4,0,4,0,2,5,35,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",1,0,0,1,4,0,5,0,1,5,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",1,0,0,0,2,0,3,0,2,4,43,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,620,"                    prev = setDayOfWeek(chrono, prev);",1,0,0,0,2,0,3,0,2,4,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,625,            return prev - offset;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,629,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,630,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,632,            if (obj instanceof OfYear) {,1,0,0,1,3,2,0,1,0,5,28,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,633,                OfYear other = (OfYear)obj;,2,0,0,1,2,0,0,2,0,4,27,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,634,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,642,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,659,            out.writeByte(iMode);,0,0,0,1,2,0,3,0,0,3,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,660,            out.writeByte(iMonthOfYear);,0,0,0,1,2,0,3,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,661,            out.writeByte(iDayOfMonth);,0,0,0,1,2,0,3,0,0,3,27,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,662,            out.writeByte(iDayOfWeek);,0,0,0,1,2,0,3,0,0,3,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,663,            out.writeBoolean(iAdvance);,0,0,0,1,2,0,3,0,0,3,27,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,664,"            writeMillis(out, iMillisOfDay);",0,0,0,0,2,0,3,0,1,3,31,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,665,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,672,"                next = setDayOfMonth(chrono, next);",1,0,0,0,2,0,3,0,2,4,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,682,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,673,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,2,3,0,1,3,1,0,0,0,5,45,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,675,                    while (chrono.year().isLeap(next) == false) {,0,1,0,2,7,1,4,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,676,"                        next = chrono.year().add(next, 1);",1,0,0,1,4,0,4,0,1,5,34,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,678,"                    next = setDayOfMonth(chrono, next);",1,0,0,0,2,0,3,0,2,4,35,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,680,                    throw e;,1,0,0,0,0,1,0,0,0,2,8,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,683,            return next;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,691,"                prev = setDayOfMonth(chrono, prev);",1,0,0,0,2,0,3,0,2,4,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,701,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,692,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,2,3,0,1,3,1,0,0,0,5,45,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,694,                    while (chrono.year().isLeap(prev) == false) {,0,1,0,2,7,1,4,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,695,"                        prev = chrono.year().add(prev, -1);",1,0,0,1,4,0,4,0,2,5,35,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,697,"                    prev = setDayOfMonth(chrono, prev);",1,0,0,0,2,0,3,0,2,4,35,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,699,                    throw e;,1,0,0,0,0,1,0,0,0,2,8,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,702,            return prev;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,706,            if (iDayOfMonth >= 0) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",1,0,0,1,4,0,5,0,1,5,56,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,709,"                instant = chrono.dayOfMonth().set(instant, 1);",1,0,0,1,4,0,4,0,1,5,46,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,710,"                instant = chrono.monthOfYear().add(instant, 1);",1,0,0,1,4,0,4,0,1,5,47,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",1,0,0,1,4,0,5,0,1,5,56,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,713,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,1,0,0,1,4,1,4,0,0,5,48,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,3,1,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,719,            if (daysToAdd != 0) {,1,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,720,                if (iAdvance) {,1,0,0,1,3,1,0,0,0,4,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,721,                    if (daysToAdd < 0) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,722,                        daysToAdd += 7;,1,0,0,0,0,0,0,0,1,2,15,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,725,                    if (daysToAdd > 0) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,726,                        daysToAdd -= 7;,1,0,0,0,0,0,0,0,1,2,15,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",1,0,0,1,4,0,5,0,1,5,53,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,731,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1183,            return findMatchingRecurrence(instant).getNameKey();,0,0,0,1,4,1,3,0,1,5,52,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,1,1,0,1,4,1,3,0,1,7,73,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1191,            return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1195,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1199,            int standardOffset = iStandardOffset;,2,0,0,0,0,1,0,0,0,2,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1200,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,0,1,0,2,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1201,            Recurrence endRecurrence = iEndRecurrence;,2,0,0,0,0,0,0,1,0,2,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1206,                start = startRecurrence.next,1,0,0,0,0,0,2,0,1,3,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1208,                if (instant > 0 && start < 0) {,2,3,0,1,3,1,0,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1210,                    start = instant;,2,0,0,0,0,0,0,0,1,2,16,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1218,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1212,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1214,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1215,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1217,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1221,                end = endRecurrence.next,1,0,0,0,0,0,2,0,1,3,24,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1223,                if (instant > 0 && end < 0) {,2,3,0,1,3,1,0,0,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1225,                    end = instant;,2,0,0,0,0,0,0,0,1,2,14,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1233,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1227,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1229,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1230,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1232,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1235,            return (start > end) ? end : start;,4,1,0,1,2,1,0,0,0,5,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1241,            instant++;,1,0,0,0,0,0,0,0,1,2,10,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1243,            int standardOffset = iStandardOffset;,2,0,0,0,0,1,0,0,0,2,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1244,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,0,1,0,2,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1245,            Recurrence endRecurrence = iEndRecurrence;,2,0,0,0,0,0,0,1,0,2,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1250,                start = startRecurrence.previous,1,0,0,0,0,0,2,0,1,3,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1252,                if (instant < 0 && start > 0) {,2,3,0,1,3,1,0,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1254,                    start = instant;,2,0,0,0,0,0,0,0,1,2,16,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1262,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1256,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1258,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1259,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1261,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1265,                end = endRecurrence.previous,1,0,0,0,0,0,2,0,1,3,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1267,                if (instant < 0 && end > 0) {,2,3,0,1,3,1,0,0,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1269,                    end = instant;,2,0,0,0,0,0,0,0,1,2,14,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1277,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1271,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1273,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1274,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1276,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1279,            return ((start > end) ? start : end) - 1;,4,2,0,2,4,1,0,0,0,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1283,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1284,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1286,            if (obj instanceof DSTZone) {,1,0,0,1,3,2,0,1,0,5,29,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1287,                DSTZone other = (DSTZone)obj;,2,0,0,1,2,0,0,2,0,4,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1288,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1294,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1298,"            writeMillis(out, iStandardOffset);",0,0,0,0,2,0,3,0,1,3,34,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1299,            iStartRecurrence.writeTo(out);,0,0,0,1,2,0,3,0,0,3,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1300,            iEndRecurrence.writeTo(out);,0,0,0,1,2,0,3,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1301,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1304,            int standardOffset = iStandardOffset;,2,0,0,0,0,1,0,0,0,2,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1305,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,0,1,0,2,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1306,            Recurrence endRecurrence = iEndRecurrence;,2,0,0,0,0,0,0,1,0,2,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1311,                start = startRecurrence.next,1,0,0,0,0,0,2,0,1,3,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1319,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1313,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1315,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1316,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1318,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1322,                end = endRecurrence.next,1,0,0,0,0,0,2,0,1,3,24,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1330,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1324,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1326,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1327,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1329,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1332,            return (start > end) ? startRecurrence : endRecurrence;,4,1,0,1,2,1,0,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,188,"        Info(DateTimeZone zone, long periodStart) {",3,0,0,0,3,1,0,1,0,4,43,3,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,185,        private int iOffset = Integer.MIN_VALUE;,3,0,0,0,0,2,0,0,1,3,40,3,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,186,        private int iStandardOffset = Integer.MIN_VALUE;,3,0,0,0,0,2,0,0,1,3,48,3,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,189,            iPeriodStart = periodStart;,2,0,0,0,0,0,0,0,1,2,27,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,190,            iZoneRef = zone;,2,0,0,0,0,0,0,0,1,2,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,191,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,194,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,4,3,0,1,3,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,195,                if (iNameKey == null) {,1,1,0,1,3,1,0,0,0,5,23,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,196,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,1,0,0,1,2,0,3,0,1,5,45,9,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,198,                return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,200,            return iNextInfo.getNameKey(millis);,0,0,0,1,2,1,3,0,0,4,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,204,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,4,3,0,1,3,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,205,                if (iOffset == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,206,                    iOffset = iZoneRef.getOffset(iPeriodStart);,1,0,0,1,2,0,3,0,1,5,43,9,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,208,                return iOffset;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,210,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,3,0,0,4,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,214,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,4,3,0,1,3,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,215,                if (iStandardOffset == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,216,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,1,0,0,1,2,0,3,0,1,5,59,9,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,218,                return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,220,            return iNextInfo.getStandardOffset(millis);,0,0,0,1,2,1,3,0,0,4,43,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,40,        } catch (SecurityException e) {,1,0,0,1,4,1,0,1,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,41,            i = null;,1,0,0,0,0,0,0,0,1,2,9,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,50,            cacheSize = i.intValue();,1,0,0,1,2,0,2,0,1,5,25,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,52,            cacheSize--;,1,0,0,0,0,0,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,53,            int shift = 0;,1,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,54,            while (cacheSize > 0) {,1,1,0,1,3,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,55,                shift++;,1,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,56,                cacheSize >>= 1;,1,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,58,            cacheSize = 1 << shift;,2,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,69,            return (CachedDateTimeZone)zone;,1,0,0,1,2,1,0,1,0,5,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,95,        in.defaultReadObject();,0,0,0,1,2,0,2,0,0,3,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,96,        iInfoCache = new Info[cInfoCacheMask + 1];,2,1,0,0,2,1,0,1,1,6,42,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,97,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,103,        return iZone;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,107,        return getInfo(instant).getNameKey(instant);,0,0,0,1,4,1,4,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,111,        return getInfo(instant).getOffset(instant);,0,0,0,1,4,1,4,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,115,        return getInfo(instant).getStandardOffset(instant);,0,0,0,1,4,1,4,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,119,        return iZone.isFixed();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,123,        return iZone.nextTransition(instant);,0,0,0,1,2,1,3,0,0,4,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,127,        return iZone.previousTransition(instant);,0,0,0,1,2,1,3,0,0,4,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,131,        return iZone.hashCode();,0,0,0,1,2,1,2,0,0,4,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,135,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,136,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,138,        if (obj instanceof CachedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,139,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,2,0,0,3,6,1,2,1,0,6,53,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,141,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,148,        int period = (int)(millis >> 32);,2,1,0,1,4,2,0,0,0,5,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,149,        Info[] cache = iInfoCache;,2,0,0,0,2,0,0,1,0,3,26,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,150,        int index = period & cInfoCacheMask;,3,1,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,151,        Info info = cache[index];,1,0,1,0,2,0,0,1,0,4,25,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,152,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,4,4,0,3,9,2,0,0,0,5,65,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,153,            info = createInfo(millis);,1,0,0,1,2,0,2,0,2,5,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,154,            cache[index] = info;,1,0,1,0,2,0,0,0,1,4,20,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,156,        return info;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,160,        long periodStart = millis & (0xffffffffL << 32);,2,2,0,1,2,1,0,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,161,"        Info info = new Info(iZone, periodStart);",3,0,0,0,2,1,0,2,1,5,41,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,163,        long end = periodStart | 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,164,        Info chain = info;,2,0,0,0,0,0,0,1,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,166,            long next = iZone.nextTransition(periodStart);,1,0,0,1,2,1,3,0,0,5,46,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,167,            if (next == periodStart || next > end) {,4,3,0,1,3,1,0,0,0,5,40,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,168,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,170,            periodStart = next;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",5,0,0,0,4,1,0,1,3,5,57,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,172,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,22,174,        return info;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,883,"        Transition(long millis, Transition tr) {",3,0,0,0,3,1,0,1,0,4,40,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,884,            iMillis = millis;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,885,            iNameKey = tr.iNameKey;,3,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,886,            iWallOffset = tr.iWallOffset;,3,0,0,0,0,0,0,0,1,2,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,887,            iStandardOffset = tr.iStandardOffset;,3,0,0,0,0,0,0,0,1,2,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,888,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,890,"        Transition(long millis, Rule rule, int standardOffset) {",4,0,0,0,3,2,0,1,0,4,56,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,891,            iMillis = millis;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,892,            iNameKey = rule.getNameKey();,1,0,0,1,2,0,2,0,1,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,893,            iWallOffset = standardOffset + rule.getSaveMillis();,2,1,0,1,2,0,2,0,1,6,52,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,894,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,895,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,898,"                   int wallOffset, int standardOffset) {",2,0,0,0,2,2,0,0,0,3,37,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,899,            iMillis = millis;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,900,            iNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,901,            iWallOffset = wallOffset;,2,0,0,0,0,0,0,0,1,2,25,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,902,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,903,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,906,            return iMillis;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,910,            return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,914,            return iWallOffset;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,918,            return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,922,            return iWallOffset - iStandardOffset;,2,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,929,            if (other == null) {,1,1,0,1,3,1,0,0,0,5,20,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,930,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,932,            return iMillis > other.iMillis &&,3,2,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,225,    public DateTimeZoneBuilder() {,1,0,0,1,3,1,0,0,1,5,30,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,226,        iRuleSets = new ArrayList<RuleSet>(10);,1,0,0,1,2,1,0,2,2,6,39,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,227,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,96,"            return readFrom((DataInput)in, id);",1,0,0,1,4,1,2,1,1,7,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,112,            DateTimeZone fixed = new FixedDateTimeZone,1,0,0,0,0,1,0,2,1,4,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,114,            if (fixed.equals(DateTimeZone.UTC)) {,2,0,0,2,5,1,2,0,0,5,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,115,                fixed = DateTimeZone.UTC;,3,0,0,0,0,0,0,0,1,2,25,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,117,            return fixed;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,121,"            return PrecalculatedZone.readFrom(in, id);",0,0,0,0,2,1,4,0,0,3,42,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,123,"            throw new IOException(""Invalid encoding"");",0,0,0,1,2,2,0,1,2,5,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,140,        if (millis % (30 * 60000L) == 0) {,1,3,0,2,5,1,0,0,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,142,            long units = millis / (30 * 60000L);,2,2,0,1,2,1,0,0,0,5,36,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,2,5,0,4,11,1,0,0,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,145,                out.writeByte((int)(units & 0x3f));,1,1,0,2,6,1,2,0,0,6,35,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,146,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,150,        if (millis % 60000L == 0) {,1,2,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,152,            long minutes = millis / 60000L;,2,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,2,5,0,4,11,1,0,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,1,2,0,2,6,1,2,0,0,6,55,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,156,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,160,        if (millis % 1000L == 0) {,1,2,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,162,            long seconds = millis / 1000L;,2,1,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,2,5,0,4,11,1,0,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,1,3,0,3,8,1,2,0,0,6,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,166,                out.writeInt((int)(seconds & 0xffffffff));,1,1,0,2,6,1,2,0,0,6,42,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,167,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,1,1,0,1,2,0,2,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,176,        out.writeLong(millis);,0,0,0,1,2,0,3,0,0,3,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,177,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0,2,0,1,5,1,5,0,1,6,45,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,217,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",4,0,0,0,2,2,0,1,1,5,70,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,252,        OfYear ofYear = new OfYear,1,0,0,0,0,1,0,2,1,4,26,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,254,        if (iRuleSets.size() > 0) {,0,1,0,2,5,1,2,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,1,1,0,2,4,0,4,1,0,6,58,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0,0,0,0,2,0,4,0,0,2,40,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,258,        iRuleSets.add(new RuleSet());,0,0,0,2,4,1,2,1,1,6,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,259,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,268,        getLastRuleSet().setStandardOffset(standardOffset);,0,0,0,1,4,0,3,0,1,4,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,269,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0,0,0,1,4,0,4,0,1,4,54,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,277,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,309,        if (fromYear <= toYear) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,310,            OfYear ofYear = new OfYear,1,0,0,0,0,1,0,2,1,4,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",4,0,0,0,2,1,0,2,1,5,68,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",4,0,0,0,2,1,0,2,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,314,            getLastRuleSet().addRule(rule);,0,0,0,1,4,0,3,0,1,4,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,316,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,320,        if (iRuleSets.size() == 0) {,0,1,0,2,5,1,2,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",2,0,0,0,2,0,1,0,3,4,54,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,323,        return iRuleSets.get(iRuleSets.size() - 1);,0,1,0,2,4,1,4,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,333,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,334,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,1,0,0,1,2,1,0,4,1,6,64,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,343,        DSTZone tailZone = null;,1,0,0,0,0,0,0,1,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,345,        long millis = Long.MIN_VALUE;,3,0,0,0,0,1,0,0,0,2,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,346,        int saveMillis = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,348,        int ruleSetCount = iRuleSets.size();,1,0,0,1,2,1,2,0,0,5,36,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,349,        for (int i=0; i<ruleSetCount; i++) {,4,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,350,            RuleSet rs = iRuleSets.get(i);,1,0,0,1,2,0,3,1,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,351,            Transition next = rs.firstTransition(millis);,1,0,0,1,2,0,3,1,0,5,45,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,352,            if (next == null) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,353,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,355,"            addTransition(transitions, next);",0,0,0,0,2,0,3,0,1,3,33,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,356,            millis = next.getMillis();,1,0,0,1,2,0,2,0,1,5,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,357,            saveMillis = next.getSaveMillis();,1,0,0,1,2,0,2,0,1,5,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,360,            rs = new RuleSet(rs);,2,0,0,1,2,1,0,1,2,6,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",1,1,0,0,7,1,4,0,1,6,64,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,363,"                if (addTransition(transitions, next)) {",0,0,0,0,5,1,3,0,1,4,39,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,364,                    if (tailZone != null) {,1,1,0,1,3,1,0,0,0,5,23,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,366,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,369,                millis = next.getMillis();,1,0,0,1,2,0,2,0,1,5,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,370,                saveMillis = next.getSaveMillis();,1,0,0,1,2,0,2,0,1,5,34,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,371,                if (tailZone == null && i == ruleSetCount - 1) {,3,4,0,1,3,1,0,0,0,5,48,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,372,                    tailZone = rs.buildTailZone(id);,1,0,0,1,2,0,3,0,1,5,32,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,379,            millis = rs.getUpperLimit(saveMillis);,1,0,0,1,2,0,3,0,1,5,38,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,383,        if (transitions.size() == 0) {,0,1,0,2,5,1,2,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,384,            if (tailZone != null) {,1,1,0,1,3,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,386,                return tailZone;,1,0,0,0,0,1,0,0,0,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0,0,0,0,2,1,2,0,2,4,39,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,390,        if (transitions.size() == 1 && tailZone == null) {,1,3,0,2,5,1,2,0,0,6,50,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,391,            Transition tr = transitions.get(0);,1,0,0,1,2,0,2,1,0,5,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,392,"            return buildFixedZone(id, tr.getNameKey(),",0,0,0,1,3,1,4,0,1,5,42,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",1,0,0,0,2,0,6,1,0,4,87,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,397,        if (zone.isCachable()) {,0,0,0,2,5,1,2,0,0,4,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,398,            return CachedDateTimeZone.forZone(zone);,0,0,0,1,2,1,3,0,0,4,40,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,400,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,404,        int size = transitions.size();,1,0,0,1,2,1,2,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,405,        if (size == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,406,            transitions.add(tr);,0,0,0,1,2,0,3,0,0,3,20,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,407,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,410,        Transition last = transitions.get(size - 1);,2,1,0,1,2,0,2,1,0,6,44,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,411,        if (!tr.isTransitionFrom(last)) {,0,0,0,2,5,1,3,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,412,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,417,        int offsetForLast = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,418,        if (size >= 2) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,2,1,0,1,4,0,3,0,1,6,58,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,421,        int offsetForNew = last.getWallOffset();,1,0,0,1,2,1,2,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,423,        long lastLocal = last.getMillis() + offsetForLast;,2,1,0,1,2,1,2,0,0,6,50,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,424,        long newLocal = tr.getMillis() + offsetForNew;,2,1,0,1,2,1,2,0,0,6,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,426,        if (newLocal != lastLocal) {,2,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,427,            transitions.add(tr);,0,0,0,1,2,0,3,0,0,3,20,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,428,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,431,        transitions.remove(size - 1);,1,1,0,1,2,0,2,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,432,"        return addTransition(transitions, tr);",0,0,0,0,2,1,3,0,1,4,38,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,443,        if (out instanceof DataOutput) {,1,0,0,1,3,2,0,1,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,444,"            writeTo(zoneID, (DataOutput)out);",1,0,0,1,4,0,2,1,1,6,33,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",1,0,0,1,6,1,2,2,2,7,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,448,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",1,0,0,0,2,0,2,1,2,5,50,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,461,        if (zone instanceof FixedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,462,            out.writeByte('F'); // 'F' for fixed,0,0,0,1,2,1,2,0,1,5,36,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,463,            out.writeUTF(zone.getNameKey(0));,0,0,0,2,4,0,4,0,0,3,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,464,"            writeMillis(out, zone.getOffset(0));",0,0,0,1,4,0,4,0,1,4,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,465,"            writeMillis(out, zone.getStandardOffset(0));",0,0,0,1,4,0,4,0,1,4,44,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,467,            if (zone instanceof CachedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,41,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0,0,0,1,2,1,2,0,1,5,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,2,0,0,2,6,0,1,1,1,6,52,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0,0,0,1,2,1,2,0,1,5,54,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,473,            ((PrecalculatedZone)zone).writeTo(out);,1,0,0,2,6,0,2,1,0,5,39,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,475,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,963,        RuleSet() {,1,0,0,1,3,0,0,0,0,3,11,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,964,            iRules = new ArrayList<Rule>(10);,1,0,0,1,2,1,0,2,2,6,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,965,            iUpperYear = Integer.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,31,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,966,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,971,        RuleSet(RuleSet rs) {,2,0,0,1,3,0,0,1,0,4,21,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,972,            iStandardOffset = rs.iStandardOffset;,3,0,0,0,0,0,0,0,1,2,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,973,            iRules = new ArrayList<Rule>(rs.iRules);,3,0,0,1,2,1,0,2,2,6,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,974,            iInitialNameKey = rs.iInitialNameKey;,3,0,0,0,0,0,0,0,1,2,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,3,0,0,0,0,0,0,0,1,2,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,976,            iUpperYear = rs.iUpperYear;,3,0,0,0,0,0,0,0,1,2,27,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,977,            iUpperOfYear = rs.iUpperOfYear;,3,0,0,0,0,0,0,0,1,2,31,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,978,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,948,            long now = DateTimeUtils.currentTimeMillis();,1,0,0,1,2,1,2,0,0,5,45,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,1,1,0,1,6,0,5,0,1,6,66,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,950,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,981,            return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,985,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,986,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,989,            iInitialNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,26,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,990,            iInitialSaveMillis = saveMillis;,2,0,0,0,0,0,0,0,1,2,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,991,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,994,            if (!iRules.contains(rule)) {,0,0,0,2,5,1,3,0,1,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,995,                iRules.add(rule);,0,0,0,1,2,0,3,0,0,3,17,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,997,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1000,            iUpperYear = year;,2,0,0,0,0,0,0,0,1,2,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1001,            iUpperOfYear = ofYear;,2,0,0,0,0,0,0,0,1,2,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1002,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1011,            if (iInitialNameKey != null) {,1,1,0,1,3,1,0,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1013,"                return new Transition(firstMillis, iInitialNameKey,",2,0,0,0,1,2,0,1,1,5,51,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,2,0,0,1,2,1,0,4,1,6,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1024,            long millis = Long.MIN_VALUE;,3,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1025,            int saveMillis = 0;,1,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1026,            Transition first = null;,1,0,0,0,0,0,0,1,0,2,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",1,1,0,0,7,1,3,0,2,6,61,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1030,                millis = next.getMillis();,1,0,0,1,2,0,2,0,1,5,26,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1032,                if (millis == firstMillis) {,2,1,0,1,3,1,0,0,0,5,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1033,"                    first = new Transition(firstMillis, next);",3,0,0,0,2,1,0,1,2,5,42,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1034,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1037,                if (millis > firstMillis) {,2,1,0,1,3,1,0,0,0,5,27,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1038,                    if (first == null) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1042,                        for (Rule rule : copy) {,2,0,0,1,3,1,0,1,0,5,24,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1043,                            if (rule.getSaveMillis() == 0) {,0,1,0,2,5,1,2,0,0,5,32,13,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",4,0,0,0,2,1,0,1,2,5,59,15,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1045,                                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1047,                        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1049,                    if (first == null) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1053,"                        first = new Transition(firstMillis, next.getNameKey(),",2,0,0,1,3,1,2,1,2,7,54,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1061,"                first = new Transition(firstMillis, next);",3,0,0,0,2,1,0,1,2,5,42,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1063,                saveMillis = next.getSaveMillis();,1,0,0,1,2,0,2,0,1,5,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1066,            iRules = copy;,2,0,0,0,0,0,0,0,1,2,14,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1067,            return first;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1085,            Rule nextRule = null;,1,0,0,0,0,0,0,1,0,2,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1086,            long nextMillis = Long.MAX_VALUE;,3,0,0,0,0,1,0,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1088,            Iterator<Rule> it = iRules.iterator();,1,0,0,1,2,0,2,2,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1089,            while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1090,                Rule rule = it.next();,1,0,0,1,2,0,2,1,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",1,0,0,0,2,1,5,0,0,4,60,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1092,                if (next <= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1093,                    it.remove();,0,0,0,1,2,0,2,0,0,3,12,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1094,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1098,                if (next <= nextMillis) {,2,1,0,1,3,1,0,0,0,5,25,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1100,                    nextRule = rule;,2,0,0,0,0,0,0,0,1,2,16,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1101,                    nextMillis = next;,2,0,0,0,0,0,0,0,1,2,18,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1103,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1105,            if (nextRule == null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1106,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,1,1,0,2,7,1,4,0,0,6,50,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1111,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1115,            if (iUpperYear < Integer.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1116,                long upperMillis =,1,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1118,                if (nextMillis >= upperMillis) {,2,1,0,1,3,1,0,0,0,5,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1120,                    return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",3,0,0,0,2,2,0,1,1,5,61,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1131,            if (iUpperYear == Integer.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1132,                return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0,0,0,0,2,1,5,0,0,3,72,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1141,            if (iRules.size() == 2) {,0,1,0,2,5,1,2,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1142,                Rule startRule = iRules.get(0);,1,0,0,1,2,0,2,1,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1143,                Rule endRule = iRules.get(1);,1,0,0,1,2,0,2,1,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,2,2,0,1,3,1,2,0,0,6,49,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1154,"                    return new DSTZone(id, iStandardOffset,",2,0,0,0,1,2,0,1,1,5,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,1158,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",1,0,0,0,4,0,4,1,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,44,        return nameSet == null ? null : nameSet[0];,1,1,1,0,2,1,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",1,0,0,0,4,0,4,1,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,49,        return nameSet == null ? null : nameSet[1];,1,1,1,0,2,1,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,53,        if (locale == null || id == null || nameKey == null) {,3,5,0,1,3,1,0,0,0,5,54,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,54,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",1,0,0,1,2,0,3,5,0,5,72,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,58,        if (byIdCache == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",1,0,0,1,4,0,4,0,2,5,54,7,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",1,0,0,1,2,0,3,3,0,5,55,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,63,        if (byNameKeyCache == null) {,1,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,64,"            byIdCache.put(id, byNameKeyCache = createCache());",1,0,0,1,4,0,4,0,2,5,50,7,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,65,            String[][] zoneStrings = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,1,0,0,1,8,0,4,1,0,5,85,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,66,            for (int i=0; i<zoneStrings.length; i++) {,5,1,0,1,3,2,0,0,1,6,42,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,67,                String[] set = zoneStrings[i];,1,0,1,0,4,0,0,1,0,4,30,8,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,68,                if (set != null && set.length == 5 && id.equals(set[0])) {,3,4,1,2,7,1,2,0,0,7,58,8,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,69,"                    byNameKeyCache.put(set[2], new String[] {set[2], set[1]});",0,0,1,0,12,1,2,1,0,5,58,11,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,73,                    if (set[2].equals(set[4])) {,0,0,1,2,9,1,1,0,0,5,28,11,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,74,"                        byNameKeyCache.put(set[4] + ""-Summer"", new String[] {set[4], set[3]});",0,1,1,0,12,1,2,1,1,7,70,13,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,76,"                        byNameKeyCache.put(set[4], new String[] {set[4], set[3]});",0,0,1,0,12,1,2,1,0,5,58,13,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,78,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,22,83,        return (String[])byNameKeyCache.get(nameKey);,0,0,0,1,6,1,3,1,0,5,45,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",4,0,0,0,3,2,0,1,0,4,55,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,817,            iRecurrence = recurrence;,2,0,0,0,0,0,0,0,1,2,25,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,818,            iFromYear = fromYear;,2,0,0,0,0,0,0,0,1,2,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,819,            iToYear = toYear;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,820,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,823,            return iFromYear;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,827,            return iToYear;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,831,            return iRecurrence.getOfYear();,0,0,0,1,2,1,2,0,0,4,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,835,            return iRecurrence.getNameKey();,0,0,0,1,2,1,2,0,0,4,32,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,839,            return iRecurrence.getSaveMillis();,0,0,0,1,2,1,2,0,0,4,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,843,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,845,            final int wallOffset = standardOffset + saveMillis;,3,1,0,0,0,2,0,0,1,4,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,846,            long testInstant = instant;,2,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,849,            if (instant == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,850,                year = Integer.MIN_VALUE;,3,0,0,0,0,0,0,0,1,2,25,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,852,                year = chrono.year().get(instant + wallOffset);,3,1,0,1,4,0,3,0,1,6,47,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,855,            if (year < iFromYear) {,2,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",2,1,0,1,4,0,4,0,1,6,59,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,860,                testInstant -= 1;,1,0,0,0,0,0,0,0,1,2,17,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",1,0,0,0,2,1,5,0,0,4,70,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,865,            if (next > instant) {,2,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,866,                year = chrono.year().get(next + wallOffset);,3,1,0,1,4,0,3,0,1,6,44,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,867,                if (year > iToYear) {,2,1,0,1,3,1,0,0,0,5,21,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,869,                    next = instant;,2,0,0,0,0,0,0,0,1,2,15,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,873,            return next;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,754,            return iOfYear;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0,0,0,0,2,1,5,0,0,3,57,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0,0,0,0,2,1,5,0,0,3,61,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,772,            return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,776,            return iSaveMillis;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,780,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,781,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,783,            if (obj instanceof Recurrence) {,1,0,0,1,3,2,0,1,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,784,                Recurrence other = (Recurrence)obj;,2,0,0,1,2,0,0,2,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,785,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,790,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,794,            iOfYear.writeTo(out);,0,0,0,1,2,0,3,0,0,3,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,795,            out.writeUTF(iNameKey);,0,0,0,1,2,0,3,0,0,3,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,796,"            writeMillis(out, iSaveMillis);",0,0,0,0,2,0,3,0,1,3,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,797,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",3,0,0,0,2,2,0,1,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,22,804,            return rename((iNameKey + appendNameKey).intern());,2,1,0,2,6,1,2,0,1,7,51,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,312,"        super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard());",4,0,0,1,4,1,2,0,1,6,74,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,313,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,329,"        super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());",8,0,0,1,4,1,2,0,1,6,90,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,330,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,352,"        super(years, months, weeks, days, hours, minutes, seconds, millis, type);",9,0,0,0,2,1,0,0,1,4,73,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,353,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,402,"        super(duration, type, null);",2,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,403,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,423,"        super(duration, null, chronology);",2,0,0,0,2,1,0,0,1,4,34,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,424,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,444,"        super(duration, type, chronology);",3,0,0,0,2,1,0,0,1,4,34,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,445,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,455,"        super(startInstant, endInstant, null, null);",2,0,0,0,2,1,0,0,1,4,44,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,456,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,466,"        super(startInstant, endInstant, type, null);",3,0,0,0,2,1,0,0,1,4,44,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,467,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,478,"        super(startInstant, endInstant, null, chrono);",3,0,0,0,2,1,0,0,1,4,46,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,479,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,490,"        super(startInstant, endInstant, type, chrono);",4,0,0,0,2,1,0,0,1,4,46,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,491,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,501,"        super(startInstant, endInstant, null);",2,0,0,0,2,1,0,0,1,4,38,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,502,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,512,"        super(startInstant, endInstant, type);",3,0,0,0,2,1,0,0,1,4,38,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,513,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,537,"        super(start, end, null);",2,0,0,0,2,1,0,0,1,4,24,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,538,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,563,"        super(start, end, type);",3,0,0,0,2,1,0,0,1,4,24,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,564,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,573,"        super(startInstant, duration, null);",2,0,0,0,2,1,0,0,1,4,36,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,574,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,584,"        super(startInstant, duration, type);",3,0,0,0,2,1,0,0,1,4,36,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,585,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,594,"        super(duration, endInstant, null);",2,0,0,0,2,1,0,0,1,4,34,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,595,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,605,"        super(duration, endInstant, type);",3,0,0,0,2,1,0,0,1,4,34,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,606,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,621,"        super(period, null, null);",1,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,622,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,638,"        super(period, type, null);",2,0,0,0,2,1,0,0,1,4,26,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,639,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,655,"        super(period, null, chrono);",2,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,656,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,673,"        super(period, type, chrono);",3,0,0,0,2,1,0,0,1,4,28,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,674,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,683,"        super(values, type);",2,0,0,0,2,1,0,0,1,4,20,3,0.0,0,0
defect4j,time,org/joda/time/Period,22,684,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,81,"        return parse(str, ISOPeriodFormat.standard());",0,0,0,1,4,1,4,0,1,5,46,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,92,        return formatter.parsePeriod(str);,0,0,0,1,2,1,3,0,0,4,34,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,110,"        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());",1,0,0,1,8,4,2,1,1,7,84,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,127,"        return new Period(new int[] {0, months, 0, 0, 0, 0, 0, 0}, PeriodType.standard());",1,0,0,1,8,4,2,1,1,7,82,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,144,"        return new Period(new int[] {0, 0, weeks, 0, 0, 0, 0, 0}, PeriodType.standard());",1,0,0,1,8,4,2,1,1,7,81,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,161,"        return new Period(new int[] {0, 0, 0, days, 0, 0, 0, 0}, PeriodType.standard());",1,0,0,1,8,4,2,1,1,7,80,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,178,"        return new Period(new int[] {0, 0, 0, 0, hours, 0, 0, 0}, PeriodType.standard());",1,0,0,1,8,4,2,1,1,7,81,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,195,"        return new Period(new int[] {0, 0, 0, 0, 0, minutes, 0, 0}, PeriodType.standard());",1,0,0,1,8,4,2,1,1,7,83,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,212,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());",1,0,0,1,8,4,2,1,1,7,83,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,226,"        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());",1,0,0,1,8,4,2,1,1,7,82,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,257,        if (start == null || end == null) {,2,3,0,1,3,1,0,0,0,5,35,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,258,"            throw new IllegalArgumentException(""ReadablePartial objects must not be null"");",0,0,0,1,2,2,0,1,2,5,79,6,0.0,0,0
defect4j,time,org/joda/time/Period,22,260,        if (start.size() != end.size()) {,0,1,0,2,7,1,4,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,261,"            throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");",0,0,0,1,2,2,0,1,2,5,95,6,0.0,0,0
defect4j,time,org/joda/time/Period,22,263,        DurationFieldType[] types = new DurationFieldType[start.size()];,1,0,0,1,6,1,2,2,0,6,64,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,264,        int[] values = new int[start.size()];,1,0,0,1,6,3,2,0,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,265,"        for (int i = 0, isize = start.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,55,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,266,            if (start.getFieldType(i) != end.getFieldType(i)) {,0,1,0,2,7,1,6,0,0,5,51,6,0.0,0,0
defect4j,time,org/joda/time/Period,22,267,"                throw new IllegalArgumentException(""ReadablePartial objects must have the same set of fields"");",0,0,0,1,2,2,0,1,2,5,95,8,0.0,0,0
defect4j,time,org/joda/time/Period,22,269,            types[i] = start.getFieldType(i).getDurationType();,0,0,1,1,6,0,4,0,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/Period,22,270,            if (i > 0 && types[i - 1] == types[i]) {,2,4,1,1,7,1,0,0,0,6,40,6,0.0,0,0
defect4j,time,org/joda/time/Period,22,271,"                throw new IllegalArgumentException(""ReadablePartial objects must not have overlapping fields"");",0,0,0,1,2,2,0,1,2,5,95,8,0.0,0,0
defect4j,time,org/joda/time/Period,22,273,            values[i] = end.getValue(i) - start.getValue(i);,0,1,1,1,6,0,6,0,1,6,48,6,0.0,0,0
defect4j,time,org/joda/time/Period,22,275,"        return new Period(values, PeriodType.forFields(types));",1,0,0,1,4,2,3,1,1,7,55,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,694,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,731,"        return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);",2,0,0,1,4,2,2,0,1,6,67,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,741,"        return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);",2,0,0,1,4,2,2,0,1,6,68,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,750,"        return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);",2,0,0,1,4,2,2,0,1,6,70,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,759,"        return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);",2,0,0,1,4,2,2,0,1,6,70,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,768,"        return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);",2,0,0,1,4,2,2,0,1,6,69,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,783,        type = DateTimeUtils.getPeriodType(type);,1,0,0,1,2,0,3,0,1,5,41,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,784,        if (type.equals(getPeriodType())) {,0,0,0,3,7,1,3,0,1,5,35,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,785,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,787,"        return new Period(this, type);",1,0,0,0,2,3,0,1,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,801,        if (period == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,802,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,804,        int[] newValues = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,41,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,805,"        newValues = super.mergePeriodInto(newValues, period);",4,0,0,0,2,1,0,0,1,4,53,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,806,"        return new Period(newValues, getPeriodType());",1,0,0,1,4,2,1,1,2,7,46,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,821,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,822,"            throw new IllegalArgumentException(""Field must not be null"");",0,0,0,1,2,2,0,1,2,5,61,6,0.0,0,0
defect4j,time,org/joda/time/Period,22,824,        int[] newValues = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,41,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,825,"        super.setFieldInto(newValues, field, value);",4,0,0,0,2,1,0,0,0,3,44,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,826,"        return new Period(newValues, getPeriodType());",1,0,0,1,4,2,1,1,2,7,46,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,840,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,841,"            throw new IllegalArgumentException(""Field must not be null"");",0,0,0,1,2,2,0,1,2,5,61,6,0.0,0,0
defect4j,time,org/joda/time/Period,22,843,        if (value == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,844,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,846,        int[] newValues = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,41,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,847,"        super.addFieldInto(newValues, field, value);",4,0,0,0,2,1,0,0,0,3,44,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,848,"        return new Period(newValues, getPeriodType());",1,0,0,1,4,2,1,1,2,7,46,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,862,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,863,"        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);",2,0,0,1,4,1,4,0,1,6,76,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,864,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,877,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,878,"        getPeriodType().setIndexedField(this, PeriodType.MONTH_INDEX, values, months);",2,0,0,1,4,1,4,0,1,6,78,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,879,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,892,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,893,"        getPeriodType().setIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);",2,0,0,1,4,1,4,0,1,6,76,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,894,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,907,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,908,"        getPeriodType().setIndexedField(this, PeriodType.DAY_INDEX, values, days);",2,0,0,1,4,1,4,0,1,6,74,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,909,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,922,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,923,"        getPeriodType().setIndexedField(this, PeriodType.HOUR_INDEX, values, hours);",2,0,0,1,4,1,4,0,1,6,76,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,924,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,937,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,938,"        getPeriodType().setIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);",2,0,0,1,4,1,4,0,1,6,80,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,939,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,952,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,953,"        getPeriodType().setIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);",2,0,0,1,4,1,4,0,1,6,80,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,954,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,967,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,968,"        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);",2,0,0,1,4,1,4,0,1,6,78,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,969,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,991,        if (period == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,992,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,994,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,995,"        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, period.get(DurationFieldType.YEARS_TYPE));",4,0,0,1,6,1,5,0,1,6,111,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,996,"        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, period.get(DurationFieldType.MONTHS_TYPE));",4,0,0,1,6,1,5,0,1,6,113,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,997,"        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, period.get(DurationFieldType.WEEKS_TYPE));",4,0,0,1,6,1,5,0,1,6,111,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,998,"        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, period.get(DurationFieldType.DAYS_TYPE));",4,0,0,1,6,1,5,0,1,6,109,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,999,"        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, period.get(DurationFieldType.HOURS_TYPE));",4,0,0,1,6,1,5,0,1,6,111,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1000,"        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, period.get(DurationFieldType.MINUTES_TYPE));",4,0,0,1,6,1,5,0,1,6,115,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1001,"        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, period.get(DurationFieldType.SECONDS_TYPE));",4,0,0,1,6,1,5,0,1,6,115,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1002,"        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, period.get(DurationFieldType.MILLIS_TYPE));",4,0,0,1,6,1,5,0,1,6,113,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1003,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1017,        if (years == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1018,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,1020,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1021,"        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, years);",2,0,0,1,4,1,4,0,1,6,76,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1022,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1035,        if (months == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1036,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,1038,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1039,"        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, months);",2,0,0,1,4,1,4,0,1,6,78,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1040,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1053,        if (weeks == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1054,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,1056,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1057,"        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);",2,0,0,1,4,1,4,0,1,6,76,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1058,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1071,        if (days == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1072,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,1074,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1075,"        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, days);",2,0,0,1,4,1,4,0,1,6,74,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1076,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1089,        if (hours == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1090,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,1092,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1093,"        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, hours);",2,0,0,1,4,1,4,0,1,6,76,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1094,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1107,        if (minutes == 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1108,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,1110,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1111,"        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);",2,0,0,1,4,1,4,0,1,6,80,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1112,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1125,        if (seconds == 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1126,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,1128,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1129,"        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);",2,0,0,1,4,1,4,0,1,6,80,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1130,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1143,        if (millis == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1144,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,1146,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1147,"        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, millis);",2,0,0,1,4,1,4,0,1,6,78,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1148,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1170,        if (period == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1171,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,1173,        int[] values = getValues();  // cloned,1,0,0,1,4,1,1,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1174,"        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, -period.get(DurationFieldType.YEARS_TYPE));",4,0,0,1,6,1,5,0,2,6,112,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1175,"        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, -period.get(DurationFieldType.MONTHS_TYPE));",4,0,0,1,6,1,5,0,2,6,114,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1176,"        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, -period.get(DurationFieldType.WEEKS_TYPE));",4,0,0,1,6,1,5,0,2,6,112,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1177,"        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, -period.get(DurationFieldType.DAYS_TYPE));",4,0,0,1,6,1,5,0,2,6,110,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1178,"        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, -period.get(DurationFieldType.HOURS_TYPE));",4,0,0,1,6,1,5,0,2,6,112,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1179,"        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, -period.get(DurationFieldType.MINUTES_TYPE));",4,0,0,1,6,1,5,0,2,6,116,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1180,"        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, -period.get(DurationFieldType.SECONDS_TYPE));",4,0,0,1,6,1,5,0,2,6,116,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1181,"        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, -period.get(DurationFieldType.MILLIS_TYPE));",4,0,0,1,6,1,5,0,2,6,114,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1182,"        return new Period(values, getPeriodType());",1,0,0,1,4,2,1,1,2,7,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1196,        return plusYears(-years);,1,0,0,1,2,1,1,0,2,6,25,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1209,        return plusMonths(-months);,1,0,0,1,2,1,1,0,2,6,27,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1222,        return plusWeeks(-weeks);,1,0,0,1,2,1,1,0,2,6,25,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1235,        return plusDays(-days);,1,0,0,1,2,1,1,0,2,6,23,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1248,        return plusHours(-hours);,1,0,0,1,2,1,1,0,2,6,25,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1261,        return plusMinutes(-minutes);,1,0,0,1,2,1,1,0,2,6,29,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1274,        return plusSeconds(-seconds);,1,0,0,1,2,1,1,0,2,6,29,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1287,        return plusMillis(-millis);,1,0,0,1,2,1,1,0,2,6,27,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1311,"        checkYearsAndMonths(""Weeks"");",0,0,0,1,2,0,1,0,2,4,29,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1312,        long millis = getMillis();  // assign to a long,1,0,0,1,2,1,1,0,1,6,47,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1313,        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;,3,1,0,2,6,1,1,0,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1314,        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;,3,1,0,2,6,1,1,0,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1315,        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;,3,1,0,2,6,1,1,0,2,7,66,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1316,        millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY;,3,1,0,2,6,1,1,0,2,7,64,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1317,        long weeks = ((long) getWeeks()) + millis / DateTimeConstants.MILLIS_PER_WEEK;,4,2,0,2,6,2,1,0,1,7,78,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1318,        return Weeks.weeks(FieldUtils.safeToInt(weeks));,0,0,0,2,4,1,5,0,0,4,48,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1341,"        checkYearsAndMonths(""Days"");",0,0,0,1,2,0,1,0,2,4,28,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1342,        long millis = getMillis();  // assign to a long,1,0,0,1,2,1,1,0,1,6,47,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1343,        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;,3,1,0,2,6,1,1,0,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1344,        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;,3,1,0,2,6,1,1,0,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1345,        millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;,3,1,0,2,6,1,1,0,2,7,66,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1346,        long days = millis / DateTimeConstants.MILLIS_PER_DAY;,4,1,0,0,0,1,0,0,0,3,54,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1347,"        days = FieldUtils.safeAdd(days, getDays());",1,0,0,1,4,0,4,0,2,5,43,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1348,"        days = FieldUtils.safeAdd(days, ((long) getWeeks()) * ((long) DateTimeConstants.DAYS_PER_WEEK));",3,1,0,2,12,2,4,0,2,7,96,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1349,        return Days.days(FieldUtils.safeToInt(days));,0,0,0,2,4,1,5,0,0,4,45,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1372,"        checkYearsAndMonths(""Hours"");",0,0,0,1,2,0,1,0,2,4,29,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1373,        long millis = getMillis();  // assign to a long,1,0,0,1,2,1,1,0,1,6,47,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1374,        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;,3,1,0,2,6,1,1,0,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1375,        millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;,3,1,0,2,6,1,1,0,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1376,        long hours = millis / DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,1,0,0,0,3,56,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1377,"        hours = FieldUtils.safeAdd(hours, getHours());",1,0,0,1,4,0,4,0,2,5,46,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1378,"        hours = FieldUtils.safeAdd(hours, ((long) getDays()) * ((long) DateTimeConstants.HOURS_PER_DAY));",3,1,0,2,12,2,4,0,2,7,97,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1379,"        hours = FieldUtils.safeAdd(hours, ((long) getWeeks()) * ((long) DateTimeConstants.HOURS_PER_WEEK));",3,1,0,2,12,2,4,0,2,7,99,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1380,        return Hours.hours(FieldUtils.safeToInt(hours));,0,0,0,2,4,1,5,0,0,4,48,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1403,"        checkYearsAndMonths(""Minutes"");",0,0,0,1,2,0,1,0,2,4,31,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1404,        long millis = getMillis();  // assign to a long,1,0,0,1,2,1,1,0,1,6,47,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1405,        millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;,3,1,0,2,6,1,1,0,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1406,        long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,1,0,0,0,3,60,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1407,"        minutes = FieldUtils.safeAdd(minutes, getMinutes());",1,0,0,1,4,0,4,0,2,5,52,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1408,"        minutes = FieldUtils.safeAdd(minutes, ((long) getHours()) * ((long) DateTimeConstants.MINUTES_PER_HOUR));",3,1,0,2,12,2,4,0,2,7,105,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1409,"        minutes = FieldUtils.safeAdd(minutes, ((long) getDays()) * ((long) DateTimeConstants.MINUTES_PER_DAY));",3,1,0,2,12,2,4,0,2,7,103,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1410,"        minutes = FieldUtils.safeAdd(minutes, ((long) getWeeks()) * ((long) DateTimeConstants.MINUTES_PER_WEEK));",3,1,0,2,12,2,4,0,2,7,105,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1411,        return Minutes.minutes(FieldUtils.safeToInt(minutes));,0,0,0,2,4,1,5,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1434,"        checkYearsAndMonths(""Seconds"");",0,0,0,1,2,0,1,0,2,4,31,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1435,        long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND;,3,1,0,1,2,1,1,0,1,7,65,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1436,"        seconds = FieldUtils.safeAdd(seconds, getSeconds());",1,0,0,1,4,0,4,0,2,5,52,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1437,"        seconds = FieldUtils.safeAdd(seconds, ((long) getMinutes()) * ((long) DateTimeConstants.SECONDS_PER_MINUTE));",3,1,0,2,12,2,4,0,2,7,109,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1438,"        seconds = FieldUtils.safeAdd(seconds, ((long) getHours()) * ((long) DateTimeConstants.SECONDS_PER_HOUR));",3,1,0,2,12,2,4,0,2,7,105,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1439,"        seconds = FieldUtils.safeAdd(seconds, ((long) getDays()) * ((long) DateTimeConstants.SECONDS_PER_DAY));",3,1,0,2,12,2,4,0,2,7,103,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1440,"        seconds = FieldUtils.safeAdd(seconds, ((long) getWeeks()) * ((long) DateTimeConstants.SECONDS_PER_WEEK));",3,1,0,2,12,2,4,0,2,7,105,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1441,        return Seconds.seconds(FieldUtils.safeToInt(seconds));,0,0,0,2,4,1,5,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1464,"        checkYearsAndMonths(""Duration"");",0,0,0,1,2,0,1,0,2,4,32,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1465,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs",1,0,0,1,2,1,1,0,1,6,83,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1466,        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));,3,1,0,3,12,2,1,0,2,7,81,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1467,        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));,3,1,0,3,12,2,1,0,2,7,81,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1468,        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));,3,1,0,3,12,2,1,0,2,7,77,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1469,        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));,3,1,0,3,12,2,1,0,2,7,75,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1470,        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));,3,1,0,3,12,2,1,0,2,7,77,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1471,        return new Duration(millis);,1,0,0,1,2,2,0,1,1,6,28,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1481,        if (getMonths() != 0) {,0,1,0,2,5,1,1,0,1,6,23,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1482,"            throw new UnsupportedOperationException(""Cannot convert to "" + destintionType + "" as this period contains months and months vary in length"");",1,1,0,1,2,3,0,1,3,7,141,6,0.0,0,0
defect4j,time,org/joda/time/Period,22,1484,        if (getYears() != 0) {,0,1,0,2,5,1,1,0,1,6,22,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1485,"            throw new UnsupportedOperationException(""Cannot convert to "" + destintionType + "" as this period contains years and years vary in length"");",1,1,0,1,2,3,0,1,3,7,139,6,0.0,0,0
defect4j,time,org/joda/time/Period,22,1487,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Period,22,1516,        return normalizedStandard(PeriodType.standard());,0,0,0,2,4,1,3,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1552,"        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs",1,0,0,1,2,1,1,0,1,6,83,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1553,        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));,3,1,0,3,12,2,1,0,2,7,81,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1554,        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));,3,1,0,3,12,2,1,0,2,7,81,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1555,        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));,3,1,0,3,12,2,1,0,2,7,77,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1556,        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));,3,1,0,3,12,2,1,0,2,7,75,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1557,        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));,3,1,0,3,12,2,1,0,2,7,77,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1558,"        Period result = new Period(millis, DateTimeUtils.getPeriodType(type), ISOChronology.getInstanceUTC());",2,0,0,1,6,1,5,2,1,7,102,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1559,        int years = getYears();,1,0,0,1,2,1,1,0,1,6,23,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1560,        int months = getMonths();,1,0,0,1,2,1,1,0,1,6,25,5,0.0,0,0
defect4j,time,org/joda/time/Period,22,1561,        if (years != 0 || months != 0) {,2,3,0,1,3,1,0,0,0,5,32,4,0.0,0,0
defect4j,time,org/joda/time/Period,22,1562,"            years = FieldUtils.safeAdd(years, months / 12);",2,1,0,0,2,0,3,0,1,5,47,6,0.0,0,0
defect4j,time,org/joda/time/Period,22,1563,            months = months % 12;,2,1,0,0,0,0,0,0,1,3,21,6,0.0,0,0
defect4j,time,org/joda/time/Period,22,1564,            if (years != 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,time,org/joda/time/Period,22,1565,                result = result.withYears(years);,1,0,0,1,2,0,3,0,1,5,33,8,0.0,0,0
defect4j,time,org/joda/time/Period,22,1567,            if (months != 0) {,1,1,0,1,3,1,0,0,0,5,18,6,0.0,0,0
defect4j,time,org/joda/time/Period,22,1568,                result = result.withMonths(months);,1,0,0,1,2,0,3,0,1,5,35,8,0.0,0,0
defect4j,time,org/joda/time/Period,22,1571,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,134,        PeriodType type = cYMDTime;,2,0,0,0,0,0,0,1,0,2,27,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,135,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,136,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,146,            cYMDTime = type;,2,0,0,0,0,0,0,0,1,2,16,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,148,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,163,        PeriodType type = cYMD;,2,0,0,0,0,0,0,1,0,2,23,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,164,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,165,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,173,            cYMD = type;,2,0,0,0,0,0,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,175,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,193,        PeriodType type = cYWDTime;,2,0,0,0,0,0,0,1,0,2,27,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,194,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,195,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,205,            cYWDTime = type;,2,0,0,0,0,0,0,0,1,2,16,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,207,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,222,        PeriodType type = cYWD;,2,0,0,0,0,0,0,1,0,2,23,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,223,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,224,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,232,            cYWD = type;,2,0,0,0,0,0,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,234,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,251,        PeriodType type = cYDTime;,2,0,0,0,0,0,0,1,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,252,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,253,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,262,            cYDTime = type;,2,0,0,0,0,0,0,0,1,2,15,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,264,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,278,        PeriodType type = cYD;,2,0,0,0,0,0,0,1,0,2,22,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,279,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,280,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,287,            cYD = type;,2,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,289,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,305,        PeriodType type = cDTime;,2,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,306,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,307,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,316,            cDTime = type;,2,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,318,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,333,        PeriodType type = cTime;,2,0,0,0,0,0,0,1,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,334,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,335,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,343,            cTime = type;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,345,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,354,        PeriodType type = cYears;,2,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,355,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,356,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,361,            cYears = type;,2,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,363,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,372,        PeriodType type = cMonths;,2,0,0,0,0,0,0,1,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,373,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,374,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,379,            cMonths = type;,2,0,0,0,0,0,0,0,1,2,15,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,381,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,390,        PeriodType type = cWeeks;,2,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,391,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,392,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,397,            cWeeks = type;,2,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,399,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,408,        PeriodType type = cDays;,2,0,0,0,0,0,0,1,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,409,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,410,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,415,            cDays = type;,2,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,417,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,426,        PeriodType type = cHours;,2,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,427,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,428,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,433,            cHours = type;,2,0,0,0,0,0,0,0,1,2,14,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,435,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,444,        PeriodType type = cMinutes;,2,0,0,0,0,0,0,1,0,2,27,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,445,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,446,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,451,            cMinutes = type;,2,0,0,0,0,0,0,0,1,2,16,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,453,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,462,        PeriodType type = cSeconds;,2,0,0,0,0,0,0,1,0,2,27,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,463,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,464,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,469,            cSeconds = type;,2,0,0,0,0,0,0,0,1,2,16,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,471,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,480,        PeriodType type = cMillis;,2,0,0,0,0,0,0,1,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,481,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,482,            type = new PeriodType(,1,0,0,0,1,1,0,1,2,5,22,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,487,            cMillis = type;,2,0,0,0,0,0,0,0,1,2,15,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,489,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,502,        if (types == null || types.length == 0) {,3,3,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,503,"            throw new IllegalArgumentException(""Types array must not be null or empty"");",0,0,0,1,2,2,0,1,2,5,76,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,505,        for (int i = 0; i < types.length; i++) {,5,1,0,1,3,2,0,0,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,506,            if (types[i] == null) {,0,1,1,1,5,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,507,"                throw new IllegalArgumentException(""Types array must not contain null"");",0,0,0,1,2,2,0,1,2,5,72,8,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,510,"        Map<PeriodType, Object> cache = cTypes;",2,0,0,0,0,0,0,3,0,2,39,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,511,        if (cache.isEmpty()) {,0,0,0,2,5,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,512,"            cache.put(standard(), standard());",0,0,0,1,6,0,4,0,2,4,34,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,513,"            cache.put(yearMonthDayTime(), yearMonthDayTime());",0,0,0,1,6,0,4,0,2,4,50,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,514,"            cache.put(yearMonthDay(), yearMonthDay());",0,0,0,1,6,0,4,0,2,4,42,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,515,"            cache.put(yearWeekDayTime(), yearWeekDayTime());",0,0,0,1,6,0,4,0,2,4,48,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,516,"            cache.put(yearWeekDay(), yearWeekDay());",0,0,0,1,6,0,4,0,2,4,40,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,517,"            cache.put(yearDayTime(), yearDayTime());",0,0,0,1,6,0,4,0,2,4,40,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,518,"            cache.put(yearDay(), yearDay());",0,0,0,1,6,0,4,0,2,4,32,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,519,"            cache.put(dayTime(), dayTime());",0,0,0,1,6,0,4,0,2,4,32,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,520,"            cache.put(time(), time());",0,0,0,1,6,0,4,0,2,4,26,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,521,"            cache.put(years(), years());",0,0,0,1,6,0,4,0,2,4,28,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,522,"            cache.put(months(), months());",0,0,0,1,6,0,4,0,2,4,30,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,523,"            cache.put(weeks(), weeks());",0,0,0,1,6,0,4,0,2,4,28,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,524,"            cache.put(days(), days());",0,0,0,1,6,0,4,0,2,4,26,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,525,"            cache.put(hours(), hours());",0,0,0,1,6,0,4,0,2,4,28,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,526,"            cache.put(minutes(), minutes());",0,0,0,1,6,0,4,0,2,4,32,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,527,"            cache.put(seconds(), seconds());",0,0,0,1,6,0,4,0,2,4,32,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,528,"            cache.put(millis(), millis());",0,0,0,1,6,0,4,0,2,4,30,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,530,"        PeriodType inPartType = new PeriodType(null, types, null);",2,0,0,0,2,1,0,2,1,5,58,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,531,        Object cached = cache.get(inPartType);,1,0,0,1,2,0,3,1,0,5,38,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,532,        if (cached instanceof PeriodType) {,1,0,0,1,3,2,0,1,0,5,35,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,533,            return (PeriodType) cached;,1,0,0,1,2,1,0,1,0,5,27,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,535,        if (cached != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,536,"            throw new IllegalArgumentException(""PeriodType does not support fields: "" + cached);",1,1,0,1,2,2,0,1,2,7,84,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,538,        PeriodType type = standard();,1,0,0,1,2,0,1,1,1,6,29,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,539,        List<DurationFieldType> list = new ArrayList<DurationFieldType>(Arrays.asList(types));,1,0,0,2,4,1,3,4,1,7,86,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,540,        if (list.remove(DurationFieldType.years()) == false) {,0,1,0,3,7,1,4,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,541,            type = type.withYearsRemoved();,1,0,0,1,2,0,2,0,1,5,31,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,543,        if (list.remove(DurationFieldType.months()) == false) {,0,1,0,3,7,1,4,0,1,6,55,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,544,            type = type.withMonthsRemoved();,1,0,0,1,2,0,2,0,1,5,32,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,546,        if (list.remove(DurationFieldType.weeks()) == false) {,0,1,0,3,7,1,4,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,547,            type = type.withWeeksRemoved();,1,0,0,1,2,0,2,0,1,5,31,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,549,        if (list.remove(DurationFieldType.days()) == false) {,0,1,0,3,7,1,4,0,1,6,53,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,550,            type = type.withDaysRemoved();,1,0,0,1,2,0,2,0,1,5,30,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,552,        if (list.remove(DurationFieldType.hours()) == false) {,0,1,0,3,7,1,4,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,553,            type = type.withHoursRemoved();,1,0,0,1,2,0,2,0,1,5,31,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,555,        if (list.remove(DurationFieldType.minutes()) == false) {,0,1,0,3,7,1,4,0,1,6,56,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,556,            type = type.withMinutesRemoved();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,558,        if (list.remove(DurationFieldType.seconds()) == false) {,0,1,0,3,7,1,4,0,1,6,56,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,559,            type = type.withSecondsRemoved();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,561,        if (list.remove(DurationFieldType.millis()) == false) {,0,1,0,3,7,1,4,0,1,6,55,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,562,            type = type.withMillisRemoved();,1,0,0,1,2,0,2,0,1,5,32,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,564,        if (list.size() > 0) {,0,1,0,2,5,1,2,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,565,"            cache.put(inPartType, list);",0,0,0,0,2,0,4,0,0,2,28,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,566,"            throw new IllegalArgumentException(""PeriodType does not support fields: "" + list);",1,1,0,1,2,2,0,1,2,7,82,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,569,"        PeriodType checkPartType = new PeriodType(null, type.iTypes, null);",3,0,0,0,2,1,0,2,1,5,67,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,570,        PeriodType checkedType = (PeriodType) cache.get(checkPartType);,1,0,0,1,4,0,3,2,0,5,63,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,571,        if (checkedType != null) {,1,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,572,"            cache.put(inPartType, checkedType);",0,0,0,0,2,0,4,0,0,2,35,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,573,            return checkedType;,1,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,575,"        cache.put(inPartType, type);",0,0,0,0,2,0,4,0,0,2,28,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,576,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,608,        return iName;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,638,        return (indexOf(type) >= 0);,0,1,0,2,4,1,2,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,648,"        for (int i = 0, isize = size(); i < isize; i++) {",5,1,0,1,5,2,1,0,2,7,49,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,649,            if (iTypes[i] == type) {,1,1,1,1,5,1,0,0,0,6,24,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,650,                return i;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,653,        return -1;,0,0,0,0,0,1,0,0,1,2,10,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,662,"        return ""PeriodType["" + getName() + ""]"";",0,1,0,1,4,1,1,0,3,6,39,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,688,        int realIndex = iIndices[index];,1,0,1,0,2,1,0,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,689,        if (realIndex == -1) {,1,1,0,1,3,1,0,0,1,6,22,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,690,"            throw new UnsupportedOperationException(""Field is not supported"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,692,        values[realIndex] = newValue;,1,0,1,0,2,0,0,0,1,4,29,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,693,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,707,        if (valueToAdd == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,708,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,710,        int realIndex = iIndices[index];,1,0,1,0,2,1,0,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,711,        if (realIndex == -1) {,1,1,0,1,3,1,0,0,1,6,22,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,712,"            throw new UnsupportedOperationException(""Field is not supported"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,714,"        values[realIndex] = FieldUtils.safeAdd(values[realIndex], valueToAdd);",0,0,1,0,6,0,3,0,1,4,70,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,715,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,725,"        return withFieldRemoved(0, ""NoYears"");",0,0,0,0,2,1,1,0,2,4,38,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,734,"        return withFieldRemoved(1, ""NoMonths"");",0,0,0,0,2,1,1,0,2,4,39,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,743,"        return withFieldRemoved(2, ""NoWeeks"");",0,0,0,0,2,1,1,0,2,4,38,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,752,"        return withFieldRemoved(3, ""NoDays"");",0,0,0,0,2,1,1,0,2,4,37,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,761,"        return withFieldRemoved(4, ""NoHours"");",0,0,0,0,2,1,1,0,2,4,38,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,770,"        return withFieldRemoved(5, ""NoMinutes"");",0,0,0,0,2,1,1,0,2,4,40,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,779,"        return withFieldRemoved(6, ""NoSeconds"");",0,0,0,0,2,1,1,0,2,4,40,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,788,"        return withFieldRemoved(7, ""NoMillis"");",0,0,0,0,2,1,1,0,2,4,39,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,799,        int fieldIndex = iIndices[indicesIndex];,1,0,1,0,2,1,0,0,0,4,40,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,800,        if (fieldIndex == -1) {,1,1,0,1,3,1,0,0,1,6,23,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,801,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,804,        DurationFieldType[] types = new DurationFieldType[size() - 1];,1,1,0,1,6,1,1,2,1,8,62,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,805,        for (int i = 0; i < iTypes.length; i++) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,806,            if (i < fieldIndex) {,2,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,807,                types[i] = iTypes[i];,0,0,1,0,4,0,0,0,1,3,21,8,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,808,            } else if (i > fieldIndex) {,2,1,0,1,4,2,0,0,0,5,28,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,809,                types[i - 1] = iTypes[i];,1,1,1,0,4,0,0,0,1,5,25,9,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,813,        int[] indices = new int[8];,1,0,0,0,4,3,0,0,0,3,27,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,814,        for (int i = 0; i < indices.length; i++) {,5,1,0,1,3,2,0,0,1,6,42,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,815,            if (i < indicesIndex) {,2,1,0,1,3,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,816,                indices[i] = iIndices[i];,0,0,1,0,4,0,0,0,1,3,25,8,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,817,            } else if (i > indicesIndex) {,2,1,0,1,4,2,0,0,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,818,                indices[i] = (iIndices[i] == -1 ? -1 : iIndices[i] - 1);,0,2,1,1,8,0,0,0,3,5,56,9,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,820,                indices[i] = -1;,0,0,1,0,2,0,0,0,2,3,16,9,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,823,"        return new PeriodType(getName() + name, types, indices);",3,1,0,1,4,2,1,1,2,8,56,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,838,        if (obj instanceof PeriodType == false) {,1,1,0,1,3,2,0,1,1,7,41,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,839,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,841,        PeriodType other = (PeriodType) obj;,2,0,0,1,2,0,0,2,0,4,36,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,842,"        return (Arrays.equals(iTypes, other.iTypes));",2,0,0,0,4,1,3,0,0,4,45,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,851,        int hash = 0;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,852,        for (int i = 0; i < iTypes.length; i++) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,853,            hash += iTypes[i].hashCode();,1,0,1,1,4,0,1,0,1,6,29,6,0.0,0,0
defect4j,time,org/joda/time/PeriodType,22,855,        return hash;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,187,"        super(startInstant, endInstant);",2,0,0,0,2,1,0,0,1,4,32,3,0.0,0,0
defect4j,time,org/joda/time/Duration,22,188,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Duration,22,198,"        super(start, end);",2,0,0,0,2,1,0,0,1,4,18,3,0.0,0,0
defect4j,time,org/joda/time/Duration,22,199,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Duration,22,209,        super(duration);,1,0,0,1,2,1,0,0,1,5,16,3,0.0,0,0
defect4j,time,org/joda/time/Duration,22,210,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Duration,22,59,        return new Duration(str);,1,0,0,1,2,2,0,1,1,6,25,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,81,        if (days == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,82,            return ZERO;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/Duration,22,84,"        return new Duration(FieldUtils.safeMultiply(days, DateTimeConstants.MILLIS_PER_DAY));",2,0,0,0,4,2,3,1,1,6,85,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,104,        if (hours == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,105,            return ZERO;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/Duration,22,107,"        return new Duration(FieldUtils.safeMultiply(hours, DateTimeConstants.MILLIS_PER_HOUR));",2,0,0,0,4,2,3,1,1,6,87,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,127,        if (minutes == 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,128,            return ZERO;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/Duration,22,130,"        return new Duration(FieldUtils.safeMultiply(minutes, DateTimeConstants.MILLIS_PER_MINUTE));",2,0,0,0,4,2,3,1,1,6,91,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,149,        if (seconds == 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,150,            return ZERO;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/Duration,22,152,"        return new Duration(FieldUtils.safeMultiply(seconds, DateTimeConstants.MILLIS_PER_SECOND));",2,0,0,0,4,2,3,1,1,6,91,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,163,        if (millis == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,164,            return ZERO;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/Duration,22,166,        return new Duration(millis);,1,0,0,1,2,2,0,1,1,6,28,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,229,        return getMillis() / DateTimeConstants.MILLIS_PER_DAY;,2,1,0,1,2,1,1,0,1,7,54,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,247,        return getMillis() / DateTimeConstants.MILLIS_PER_HOUR;,2,1,0,1,2,1,1,0,1,7,55,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,265,        return getMillis() / DateTimeConstants.MILLIS_PER_MINUTE;,2,1,0,1,2,1,1,0,1,7,57,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,282,        return getMillis() / DateTimeConstants.MILLIS_PER_SECOND;,2,1,0,1,2,1,1,0,1,7,57,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,293,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Duration,22,310,        long days = getStandardDays();,1,0,0,1,2,1,1,0,1,6,30,5,0.0,0,0
defect4j,time,org/joda/time/Duration,22,311,        return Days.days(FieldUtils.safeToInt(days));,0,0,0,2,4,1,5,0,0,4,45,5,0.0,0,0
defect4j,time,org/joda/time/Duration,22,327,        long hours = getStandardHours();,1,0,0,1,2,1,1,0,1,6,32,5,0.0,0,0
defect4j,time,org/joda/time/Duration,22,328,        return Hours.hours(FieldUtils.safeToInt(hours));,0,0,0,2,4,1,5,0,0,4,48,5,0.0,0,0
defect4j,time,org/joda/time/Duration,22,344,        long minutes = getStandardMinutes();,1,0,0,1,2,1,1,0,1,6,36,5,0.0,0,0
defect4j,time,org/joda/time/Duration,22,345,        return Minutes.minutes(FieldUtils.safeToInt(minutes));,0,0,0,2,4,1,5,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/Duration,22,360,        long seconds = getStandardSeconds();,1,0,0,1,2,1,1,0,1,6,36,5,0.0,0,0
defect4j,time,org/joda/time/Duration,22,361,        return Seconds.seconds(FieldUtils.safeToInt(seconds));,0,0,0,2,4,1,5,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/Duration,22,372,        if (duration == getMillis()) {,1,1,0,2,5,1,1,0,1,7,30,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,373,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Duration,22,375,        return new Duration(duration);,1,0,0,1,2,2,0,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,389,        if (durationToAdd == 0 || scalar == 0) {,2,3,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,390,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Duration,22,392,"        long add = FieldUtils.safeMultiply(durationToAdd, scalar);",1,0,0,0,2,1,4,0,0,4,58,5,0.0,0,0
defect4j,time,org/joda/time/Duration,22,393,"        long duration = FieldUtils.safeAdd(getMillis(), add);",1,0,0,1,4,1,4,0,1,6,53,5,0.0,0,0
defect4j,time,org/joda/time/Duration,22,394,        return new Duration(duration);,1,0,0,1,2,2,0,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,408,        if (durationToAdd == null || scalar == 0) {,2,3,0,1,3,1,0,0,0,5,43,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,409,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Duration,22,411,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0,0,0,1,4,1,4,0,1,5,60,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,425,"        return withDurationAdded(amount, 1);",0,0,0,0,2,1,2,0,1,4,36,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,438,        if (amount == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,439,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Duration,22,441,"        return withDurationAdded(amount.getMillis(), 1);",0,0,0,1,4,1,3,0,1,5,48,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,454,"        return withDurationAdded(amount, -1);",0,0,0,0,2,1,2,0,2,4,37,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,467,        if (amount == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/Duration,22,468,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Duration,22,470,"        return withDurationAdded(amount.getMillis(), -1);",0,0,0,1,4,1,3,0,2,5,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,22,42,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);,0,0,0,1,4,1,5,0,0,4,76,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,22,47,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);,0,0,0,1,4,1,5,0,0,4,81,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,22,52,        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);,0,0,0,1,4,1,5,0,0,4,70,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,22,57,        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();,0,0,0,1,4,1,4,0,0,4,65,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,22,62,        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();,0,0,0,1,4,1,4,0,0,4,70,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,59,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,72,        return iChronology.getMonthOfYear(instant);,0,0,0,1,2,1,3,0,0,4,43,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,92,        if (months == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,93,            return instant; // the easy case,1,0,0,0,0,1,0,0,0,2,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,98,        long timePart = iChronology.getMillisOfDay(instant);,1,0,0,1,2,1,3,0,0,5,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,103,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",1,0,0,0,2,1,4,0,0,4,62,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,112,        int monthToUse = thisMonth - 1 + months;,3,2,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,113,        if (monthToUse >= 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,114,            yearToUse = thisYear + (monthToUse / iMax);,4,2,0,1,2,0,0,0,1,5,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,115,            monthToUse = (monthToUse % iMax) + 1;,3,2,0,1,2,0,0,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,117,            yearToUse = thisYear + (monthToUse / iMax) - 1;,4,3,0,1,2,0,0,0,1,5,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,118,            monthToUse = Math.abs(monthToUse);,1,0,0,1,2,0,3,0,1,5,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,119,            int remMonthToUse = monthToUse % iMax;,3,1,0,0,0,1,0,0,0,3,38,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,121,            if (remMonthToUse == 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,122,                remMonthToUse = iMax;,2,0,0,0,0,0,0,0,1,2,21,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,124,            monthToUse = iMax - remMonthToUse + 1;,3,2,0,0,0,0,0,0,1,3,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,126,            if (monthToUse == 1) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,127,                yearToUse += 1;,1,0,0,0,0,0,0,0,1,2,15,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",1,0,0,0,2,1,5,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",1,0,0,0,2,1,4,0,0,4,67,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,138,        if (dayToUse > maxDay) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,139,            dayToUse = maxDay;,2,0,0,0,0,0,0,0,1,2,18,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,144,        long datePart =,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,146,        return datePart + timePart;,2,1,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,151,        int i_months = (int)months;,2,0,0,1,2,2,0,0,0,4,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,152,        if (i_months == months) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,153,"            return add(instant, i_months);",0,0,0,0,2,1,3,0,1,4,30,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,158,        long timePart = iChronology.getMillisOfDay(instant);,1,0,0,1,2,1,3,0,0,5,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,160,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",1,0,0,0,2,1,4,0,0,4,62,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,164,        long monthToUse = thisMonth - 1 + months;,3,2,0,0,0,1,0,0,0,3,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,165,        if (monthToUse >= 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,166,            yearToUse = thisYear + (monthToUse / iMax);,4,2,0,1,2,0,0,0,1,5,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,167,            monthToUse = (monthToUse % iMax) + 1;,3,2,0,1,2,0,0,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,169,            yearToUse = thisYear + (monthToUse / iMax) - 1;,4,3,0,1,2,0,0,0,1,5,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,170,            monthToUse = Math.abs(monthToUse);,1,0,0,1,2,0,3,0,1,5,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,171,            int remMonthToUse = (int)(monthToUse % iMax);,3,1,0,1,4,2,0,0,0,5,45,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,172,            if (remMonthToUse == 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,173,                remMonthToUse = iMax;,2,0,0,0,0,0,0,0,1,2,21,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,175,            monthToUse = iMax - remMonthToUse + 1;,3,2,0,0,0,0,0,0,1,3,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,176,            if (monthToUse == 1) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,177,                yearToUse += 1;,1,0,0,0,0,0,0,0,1,2,15,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,181,        if (yearToUse < iChronology.getMinYear() ||,1,2,0,1,3,1,2,0,0,6,43,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,184,            throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,188,        int i_yearToUse = (int)yearToUse;,2,0,0,1,2,2,0,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,189,        int i_monthToUse = (int)monthToUse;,2,0,0,1,2,2,0,0,0,4,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",1,0,0,0,2,1,5,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);",1,0,0,0,2,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,193,        if (dayToUse > maxDay) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,194,            dayToUse = maxDay;,2,0,0,0,0,0,0,0,1,2,18,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,197,        long datePart =,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,199,        return datePart + timePart;,2,1,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,206,        if (valueToAdd == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,207,            return values;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,209,        if (DateTimeUtils.isContiguous(partial)) {,0,0,0,2,5,1,3,0,0,4,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,210,            long instant = 0L;,1,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,211,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,57,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,212,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",1,0,1,1,8,0,7,0,1,6,80,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,214,"            instant = add(instant, valueToAdd);",1,0,0,0,2,0,3,0,2,4,35,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,215,"            return iChronology.get(partial, instant);",0,0,0,0,2,1,4,0,0,3,41,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,217,"            return super.add(partial, fieldIndex, values, valueToAdd);",5,0,0,0,2,2,0,0,0,3,58,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,232,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));",0,0,0,1,6,1,9,0,2,5,81,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,237,        if (minuendInstant < subtrahendInstant) {,2,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,238,"            return -getDifference(subtrahendInstant, minuendInstant);",0,0,0,0,2,1,3,0,2,4,57,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,241,        int minuendYear = iChronology.getYear(minuendInstant);,1,0,0,1,2,1,3,0,0,5,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,242,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",1,0,0,0,2,1,4,0,0,4,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,243,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,1,0,0,1,2,1,3,0,0,5,60,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,244,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",1,0,0,0,2,1,4,0,0,4,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,246,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,6,4,0,2,6,2,0,0,0,5,98,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,250,        int minuendDom = iChronology.getDayOfMonth,1,0,0,0,0,1,2,0,0,3,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,252,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",1,1,0,0,5,1,4,0,0,5,78,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,254,            int subtrahendDom = iChronology.getDayOfMonth,1,0,0,0,0,1,2,0,0,3,45,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,256,            if (subtrahendDom > minuendDom) {,2,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,260,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);",1,0,0,1,4,0,5,0,1,5,80,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,265,        long minuendRem = minuendInstant,2,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,267,        long subtrahendRem = subtrahendInstant,2,1,0,0,0,1,0,0,0,3,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,270,        if (minuendRem < subtrahendRem) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,271,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,274,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,292,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0,0,0,0,2,1,5,0,0,3,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,294,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,296,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",1,0,0,0,2,1,4,0,0,4,59,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,297,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",1,0,0,0,2,1,4,0,0,4,61,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,298,        if (thisDom > maxDom) {,2,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,300,            thisDom = maxDom;,2,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,303,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0,1,0,0,2,1,5,0,0,4,68,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,314,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,315,        if (iChronology.isLeapYear(thisYear)) {,0,0,0,2,5,1,3,0,0,4,39,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,316,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);",1,1,0,0,4,1,4,0,0,5,69,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,318,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,323,        return isLeap(instant) ? 1 : 0;,0,0,0,1,2,1,2,0,1,5,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,333,        return MIN;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,338,        return iMax;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,343,        int year = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,344,"        int month = iChronology.getMonthOfYear(instant, year);",1,0,0,0,2,1,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,345,"        return iChronology.getYearMonthMillis(year, month);",0,0,0,0,2,1,4,0,0,3,51,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,350,        return instant - roundFloor(instant);,1,1,0,1,2,1,2,0,1,7,37,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,22,358,        return iChronology.monthOfYear();,0,0,0,1,2,1,2,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,0,4,1,5,0,1,4,84,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,118,        if (minuendInstant < subtrahendInstant) {,2,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);",0,0,0,0,2,1,3,0,2,4,63,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,122,        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;,4,2,0,1,2,1,0,0,0,5,69,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {",1,1,0,0,5,1,3,0,1,6,58,4,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,125,                difference++;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);",1,1,0,0,5,1,3,0,1,6,63,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,127,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {",1,1,0,0,6,2,3,0,1,6,65,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,130,                difference--;,1,0,0,0,0,0,0,0,1,2,13,9,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);",1,1,0,0,5,1,3,0,1,6,62,7,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,133,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,145,        return iUnitMillis;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,52,"            throw new IllegalArgumentException(""The type must not be null"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,62,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,94,"        return getAsText(get(instant), locale);",0,0,0,1,4,1,4,0,2,5,39,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,106,"        return getAsText(instant, null);",0,0,0,0,2,1,2,0,1,4,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,121,"        return getAsText(fieldValue, locale);",0,0,0,0,2,1,3,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,136,"        return getAsText(partial, partial.get(getType()), locale);",0,0,0,2,6,1,6,0,2,5,58,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,153,        return Integer.toString(fieldValue);,0,0,0,1,2,1,3,0,0,4,36,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,168,"        return getAsShortText(get(instant), locale);",0,0,0,1,4,1,4,0,2,5,44,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,180,"        return getAsShortText(instant, null);",0,0,0,0,2,1,2,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,195,"        return getAsShortText(fieldValue, locale);",0,0,0,0,2,1,3,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,210,"        return getAsShortText(partial, partial.get(getType()), locale);",0,0,0,2,6,1,6,0,2,5,63,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,227,"        return getAsText(fieldValue, locale);",0,0,0,0,2,1,3,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,253,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,267,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,298,        if (valueToAdd == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,299,            return values;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,304,        DateTimeField nextField = null;,1,0,0,0,0,0,0,1,0,2,31,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,306,        while (valueToAdd > 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,307,"            int max = getMaximumValue(instant, values);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,308,            long proposed = values[fieldIndex] + valueToAdd;,2,1,1,0,2,1,0,0,0,5,48,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,309,            if (proposed <= max) {,2,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,310,                values[fieldIndex] = (int) proposed;,1,0,1,1,4,1,0,0,1,6,36,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,311,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,313,            if (nextField == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,314,                if (fieldIndex == 0) {,1,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0,0,0,1,2,3,0,1,2,5,69,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,317,                nextField = instant.getField(fieldIndex - 1);,2,1,0,1,2,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0,1,0,2,11,1,5,0,1,6,82,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0,0,0,1,2,3,0,1,2,5,61,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,2,2,1,1,4,0,0,0,1,6,74,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",2,1,0,0,2,0,4,0,1,5,90,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0,0,1,0,4,1,3,0,2,5,83,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,326,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,327,        while (valueToAdd < 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,328,"            int min = getMinimumValue(instant, values);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,329,            long proposed = values[fieldIndex] + valueToAdd;,2,1,1,0,2,1,0,0,0,5,48,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,330,            if (proposed >= min) {,2,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,331,                values[fieldIndex] = (int) proposed;,1,0,1,1,4,1,0,0,1,6,36,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,332,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,334,            if (nextField == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,335,                if (fieldIndex == 0) {,1,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0,0,0,1,2,3,0,1,2,5,69,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,338,                nextField = instant.getField(fieldIndex - 1);,2,1,0,1,2,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,339,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0,1,0,2,11,1,5,0,1,6,82,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0,0,0,1,2,3,0,1,2,5,61,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,343,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,2,2,1,1,4,0,0,0,1,6,74,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",2,1,0,0,2,0,4,0,2,5,98,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0,0,1,0,4,1,3,0,2,5,88,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,346,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0,0,1,0,4,1,4,0,1,5,87,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,379,        if (valueToAdd == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,380,            return values;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,385,        DateTimeField nextField = null;,1,0,0,0,0,0,0,1,0,2,31,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,387,        while (valueToAdd > 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,388,"            int max = getMaximumValue(instant, values);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,389,            long proposed = values[fieldIndex] + valueToAdd;,2,1,1,0,2,1,0,0,0,5,48,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,390,            if (proposed <= max) {,2,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,391,                values[fieldIndex] = (int) proposed;,1,0,1,1,4,1,0,0,1,6,36,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,392,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,394,            if (nextField == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,395,                if (fieldIndex == 0) {,1,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,396,                    valueToAdd -= (max + 1) - values[fieldIndex];,2,2,1,1,4,0,0,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,397,"                    values[fieldIndex] = getMinimumValue(instant, values);",0,0,1,0,4,0,3,0,2,4,54,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,398,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,400,                nextField = instant.getField(fieldIndex - 1);,2,1,0,1,2,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,402,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0,1,0,2,11,1,5,0,1,6,82,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0,0,0,1,2,3,0,1,2,5,61,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,406,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,2,2,1,1,4,0,0,0,1,6,74,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",2,1,0,0,2,0,4,0,1,5,101,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0,0,1,0,4,1,3,0,2,5,83,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,409,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,410,        while (valueToAdd < 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,411,"            int min = getMinimumValue(instant, values);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,412,            long proposed = values[fieldIndex] + valueToAdd;,2,1,1,0,2,1,0,0,0,5,48,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,413,            if (proposed >= min) {,2,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,414,                values[fieldIndex] = (int) proposed;,1,0,1,1,4,1,0,0,1,6,36,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,415,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,417,            if (nextField == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,418,                if (fieldIndex == 0) {,1,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,419,                    valueToAdd -= (min - 1) - values[fieldIndex];,2,2,1,1,4,0,0,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,420,"                    values[fieldIndex] = getMaximumValue(instant, values);",0,0,1,0,4,0,3,0,2,4,54,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,421,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,423,                nextField = instant.getField(fieldIndex - 1);,2,1,0,1,2,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,424,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0,1,0,2,11,1,5,0,1,6,82,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0,0,0,1,2,3,0,1,2,5,61,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,428,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,2,2,1,1,4,0,0,0,1,6,74,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",2,1,0,0,2,0,4,0,2,5,109,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0,0,1,0,4,1,3,0,2,5,88,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,431,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0,0,1,0,4,1,4,0,1,5,87,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,461,        int current = get(instant);,1,0,0,1,2,1,2,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,462,        int wrapped = FieldUtils.getWrappedValue,1,0,0,0,0,1,2,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,464,"        return set(instant, wrapped);",0,0,0,0,2,1,3,0,1,4,29,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,495,        int current = values[fieldIndex];,1,0,1,0,2,1,0,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,496,        int wrapped = FieldUtils.getWrappedValue,1,0,0,0,0,1,2,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields",0,0,0,0,2,1,5,0,1,4,76,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,75,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,81,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));",0,0,0,0,6,1,9,0,2,4,113,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,586,        values[fieldIndex] = newValue;,1,0,1,0,2,0,0,0,1,4,30,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,589,        for (int i = fieldIndex + 1; i < partial.size(); i++) {,4,2,0,2,5,2,2,0,1,7,55,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,590,            DateTimeField field = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,42,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,591,"            if (values[i] > field.getMaximumValue(partial, values)) {",0,1,1,0,7,1,4,0,0,5,57,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,592,"                values[i] = field.getMaximumValue(partial, values);",0,0,1,0,4,0,4,0,1,4,51,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,594,"            if (values[i] < field.getMinimumValue(partial, values)) {",0,1,1,0,7,1,4,0,0,5,57,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,595,"                values[i] = field.getMinimumValue(partial, values);",0,0,1,0,4,0,4,0,1,4,51,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,598,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,618,"        int value = convertText(text, locale);",1,0,0,0,2,1,3,0,1,5,38,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,619,"        return set(instant, value);",0,0,0,0,2,1,3,0,1,4,27,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,635,"        return set(instant, text, null);",0,0,0,0,2,1,3,0,1,4,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,654,"        int value = convertText(text, locale);",1,0,0,0,2,1,3,0,1,5,38,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,655,"        return set(instant, fieldIndex, values, value);",0,0,0,0,2,1,5,0,1,4,47,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,668,            return Integer.parseInt(text);,0,0,0,1,2,1,3,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,669,        } catch (NumberFormatException ex) {,1,0,0,1,4,1,0,1,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,670,"            throw new IllegalFieldValueException(getType(), text);",1,0,0,1,4,2,1,1,2,7,54,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,704,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,716,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,746,        return getMinimumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,758,        return getMinimumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,772,        return getMinimumValue(instant);,0,0,0,1,2,1,2,0,1,5,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,792,        return getMaximumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,804,        return getMaximumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,818,        return getMaximumValue(instant);,0,0,0,1,2,1,2,0,1,5,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,829,        int max = getMaximumValue();,1,0,0,1,2,1,1,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,830,        if (max >= 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,831,            if (max < 10) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,832,                return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,833,            } else if (max < 100) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,834,                return 2;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,835,            } else if (max < 1000) {,1,1,0,1,4,2,0,0,0,5,24,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,836,                return 3;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,839,        return Integer.toString(max).length();,0,0,0,1,4,1,4,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,850,        return getMaximumTextLength(locale);,0,0,0,1,2,1,2,0,1,5,36,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,886,        long newInstant = roundFloor(instant);,1,0,0,1,2,1,2,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,887,        if (newInstant != instant) {,2,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,888,"            instant = add(newInstant, 1);",1,0,0,0,2,0,2,0,2,4,29,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,890,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,903,        long floor = roundFloor(instant);,1,0,0,1,2,1,2,0,1,6,33,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,904,        long ceiling = roundCeiling(instant);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,906,        long diffFromFloor = instant - floor;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,907,        long diffToCeiling = ceiling - instant;,3,1,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,909,        if (diffFromFloor <= diffToCeiling) {,2,1,0,1,3,1,0,0,0,5,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,911,            return floor;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,913,            return ceiling;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,927,        long floor = roundFloor(instant);,1,0,0,1,2,1,2,0,1,6,33,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,928,        long ceiling = roundCeiling(instant);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,930,        long diffFromFloor = instant - floor;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,931,        long diffToCeiling = ceiling - instant;,3,1,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,933,        if (diffToCeiling <= diffFromFloor) {,2,1,0,1,3,1,0,0,0,5,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,935,            return ceiling;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,937,            return floor;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,955,        long floor = roundFloor(instant);,1,0,0,1,2,1,2,0,1,6,33,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,956,        long ceiling = roundCeiling(instant);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,958,        long diffFromFloor = instant - floor;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,959,        long diffToCeiling = ceiling - instant;,3,1,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,961,        if (diffFromFloor < diffToCeiling) {,2,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,963,            return floor;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,964,        } else if (diffToCeiling < diffFromFloor) {,2,1,0,1,4,2,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,966,            return ceiling;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,970,            if ((get(ceiling) & 1) == 0) {,0,2,0,3,7,1,2,0,1,6,30,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,971,                return ceiling;,1,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,973,            return floor;,1,0,0,0,0,1,0,0,0,2,13,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,994,        return instant - roundFloor(instant);,1,1,0,1,2,1,2,0,1,7,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,22,1003,"        return ""DateTimeField["" + getName() + ']';",0,1,0,1,4,1,1,0,3,6,42,4,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,164,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,169,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",2,1,0,0,2,2,3,0,0,5,65,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",2,1,0,0,2,2,3,0,0,5,65,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,182,"            return ImpreciseDateTimeField.this.add(instant, value);",1,0,0,0,2,2,3,0,0,4,55,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,186,"            return ImpreciseDateTimeField.this.add(instant, value);",1,0,0,0,2,2,3,0,0,4,55,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,190,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,22,195,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,49,"            throw new IllegalArgumentException(""The type must not be null"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,59,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,79,        return FieldUtils.safeToInt(getValueAsLong(duration));,0,0,0,2,4,1,4,0,1,5,54,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,91,        return duration / getUnitMillis();,1,1,0,1,2,1,1,0,1,7,34,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));",0,0,0,0,4,1,5,0,1,4,63,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,123,        return value * getUnitMillis();  // safe,1,1,0,1,2,1,1,0,1,7,40,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());",0,0,0,1,4,1,4,0,1,5,55,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,146,        long otherMillis = otherField.getUnitMillis();,1,0,0,1,2,1,2,0,0,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,147,        long thisMillis = getUnitMillis();,1,0,0,1,2,1,1,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,149,        if (thisMillis == otherMillis) {,2,1,0,1,3,1,0,0,0,5,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,152,        if (thisMillis < otherMillis) {,2,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,153,            return -1;,0,0,0,0,0,1,0,0,1,2,10,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,155,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,165,"        return ""DurationField["" + getName() + ']';",0,1,0,1,4,1,1,0,3,6,42,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,22,38,public abstract class BaseDurationField extends DurationField implements Serializable {,1,0,0,0,1,5,0,2,2,5,87,1,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,134,            throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,144,            return base.getZone();,0,0,0,1,2,1,2,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,153,        if ((base = getBase()) != null) {,1,1,0,3,7,1,1,0,2,7,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0,0,0,0,2,1,6,0,0,3,74,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,157,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,2,0,0,1,28,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",1,1,0,0,2,1,4,0,1,6,74,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,167,        if ((base = getBase()) != null) {,1,1,0,3,7,1,1,0,2,7,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,5,0,0,3,60,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0,0,0,1,4,0,5,0,0,3,78,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0,0,0,1,4,0,5,0,0,3,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0,0,0,1,4,0,5,0,0,3,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0,0,0,1,4,0,5,0,0,3,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0,4,0,0,2,1,4,0,1,5,59,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,185,        return iMinDaysInFirstWeek;,1,0,0,0,0,1,0,0,0,2,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,196,        return super.equals(obj);,2,0,0,1,2,2,0,0,0,4,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,206,        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();,0,3,0,1,12,1,6,0,3,6,97,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,217,        StringBuffer sb = new StringBuffer(60);,1,0,0,1,2,1,0,2,1,6,39,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,218,        String name = getClass().getName();,1,0,0,1,4,0,2,1,1,6,35,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,219,        int index = name.lastIndexOf('.');,1,0,0,1,2,1,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,220,        if (index >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,221,            name = name.substring(index + 1);,2,1,0,1,2,0,2,0,1,6,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,223,        sb.append(name);,0,0,0,1,2,0,3,0,0,3,16,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,224,        sb.append('[');,0,0,0,1,3,0,2,0,1,4,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,225,        DateTimeZone zone = getZone();,1,0,0,1,2,0,1,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,226,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,227,            sb.append(zone.getID());,0,0,0,2,4,0,4,0,0,3,24,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,229,        if (getMinimumDaysInFirstWeek() != 4) {,0,1,0,2,5,1,1,0,1,6,39,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,230,"            sb.append("",mdfw="");",0,0,0,0,2,0,2,0,1,3,20,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,231,            sb.append(getMinimumDaysInFirstWeek());,0,0,0,2,4,0,3,0,1,4,39,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,233,        sb.append(']');,0,0,0,1,3,0,2,0,1,4,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,234,        return sb.toString();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,307,        return 366;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,317,        return isLeapYear(year) ? 366 : 365;,0,0,0,1,2,1,2,0,1,5,36,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,327,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,1,0,0,1,2,1,2,0,1,6,55,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,328,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,2,1,0,1,2,1,1,0,1,7,59,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,329,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,4,2,0,2,6,2,0,0,0,5,89,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,339,        long jan1millis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,340,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,1,0,0,1,2,1,2,0,1,6,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,342,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,2,2,0,2,5,1,0,0,0,5,48,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,344,            return jan1millis + (8 - jan1dayOfWeek),2,3,0,1,2,1,0,0,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,348,            return jan1millis - (jan1dayOfWeek - 1),2,3,0,1,2,1,0,0,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,360,        return getYearInfo(year).iFirstDayMillis;,1,0,0,1,2,1,2,0,1,6,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,371,        long millis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,372,"        millis += getTotalMillisByYearMonth(year, month);",1,0,0,0,2,0,3,0,2,4,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,373,        return millis;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,385,        long millis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,386,"        millis += getTotalMillisByYearMonth(year, month);",1,0,0,0,2,0,3,0,2,4,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,387,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,4,3,0,1,4,2,0,0,0,5,74,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,1,0,0,1,2,1,1,0,1,6,56,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,2,2,0,1,4,1,1,0,1,7,64,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,401,        if (i2 < 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,402,            i2 = i2 - unitMillis + 1;,3,2,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,404,        int year = (int) (i2 / unitMillis);,3,1,0,1,4,2,0,0,0,5,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,406,        long yearStart = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,407,        long diff = instant - yearStart;,3,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,409,        if (diff < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,410,            year--;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,3,2,0,1,4,2,0,0,0,5,61,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,414,            if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,415,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,3,1,0,0,0,0,0,0,1,3,50,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,417,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,3,1,0,0,0,0,0,0,1,3,50,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,420,            yearStart += oneYear;,2,0,0,0,0,0,0,0,1,2,21,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,422,            if (yearStart <= instant) {,2,1,0,1,3,1,0,0,0,5,27,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,424,                year++;,1,0,0,0,0,0,0,0,1,2,7,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,428,        return year;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,435,"        return getMonthOfYear(millis, getYear(millis));",0,0,0,1,4,1,4,0,2,5,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,448,        int year = getYear(millis);,1,0,0,1,2,1,2,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,449,"        int month = getMonthOfYear(millis, year);",1,0,0,0,2,1,3,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,450,"        return getDayOfMonth(millis, year, month);",0,0,0,0,2,1,4,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,458,"        int month = getMonthOfYear(millis, year);",1,0,0,0,2,1,3,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,459,"        return getDayOfMonth(millis, year, month);",0,0,0,0,2,1,4,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,468,        long dateMillis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",1,0,0,0,2,0,3,0,2,4,53,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,4,3,0,2,6,2,0,0,0,5,76,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,477,"        return getDayOfYear(instant, getYear(instant));",0,0,0,1,4,1,4,0,2,5,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,485,        long yearStart = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,4,3,0,2,6,2,0,0,0,5,76,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,493,        int year = getYear(instant);,1,0,0,1,2,1,2,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,494,"        int week = getWeekOfWeekyear(instant, year);",1,0,0,0,2,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,495,        if (week == 1) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,3,1,0,1,2,1,1,0,1,7,60,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,497,        } else if (week > 51) {,1,1,0,1,4,2,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,498,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,3,2,0,2,4,1,1,0,1,7,66,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,500,            return year;,1,0,0,0,0,1,0,0,0,2,12,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,508,"        return getWeekOfWeekyear(instant, getYear(instant));",0,0,0,1,4,1,4,0,2,5,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,516,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,1,0,0,1,2,1,2,0,1,6,55,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,517,        if (instant < firstWeekMillis1) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,518,            return getWeeksInYear(year - 1);,1,1,0,1,2,1,1,0,1,7,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,520,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,2,1,0,1,2,1,1,0,1,7,59,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,521,        if (instant >= firstWeekMillis2) {,2,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,522,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,524,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,4,3,0,2,6,2,0,0,0,5,84,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,534,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,535,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,4,1,0,0,0,0,0,0,1,3,63,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),4,3,0,2,4,0,0,0,1,5,70,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,539,            if (daysSince19700101 < -3) {,1,1,0,1,3,1,0,0,1,6,29,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,1,3,0,2,6,2,0,0,0,5,47,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,544,        return 1 + (int) ((daysSince19700101 + 3) % 7);,1,3,0,2,6,2,0,0,0,5,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,551,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,552,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,3,1,0,1,4,2,0,0,0,5,58,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),2,2,0,1,2,1,0,0,0,5,45,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,565,        return 31;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,575,        int thisYear = getYear(instant);,1,0,0,1,2,1,2,0,1,6,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",1,0,0,0,2,1,3,0,1,5,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,577,"        return getDaysInYearMonth(thisYear, thisMonth);",0,0,0,0,2,1,3,0,1,4,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,590,        return getDaysInMonthMax(instant);,0,0,0,1,2,1,2,0,1,5,34,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0,0,0,1,8,0,7,0,2,4,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0,0,0,1,6,0,7,0,1,4,97,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0,0,0,1,6,0,8,0,1,4,115,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0,0,0,0,2,1,4,0,1,4,60,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,682,        return getMaxMonth();,0,0,0,1,2,1,1,0,1,5,21,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,738,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,3,1,1,0,2,0,0,1,0,5,50,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,739,        if (info == null || info.iYear != year) {,4,3,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",2,0,0,1,4,1,2,1,3,7,63,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,741,            iYearInfoCache[year & CACHE_MASK] = info;,3,1,1,0,2,0,0,0,1,5,41,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,743,        return info;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,216,        Stub(DateTimeZone zone) {,2,0,0,1,3,0,0,1,0,4,25,3,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,217,            iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,218,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,221,            return ISOChronology.getInstance(iZone);,0,0,0,1,2,1,3,0,0,4,40,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,225,            out.writeObject(iZone);,0,0,0,1,2,0,3,0,0,3,23,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,226,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,231,            iZone = (DateTimeZone)in.readObject();,1,0,0,1,4,0,2,1,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,22,232,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,754,            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);,0,0,0,1,4,1,5,0,0,4,72,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,758,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));",0,0,0,1,6,1,7,0,1,5,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,762,            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();,0,0,0,1,4,1,4,0,0,4,67,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");",0,0,0,1,2,2,0,1,2,5,75,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");",0,0,0,1,2,2,0,1,2,5,77,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,79,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,80,            return (int) ((instant / getUnitMillis()) % iRange);,2,2,0,3,8,2,1,0,1,7,52,8,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,3,5,0,3,10,2,1,0,1,7,71,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,95,        int thisValue = get(instant);,1,0,0,1,2,1,2,0,1,6,29,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,96,        int wrappedValue = FieldUtils.getWrappedValue,1,0,0,0,0,1,2,0,0,3,45,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,99,        return instant + (wrappedValue - thisValue) * getUnitMillis();,3,3,0,1,4,1,1,0,1,7,62,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0,0,0,1,6,1,5,0,2,5,80,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,112,        return instant + (value - get(instant)) * iUnitMillis;,3,3,0,2,4,1,2,0,1,7,54,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,131,        return iRange - 1;,1,1,0,0,0,1,0,0,0,3,18,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,22,143,        return iRange;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");",0,0,0,1,2,2,0,1,2,5,74,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");",0,0,0,1,2,2,0,1,2,5,79,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,66,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0,0,0,1,3,1,4,0,1,5,60,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,80,        return instant + (value - get(instant)) * iUnitMillis;,3,3,0,2,4,1,2,0,1,7,54,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,92,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,93,            return instant - instant % iUnitMillis;,3,2,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,95,            instant += 1;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,96,            return instant - instant % iUnitMillis - iUnitMillis;,4,3,0,0,0,1,0,0,0,3,53,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,109,        if (instant > 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,110,            instant -= 1;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,111,            return instant - instant % iUnitMillis + iUnitMillis;,4,3,0,0,0,1,0,0,0,3,53,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,113,            return instant - instant % iUnitMillis;,3,2,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,126,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,127,            return instant % iUnitMillis;,2,1,0,0,0,1,0,0,0,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,3,4,0,1,2,1,0,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,22,163,        return getMaximumValue(instant);,0,0,0,1,2,1,2,0,1,5,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,49,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,60,        return iChronology.getWeekyear(instant);,0,0,0,1,2,1,3,0,0,4,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,72,        if (years == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,73,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,75,"        return set(instant, get(instant) + years);",1,1,0,1,4,1,4,0,2,7,42,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,79,"        return add(instant, FieldUtils.safeToInt(value));",0,0,0,1,4,1,5,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,92,"        return add(instant, years);",0,0,0,0,2,1,3,0,1,4,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,96,        if (minuendInstant < subtrahendInstant) {,2,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,97,"            return -getDifference(subtrahendInstant, minuendInstant);",0,0,0,0,2,1,3,0,2,4,57,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,100,        int minuendWeekyear = get(minuendInstant);,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,101,        int subtrahendWeekyear = get(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,103,        long minuendRem = remainder(minuendInstant);,1,0,0,1,2,1,2,0,1,6,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,104,        long subtrahendRem = remainder(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,107,        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {,2,3,0,2,5,1,3,0,0,6,84,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,108,            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;,3,0,0,0,0,0,0,0,1,2,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,111,        int difference = minuendWeekyear - subtrahendWeekyear;,3,1,0,0,0,1,0,0,0,3,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,112,        if (minuendRem < subtrahendRem) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,113,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,115,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0,0,0,1,3,1,5,0,0,4,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,133,        int thisWeekyear = get( instant );,1,0,0,1,2,1,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,134,        if ( thisWeekyear == year ) {,2,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,135,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,140,        int thisDow = iChronology.getDayOfWeek(instant);,1,0,0,1,2,1,3,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,1,0,0,1,2,1,3,0,0,5,65,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,1,0,0,1,2,1,3,0,0,5,55,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,3,1,0,1,2,1,0,0,0,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,1,0,0,1,2,1,3,0,0,5,55,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,155,        if ( setToWeek > maxOutWeeks ) {,2,1,0,1,3,1,0,0,0,5,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,156,            setToWeek = maxOutWeeks;,2,0,0,0,0,0,0,0,1,2,24,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,162,        long workInstant = instant; // Get a copy,2,0,0,0,0,1,0,0,0,2,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,168,"        workInstant = iChronology.setYear( workInstant, year );",1,0,0,0,2,0,4,0,1,4,55,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,173,        int workWoyYear = get( workInstant );,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,179,        if ( workWoyYear < year ) {,2,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,180,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,3,0,0,0,0,0,0,0,1,2,49,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,181,        } else if ( workWoyYear > year ) {,2,1,0,1,4,2,0,0,0,5,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,182,            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;,3,0,0,0,0,0,0,0,1,2,49,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,1,0,0,1,2,1,3,0,0,5,64,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),4,3,0,1,2,0,0,0,1,5,56,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",1,0,0,1,4,0,5,0,1,5,66,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,204,        return workInstant;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,212,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;,0,1,0,2,4,1,5,0,0,5,73,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,216,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;,0,1,0,2,4,1,5,0,0,5,73,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,224,        return iChronology.getMinYear();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,228,        return iChronology.getMaxYear();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,1,0,0,1,4,0,4,0,1,5,59,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,235,        int wow = iChronology.getWeekOfWeekyear(instant);,1,0,0,1,2,1,3,0,0,5,49,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,236,        if (wow > 1) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,4,2,0,2,6,1,0,0,1,6,66,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,239,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,243,        return instant - roundFloor(instant);,1,1,0,1,2,1,2,0,1,7,37,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,22,250,        return iChronology.weekyear();,0,0,0,1,2,1,2,0,0,4,30,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,22,56,        return iChronology.getDayOfWeek(instant);,0,0,0,1,2,1,3,0,0,4,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,22,67,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);,0,0,0,1,4,1,5,0,0,4,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,22,78,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);,0,0,0,1,4,1,5,0,0,4,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,22,90,        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);,0,0,0,1,4,1,5,0,0,4,68,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,22,103,        return DateTimeConstants.MONDAY;,2,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,22,112,        return DateTimeConstants.SUNDAY;,2,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,22,122,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();,0,0,0,1,4,1,4,0,0,4,69,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,22,132,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();,0,0,0,1,4,1,4,0,0,4,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,22,139,        return iChronology.dayOfWeek();,0,0,0,1,2,1,2,0,0,4,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,45,        int year = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,46,        if (year <= 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,47,            year = 1 - year;,2,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,49,        return year;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,53,"        return getWrappedField().add(instant, years);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,57,"        return getWrappedField().add(instant, years);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,61,"        return getWrappedField().addWrapField(instant, years);",0,0,0,1,4,1,4,0,1,5,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0,0,0,1,4,1,6,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,80,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());",0,0,0,1,4,1,4,0,1,5,63,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,86,        if (iChronology.getYear(instant) <= 0) {,0,1,0,2,5,1,3,0,0,5,40,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,87,            year = 1 - year;,2,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,89,"        return super.set(instant, year);",3,0,0,0,2,2,0,0,0,3,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,101,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,105,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,109,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,22,116,        return iChronology.yearOfEra();,0,0,0,1,2,1,2,0,0,4,31,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,56,"            throw new IllegalArgumentException(""The field must not be null"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,59,"            throw new IllegalArgumentException(""The field must be supported"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,74,        return iField.isLenient();,0,0,0,1,2,1,2,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,78,        return iField.get(instant);,0,0,0,1,2,1,3,0,0,4,27,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,82,"        return iField.set(instant, value);",0,0,0,0,2,1,4,0,0,3,34,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,94,        return iField.getMinimumValue();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,98,        return iField.getMaximumValue();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,22,102,        return iField.roundFloor(instant);,0,0,0,1,2,1,3,0,0,4,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,57,"            throw new IllegalArgumentException(""Must supply a chronology"");",0,0,0,1,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,61,"            throw new IllegalArgumentException(""UTC chronology must not be null"");",0,0,0,1,2,2,0,1,2,5,70,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,64,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");",0,0,0,1,2,2,0,1,2,5,68,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,90,        return getBase();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,94,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,95,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,97,        if (zone == getParam()) {,1,1,0,2,5,1,1,0,1,7,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,98,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,100,        if (zone == DateTimeZone.UTC) {,3,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,101,            return getBase();,0,0,0,1,2,1,1,0,1,5,17,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,103,"        return new ZonedChronology(getBase(), zone);",1,0,0,1,4,2,1,1,2,7,44,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,110,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,3,0,2,5,45,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,119,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,3,0,2,5,45,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,129,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,3,0,2,5,45,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,139,        DateTimeZone zone = getZone();,1,0,0,1,2,0,1,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,140,        int offset = zone.getOffsetFromLocal(instant);,1,0,0,1,2,1,3,0,0,5,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,141,        instant -= offset;,2,0,0,0,0,0,0,0,1,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,142,        if (offset != zone.getOffset(instant)) {,1,1,0,2,5,1,3,0,0,6,40,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,143,            throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,147,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,213,            return field;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,216,            return (DateTimeField)converted.get(field);,0,0,0,1,4,1,3,1,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,237,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,238,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,240,        if (obj instanceof ZonedChronology == false) {,1,1,0,1,3,2,0,1,1,7,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,241,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,243,        ZonedChronology chrono = (ZonedChronology) obj;,2,0,0,1,2,0,0,2,0,4,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,244,        return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,256,        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;,0,4,0,1,8,1,4,0,2,6,69,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,265,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';",0,1,0,1,8,1,3,0,5,6,71,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,90,"        return getInstance(DateTimeZone.getDefault(), 4);",0,0,0,1,4,1,3,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,112,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,123,            } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,124,                throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",3,0,0,0,2,0,2,0,2,4,59,10,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,132,                    chrono = new GregorianChronology,1,0,0,0,0,1,0,1,2,4,32,10,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,155,        Chronology base = getBase();,1,0,0,1,2,0,1,1,1,6,28,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,156,        int minDays = getMinimumDaysInFirstWeek();,1,0,0,1,2,1,1,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,157,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,3,1,0,1,2,0,0,0,1,5,77,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,158,        return base == null ?,1,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,171,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,181,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,182,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,184,        if (zone == getZone()) {,1,1,0,2,5,1,1,0,1,7,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,185,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,187,        return getInstance(zone);,0,0,0,1,2,1,2,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,3,8,0,2,10,1,0,0,0,5,69,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,202,        int leapYears = year / 100;,2,1,0,0,0,1,0,0,0,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,203,        if (year < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,4,7,0,2,8,0,0,0,1,5,71,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,4,4,0,1,4,0,0,0,1,5,55,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,212,            if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,213,                leapYears--;,1,0,0,0,0,0,0,0,1,2,12,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,5,4,0,2,4,1,0,0,0,5,90,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,221,        return MIN_YEAR;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,233,        return MILLIS_PER_YEAR / 2;,1,1,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,22,241,        return (1970L * MILLIS_PER_YEAR) / 2;,1,2,0,1,2,1,0,0,0,5,37,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,2,2,0,3,8,2,2,0,1,7,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,93,        return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,120,        if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,134,        return (value > 28 ? getDaysInMonthMax(instant) : 28);,1,1,0,2,4,1,2,0,1,7,54,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,139,        if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,148,        int minuendYear = getYear(minuendInstant);,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,149,        int subtrahendYear = getYear(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,2,1,0,1,2,1,2,0,1,7,62,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,153,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,2,1,0,1,2,1,2,0,1,7,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,156,        if (subtrahendRem >= FEB_29) {,2,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,157,            if (isLeapYear(subtrahendYear)) {,0,0,0,2,5,1,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,158,                if (!isLeapYear(minuendYear)) {,0,0,0,2,5,1,2,0,2,5,31,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,159,                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;,3,0,0,0,0,0,0,0,1,2,50,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,2,2,0,2,6,2,2,0,1,7,61,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,162,                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;,3,0,0,0,0,0,0,0,1,2,47,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,166,        int difference = minuendYear - subtrahendYear;,3,1,0,0,0,1,0,0,0,3,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,167,        if (minuendRem < subtrahendRem) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,168,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,170,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,175,        int thisYear = getYear(instant);,1,0,0,1,2,1,2,0,1,6,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",1,0,0,0,2,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,177,        int millisOfDay = getMillisOfDay(instant);,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,1,2,0,2,5,1,0,0,0,5,44,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,180,            if (isLeapYear(thisYear)) {,0,0,0,2,5,1,2,0,1,5,27,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,182,                if (!isLeapYear(year)) {,0,0,0,2,5,1,2,0,2,5,24,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,184,                    dayOfYear--;,1,0,0,0,0,0,0,0,1,2,12,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,188,                if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,190,                    dayOfYear++;,1,0,0,0,0,0,0,0,1,2,12,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",1,0,0,0,2,0,3,0,2,4,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,196,        instant += millisOfDay;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,22,198,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0,0,0,1,2,2,0,1,2,5,69,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,64,            iDurationField = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,90,"        super(remainderField.getWrappedField(), type);",1,0,0,1,4,1,2,0,1,6,46,3,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,91,        int divisor = iDivisor = remainderField.iDivisor;,4,0,0,0,0,1,0,0,1,3,49,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,92,        iDurationField = remainderField.iRangeField;,3,0,0,0,0,0,0,0,1,2,44,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,94,        DateTimeField field = getWrappedField();,1,0,0,1,2,0,1,1,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,95,        int i = field.getMinimumValue();,1,0,0,1,2,1,2,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,96,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,6,5,0,2,6,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,98,        int j = field.getMaximumValue();,1,0,0,1,2,1,2,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,99,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,6,5,0,2,6,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,101,        iMin = min;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,102,        iMax = max;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,112,        int value = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,43,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,113,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,114,            return value / iDivisor;,2,1,0,0,0,1,0,0,0,3,24,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,116,            return ((value + 1) / iDivisor) - 1;,2,3,0,2,4,1,0,0,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,129,"        return getWrappedField().add(instant, amount * iDivisor);",2,1,0,1,4,1,3,0,1,7,57,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,141,"        return getWrappedField().add(instant, amount * iDivisor);",2,1,0,1,4,1,3,0,1,7,57,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0,0,0,1,6,1,9,0,2,5,82,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;",1,1,0,1,4,1,4,0,1,7,85,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;",1,1,0,1,4,1,4,0,1,7,91,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0,0,0,0,2,1,5,0,0,3,54,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,174,        int remainder = getRemainder(getWrappedField().get(instant));,1,0,0,2,6,1,4,0,2,6,61,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);",3,2,0,1,4,1,3,0,1,7,68,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,191,        return iMin;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,200,        return iMax;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,204,        DateTimeField field = getWrappedField();,1,0,0,1,2,0,1,1,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));",1,1,0,1,6,1,7,0,1,7,69,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,209,"        return set(instant, get(getWrappedField().remainder(instant)));",0,0,0,2,8,1,6,0,3,5,63,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,218,        return iDivisor;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,222,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,223,            return value % iDivisor;,2,1,0,0,0,1,0,0,0,3,24,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,22,225,            return (iDivisor - 1) + ((value + 1) % iDivisor);,3,4,0,2,6,1,0,0,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0,0,0,1,2,2,0,1,2,5,69,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,60,            iRangeField = null;,1,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,100,        int value = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,43,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,101,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,102,            return value % iDivisor;,2,1,0,0,0,1,0,0,0,3,24,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,104,            return (iDivisor - 1) + ((value + 1) % iDivisor);,3,4,0,2,6,1,0,0,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));",1,1,0,1,6,1,7,0,2,7,87,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);",1,1,0,0,2,1,3,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,131,        int divided = getDivided(getWrappedField().get(instant));,1,0,0,2,6,1,4,0,2,6,57,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,132,"        return getWrappedField().set(instant, divided * iDivisor + value);",3,2,0,1,4,1,3,0,1,7,66,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,162,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,166,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,170,        return getWrappedField().roundHalfFloor(instant);,0,0,0,1,4,1,3,0,1,5,49,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,174,        return getWrappedField().roundHalfCeiling(instant);,0,0,0,1,4,1,3,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,178,        return getWrappedField().roundHalfEven(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,182,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,191,        return iDivisor;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,195,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,196,            return value / iDivisor;,2,1,0,0,0,1,0,0,0,3,24,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,22,198,            return ((value + 1) / iDivisor) - 1;,2,3,0,2,4,1,0,0,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,22,479,                    eras = f;,2,0,0,0,0,0,0,0,1,2,9,8,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,161,"        super(base, param, minDaysInFirstWeek);",3,0,0,0,2,1,0,0,1,4,39,3,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,162,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,63,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""AM"");",1,0,0,1,2,4,0,2,5,6,85,2,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,72,"    private static final Map<DateTimeZone, CopticChronology[]> cCache = new HashMap<DateTimeZone, CopticChronology[]>();",1,0,0,1,6,4,0,6,4,6,116,2,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,78,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,3,0,0,1,2,0,1,0,2,5,45,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,79,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,89,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,98,"        return getInstance(DateTimeZone.getDefault(), 4);",0,0,0,1,4,1,3,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,108,"        return getInstance(zone, 4);",0,0,0,0,2,1,2,0,1,4,28,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,119,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,120,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,123,        synchronized (cCache) {,1,0,0,1,3,1,0,0,0,4,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,124,            CopticChronology[] chronos = cCache.get(zone);,1,0,0,1,4,0,3,1,0,5,46,6,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,125,            if (chronos == null) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,126,                chronos = new CopticChronology[7];,1,0,0,0,2,1,0,1,1,5,34,8,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,127,"                cCache.put(zone, chronos);",0,0,0,0,2,0,4,0,0,2,26,9,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,130,                chrono = chronos[minDaysInFirstWeek - 1];,2,1,1,0,2,0,0,0,1,5,41,8,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,134,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,131,            } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,8,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,132,                throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,9,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,135,            if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,136,                if (zone == DateTimeZone.UTC) {,3,1,0,1,3,1,0,0,0,5,31,8,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,138,"                    chrono = new CopticChronology(null, null, minDaysInFirstWeek);",2,0,0,0,2,1,0,1,2,5,62,10,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,140,"                    DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",2,0,0,0,2,1,0,2,1,5,64,10,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,141,                    chrono = new CopticChronology,1,0,0,0,0,1,0,1,2,4,29,10,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,144,                } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",3,0,0,0,2,0,2,0,2,4,59,10,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,146,                    chrono = new CopticChronology,1,0,0,0,0,1,0,1,2,4,29,10,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,149,                chronos[minDaysInFirstWeek - 1] = chrono;,2,1,1,0,2,0,0,0,1,5,41,8,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,151,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,152,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,168,        Chronology base = getBase();,1,0,0,1,2,0,1,1,1,6,28,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,169,        int minDays = getMinimumDaysInFirstWeek();,1,0,0,1,2,1,1,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,170,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,3,1,0,1,2,0,0,0,1,5,77,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,171,        return base == null ?,1,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,184,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,194,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,195,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,197,        if (zone == getZone()) {,1,1,0,2,5,1,1,0,1,7,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,198,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,200,        return getInstance(zone);,0,0,0,1,2,1,2,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,209,        int relativeYear = year - 1687;,2,1,0,0,0,1,0,0,0,3,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,211,        if (relativeYear <= 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,214,            leapYears = (relativeYear + 3) >> 2;,2,2,0,1,2,0,0,0,1,5,36,6,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,216,            leapYears = relativeYear >> 2;,2,1,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,218,            if (!isLeapYear(year)) {,0,0,0,2,5,1,2,0,2,5,24,6,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,219,                leapYears++;,1,0,0,0,0,0,0,0,1,2,12,8,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,223,        long millis = (relativeYear * 365L + leapYears),3,3,0,1,2,1,0,0,0,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,228,        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;,3,3,0,1,2,1,0,0,0,5,64,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,233,        return MIN_YEAR;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,238,        return MAX_YEAR;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,243,        return (1686L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY) / 2;,3,4,0,1,2,1,0,0,0,5,79,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,248,        if (getBase() == null) {,0,1,0,2,5,1,1,0,1,6,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,249,            super.assemble(fields);,2,0,0,1,2,1,0,0,0,4,23,7,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,252,"            fields.year = new SkipDateTimeField(this, fields.year);",4,0,0,0,2,2,0,1,2,5,55,6,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,253,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",4,0,0,0,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,255,            fields.era = ERA_FIELD;,3,0,0,0,0,0,0,0,1,2,23,6,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,256,"            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 13);",2,0,0,0,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,257,            fields.months = fields.monthOfYear.getDurationField();,4,0,0,1,2,0,1,0,1,5,54,6,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,259,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/CopticChronology,22,51,public final class CopticChronology extends BasicFixedMonthChronology {,1,0,0,0,1,4,0,1,2,5,71,1,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,59,"        super(base, param, minDaysInFirstWeek);",3,0,0,0,2,1,0,0,1,4,39,3,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,65,        int thisYear = getYear(instant);,1,0,0,1,2,1,2,0,1,6,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,66,"        int dayOfYear = getDayOfYear(instant, thisYear);",1,0,0,0,2,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,67,        int millisOfDay = getMillisOfDay(instant);,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,69,        if (dayOfYear > 365) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,71,            if (!isLeapYear(year)) {,0,0,0,2,5,1,2,0,2,5,24,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,73,                dayOfYear--;,1,0,0,0,0,0,0,0,1,2,12,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,77,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",1,0,0,0,2,0,3,0,2,4,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,78,        instant += millisOfDay;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,79,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,85,        int minuendYear = getYear(minuendInstant);,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,86,        int subtrahendYear = getYear(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,89,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,2,1,0,1,2,1,2,0,1,7,62,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,90,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,2,1,0,1,2,1,2,0,1,7,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,92,        int difference = minuendYear - subtrahendYear;,3,1,0,0,0,1,0,0,0,3,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,93,        if (minuendRem < subtrahendRem) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,94,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,96,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,101,        return ((month - 1) * MILLIS_PER_MONTH);,2,2,0,2,4,1,0,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,107,        return (getDayOfYear(millis) - 1) % MONTH_LENGTH + 1;,1,3,0,2,4,1,2,0,1,7,53,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,112,        return (year & 3) == 3;,1,2,0,1,2,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,117,        return (month != 13) ? MONTH_LENGTH : (isLeapYear(year) ? 6 : 5);,2,1,0,2,6,1,2,0,1,7,65,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,122,        return MONTH_LENGTH;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,127,        return (month != 13 ? MONTH_LENGTH : 6);,2,1,0,1,2,1,0,0,0,5,40,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,132,        return (getDayOfYear(millis) - 1) / MONTH_LENGTH + 1;,1,3,0,2,4,1,2,0,1,7,53,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,137,        long monthZeroBased = (millis - getYearMillis(year)) / MILLIS_PER_MONTH;,3,2,0,2,4,1,2,0,1,7,72,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,138,        return ((int) monthZeroBased) + 1;,1,1,0,2,4,2,0,0,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,143,        return 13;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,148,        return MILLIS_PER_YEAR;,1,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,153,        return MILLIS_PER_YEAR / 2;,1,1,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicFixedMonthChronology,22,158,        return MILLIS_PER_MONTH;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,76,        return duration / iUnitMillis;  // safe,2,1,0,0,0,1,0,0,0,3,39,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,88,        return value * iUnitMillis;  // safe,2,1,0,0,0,1,0,0,0,3,36,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);",0,0,0,0,2,1,4,0,0,3,51,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);",1,0,0,0,2,1,4,0,0,4,60,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,110,"        return FieldUtils.safeAdd(instant, addition);",0,0,0,0,2,1,4,0,0,3,45,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,127,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,128,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,129,        } else if (obj instanceof PreciseDurationField) {,1,0,0,1,4,3,0,1,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,130,            PreciseDurationField other = (PreciseDurationField) obj;,2,0,0,1,2,0,0,2,0,4,56,7,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,131,            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);,3,3,0,2,8,1,3,0,1,7,76,7,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,22,133,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");",0,0,0,1,2,2,0,1,2,5,81,6,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,52,        int value = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,43,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,53,        if (value == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,54,            value = getMaximumValue();,1,0,0,1,2,0,1,0,2,5,26,6,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,56,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,60,"        return getWrappedField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,64,"        return getWrappedField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,68,"        return getWrappedField().addWrapField(instant, value);",0,0,0,1,4,1,4,0,1,5,54,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);",0,0,0,1,4,1,6,0,1,5,79,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,80,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,84,        int max = getMaximumValue();,1,0,0,1,2,1,1,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);",0,0,0,0,2,1,4,0,0,3,50,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,86,        if (value == max) {,2,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,87,            value = 0;,1,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,89,"        return getWrappedField().set(instant, value);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,93,        return getWrappedField().isLeap(instant);,0,0,0,1,4,1,3,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,97,        return getWrappedField().getLeapAmount(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,110,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,119,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,128,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,137,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,147,        return getWrappedField().getMaximumValue() + 1;,0,1,0,1,4,1,2,0,1,6,47,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,157,        return getWrappedField().getMaximumValue(instant) + 1;,0,1,0,1,4,1,3,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,167,        return getWrappedField().getMaximumValue(instant) + 1;,0,1,0,1,4,1,3,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;",0,1,0,1,4,1,4,0,1,6,62,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,181,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,185,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,189,        return getWrappedField().roundHalfFloor(instant);,0,0,0,1,4,1,3,0,1,5,49,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,193,        return getWrappedField().roundHalfCeiling(instant);,0,0,0,1,4,1,3,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,197,        return getWrappedField().roundHalfEven(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,22,201,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,50,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,54,        return iChronology.getYear(instant);,0,0,0,1,2,1,3,0,0,4,36,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,58,        if (years == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,59,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,61,        int thisYear = get(instant);,1,0,0,1,2,1,2,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",1,0,0,0,2,1,4,0,0,4,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,63,"        return set(instant, newYear);",0,0,0,0,2,1,3,0,1,4,29,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,67,"        return add(instant, FieldUtils.safeToInt(years));",0,0,0,1,4,1,5,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,71,        if (years == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,72,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,75,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,76,        int wrappedYear = FieldUtils.getWrappedValue,1,0,0,0,0,1,2,0,0,3,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,78,"        return set(instant, wrappedYear);",0,0,0,0,2,1,3,0,1,4,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,82,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,2,0,0,1,28,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,84,"        return iChronology.setYear(instant, year);",0,0,0,0,2,1,4,0,0,3,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,88,        if (minuendInstant < subtrahendInstant) {,2,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);",0,0,0,0,2,1,4,0,1,4,73,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,72,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,99,        return iChronology.isLeapYear(get(instant));,0,0,0,2,4,1,4,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,103,        if (iChronology.isLeapYear(get(instant))) {,0,0,0,3,7,1,4,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,104,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,106,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,115,        return iChronology.getMinYear();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,123,        return iChronology.getYearMillis(get(instant));,0,0,0,2,4,1,4,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,127,        int year = get(instant);,1,0,0,1,2,1,2,0,1,6,24,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,128,        long yearStartMillis = iChronology.getYearMillis(year);,1,0,0,1,2,1,3,0,0,5,55,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,129,        if (instant != yearStartMillis) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,131,            instant = iChronology.getYearMillis(year + 1);,2,1,0,1,2,0,2,0,1,6,46,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,133,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,137,        return instant - roundFloor(instant);,1,1,0,1,2,1,2,0,1,7,37,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,22,144,        return iChronology.year();,0,0,0,1,2,1,2,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,84,            iMin = minValue;,2,0,0,0,0,0,0,0,1,2,16,6,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,89,            iMax = maxValue;,2,0,0,0,0,0,0,0,1,2,16,6,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,100,        return super.get(instant) + iOffset;,3,1,0,1,2,2,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,112,"        instant = super.add(instant, amount);",4,0,0,0,2,1,0,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0,0,0,1,4,1,6,0,1,5,61,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,114,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,126,"        instant = super.add(instant, amount);",4,0,0,0,2,1,0,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0,0,0,1,4,1,6,0,1,5,61,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,128,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0,0,0,1,6,1,9,0,2,5,82,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0,0,0,0,2,1,5,0,0,3,54,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,153,"        return super.set(instant, value - iOffset);",4,1,0,0,2,2,0,0,0,4,43,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,157,        return getWrappedField().isLeap(instant);,0,0,0,1,4,1,3,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,161,        return getWrappedField().getLeapAmount(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,165,        return getWrappedField().getLeapDurationField();,0,0,0,1,4,1,2,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,187,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,191,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,195,        return getWrappedField().roundHalfFloor(instant);,0,0,0,1,4,1,3,0,1,5,49,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,199,        return getWrappedField().roundHalfCeiling(instant);,0,0,0,1,4,1,3,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,203,        return getWrappedField().roundHalfEven(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,207,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,22,216,        return iOffset;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,51,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,60,        if (iChronology.getYear(instant) <= 0) {,0,1,0,2,5,1,3,0,0,5,40,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,61,            return DateTimeConstants.BCE;,2,0,0,0,0,1,0,0,0,2,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,63,            return DateTimeConstants.CE;,2,0,0,0,0,1,0,0,0,2,28,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,68,        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);,0,0,0,1,4,1,5,0,0,4,68,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);",4,0,0,0,2,1,3,0,0,4,85,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,82,        int oldEra = get(instant);,1,0,0,1,2,1,2,0,1,6,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,83,        if (oldEra != era) {,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,84,            int year = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,40,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,85,"            return iChronology.setYear(instant, -year);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,87,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));",0,0,0,1,6,1,7,0,1,5,76,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,96,        if (get(instant) == DateTimeConstants.CE) {,2,1,0,2,5,1,2,0,1,7,43,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,97,"            return iChronology.setYear(0, 1);",0,0,0,0,2,1,2,0,0,3,33,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,99,            return Long.MIN_VALUE;,2,0,0,0,0,1,0,0,0,2,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,104,        if (get(instant) == DateTimeConstants.BCE) {,2,1,0,2,5,1,2,0,1,7,44,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,105,"            return iChronology.setYear(0, 1);",0,0,0,0,2,1,2,0,0,3,33,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,107,            return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,113,        return roundFloor(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,118,        return roundFloor(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,123,        return roundFloor(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,135,        return DateTimeConstants.BCE;,2,0,0,0,0,1,0,0,0,2,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,139,        return DateTimeConstants.CE;,2,0,0,0,0,1,0,0,0,2,28,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,143,        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();,0,0,0,1,4,1,4,0,0,4,63,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,22,150,        return iChronology.era();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,47,        return iChronology.getDayOfMonth(instant);,0,0,0,1,2,1,3,0,0,4,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,55,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,59,        return iChronology.getDaysInMonthMax();,0,0,0,1,2,1,2,0,0,4,39,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,63,        return iChronology.getDaysInMonthMax(instant);,0,0,0,1,2,1,3,0,0,4,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,67,        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {,0,0,0,3,7,1,4,0,0,4,59,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,68,            int month = partial.get(DateTimeFieldType.monthOfYear());,1,0,0,2,4,1,4,0,0,5,57,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,69,            if (partial.isSupported(DateTimeFieldType.year())) {,0,0,0,3,7,1,4,0,0,4,52,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,70,                int year = partial.get(DateTimeFieldType.year());,1,0,0,2,4,1,4,0,0,5,49,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,71,"                return iChronology.getDaysInYearMonth(year, month);",0,0,0,0,2,1,4,0,0,3,51,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,73,            return iChronology.getDaysInMonthMax(month);,0,0,0,1,2,1,3,0,0,4,44,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,75,        return getMaximumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,79,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,80,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0,1,0,2,7,1,5,0,0,5,65,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,82,                int month = values[i];,1,0,1,0,2,1,0,0,0,4,22,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,83,                for (int j = 0; j < size; j++) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0,1,0,2,7,1,5,0,0,5,58,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,85,                        int year = values[j];,1,0,1,0,2,1,0,0,0,4,21,13,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,86,"                        return iChronology.getDaysInYearMonth(year, month);",0,0,0,0,2,1,4,0,0,3,51,13,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,89,                return iChronology.getDaysInMonthMax(month);,0,0,0,1,2,1,3,0,0,4,44,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,92,        return getMaximumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0,0,0,0,2,1,4,0,0,3,59,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,22,103,        return iChronology.dayOfMonth();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,52,        return iChronology.getDayOfYear(instant);,0,0,0,1,2,1,3,0,0,4,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,60,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,64,        return iChronology.getDaysInYearMax();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,68,        int year = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,69,        return iChronology.getDaysInYear(year);,0,0,0,1,2,1,3,0,0,4,39,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,73,        if (partial.isSupported(DateTimeFieldType.year())) {,0,0,0,3,7,1,4,0,0,4,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,74,            int year = partial.get(DateTimeFieldType.year());,1,0,0,2,4,1,4,0,0,5,49,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,75,            return iChronology.getDaysInYear(year);,0,0,0,1,2,1,3,0,0,4,39,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,77,        return iChronology.getDaysInYearMax();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,81,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,82,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,83,            if (partial.getFieldType(i) == DateTimeFieldType.year()) {,0,1,0,2,7,1,5,0,0,5,58,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,84,                int year = values[i];,1,0,1,0,2,1,0,0,0,4,21,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,85,                return iChronology.getDaysInYear(year);,0,0,0,1,2,1,3,0,0,4,39,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,88,        return iChronology.getDaysInYearMax();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,92,        int maxLessOne = iChronology.getDaysInYearMax() - 1;,1,1,0,1,2,1,2,0,0,6,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,93,        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;,4,3,0,1,4,1,2,0,1,7,81,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,22,100,        return iChronology.dayOfYear();,0,0,0,1,2,1,2,0,0,4,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,54,        return iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,1,3,0,0,4,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),4,3,0,1,2,2,0,0,0,5,71,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,70,        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),4,3,0,1,2,2,0,0,0,5,73,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,75,        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);,4,2,0,1,2,2,0,0,0,5,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,79,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,83,        return 53;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,87,        int weekyear = iChronology.getWeekyear(instant);,1,0,0,1,2,1,3,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,88,        return iChronology.getWeeksInYear(weekyear);,0,0,0,1,2,1,3,0,0,4,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,92,        if (partial.isSupported(DateTimeFieldType.weekyear())) {,0,0,0,3,7,1,4,0,0,4,56,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,93,            int weekyear = partial.get(DateTimeFieldType.weekyear());,1,0,0,2,4,1,4,0,0,5,57,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,94,            return iChronology.getWeeksInYear(weekyear);,0,0,0,1,2,1,3,0,0,4,44,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,96,        return 53;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,100,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,101,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,102,            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {,0,1,0,2,7,1,5,0,0,5,62,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,103,                int weekyear = values[i];,1,0,1,0,2,1,0,0,0,4,25,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,104,                return iChronology.getWeeksInYear(weekyear);,0,0,0,1,2,1,3,0,0,4,44,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,107,        return 53;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,111,        return value > 52 ? getMaximumValue(instant) : 52;,1,1,0,1,2,1,2,0,1,7,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,22,118,        return iChronology.weekOfWeekyear();,0,0,0,1,2,1,2,0,0,4,36,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,770,"        YearInfo(int year, long firstDayMillis) {",3,0,0,0,3,2,0,0,0,3,41,3,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,771,            iYear = year;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,772,            iFirstDayMillis = firstDayMillis;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,22,773,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,391,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,402,            return iField.isLenient();,0,0,0,1,2,1,2,0,0,4,26,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,406,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,407,            return iField.get(localInstant);,0,0,0,1,2,1,3,0,0,4,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,411,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,412,"            return iField.getAsText(localInstant, locale);",0,0,0,0,2,1,4,0,0,3,46,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,416,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,417,"            return iField.getAsShortText(localInstant, locale);",0,0,0,0,2,1,4,0,0,3,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,421,"            return iField.getAsText(fieldValue, locale);",0,0,0,0,2,1,4,0,0,3,44,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,425,"            return iField.getAsShortText(fieldValue, locale);",0,0,0,0,2,1,4,0,0,3,49,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,429,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,430,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,431,"                long localInstant = iField.add(instant + offset, value);",3,1,0,0,2,1,3,0,0,5,56,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,432,                return localInstant - offset;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,434,               long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,435,"               localInstant = iField.add(localInstant, value);",1,0,0,0,2,0,4,0,1,4,47,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,436,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,441,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,442,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,443,"                long localInstant = iField.add(instant + offset, value);",3,1,0,0,2,1,3,0,0,5,56,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,444,                return localInstant - offset;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,446,               long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,447,"               localInstant = iField.add(localInstant, value);",1,0,0,0,2,0,4,0,1,4,47,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,448,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,453,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,454,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,455,"                long localInstant = iField.addWrapField(instant + offset, value);",3,1,0,0,2,1,3,0,0,5,65,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,456,                return localInstant - offset;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,458,                long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,459,"                localInstant = iField.addWrapField(localInstant, value);",1,0,0,0,2,0,4,0,1,4,56,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,460,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,465,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,466,"            localInstant = iField.set(localInstant, value);",1,0,0,0,2,0,4,0,1,4,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",1,0,0,0,2,1,4,0,1,5,68,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,468,            if (get(result) != value) {,1,1,0,2,5,1,2,0,1,7,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,469,"                throw new IllegalFieldValueException(iField.getType(), new Integer(value),",1,0,0,1,5,3,2,2,2,7,74,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,474,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,479,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,480,"            localInstant = iField.set(localInstant, text, locale);",1,0,0,0,2,0,5,0,1,4,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,481,"            return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,485,            int offset = getOffsetToAdd(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,486,            return iField.getDifference,0,0,0,0,0,1,2,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,492,            int offset = getOffsetToAdd(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,493,            return iField.getDifferenceAsLong,0,0,0,0,0,1,2,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,499,            return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,503,            return iRangeDurationField;,1,0,0,0,0,1,0,0,0,2,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,507,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,508,            return iField.isLeap(localInstant);,0,0,0,1,2,1,3,0,0,4,35,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,512,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,513,            return iField.getLeapAmount(localInstant);,0,0,0,1,2,1,3,0,0,4,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,517,            return iLeapDurationField;,1,0,0,0,0,1,0,0,0,2,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,521,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,522,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,523,                instant = iField.roundFloor(instant + offset);,3,1,0,1,2,0,2,0,1,6,46,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,524,                return instant - offset;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,526,                long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,527,                localInstant = iField.roundFloor(localInstant);,1,0,0,1,2,0,3,0,1,5,47,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,528,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,533,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,534,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,535,                instant = iField.roundCeiling(instant + offset);,3,1,0,1,2,0,2,0,1,6,48,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,536,                return instant - offset;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,538,                long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,539,                localInstant = iField.roundCeiling(localInstant);,1,0,0,1,2,0,3,0,1,5,49,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,540,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,545,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,546,            return iField.remainder(localInstant);,0,0,0,1,2,1,3,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,550,            return iField.getMinimumValue();,0,0,0,1,2,1,2,0,0,4,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,554,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,555,            return iField.getMinimumValue(localInstant);,0,0,0,1,2,1,3,0,0,4,44,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,559,            return iField.getMinimumValue(instant);,0,0,0,1,2,1,3,0,0,4,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,563,"            return iField.getMinimumValue(instant, values);",0,0,0,0,2,1,4,0,0,3,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,567,            return iField.getMaximumValue();,0,0,0,1,2,1,2,0,0,4,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,571,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,572,            return iField.getMaximumValue(localInstant);,0,0,0,1,2,1,3,0,0,4,44,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,576,            return iField.getMaximumValue(instant);,0,0,0,1,2,1,3,0,0,4,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,580,"            return iField.getMaximumValue(instant, values);",0,0,0,0,2,1,4,0,0,3,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,584,            return iField.getMaximumTextLength(locale);,0,0,0,1,2,1,3,0,0,4,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,588,            return iField.getMaximumShortTextLength(locale);,0,0,0,1,2,1,3,0,0,4,48,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,592,            int offset = this.iZone.getOffset(instant);,2,0,0,1,2,2,2,0,0,5,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,593,            long sum = instant + offset;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,595,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,4,5,0,2,7,1,0,0,0,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,596,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,73,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,598,            return offset;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,50,        int year = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,51,        return year < 0 ? -year : year;,3,1,0,0,0,1,0,0,1,4,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,55,"        return getWrappedField().add(instant, years);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,59,"        return getWrappedField().add(instant, years);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,63,"        return getWrappedField().addWrapField(instant, years);",0,0,0,1,4,1,4,0,1,5,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,67,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0,0,0,1,4,1,6,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,71,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,75,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,80,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,79,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());",0,0,0,1,4,1,4,0,1,5,63,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,80,        if (getWrappedField().get(instant) < 0) {,0,1,0,2,7,1,3,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,81,            year = -year;,2,0,0,0,0,0,0,0,2,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,83,"        return super.set(instant, year);",3,0,0,0,2,2,0,0,0,3,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,95,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,99,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,103,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,22,110,        return INSTANCE;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,286,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,302,"            return iField.getValue(duration, addOffset(instant));",0,0,0,1,4,1,5,0,1,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,306,"            return iField.getValueAsLong(duration, addOffset(instant));",0,0,0,1,4,1,5,0,1,5,59,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,310,"            return iField.getMillis(value, addOffset(instant));",0,0,0,1,4,1,5,0,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,314,"            return iField.getMillis(value, addOffset(instant));",0,0,0,1,4,1,5,0,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,324,            int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,325,"            instant = iField.add(instant + offset, value);",3,1,0,0,2,0,3,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,326,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,3,1,0,2,4,1,2,0,1,7,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,337,            int offset = getOffsetToAdd(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,338,            return iField.getDifferenceAsLong,0,0,0,0,0,1,2,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,348,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,73,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,358,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,78,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,22,364,            return iZone.convertUTCToLocal(instant);,0,0,0,1,2,1,3,0,0,4,40,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,22,399,            return System.currentTimeMillis();,0,0,0,1,2,1,2,0,0,4,34,6,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");",0,0,0,1,2,2,0,1,2,5,68,6,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,55,        return getWrappedField().getValue(duration) / iScalar;,1,1,0,1,4,1,3,0,1,7,54,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,59,        return getWrappedField().getValueAsLong(duration) / iScalar;,1,1,0,1,4,1,3,0,1,7,60,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,63,"        return getWrappedField().getValue(duration, instant) / iScalar;",1,1,0,1,4,1,4,0,1,7,63,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;",1,1,0,1,4,1,4,0,1,7,69,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,71,        long scaled = ((long) value) * ((long) iScalar);,3,1,0,2,8,3,0,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,72,        return getWrappedField().getMillis(scaled);,0,0,0,1,4,1,3,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",1,0,0,0,2,1,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,77,        return getWrappedField().getMillis(scaled);,0,0,0,1,4,1,3,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,81,        long scaled = ((long) value) * ((long) iScalar);,3,1,0,2,8,3,0,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,82,"        return getWrappedField().getMillis(scaled, instant);",0,0,0,1,4,1,4,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",1,0,0,0,2,1,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,87,"        return getWrappedField().getMillis(scaled, instant);",0,0,0,1,4,1,4,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,91,        long scaled = ((long) value) * ((long) iScalar);,3,1,0,2,8,3,0,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,92,"        return getWrappedField().add(instant, scaled);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",1,0,0,0,2,1,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,97,"        return getWrappedField().add(instant, scaled);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;",1,1,0,1,4,1,4,0,1,7,84,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;",1,1,0,1,4,1,4,0,1,7,90,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,119,        return iScalar;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,130,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,131,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,132,        } else if (obj instanceof ScaledDurationField) {,1,0,0,1,4,3,0,1,0,5,48,6,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,133,            ScaledDurationField other = (ScaledDurationField) obj;,2,0,0,1,2,0,0,2,0,4,54,7,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,134,            return (getWrappedField().equals(other.getWrappedField())) &&,0,1,0,3,8,1,4,0,1,6,61,7,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,22,138,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,22,54,"            throw new IllegalArgumentException(""The field must not be null"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,22,57,"            throw new IllegalArgumentException(""The field must be supported"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,22,73,        return iField.isPrecise();,0,0,0,1,2,1,2,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,22,77,"        return iField.getValueAsLong(duration, instant);",0,0,0,0,2,1,4,0,0,3,48,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,22,81,"        return iField.getMillis(value, instant);",0,0,0,0,2,1,4,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,22,85,"        return iField.getMillis(value, instant);",0,0,0,0,2,1,4,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,22,89,"        return iField.add(instant, value);",0,0,0,0,2,1,4,0,0,3,34,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,22,93,"        return iField.add(instant, value);",0,0,0,0,2,1,4,0,0,3,34,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,22,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,69,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,22,101,        return iField.getUnitMillis();,0,0,0,1,2,1,2,0,0,4,30,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,36,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,37,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,49,        if (value == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");",0,0,0,1,2,2,0,1,2,5,69,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,52,        return -value;,1,0,0,0,0,1,0,0,1,3,14,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,67,            throw new ArithmeticException,0,0,0,0,0,2,0,1,1,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,85,            throw new ArithmeticException,0,0,0,0,0,2,0,1,1,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,103,            throw new ArithmeticException,0,0,0,0,0,2,0,1,1,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,121,            throw new ArithmeticException,0,0,0,0,0,2,0,1,1,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,137,        switch (scalar) {,1,0,0,1,3,1,0,0,0,4,17,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,139,            return -val1;,1,0,0,0,0,1,0,0,1,3,13,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,141,            return 0L;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,143,            return val1;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,145,        long total = val1 * scalar;,3,1,0,0,0,1,0,0,0,3,27,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,146,        if (total / scalar != val1) {,3,2,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,147,            throw new ArithmeticException,0,0,0,0,0,2,0,1,1,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,150,        return total;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,162,        if (val2 == 1) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,163,            return val1;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,165,        if (val2 == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,166,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,168,        long total = val1 * val2;,3,1,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,169,        if (total / val2 != val1) {,3,2,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,170,            throw new ArithmeticException,0,0,0,0,0,2,0,1,1,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,173,        return total;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,187,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);",1,1,0,1,2,3,0,1,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,199,"        long val = FieldUtils.safeMultiply(val1, val2);",1,0,0,0,2,1,4,0,0,4,47,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,200,        return FieldUtils.safeToInt(val);,0,0,0,1,2,1,3,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,214,        if ((value < lowerBound) || (value > upperBound)) {,4,3,0,2,7,1,0,0,0,5,51,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,215,            throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,219,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,232,        if ((value < lowerBound) || (value > upperBound)) {,4,3,0,2,7,1,0,0,0,5,51,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,233,            throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,237,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,249,        if ((value < lowerBound) || (value > upperBound)) {,4,3,0,2,7,1,0,0,0,5,51,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,250,            throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,254,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,273,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",2,1,0,0,2,1,3,0,1,6,69,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,289,        if (minValue >= maxValue) {,2,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,290,"            throw new IllegalArgumentException(""MIN > MAX"");",0,0,0,1,2,2,0,1,2,5,48,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,293,        int wrapRange = maxValue - minValue + 1;,3,2,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,294,        value -= minValue;,2,0,0,0,0,0,0,0,1,2,18,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,296,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,297,            return (value % wrapRange) + minValue;,3,2,0,1,2,1,0,0,0,5,38,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,300,        int remByRange = (-value) % wrapRange;,3,1,0,1,2,1,0,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,302,        if (remByRange == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,303,            return 0 + minValue;,1,1,0,0,0,1,0,0,0,3,20,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,305,        return (wrapRange - remByRange) + minValue;,3,2,0,1,2,1,0,0,0,5,43,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,318,        if (object1 == object2) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,319,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,321,        if (object1 == null || object2 == null) {,2,3,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,322,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,22,324,        return object1.equals(object2);,0,0,0,1,2,1,3,0,0,4,31,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,53,"        return ""millis"";",0,0,0,0,0,1,0,0,1,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,85,        return FieldUtils.safeToInt(duration);,0,0,0,1,2,1,3,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,89,        return duration;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,93,        return FieldUtils.safeToInt(duration);,0,0,0,1,2,1,3,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,97,        return duration;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,101,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,105,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,109,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,113,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,121,"        return FieldUtils.safeAdd(instant, value);",0,0,0,0,2,1,4,0,0,3,42,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,66,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,134,        long otherMillis = otherField.getUnitMillis();,1,0,0,1,2,1,2,0,0,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,135,        long thisMillis = getUnitMillis();,1,0,0,1,2,1,1,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,137,        if (thisMillis == otherMillis) {,2,1,0,1,3,1,0,0,0,5,32,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,138,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,140,        if (thisMillis < otherMillis) {,2,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,141,            return -1;,0,0,0,0,0,1,0,0,1,2,10,6,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,143,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,153,"        return ""DurationField[millis]"";",0,0,0,0,2,1,0,0,1,3,31,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,160,        return INSTANCE;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,22,32,public final class MillisDurationField extends DurationField implements Serializable {,1,0,0,0,1,5,0,2,2,5,86,1,0.0,0,0
