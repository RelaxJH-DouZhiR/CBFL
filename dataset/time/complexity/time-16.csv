dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line
defect4j,time,org/joda/time/format/DateTimeFormatter,16,698,        DateTimeParser parser = requireParser();,1,0,0,1,2,0,1,1,1,6,40,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,699,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,703,        long instantMillis = instant.getMillis();,1,0,0,1,2,1,2,0,0,5,41,5,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,704,        Chronology chrono = instant.getChronology();,1,0,0,1,2,0,2,1,0,5,44,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,705,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,2,1,0,1,4,1,4,0,0,6,78,5,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,706,        chrono = selectChronology(chrono);,1,0,0,1,2,0,2,0,2,5,34,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,708,        DateTimeParserBucket bucket = new DateTimeParserBucket(,1,0,0,0,1,1,0,2,1,5,55,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,710,"        int newPos = parser.parseInto(bucket, text, position);",1,0,0,0,2,1,5,0,0,4,54,5,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,711,"        instant.setMillis(bucket.computeMillis(false, text));",0,0,0,0,4,0,5,0,1,3,53,5,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,712,        if (iOffsetParsed && bucket.getOffsetInteger() != null) {,1,2,0,2,5,1,2,0,0,6,57,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,717,            chrono = chrono.withZone(bucket.getZone());,1,0,0,2,4,0,4,0,1,5,43,7,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,719,        instant.setChronology(chrono);,0,0,0,1,2,0,3,0,0,3,30,5,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,720,        if (iZone != null) {,1,1,0,1,3,1,0,0,0,5,20,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,723,        return newPos;,1,0,0,0,0,1,0,0,0,2,14,4,6.125,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,357,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0,0,0,1,4,0,4,0,1,4,50,8,4.45455,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,358,"                return computeMillis(resetFields, text);",0,0,0,0,2,1,3,0,1,4,40,8,4.45455,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,329,        iChronology = checkChronology(chronology);,1,0,0,1,2,0,2,0,2,5,42,4,3.0625,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,330,    },0,0,0,0,1,0,0,0,0,1,1,2,3.0625,0,0
defect4j,time,org/joda/time/MutableDateTime,16,564,        super.setChronology(chronology);,2,0,0,1,2,1,0,0,0,4,32,5,3.0625,0,0
defect4j,time,org/joda/time/MutableDateTime,16,565,    },0,0,0,0,1,0,0,0,0,1,1,2,3.0625,0,0
defect4j,time,org/joda/time/MutableDateTime,16,351,"        super(year, monthOfYear, dayOfMonth,",3,0,0,0,1,1,0,0,1,4,36,3,2.57895,0,0
defect4j,time,org/joda/time/MutableDateTime,16,353,    },0,0,0,0,1,0,0,0,0,1,1,2,2.57895,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,1.88462,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,518,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,1.48485,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,421,                    SavedField t = array[j];,1,0,1,0,2,0,0,1,0,4,24,10,1.225,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,422,                    array[j] = array[j-1];,1,1,1,0,4,0,0,0,1,5,22,10,1.225,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,423,                    array[j-1] = t;,2,1,1,0,2,0,0,0,1,5,15,10,1.225,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,971,        if (dtx == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.83051,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,972,            dtx = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.83051,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,977,        return dtx;,1,0,0,0,0,1,0,0,0,2,11,4,0.83051,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,935,        if (ttx == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.75385,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,936,            ttx = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.75385,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,941,        return ttx;,1,0,0,0,0,1,0,0,0,2,11,4,0.75385,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,938,        return appendShortText(DateTimeFieldType.dayOfWeek());,0,0,0,2,4,1,3,0,1,5,54,4,0.73134,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,897,        if (tx == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.72059,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,898,            tx = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,35,6,0.72059,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,903,        return tx;,1,0,0,0,0,1,0,0,0,2,10,4,0.72059,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1442,        if (hms == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.69014,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1443,            hms = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.69014,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1449,        return hms;,1,0,0,0,0,1,0,0,0,2,11,4,0.69014,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1224,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,1,4,2,3,0,0,4,48,5,0.62821,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,511,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.57647,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,514,"        return append0(new TextField(fieldType, true));",1,0,0,0,4,2,1,1,3,6,47,4,0.57647,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1611,            long prev = transitions[i - 1];,2,1,1,0,2,1,0,0,0,5,31,6,0.55172,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1612,            if (prev > Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,28,5,0.55172,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1613,                return prev - 1;,1,1,0,0,0,1,0,0,0,3,16,7,0.55172,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1784,            return estimatePrintedLength();,0,0,0,1,2,1,1,0,1,5,31,5,0.47115,0,0
defect4j,time,org/joda/time/MutableDateTime,16,456,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.42982,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1716,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.42609,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1717,            iFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,23,5,0.42609,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1718,            iShort = isShort;,2,0,0,0,0,0,0,0,1,2,17,5,0.42609,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1719,        },0,0,0,0,1,0,0,0,0,1,1,2,0.42609,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1710,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",1,0,0,0,2,2,0,5,2,5,74,3,0.42609,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1722,            return iShort ? 6 : 20;,1,0,0,0,0,1,0,0,0,2,23,6,0.42609,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,317,"        iMillis = checkInstant(instant, iChronology);",1,0,0,0,2,0,3,0,2,4,45,4,0.40833,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,318,    },0,0,0,0,1,0,0,0,0,1,1,2,0.40833,0,0
defect4j,time,org/joda/time/MutableDateTime,16,454,        switch (iRoundingMode) {,1,0,0,1,3,1,0,0,0,4,24,4,0.40833,0,0
defect4j,time,org/joda/time/MutableDateTime,16,474,        super.setMillis(instant);,2,0,0,1,2,1,0,0,0,4,25,5,0.40833,0,0
defect4j,time,org/joda/time/MutableDateTime,16,475,    },0,0,0,0,1,0,0,0,0,1,1,2,0.40833,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,188,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,2,4,0,4,11,1,4,0,2,7,78,4,0.37895,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,191,"        return new DateTimeFormatter(iPrinter, iParser, locale,",3,0,0,0,1,2,0,1,1,5,55,4,0.37895,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,202,        return iLocale;,1,0,0,0,0,1,0,0,0,2,15,4,0.37895,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,152,        return iZone;,1,0,0,0,0,1,0,0,0,2,13,4,0.31818,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,410,            year--;,1,0,0,0,0,0,0,0,1,2,7,6,0.28571,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,486,                    builder.appendMonthOfYear(tokenLen);,0,0,0,1,2,0,3,0,0,3,36,10,0.28,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,488,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.28,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,381,        } else if (iZone != null) {,1,1,0,1,4,2,0,0,0,5,27,5,0.25789,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,382,            int offset = iZone.getOffsetFromLocal(millis);,1,0,0,1,2,1,3,0,0,5,46,8,0.25789,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,383,            millis -= offset;,2,0,0,0,0,0,0,0,1,2,17,7,0.25789,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,384,            if (offset != iZone.getOffset(millis)) {,1,1,0,2,5,1,3,0,0,6,40,7,0.25789,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,147,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.25654,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,479,                if (tokenLen >= 3) {,1,1,0,1,3,1,0,0,0,5,20,7,0.24378,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,415,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,3,1,0,0,0,0,0,0,1,3,50,9,0.23529,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1924,                if (buf != null) {,1,1,0,1,3,1,0,0,0,5,18,7,0.20588,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1925,                    while (--minDigits >= 0) {,1,1,0,1,3,1,0,0,1,6,26,9,0.20588,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1926,                        buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,12,0.20588,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1933,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.20588,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,683,                formatter = builder.toFormatter();,1,0,0,1,2,0,2,0,1,5,34,8,0.19679,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,685,"                cPatternedCache.put(pattern, formatter);",0,0,0,0,2,0,4,0,0,2,40,9,0.19679,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,687,        },0,0,0,0,1,0,0,0,0,1,1,2,0.19679,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,688,        return formatter;,1,0,0,0,0,1,0,0,0,2,17,4,0.19679,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,170,        return createFormatterForPattern(pattern);,0,0,0,1,2,1,2,0,1,5,42,4,0.196,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,674,        if (pattern == null || pattern.length() == 0) {,1,3,0,2,5,1,2,0,0,6,47,4,0.196,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,677,        DateTimeFormatter formatter = null;,1,0,0,0,0,0,0,1,0,2,35,4,0.196,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,678,        synchronized (cPatternedCache) {,1,0,0,1,3,1,0,0,0,4,32,4,0.196,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,679,            formatter = cPatternedCache.get(pattern);,1,0,0,1,2,0,3,0,1,5,41,6,0.196,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,680,            if (formatter == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.196,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,681,                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();,1,0,0,1,2,1,0,2,1,6,66,8,0.196,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,682,"                parsePatternTo(builder, pattern);",0,0,0,0,2,0,3,0,1,3,33,8,0.196,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,262,        if (readableInstant instanceof ReadableInstant == false) {,1,1,0,1,3,2,0,1,1,7,58,4,0.18702,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,2,0,0,1,2,0,0,2,0,4,65,4,0.18702,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,266,        return,0,0,0,0,0,0,0,0,0,0,6,2,0.18702,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,563,    },0,0,0,0,1,0,0,0,0,1,1,2,0.18561,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,583,            buf.append(c);,0,0,0,1,2,0,3,0,0,3,14,7,0.18561,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,585,            while (i + 1 < length) {,2,2,0,1,3,1,0,0,0,5,24,6,0.18561,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,400,        int length = pattern.length();,1,0,0,1,2,1,2,0,0,5,30,5,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,401,        int[] indexRef = new int[1];,1,0,0,0,4,3,0,0,0,3,28,5,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,403,        for (int i=0; i<length; i++) {,4,1,0,1,3,2,0,0,1,6,30,4,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,404,            indexRef[0] = i;,1,0,1,0,2,0,0,0,1,4,16,6,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,405,"            String token = parseToken(pattern, indexRef);",1,0,0,0,2,0,3,1,1,5,45,6,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,406,            i = indexRef[0];,1,0,1,0,2,0,0,0,1,4,16,6,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,408,            int tokenLen = token.length();,1,0,0,1,2,1,2,0,0,5,30,7,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,409,            if (tokenLen == 0) {,1,1,0,1,3,1,0,0,0,5,20,6,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,412,            char c = token.charAt(0);,1,0,0,1,2,1,2,0,0,5,25,7,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,414,            switch (c) {,1,0,0,1,3,1,0,0,0,4,12,6,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,574,        StringBuffer buf = new StringBuffer();,1,0,0,1,2,1,0,2,1,6,38,4,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,576,        int i = indexRef[0];,1,0,1,0,2,1,0,0,0,4,20,5,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,577,        int length = pattern.length();,1,0,0,1,2,1,2,0,0,5,30,5,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,579,        char c = pattern.charAt(i);,1,0,0,1,2,1,3,0,0,5,27,5,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,580,        if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {,4,7,0,1,3,1,0,0,4,6,51,4,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,621,        indexRef[0] = i;,1,0,1,0,2,0,0,0,1,4,16,4,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,622,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.18491,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,503,                return result;,1,0,0,0,0,1,0,0,0,2,14,7,0.18352,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,147,"    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);",1,0,0,1,2,4,0,6,4,6,112,2,0.18284,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,149,    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];,1,0,0,0,4,4,0,2,3,5,81,2,0.18284,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,499,            DateTimeField other = obj.iField;,3,0,0,0,0,0,0,1,0,2,33,5,0.18148,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,500,            int result = compareReverse,1,0,0,0,0,1,1,0,1,4,27,6,0.18148,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,502,            if (result != 0) {,1,1,0,1,3,1,0,0,0,5,18,5,0.18148,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,520,        return -a.compareTo(b);,0,0,0,1,2,1,3,0,1,5,23,4,0.17883,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,517,        if (b == null || !b.isSupported()) {,1,2,0,2,5,1,2,0,1,7,36,4,0.17754,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,225,    },0,0,0,0,1,0,0,0,0,1,1,2,0.17626,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,353,            DurationField months = DurationFieldType.months().getField(iChrono);,1,0,0,1,4,0,4,1,0,5,68,6,0.17563,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,354,            DurationField days = DurationFieldType.days().getField(iChrono);,1,0,0,1,4,0,4,1,0,5,64,6,0.17563,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,355,            DurationField first = savedFields[0].iField.getDurationField();,2,0,1,1,4,0,1,1,0,6,63,6,0.17563,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,356,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0,3,0,0,7,1,6,0,2,5,77,6,0.17563,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,365,"                millis = savedFields[i].set(millis, resetFields);",1,0,1,0,4,0,3,0,1,5,49,8,0.17563,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,420,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,5,4,1,2,11,2,1,0,1,8,63,8,0.17563,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,511,        if (a == null || !a.isSupported()) {,1,2,0,2,5,1,2,0,1,7,36,4,0.17563,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,482,            if (iText == null) {,1,1,0,1,3,1,0,0,0,5,20,5,0.17563,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,483,"                millis = iField.set(millis, iValue);",1,0,0,0,2,0,4,0,1,4,36,7,0.17563,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,487,            if (reset) {,1,0,0,1,3,1,0,0,0,4,12,5,0.17563,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,490,            return millis;,1,0,0,0,0,1,0,0,0,2,14,5,0.17563,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",4,0,0,0,1,1,0,0,0,3,46,4,0.175,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,143,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.16388,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,146,        if (zone == getZone()) {,1,1,0,2,5,1,1,0,1,7,24,4,0.16388,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,394,        return millis;,1,0,0,0,0,1,0,0,0,2,14,4,0.16333,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,344,        SavedField[] savedFields = iSavedFields;,2,0,0,0,2,0,0,1,0,3,40,4,0.16225,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,345,        int count = iSavedFieldsCount;,2,0,0,0,0,1,0,0,0,2,30,5,0.16225,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,346,        if (iSavedFieldsShared) {,1,0,0,1,3,1,0,0,0,4,25,4,0.16225,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,350,"        sort(savedFields, count);",0,0,0,0,2,0,3,0,1,3,25,4,0.16225,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,351,        if (count > 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.16225,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,362,        long millis = iMillis;,2,0,0,0,0,1,0,0,0,2,22,5,0.16225,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,364,            for (int i = 0; i < count; i++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.16225,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,367,            if (resetFields) {,1,0,0,1,3,1,0,0,0,4,18,6,0.16225,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,377,        },0,0,0,0,1,0,0,0,0,1,1,2,0.16225,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,379,        if (iOffset != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.16225,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,416,        if (high > 10) {,1,1,0,1,3,1,0,0,0,5,16,4,0.16225,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,419,            for (int i=0; i<high; i++) {,4,1,0,1,3,2,0,0,1,6,28,6,0.16225,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,427,    },0,0,0,0,1,0,0,0,0,1,1,2,0.16225,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1321,                length++;,1,0,0,0,0,0,0,0,1,2,9,7,0.16066,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1322,            },0,0,0,0,1,0,0,0,0,1,1,2,0.16066,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1329,            if (length >= 9) {,1,1,0,1,3,1,0,0,0,5,18,5,0.16066,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1334,                int i = position;,2,0,0,0,0,1,0,0,0,2,17,8,0.16066,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1335,                if (negative) {,1,0,0,1,3,1,0,0,0,4,15,7,0.16066,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1339,                    value = text.charAt(i++) - '0';,2,1,0,1,2,0,2,0,3,6,31,9,0.16066,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1342,                },0,0,0,0,1,0,0,0,0,1,1,2,0.16066,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1343,                position += length;,2,0,0,0,0,0,0,0,1,2,19,7,0.16066,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1344,                while (i < position) {,2,1,0,1,3,1,0,0,0,5,22,7,0.16066,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1347,                if (negative) {,1,0,0,1,3,1,0,0,0,4,15,7,0.16066,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1352,"            bucket.saveField(iFieldType, value);",0,0,0,0,2,0,4,0,0,2,36,6,0.16066,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1353,            return position;,1,0,0,0,0,1,0,0,0,2,16,5,0.16066,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,246,"        saveField(new SavedField(fieldType.getField(iChrono), value));",1,0,0,1,6,1,4,1,2,7,62,4,0.15909,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,247,    },0,0,0,0,1,0,0,0,0,1,1,2,0.15909,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,261,        SavedField[] savedFields = iSavedFields;,2,0,0,0,2,0,0,1,0,3,40,4,0.15909,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,262,        int savedFieldsCount = iSavedFieldsCount;,2,0,0,0,0,1,0,0,0,2,41,5,0.15909,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,264,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,4,2,0,1,3,1,0,0,0,5,67,4,0.15909,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,273,        iSavedState = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.15909,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,274,        savedFields[savedFieldsCount] = field;,1,0,1,0,2,0,0,0,1,4,38,4,0.15909,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,275,        iSavedFieldsCount = savedFieldsCount + 1;,2,1,0,0,0,0,0,0,1,3,41,4,0.15909,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,276,    },0,0,0,0,1,0,0,0,0,1,1,2,0.15909,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,467,"        SavedField(DateTimeField field, int value) {",3,0,0,0,3,1,0,1,0,4,44,3,0.15909,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,468,            iField = field;,2,0,0,0,0,0,0,0,1,2,15,5,0.15909,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,469,            iValue = value;,2,0,0,0,0,0,0,0,1,2,15,5,0.15909,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,470,            iText = null;,1,0,0,0,0,0,0,0,1,2,13,5,0.15909,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,471,            iLocale = null;,1,0,0,0,0,0,0,0,1,2,15,5,0.15909,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,472,        },0,0,0,0,1,0,0,0,0,1,1,2,0.15909,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,953,        if (dt == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.15605,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,954,            dt = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,35,6,0.15605,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,959,        return dt;,1,0,0,0,0,1,0,0,0,2,10,4,0.15605,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1318,                if (c < '0' || c > '9') {,2,3,0,1,3,1,0,0,2,6,25,7,0.15506,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1292,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",2,1,0,1,4,1,5,0,0,6,65,6,0.15457,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1294,            boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,6,0.15457,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1295,            int length = 0;,1,0,0,0,0,1,0,0,0,2,15,6,0.15457,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1296,            while (length < limit) {,2,1,0,1,3,1,0,0,0,5,24,5,0.15457,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1297,                char c = text.charAt(position + length);,3,1,0,1,2,1,2,0,0,6,40,8,0.15457,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1298,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,4,6,0,2,5,1,0,0,2,6,55,7,0.15457,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1324,            if (length == 0) {,1,1,0,1,3,1,0,0,0,5,18,5,0.15457,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,916,        if (tt == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.15123,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,917,            tt = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,35,6,0.15123,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,922,        return tt;,1,0,0,0,0,1,0,0,0,2,10,4,0.15123,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,879,        if (t == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.14759,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,880,            t = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,34,6,0.14759,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,885,        return t;,1,0,0,0,0,1,0,0,0,2,9,4,0.14759,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1875,"                printTo(buf, null, instant, chrono);",0,0,0,0,2,0,4,0,1,3,36,7,0.14759,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1878,            },0,0,0,0,1,0,0,0,0,1,1,2,0.14759,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1879,        },0,0,0,0,1,0,0,0,0,1,1,2,0.14759,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1482,        if (hmsf == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.14583,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1483,            hmsf = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,37,6,0.14583,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1490,        return hmsf;,1,0,0,0,0,1,0,0,0,2,12,4,0.14583,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1691,        if (fse == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.14583,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1692,            fse = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.14583,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1699,        return fse;,1,0,0,0,0,1,0,0,0,2,11,4,0.14583,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2112,            if (displayZone == null) {,1,1,0,1,3,1,0,0,0,5,26,5,0.1437,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2115,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,2,3,0,1,3,1,0,0,0,5,57,5,0.1437,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,119,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.14203,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,72,    private SavedField[] iSavedFields = new SavedField[8];,1,0,0,0,4,2,0,2,1,5,54,2,0.14203,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,120,        chrono = DateTimeUtils.getChronology(chrono);,1,0,0,1,2,0,3,0,1,5,45,4,0.14203,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,121,        iMillis = instantLocal;,2,0,0,0,0,0,0,0,1,2,23,4,0.14203,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,122,        iZone = chrono.getZone();,1,0,0,1,2,0,2,0,1,5,25,4,0.14203,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,123,        iChrono = chrono.withUTC();,1,0,0,1,2,0,2,0,1,5,27,4,0.14203,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,124,        iLocale = (locale == null ? Locale.getDefault() : locale);,3,1,0,2,4,0,2,0,1,6,58,4,0.14203,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,125,        iPivotYear = pivotYear;,2,0,0,0,0,0,0,0,1,2,23,4,0.14203,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,126,        iDefaultYear = defaultYear;,2,0,0,0,0,0,0,0,1,2,27,4,0.14203,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,127,    },0,0,0,0,1,0,0,0,0,1,1,2,0.14203,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,924,        DateTimeParser parser = iParser;,2,0,0,0,0,0,0,1,0,2,32,4,0.14203,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,925,        if (parser == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.14203,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,928,        return parser;,1,0,0,0,0,1,0,0,0,2,14,4,0.14203,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,406,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",2,0,0,0,4,2,1,1,3,6,64,6,0.14121,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1908,            DateTimeField field = iFieldType.getField(chrono);,1,0,0,1,2,0,3,1,0,5,50,5,0.14121,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1909,            int minDigits = iMinDigits;,2,0,0,0,0,1,0,0,0,2,27,6,0.14121,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1913,                fraction = field.remainder(instant);,1,0,0,1,2,0,3,0,1,5,36,7,0.14121,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1921,            },0,0,0,0,1,0,0,0,0,1,1,2,0.14121,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1923,            if (fraction == 0) {,1,1,0,1,3,1,0,0,0,5,20,5,0.14121,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1363,"            super(fieldType, maxParsedDigits, signed);",3,0,0,0,2,1,0,0,1,4,42,4,0.14,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1364,        },0,0,0,0,1,0,0,0,0,1,1,2,0.14,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,127,            return instant % iUnitMillis;,2,1,0,0,0,1,0,0,0,3,29,6,0.13573,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,126,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.13499,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,155,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.13315,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,146,        long otherMillis = otherField.getUnitMillis();,1,0,0,1,2,1,2,0,0,5,46,5,0.13032,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,147,        long thisMillis = getUnitMillis();,1,0,0,1,2,1,1,0,1,6,34,5,0.13032,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,149,        if (thisMillis == otherMillis) {,2,1,0,1,3,1,0,0,0,5,32,4,0.13032,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,152,        if (thisMillis < otherMillis) {,2,1,0,1,3,1,0,0,0,5,31,4,0.13032,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,38,public abstract class BaseDurationField extends DurationField implements Serializable {,1,0,0,0,1,5,0,2,2,5,87,1,0.13032,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,866,        return yearMonthDay();,0,0,0,1,2,1,1,0,1,5,22,4,0.12629,0,0
defect4j,time,org/joda/time/DurationFieldType,16,294,                    return chronology.months();,0,0,0,1,2,1,2,0,0,4,27,7,0.12596,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1358,        if (ymd == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.12468,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1359,            ymd = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.12468,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1365,        return ymd;,1,0,0,0,0,1,0,0,0,2,11,4,0.12468,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2621,                locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,7,0.12343,0,0
defect4j,time,org/joda/time/DurationFieldType,16,298,                    return chronology.days();,0,0,0,1,2,1,2,0,0,4,25,7,0.11922,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1180,            buf.append(iValue);,0,0,0,1,2,0,3,0,0,3,19,6,0.11893,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1181,        },0,0,0,0,1,0,0,0,0,1,1,2,0.11893,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,522,                    return chronology.secondOfDay();,0,0,0,1,2,1,2,0,0,4,32,7,0.11864,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2614,            DateTimePrinter[] elements = iPrinters;,2,0,0,0,2,0,0,1,0,3,39,5,0.11779,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2615,            if (elements == null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.11779,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2619,            if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,5,0.11779,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2624,            int len = elements.length;,3,0,0,0,0,1,0,0,0,2,26,6,0.11779,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2625,            for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,5,0.11779,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2626,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,1,0,4,0,7,0,0,3,78,8,0.11779,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2628,        },0,0,0,0,1,0,0,0,0,1,1,2,0.11779,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1437,                DateTimeField field = iFieldType.getField(chrono);,1,0,0,1,2,0,3,1,0,5,50,7,0.11779,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1438,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",0,0,0,1,4,0,7,0,0,3,76,8,0.11779,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1441,            },0,0,0,0,1,0,0,0,0,1,1,2,0.11779,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1442,        },0,0,0,0,1,0,0,0,0,1,1,2,0.11779,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,582,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,1,0,0,2,6,1,2,2,2,7,78,4,0.11695,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,583,"        printTo(buf, instant);",0,0,0,0,2,0,3,0,1,3,22,4,0.11695,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,584,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.11695,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,459,        long millis = DateTimeUtils.getInstantMillis(instant);,1,0,0,1,2,1,3,0,0,5,54,5,0.11667,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,460,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,1,0,0,1,2,0,3,1,0,5,64,4,0.11667,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,461,"        printTo(buf, millis, chrono);",0,0,0,0,2,0,4,0,1,3,29,4,0.11667,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,462,    },0,0,0,0,1,0,0,0,0,1,1,2,0.11667,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,618,        DateTimePrinter printer = requirePrinter();,1,0,0,1,2,0,1,1,1,6,43,4,0.11475,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,619,        chrono = selectChronology(chrono);,1,0,0,1,2,0,2,0,2,5,34,4,0.11475,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,622,        DateTimeZone zone = chrono.getZone();,1,0,0,1,2,0,2,1,0,5,37,4,0.11475,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,623,        int offset = zone.getOffset(instant);,1,0,0,1,2,1,3,0,0,5,37,5,0.11475,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,624,        long adjustedInstant = instant + offset;,3,1,0,0,0,1,0,0,0,3,40,5,0.11475,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,625,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,4,5,0,2,7,1,0,0,0,5,65,4,0.11475,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,631,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0,0,0,1,4,0,9,0,0,3,79,5,0.11475,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,632,    },0,0,0,0,1,0,0,0,0,1,1,2,0.11475,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,437,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",3,0,0,0,1,2,0,1,1,5,56,4,0.11111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2120,                buf.append('+');,0,0,0,1,2,0,2,0,1,4,16,8,0.11111,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1653,        if (lte == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.1056,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1654,            lte = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.1056,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1658,        return lte;,1,0,0,0,0,1,0,0,0,2,11,4,0.1056,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,127,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.1047,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,128,        iPrinter = printer;,2,0,0,0,0,0,0,0,1,2,19,4,0.1047,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,129,        iParser = parser;,2,0,0,0,0,0,0,0,1,2,17,4,0.1047,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,130,        iLocale = locale;,2,0,0,0,0,0,0,0,1,2,17,4,0.1047,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,131,        iOffsetParsed = offsetParsed;,2,0,0,0,0,0,0,0,1,2,29,4,0.1047,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,132,        iChrono = chrono;,2,0,0,0,0,0,0,0,1,2,17,4,0.1047,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,133,        iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,4,0.1047,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,134,        iPivotYear = pivotYear;,2,0,0,0,0,0,0,0,1,2,23,4,0.1047,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,135,        iDefaultYear = defaultYear;,2,0,0,0,0,0,0,0,1,2,27,4,0.1047,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,136,    },0,0,0,0,1,0,0,0,0,1,1,2,0.1047,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2608,            return iPrintedLengthEstimate;,1,0,0,0,0,1,0,0,0,2,30,5,0.09722,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1605,            if (iTailZone != null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.09441,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1703,        if (ze == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.09423,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1704,            ze = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,35,6,0.09423,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1708,        return ze;,1,0,0,0,0,1,0,0,0,2,10,4,0.09423,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2101,                est += iMinFields - 1;,2,1,0,0,0,0,0,0,1,3,22,7,0.09263,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,167,        Chronology chrono = instant.getChronology();,1,0,0,1,2,0,2,1,0,5,44,4,0.09159,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,168,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.09159,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,171,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.09159,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2144,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,0,0,0,1,3,63,5,0.09091,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2145,            if (displayOffset == 0 && iMinFields <= 2) {,2,3,0,1,3,1,0,0,0,5,44,5,0.09091,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2146,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.09091,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,657,        DateTimePrinter printer = iPrinter;,2,0,0,0,0,0,0,1,0,2,35,4,0.09024,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,658,        if (printer == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.09024,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,661,        return printer;,1,0,0,0,0,1,0,0,0,2,15,4,0.09024,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,532,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.08991,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,535,        if (maxDigits < minDigits) {,2,1,0,1,3,1,0,0,0,5,28,4,0.08991,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,538,        if (minDigits < 0 || maxDigits <= 0) {,2,3,0,1,3,1,0,0,0,5,38,4,0.08991,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,541,"        return append0(new Fraction(fieldType, minDigits, maxDigits));",3,0,0,0,4,2,1,1,2,6,62,4,0.08991,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,559,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,77,4,0.08991,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1857,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.08991,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1858,            iFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,23,5,0.08991,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1860,            if (maxDigits > 18) {,1,1,0,1,3,1,0,0,0,5,21,5,0.08991,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1863,            iMinDigits = minDigits;,2,0,0,0,0,0,0,0,1,2,23,5,0.08991,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1864,            iMaxDigits = maxDigits;,2,0,0,0,0,0,0,0,1,2,23,5,0.08991,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1865,        },0,0,0,0,1,0,0,0,0,1,1,2,0.08991,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1868,            return iMaxDigits;,1,0,0,0,0,1,0,0,0,2,18,5,0.08991,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2026,            return iMaxDigits;,1,0,0,0,0,1,0,0,0,2,18,5,0.08991,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,119,        return iZone.previousTransition(instant);,0,0,0,1,2,1,3,0,0,4,41,5,0.08974,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1587,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.08974,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1588,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.08974,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1589,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.08974,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1595,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.08974,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1596,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.08974,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2138,                buf.append(':');,0,0,0,1,2,0,2,0,1,4,16,8,0.08929,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2099,            int est = 1 + iMinFields << 1;,2,2,0,0,0,1,0,0,0,3,30,6,0.08893,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2100,            if (iShowSeparators) {,1,0,0,1,3,1,0,0,0,4,22,5,0.08893,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2103,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,2,3,0,2,5,1,2,0,0,6,74,5,0.08893,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2106,            return est;,1,0,0,0,0,1,0,0,0,2,11,5,0.08893,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2236,            return estimatePrintedLength();,0,0,0,1,2,1,1,0,1,5,31,5,0.08893,0,0
defect4j,time,org/joda/time/DateTimeZone,16,901,            long prev = previousTransition(instantAdjusted);,1,0,0,1,2,1,2,0,1,6,48,8,0.08766,0,0
defect4j,time,org/joda/time/DateTimeZone,16,902,            if (prev < instantAdjusted) {,2,1,0,1,3,1,0,0,0,5,29,7,0.08766,0,0
defect4j,time,org/joda/time/DateTimeZone,16,903,                int offsetPrev = getOffset(prev);,1,0,0,1,2,1,2,0,1,6,33,10,0.08766,0,0
defect4j,time,org/joda/time/DateTimeZone,16,904,                int diff = offsetPrev - offsetLocal;,3,1,0,0,0,1,0,0,0,3,36,10,0.08766,0,0
defect4j,time,org/joda/time/DateTimeZone,16,905,                if (instantAdjusted - prev <= diff) {,3,2,0,1,3,1,0,0,0,5,37,9,0.08766,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,164,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.08734,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,149,        return instant.getMillis();,0,0,0,1,2,1,2,0,0,4,27,5,0.08703,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2119,            if (displayOffset >= 0) {,1,1,0,1,3,1,0,0,0,5,25,5,0.08591,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2126,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,1,0,0,0,3,62,6,0.08591,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2127,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,0,2,0,4,0,0,2,47,6,0.08591,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2128,            if (iMaxFields == 1) {,1,1,0,1,3,1,0,0,0,5,22,5,0.08591,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2131,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,1,2,1,0,0,1,6,64,5,0.08591,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2132,            if (displayOffset == 0 && iMinFields <= 1) {,2,3,0,1,3,1,0,0,0,5,44,5,0.08591,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2136,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,1,0,0,0,3,66,6,0.08591,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2137,            if (iShowSeparators) {,1,0,0,1,3,1,0,0,0,4,22,5,0.08591,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2140,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,0,2,0,4,0,0,2,49,6,0.08591,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2141,            if (iMaxFields == 2) {,1,1,0,1,3,1,0,0,0,5,22,5,0.08591,0,0
defect4j,time,org/joda/time/DurationFieldType,16,282,            chronology = DateTimeUtils.getChronology(chronology);,1,0,0,1,2,0,3,0,1,5,53,5,0.08537,0,0
defect4j,time,org/joda/time/DurationFieldType,16,284,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,0.08537,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1053,        return append0(new TimeZoneOffset,0,0,0,0,1,2,1,1,2,5,33,4,0.08522,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2083,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.08463,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2084,            iZeroOffsetPrintText = zeroOffsetPrintText;,2,0,0,0,0,0,0,0,1,2,43,5,0.08463,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2085,            iZeroOffsetParseText = zeroOffsetParseText;,2,0,0,0,0,0,0,0,1,2,43,5,0.08463,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2086,            iShowSeparators = showSeparators;,2,0,0,0,0,0,0,0,1,2,33,5,0.08463,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2087,            if (minFields <= 0 || maxFields < minFields) {,3,3,0,1,3,1,0,0,0,5,46,5,0.08463,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2090,            if (minFields > 4) {,1,1,0,1,3,1,0,0,0,5,20,5,0.08463,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2094,            iMinFields = minFields;,2,0,0,0,0,0,0,0,1,2,23,5,0.08463,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2095,            iMaxFields = maxFields;,2,0,0,0,0,0,0,0,1,2,23,5,0.08463,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2096,        },0,0,0,0,1,0,0,0,0,1,1,2,0.08463,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,147,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.08348,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1681,        if (sme == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.08291,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1682,            sme = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.08291,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1687,        return sme;,1,0,0,0,0,1,0,0,0,2,11,4,0.08291,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,146,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.08291,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,139,        DateTimeZone zone = getZone();,1,0,0,1,2,0,1,1,1,6,30,4,0.08263,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,140,        int offset = zone.getOffsetFromLocal(instant);,1,0,0,1,2,1,3,0,0,5,46,5,0.08263,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,141,        instant -= offset;,2,0,0,0,0,0,0,0,1,2,18,4,0.08263,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,142,        if (offset != zone.getOffset(instant)) {,1,1,0,2,5,1,3,0,0,6,40,4,0.08263,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1671,        if (mhe == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.08249,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1672,            mhe = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.08249,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1677,        return mhe;,1,0,0,0,0,1,0,0,0,2,11,4,0.08249,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,119,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,3,0,2,5,45,4,0.08249,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1662,        if (hde == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.08221,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1663,            hde = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.08221,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1667,        return hde;,1,0,0,0,0,1,0,0,0,2,11,4,0.08221,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,524,                    return chronology.secondOfMinute();,0,0,0,1,2,1,2,0,0,4,35,7,0.08072,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,50,7,0.0798,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,43,7,0.07916,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,647,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,71,4,0.07903,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,162,            periodStart = next;,2,0,0,0,0,0,0,0,1,2,19,6,0.07632,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",5,0,0,0,4,1,0,1,3,5,57,6,0.07632,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,164,        },0,0,0,0,1,0,0,0,0,1,1,2,0.07632,0,0
defect4j,time,org/joda/time/DateTimeZone,16,900,        } else if (offsetLocal >= 0) {,1,1,0,1,4,2,0,0,0,5,30,5,0.07562,0,0
defect4j,time,org/joda/time/DateTimeZone,16,910,        return offsetAdjusted;,1,0,0,0,0,1,0,0,0,2,22,4,0.07504,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1604,        if (dme == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.07402,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1605,            dme = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.07402,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1610,        return dme;,1,0,0,0,0,1,0,0,0,2,11,4,0.07402,0,0
defect4j,time,org/joda/time/DateTimeZone,16,882,        final int offsetLocal = getOffset(instantLocal);,1,0,0,1,2,2,2,0,2,6,48,4,0.07368,0,0
defect4j,time,org/joda/time/DateTimeZone,16,884,        final long instantAdjusted = instantLocal - offsetLocal;,3,1,0,0,0,2,0,0,1,4,56,4,0.07368,0,0
defect4j,time,org/joda/time/DateTimeZone,16,885,        final int offsetAdjusted = getOffset(instantAdjusted);,1,0,0,1,2,2,2,0,2,6,54,4,0.07368,0,0
defect4j,time,org/joda/time/DateTimeZone,16,887,        if (offsetLocal != offsetAdjusted) {,2,1,0,1,3,1,0,0,0,5,36,4,0.07368,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1594,        if (mye == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.07346,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1595,            mye = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.07346,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1600,        return mye;,1,0,0,0,0,1,0,0,0,2,11,4,0.07346,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,667,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,69,4,0.07174,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1585,        if (ye == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.07143,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1586,            ye = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,35,6,0.07143,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1590,        return ye;,1,0,0,0,0,1,0,0,0,2,10,4,0.07143,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,517,            return iLeapDurationField;,1,0,0,0,0,1,0,0,0,2,26,5,0.07091,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,550,            return iField.getMinimumValue();,0,0,0,1,2,1,2,0,0,4,32,6,0.07091,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,567,            return iField.getMaximumValue();,0,0,0,1,2,1,2,0,0,4,32,6,0.07091,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,520,                    return chronology.minuteOfHour();,0,0,0,1,2,1,2,0,0,4,33,7,0.07061,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,66,4,0.0702,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,2,0,0,4,31,7,0.06882,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,260,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.06872,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,204,            for (int i=chronos.size(); --i>=0; ) {,2,1,0,2,5,2,2,0,1,7,38,6,0.06863,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,205,                chrono = chronos.get(i);,1,0,0,1,2,0,3,0,1,5,24,8,0.06863,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,206,                if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() &&,1,2,0,1,3,1,2,0,0,6,63,8,0.06863,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,209,                    return chrono;,1,0,0,0,0,1,0,0,0,2,14,10,0.06863,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,397,        return iCutoverInstant;,1,0,0,0,0,1,0,0,0,2,23,4,0.06863,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,406,        return iGregorianChronology.getMinimumDaysInFirstWeek();,0,0,0,1,2,1,2,0,0,4,56,5,0.06863,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,939,        chrono = DateTimeUtils.getChronology(chrono);,1,0,0,1,2,0,3,0,1,5,45,4,0.06844,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,940,        if (iChrono != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.06844,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,943,        if (iZone != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.06844,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,946,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.06844,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,2,0,0,4,30,7,0.06844,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,68,4,0.06834,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,499,            return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,5,0.06768,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,503,            return iRangeDurationField;,1,0,0,0,0,1,0,0,0,2,27,5,0.06768,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,281,"        super(base, new Object[] {julian, gregorian, cutoverInstant});",4,0,0,0,6,2,0,1,1,5,62,3,0.06768,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,282,    },0,0,0,0,1,0,0,0,0,1,1,2,0.06768,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,220,"            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);",3,0,0,0,2,0,3,0,2,4,75,6,0.06768,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,221,            chrono = new GJChronology,1,0,0,0,0,1,0,1,2,4,25,6,0.06768,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,477,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.06768,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,307,        return withZone(DateTimeZone.UTC);,2,0,0,1,2,1,1,0,1,6,34,4,0.06685,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,317,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.06685,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,320,        if (zone == getZone()) {,1,1,0,2,5,1,1,0,1,7,24,4,0.06685,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,321,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.06685,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,293,        if ((base = getBase()) != null) {,1,1,0,3,7,1,1,0,2,7,33,4,0.06667,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,296,        return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,5,0.06667,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,474,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.06658,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,194,            cutoverInstant = gregorianCutover.toInstant();,1,0,0,1,2,0,2,0,1,5,46,6,0.0664,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,737,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,67,4,0.06631,0,0
defect4j,time,org/joda/time/Instant,16,144,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.06631,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",1,0,0,0,2,1,4,0,1,5,68,6,0.06577,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,468,            if (get(result) != value) {,1,1,0,2,5,1,2,0,1,7,27,5,0.06577,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,2,0,0,4,32,7,0.06481,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,492,                    return chronology.year();,0,0,0,1,2,1,2,0,0,4,25,7,0.06473,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,465,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.06464,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,466,"            localInstant = iField.set(localInstant, value);",1,0,0,0,2,0,4,0,1,4,47,5,0.06464,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,791,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,75,4,0.06439,0,0
defect4j,time,org/joda/time/DateTimeZone,16,957,"        return convertLocalToUTC(instantLocal, strict);",0,0,0,0,2,1,3,0,1,4,47,4,0.06422,0,0
defect4j,time,org/joda/time/DateTimeZone,16,974,        int offsetLocal = getOffset(instantLocal);,1,0,0,1,2,1,2,0,1,6,42,5,0.06414,0,0
defect4j,time,org/joda/time/DateTimeZone,16,976,        int offset = getOffset(instantLocal - offsetLocal);,3,1,0,1,2,1,1,0,1,7,51,5,0.06414,0,0
defect4j,time,org/joda/time/DateTimeZone,16,978,        if (offsetLocal != offset) {,2,1,0,1,3,1,0,0,0,5,28,4,0.06414,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1009,        long instantUTC = instantLocal - offset;,3,1,0,0,0,1,0,0,0,3,40,5,0.06414,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1011,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,4,5,0,2,7,1,0,0,0,5,69,4,0.06414,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1014,        return instantUTC;,1,0,0,0,0,1,0,0,0,2,18,4,0.06414,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2718,"                        addArrayToList(printerList, ((Composite)element).iPrinters);",2,0,0,2,6,0,2,1,1,6,60,11,0.06298,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2727,"                        addArrayToList(parserList, ((Composite)element).iParsers);",2,0,0,2,6,0,2,1,1,6,58,11,0.06298,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2736,            if (array != null) {,1,1,0,1,3,1,0,0,0,5,20,5,0.06298,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2737,                for (int i=0; i<array.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,7,0.06298,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2738,                    list.add(array[i]);,0,0,1,1,4,0,2,0,0,4,19,10,0.06298,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2741,        },0,0,0,0,1,0,0,0,0,1,1,2,0.06298,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,448,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.06282,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,451,        if (maxDigits < minDigits) {,2,1,0,1,3,1,0,0,0,5,28,4,0.06282,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,454,        if (minDigits < 0 || maxDigits <= 0) {,2,3,0,1,3,1,0,0,0,5,38,4,0.06282,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,457,        if (minDigits <= 1) {,1,1,0,1,3,1,0,0,0,5,21,4,0.06282,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",3,0,0,0,4,2,1,1,3,6,72,6,0.06282,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,5,0,0,3,60,7,0.06282,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,209,        if (formatter == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.06164,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,212,"        return append0(formatter.getPrinter(), formatter.getParser());",0,0,0,1,6,1,5,0,1,5,62,4,0.06164,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,172,        return iParser;,1,0,0,0,0,1,0,0,0,2,15,4,0.0614,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,154,        return iPrinter;,1,0,0,0,0,1,0,0,0,2,16,4,0.06027,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,345,        iFormatter = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.05998,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,346,        iElementPairs.add(printer);,0,0,0,1,2,0,3,0,0,3,27,5,0.05998,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,347,        iElementPairs.add(parser);,0,0,0,1,2,0,3,0,0,3,26,5,0.05998,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,348,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.05998,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1141,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.05882,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1131,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.05868,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,259,        if (this == readableInstant) {,1,1,0,1,3,2,0,0,0,5,30,4,0.05868,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1104,                Object printer = iElementPairs.get(0);,1,0,0,1,2,0,2,1,0,5,38,8,0.05854,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1105,                Object parser = iElementPairs.get(1);,1,0,0,1,2,0,2,1,0,5,37,8,0.05854,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1107,                if (printer != null) {,1,1,0,1,3,1,0,0,0,5,22,8,0.05854,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1108,                    if (printer == parser || parser == null) {,3,3,0,1,3,1,0,0,0,5,42,10,0.05854,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1109,                        f = printer;,2,0,0,0,0,0,0,0,1,2,12,12,0.05854,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,53,"        this(chronology, field, 0);",2,0,0,0,2,1,0,0,0,3,27,4,0.05691,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05691,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,64,        super(field);,1,0,0,1,2,1,0,0,1,5,13,3,0.05691,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,65,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.05691,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,66,        int min = super.getMinimumValue();,2,0,0,1,2,2,0,0,0,4,34,5,0.05691,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,67,        if (min < skip) {,2,1,0,1,3,1,0,0,0,5,17,4,0.05691,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,68,            iMinValue = min + 1;,2,1,0,0,0,0,0,0,1,3,20,6,0.05691,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,74,        iSkip = skip;,2,0,0,0,0,0,0,0,1,2,13,4,0.05691,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05691,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,87,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0,0,0,1,4,1,5,0,1,5,72,5,0.05691,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,88,        if (value <= iSkip) {,2,1,0,1,3,1,0,0,0,5,21,4,0.05691,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,89,            value--;,1,0,0,0,0,0,0,0,1,2,8,6,0.05691,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,91,"        return super.set(millis, value);",3,0,0,0,2,2,0,0,0,3,32,5,0.05691,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,95,        return iMinValue;,1,0,0,0,0,1,0,0,0,2,17,4,0.05691,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,82,            value--;,1,0,0,0,0,0,0,0,1,2,8,6,0.05691,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0,0,0,0,2,1,5,0,0,3,54,5,0.05691,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,153,"        return super.set(instant, value - iOffset);",4,1,0,0,2,2,0,0,0,4,43,5,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,128,"        super(base, param);",2,0,0,0,2,1,0,0,1,4,19,3,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,129,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,65,"    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField(""BE"");",1,0,0,1,2,4,0,2,5,6,85,2,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,71,"    private static final Map<DateTimeZone, BuddhistChronology> cCache = new HashMap<DateTimeZone, BuddhistChronology>();",1,0,0,1,2,4,0,6,4,6,116,2,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,74,    private static final BuddhistChronology INSTANCE_UTC = getInstance(DateTimeZone.UTC);,3,0,0,1,2,3,1,1,4,7,85,2,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,104,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,107,        BuddhistChronology chrono = cCache.get(zone);,1,0,0,1,2,0,3,1,0,5,45,4,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,108,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,110,"            chrono = new BuddhistChronology(GJChronology.getInstance(zone, null), null);",1,0,0,0,4,1,3,1,2,6,76,6,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,112,"            DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);",2,0,0,0,2,1,0,2,1,5,64,6,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,113,"            chrono = new BuddhistChronology(LimitChronology.getInstance(chrono, lowerLimit, null), """");",1,0,0,0,4,1,4,1,3,6,91,6,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,114,"            cCache.put(zone, chrono);",0,0,0,0,2,0,4,0,0,2,25,7,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,116,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,204,        if (getParam() == null) {,0,1,0,2,5,1,1,0,1,6,25,4,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,206,            DateTimeField field = fields.year;,3,0,0,0,0,0,0,1,0,2,34,6,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,207,            fields.year = new OffsetDateTimeField(,2,0,0,0,1,1,0,1,2,5,38,6,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,211,            field = fields.yearOfEra;,3,0,0,0,0,0,0,0,1,2,25,6,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,212,            fields.yearOfEra = new DelegatedDateTimeField(,2,0,0,0,1,1,0,1,2,5,46,6,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,216,            field = fields.weekyear;,3,0,0,0,0,0,0,0,1,2,24,6,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,217,            fields.weekyear = new OffsetDateTimeField(,2,0,0,0,1,1,0,1,2,5,42,6,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,220,"            field = new OffsetDateTimeField(fields.yearOfEra, 99);",3,0,0,0,2,1,0,1,2,5,54,6,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,221,            fields.centuryOfEra = new DividedDateTimeField(,2,0,0,0,1,1,0,1,2,5,47,6,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,224,            field = new RemainderDateTimeField(,1,0,0,0,1,1,0,1,2,5,35,6,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,226,            fields.yearOfCentury = new OffsetDateTimeField(,2,0,0,0,1,1,0,1,2,5,47,6,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,229,            field = new RemainderDateTimeField(,1,0,0,0,1,1,0,1,2,5,35,6,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,231,            fields.weekyearOfCentury = new OffsetDateTimeField(,2,0,0,0,1,1,0,1,2,5,51,6,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,234,            fields.era = ERA_FIELD;,3,0,0,0,0,0,0,0,1,2,23,6,0.05691,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,236,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05691,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,82,"        return iField.set(instant, value);",0,0,0,0,2,1,4,0,0,3,34,5,0.05684,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,100,        return iMinValue;,1,0,0,0,0,1,0,0,0,2,17,4,0.05684,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,173,"        return getInstance(zone, gregorianCutover, 4);",0,0,0,0,2,1,3,0,1,4,46,4,0.05684,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,79,            if (year == 0) {,1,1,0,1,3,1,0,0,0,5,16,6,0.05684,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,83,            year++;,1,0,0,0,0,0,0,0,1,2,7,6,0.05684,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,795,            return iJulianField.getMinimumValue();,0,0,0,1,2,1,2,0,0,4,38,6,0.05678,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,826,            return iGregorianField.getMaximumValue();,0,0,0,1,2,1,2,0,0,4,41,6,0.05678,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,192,            cutoverInstant = DEFAULT_CUTOVER;,2,0,0,0,0,0,0,0,1,2,33,6,0.05665,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,132,"        long instant = year().set(0, year);",1,0,0,1,4,1,3,0,1,6,35,5,0.05632,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,133,"        instant = monthOfYear().set(instant, monthOfYear);",1,0,0,1,4,0,4,0,2,5,50,4,0.05632,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",1,0,0,1,4,0,4,0,2,5,48,4,0.05632,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,135,"        instant = hourOfDay().set(instant, hourOfDay);",1,0,0,1,4,0,4,0,2,5,46,4,0.05632,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",1,0,0,1,4,0,4,0,2,5,52,4,0.05632,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",1,0,0,1,4,0,4,0,2,5,56,4,0.05632,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,138,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,1,4,1,4,0,1,5,53,5,0.05632,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",4,0,0,0,1,2,0,0,0,3,61,5,0.05632,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,579,"        return convertByYear(instant, iGregorianChronology, iJulianChronology);",0,0,0,0,2,1,4,0,1,4,71,4,0.05632,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,714,                    if (instant + iGapDuration < iCutover) {,3,2,0,1,3,1,0,0,0,5,40,9,0.05632,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,715,                        instant = gregorianToJulian(instant);,1,0,0,1,2,0,2,0,2,5,37,11,0.05632,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,718,                    if (get(instant) != value) {,1,1,0,2,5,1,2,0,1,7,28,9,0.05632,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,915,                return gregorianToJulianByYear(instant);,0,0,0,1,2,1,2,0,1,5,40,7,0.05632,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,228,        return iChronology.getMaxYear();,0,0,0,1,2,1,2,0,0,4,32,5,0.05632,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,172,"        return iField.set(instant, value);",0,0,0,0,2,1,4,0,0,3,34,5,0.05626,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,74,public final class GJChronology extends AssembledChronology {,1,0,0,0,1,4,0,1,2,5,61,1,0.05626,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,647,                return iJulianField.get(instant);,0,0,0,1,2,1,3,0,0,4,33,8,0.05626,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,724,"                instant = iJulianField.set(instant, value);",1,0,0,0,2,0,4,0,1,4,43,7,0.05626,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,725,                if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,7,0.05626,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,912,            if (iConvertByWeekyear) {,1,0,0,1,3,1,0,0,0,4,25,5,0.05626,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,78,        if (year <= 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.05613,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,85,        return year;,1,0,0,0,0,1,0,0,0,2,12,4,0.05613,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,207,"        return super.getDateMidnightMillis(adjustYearForSet(year), monthOfYear, dayOfMonth);",3,0,0,1,4,2,2,0,1,6,84,5,0.05613,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,228,        return iField.getMaximumValue();,0,0,0,1,2,1,2,0,0,4,32,5,0.05606,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,710,            if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,5,0.056,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,711,"                instant = iGregorianField.set(instant, value);",1,0,0,0,2,0,4,0,1,4,46,7,0.056,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,712,                if (instant < iCutover) {,2,1,0,1,3,1,0,0,0,5,25,7,0.056,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,737,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.056,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,644,            if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,5,0.05594,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,4,7,0,2,8,0,0,0,1,5,71,6,0.05543,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,402,            i2 = i2 - unitMillis + 1;,3,2,0,0,0,0,0,0,1,3,25,6,0.05543,0,0
defect4j,time,org/joda/time/DateTimeZone,16,955,            return instantUTC;,1,0,0,0,0,1,0,0,0,2,18,6,0.05396,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,788,            return iGregorianField.getLeapDurationField();,0,0,0,1,2,1,2,0,0,4,46,6,0.05396,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,408,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",3,0,0,0,4,2,1,1,3,6,73,6,0.05391,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,396,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.05373,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,399,        if (maxDigits < minDigits) {,2,1,0,1,3,1,0,0,0,5,28,4,0.05373,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,402,        if (minDigits < 0 || maxDigits <= 0) {,2,3,0,1,3,1,0,0,0,5,38,4,0.05373,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,405,        if (minDigits <= 1) {,1,1,0,1,3,1,0,0,0,5,21,4,0.05373,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,768,            return iRangeDurationField;,1,0,0,0,0,1,0,0,0,2,27,5,0.05344,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,224,            leapYears = (relativeYear + 3) >> 2;,2,2,0,1,2,0,0,0,1,5,36,6,0.05332,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,501,"            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);",5,0,0,1,4,1,2,1,2,7,105,6,0.05326,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,502,"            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);",5,0,0,1,4,1,2,1,2,7,96,6,0.05326,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,503,"            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);",5,0,0,1,4,1,2,1,2,7,105,6,0.05326,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,504,"            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);",5,0,0,1,4,1,2,1,2,7,96,6,0.05326,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,505,"            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);",5,0,0,1,4,1,2,1,2,7,99,6,0.05326,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,506,"            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);",5,0,0,1,4,1,2,1,2,7,96,6,0.05326,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,507,"            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);",5,0,0,1,4,1,2,1,2,7,90,6,0.05326,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,508,"            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);",5,0,0,1,4,1,2,1,2,7,102,6,0.05326,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,509,"            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);",5,0,0,1,4,1,2,1,2,7,105,6,0.05326,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,510,"            fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),",2,0,0,1,3,1,2,1,2,7,73,6,0.05326,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,512,"            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);",5,0,0,1,4,1,2,1,2,7,99,6,0.05326,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,131,            instant = iChronology.getYearMillis(year + 1);,2,1,0,1,2,0,2,0,1,6,46,6,0.05326,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,271,"        super(null, new Object[] {julian, gregorian, cutoverInstant});",3,0,0,0,6,2,0,1,1,5,62,3,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,272,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,105,    static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);,1,0,0,1,2,3,0,2,4,6,69,2,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,108,"    private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>();",1,0,0,1,2,4,0,8,4,6,126,2,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,83,        return to.getDateTimeMillis,0,0,0,0,0,1,2,0,0,2,27,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,189,        zone = DateTimeUtils.getZone(zone);,1,0,0,1,2,0,3,0,1,5,35,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,191,        if (gregorianCutover == null) {,1,1,0,1,3,1,0,0,0,5,31,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,199,        ArrayList<GJChronology> chronos = cCache.get(zone);,1,0,0,1,2,0,3,2,0,5,51,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,200,        if (chronos == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,201,            chronos = new ArrayList<GJChronology>(2);,1,0,0,1,2,1,0,2,2,6,41,6,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,202,"            cCache.put(zone, chronos);",0,0,0,0,2,0,4,0,0,2,26,7,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,214,        if (zone == DateTimeZone.UTC) {,3,1,0,1,3,1,0,0,0,5,31,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,215,            chrono = new GJChronology,1,0,0,0,0,1,0,1,2,4,25,6,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,228,        chronos.add(chrono);,0,0,0,1,2,0,3,0,0,3,20,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,230,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,465,        Object[] params = (Object[])getParam();,1,0,0,1,8,0,1,2,1,6,39,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,467,        JulianChronology julian = (JulianChronology)params[0];,1,0,1,1,4,0,0,2,0,5,54,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,468,        GregorianChronology gregorian = (GregorianChronology)params[1];,1,0,1,1,4,0,0,2,0,5,63,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,469,        Instant cutoverInstant = (Instant)params[2];,1,0,1,1,4,0,0,2,0,5,44,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,470,        iCutoverMillis = cutoverInstant.getMillis();,1,0,0,1,2,0,2,0,1,5,44,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,472,        iJulianChronology = julian;,2,0,0,0,0,0,0,0,1,2,27,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,473,        iGregorianChronology = gregorian;,2,0,0,0,0,0,0,0,1,2,33,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,474,        iCutoverInstant = cutoverInstant;,2,0,0,0,0,0,0,0,1,2,33,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,476,        if (getBase() != null) {,0,1,0,2,5,1,1,0,1,6,24,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,480,        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {,0,1,0,2,7,1,4,0,0,5,82,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,485,        iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);,2,1,0,1,2,0,2,0,2,6,72,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,491,        fields.copyFieldsFrom(gregorian);,0,0,0,1,2,0,3,0,0,3,33,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,497,        if (gregorian.millisOfDay().get(iCutoverMillis) == 0) {,0,1,0,2,7,1,4,0,0,5,55,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,517,"            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);",5,0,0,1,4,1,2,1,2,7,72,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,526,            long cutover = gregorian.year().roundCeiling(iCutoverMillis);,1,0,0,1,4,1,4,0,0,5,61,6,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,527,            fields.dayOfYear = new CutoverField(,2,0,0,0,1,1,0,1,2,5,36,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,532,            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);,1,0,0,1,4,1,4,0,0,5,65,6,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,533,            fields.weekOfWeekyear = new CutoverField(,2,0,0,0,1,1,0,1,2,5,41,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,541,            fields.year = new ImpreciseCutoverField(,2,0,0,0,1,1,0,1,2,5,40,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,543,            fields.years = fields.year.getDurationField();,4,0,0,1,2,0,1,0,1,5,46,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,544,            fields.yearOfEra = new ImpreciseCutoverField(,2,0,0,0,1,1,0,1,2,5,45,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,546,            fields.yearOfCentury = new ImpreciseCutoverField(,2,0,0,0,1,1,0,1,2,5,49,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,549,            fields.centuryOfEra = new ImpreciseCutoverField(,2,0,0,0,1,1,0,1,2,5,48,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,551,            fields.centuries = fields.centuryOfEra.getDurationField();,4,0,0,1,2,0,1,0,1,5,58,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,553,            fields.monthOfYear = new ImpreciseCutoverField(,2,0,0,0,1,1,0,1,2,5,47,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,555,            fields.months = fields.monthOfYear.getDurationField();,4,0,0,1,2,0,1,0,1,5,54,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,557,            fields.weekyear = new ImpreciseCutoverField(,2,0,0,0,1,1,0,1,2,5,44,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,559,            fields.weekyearOfCentury = new ImpreciseCutoverField(,2,0,0,0,1,1,0,1,2,5,53,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,561,            fields.weekyears = fields.weekyear.getDurationField();,4,0,0,1,2,0,1,0,1,5,54,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,567,            CutoverField cf = new CutoverField,1,0,0,0,0,1,0,2,1,4,34,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,569,            cf.iRangeDurationField = fields.months;,4,0,0,0,0,0,0,0,1,2,39,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,570,            fields.dayOfMonth = cf;,3,0,0,0,0,0,0,0,1,2,23,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,572,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,575,"        return convertByYear(instant, iJulianChronology, iGregorianChronology);",0,0,0,0,2,1,4,0,1,4,71,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,934,"            this(julianField, gregorianField, null, cutoverMillis, false);",3,0,0,0,2,1,0,0,1,4,62,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,935,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,945,"            this(julianField, gregorianField, durationField, cutoverMillis, false);",4,0,0,0,2,1,0,0,1,4,71,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,946,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,956,        {,0,0,0,0,1,0,0,0,0,1,1,2,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,957,"            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);",4,0,0,0,2,1,0,0,1,4,69,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,958,            if (durationField == null) {,1,1,0,1,3,1,0,0,0,5,28,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,959,"                durationField = new LinkedDurationField(iDurationField, this);",2,0,0,0,2,2,0,1,2,5,62,7,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,961,            iDurationField = durationField;,2,0,0,0,0,0,0,0,1,2,31,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,962,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,612,"            this(julianField, gregorianField, cutoverMillis, false);",3,0,0,0,2,1,0,0,1,4,56,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,613,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,622,"                     long cutoverMillis, boolean convertByWeekyear) {",2,0,0,0,2,2,0,0,0,3,48,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,623,            super(gregorianField.getType());,0,0,0,2,4,1,2,0,1,5,32,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,624,            iJulianField = julianField;,2,0,0,0,0,0,0,0,1,2,27,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,625,            iGregorianField = gregorianField;,2,0,0,0,0,0,0,0,1,2,33,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,626,            iCutover = cutoverMillis;,2,0,0,0,0,0,0,0,1,2,25,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,627,            iConvertByWeekyear = convertByWeekyear;,2,0,0,0,0,0,0,0,1,2,39,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,630,            iDurationField = gregorianField.getDurationField();,1,0,0,1,2,0,2,0,1,5,51,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,632,            DurationField rangeField = gregorianField.getRangeDurationField();,1,0,0,1,2,0,2,1,0,5,66,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,633,            if (rangeField == null) {,1,1,0,1,3,1,0,0,0,5,25,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,634,                rangeField = julianField.getRangeDurationField();,1,0,0,1,2,0,2,0,1,5,49,7,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,636,            iRangeDurationField = rangeField;,2,0,0,0,0,0,0,0,1,2,33,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,637,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,764,            return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1083,"            super(durationField, durationField.getType());",1,0,0,1,4,1,2,0,1,6,46,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1084,            iField = dateTimeField;,2,0,0,0,0,0,0,0,1,2,23,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1085,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0532,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,127,        int year = get(instant);,1,0,0,1,2,1,2,0,1,6,24,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,128,        long yearStartMillis = iChronology.getYearMillis(year);,1,0,0,1,2,1,3,0,0,5,55,5,0.0532,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,129,        if (instant != yearStartMillis) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,133,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0532,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,72,        if (years == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.05315,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,75,"        return set(instant, get(instant) + years);",1,1,0,1,4,1,4,0,2,7,42,4,0.05315,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,211,        return (year & 3) == 0;,1,2,0,1,2,1,0,0,0,5,23,4,0.05303,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,219,        int relativeYear = year - 1968;,2,1,0,0,0,1,0,0,0,3,31,5,0.05303,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,221,        if (relativeYear <= 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.05303,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,233,        long millis = (relativeYear * 365L + leapYears) * (long)DateTimeConstants.MILLIS_PER_DAY;,5,3,0,1,4,2,0,0,0,5,89,5,0.05303,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,237,        return millis - (366L + 352) * DateTimeConstants.MILLIS_PER_DAY;,3,3,0,1,2,1,0,0,0,5,64,4,0.05303,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,253,        return MILLIS_PER_YEAR / 2;,1,1,0,0,0,1,0,0,0,3,27,4,0.05303,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,261,        return (1969L * MILLIS_PER_YEAR + 352L * DateTimeConstants.MILLIS_PER_DAY) / 2;,3,4,0,1,2,1,0,0,0,5,79,4,0.05303,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,886,        long newInstant = roundFloor(instant);,1,0,0,1,2,1,2,0,1,6,38,5,0.05297,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,887,        if (newInstant != instant) {,2,1,0,1,3,1,0,0,0,5,28,4,0.05297,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,888,"            instant = add(newInstant, 1);",1,0,0,0,2,0,2,0,2,4,29,6,0.05297,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,890,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.05297,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,181,        } else if ( workWoyYear > year ) {,2,1,0,1,4,2,0,0,0,5,34,5,0.05297,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,80,        int value = super.get(millis);,3,0,0,1,2,2,0,0,0,4,30,5,0.05292,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,81,        if (value <= iSkip) {,2,1,0,1,3,1,0,0,0,5,21,4,0.05292,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,84,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.05292,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,4,2,0,2,6,1,0,0,1,6,66,6,0.05286,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,1,3,0,2,6,2,0,0,0,5,47,8,0.0528,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,153,        if ((base = getBase()) != null) {,1,1,0,3,7,1,1,0,2,7,33,4,0.05274,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,157,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,2,0,0,1,28,5,0.05274,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",1,1,0,0,2,1,4,0,1,6,74,4,0.05274,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),4,3,0,2,4,0,0,0,1,5,70,6,0.05269,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,539,            if (daysSince19700101 < -3) {,1,1,0,1,3,1,0,0,1,6,29,6,0.05269,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,96,        return iField.get(instant);,0,0,0,1,2,1,3,0,0,4,27,5,0.05246,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1174,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.05246,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1198,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.05246,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,185,        return iMinDaysInFirstWeek;,1,0,0,0,0,1,0,0,0,2,27,4,0.05246,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,3,1,0,1,2,1,1,0,1,7,60,6,0.05241,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,50,public final class JulianChronology extends BasicGJChronology {,1,0,0,0,1,4,0,1,2,5,63,1,0.05241,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,272,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.05235,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0,0,0,1,3,1,5,0,0,4,50,5,0.05229,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,133,        int thisWeekyear = get( instant );,1,0,0,1,2,1,2,0,1,6,34,5,0.05229,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,134,        if ( thisWeekyear == year ) {,2,1,0,1,3,1,0,0,0,5,29,4,0.05229,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,140,        int thisDow = iChronology.getDayOfWeek(instant);,1,0,0,1,2,1,3,0,0,5,48,5,0.05229,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,1,0,0,1,2,1,3,0,0,5,65,5,0.05229,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,1,0,0,1,2,1,3,0,0,5,55,5,0.05229,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,3,1,0,1,2,1,0,0,0,5,53,5,0.05229,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,1,0,0,1,2,1,3,0,0,5,55,5,0.05229,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,155,        if ( setToWeek > maxOutWeeks ) {,2,1,0,1,3,1,0,0,0,5,32,4,0.05229,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,162,        long workInstant = instant; // Get a copy,2,0,0,0,0,1,0,0,0,2,41,5,0.05229,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,168,"        workInstant = iChronology.setYear( workInstant, year );",1,0,0,0,2,0,4,0,1,4,55,4,0.05229,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,173,        int workWoyYear = get( workInstant );,1,0,0,1,2,1,2,0,1,6,37,5,0.05229,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,179,        if ( workWoyYear < year ) {,2,1,0,1,3,1,0,0,0,5,27,4,0.05229,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,1,0,0,1,2,1,3,0,0,5,64,5,0.05229,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),4,3,0,1,2,0,0,0,1,5,56,4,0.05229,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",1,0,0,1,4,0,5,0,1,5,66,4,0.05229,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,204,        return workInstant;,1,0,0,0,0,1,0,0,0,2,19,4,0.05229,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,269,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.05229,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1288,            return iMaxParsedDigits;,1,0,0,0,0,1,0,0,0,2,24,5,0.05224,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,95,            instant += 1;,1,0,0,0,0,0,0,0,1,2,13,6,0.05213,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,96,            return instant - instant % iUnitMillis - iUnitMillis;,4,3,0,0,0,1,0,0,0,3,53,6,0.05213,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,359,        return append0(new CharacterLiteral(c));,1,0,0,2,4,2,1,1,2,7,40,4,0.05207,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1169,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.05207,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1170,            iValue = value;,2,0,0,0,0,0,0,0,1,2,15,5,0.05207,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1171,        },0,0,0,0,1,0,0,0,0,1,1,2,0.05207,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2580,                int size = printerList.size();,1,0,0,1,2,1,2,0,0,5,30,8,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2581,                iPrinters = new DateTimePrinter[size];,1,0,1,0,2,1,0,1,1,6,38,7,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2582,                int printEst = 0;,1,0,0,0,0,1,0,0,0,2,17,8,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2583,                for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,7,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2584,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,1,0,0,1,4,0,3,2,0,5,63,9,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2585,                    printEst += printer.estimatePrintedLength();,1,0,0,1,2,0,2,0,1,5,44,9,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2586,                    iPrinters[i] = printer;,1,0,1,0,2,0,0,0,1,4,23,9,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2588,                iPrintedLengthEstimate = printEst;,2,0,0,0,0,0,0,0,1,2,34,7,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2595,                int size = parserList.size();,1,0,0,1,2,1,2,0,0,5,29,8,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2596,                iParsers = new DateTimeParser[size];,1,0,1,0,2,1,0,1,1,6,36,7,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2597,                int parseEst = 0;,1,0,0,0,0,1,0,0,0,2,17,8,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2598,                for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,7,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2599,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,1,0,0,1,4,0,3,2,0,5,59,9,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2600,                    parseEst += parser.estimateParsedLength();,1,0,0,1,2,0,2,0,1,5,42,9,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2601,                    iParsers[i] = parser;,1,0,1,0,2,0,0,0,1,4,21,9,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2603,                iParsedLengthEstimate = parseEst;,2,0,0,0,0,0,0,0,1,2,33,7,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2715,                Object element = elementPairs.get(i);,1,0,0,1,2,0,3,1,0,5,37,7,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2716,                if (element instanceof DateTimePrinter) {,1,0,0,1,3,2,0,1,0,5,41,8,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2717,                    if (element instanceof Composite) {,1,0,0,1,3,2,0,1,0,5,35,10,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2720,                        printerList.add(element);,0,0,0,1,2,0,3,0,0,3,25,12,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2724,                element = elementPairs.get(i + 1);,2,1,0,1,2,0,2,0,1,6,34,7,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2725,                if (element instanceof DateTimeParser) {,1,0,0,1,3,2,0,1,0,5,40,8,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2726,                    if (element instanceof Composite) {,1,0,0,1,3,2,0,1,0,5,35,10,0.05202,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2729,                        parserList.add(element);,0,0,0,1,2,0,3,0,0,3,24,12,0.05202,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),4,3,0,1,2,2,0,0,0,5,71,4,0.05196,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,1,0,0,1,4,0,4,0,1,5,59,4,0.05196,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,235,        int wow = iChronology.getWeekOfWeekyear(instant);,1,0,0,1,2,1,3,0,0,5,49,5,0.05196,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,236,        if (wow > 1) {,1,1,0,1,3,1,0,0,0,5,14,4,0.05196,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,239,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.05196,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1430,            return iMaxParsedDigits;,1,0,0,0,0,1,0,0,0,2,24,5,0.05191,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,327,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,1,0,0,1,2,1,2,0,1,6,55,5,0.05191,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,328,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,2,1,0,1,2,1,1,0,1,7,59,5,0.05191,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,329,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,4,2,0,2,6,2,0,0,0,5,89,6,0.05191,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1425,"            super(fieldType, maxParsedDigits, signed);",3,0,0,0,2,1,0,0,1,4,42,4,0.05185,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1426,            iMinPrintedDigits = minPrintedDigits;,2,0,0,0,0,0,0,0,1,2,37,5,0.05185,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1427,        },0,0,0,0,1,0,0,0,0,1,1,2,0.05185,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1281,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0518,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1282,            iFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,23,5,0.0518,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1283,            iMaxParsedDigits = maxParsedDigits;,2,0,0,0,0,0,0,0,1,2,35,5,0.0518,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1284,            iSigned = signed;,2,0,0,0,0,0,0,0,1,2,17,5,0.0518,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1285,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0518,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,3,5,0,3,10,2,1,0,1,7,71,6,0.05174,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1129,                return ((Composite)f).isPrinter();,1,0,0,2,6,1,1,1,0,6,34,9,0.05169,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1139,                return ((Composite)f).isParser();,1,0,0,2,6,1,1,1,0,6,33,9,0.05169,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2701,            return iPrinters != null;,1,1,0,0,0,1,0,0,0,3,25,5,0.05169,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2705,            return iParsers != null;,1,1,0,0,0,1,0,0,0,3,24,5,0.05169,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,163,        return getMaximumValue(instant);,0,0,0,1,2,1,2,0,1,5,32,4,0.05158,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1117,                f = new Composite(iElementPairs);,2,0,0,1,2,1,0,1,2,6,33,8,0.05158,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2569,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.05158,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2571,            List<Object> printerList = new ArrayList<Object>();,1,0,0,1,2,1,0,4,1,6,51,5,0.05158,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2572,            List<Object> parserList = new ArrayList<Object>();,1,0,0,1,2,1,0,4,1,6,50,5,0.05158,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2574,"            decompose(elementPairs, printerList, parserList);",0,0,0,0,2,0,4,0,1,3,49,5,0.05158,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2576,            if (printerList.size() <= 0) {,0,1,0,2,5,1,2,0,0,5,30,5,0.05158,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2591,            if (parserList.size() <= 0) {,0,1,0,2,5,1,2,0,0,5,29,5,0.05158,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2605,        },0,0,0,0,1,0,0,0,0,1,1,2,0.05158,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2713,            int size = elementPairs.size();,1,0,0,1,2,1,2,0,0,5,31,6,0.05158,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2714,            for (int i=0; i<size; i+=2) {,4,1,0,1,3,2,0,0,1,6,29,5,0.05158,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2733,        },0,0,0,0,1,0,0,0,0,1,1,2,0.05158,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),2,2,0,1,2,1,0,0,0,5,45,6,0.05136,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,414,            if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,7,0.05131,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,417,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,3,1,0,0,0,0,0,0,1,3,50,9,0.05131,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,420,            yearStart += oneYear;,2,0,0,0,0,0,0,0,1,2,21,7,0.05131,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,422,            if (yearStart <= instant) {,2,1,0,1,3,1,0,0,0,5,27,7,0.05131,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,424,                year++;,1,0,0,0,0,0,0,0,1,2,7,9,0.05131,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,60,        return iChronology.getWeekyear(instant);,0,0,0,1,2,1,3,0,0,4,40,5,0.05131,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,16,103,        return DateTimeConstants.MONDAY;,2,0,0,0,0,1,0,0,0,2,32,5,0.0512,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,16,112,        return DateTimeConstants.SUNDAY;,2,0,0,0,0,1,0,0,0,2,32,5,0.0512,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,792,        return getMaximumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.05104,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,493,        int year = getYear(instant);,1,0,0,1,2,1,2,0,1,6,28,5,0.05104,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,494,"        int week = getWeekOfWeekyear(instant, year);",1,0,0,0,2,1,3,0,1,5,44,5,0.05104,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,495,        if (week == 1) {,1,1,0,1,3,1,0,0,0,5,16,4,0.05104,0,0
defect4j,time,org/joda/time/DateTimeZone,16,951,        int offsetOriginal = getOffset(originalInstantUTC);,1,0,0,1,2,1,2,0,1,6,51,5,0.05099,0,0
defect4j,time,org/joda/time/DateTimeZone,16,952,        long instantUTC = instantLocal - offsetOriginal;,3,1,0,0,0,1,0,0,0,3,48,5,0.05099,0,0
defect4j,time,org/joda/time/DateTimeZone,16,953,        int offsetLocalFromOriginal = getOffset(instantUTC);,1,0,0,1,2,1,2,0,1,6,52,5,0.05099,0,0
defect4j,time,org/joda/time/DateTimeZone,16,954,        if (offsetLocalFromOriginal == offsetOriginal) {,2,1,0,1,3,1,0,0,0,5,48,4,0.05099,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,344,            return jan1millis + (8 - jan1dayOfWeek),2,3,0,1,2,1,0,0,0,5,39,6,0.05072,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,508,"        return getWeekOfWeekyear(instant, getYear(instant));",0,0,0,1,4,1,4,0,2,5,52,4,0.05052,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,16,101,        return iField.getUnitMillis();,0,0,0,1,2,1,2,0,0,4,30,5,0.05046,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,162,"        super(base, param, minDaysInFirstWeek);",3,0,0,0,2,1,0,0,1,4,39,3,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,163,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,71,"    private static final Map<DateTimeZone, JulianChronology[]> cCache = new HashMap<DateTimeZone, JulianChronology[]>();",1,0,0,1,6,4,0,6,4,6,116,2,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,74,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,3,0,0,1,2,0,1,0,2,5,45,4,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,75,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,114,"        return getInstance(zone, 4);",0,0,0,0,2,1,2,0,1,4,28,4,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,125,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,129,        synchronized (cCache) {,1,0,0,1,3,1,0,0,0,4,23,4,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,130,            JulianChronology[] chronos = cCache.get(zone);,1,0,0,1,4,0,3,1,0,5,46,6,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,131,            if (chronos == null) {,1,1,0,1,3,1,0,0,0,5,22,6,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,132,                chronos = new JulianChronology[7];,1,0,0,0,2,1,0,1,1,5,34,8,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,133,"                cCache.put(zone, chronos);",0,0,0,0,2,0,4,0,0,2,26,9,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,136,                chrono = chronos[minDaysInFirstWeek - 1];,2,1,1,0,2,0,0,0,1,5,41,8,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,140,            },0,0,0,0,1,0,0,0,0,1,1,2,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,141,            if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,142,                if (zone == DateTimeZone.UTC) {,3,1,0,1,3,1,0,0,0,5,31,8,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,143,"                    chrono = new JulianChronology(null, null, minDaysInFirstWeek);",2,0,0,0,2,1,0,1,2,5,62,10,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,149,                chronos[minDaysInFirstWeek - 1] = chrono;,2,1,1,0,2,0,0,0,1,5,41,8,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,151,        },0,0,0,0,1,0,0,0,0,1,1,2,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,152,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,241,        return MIN_YEAR;,1,0,0,0,0,1,0,0,0,2,16,4,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,245,        return MAX_YEAR;,1,0,0,0,0,1,0,0,0,2,16,4,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,249,        return MILLIS_PER_YEAR;,1,0,0,0,0,1,0,0,0,2,23,4,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,257,        return MILLIS_PER_MONTH;,1,0,0,0,0,1,0,0,0,2,24,4,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,265,        if (getBase() == null) {,0,1,0,2,5,1,1,0,1,6,24,4,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,266,            super.assemble(fields);,2,0,0,1,2,1,0,0,0,4,23,7,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,268,"            fields.year = new SkipDateTimeField(this, fields.year);",4,0,0,0,2,2,0,1,2,5,55,6,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,269,"            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);",4,0,0,0,2,2,0,1,2,5,63,6,0.05041,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,271,    },0,0,0,0,1,0,0,0,0,1,1,2,0.05041,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,406,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0502,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,407,            return iField.get(localInstant);,0,0,0,1,2,1,3,0,0,4,32,6,0.0502,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,516,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,1,0,0,1,2,1,2,0,1,6,55,5,0.05015,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,517,        if (instant < firstWeekMillis1) {,2,1,0,1,3,1,0,0,0,5,33,4,0.05015,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,520,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,2,1,0,1,2,1,1,0,1,7,59,5,0.05015,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,521,        if (instant >= firstWeekMillis2) {,2,1,0,1,3,1,0,0,0,5,34,4,0.05015,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,524,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,4,3,0,2,6,2,0,0,0,5,84,4,0.05015,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,339,        long jan1millis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,38,5,0.05005,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,340,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,1,0,0,1,2,1,2,0,1,6,45,5,0.05005,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,342,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,2,2,0,2,5,1,0,0,0,5,48,4,0.05005,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,104,        Object f = getFormatter();,1,0,0,1,2,0,1,1,1,6,26,4,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,105,        DateTimePrinter printer = null;,1,0,0,0,0,0,0,1,0,2,31,4,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,106,        if (isPrinter(f)) {,0,0,0,2,5,1,2,0,1,5,19,4,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,107,            printer = (DateTimePrinter) f;,2,0,0,1,2,0,0,1,1,5,30,6,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,109,        DateTimeParser parser = null;,1,0,0,0,0,0,0,1,0,2,29,4,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,110,        if (isParser(f)) {,0,0,0,2,5,1,2,0,1,5,18,4,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,111,            parser = (DateTimeParser) f;,2,0,0,1,2,0,0,1,1,5,28,6,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,113,        if (printer != null || parser != null) {,2,3,0,1,3,1,0,0,0,5,40,4,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,114,"            return new DateTimeFormatter(printer, parser);",2,0,0,0,2,2,0,1,1,5,46,6,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,108,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,109,        iPrinter = printer;,2,0,0,0,0,0,0,0,1,2,19,4,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,110,        iParser = parser;,2,0,0,0,0,0,0,0,1,2,17,4,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,111,        iLocale = null;,1,0,0,0,0,0,0,0,1,2,15,4,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,112,        iOffsetParsed = false;,1,0,0,0,0,0,0,0,2,2,22,4,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,113,        iChrono = null;,1,0,0,0,0,0,0,0,1,2,15,4,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,114,        iZone = null;,1,0,0,0,0,0,0,0,1,2,13,4,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,115,        iPivotYear = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,116,        iDefaultYear = 2000;,1,0,0,0,0,0,0,0,1,2,20,4,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,117,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04995,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,336,        iFormatter = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.0497,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,338,        iElementPairs.add(element);,0,0,0,1,2,0,3,0,0,3,27,5,0.0497,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,339,        iElementPairs.add(element);,0,0,0,1,2,0,3,0,0,3,27,5,0.0497,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,340,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0497,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1127,        if (f instanceof DateTimePrinter) {,1,0,0,1,3,2,0,1,0,5,35,5,0.0497,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1128,            if (f instanceof Composite) {,1,0,0,1,3,2,0,1,0,5,29,7,0.0497,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1137,        if (f instanceof DateTimeParser) {,1,0,0,1,3,2,0,1,0,5,34,5,0.0497,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1138,            if (f instanceof Composite) {,1,0,0,1,3,2,0,1,0,5,29,7,0.0497,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1100,        Object f = iFormatter;,2,0,0,0,0,0,0,1,0,2,22,4,0.0496,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1102,        if (f == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0496,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1103,            if (iElementPairs.size() == 2) {,0,1,0,2,5,1,2,0,0,5,32,6,0.0496,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1116,            if (f == null) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0496,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1120,            iFormatter = f;,2,0,0,0,0,0,0,0,1,2,15,6,0.0496,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1123,        return f;,1,0,0,0,0,1,0,0,0,2,9,4,0.0496,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,83,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.04954,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,84,        iElementPairs = new ArrayList<Object>();,1,0,0,1,2,1,0,2,2,6,40,4,0.04954,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,85,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04954,0,0
defect4j,time,org/joda/time/Instant,16,118,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.04799,0,0
defect4j,time,org/joda/time/Instant,16,119,        iMillis = instant;,2,0,0,0,0,0,0,0,1,2,18,4,0.04799,0,0
defect4j,time,org/joda/time/Instant,16,120,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04799,0,0
defect4j,time,org/joda/time/Instant,16,256,        return iMillis;,1,0,0,0,0,1,0,0,0,2,15,4,0.04734,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1535,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.04702,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1536,                    return iWallOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,27,10,0.04702,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1574,                return transitions[i];,0,0,1,0,2,1,0,0,0,3,22,8,0.04698,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,480,            chronology = DateTimeUtils.getChronology(chronology);,1,0,0,1,2,0,3,0,1,5,53,5,0.04649,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,482,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,0.04649,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,304,        return iChronology;,1,0,0,0,0,1,0,0,0,2,19,4,0.04618,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,102,            return chrono;,1,0,0,0,0,1,0,0,0,2,14,6,0.04614,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,51,        super(DateTimeFieldType.era());,0,0,0,2,4,1,2,0,1,5,31,3,0.0445,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,52,        iEraText = text;,2,0,0,0,0,0,0,0,1,2,16,4,0.0445,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0445,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,106,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,4,0,0,4,70,5,0.0445,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,111,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0445,0,0
defect4j,time,org/joda/time/DateTime,16,527,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,453,                           DurationField leapDurationField) {,1,0,0,0,2,0,0,1,0,3,34,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,454,"            super(field, field.getType());",1,0,0,1,4,1,2,0,1,6,30,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,455,            iDurationField = durationField;,2,0,0,0,0,0,0,0,1,2,31,5,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,456,            iRangeDurationField = rangeDurationField;,2,0,0,0,0,0,0,0,1,2,41,5,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,457,            iLeapDurationField = leapDurationField;,2,0,0,0,0,0,0,0,1,2,39,5,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,458,        },0,0,0,0,1,0,0,0,0,1,1,2,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,99,"        super(base, null);",1,0,0,0,2,1,0,0,1,4,18,3,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,101,        iLowerLimit = lowerLimit;,2,0,0,0,0,0,0,0,1,2,25,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,102,        iUpperLimit = upperLimit;,2,0,0,0,0,0,0,0,1,2,25,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,67,        if (base == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,71,        lowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();,2,1,0,1,2,0,2,0,1,6,65,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,72,        upperLimit = upperLimit == null ? null : upperLimit.toDateTime();,2,1,0,1,2,0,2,0,1,6,65,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,74,        if (lowerLimit != null && upperLimit != null) {,2,3,0,1,3,1,0,0,0,5,47,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,81,"        return new LimitChronology(base, (DateTime)lowerLimit, (DateTime)upperLimit);",3,0,0,1,6,2,0,3,1,6,77,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,209,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",1,0,0,1,2,1,0,6,1,6,66,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,213,"        fields.eras = convertField(fields.eras, converted);",4,0,0,0,2,0,2,0,2,4,51,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,214,"        fields.centuries = convertField(fields.centuries, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,215,"        fields.years = convertField(fields.years, converted);",4,0,0,0,2,0,2,0,2,4,53,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,216,"        fields.months = convertField(fields.months, converted);",4,0,0,0,2,0,2,0,2,4,55,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,217,"        fields.weekyears = convertField(fields.weekyears, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,218,"        fields.weeks = convertField(fields.weeks, converted);",4,0,0,0,2,0,2,0,2,4,53,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,219,"        fields.days = convertField(fields.days, converted);",4,0,0,0,2,0,2,0,2,4,51,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,221,"        fields.halfdays = convertField(fields.halfdays, converted);",4,0,0,0,2,0,2,0,2,4,59,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,222,"        fields.hours = convertField(fields.hours, converted);",4,0,0,0,2,0,2,0,2,4,53,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,223,"        fields.minutes = convertField(fields.minutes, converted);",4,0,0,0,2,0,2,0,2,4,57,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,224,"        fields.seconds = convertField(fields.seconds, converted);",4,0,0,0,2,0,2,0,2,4,57,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,225,"        fields.millis = convertField(fields.millis, converted);",4,0,0,0,2,0,2,0,2,4,55,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,229,"        fields.year = convertField(fields.year, converted);",4,0,0,0,2,0,2,0,2,4,51,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,230,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,231,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",4,0,0,0,2,0,2,0,2,4,69,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,232,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",4,0,0,0,2,0,2,0,2,4,67,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,233,"        fields.era = convertField(fields.era, converted);",4,0,0,0,2,0,2,0,2,4,49,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,234,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,235,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",4,0,0,0,2,0,2,0,2,4,63,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,236,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,237,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,238,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,239,"        fields.weekyear = convertField(fields.weekyear, converted);",4,0,0,0,2,0,2,0,2,4,59,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,240,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",4,0,0,0,2,0,2,0,2,4,77,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,242,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,243,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,244,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,245,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,246,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",4,0,0,0,2,0,2,0,2,4,67,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,247,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,248,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,249,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",4,0,0,0,2,0,2,0,2,4,69,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,250,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,251,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",4,0,0,0,2,0,2,0,2,4,79,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,252,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",4,0,0,0,2,0,2,0,2,4,67,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,253,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,256,        if (field == null || !field.isSupported()) {,1,2,0,2,5,1,2,0,1,7,44,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,257,            return field;,1,0,0,0,0,1,0,0,0,2,13,6,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,259,        if (converted.containsKey(field)) {,0,0,0,2,5,1,3,0,0,4,35,5,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,260,            return (DurationField)converted.get(field);,0,0,0,1,4,1,3,1,0,5,43,7,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,262,        LimitDurationField limitField = new LimitDurationField(field);,2,0,0,1,2,1,0,2,1,6,62,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,263,"        converted.put(field, limitField);",0,0,0,0,2,0,4,0,0,2,33,5,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,264,        return limitField;,1,0,0,0,0,1,0,0,0,2,18,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,268,        if (field == null || !field.isSupported()) {,1,2,0,2,5,1,2,0,1,7,44,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,271,        if (converted.containsKey(field)) {,0,0,0,2,5,1,3,0,0,4,35,5,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,274,        LimitDateTimeField limitField =,1,0,0,0,0,0,0,1,0,2,31,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,279,"        converted.put(field, limitField);",0,0,0,0,2,0,4,0,0,2,33,5,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,280,        return limitField;,1,0,0,0,0,1,0,0,0,2,18,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,391,        LimitDurationField(DurationField field) {,2,0,0,1,3,0,0,1,0,4,41,3,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,392,"            super(field, field.getType());",1,0,0,1,4,1,2,0,1,6,30,4,0.04446,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,393,        },0,0,0,0,1,0,0,0,0,1,1,2,0.04446,0,0
defect4j,time,org/joda/time/DateTime,16,518,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04352,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1540,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.04352,0,0
defect4j,time,org/joda/time/DateTime,16,516,"        super(year, monthOfYear, dayOfMonth,",3,0,0,0,1,1,0,0,1,4,36,3,0.0434,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,88,        return iField.isSupported();,0,0,0,1,2,1,2,0,0,4,28,5,0.04257,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,208,        return iField.getLeapDurationField();,0,0,0,1,2,1,2,0,0,4,37,5,0.04257,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,192,        return iField.getDurationField();,0,0,0,1,2,1,2,0,0,4,33,5,0.04253,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1576,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.04231,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,80,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.04228,0,0
defect4j,time,org/joda/time/DateTimeZone,16,924,        int offset = getOffset(instantUTC);,1,0,0,1,2,1,2,0,1,6,35,5,0.0416,0,0
defect4j,time,org/joda/time/DateTimeZone,16,925,        long instantLocal = instantUTC + offset;,3,1,0,0,0,1,0,0,0,3,40,5,0.0416,0,0
defect4j,time,org/joda/time/DateTimeZone,16,927,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,4,5,0,2,7,1,0,0,0,5,68,4,0.0416,0,0
defect4j,time,org/joda/time/DateTimeZone,16,930,        return instantLocal;,1,0,0,0,0,1,0,0,0,2,20,4,0.0416,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,80,            return (int) ((instant / getUnitMillis()) % iRange);,2,2,0,3,8,2,1,0,1,7,52,8,0.0408,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,196,        return iField.getRangeDurationField();,0,0,0,1,2,1,2,0,0,4,38,5,0.0405,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,54,"        this(chronology, field, 0);",2,0,0,0,2,1,0,0,0,3,27,4,0.0405,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,55,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0405,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,212,        return iField.getMinimumValue();,0,0,0,1,2,1,2,0,0,4,32,5,0.04046,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,65,        super(field);,1,0,0,1,2,1,0,0,1,5,13,3,0.04046,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,66,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.04046,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,67,        int min = super.getMinimumValue();,2,0,0,1,2,2,0,0,0,4,34,5,0.04046,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,68,        if (min < skip) {,2,1,0,1,3,1,0,0,0,5,17,4,0.04046,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,69,            iMinValue = min - 1;,2,1,0,0,0,0,0,0,1,3,20,6,0.04046,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,75,        iSkip = skip;,2,0,0,0,0,0,0,0,1,2,13,4,0.04046,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,76,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04046,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,224,        return iChronology.getMinYear();,0,0,0,1,2,1,2,0,0,4,32,5,0.04036,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,52,"        this(field, null);",1,0,0,0,2,1,0,0,0,3,18,4,0.04016,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,53,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04016,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,62,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.04016,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,63,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.04016,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,66,        iField = field;,2,0,0,0,0,0,0,0,1,2,15,4,0.04016,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,67,        iType = (type == null ? field.getType() : type);,3,1,0,2,4,0,2,0,1,6,48,4,0.04016,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,68,    },0,0,0,0,1,0,0,0,0,1,1,2,0.04016,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,92,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.03997,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,115,        return iChronology.getMinYear();,0,0,0,1,2,1,2,0,0,4,32,5,0.03961,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,295,        return iMillis;,1,0,0,0,0,1,0,0,0,2,15,4,0.03867,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,575,        int thisYear = getYear(instant);,1,0,0,1,2,1,2,0,1,6,32,5,0.0381,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",1,0,0,0,2,1,3,0,1,5,50,5,0.0381,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,577,"        return getDaysInYearMonth(thisYear, thisMonth);",0,0,0,0,2,1,3,0,1,4,47,4,0.0381,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,190,                    dayOfYear++;,1,0,0,0,0,0,0,0,1,2,12,10,0.03766,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,165,        return getWrappedField().getLeapDurationField();,0,0,0,1,4,1,2,0,1,5,48,5,0.03755,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,213,                leapYears--;,1,0,0,0,0,0,0,0,1,2,12,8,0.03598,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,182,                if (!isLeapYear(year)) {,0,0,0,2,5,1,2,0,2,5,24,8,0.03556,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,435,"        return getMonthOfYear(millis, getYear(millis));",0,0,0,1,4,1,4,0,2,5,47,4,0.03533,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,72,        return iChronology.getMonthOfYear(instant);,0,0,0,1,2,1,3,0,0,4,43,5,0.03528,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1541,                return iWallOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,27,8,0.03441,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1577,                return instant;,1,0,0,0,0,1,0,0,0,2,15,7,0.03419,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,167,        if ((base = getBase()) != null) {,1,1,0,3,7,1,1,0,2,7,33,4,0.03382,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0,0,0,1,4,0,5,0,0,3,78,5,0.03382,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0,0,0,1,4,0,5,0,0,3,84,5,0.03382,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0,0,0,1,4,0,5,0,0,3,88,5,0.03382,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0,0,0,1,4,0,5,0,0,3,89,5,0.03382,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0,4,0,0,2,1,4,0,1,5,59,4,0.03382,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,3,4,0,2,7,1,0,0,1,6,54,4,0.03318,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,16,56,        return iChronology.getDayOfWeek(instant);,0,0,0,1,2,1,3,0,0,4,41,5,0.03241,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,534,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.03219,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,134,        return (value > 28 ? getDaysInMonthMax(instant) : 28);,1,1,0,2,4,1,2,0,1,7,54,6,0.03188,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0,0,0,0,2,1,4,0,0,3,59,5,0.03188,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,458,"        int month = getMonthOfYear(millis, year);",1,0,0,0,2,1,3,0,1,5,41,5,0.03182,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,459,"        return getDayOfMonth(millis, year, month);",0,0,0,0,2,1,4,0,1,4,42,4,0.03182,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,292,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0,0,0,0,2,1,5,0,0,3,53,5,0.03182,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,294,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.03182,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,296,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",1,0,0,0,2,1,4,0,0,4,59,5,0.03182,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,297,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",1,0,0,0,2,1,4,0,0,4,61,5,0.03182,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,298,        if (thisDom > maxDom) {,2,1,0,1,3,1,0,0,0,5,23,4,0.03182,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,303,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0,1,0,0,2,1,5,0,0,4,68,4,0.03182,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0,0,0,1,6,1,5,0,2,5,80,5,0.03153,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,112,        return instant + (value - get(instant)) * iUnitMillis;,3,3,0,2,4,1,2,0,1,7,54,4,0.03153,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,82,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,2,0,0,1,28,5,0.03153,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,84,"        return iChronology.setYear(instant, year);",0,0,0,0,2,1,4,0,0,3,42,5,0.03153,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,55,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.03125,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,160,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.03119,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,552,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,3,1,0,1,4,2,0,0,0,5,58,8,0.03115,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,103,        return getInfo(instant).getOffset(instant);,0,0,0,1,4,1,4,0,1,5,43,5,0.03103,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,196,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,4,3,0,1,3,1,0,0,0,5,59,5,0.03103,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,197,                if (iOffset == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,35,7,0.03103,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,198,                    iOffset = iZoneRef.getOffset(iPeriodStart);,1,0,0,1,2,0,3,0,1,5,43,9,0.03103,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,200,                return iOffset;,1,0,0,0,0,1,0,0,0,2,15,7,0.03103,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1533,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.03103,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1534,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.03103,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1528,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.03101,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1529,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.03101,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1530,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.03101,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,107,        if ((base = iBase) != null) {,2,1,0,2,5,1,0,0,1,6,29,4,0.03093,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,108,            return base.getZone();,0,0,0,1,2,1,2,0,0,4,22,7,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,140,        int period = (int)(millis >> 32);,2,1,0,1,4,2,0,0,0,5,33,5,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,141,        Info[] cache = iInfoCache;,2,0,0,0,2,0,0,1,0,3,26,4,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,142,        int index = period & cInfoCacheMask;,3,1,0,0,0,1,0,0,0,3,36,5,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,143,        Info info = cache[index];,1,0,1,0,2,0,0,1,0,4,25,4,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,144,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,4,4,0,3,9,2,0,0,0,5,65,4,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,145,            info = createInfo(millis);,1,0,0,1,2,0,2,0,2,5,26,6,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,146,            cache[index] = info;,1,0,1,0,2,0,0,0,1,4,20,6,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,148,        return info;,1,0,0,0,0,1,0,0,0,2,12,4,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,152,        long periodStart = millis & (0xffffffffL << 32);,2,2,0,1,2,1,0,0,0,5,48,5,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,153,"        Info info = new Info(iZone, periodStart);",3,0,0,0,2,1,0,2,1,5,41,4,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,155,        long end = periodStart | 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,37,5,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,156,        Info chain = info;,2,0,0,0,0,0,0,1,0,2,18,4,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,158,            long next = iZone.nextTransition(periodStart);,1,0,0,1,2,1,3,0,0,5,46,7,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,159,            if (next == periodStart || next > end) {,4,3,0,1,3,1,0,0,0,5,40,6,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,166,        return info;,1,0,0,0,0,1,0,0,0,2,12,4,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,180,"        Info(DateTimeZone zone, long periodStart) {",3,0,0,0,3,1,0,1,0,4,43,3,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,177,        private int iOffset = Integer.MIN_VALUE;,3,0,0,0,0,2,0,0,1,3,40,3,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,178,        private int iStandardOffset = Integer.MIN_VALUE;,3,0,0,0,0,2,0,0,1,3,48,3,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,181,            iPeriodStart = periodStart;,2,0,0,0,0,0,0,0,1,2,27,5,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,182,            iZoneRef = zone;,2,0,0,0,0,0,0,0,1,2,16,5,0.03093,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,183,        },0,0,0,0,1,0,0,0,0,1,1,2,0.03093,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1570,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.03093,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1571,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.03093,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1572,            i = (i >= 0) ? (i + 1) : ~i;,4,2,0,1,4,0,0,0,2,5,28,5,0.03093,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1573,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.03093,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0,0,0,1,3,1,4,0,1,5,60,5,0.03084,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,80,        return instant + (value - get(instant)) * iUnitMillis;,3,3,0,2,4,1,2,0,1,7,54,4,0.03084,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2116,                buf.append(iZeroOffsetPrintText);,0,0,0,1,2,0,3,0,0,3,33,8,0.03077,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2117,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.03077,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,175,        int thisYear = getYear(instant);,1,0,0,1,2,1,2,0,1,6,32,5,0.03064,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",1,0,0,0,2,1,3,0,1,5,48,5,0.03064,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,177,        int millisOfDay = getMillisOfDay(instant);,1,0,0,1,2,1,2,0,1,6,42,5,0.03064,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,1,2,0,2,5,1,0,0,0,5,44,4,0.03064,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",1,0,0,0,2,0,3,0,2,4,52,4,0.03064,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,196,        instant += millisOfDay;,2,0,0,0,0,0,0,0,1,2,23,4,0.03064,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,198,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.03064,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,485,        long yearStart = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,37,5,0.03061,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,4,3,0,2,6,2,0,0,0,5,76,4,0.03061,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,256,"        iMillis = checkInstant(instant, iChronology);",1,0,0,0,2,0,3,0,2,4,45,4,0.03038,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,257,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03038,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,551,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.03036,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,131,        return iRange - 1;,1,1,0,0,0,1,0,0,0,3,18,4,0.03032,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,252,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.03023,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,253,        iChronology = checkChronology(chronology);,1,0,0,1,2,0,2,0,2,5,42,4,0.03023,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",1,0,0,0,1,1,5,0,0,4,75,5,0.03023,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,221,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02952,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,216,        if ((value < lowerBound) || (value > upperBound)) {,4,3,0,2,7,1,0,0,0,5,51,4,0.0295,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0,0,0,1,6,0,8,0,1,4,115,5,0.02945,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0,0,0,0,2,1,4,0,1,4,60,4,0.02945,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,239,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02941,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0,0,0,1,8,0,7,0,2,4,89,5,0.02941,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0,0,0,1,6,0,7,0,1,4,97,5,0.02941,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,682,        return getMaxMonth();,0,0,0,1,2,1,1,0,1,5,21,4,0.02941,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,234,        if ((value < lowerBound) || (value > upperBound)) {,4,3,0,2,7,1,0,0,0,5,51,4,0.02939,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1345,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,4,5,0,2,8,0,2,0,3,6,63,9,0.02922,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,77,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.02906,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,43,7,0.02882,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,120,        if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,4,0.02819,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,448,        int year = getYear(millis);,1,0,0,1,2,1,2,0,1,6,27,5,0.02819,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,449,"        int month = getMonthOfYear(millis, year);",1,0,0,0,2,1,3,0,1,5,41,5,0.02819,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,450,"        return getDayOfMonth(millis, year, month);",0,0,0,0,2,1,4,0,1,4,42,4,0.02819,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,47,        return iChronology.getDayOfMonth(instant);,0,0,0,1,2,1,3,0,0,4,42,5,0.02819,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,79,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.02816,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,54,        return iChronology.getYear(instant);,0,0,0,1,2,1,3,0,0,4,36,5,0.02808,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,50,7,0.02798,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,468,        long dateMillis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,38,5,0.02795,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",1,0,0,0,2,0,3,0,2,4,53,4,0.02795,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,4,3,0,2,6,2,0,0,0,5,76,4,0.02795,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,221,        return MIN_YEAR;,1,0,0,0,0,1,0,0,0,2,16,4,0.02794,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,2,2,0,3,8,2,2,0,1,7,52,5,0.02771,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,93,        return,0,0,0,0,0,0,0,0,0,0,6,2,0.02771,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,233,        return MILLIS_PER_YEAR / 2;,1,1,0,0,0,1,0,0,0,3,27,4,0.02754,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,241,        return (1970L * MILLIS_PER_YEAR) / 2;,1,2,0,1,2,1,0,0,0,5,37,4,0.02754,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,1,0,0,1,2,1,1,0,1,6,56,5,0.02751,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,2,2,0,1,4,1,1,0,1,7,64,5,0.02751,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,401,        if (i2 < 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.02751,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,404,        int year = (int) (i2 / unitMillis);,3,1,0,1,4,2,0,0,0,5,35,5,0.02751,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,406,        long yearStart = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,37,5,0.02751,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,407,        long diff = instant - yearStart;,3,1,0,0,0,1,0,0,0,3,32,5,0.02751,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,409,        if (diff < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.02751,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,3,2,0,1,4,2,0,0,0,5,61,5,0.02751,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,428,        return year;,1,0,0,0,0,1,0,0,0,2,12,4,0.02751,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,139,        if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,4,0.02737,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,202,        int leapYears = year / 100;,2,1,0,0,0,1,0,0,0,3,27,5,0.02712,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,203,        if (year < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.02712,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,4,4,0,1,4,0,0,0,1,5,55,6,0.02712,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,212,            if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,6,0.02712,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,5,4,0,2,4,1,0,0,0,5,90,4,0.02712,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,3,8,0,2,10,1,0,0,0,5,69,4,0.027,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,385,        long millis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,34,5,0.02647,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,386,"        millis += getTotalMillisByYearMonth(year, month);",1,0,0,0,2,0,3,0,2,4,49,4,0.02647,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,387,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,4,3,0,1,4,2,0,0,0,5,74,4,0.02647,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,284,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.02636,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,270,        return DateTimeUtils.getChronology(chronology);,0,0,0,1,2,1,3,0,0,4,47,5,0.02564,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,360,        return getYearInfo(year).iFirstDayMillis;,1,0,0,1,2,1,2,0,1,6,41,5,0.02559,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,738,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,3,1,1,0,2,0,0,1,0,5,50,4,0.02559,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,739,        if (info == null || info.iYear != year) {,4,3,0,1,3,1,0,0,0,5,41,4,0.02559,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",2,0,0,1,4,1,2,1,3,7,63,6,0.02559,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,741,            iYearInfoCache[year & CACHE_MASK] = info;,3,1,1,0,2,0,0,0,1,5,41,6,0.02559,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,743,        return info;,1,0,0,0,0,1,0,0,0,2,12,4,0.02559,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,770,"        YearInfo(int year, long firstDayMillis) {",3,0,0,0,3,2,0,0,0,3,41,3,0.02559,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,771,            iYear = year;,2,0,0,0,0,0,0,0,1,2,13,5,0.02559,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,772,            iFirstDayMillis = firstDayMillis;,2,0,0,0,0,0,0,0,1,2,33,5,0.02559,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,773,        },0,0,0,0,1,0,0,0,0,1,1,2,0.02559,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,51,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.02552,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02552,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,61,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.02431,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02431,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",1,0,0,0,4,1,4,1,2,6,76,8,0.02396,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,108,"                cCache.put(zone, chrono);",0,0,0,0,2,0,4,0,0,2,25,9,0.02396,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,96,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.02338,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,2,2,0,1,4,1,3,0,0,6,66,5,0.02338,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,100,        ISOChronology chrono = cFastCache[index];,1,0,1,0,2,0,0,1,0,4,41,4,0.02338,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,101,        if (chrono != null && chrono.getZone() == zone) {,2,3,0,2,5,1,2,0,0,6,49,4,0.02338,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,104,        synchronized (cCache) {,1,0,0,1,3,1,0,0,0,4,23,4,0.02338,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,105,            chrono = cCache.get(zone);,1,0,0,1,2,0,3,0,1,5,26,6,0.02338,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,106,            if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.02338,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,110,        },0,0,0,0,1,0,0,0,0,1,1,2,0.02338,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,111,        cFastCache[index] = chrono;,1,0,1,0,2,0,0,0,1,4,27,4,0.02338,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,112,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.02338,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,82,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.02266,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,83,        cMillisProvider = new FixedMillisProvider(fixedMillis);,2,0,0,1,2,1,0,1,2,6,55,4,0.02266,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,84,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02266,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,414,        FixedMillisProvider(long fixedMillis) {,2,0,0,1,3,1,0,0,0,4,39,3,0.02266,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,415,            iMillis = fixedMillis;,2,0,0,0,0,0,0,0,1,2,22,5,0.02266,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,416,        },0,0,0,0,1,0,0,0,0,1,1,2,0.02266,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,68,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.02263,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,69,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,0,0,0,0,0,0,1,2,41,4,0.02263,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02263,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,129,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.02263,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,130,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.02263,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,133,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02263,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,255,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.02236,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,133,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.02223,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,184,                    dayOfYear--;,1,0,0,0,0,0,0,0,1,2,12,10,0.02206,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,123,        return iZone.hashCode();,0,0,0,1,2,1,2,0,0,4,24,5,0.02182,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,4,0,0,4,70,5,0.02156,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,131,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.02156,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,109,        return getWrappedField().getUnitMillis() * iScalar;,1,1,0,1,4,1,2,0,1,7,51,4,0.0214,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,218,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0214,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1250,        return 57 + getID().hashCode();,0,1,0,1,4,1,2,0,1,6,31,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,82,"        super(base, zone);",2,0,0,0,2,1,0,0,1,4,18,3,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,83,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,56,        if (base == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,59,        base = base.withUTC();,1,0,0,1,2,0,2,0,1,5,22,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,60,        if (base == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,63,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,66,"        return new ZonedChronology(base, zone);",2,0,0,0,2,2,0,1,1,5,39,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,72,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,3,4,0,1,2,1,2,0,0,6,87,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,86,        return (DateTimeZone)getParam();,0,0,0,1,4,1,1,1,1,6,32,5,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",1,0,0,1,2,1,0,6,1,6,66,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,157,"        fields.eras = convertField(fields.eras, converted);",4,0,0,0,2,0,2,0,2,4,51,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,158,"        fields.centuries = convertField(fields.centuries, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,159,"        fields.years = convertField(fields.years, converted);",4,0,0,0,2,0,2,0,2,4,53,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,160,"        fields.months = convertField(fields.months, converted);",4,0,0,0,2,0,2,0,2,4,55,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,161,"        fields.weekyears = convertField(fields.weekyears, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,162,"        fields.weeks = convertField(fields.weeks, converted);",4,0,0,0,2,0,2,0,2,4,53,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,163,"        fields.days = convertField(fields.days, converted);",4,0,0,0,2,0,2,0,2,4,51,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,165,"        fields.halfdays = convertField(fields.halfdays, converted);",4,0,0,0,2,0,2,0,2,4,59,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,166,"        fields.hours = convertField(fields.hours, converted);",4,0,0,0,2,0,2,0,2,4,53,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,167,"        fields.minutes = convertField(fields.minutes, converted);",4,0,0,0,2,0,2,0,2,4,57,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,168,"        fields.seconds = convertField(fields.seconds, converted);",4,0,0,0,2,0,2,0,2,4,57,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,169,"        fields.millis = convertField(fields.millis, converted);",4,0,0,0,2,0,2,0,2,4,55,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,173,"        fields.year = convertField(fields.year, converted);",4,0,0,0,2,0,2,0,2,4,51,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",4,0,0,0,2,0,2,0,2,4,69,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",4,0,0,0,2,0,2,0,2,4,67,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,177,"        fields.era = convertField(fields.era, converted);",4,0,0,0,2,0,2,0,2,4,49,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",4,0,0,0,2,0,2,0,2,4,63,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,183,"        fields.weekyear = convertField(fields.weekyear, converted);",4,0,0,0,2,0,2,0,2,4,59,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",4,0,0,0,2,0,2,0,2,4,77,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",4,0,0,0,2,0,2,0,2,4,67,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",4,0,0,0,2,0,2,0,2,4,69,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",4,0,0,0,2,0,2,0,2,4,79,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",4,0,0,0,2,0,2,0,2,4,67,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,197,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,200,        if (field == null || !field.isSupported()) {,1,2,0,2,5,1,2,0,1,7,44,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,201,            return field;,1,0,0,0,0,1,0,0,0,2,13,6,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,203,        if (converted.containsKey(field)) {,0,0,0,2,5,1,3,0,0,4,35,5,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,204,            return (DurationField)converted.get(field);,0,0,0,1,4,1,3,1,0,5,43,7,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",2,0,0,1,4,1,1,2,2,7,73,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,207,"        converted.put(field, zonedField);",0,0,0,0,2,0,4,0,0,2,33,5,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,208,        return zonedField;,1,0,0,0,0,1,0,0,0,2,18,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,212,        if (field == null || !field.isSupported()) {,1,2,0,2,5,1,2,0,1,7,44,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,215,        if (converted.containsKey(field)) {,0,0,0,2,5,1,3,0,0,4,35,5,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,218,        ZonedDateTimeField zonedField =,1,0,0,0,0,0,0,1,0,2,31,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,223,"        converted.put(field, zonedField);",0,0,0,0,2,0,4,0,0,2,33,5,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,224,        return zonedField;,1,0,0,0,0,1,0,0,0,2,18,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,284,            super(field.getType());,0,0,0,2,4,1,2,0,1,5,23,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,285,            if (!field.isSupported()) {,0,0,0,2,5,1,2,0,1,5,27,5,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,288,            iField = field;,2,0,0,0,0,0,0,0,1,2,15,5,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,289,            iTimeField = useTimeArithmetic(field);,1,0,0,1,2,0,2,0,2,5,38,5,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,290,            iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,5,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,291,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,298,            return iField.getUnitMillis();,0,0,0,1,2,1,2,0,0,4,30,6,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,389,            super(field.getType());,0,0,0,2,4,1,2,0,1,5,23,4,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,390,            if (!field.isSupported()) {,0,0,0,2,5,1,2,0,1,5,27,5,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,393,            iField = field;,2,0,0,0,0,0,0,0,1,2,15,5,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,394,            iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,5,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,395,            iDurationField = durationField;,2,0,0,0,0,0,0,0,1,2,31,5,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,396,            iTimeField = useTimeArithmetic(durationField);,1,0,0,1,2,0,2,0,2,5,46,5,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,397,            iRangeDurationField = rangeDurationField;,2,0,0,0,0,0,0,0,1,2,41,5,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,398,            iLeapDurationField = leapDurationField;,2,0,0,0,0,0,0,0,1,2,39,5,0.0214,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,399,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0214,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,726,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.02139,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,147,        long scalar = iScalar;,2,0,0,0,0,1,0,0,0,2,22,5,0.02139,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,148,        int hash = (int) (scalar ^ (scalar >>> 32));,3,2,0,2,6,2,0,0,0,5,44,5,0.02139,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,149,        hash += getType().hashCode();,1,0,0,1,4,0,2,0,2,5,29,4,0.02139,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,150,        hash += getWrappedField().hashCode();,1,0,0,1,4,0,2,0,2,5,37,4,0.02139,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,151,        return hash;,1,0,0,0,0,1,0,0,0,2,12,4,0.02139,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,16,69,        return iField;,1,0,0,0,0,1,0,0,0,2,14,4,0.02139,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,101,        return getWrappedField().getLeapDurationField();,0,0,0,1,4,1,2,0,1,5,48,5,0.02139,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,49,        return DurationFieldType.millis();,0,0,0,1,2,1,2,0,0,4,34,5,0.02139,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,155,        return (int) getUnitMillis();,0,0,0,1,4,2,1,0,1,5,29,5,0.02139,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,142,        long millis = iUnitMillis;,2,0,0,0,0,1,0,0,0,2,26,5,0.02139,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,143,        int hash = (int) (millis ^ (millis >>> 32));,3,2,0,2,6,2,0,0,0,5,44,5,0.02139,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,144,        hash += getType().hashCode();,1,0,0,1,4,0,2,0,2,5,29,4,0.02139,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,145,        return hash;,1,0,0,0,0,1,0,0,0,2,12,4,0.02139,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,328,        return iChronology.days();,0,0,0,1,2,1,2,0,0,4,26,5,0.02139,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,111,        return iChronology.days();,0,0,0,1,2,1,2,0,0,4,26,5,0.02139,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,220,        return iChronology.weeks();,0,0,0,1,2,1,2,0,0,4,27,5,0.02139,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,16,94,        return iChronology.weeks();,0,0,0,1,2,1,2,0,0,4,27,5,0.02133,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,139,        return iRangeField;,1,0,0,0,0,1,0,0,0,2,19,4,0.02128,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,90,        return iField.getRangeDurationField();,0,0,0,1,2,1,2,0,0,4,38,5,0.02128,0,0
defect4j,time,org/joda/time/DateTimeZone,16,174,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.02128,0,0
defect4j,time,org/joda/time/DateTimeZone,16,175,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.02128,0,0
defect4j,time,org/joda/time/DateTimeZone,16,178,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.02128,0,0
defect4j,time,org/joda/time/DateTimeZone,16,181,        synchronized(DateTimeZone.class) {,0,0,0,1,3,2,0,1,0,4,34,6,0.02128,0,0
defect4j,time,org/joda/time/DateTimeZone,16,182,            cDefault = zone;,2,0,0,0,0,0,0,0,1,2,16,6,0.02128,0,0
defect4j,time,org/joda/time/DateTimeZone,16,183,        },0,0,0,0,1,0,0,0,0,1,1,2,0.02128,0,0
defect4j,time,org/joda/time/DateTimeZone,16,184,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02128,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,315,        return iParam;,1,0,0,0,0,1,0,0,0,2,14,4,0.02128,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,55,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.02127,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,56,        return iChronology.years();,0,0,0,1,2,1,2,0,0,4,27,5,0.02124,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,58,        return iChronology.weekyears();,0,0,0,1,2,1,2,0,0,4,31,5,0.02124,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,208,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.02124,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,252,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.02121,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,309,        return iChronology.years();,0,0,0,1,2,1,2,0,0,4,27,5,0.02117,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,51,        return iChronology.months();,0,0,0,1,2,1,2,0,0,4,28,5,0.02117,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,490,                builder.appendDayOfMonth(tokenLen);,0,0,0,1,2,0,3,0,0,3,35,8,0.02116,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,491,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.02116,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,95,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.02113,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,160,            return iUnitMillis;,1,0,0,0,0,1,0,0,0,2,19,5,0.02102,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,122,        return iRangeField;,1,0,0,0,0,1,0,0,0,2,19,4,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,122,"        super(base, null);",1,0,0,0,2,1,0,0,1,4,18,3,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,123,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",1,0,0,1,2,4,0,6,4,6,106,2,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,1,0,1,0,2,1,0,1,1,6,48,4,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,1,0,0,2,4,1,2,1,2,7,71,4,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",2,0,0,0,2,0,3,0,0,3,43,5,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,68,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,169,        if (getBase().getZone() == DateTimeZone.UTC) {,2,1,0,2,7,1,2,0,1,7,46,4,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,171,            fields.centuryOfEra = new DividedDateTimeField(,2,0,0,0,1,1,0,1,2,5,47,6,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,173,            fields.yearOfCentury = new RemainderDateTimeField(,2,0,0,0,1,1,0,1,2,5,50,6,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,2,0,0,0,1,1,0,1,2,5,54,6,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,178,            fields.centuries = fields.centuryOfEra.getDurationField();,4,0,0,1,2,0,1,0,1,5,58,6,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02099,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,81,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",0,0,0,1,8,1,5,0,1,5,82,3,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,40,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,1,0,0,1,2,3,0,2,3,6,70,2,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,87,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.02099,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,91,        return getWrappedField().getMaximumValue();,0,0,0,1,4,1,2,0,1,5,43,5,0.02099,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,146,        return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,5,0.02097,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,143,        if ((base = getBase()) != null) {,1,1,0,3,7,1,1,0,2,7,33,4,0.02096,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,141,        return iUnitField;,1,0,0,0,0,1,0,0,0,2,18,4,0.0209,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,45,public final class GregorianChronology extends BasicGJChronology {,1,0,0,0,1,4,0,1,2,5,66,1,0.02053,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,321,            fields.copyFieldsFrom(iBase);,0,0,0,1,2,0,3,0,0,3,29,7,0.0205,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,372,            flags = ,1,0,0,0,0,0,0,0,1,2,7,6,0.0205,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,148,"        super(base, param, minDaysInFirstWeek);",3,0,0,0,2,1,0,0,1,4,39,3,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,149,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",1,0,0,1,6,4,0,6,4,6,122,2,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,3,0,0,1,2,0,1,0,2,5,45,4,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,100,"        return getInstance(zone, 4);",0,0,0,0,2,1,2,0,1,4,28,4,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,111,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,115,        synchronized (cCache) {,1,0,0,1,3,1,0,0,0,4,23,4,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,116,            GregorianChronology[] chronos = cCache.get(zone);,1,0,0,1,4,0,3,1,0,5,49,6,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,117,            if (chronos == null) {,1,1,0,1,3,1,0,0,0,5,22,6,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,118,                chronos = new GregorianChronology[7];,1,0,0,0,2,1,0,1,1,5,37,8,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,119,"                cCache.put(zone, chronos);",0,0,0,0,2,0,4,0,0,2,26,9,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,122,                chrono = chronos[minDaysInFirstWeek - 1];,2,1,1,0,2,0,0,0,1,5,41,8,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,126,            },0,0,0,0,1,0,0,0,0,1,1,2,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,127,            if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,128,                if (zone == DateTimeZone.UTC) {,3,1,0,1,3,1,0,0,0,5,31,8,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",2,0,0,0,2,1,0,1,2,5,65,10,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,135,                chronos[minDaysInFirstWeek - 1] = chrono;,2,1,1,0,2,0,0,0,1,5,41,8,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,137,        },0,0,0,0,1,0,0,0,0,1,1,2,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,138,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,191,        if (getBase() == null) {,0,1,0,2,5,1,1,0,1,6,24,4,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,192,            super.assemble(fields);,2,0,0,1,2,1,0,0,0,4,23,7,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,194,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,225,        return MAX_YEAR;,1,0,0,0,0,1,0,0,0,2,16,4,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,229,        return MILLIS_PER_YEAR;,1,0,0,0,0,1,0,0,0,2,23,4,0.02047,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,237,        return MILLIS_PER_MONTH;,1,0,0,0,0,1,0,0,0,2,24,4,0.02047,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,75,"        super(base, param, minDaysInFirstWeek);",3,0,0,0,2,1,0,0,1,4,39,3,0.02045,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,76,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02045,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,1,0,0,0,3,4,0,0,3,4,55,2,0.02045,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,1,0,0,0,3,4,0,0,3,4,55,2,0.02045,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,1,0,0,0,2,2,0,0,1,4,47,4,0.02045,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,1,0,0,0,2,2,0,0,1,4,47,4,0.02045,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,56,        long minSum = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.02045,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,57,        long maxSum = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.02045,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,58,        for (int i = 0; i < 11; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.02045,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],1,1,1,0,2,1,0,0,0,5,41,7,0.02045,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,61,            minSum += millis;,2,0,0,0,0,0,0,0,1,2,17,6,0.02045,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,2,1,1,0,2,0,0,0,1,5,48,6,0.02045,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],1,1,1,0,2,0,0,0,1,5,36,6,0.02045,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,66,            maxSum += millis;,2,0,0,0,0,0,0,0,1,2,17,6,0.02045,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,2,1,1,0,2,0,0,0,1,5,48,6,0.02045,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,69,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02045,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,691,        return 12;,0,0,0,0,0,1,0,0,0,1,10,2,0.02045,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,62,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0204,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,92,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,156,        return iMillis;,1,0,0,0,0,1,0,0,0,2,15,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,160,        return iMillisOfSecond;,1,0,0,0,0,1,0,0,0,2,23,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,164,        return iMillisOfDay;,1,0,0,0,0,1,0,0,0,2,20,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,168,        return iSeconds;,1,0,0,0,0,1,0,0,0,2,16,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,172,        return iSecondOfMinute;,1,0,0,0,0,1,0,0,0,2,23,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,176,        return iSecondOfDay;,1,0,0,0,0,1,0,0,0,2,20,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,180,        return iMinutes;,1,0,0,0,0,1,0,0,0,2,16,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,184,        return iMinuteOfHour;,1,0,0,0,0,1,0,0,0,2,21,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,188,        return iMinuteOfDay;,1,0,0,0,0,1,0,0,0,2,20,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,192,        return iHours;,1,0,0,0,0,1,0,0,0,2,14,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,196,        return iHourOfDay;,1,0,0,0,0,1,0,0,0,2,18,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,200,        return iClockhourOfDay;,1,0,0,0,0,1,0,0,0,2,23,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,204,        return iHalfdays;,1,0,0,0,0,1,0,0,0,2,17,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,208,        return iHourOfHalfday;,1,0,0,0,0,1,0,0,0,2,22,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,212,        return iClockhourOfHalfday;,1,0,0,0,0,1,0,0,0,2,27,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,216,        return iHalfdayOfDay;,1,0,0,0,0,1,0,0,0,2,21,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,220,        return iDays;,1,0,0,0,0,1,0,0,0,2,13,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,224,        return iDayOfWeek;,1,0,0,0,0,1,0,0,0,2,18,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,228,        return iDayOfMonth;,1,0,0,0,0,1,0,0,0,2,19,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,232,        return iDayOfYear;,1,0,0,0,0,1,0,0,0,2,18,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,236,        return iWeeks;,1,0,0,0,0,1,0,0,0,2,14,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,240,        return iWeekOfWeekyear;,1,0,0,0,0,1,0,0,0,2,23,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,244,        return iWeekyears;,1,0,0,0,0,1,0,0,0,2,18,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,248,        return iWeekyear;,1,0,0,0,0,1,0,0,0,2,17,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,252,        return iWeekyearOfCentury;,1,0,0,0,0,1,0,0,0,2,26,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,256,        return iMonths;,1,0,0,0,0,1,0,0,0,2,15,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,260,        return iMonthOfYear;,1,0,0,0,0,1,0,0,0,2,20,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,264,        return iYears;,1,0,0,0,0,1,0,0,0,2,14,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,272,        return iYearOfEra;,1,0,0,0,0,1,0,0,0,2,18,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,276,        return iYearOfCentury;,1,0,0,0,0,1,0,0,0,2,22,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,280,        return iCenturies;,1,0,0,0,0,1,0,0,0,2,18,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,284,        return iCenturyOfEra;,1,0,0,0,0,1,0,0,0,2,21,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,288,        return iEras;,1,0,0,0,0,1,0,0,0,2,13,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,292,        return iEra;,1,0,0,0,0,1,0,0,0,2,12,4,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,445,                if (isSupported(f = chrono.millis())) {,1,0,0,3,7,1,3,0,2,6,39,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,446,                    millis = f;,2,0,0,0,0,0,0,0,1,2,11,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,448,                if (isSupported(f = chrono.seconds())) {,1,0,0,3,7,1,3,0,2,6,40,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,449,                    seconds = f;,2,0,0,0,0,0,0,0,1,2,12,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,451,                if (isSupported(f = chrono.minutes())) {,1,0,0,3,7,1,3,0,2,6,40,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,452,                    minutes = f;,2,0,0,0,0,0,0,0,1,2,12,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,454,                if (isSupported(f = chrono.hours())) {,1,0,0,3,7,1,3,0,2,6,38,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,455,                    hours = f;,2,0,0,0,0,0,0,0,1,2,10,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,457,                if (isSupported(f = chrono.halfdays())) {,1,0,0,3,7,1,3,0,2,6,41,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,458,                    halfdays = f;,2,0,0,0,0,0,0,0,1,2,13,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,460,                if (isSupported(f = chrono.days())) {,1,0,0,3,7,1,3,0,2,6,37,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,461,                    days = f;,2,0,0,0,0,0,0,0,1,2,9,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,463,                if (isSupported(f = chrono.weeks())) {,1,0,0,3,7,1,3,0,2,6,38,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,464,                    weeks = f;,2,0,0,0,0,0,0,0,1,2,10,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,466,                if (isSupported(f = chrono.weekyears())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,467,                    weekyears = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,469,                if (isSupported(f = chrono.months())) {,1,0,0,3,7,1,3,0,2,6,39,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,470,                    months = f;,2,0,0,0,0,0,0,0,1,2,11,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,472,                if (isSupported(f = chrono.years())) {,1,0,0,3,7,1,3,0,2,6,38,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,473,                    years = f;,2,0,0,0,0,0,0,0,1,2,10,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,475,                if (isSupported(f = chrono.centuries())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,476,                    centuries = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,478,                if (isSupported(f = chrono.eras())) {,1,0,0,3,7,1,3,0,2,6,37,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,485,                if (isSupported(f = chrono.millisOfSecond())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,486,                    millisOfSecond = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,488,                if (isSupported(f = chrono.millisOfDay())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,489,                    millisOfDay = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,491,                if (isSupported(f = chrono.secondOfMinute())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,492,                    secondOfMinute = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,494,                if (isSupported(f = chrono.secondOfDay())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,495,                    secondOfDay = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,497,                if (isSupported(f = chrono.minuteOfHour())) {,1,0,0,3,7,1,3,0,2,6,45,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,498,                    minuteOfHour = f;,2,0,0,0,0,0,0,0,1,2,17,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,500,                if (isSupported(f = chrono.minuteOfDay())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,501,                    minuteOfDay = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,503,                if (isSupported(f = chrono.hourOfDay())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,504,                    hourOfDay = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,506,                if (isSupported(f = chrono.clockhourOfDay())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,507,                    clockhourOfDay = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,509,                if (isSupported(f = chrono.hourOfHalfday())) {,1,0,0,3,7,1,3,0,2,6,46,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,510,                    hourOfHalfday = f;,2,0,0,0,0,0,0,0,1,2,18,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,1,0,0,3,7,1,3,0,2,6,51,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,513,                    clockhourOfHalfday = f;,2,0,0,0,0,0,0,0,1,2,23,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,515,                if (isSupported(f = chrono.halfdayOfDay())) {,1,0,0,3,7,1,3,0,2,6,45,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,516,                    halfdayOfDay = f;,2,0,0,0,0,0,0,0,1,2,17,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,518,                if (isSupported(f = chrono.dayOfWeek())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,519,                    dayOfWeek = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,521,                if (isSupported(f = chrono.dayOfMonth())) {,1,0,0,3,7,1,3,0,2,6,43,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,522,                    dayOfMonth = f;,2,0,0,0,0,0,0,0,1,2,15,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,524,                if (isSupported(f = chrono.dayOfYear())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,525,                    dayOfYear = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,528,                    weekOfWeekyear = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,530,                if (isSupported(f = chrono.weekyear())) {,1,0,0,3,7,1,3,0,2,6,41,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,531,                    weekyear = f;,2,0,0,0,0,0,0,0,1,2,13,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,1,0,0,3,7,1,3,0,2,6,50,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,534,                    weekyearOfCentury = f;,2,0,0,0,0,0,0,0,1,2,22,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,536,                if (isSupported(f = chrono.monthOfYear())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,537,                    monthOfYear = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,539,                if (isSupported(f = chrono.year())) {,1,0,0,3,7,1,3,0,2,6,37,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,540,                    year = f;,2,0,0,0,0,0,0,0,1,2,9,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,542,                if (isSupported(f = chrono.yearOfEra())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,543,                    yearOfEra = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,545,                if (isSupported(f = chrono.yearOfCentury())) {,1,0,0,3,7,1,3,0,2,6,46,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,546,                    yearOfCentury = f;,2,0,0,0,0,0,0,0,1,2,18,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,548,                if (isSupported(f = chrono.centuryOfEra())) {,1,0,0,3,7,1,3,0,2,6,45,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,549,                    centuryOfEra = f;,2,0,0,0,0,0,0,0,1,2,17,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,551,                if (isSupported(f = chrono.era())) {,1,0,0,3,7,1,3,0,2,6,36,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,552,                    era = f;,2,0,0,0,0,0,0,0,1,2,8,8,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,555,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,558,            return field == null ? false : field.isSupported();,1,1,0,1,2,1,2,0,1,7,51,6,0.0204,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,562,            return field == null ? false : field.isSupported();,1,1,0,1,2,1,2,0,1,7,51,6,0.0204,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,164,        return MILLIS_OF_SECOND_TYPE;,1,0,0,0,0,1,0,0,0,2,29,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,173,        return MILLIS_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,182,        return SECOND_OF_MINUTE_TYPE;,1,0,0,0,0,1,0,0,0,2,29,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,191,        return SECOND_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,209,        return MINUTE_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,218,        return HOUR_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,24,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,236,        return HOUR_OF_HALFDAY_TYPE;,1,0,0,0,0,1,0,0,0,2,28,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,245,        return CLOCKHOUR_OF_HALFDAY_TYPE;,1,0,0,0,0,1,0,0,0,2,33,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,254,        return HALFDAY_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,27,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,264,        return DAY_OF_WEEK_TYPE;,1,0,0,0,0,1,0,0,0,2,24,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,282,        return DAY_OF_YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,24,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,291,        return WEEK_OF_WEEKYEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,29,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,300,        return WEEKYEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,21,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,309,        return WEEKYEAR_OF_CENTURY_TYPE;,1,0,0,0,0,1,0,0,0,2,32,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,318,        return MONTH_OF_YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,26,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,336,        return YEAR_OF_ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,24,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,345,        return YEAR_OF_CENTURY_TYPE;,1,0,0,0,0,1,0,0,0,2,28,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,354,        return CENTURY_OF_ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,27,4,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,363,        return ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,16,4,0.02039,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,50,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.02039,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,51,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.02039,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,54,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.02039,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,55,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,58,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.02039,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,69,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,48,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,50,        if (!unit.isPrecise()) {,0,0,0,2,5,1,2,0,1,5,24,4,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,54,        iUnitMillis = unit.getUnitMillis();,1,0,0,1,2,0,2,0,1,5,35,4,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,55,        if (iUnitMillis < 1) {,1,1,0,1,3,1,0,0,0,5,22,4,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,59,        iUnitField = unit;,2,0,0,0,0,0,0,0,1,2,18,4,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,150,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,154,        return iUnitMillis;,1,0,0,0,0,1,0,0,0,2,19,4,0.02039,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,52,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.02039,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,54,        if (divisor < 2) {,1,1,0,1,3,1,0,0,0,5,18,4,0.02039,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,58,        DurationField rangeField = field.getDurationField();,1,0,0,1,2,0,2,1,0,5,52,4,0.02039,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,59,        if (rangeField == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.02039,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,62,            iRangeField = new ScaledDurationField(,1,0,0,0,1,1,0,1,2,5,38,6,0.02039,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,66,        iDivisor = divisor;,2,0,0,0,0,0,0,0,1,2,19,4,0.02039,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,67,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,76,"        this(dividedField, dividedField.getType());",1,0,0,1,4,1,2,0,0,5,43,4,0.02039,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,77,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,87,"        super(dividedField.getWrappedField(), type);",1,0,0,1,4,1,2,0,1,6,44,3,0.02039,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,88,        iDivisor = dividedField.iDivisor;,3,0,0,0,0,0,0,0,1,2,33,4,0.02039,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,89,        iRangeField = dividedField.iDurationField;,3,0,0,0,0,0,0,0,1,2,42,4,0.02039,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,90,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,148,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.02039,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,158,        return iDivisor - 1;,1,1,0,0,0,1,0,0,0,3,20,4,0.02039,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,54,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.02039,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,55,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.02039,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,58,        if (!field.isSupported()) {,0,0,0,2,5,1,2,0,1,5,27,4,0.02039,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,61,        iField = field;,2,0,0,0,0,0,0,0,1,2,15,4,0.02039,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,70,        return iField;,1,0,0,0,0,1,0,0,0,2,14,4,0.02039,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,86,        return iField.getDurationField();,0,0,0,1,2,1,2,0,0,4,33,5,0.02039,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,47,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.02039,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,48,        if (scalar == 0 || scalar == 1) {,2,3,0,1,3,1,0,0,0,5,33,4,0.02039,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,51,        iScalar = scalar;,2,0,0,0,0,0,0,0,1,2,17,4,0.02039,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,16,52,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.02039,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,16,53,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.02039,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,16,56,        if (!field.isSupported()) {,0,0,0,2,5,1,2,0,1,5,27,4,0.02039,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,16,59,        iField = field;,2,0,0,0,0,0,0,0,1,2,15,4,0.02039,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,16,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,47,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.02039,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,48,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.02039,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,51,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.02039,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,66,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.02039,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,56,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.02039,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,58,        if (divisor < 2) {,1,1,0,1,3,1,0,0,0,5,18,4,0.02039,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,62,        DurationField unitField = field.getDurationField();,1,0,0,1,2,0,2,1,0,5,51,4,0.02039,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,63,        if (unitField == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.02039,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,66,            iDurationField = new ScaledDurationField(,1,0,0,0,1,1,0,1,2,5,41,6,0.02039,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,70,        iDivisor = divisor;,2,0,0,0,0,0,0,0,1,2,19,4,0.02039,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,72,        int i = field.getMinimumValue();,1,0,0,1,2,1,2,0,0,5,32,5,0.02039,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,73,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,6,5,0,2,6,1,0,0,0,5,59,5,0.02039,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,75,        int j = field.getMaximumValue();,1,0,0,1,2,1,2,0,0,5,32,5,0.02039,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,76,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,6,5,0,2,6,1,0,0,0,5,59,5,0.02039,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,78,        iMin = min;,2,0,0,0,0,0,0,0,1,2,11,4,0.02039,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,79,        iMax = max;,2,0,0,0,0,0,0,0,1,2,11,4,0.02039,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,80,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,182,        return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,4,0.02039,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,151,        LinkedDurationField(DurationFieldType type) {,2,0,0,1,3,0,0,1,0,4,45,3,0.02039,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,152,            super(type);,1,0,0,1,2,1,0,0,1,5,12,4,0.02039,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,153,        },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",7,1,0,2,6,1,2,0,0,6,100,4,0.02039,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",7,0,0,0,2,1,0,0,0,3,64,4,0.02039,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,59,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,73,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.02039,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,75,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.02039,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,79,        iOffset = offset;,2,0,0,0,0,0,0,0,1,2,17,4,0.02039,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,81,        if (minValue < (field.getMinimumValue() + offset)) {,2,2,0,3,7,1,2,0,0,6,52,4,0.02039,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,82,            iMin = field.getMinimumValue() + offset;,2,1,0,1,2,0,2,0,1,6,40,6,0.02039,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,86,        if (maxValue > (field.getMaximumValue() + offset)) {,2,2,0,3,7,1,2,0,0,6,52,4,0.02039,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,87,            iMax = field.getMaximumValue() + offset;,2,1,0,1,2,0,2,0,1,6,40,6,0.02039,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,91,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,174,        return iMin;,1,0,0,0,0,1,0,0,0,2,12,4,0.02039,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,183,        return iMax;,1,0,0,0,0,1,0,0,0,2,12,4,0.02039,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,45,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.02039,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,46,        if (field.getMinimumValue() != 0) {,0,1,0,2,5,1,2,0,0,5,35,4,0.02039,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,44,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.02039,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,38,    public static final DurationField INSTANCE = new MillisDurationField();,1,0,0,1,2,4,0,2,4,6,71,2,0.02039,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,71,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.02039,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,80,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,57,"        super(type, unit);",2,0,0,0,2,1,0,0,1,4,18,3,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,59,        if (!range.isPrecise()) {,0,0,0,2,5,1,2,0,1,5,25,4,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,63,        long rangeMillis = range.getUnitMillis();,1,0,0,1,2,1,2,0,0,5,41,5,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,64,        iRange = (int)(rangeMillis / getUnitMillis());,2,1,0,2,6,1,1,0,2,7,46,4,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,65,        if (iRange < 2) {,1,1,0,1,3,1,0,0,0,5,17,4,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,69,        iRangeField = range;,2,0,0,0,0,0,0,0,1,2,20,4,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,70,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,53,            field = cCache.get(type);,1,0,0,1,2,0,3,0,1,5,25,6,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,43,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,44,        iUnitMillis = unitMillis;,2,0,0,0,0,0,0,0,1,2,25,4,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,54,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.02039,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,63,        return iUnitMillis;,1,0,0,0,0,1,0,0,0,2,19,4,0.02039,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,55,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.02039,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,56,        iUnitMillis = unitMillis;,2,0,0,0,0,0,0,0,1,2,25,4,0.02039,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,57,        iDurationField = new LinkedDurationField(type.getDurationType());,1,0,0,2,4,1,2,1,2,7,65,4,0.02039,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,137,        return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,4,0,0,4,70,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,99,"    protected AssembledChronology(Chronology base, Object param) {",3,0,0,0,3,1,0,2,1,5,62,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,100,        iBase = base;,2,0,0,0,0,0,0,0,1,2,13,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,101,        iParam = param;,2,0,0,0,0,0,0,0,1,2,15,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,102,        setFields();,0,0,0,1,2,0,1,0,1,4,12,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,268,        return iYear;,1,0,0,0,0,1,0,0,0,2,13,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,308,        return iBase;,1,0,0,0,0,1,0,0,0,2,13,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,319,        Fields fields = new Fields();,1,0,0,1,2,1,0,2,1,6,29,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,320,        if (iBase != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,323,        assemble(fields);,0,0,0,1,2,0,2,0,1,4,17,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,6,1,0,1,4,1,0,0,2,6,65,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,6,1,0,1,4,1,0,0,2,6,66,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,6,1,0,1,4,1,0,0,2,6,66,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,6,1,0,1,4,1,0,0,2,6,64,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,6,1,0,1,4,1,0,0,2,6,67,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,332,            iDays      = (f = fields.days)      != null ? f : super.days();,6,1,0,1,4,1,0,0,2,6,63,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,6,1,0,1,4,1,0,0,2,6,64,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,6,1,0,1,4,1,0,0,2,6,68,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,6,1,0,1,4,1,0,0,2,6,65,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,336,            iYears     = (f = fields.years)     != null ? f : super.years();,6,1,0,1,4,1,0,0,2,6,64,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,6,1,0,1,4,1,0,0,2,6,68,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,6,1,0,1,4,1,0,0,2,6,63,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,6,1,0,1,4,1,0,0,2,6,91,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,6,1,0,1,4,1,0,0,2,6,88,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,6,1,0,1,4,1,0,0,2,6,91,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,6,1,0,1,4,1,0,0,2,6,88,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,6,1,0,1,4,1,0,0,2,6,89,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,6,1,0,1,4,1,0,0,2,6,88,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,6,1,0,1,4,1,0,0,2,6,86,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,6,1,0,1,4,1,0,0,2,6,91,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,6,1,0,1,4,1,0,0,2,6,90,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,6,1,0,1,4,1,0,0,2,6,95,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,6,1,0,1,4,1,0,0,2,6,89,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,6,1,0,1,4,1,0,0,2,6,86,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,6,1,0,1,4,1,0,0,2,6,87,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,6,1,0,1,4,1,0,0,2,6,86,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,6,1,0,1,4,1,0,0,2,6,91,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,6,1,0,1,4,1,0,0,2,6,85,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,6,1,0,1,4,1,0,0,2,6,94,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,6,1,0,1,4,1,0,0,2,6,88,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,361,            iYear               = (f = fields.year)               != null ? f : super.year();,6,1,0,1,4,1,0,0,2,6,81,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,6,1,0,1,4,1,0,0,2,6,86,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,6,1,0,1,4,1,0,0,2,6,90,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,6,1,0,1,4,1,0,0,2,6,89,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,365,            iEra                = (f = fields.era)                != null ? f : super.era();,6,1,0,1,4,1,0,0,2,6,80,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,369,        if (iBase == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,370,            flags = 0;,1,0,0,0,0,0,0,0,1,2,10,6,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,385,        iBaseFlags = flags;,2,0,0,0,0,0,0,0,1,2,19,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,386,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,131,"        super(base, param);",2,0,0,0,2,1,0,0,1,4,19,3,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,126,    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];,1,0,1,0,4,4,0,2,3,6,77,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,133,        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {,2,3,0,1,3,1,0,0,0,5,55,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,138,        iMinDaysInFirstWeek = minDaysInFirstWeek;,2,0,0,0,0,0,0,0,1,2,41,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,139,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,76,        cMillisField = MillisDurationField.INSTANCE;,3,0,0,0,0,0,0,0,1,2,44,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,77,        cSecondsField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,40,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,79,        cMinutesField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,40,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,81,        cHoursField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,38,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,83,        cHalfdaysField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,41,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,85,        cDaysField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,37,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,87,        cWeeksField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,38,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,90,        cMillisOfSecondField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,47,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,93,        cMillisOfDayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,44,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,96,        cSecondOfMinuteField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,47,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,99,        cSecondOfDayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,44,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,102,        cMinuteOfHourField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,45,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,105,        cMinuteOfDayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,44,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,108,        cHourOfDayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,42,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,111,        cHourOfHalfdayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,46,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,114,        cClockhourOfDayField = new ZeroIsMaxDateTimeField,1,0,0,0,0,1,0,1,2,4,49,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,117,        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField,1,0,0,0,0,1,0,1,2,4,53,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,120,        cHalfdayOfDayField = new HalfdayField();,1,0,0,1,2,1,0,1,2,6,40,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,121,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,241,        fields.millis = cMillisField;,3,0,0,0,0,0,0,0,1,2,29,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,242,        fields.seconds = cSecondsField;,3,0,0,0,0,0,0,0,1,2,31,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,243,        fields.minutes = cMinutesField;,3,0,0,0,0,0,0,0,1,2,31,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,244,        fields.hours = cHoursField;,3,0,0,0,0,0,0,0,1,2,27,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,245,        fields.halfdays = cHalfdaysField;,3,0,0,0,0,0,0,0,1,2,33,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,246,        fields.days = cDaysField;,3,0,0,0,0,0,0,0,1,2,25,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,247,        fields.weeks = cWeeksField;,3,0,0,0,0,0,0,0,1,2,27,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,249,        fields.millisOfSecond = cMillisOfSecondField;,3,0,0,0,0,0,0,0,1,2,45,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,250,        fields.millisOfDay = cMillisOfDayField;,3,0,0,0,0,0,0,0,1,2,39,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,251,        fields.secondOfMinute = cSecondOfMinuteField;,3,0,0,0,0,0,0,0,1,2,45,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,252,        fields.secondOfDay = cSecondOfDayField;,3,0,0,0,0,0,0,0,1,2,39,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,253,        fields.minuteOfHour = cMinuteOfHourField;,3,0,0,0,0,0,0,0,1,2,41,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,254,        fields.minuteOfDay = cMinuteOfDayField;,3,0,0,0,0,0,0,0,1,2,39,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,255,        fields.hourOfDay = cHourOfDayField;,3,0,0,0,0,0,0,0,1,2,35,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,256,        fields.hourOfHalfday = cHourOfHalfdayField;,3,0,0,0,0,0,0,0,1,2,43,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,257,        fields.clockhourOfDay = cClockhourOfDayField;,3,0,0,0,0,0,0,0,1,2,45,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,258,        fields.clockhourOfHalfday = cClockhourOfHalfdayField;,3,0,0,0,0,0,0,0,1,2,53,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,259,        fields.halfdayOfDay = cHalfdayOfDayField;,3,0,0,0,0,0,0,0,1,2,41,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,264,        fields.year = new BasicYearDateTimeField(this);,2,0,0,1,2,2,0,1,2,6,47,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,265,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);",4,0,0,0,2,2,0,1,2,5,67,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,268,        DateTimeField field = new OffsetDateTimeField(,1,0,0,0,1,1,0,2,1,5,46,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,270,        fields.centuryOfEra = new DividedDateTimeField(,2,0,0,0,1,1,0,1,2,5,47,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,273,        field = new RemainderDateTimeField(,1,0,0,0,1,1,0,1,2,5,35,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,275,        fields.yearOfCentury = new OffsetDateTimeField(,2,0,0,0,1,1,0,1,2,5,47,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,278,        fields.era = new GJEraDateTimeField(this);,2,0,0,1,2,2,0,1,2,6,42,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,279,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);",4,0,0,0,2,2,0,1,2,5,67,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,280,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);",4,0,0,0,2,2,0,1,2,5,72,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,281,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);",4,0,0,0,2,2,0,1,2,5,70,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,282,        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);,2,0,0,1,2,2,0,1,2,6,58,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,283,        fields.weekyear = new BasicWeekyearDateTimeField(this);,2,0,0,1,2,2,0,1,2,6,55,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,284,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);",4,0,0,0,2,2,0,1,2,5,81,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,286,        field = new RemainderDateTimeField(,1,0,0,0,1,1,0,1,2,5,35,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,288,        fields.weekyearOfCentury = new OffsetDateTimeField(,2,0,0,0,1,1,0,1,2,5,51,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,294,        fields.years = fields.year.getDurationField();,4,0,0,1,2,0,1,0,1,5,46,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,295,        fields.centuries = fields.centuryOfEra.getDurationField();,4,0,0,1,2,0,1,0,1,5,58,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,296,        fields.months = fields.monthOfYear.getDurationField();,4,0,0,1,2,0,1,0,1,5,54,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,297,        fields.weekyears = fields.weekyear.getDurationField();,4,0,0,1,2,0,1,0,1,5,54,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,298,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,50,abstract class BasicChronology extends AssembledChronology {,1,0,0,0,1,3,0,1,1,5,60,1,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,436,        Fields() {,1,0,0,1,3,0,0,0,0,3,10,3,0.02039,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,437,        },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,41,"        super(DateTimeFieldType.dayOfYear(), days);",1,0,0,1,4,1,2,0,1,6,43,3,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,42,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,43,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());",0,0,0,1,6,1,4,0,1,5,78,3,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,52,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,53,        iMax = iChronology.getMaxMonth();,1,0,0,1,2,0,2,0,1,5,33,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,54,        iLeapMonth = leapMonth;,2,0,0,0,0,0,0,0,1,2,23,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,55,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,16,37,"        super(chronology, 2);",1,0,0,0,2,1,0,0,1,4,21,3,0.02039,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,16,38,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);",1,0,0,1,4,1,2,0,1,6,49,3,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,43,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,750,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);",2,0,0,1,4,1,2,0,1,6,68,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,751,        },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());",0,0,0,1,6,1,4,0,1,5,70,3,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,46,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,119,        return iChronology.getMaxYear();,0,0,0,1,2,1,2,0,0,4,32,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,40,"        super(yearField, DateTimeFieldType.yearOfEra());",1,0,0,1,4,1,2,0,1,6,48,3,0.02039,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,41,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,93,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,97,        return getWrappedField().getMaximumValue();,0,0,0,1,4,1,2,0,1,5,43,5,0.02039,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,46,        super(DateTimeFieldType.era());,0,0,0,2,4,1,2,0,1,5,31,3,0.02039,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,47,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,16,45,"        super(DateTimeFieldType.dayOfWeek(), days);",1,0,0,1,4,1,2,0,1,6,43,3,0.02039,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,16,46,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,16,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,41,"        super(DateTimeFieldType.dayOfMonth(), days);",1,0,0,1,4,1,2,0,1,6,44,3,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,42,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,43,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());",0,0,0,1,6,1,4,0,1,5,74,3,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,45,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.02039,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,46,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,452,            return iUnitType;,1,0,0,0,0,1,0,0,0,2,17,5,0.02039,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,457,            return iRangeType;,1,0,0,0,0,1,0,0,0,2,18,5,0.02039,0,0
defect4j,time,org/joda/time/DateTimeField,16,33,public abstract class DateTimeField {,1,0,0,0,1,3,0,0,2,4,37,1,0.02038,0,0
defect4j,time,org/joda/time/DurationField,16,30,public abstract class DurationField implements Comparable<DurationField> {,1,0,0,0,1,4,0,2,2,5,74,1,0.02038,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,200,        return MINUTE_OF_HOUR_TYPE;,1,0,0,0,0,1,0,0,0,2,27,4,0.02038,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,227,        return CLOCKHOUR_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,29,4,0.02038,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,273,        return DAY_OF_MONTH_TYPE;,1,0,0,0,0,1,0,0,0,2,25,4,0.02038,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,327,        return YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,17,4,0.02038,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,70,    private UnsupportedDurationField(DurationFieldType type) {,2,0,0,1,3,1,0,1,1,6,58,2,0.02038,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,71,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.02038,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02038,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,49,        if (cCache == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.02038,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",1,0,0,1,2,1,0,3,2,6,69,6,0.02038,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,51,            field = null;,1,0,0,0,0,0,0,0,1,2,13,6,0.02038,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,55,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.02038,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,56,            field = new UnsupportedDurationField(type);,2,0,0,1,2,1,0,1,2,6,43,6,0.02038,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,57,"            cCache.put(type, field);",0,0,0,0,2,0,4,0,0,2,24,7,0.02038,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,59,        return field;,1,0,0,0,0,1,0,0,0,2,13,4,0.02038,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,2,4,0,1,4,1,2,0,1,7,68,4,0.02038,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,153,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,154,        iName = name;,2,0,0,0,0,0,0,0,1,2,13,4,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,155,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,73,    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,80,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,76,    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,88,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,79,    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,91,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,82,    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,92,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,85,    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,81,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,88,    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,88,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,91,    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,90,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,94,    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,89,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,97,    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,96,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,100,    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,85,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,103,    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,93,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,106,    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,88,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,110,    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,91,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,113,    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,92,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,116,    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,97,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,119,    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,93,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,122,    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,88,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,125,    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,90,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,128,    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,91,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,131,    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,90,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,134,    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,93,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,137,    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,90,2,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,140,    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,93,2,0.02037,0,0
defect4j,time,org/joda/time/DurationFieldType,16,141,        return HALFDAYS_TYPE;,1,0,0,0,0,1,0,0,0,2,21,4,0.02037,0,0
defect4j,time,org/joda/time/DurationFieldType,16,169,        return WEEKYEARS_TYPE;,1,0,0,0,0,1,0,0,0,2,22,4,0.02037,0,0
defect4j,time,org/joda/time/DurationFieldType,16,205,        return ERAS_TYPE;,1,0,0,0,0,1,0,0,0,2,17,4,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,444,            super(name);,1,0,0,1,2,1,0,0,1,5,12,4,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,445,            iOrdinal = ordinal;,2,0,0,0,0,0,0,0,1,2,19,5,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,446,            iUnitType = unitType;,2,0,0,0,0,0,0,0,1,2,21,5,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,447,            iRangeType = rangeType;,2,0,0,0,0,0,0,0,1,2,23,5,0.02037,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,448,        },0,0,0,0,1,0,0,0,0,1,1,2,0.02037,0,0
defect4j,time,org/joda/time/DurationFieldType,16,196,        return CENTURIES_TYPE;,1,0,0,0,0,1,0,0,0,2,22,4,0.02036,0,0
defect4j,time,org/joda/time/Chronology,16,63,public abstract class Chronology {,1,0,0,0,1,3,0,0,2,4,34,1,0.02028,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,54,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.02028,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,55,    },0,0,0,0,1,0,0,0,0,1,1,2,0.02028,0,0
defect4j,time,org/joda/time/DurationFieldType,16,278,            return (1 << iOrdinal);,1,1,0,1,2,1,0,0,0,5,23,6,0.02011,0,0
defect4j,time,org/joda/time/DateTimeZone,16,147,                        },0,0,0,0,1,0,0,0,0,1,1,2,0.02003,0,0
defect4j,time,org/joda/time/DateTimeZone,16,133,        DateTimeZone zone = cDefault;,2,0,0,0,0,0,0,1,0,2,29,4,0.02002,0,0
defect4j,time,org/joda/time/DateTimeZone,16,134,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.02002,0,0
defect4j,time,org/joda/time/DateTimeZone,16,135,            synchronized(DateTimeZone.class) {,0,0,0,1,3,2,0,1,0,4,34,8,0.02002,0,0
defect4j,time,org/joda/time/DateTimeZone,16,136,                zone = cDefault;,2,0,0,0,0,0,0,0,1,2,16,8,0.02002,0,0
defect4j,time,org/joda/time/DateTimeZone,16,137,                if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,8,0.02002,0,0
defect4j,time,org/joda/time/DateTimeZone,16,138,                    DateTimeZone temp = null;,1,0,0,0,0,0,0,1,0,2,25,10,0.02002,0,0
defect4j,time,org/joda/time/DateTimeZone,16,141,"                            String id = System.getProperty(""user.timezone"");",1,0,0,1,2,0,2,1,1,6,48,14,0.02002,0,0
defect4j,time,org/joda/time/DateTimeZone,16,142,                            if (id != null) {  // null check avoids stack overflow,1,1,0,1,3,1,0,0,0,5,54,14,0.02002,0,0
defect4j,time,org/joda/time/DateTimeZone,16,143,                                temp = forID(id);,1,0,0,1,2,0,2,0,2,5,17,16,0.02002,0,0
defect4j,time,org/joda/time/DateTimeZone,16,148,                        if (temp == null) {,1,1,0,1,3,1,0,0,0,5,19,12,0.02002,0,0
defect4j,time,org/joda/time/DateTimeZone,16,153,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.02002,0,0
defect4j,time,org/joda/time/DateTimeZone,16,154,                    if (temp == null) {,1,1,0,1,3,1,0,0,0,5,19,10,0.02002,0,0
defect4j,time,org/joda/time/DateTimeZone,16,157,                    cDefault = zone = temp;,3,0,0,0,0,0,0,0,2,2,23,10,0.02002,0,0
defect4j,time,org/joda/time/DateTimeZone,16,159,            },0,0,0,0,1,0,0,0,0,1,1,2,0.02002,0,0
defect4j,time,org/joda/time/DateTimeZone,16,161,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.02002,0,0
defect4j,time,org/joda/time/DurationFieldType,16,160,        return WEEKS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,4,0.01989,0,0
defect4j,time,org/joda/time/DurationFieldType,16,178,        return MONTHS_TYPE;,1,0,0,0,0,1,0,0,0,2,19,4,0.01987,0,0
defect4j,time,org/joda/time/DurationFieldType,16,187,        return YEARS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,4,0.01985,0,0
defect4j,time,org/joda/time/DurationFieldType,16,114,        return SECONDS_TYPE;,1,0,0,0,0,1,0,0,0,2,20,4,0.01982,0,0
defect4j,time,org/joda/time/DurationFieldType,16,123,        return MINUTES_TYPE;,1,0,0,0,0,1,0,0,0,2,20,4,0.01982,0,0
defect4j,time,org/joda/time/DurationFieldType,16,132,        return HOURS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,4,0.01982,0,0
defect4j,time,org/joda/time/DurationFieldType,16,105,        return MILLIS_TYPE;,1,0,0,0,0,1,0,0,0,2,19,4,0.01981,0,0
defect4j,time,org/joda/time/DurationFieldType,16,151,        return DAYS_TYPE;,1,0,0,0,0,1,0,0,0,2,17,4,0.0198,0,0
defect4j,time,org/joda/time/DurationFieldType,16,94,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,95,        iName = name;,2,0,0,0,0,0,0,0,1,2,13,4,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,96,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);",2,0,0,0,2,3,0,2,4,5,87,2,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);",2,0,0,0,2,3,0,2,4,5,102,2,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);",2,0,0,0,2,3,0,2,4,5,102,2,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);",2,0,0,0,2,3,0,2,4,5,90,2,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);",2,0,0,0,2,3,0,2,4,5,93,2,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);",2,0,0,0,2,3,0,2,4,5,90,2,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);",2,0,0,0,2,3,0,2,4,5,87,2,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);",2,0,0,0,2,3,0,2,4,5,99,2,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);",2,0,0,0,2,3,0,2,4,5,90,2,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);",2,0,0,0,2,3,0,2,4,5,96,2,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);",2,0,0,0,2,3,0,2,4,5,96,2,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);",2,0,0,0,2,3,0,2,4,5,93,2,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,259,            super(name);,1,0,0,1,2,1,0,0,1,5,12,4,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,260,            iOrdinal = ordinal;,2,0,0,0,0,0,0,0,1,2,19,5,0.01976,0,0
defect4j,time,org/joda/time/DurationFieldType,16,261,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01976,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,35,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,1,0,0,1,2,4,0,2,4,6,94,2,0.01931,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,37,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,0,0,0,3,0,1,3,4,80,2,0.01931,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,393,    static class SystemMillisProvider implements MillisProvider {,1,0,0,0,1,3,0,1,1,5,61,2,0.01931,0,0
defect4j,time,org/joda/time/DateTimeZone,16,212,            return zone;,1,0,0,0,0,1,0,0,0,2,12,6,0.01903,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,87,        super(zone.getID());,0,0,0,2,4,1,2,0,1,5,20,3,0.01903,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,84,    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];,2,1,0,0,4,3,0,2,2,6,63,2,0.01903,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,88,        iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,4,0.01903,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,89,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01903,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",1,0,0,1,2,0,2,0,2,5,67,6,0.01903,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,42,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01903,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,45,        if (i == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.01903,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,48,            cacheSize = 512; // (1 << 9),1,0,0,1,2,0,0,0,1,4,28,6,0.01903,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,61,        cInfoCacheMask = cacheSize - 1;,2,1,0,0,0,0,0,0,1,3,31,4,0.01903,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01903,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,68,        if (zone instanceof CachedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,41,5,0.01903,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,71,        return new CachedDateTimeZone(zone);,1,0,0,1,2,2,0,1,1,6,36,4,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",4,0,0,0,3,1,0,2,0,4,59,3,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,748,            iOfYear = ofYear;,2,0,0,0,0,0,0,0,1,2,17,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,749,            iNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,19,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,750,            iSaveMillis = saveMillis;,2,0,0,0,0,0,0,0,1,2,25,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,751,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0,0,0,1,10,3,7,1,2,6,78,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,504,        {,0,0,0,0,1,0,0,0,0,1,1,2,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,3,5,0,1,3,1,0,0,3,6,48,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,509,            iMode = mode;,2,0,0,0,0,0,0,0,1,2,13,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,510,            iMonthOfYear = monthOfYear;,2,0,0,0,0,0,0,0,1,2,27,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,511,            iDayOfMonth = dayOfMonth;,2,0,0,0,0,0,0,0,1,2,25,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,512,            iDayOfWeek = dayOfWeek;,2,0,0,0,0,0,0,0,1,2,23,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,513,            iAdvance = advanceDayOfWeek;,2,0,0,0,0,0,0,0,1,2,28,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,514,            iMillisOfDay = millisOfDay;,2,0,0,0,0,0,0,0,1,2,27,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,515,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,482,"            return new OfYear((char)in.readUnsignedByte(),",0,0,0,1,5,3,2,1,1,6,46,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1176,            super(id);,1,0,0,1,2,1,0,0,1,5,10,4,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1177,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1178,            iStartRecurrence = startRecurrence;,2,0,0,0,0,0,0,0,1,2,35,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1179,            iEndRecurrence = endRecurrence;,2,0,0,0,0,0,0,0,1,2,31,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1180,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1166,"            return new DSTZone(id, (int)readMillis(in), ",1,0,0,1,5,3,2,1,2,7,43,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,95,        if (in instanceof DataInput) {,1,0,0,1,3,2,0,1,0,5,30,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,98,"            return readFrom((DataInput)new DataInputStream(in), id);",1,0,0,1,6,2,2,2,2,7,56,6,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,110,        switch (in.readUnsignedByte()) {,0,0,0,2,5,1,2,0,0,4,32,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0,0,0,0,4,1,6,0,0,3,70,6,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,183,        int v = in.readUnsignedByte();,1,0,0,1,2,1,2,0,0,5,30,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,184,        switch (v >> 6) {,1,1,0,1,3,1,0,0,0,5,17,4,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,187,            v = (v << (32 - 6)) >> (32 - 6);,2,4,0,2,6,0,0,0,1,5,32,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,188,            return v * (30 * 60000L);,1,2,0,1,2,1,0,0,0,5,25,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,192,            v = (v << (32 - 6)) >> (32 - 30);,2,4,0,2,6,0,0,0,1,5,33,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,193,            v |= (in.readUnsignedByte()) << 16;,1,1,0,2,4,0,2,0,1,6,35,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,194,            v |= (in.readUnsignedByte()) << 8;,1,1,0,2,4,0,2,0,1,6,34,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,195,            v |= (in.readUnsignedByte());,1,0,0,2,4,0,2,0,1,5,29,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,196,            return v * 60000L;,1,1,0,0,0,1,0,0,0,3,18,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,2,4,0,3,10,2,0,0,0,5,46,6,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,201,            w |= (in.readUnsignedByte()) << 24;,1,1,0,2,4,0,2,0,1,6,35,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,202,            w |= (in.readUnsignedByte()) << 16;,1,1,0,2,4,0,2,0,1,6,35,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,203,            w |= (in.readUnsignedByte()) << 8;,1,1,0,2,4,0,2,0,1,6,34,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,204,            w |= (in.readUnsignedByte());,1,0,0,2,4,0,2,0,1,5,29,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,205,            return w * 1000L;,1,1,0,0,0,1,0,0,0,3,17,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,209,            return in.readLong();,0,0,0,1,2,1,2,0,0,4,21,6,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1500,            super(id);,1,0,0,1,2,1,0,0,1,5,10,4,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1501,            iTransitions = transitions;,2,0,0,0,0,0,0,0,1,2,27,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1502,            iWallOffsets = wallOffsets;,2,0,0,0,0,0,0,0,1,2,27,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1503,            iStandardOffsets = standardOffsets;,2,0,0,0,0,0,0,0,1,2,35,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1504,            iNameKeys = nameKeys;,2,0,0,0,0,0,0,0,1,2,21,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1505,            iTailZone = tailZone;,2,0,0,0,0,0,0,0,1,2,21,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1506,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1341,            int poolSize = in.readUnsignedShort();,1,0,0,1,2,1,2,0,0,5,38,6,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1342,            String[] pool = new String[poolSize];,1,0,1,0,4,1,0,2,0,5,37,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1343,            for (int i=0; i<poolSize; i++) {,4,1,0,1,3,2,0,0,1,6,32,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1344,                pool[i] = in.readUTF();,0,0,1,1,4,0,2,0,1,5,23,7,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1347,            int size = in.readInt();,1,0,0,1,2,1,2,0,0,5,24,6,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1348,            long[] transitions = new long[size];,1,0,1,0,4,3,0,0,0,4,36,6,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1349,            int[] wallOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,34,6,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1350,            int[] standardOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,38,6,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1351,            String[] nameKeys = new String[size];,1,0,1,0,4,1,0,2,0,5,37,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1353,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1354,                transitions[i] = readMillis(in);,0,0,1,1,4,0,2,0,2,5,32,7,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1355,                wallOffsets[i] = (int)readMillis(in);,0,0,1,1,6,1,2,0,2,6,37,7,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1356,                standardOffsets[i] = (int)readMillis(in);,0,0,1,1,6,1,2,0,2,6,41,7,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1359,                    if (poolSize < 256) {,1,1,0,1,3,1,0,0,0,5,21,9,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1360,                        index = in.readUnsignedByte();,1,0,0,1,2,0,2,0,1,5,30,11,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1364,                    nameKeys[i] = pool[index];,0,0,1,0,4,0,0,0,1,3,26,9,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1367,                },0,0,0,0,1,0,0,0,0,1,1,2,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1370,            DSTZone tailZone = null;,1,0,0,0,0,0,0,1,0,2,24,5,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1371,            if (in.readBoolean()) {,0,0,0,2,5,1,2,0,0,4,23,6,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1372,"                tailZone = DSTZone.readFrom(in, id);",1,0,0,0,2,0,4,0,1,4,36,7,0.01903,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1375,            return new PrecalculatedZone,0,0,0,0,0,2,0,1,1,3,28,5,0.01903,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,147,            return loadZoneData(id);,0,0,0,1,2,1,2,0,1,5,24,6,0.01903,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,224,        InputStream in = null;,1,0,0,0,0,0,0,1,0,2,22,4,0.01903,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,226,            in = openResource(id);,1,0,0,1,2,0,2,0,2,5,22,6,0.01903,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",1,0,0,0,2,0,4,1,0,4,55,6,0.01903,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",1,0,0,1,4,1,3,2,1,7,58,7,0.01903,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,229,            return tz;,1,0,0,0,0,1,0,0,0,2,10,6,0.01903,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,236,                if (in != null) {,1,1,0,1,3,1,0,0,0,5,17,8,0.01903,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,237,                    in.close();,0,0,0,1,2,0,2,0,0,3,11,11,0.01903,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,240,            },0,0,0,0,1,0,0,0,0,1,1,2,0.01903,0,0
defect4j,time,org/joda/time/DateTimeZone,16,204,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.01902,0,0
defect4j,time,org/joda/time/DateTimeZone,16,207,"        if (id.equals(""UTC"")) {",0,0,0,2,5,1,2,0,1,5,23,5,0.01902,0,0
defect4j,time,org/joda/time/DateTimeZone,16,210,        DateTimeZone zone = cProvider.getZone(id);,1,0,0,1,2,0,3,1,0,5,42,4,0.01902,0,0
defect4j,time,org/joda/time/DateTimeZone,16,211,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.01902,0,0
defect4j,time,org/joda/time/DateTimeZone,16,706,        return iID;,1,0,0,0,0,1,0,0,0,2,11,4,0.01896,0,0
defect4j,time,org/joda/time/DateTimeZone,16,689,    protected DateTimeZone(String id) {,2,0,0,1,3,1,0,1,1,6,35,2,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,690,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,693,        iID = id;,2,0,0,0,0,0,0,0,1,2,9,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,694,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,95,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",1,0,0,0,2,4,0,2,6,5,81,2,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,115,        setProvider0(null);,0,0,0,1,2,0,1,0,1,4,19,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,116,        setNameProvider0(null);,0,0,0,1,2,0,1,0,1,4,23,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,117,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,415,        if (provider == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,416,            provider = getDefaultProvider();,1,0,0,1,2,0,1,0,2,5,32,6,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,418,        Set<String> ids = provider.getAvailableIDs();,1,0,0,1,2,0,2,2,0,5,45,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,419,        if (ids == null || ids.size() == 0) {,1,3,0,2,5,1,2,0,0,6,37,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,423,"        if (!ids.contains(""UTC"")) {",0,0,0,2,5,1,2,0,2,5,27,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,426,"        if (!UTC.equals(provider.getZone(""UTC""))) {",0,0,0,3,7,1,4,0,2,5,43,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,429,        cProvider = provider;,2,0,0,0,0,0,0,0,1,2,21,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,430,        cAvailableIDs = ids;,2,0,0,0,0,0,0,0,1,2,20,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,431,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,443,        Provider provider = null;,1,0,0,0,0,0,0,1,0,2,25,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,446,            String providerClass =,1,0,0,0,0,0,0,1,0,2,22,6,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,448,            if (providerClass != null) {,1,1,0,1,3,1,0,0,0,5,28,6,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,458,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,460,        if (provider == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,462,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");",1,0,0,1,2,1,0,1,3,6,57,8,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,466,            },0,0,0,0,1,0,0,0,0,1,1,2,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,469,        if (provider == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,473,        return provider;,1,0,0,0,0,1,0,0,0,2,16,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,514,        if (nameProvider == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,515,            nameProvider = getDefaultNameProvider();,1,0,0,1,2,0,1,0,2,5,40,6,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,517,        cNameProvider = nameProvider;,2,0,0,0,0,0,0,0,1,2,29,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,518,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,529,        NameProvider nameProvider = null;,1,0,0,0,0,0,0,1,0,2,33,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,531,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");",1,0,0,1,2,0,2,1,1,6,85,6,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,532,            if (providerClass != null) {,1,1,0,1,3,1,0,0,0,5,28,6,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,542,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,544,        if (nameProvider == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,545,            nameProvider = new DefaultNameProvider();,1,0,0,1,2,1,0,1,2,6,41,6,0.01895,0,0
defect4j,time,org/joda/time/DateTimeZone,16,548,        return nameProvider;,1,0,0,0,0,1,0,0,0,2,20,4,0.01895,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,38,        super(id);,1,0,0,1,2,1,0,0,1,5,10,3,0.01895,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,39,        iNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,19,4,0.01895,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,40,        iWallOffset = wallOffset;,2,0,0,0,0,0,0,0,1,2,25,4,0.01895,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,41,        iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,4,0.01895,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01895,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,88,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.01895,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,89,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.01895,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,39,    public DefaultNameProvider() {,1,0,0,1,3,1,0,0,1,5,30,2,0.01895,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",1,0,0,1,2,1,1,7,2,7,89,2,0.01895,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,40,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01895,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,99,        return new HashMap(7);,0,0,0,1,2,2,0,1,1,5,22,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,82,"        this(resourcePath, null, false);",1,0,0,0,2,1,0,0,1,4,32,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,83,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,106,    {,0,0,0,0,1,0,0,0,0,1,1,2,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,107,        if (resourcePath == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,110,"        if (!resourcePath.endsWith(""/"")) {",0,0,0,2,5,1,2,0,2,5,34,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,111,            resourcePath += '/';,1,0,0,0,0,0,0,0,2,2,20,6,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,114,        iFileDir = null;,1,0,0,0,0,0,0,0,1,2,16,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,115,        iResourcePath = resourcePath;,2,0,0,0,0,0,0,0,1,2,29,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,117,        if (loader == null && !favorSystemLoader) {,2,2,0,1,3,1,0,0,1,6,43,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,118,            loader = getClass().getClassLoader();,1,0,0,1,4,0,2,0,2,5,37,6,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,121,        iLoader = loader;,2,0,0,0,0,0,0,0,1,2,17,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",1,0,0,2,4,0,2,0,4,5,60,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,124,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,136,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,140,        Object obj = iZoneInfoMap.get(id);,1,0,0,1,2,0,3,1,0,5,34,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,141,        if (obj == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,145,        if (id.equals(obj)) {,0,0,0,2,5,1,3,0,0,4,21,5,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,150,        if (obj instanceof SoftReference<?>) {,1,0,0,1,3,2,0,1,0,5,38,5,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,152,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,2,0,0,1,2,0,0,4,0,4,68,6,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,153,            DateTimeZone tz = ref.get();,1,0,0,1,2,0,2,1,0,5,28,6,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,154,            if (tz != null) {,1,1,0,1,3,1,0,0,0,5,17,6,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,155,                return tz;,1,0,0,0,0,1,0,0,0,2,10,8,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,174,        return new TreeSet<String>(iZoneInfoMap.keySet());,0,0,0,2,4,2,2,2,1,6,50,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,196,        if (iFileDir != null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,199,            String path = iResourcePath.concat(name);,1,0,0,1,2,0,3,1,0,5,41,6,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,200,            if (iLoader != null) {,1,1,0,1,3,1,0,0,0,5,22,6,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,201,                in = iLoader.getResourceAsStream(path);,1,0,0,1,2,0,3,0,1,5,39,8,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,205,            if (in == null) {,1,1,0,1,3,1,0,0,0,5,17,6,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,214,        return in;,1,0,0,0,0,1,0,0,0,2,10,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",1,0,0,1,2,1,0,6,1,6,66,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,253,        DataInputStream din = new DataInputStream(in);,2,0,0,1,2,1,0,2,1,6,46,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,255,"            readZoneInfoMap(din, map);",0,0,0,0,2,0,3,0,1,3,26,6,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,258,                din.close();,0,0,0,1,2,0,2,0,0,3,12,9,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,260,            },0,0,0,0,1,0,0,0,0,1,1,2,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",2,0,0,1,4,1,2,2,2,7,66,5,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,263,        return map;,1,0,0,0,0,1,0,0,0,2,11,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,274,        int size = din.readUnsignedShort();,1,0,0,1,2,1,2,0,0,5,35,5,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,275,        String[] pool = new String[size];,1,0,1,0,4,1,0,2,0,5,33,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,276,        for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,277,            pool[i] = din.readUTF().intern();,0,0,1,1,6,0,3,0,1,5,33,6,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,281,        size = din.readUnsignedShort();,1,0,0,1,2,0,2,0,1,5,31,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,282,        for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,4,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0,0,1,1,10,0,6,0,0,4,72,9,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,287,            },0,0,0,0,1,0,0,0,0,1,1,2,0.01895,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,289,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01895,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,617,"                    prev = chrono.year().add(prev, -1);",1,0,0,1,4,0,4,0,2,5,35,9,0.01867,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",1,0,0,1,4,0,5,0,1,5,52,9,0.01867,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",1,0,0,0,2,0,3,0,2,4,43,9,0.01867,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,620,"                    prev = setDayOfWeek(chrono, prev);",1,0,0,0,2,0,3,0,2,4,34,9,0.01867,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,593,            } else if (iMode == 's') {,1,1,0,1,4,2,0,0,1,6,26,6,0.01804,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,596,                offset = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.01804,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,180,            if (isLeapYear(thisYear)) {,0,0,0,2,5,1,2,0,1,5,27,6,0.01802,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0,0,0,0,2,1,5,0,0,3,61,6,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,591,            if (iMode == 'w') {,1,1,0,1,3,1,0,0,1,6,19,5,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,600,            instant += offset;,2,0,0,0,0,0,0,0,1,2,18,5,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,602,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",1,0,0,1,4,1,5,0,0,5,60,6,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,605,"            prev = chrono.millisOfDay().set(prev, 0);",1,0,0,1,4,0,4,0,1,5,41,5,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",1,0,0,1,4,0,5,0,1,5,52,5,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,607,"            prev = setDayOfMonthPrevious(chrono, prev);",1,0,0,0,2,0,3,0,2,4,43,5,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,609,            if (iDayOfWeek == 0) {,1,1,0,1,3,1,0,0,0,5,22,5,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,615,"                prev = setDayOfWeek(chrono, prev);",1,0,0,0,2,0,3,0,2,4,34,7,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,616,                if (prev >= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,625,            return prev - offset;,2,1,0,0,0,1,0,0,0,3,21,5,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,691,"                prev = setDayOfMonth(chrono, prev);",1,0,0,0,2,0,3,0,2,4,35,7,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,701,            },0,0,0,0,1,0,0,0,0,1,1,2,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,702,            return prev;,1,0,0,0,0,1,0,0,0,2,12,5,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1241,            instant++;,1,0,0,0,0,0,0,0,1,2,10,5,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1243,            int standardOffset = iStandardOffset;,2,0,0,0,0,1,0,0,0,2,37,6,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1244,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,0,1,0,2,46,5,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1245,            Recurrence endRecurrence = iEndRecurrence;,2,0,0,0,0,0,0,1,0,2,42,5,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1250,                start = startRecurrence.previous,1,0,0,0,0,0,2,0,1,3,32,7,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1252,                if (instant < 0 && start > 0) {,2,3,0,1,3,1,0,0,0,5,31,7,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1262,            },0,0,0,0,1,0,0,0,0,1,1,2,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1265,                end = endRecurrence.previous,1,0,0,0,0,0,2,0,1,3,28,7,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1267,                if (instant < 0 && end > 0) {,2,3,0,1,3,1,0,0,0,5,29,7,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1277,            },0,0,0,0,1,0,0,0,0,1,1,2,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1279,            return ((start > end) ? start : end) - 1;,4,2,0,2,4,1,0,0,0,5,41,5,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1606,                long prev = iTailZone.previousTransition(instant);,1,0,0,1,2,1,3,0,0,5,50,8,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1607,                if (prev < instant) {,2,1,0,1,3,1,0,0,0,5,21,7,0.01793,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1608,                    return prev;,1,0,0,0,0,1,0,0,0,2,12,9,0.01793,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,551,                    builder.appendLiteral(sub.charAt(0));,0,0,0,2,4,0,4,0,0,3,37,10,0.01732,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,613,                    i--;,1,0,0,0,0,0,0,0,1,2,4,11,0.01724,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,614,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.01724,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,549,                String sub = token.substring(1);,1,0,0,1,2,0,2,1,0,5,32,7,0.01717,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,550,                if (sub.length() == 1) {,0,1,0,2,5,1,2,0,0,5,24,7,0.01717,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,596,            buf.append('\'');,0,0,0,1,2,0,2,0,1,4,17,7,0.01717,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,598,            boolean inLiteral = false;,1,0,0,0,0,1,0,0,1,3,26,7,0.01717,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,600,            for (; i < length; i++) {,3,1,0,1,3,1,0,0,1,6,25,6,0.01717,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,601,                c = pattern.charAt(i);,1,0,0,1,2,0,3,0,1,5,22,8,0.01717,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,603,                if (c == '\'') {,1,1,0,1,3,1,0,0,1,6,16,8,0.01717,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,611,                } else if (!inLiteral &&,1,1,0,0,2,2,0,0,1,5,24,9,0.01717,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,616,                    buf.append(c);,0,0,0,1,2,0,3,0,0,3,14,12,0.01717,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,586,                char peek = pattern.charAt(i + 1);,2,1,0,1,2,1,2,0,0,6,34,9,0.01613,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,587,                if (peek == c) {,2,1,0,1,3,1,0,0,0,5,16,8,0.01613,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,188,                if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,8,0.01452,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1221,            return position + 1;,1,1,0,0,0,1,0,0,0,3,20,5,0.01418,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1206,            char a = text.charAt(position);,1,0,0,1,2,1,3,0,0,5,31,6,0.01307,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1207,            char b = iValue;,2,0,0,0,0,1,0,0,0,2,16,6,0.01307,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1209,            if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,5,0.01307,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1202,            if (position >= text.length()) {,1,1,0,2,5,1,2,0,0,6,32,5,0.01294,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,551,            } else if (iMode == 's') {,1,1,0,1,4,2,0,0,1,6,26,6,0.01264,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,554,                offset = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.01264,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,709,"                instant = chrono.dayOfMonth().set(instant, 1);",1,0,0,1,4,0,4,0,1,5,46,7,0.01264,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,710,"                instant = chrono.monthOfYear().add(instant, 1);",1,0,0,1,4,0,4,0,1,5,47,7,0.01264,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",1,0,0,1,4,0,5,0,1,5,56,7,0.01264,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,725,                    if (daysToAdd > 0) {,1,1,0,1,3,1,0,0,0,5,20,9,0.01264,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,726,                        daysToAdd -= 7;,1,0,0,0,0,0,0,0,1,2,15,11,0.01264,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,1,1,0,1,4,1,3,0,1,7,73,5,0.01257,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1543,            return iTailZone.getOffset(instant);,0,0,0,1,2,1,3,0,0,4,36,6,0.01257,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1304,            int standardOffset = iStandardOffset;,2,0,0,0,0,1,0,0,0,2,37,6,0.01247,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1305,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,0,1,0,2,46,5,0.01247,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1306,            Recurrence endRecurrence = iEndRecurrence;,2,0,0,0,0,0,0,1,0,2,42,5,0.01247,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1311,                start = startRecurrence.next,1,0,0,0,0,0,2,0,1,3,28,7,0.01247,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1319,            },0,0,0,0,1,0,0,0,0,1,1,2,0.01247,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1322,                end = endRecurrence.next,1,0,0,0,0,0,2,0,1,3,24,7,0.01247,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1330,            },0,0,0,0,1,0,0,0,0,1,1,2,0.01247,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1332,            return (start > end) ? startRecurrence : endRecurrence;,4,1,0,1,2,1,0,0,0,5,55,6,0.01247,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2688,            DateTimeParser[] elements = iParsers;,2,0,0,0,2,0,0,1,0,3,37,5,0.01238,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2689,            if (elements == null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.01238,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2693,            int len = elements.length;,3,0,0,0,0,1,0,0,0,2,26,6,0.01238,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2694,            for (int i=0; i<len && position >= 0; i++) {,5,3,0,1,3,2,0,0,1,6,44,5,0.01238,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2695,"                position = elements[i].parseInto(bucket, text, position);",1,0,1,0,4,0,4,0,1,5,57,7,0.01238,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2697,            return position;,1,0,0,0,0,1,0,0,0,2,16,5,0.01238,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,575,"                    next = chrono.year().add(next, 1);",1,0,0,1,4,0,4,0,1,5,34,9,0.0121,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",1,0,0,1,4,0,5,0,1,5,52,9,0.0121,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,577,"                    next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,9,0.0121,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,578,"                    next = setDayOfWeek(chrono, next);",1,0,0,0,2,0,3,0,2,4,34,9,0.0121,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1199,            int standardOffset = iStandardOffset;,2,0,0,0,0,1,0,0,0,2,37,6,0.01208,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1200,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,0,1,0,2,46,5,0.01208,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1201,            Recurrence endRecurrence = iEndRecurrence;,2,0,0,0,0,0,0,1,0,2,42,5,0.01208,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1206,                start = startRecurrence.next,1,0,0,0,0,0,2,0,1,3,28,7,0.01208,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1208,                if (instant > 0 && start < 0) {,2,3,0,1,3,1,0,0,0,5,31,7,0.01208,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1218,            },0,0,0,0,1,0,0,0,0,1,1,2,0.01208,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1221,                end = endRecurrence.next,1,0,0,0,0,0,2,0,1,3,24,7,0.01208,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1223,                if (instant > 0 && end < 0) {,2,3,0,1,3,1,0,0,0,5,29,7,0.01208,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1233,            },0,0,0,0,1,0,0,0,0,1,1,2,0.01208,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1235,            return (start > end) ? end : start;,4,1,0,1,2,1,0,0,0,5,35,6,0.01208,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1579,            long end = transitions[transitions.length - 1];,3,1,1,0,2,1,0,0,0,5,47,6,0.01208,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1580,            if (instant < end) {,2,1,0,1,3,1,0,0,0,5,20,5,0.01208,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1583,            return iTailZone.nextTransition(instant);,0,0,0,1,2,1,3,0,0,4,41,6,0.01208,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,573,"                next = setDayOfWeek(chrono, next);",1,0,0,0,2,0,3,0,2,4,34,7,0.01206,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,574,                if (next <= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.01206,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,1,0,0,1,4,1,4,0,0,5,48,6,0.01206,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,3,1,0,0,0,1,0,0,0,3,39,6,0.01206,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,719,            if (daysToAdd != 0) {,1,1,0,1,3,1,0,0,0,5,21,5,0.01206,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,720,                if (iAdvance) {,1,0,0,1,3,1,0,0,0,4,15,7,0.01206,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",1,0,0,1,4,0,5,0,1,5,53,7,0.01206,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,731,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.01206,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0,0,0,0,2,1,5,0,0,3,57,6,0.01205,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,776,            return iSaveMillis;,1,0,0,0,0,1,0,0,0,2,19,5,0.01205,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,549,            if (iMode == 'w') {,1,1,0,1,3,1,0,0,1,6,19,5,0.01205,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,558,            instant += offset;,2,0,0,0,0,0,0,0,1,2,18,5,0.01205,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,560,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.01205,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",1,0,0,1,4,1,5,0,0,5,60,6,0.01205,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,563,"            next = chrono.millisOfDay().set(next, 0);",1,0,0,1,4,0,4,0,1,5,41,5,0.01205,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",1,0,0,1,4,0,5,0,1,5,52,5,0.01205,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,565,"            next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,5,0.01205,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,567,            if (iDayOfWeek == 0) {,1,1,0,1,3,1,0,0,0,5,22,5,0.01205,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,583,            return next - offset;,2,1,0,0,0,1,0,0,0,3,21,5,0.01205,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,672,"                next = setDayOfMonth(chrono, next);",1,0,0,0,2,0,3,0,2,4,35,7,0.01205,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,682,            },0,0,0,0,1,0,0,0,0,1,1,2,0.01205,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,683,            return next;,1,0,0,0,0,1,0,0,0,2,12,5,0.01205,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,706,            if (iDayOfMonth >= 0) {,1,1,0,1,3,1,0,0,0,5,23,5,0.01205,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,713,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.01205,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,253,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.012,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,114,            yearToUse = thisYear + (monthToUse / iMax);,4,2,0,1,2,0,0,0,1,5,43,6,0.01194,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,115,            monthToUse = (monthToUse % iMax) + 1;,3,2,0,1,2,0,0,0,1,5,37,6,0.01194,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,98,        long timePart = iChronology.getMillisOfDay(instant);,1,0,0,1,2,1,3,0,0,5,52,5,0.01186,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,103,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.01186,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",1,0,0,0,2,1,4,0,0,4,62,5,0.01186,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,112,        int monthToUse = thisMonth - 1 + months;,3,2,0,0,0,1,0,0,0,3,40,5,0.01186,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,113,        if (monthToUse >= 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.01186,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",1,0,0,0,2,1,5,0,0,4,71,5,0.01186,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",1,0,0,0,2,1,4,0,0,4,67,5,0.01186,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,138,        if (dayToUse > maxDay) {,2,1,0,1,3,1,0,0,0,5,24,4,0.01186,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,144,        long datePart =,1,0,0,0,0,1,0,0,0,2,15,5,0.01186,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,146,        return datePart + timePart;,2,1,0,0,0,1,0,0,0,3,27,4,0.01186,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,92,        if (months == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0118,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,61,        int thisYear = get(instant);,1,0,0,1,2,1,2,0,1,6,28,5,0.01157,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",1,0,0,0,2,1,4,0,0,4,50,5,0.01157,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,63,"        return set(instant, newYear);",0,0,0,0,2,1,3,0,1,4,29,4,0.01157,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,58,        if (years == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.01155,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1367,            return iMaxParsedDigits;,1,0,0,0,0,1,0,0,0,2,24,5,0.01127,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,535,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,4,1,0,0,0,0,0,0,1,3,63,6,0.01125,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,544,        return 1 + (int) ((daysSince19700101 + 3) % 7);,1,3,0,2,6,2,0,0,0,5,47,4,0.01125,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,117,"        return FieldUtils.safeAdd(instant, value);",0,0,0,0,2,1,4,0,0,3,42,5,0.0111,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,70,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.01055,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,64,        int sum = val1 + val2;,3,1,0,0,0,1,0,0,0,3,22,5,0.01053,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,4,5,0,2,7,1,0,0,0,5,45,4,0.01053,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,104,        long addition = value * iUnitMillis;  // safe,3,1,0,0,0,1,0,0,0,3,45,5,0.01032,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,105,"        return FieldUtils.safeAdd(instant, addition);",0,0,0,0,2,1,4,0,0,3,45,5,0.01032,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,82,        long sum = val1 + val2;,3,1,0,0,0,1,0,0,0,3,23,5,0.00918,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,4,5,0,2,7,1,0,0,0,5,45,4,0.00918,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,88,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.00918,0,0
defect4j,time,org/joda/time/JodaTimePermission,16,57,        super(name);,1,0,0,1,2,1,0,0,1,5,12,3,0.0,0,0
defect4j,time,org/joda/time/JodaTimePermission,16,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1284,        Stub(String id) {,2,0,0,1,3,0,0,1,0,4,17,3,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1285,            iID = id;,2,0,0,0,0,0,0,0,1,2,9,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1286,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1289,            out.writeUTF(iID);,0,0,0,1,2,0,3,0,0,3,18,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1290,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1293,            iID = in.readUTF();,1,0,0,1,2,0,2,0,1,5,19,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1294,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1297,            return forID(iID);,0,0,0,1,2,1,2,0,1,5,18,5,0.0,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,69,        } else if (min == skip + 1) {,2,2,0,1,4,2,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,70,            iMinValue = skip;,2,0,0,0,0,0,0,0,1,2,17,7,0.0,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,72,            iMinValue = min;,2,0,0,0,0,0,0,0,1,2,16,7,0.0,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,79,        int value = super.get(millis);,3,0,0,1,2,2,0,0,0,4,30,5,0.0,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,80,        if (value < iSkip) {,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,81,            value++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,83,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/SkipUndoDateTimeField,16,99,        return getType().getField(iChronology);,0,0,0,1,4,1,3,0,1,5,39,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,64,"            throw new IllegalArgumentException(""The field must not be null"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,76,        return iField;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,84,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,92,        return iField.isLenient();,0,0,0,1,2,1,2,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,100,"        return iField.getAsText(instant, locale);",0,0,0,0,2,1,4,0,0,3,41,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,104,        return iField.getAsText(instant);,0,0,0,1,2,1,3,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,108,"        return iField.getAsText(partial, fieldValue, locale);",0,0,0,0,2,1,5,0,0,3,53,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,112,"        return iField.getAsText(partial, locale);",0,0,0,0,2,1,4,0,0,3,41,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,116,"        return iField.getAsText(fieldValue, locale);",0,0,0,0,2,1,4,0,0,3,44,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,120,"        return iField.getAsShortText(instant, locale);",0,0,0,0,2,1,4,0,0,3,46,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,124,        return iField.getAsShortText(instant);,0,0,0,1,2,1,3,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,128,"        return iField.getAsShortText(partial, fieldValue, locale);",0,0,0,0,2,1,5,0,0,3,58,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,132,"        return iField.getAsShortText(partial, locale);",0,0,0,0,2,1,4,0,0,3,46,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,136,"        return iField.getAsShortText(fieldValue, locale);",0,0,0,0,2,1,4,0,0,3,49,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,140,"        return iField.add(instant, value);",0,0,0,0,2,1,4,0,0,3,34,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,144,"        return iField.add(instant, value);",0,0,0,0,2,1,4,0,0,3,34,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,148,"        return iField.add(instant, fieldIndex, values, valueToAdd);",0,0,0,0,2,1,6,0,0,3,59,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,152,"        return iField.addWrapPartial(instant, fieldIndex, values, valueToAdd);",0,0,0,0,2,1,6,0,0,3,70,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,156,"        return iField.addWrapField(instant, value);",0,0,0,0,2,1,4,0,0,3,43,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,160,"        return iField.addWrapField(instant, fieldIndex, values, valueToAdd);",0,0,0,0,2,1,6,0,0,3,68,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,164,"        return iField.getDifference(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,63,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,168,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,69,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,176,"        return iField.set(instant, text, locale);",0,0,0,0,2,1,5,0,0,3,41,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,180,"        return iField.set(instant, text);",0,0,0,0,2,1,4,0,0,3,33,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,184,"        return iField.set(instant, fieldIndex, values, newValue);",0,0,0,0,2,1,6,0,0,3,57,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,188,"        return iField.set(instant, fieldIndex, values, text, locale);",0,0,0,0,2,1,7,0,0,3,61,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,200,        return iField.isLeap(instant);,0,0,0,1,2,1,3,0,0,4,30,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,204,        return iField.getLeapAmount(instant);,0,0,0,1,2,1,3,0,0,4,37,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,216,        return iField.getMinimumValue(instant);,0,0,0,1,2,1,3,0,0,4,39,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,220,        return iField.getMinimumValue(instant);,0,0,0,1,2,1,3,0,0,4,39,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,224,"        return iField.getMinimumValue(instant, values);",0,0,0,0,2,1,4,0,0,3,47,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,232,        return iField.getMaximumValue(instant);,0,0,0,1,2,1,3,0,0,4,39,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,236,        return iField.getMaximumValue(instant);,0,0,0,1,2,1,3,0,0,4,39,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,240,"        return iField.getMaximumValue(instant, values);",0,0,0,0,2,1,4,0,0,3,47,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,244,        return iField.getMaximumTextLength(locale);,0,0,0,1,2,1,3,0,0,4,43,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,248,        return iField.getMaximumShortTextLength(locale);,0,0,0,1,2,1,3,0,0,4,48,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,252,        return iField.roundFloor(instant);,0,0,0,1,2,1,3,0,0,4,34,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,256,        return iField.roundCeiling(instant);,0,0,0,1,2,1,3,0,0,4,36,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,260,        return iField.roundHalfFloor(instant);,0,0,0,1,2,1,3,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,264,        return iField.roundHalfCeiling(instant);,0,0,0,1,2,1,3,0,0,4,40,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,268,        return iField.roundHalfEven(instant);,0,0,0,1,2,1,3,0,0,4,37,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,272,        return iField.remainder(instant);,0,0,0,1,2,1,3,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/field/DelegatedDateTimeField,16,276,"        return (""DateTimeField["" + getName() + ']');",0,1,0,2,6,1,1,0,3,6,44,5,0.0,0,0
defect4j,time,org/joda/time/DurationField,16,209,        if (value == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,16,210,"            return subtract(instant, (long) value);",1,0,0,1,4,2,2,0,1,6,39,6,0.0,0,0
defect4j,time,org/joda/time/DurationField,16,212,"        return add(instant, -value);",1,0,0,0,2,1,2,0,2,5,28,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,16,224,        if (value == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,16,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/DurationField,16,227,"        return add(instant, -value);",1,0,0,0,2,1,2,0,2,5,28,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,378,        return iName;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,410,        return getField(chronology).isSupported();,0,0,0,1,4,1,3,0,1,5,42,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,419,        return getName();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,41,public abstract class DateTimeFieldType implements Serializable {,1,0,0,0,1,4,0,1,2,5,65,1,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,52,"            throw new IllegalArgumentException(""The type must not be null"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,62,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,94,"        return getAsText(get(instant), locale);",0,0,0,1,4,1,4,0,2,5,39,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,106,"        return getAsText(instant, null);",0,0,0,0,2,1,2,0,1,4,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,121,"        return getAsText(fieldValue, locale);",0,0,0,0,2,1,3,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,136,"        return getAsText(partial, partial.get(getType()), locale);",0,0,0,2,6,1,6,0,2,5,58,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,153,        return Integer.toString(fieldValue);,0,0,0,1,2,1,3,0,0,4,36,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,168,"        return getAsShortText(get(instant), locale);",0,0,0,1,4,1,4,0,2,5,44,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,180,"        return getAsShortText(instant, null);",0,0,0,0,2,1,2,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,195,"        return getAsShortText(fieldValue, locale);",0,0,0,0,2,1,3,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,210,"        return getAsShortText(partial, partial.get(getType()), locale);",0,0,0,2,6,1,6,0,2,5,63,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,227,"        return getAsText(fieldValue, locale);",0,0,0,0,2,1,3,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,267,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,298,        if (valueToAdd == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,299,            return values;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,304,        DateTimeField nextField = null;,1,0,0,0,0,0,0,1,0,2,31,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,306,        while (valueToAdd > 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,307,"            int max = getMaximumValue(instant, values);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,308,            long proposed = values[fieldIndex] + valueToAdd;,2,1,1,0,2,1,0,0,0,5,48,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,309,            if (proposed <= max) {,2,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,310,                values[fieldIndex] = (int) proposed;,1,0,1,1,4,1,0,0,1,6,36,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,311,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,313,            if (nextField == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,314,                if (fieldIndex == 0) {,1,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0,0,0,1,2,3,0,1,2,5,69,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,317,                nextField = instant.getField(fieldIndex - 1);,2,1,0,1,2,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0,1,0,2,11,1,5,0,1,6,82,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0,0,0,1,2,3,0,1,2,5,61,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,2,2,1,1,4,0,0,0,1,6,74,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",2,1,0,0,2,0,4,0,1,5,90,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0,0,1,0,4,1,3,0,2,5,83,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,326,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,327,        while (valueToAdd < 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,328,"            int min = getMinimumValue(instant, values);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,329,            long proposed = values[fieldIndex] + valueToAdd;,2,1,1,0,2,1,0,0,0,5,48,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,330,            if (proposed >= min) {,2,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,331,                values[fieldIndex] = (int) proposed;,1,0,1,1,4,1,0,0,1,6,36,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,332,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,334,            if (nextField == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,335,                if (fieldIndex == 0) {,1,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0,0,0,1,2,3,0,1,2,5,69,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,338,                nextField = instant.getField(fieldIndex - 1);,2,1,0,1,2,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,339,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0,1,0,2,11,1,5,0,1,6,82,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0,0,0,1,2,3,0,1,2,5,61,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,343,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,2,2,1,1,4,0,0,0,1,6,74,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",2,1,0,0,2,0,4,0,2,5,98,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0,0,1,0,4,1,3,0,2,5,88,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,346,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0,0,1,0,4,1,4,0,1,5,87,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,379,        if (valueToAdd == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,380,            return values;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,385,        DateTimeField nextField = null;,1,0,0,0,0,0,0,1,0,2,31,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,387,        while (valueToAdd > 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,388,"            int max = getMaximumValue(instant, values);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,389,            long proposed = values[fieldIndex] + valueToAdd;,2,1,1,0,2,1,0,0,0,5,48,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,390,            if (proposed <= max) {,2,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,391,                values[fieldIndex] = (int) proposed;,1,0,1,1,4,1,0,0,1,6,36,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,392,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,394,            if (nextField == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,395,                if (fieldIndex == 0) {,1,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,396,                    valueToAdd -= (max + 1) - values[fieldIndex];,2,2,1,1,4,0,0,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,397,"                    values[fieldIndex] = getMinimumValue(instant, values);",0,0,1,0,4,0,3,0,2,4,54,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,398,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,400,                nextField = instant.getField(fieldIndex - 1);,2,1,0,1,2,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,402,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0,1,0,2,11,1,5,0,1,6,82,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0,0,0,1,2,3,0,1,2,5,61,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,406,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,2,2,1,1,4,0,0,0,1,6,74,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",2,1,0,0,2,0,4,0,1,5,101,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0,0,1,0,4,1,3,0,2,5,83,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,409,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,410,        while (valueToAdd < 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,411,"            int min = getMinimumValue(instant, values);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,412,            long proposed = values[fieldIndex] + valueToAdd;,2,1,1,0,2,1,0,0,0,5,48,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,413,            if (proposed >= min) {,2,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,414,                values[fieldIndex] = (int) proposed;,1,0,1,1,4,1,0,0,1,6,36,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,415,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,417,            if (nextField == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,418,                if (fieldIndex == 0) {,1,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,419,                    valueToAdd -= (min - 1) - values[fieldIndex];,2,2,1,1,4,0,0,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,420,"                    values[fieldIndex] = getMaximumValue(instant, values);",0,0,1,0,4,0,3,0,2,4,54,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,421,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,423,                nextField = instant.getField(fieldIndex - 1);,2,1,0,1,2,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,424,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0,1,0,2,11,1,5,0,1,6,82,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0,0,0,1,2,3,0,1,2,5,61,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,428,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,2,2,1,1,4,0,0,0,1,6,74,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",2,1,0,0,2,0,4,0,2,5,109,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0,0,1,0,4,1,3,0,2,5,88,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,431,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0,0,1,0,4,1,4,0,1,5,87,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,461,        int current = get(instant);,1,0,0,1,2,1,2,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,462,        int wrapped = FieldUtils.getWrappedValue,1,0,0,0,0,1,2,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,464,"        return set(instant, wrapped);",0,0,0,0,2,1,3,0,1,4,29,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,495,        int current = values[fieldIndex];,1,0,1,0,2,1,0,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,496,        int wrapped = FieldUtils.getWrappedValue,1,0,0,0,0,1,2,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields",0,0,0,0,2,1,5,0,1,4,76,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,75,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,81,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));",0,0,0,0,6,1,9,0,2,4,113,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,586,        values[fieldIndex] = newValue;,1,0,1,0,2,0,0,0,1,4,30,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,589,        for (int i = fieldIndex + 1; i < partial.size(); i++) {,4,2,0,2,5,2,2,0,1,7,55,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,590,            DateTimeField field = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,42,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,591,"            if (values[i] > field.getMaximumValue(partial, values)) {",0,1,1,0,7,1,4,0,0,5,57,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,592,"                values[i] = field.getMaximumValue(partial, values);",0,0,1,0,4,0,4,0,1,4,51,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,594,"            if (values[i] < field.getMinimumValue(partial, values)) {",0,1,1,0,7,1,4,0,0,5,57,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,595,"                values[i] = field.getMinimumValue(partial, values);",0,0,1,0,4,0,4,0,1,4,51,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,598,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,618,"        int value = convertText(text, locale);",1,0,0,0,2,1,3,0,1,5,38,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,619,"        return set(instant, value);",0,0,0,0,2,1,3,0,1,4,27,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,635,"        return set(instant, text, null);",0,0,0,0,2,1,3,0,1,4,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,654,"        int value = convertText(text, locale);",1,0,0,0,2,1,3,0,1,5,38,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,655,"        return set(instant, fieldIndex, values, value);",0,0,0,0,2,1,5,0,1,4,47,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,668,            return Integer.parseInt(text);,0,0,0,1,2,1,3,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,669,        } catch (NumberFormatException ex) {,1,0,0,1,4,1,0,1,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,670,"            throw new IllegalFieldValueException(getType(), text);",1,0,0,1,4,2,1,1,2,7,54,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,704,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,716,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,746,        return getMinimumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,758,        return getMinimumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,772,        return getMinimumValue(instant);,0,0,0,1,2,1,2,0,1,5,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,804,        return getMaximumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,818,        return getMaximumValue(instant);,0,0,0,1,2,1,2,0,1,5,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,829,        int max = getMaximumValue();,1,0,0,1,2,1,1,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,830,        if (max >= 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,831,            if (max < 10) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,832,                return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,833,            } else if (max < 100) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,834,                return 2;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,835,            } else if (max < 1000) {,1,1,0,1,4,2,0,0,0,5,24,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,836,                return 3;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,839,        return Integer.toString(max).length();,0,0,0,1,4,1,4,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,850,        return getMaximumTextLength(locale);,0,0,0,1,2,1,2,0,1,5,36,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,903,        long floor = roundFloor(instant);,1,0,0,1,2,1,2,0,1,6,33,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,904,        long ceiling = roundCeiling(instant);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,906,        long diffFromFloor = instant - floor;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,907,        long diffToCeiling = ceiling - instant;,3,1,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,909,        if (diffFromFloor <= diffToCeiling) {,2,1,0,1,3,1,0,0,0,5,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,911,            return floor;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,913,            return ceiling;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,927,        long floor = roundFloor(instant);,1,0,0,1,2,1,2,0,1,6,33,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,928,        long ceiling = roundCeiling(instant);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,930,        long diffFromFloor = instant - floor;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,931,        long diffToCeiling = ceiling - instant;,3,1,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,933,        if (diffToCeiling <= diffFromFloor) {,2,1,0,1,3,1,0,0,0,5,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,935,            return ceiling;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,937,            return floor;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,955,        long floor = roundFloor(instant);,1,0,0,1,2,1,2,0,1,6,33,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,956,        long ceiling = roundCeiling(instant);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,958,        long diffFromFloor = instant - floor;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,959,        long diffToCeiling = ceiling - instant;,3,1,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,961,        if (diffFromFloor < diffToCeiling) {,2,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,963,            return floor;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,964,        } else if (diffToCeiling < diffFromFloor) {,2,1,0,1,4,2,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,966,            return ceiling;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,970,            if ((get(ceiling) & 1) == 0) {,0,2,0,3,7,1,2,0,1,6,30,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,971,                return ceiling;,1,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,973,            return floor;,1,0,0,0,0,1,0,0,0,2,13,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,994,        return instant - roundFloor(instant);,1,1,0,1,2,1,2,0,1,7,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,16,1003,"        return ""DateTimeField["" + getName() + ']';",0,1,0,1,4,1,1,0,3,6,42,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");",0,0,0,1,2,2,0,1,2,5,74,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");",0,0,0,1,2,2,0,1,2,5,79,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,66,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,93,            return instant - instant % iUnitMillis;,3,2,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,109,        if (instant > 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,110,            instant -= 1;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,111,            return instant - instant % iUnitMillis + iUnitMillis;,4,3,0,0,0,1,0,0,0,3,53,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,113,            return instant - instant % iUnitMillis;,3,2,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,16,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,3,4,0,1,2,1,0,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0,0,0,1,2,2,0,1,2,5,69,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,60,            iRangeField = null;,1,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,100,        int value = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,43,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,101,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,102,            return value % iDivisor;,2,1,0,0,0,1,0,0,0,3,24,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,104,            return (iDivisor - 1) + ((value + 1) % iDivisor);,3,4,0,2,6,1,0,0,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));",1,1,0,1,6,1,7,0,2,7,87,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);",1,1,0,0,2,1,3,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,131,        int divided = getDivided(getWrappedField().get(instant));,1,0,0,2,6,1,4,0,2,6,57,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,132,"        return getWrappedField().set(instant, divided * iDivisor + value);",3,2,0,1,4,1,3,0,1,7,66,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,162,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,166,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,170,        return getWrappedField().roundHalfFloor(instant);,0,0,0,1,4,1,3,0,1,5,49,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,174,        return getWrappedField().roundHalfCeiling(instant);,0,0,0,1,4,1,3,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,178,        return getWrappedField().roundHalfEven(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,182,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,191,        return iDivisor;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,195,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,196,            return value / iDivisor;,2,1,0,0,0,1,0,0,0,3,24,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,16,198,            return ((value + 1) / iDivisor) - 1;,2,3,0,2,4,1,0,0,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,56,"            throw new IllegalArgumentException(""The field must not be null"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,59,"            throw new IllegalArgumentException(""The field must be supported"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,74,        return iField.isLenient();,0,0,0,1,2,1,2,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,78,        return iField.get(instant);,0,0,0,1,2,1,3,0,0,4,27,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,94,        return iField.getMinimumValue();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,98,        return iField.getMaximumValue();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,16,102,        return iField.roundFloor(instant);,0,0,0,1,2,1,3,0,0,4,34,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,1,6,1,6,0,2,5,79,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,109,        iDateTimeFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,110,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,111,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,112,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,113,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,114,        iLowerBound = lowerBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,115,        iUpperBound = upperBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,116,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,117,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0,0,0,1,6,1,5,0,2,5,70,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,130,        iDateTimeFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,131,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,132,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,133,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,134,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,135,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,136,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,137,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,138,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,1,6,1,6,0,2,5,79,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,151,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,152,        iDurationFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,153,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,154,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,155,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,156,        iLowerBound = lowerBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,157,        iUpperBound = upperBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,158,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,159,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0,0,0,0,4,1,5,0,2,4,69,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,172,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,173,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,174,        iFieldName = fieldName;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,175,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,176,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,177,        iLowerBound = lowerBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,178,        iUpperBound = upperBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,179,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,189,"        super(createMessage(fieldType.getName(), value));",0,0,0,1,6,1,4,0,2,5,49,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,190,        iDateTimeFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,191,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,192,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,193,        iStringValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,194,        iNumberValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,195,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,196,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,197,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,198,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,207,"        super(createMessage(fieldType.getName(), value));",0,0,0,1,6,1,4,0,2,5,49,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,208,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,209,        iDurationFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,210,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,211,        iStringValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,212,        iNumberValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,213,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,214,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,215,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,216,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,225,"        super(createMessage(fieldName, value));",0,0,0,0,4,1,3,0,2,4,39,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,226,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,227,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,228,        iFieldName = fieldName;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,229,        iStringValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,230,        iNumberValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,231,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,232,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,233,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,234,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,41,        StringBuffer buf = new StringBuffer(),1,0,0,1,2,1,0,2,1,6,37,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,44,        if (lowerBound == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,45,            if (upperBound == null) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,46,"                buf.append(""is not supported"");",0,0,0,1,2,0,2,0,1,4,31,9,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,48,"                buf.append(""must not be larger than "").append(upperBound);",0,0,0,1,4,0,4,0,1,4,58,9,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,50,        } else if (upperBound == null) {,1,1,0,1,4,2,0,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0,0,0,1,4,0,4,0,1,4,59,8,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,53,"            buf.append(""must be in the range ["")",0,0,0,1,3,0,2,0,1,4,36,12,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,59,        if (explain != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,60,"            buf.append("": "").append(explain);",0,0,0,1,4,0,4,0,1,4,33,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,63,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",1,0,0,1,4,1,1,2,2,7,55,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,76,        if (value == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,77,"            buf.append(""null"");",0,0,0,1,2,0,2,0,1,4,19,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,79,"            buf.append('""');",0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,80,            buf.append(value);,0,0,0,1,2,0,3,0,0,3,18,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,81,"            buf.append('""');",0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0,0,0,1,8,1,6,0,3,5,77,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,86,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,243,        return iDateTimeFieldType;,1,0,0,0,0,1,0,0,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,252,        return iDurationFieldType;,1,0,0,0,0,1,0,0,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,261,        return iFieldName;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,270,        return iNumberValue;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,279,        return iStringValue;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,288,        String value = iStringValue;,2,0,0,0,0,0,0,1,0,2,28,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,289,        if (value == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,290,            value = String.valueOf(iNumberValue);,1,0,0,1,2,0,3,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,292,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,301,        return iLowerBound;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,310,        return iUpperBound;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,314,        return iMessage;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,323,        if (iMessage == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,324,            iMessage = message;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,325,        } else if (message != null) {,1,1,0,1,4,2,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,326,"            iMessage = message + "": "" + iMessage;",3,1,0,0,0,0,0,0,2,3,37,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,16,328,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");",0,0,0,1,2,2,0,1,2,5,68,6,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,55,        return getWrappedField().getValue(duration) / iScalar;,1,1,0,1,4,1,3,0,1,7,54,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,59,        return getWrappedField().getValueAsLong(duration) / iScalar;,1,1,0,1,4,1,3,0,1,7,60,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,63,"        return getWrappedField().getValue(duration, instant) / iScalar;",1,1,0,1,4,1,4,0,1,7,63,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;",1,1,0,1,4,1,4,0,1,7,69,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,71,        long scaled = ((long) value) * ((long) iScalar);,3,1,0,2,8,3,0,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,72,        return getWrappedField().getMillis(scaled);,0,0,0,1,4,1,3,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",1,0,0,0,2,1,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,77,        return getWrappedField().getMillis(scaled);,0,0,0,1,4,1,3,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,81,        long scaled = ((long) value) * ((long) iScalar);,3,1,0,2,8,3,0,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,82,"        return getWrappedField().getMillis(scaled, instant);",0,0,0,1,4,1,4,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",1,0,0,0,2,1,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,87,"        return getWrappedField().getMillis(scaled, instant);",0,0,0,1,4,1,4,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,91,        long scaled = ((long) value) * ((long) iScalar);,3,1,0,2,8,3,0,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,92,"        return getWrappedField().add(instant, scaled);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",1,0,0,0,2,1,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,97,"        return getWrappedField().add(instant, scaled);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;",1,1,0,1,4,1,4,0,1,7,84,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;",1,1,0,1,4,1,4,0,1,7,90,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,119,        return iScalar;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,130,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,131,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,132,        } else if (obj instanceof ScaledDurationField) {,1,0,0,1,4,3,0,1,0,5,48,6,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,133,            ScaledDurationField other = (ScaledDurationField) obj;,2,0,0,1,2,0,0,2,0,4,54,7,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,134,            return (getWrappedField().equals(other.getWrappedField())) &&,0,1,0,3,8,1,4,0,1,6,61,7,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,16,138,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,16,54,"            throw new IllegalArgumentException(""The field must not be null"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,16,57,"            throw new IllegalArgumentException(""The field must be supported"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,16,73,        return iField.isPrecise();,0,0,0,1,2,1,2,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,16,77,"        return iField.getValueAsLong(duration, instant);",0,0,0,0,2,1,4,0,0,3,48,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,16,81,"        return iField.getMillis(value, instant);",0,0,0,0,2,1,4,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,16,85,"        return iField.getMillis(value, instant);",0,0,0,0,2,1,4,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,16,89,"        return iField.add(instant, value);",0,0,0,0,2,1,4,0,0,3,34,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,16,93,"        return iField.add(instant, value);",0,0,0,0,2,1,4,0,0,3,34,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,16,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,69,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,49,"            throw new IllegalArgumentException(""The type must not be null"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,59,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,79,        return FieldUtils.safeToInt(getValueAsLong(duration));,0,0,0,2,4,1,4,0,1,5,54,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,91,        return duration / getUnitMillis();,1,1,0,1,2,1,1,0,1,7,34,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));",0,0,0,0,4,1,5,0,1,4,63,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,123,        return value * getUnitMillis();  // safe,1,1,0,1,2,1,1,0,1,7,40,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());",0,0,0,1,4,1,4,0,1,5,55,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,0,4,1,5,0,1,4,84,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,153,            return -1;,0,0,0,0,0,1,0,0,1,2,10,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,16,165,"        return ""DurationField["" + getName() + ']';",0,1,0,1,4,1,1,0,3,6,42,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0,0,0,1,2,2,0,1,2,5,69,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,64,            iDurationField = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,90,"        super(remainderField.getWrappedField(), type);",1,0,0,1,4,1,2,0,1,6,46,3,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,91,        int divisor = iDivisor = remainderField.iDivisor;,4,0,0,0,0,1,0,0,1,3,49,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,92,        iDurationField = remainderField.iRangeField;,3,0,0,0,0,0,0,0,1,2,44,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,94,        DateTimeField field = getWrappedField();,1,0,0,1,2,0,1,1,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,95,        int i = field.getMinimumValue();,1,0,0,1,2,1,2,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,96,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,6,5,0,2,6,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,98,        int j = field.getMaximumValue();,1,0,0,1,2,1,2,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,99,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,6,5,0,2,6,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,101,        iMin = min;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,102,        iMax = max;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,112,        int value = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,43,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,113,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,114,            return value / iDivisor;,2,1,0,0,0,1,0,0,0,3,24,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,116,            return ((value + 1) / iDivisor) - 1;,2,3,0,2,4,1,0,0,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,129,"        return getWrappedField().add(instant, amount * iDivisor);",2,1,0,1,4,1,3,0,1,7,57,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,141,"        return getWrappedField().add(instant, amount * iDivisor);",2,1,0,1,4,1,3,0,1,7,57,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0,0,0,1,6,1,9,0,2,5,82,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;",1,1,0,1,4,1,4,0,1,7,85,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;",1,1,0,1,4,1,4,0,1,7,91,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0,0,0,0,2,1,5,0,0,3,54,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,174,        int remainder = getRemainder(getWrappedField().get(instant));,1,0,0,2,6,1,4,0,2,6,61,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);",3,2,0,1,4,1,3,0,1,7,68,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,191,        return iMin;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,200,        return iMax;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,204,        DateTimeField field = getWrappedField();,1,0,0,1,2,0,1,1,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));",1,1,0,1,6,1,7,0,1,7,69,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,209,"        return set(instant, get(getWrappedField().remainder(instant)));",0,0,0,2,8,1,6,0,3,5,63,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,218,        return iDivisor;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,222,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,223,            return value % iDivisor;,2,1,0,0,0,1,0,0,0,3,24,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,16,225,            return (iDivisor - 1) + ((value + 1) % iDivisor);,3,4,0,2,6,1,0,0,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,216,        return iName;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,234,        return getField(chronology).isSupported();,0,0,0,1,4,1,3,0,1,5,42,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,243,        return getName();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,70,        } else if (min == skip) {,2,1,0,1,4,2,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,71,            iMinValue = skip + 1;,2,1,0,0,0,0,0,0,1,3,21,7,0.0,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,73,            iMinValue = min;,2,0,0,0,0,0,0,0,1,2,16,7,0.0,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,88,"        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());",0,0,0,1,4,1,5,0,1,5,72,5,0.0,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,89,        if (value <= iSkip) {,2,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,90,            if (value == iSkip) {,2,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,91,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,94,            value++;,1,0,0,0,0,0,0,0,1,2,8,6,0.0,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,96,"        return super.set(millis, value);",3,0,0,0,2,2,0,0,0,3,32,5,0.0,0,0
defect4j,time,org/joda/time/field/SkipDateTimeField,16,104,        return getType().getField(iChronology);,0,0,0,1,4,1,3,0,1,5,39,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,156,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,164,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,169,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",2,1,0,0,2,2,3,0,0,5,65,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",2,1,0,0,2,2,3,0,0,5,65,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,182,"            return ImpreciseDateTimeField.this.add(instant, value);",1,0,0,0,2,2,3,0,0,4,55,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,186,"            return ImpreciseDateTimeField.this.add(instant, value);",1,0,0,0,2,2,3,0,0,4,55,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,190,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,195,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,84,            iMin = minValue;,2,0,0,0,0,0,0,0,1,2,16,6,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,89,            iMax = maxValue;,2,0,0,0,0,0,0,0,1,2,16,6,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,100,        return super.get(instant) + iOffset;,3,1,0,1,2,2,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,112,"        instant = super.add(instant, amount);",4,0,0,0,2,1,0,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0,0,0,1,4,1,6,0,1,5,61,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,114,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,126,"        instant = super.add(instant, amount);",4,0,0,0,2,1,0,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0,0,0,1,4,1,6,0,1,5,61,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,128,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0,0,0,1,6,1,9,0,2,5,82,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,157,        return getWrappedField().isLeap(instant);,0,0,0,1,4,1,3,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,161,        return getWrappedField().getLeapAmount(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,187,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,191,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,195,        return getWrappedField().roundHalfFloor(instant);,0,0,0,1,4,1,3,0,1,5,49,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,199,        return getWrappedField().roundHalfCeiling(instant);,0,0,0,1,4,1,3,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,203,        return getWrappedField().roundHalfEven(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,207,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,16,216,        return iOffset;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");",0,0,0,1,2,2,0,1,2,5,81,6,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,52,        int value = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,43,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,53,        if (value == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,54,            value = getMaximumValue();,1,0,0,1,2,0,1,0,2,5,26,6,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,56,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,60,"        return getWrappedField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,64,"        return getWrappedField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,68,"        return getWrappedField().addWrapField(instant, value);",0,0,0,1,4,1,4,0,1,5,54,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);",0,0,0,1,4,1,6,0,1,5,79,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,80,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,84,        int max = getMaximumValue();,1,0,0,1,2,1,1,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);",0,0,0,0,2,1,4,0,0,3,50,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,86,        if (value == max) {,2,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,87,            value = 0;,1,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,89,"        return getWrappedField().set(instant, value);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,93,        return getWrappedField().isLeap(instant);,0,0,0,1,4,1,3,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,97,        return getWrappedField().getLeapAmount(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,110,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,119,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,128,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,137,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,147,        return getWrappedField().getMaximumValue() + 1;,0,1,0,1,4,1,2,0,1,6,47,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,157,        return getWrappedField().getMaximumValue(instant) + 1;,0,1,0,1,4,1,3,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,167,        return getWrappedField().getMaximumValue(instant) + 1;,0,1,0,1,4,1,3,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;",0,1,0,1,4,1,4,0,1,6,62,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,181,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,185,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,189,        return getWrappedField().roundHalfFloor(instant);,0,0,0,1,4,1,3,0,1,5,49,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,193,        return getWrappedField().roundHalfCeiling(instant);,0,0,0,1,4,1,3,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,197,        return getWrappedField().roundHalfEven(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,16,201,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,53,"        return ""millis"";",0,0,0,0,0,1,0,0,1,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,85,        return FieldUtils.safeToInt(duration);,0,0,0,1,2,1,3,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,89,        return duration;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,93,        return FieldUtils.safeToInt(duration);,0,0,0,1,2,1,3,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,97,        return duration;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,101,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,105,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,109,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,113,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,121,"        return FieldUtils.safeAdd(instant, value);",0,0,0,0,2,1,4,0,0,3,42,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0,0,0,0,4,1,6,0,0,3,88,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,66,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,134,        long otherMillis = otherField.getUnitMillis();,1,0,0,1,2,1,2,0,0,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,135,        long thisMillis = getUnitMillis();,1,0,0,1,2,1,1,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,137,        if (thisMillis == otherMillis) {,2,1,0,1,3,1,0,0,0,5,32,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,138,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,140,        if (thisMillis < otherMillis) {,2,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,141,            return -1;,0,0,0,0,0,1,0,0,1,2,10,6,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,143,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,148,        if (obj instanceof MillisDurationField) {,1,0,0,1,3,2,0,1,0,5,41,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,149,            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();,1,1,0,2,8,1,2,1,1,8,70,6,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,151,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,164,"        return ""DurationField[millis]"";",0,0,0,0,2,1,0,0,1,3,31,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,171,        return INSTANCE;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,16,32,public final class MillisDurationField extends DurationField implements Serializable {,1,0,0,0,1,5,0,2,2,5,86,1,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");",0,0,0,1,2,2,0,1,2,5,75,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");",0,0,0,1,2,2,0,1,2,5,77,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,95,        int thisValue = get(instant);,1,0,0,1,2,1,2,0,1,6,29,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,96,        int wrappedValue = FieldUtils.getWrappedValue,1,0,0,0,0,1,2,0,0,3,45,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,99,        return instant + (wrappedValue - thisValue) * getUnitMillis();,3,3,0,1,4,1,1,0,1,7,62,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,16,143,        return iRange;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,79,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,83,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,101,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,110,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,119,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,128,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,137,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,146,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,155,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,164,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,173,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,182,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,191,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,200,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,209,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,227,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,238,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,239,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,240,        } else if (obj instanceof UnsupportedDurationField) {,1,0,0,1,4,3,0,1,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,241,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,2,0,0,1,2,0,0,2,0,4,64,7,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,242,            if (other.getName() == null) {,0,1,0,2,5,1,2,0,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,243,                return (getName() == null);,0,1,0,2,4,1,1,0,1,6,27,10,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,245,            return (other.getName().equals(getName()));,0,0,0,3,8,1,4,0,1,5,43,9,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,247,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,256,        return getName().hashCode();,0,0,0,1,4,1,2,0,1,5,28,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,265,"        return ""UnsupportedDurationField["" + getName() + ']';",0,1,0,1,4,1,1,0,3,6,53,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,272,        return getInstance(iType);,0,0,0,1,2,1,2,0,1,5,26,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",1,1,0,1,2,2,0,1,2,7,74,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,16,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,1,0,0,0,1,5,0,2,2,5,91,1,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",3,0,0,0,3,1,0,2,1,5,87,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,83,        if (type == null || durationField == null) {,2,3,0,1,3,1,0,0,0,5,44,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,84,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,86,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,87,        iDurationField = durationField;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,88,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,55,        if (cCache == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",1,0,0,1,2,1,0,3,2,6,69,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,57,            field = null;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,59,            field = cCache.get(type);,1,0,0,1,2,0,3,0,1,5,25,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,60,            if (field != null && field.getDurationField() != durationField) {,2,3,0,2,5,1,2,0,0,6,65,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,61,                field = null;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,64,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,65,"            field = new UnsupportedDateTimeField(type, durationField);",3,0,0,0,2,1,0,1,2,5,58,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,66,"            cCache.put(type, field);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,68,        return field;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,95,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,99,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,108,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,117,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,126,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,135,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,144,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,153,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,162,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,171,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,180,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,189,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,198,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,207,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,216,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,225,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,234,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,243,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,252,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,261,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,270,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,75,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,81,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,297,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,306,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,315,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,324,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,333,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,343,        return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,352,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,361,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,370,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,379,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,388,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,397,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,406,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,415,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,424,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,433,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,442,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,451,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,460,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,469,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,478,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,487,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,496,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,505,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,514,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,523,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,533,"        return ""UnsupportedDateTimeField"";",0,0,0,0,0,1,0,0,1,2,34,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,540,"        return getInstance(iType, iDurationField);",0,0,0,0,2,1,3,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,16,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",1,1,0,1,2,2,0,1,2,7,74,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,36,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,37,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,49,        if (value == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");",0,0,0,1,2,2,0,1,2,5,69,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,52,        return -value;,1,0,0,0,0,1,0,0,1,3,14,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,67,            throw new ArithmeticException,0,0,0,0,0,2,0,1,1,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,85,            throw new ArithmeticException,0,0,0,0,0,2,0,1,1,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,100,        long diff = val1 - val2;,3,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,4,5,0,2,7,1,0,0,0,5,45,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,103,            throw new ArithmeticException,0,0,0,0,0,2,0,1,1,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,106,        return diff;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,119,        long total = (long) val1 * (long) val2;,3,1,0,1,4,3,0,0,0,5,39,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,61,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,121,            throw new ArithmeticException,0,0,0,0,0,2,0,1,1,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,124,        return (int) total;,1,0,0,1,2,2,0,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,137,        switch (scalar) {,1,0,0,1,3,1,0,0,0,4,17,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,139,            return -val1;,1,0,0,0,0,1,0,0,1,3,13,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,141,            return 0L;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,143,            return val1;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,145,        long total = val1 * scalar;,3,1,0,0,0,1,0,0,0,3,27,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,146,        if (total / scalar != val1) {,3,2,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,147,            throw new ArithmeticException,0,0,0,0,0,2,0,1,1,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,150,        return total;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,162,        if (val2 == 1) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,163,            return val1;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,165,        if (val1 == 1) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,166,            return val2;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,168,        if (val1 == 0 || val2 == 0) {,2,3,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,169,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,171,        long total = val1 * val2;,3,1,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,172,        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {,11,10,0,1,3,1,0,0,2,6,107,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,173,"            throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",2,1,0,1,2,3,0,1,3,7,89,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,175,        return total;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,186,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,63,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,187,            return (int) value;,1,0,0,1,2,2,0,0,0,4,19,7,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,189,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);",1,1,0,1,2,3,0,1,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,201,"        long val = FieldUtils.safeMultiply(val1, val2);",1,0,0,0,2,1,4,0,0,4,47,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,202,        return FieldUtils.safeToInt(val);,0,0,0,1,2,1,3,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,217,            throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,235,            throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,251,        if ((value < lowerBound) || (value > upperBound)) {,4,3,0,2,7,1,0,0,0,5,51,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,252,            throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,256,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,275,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",2,1,0,0,2,1,3,0,1,6,69,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,291,        if (minValue >= maxValue) {,2,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,292,"            throw new IllegalArgumentException(""MIN > MAX"");",0,0,0,1,2,2,0,1,2,5,48,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,295,        int wrapRange = maxValue - minValue + 1;,3,2,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,296,        value -= minValue;,2,0,0,0,0,0,0,0,1,2,18,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,298,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,299,            return (value % wrapRange) + minValue;,3,2,0,1,2,1,0,0,0,5,38,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,302,        int remByRange = (-value) % wrapRange;,3,1,0,1,2,1,0,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,304,        if (remByRange == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,305,            return 0 + minValue;,1,1,0,0,0,1,0,0,0,3,20,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,307,        return (wrapRange - remByRange) + minValue;,3,2,0,1,2,1,0,0,0,5,43,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,320,        if (object1 == object2) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,321,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,323,        if (object1 == null || object2 == null) {,2,3,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,324,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,16,326,        return object1.equals(object2);,0,0,0,1,2,1,3,0,0,4,31,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,76,        return duration / iUnitMillis;  // safe,2,1,0,0,0,1,0,0,0,3,39,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,88,        return value * iUnitMillis;  // safe,2,1,0,0,0,1,0,0,0,3,36,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);",0,0,0,0,2,1,4,0,0,3,51,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);",1,0,0,0,2,1,4,0,0,4,60,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,110,"        return FieldUtils.safeAdd(instant, addition);",0,0,0,0,2,1,4,0,0,3,45,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",1,0,0,0,2,1,4,0,0,4,77,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,115,        return difference / iUnitMillis;,2,1,0,0,0,1,0,0,0,3,32,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,127,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,128,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,129,        } else if (obj instanceof PreciseDurationField) {,1,0,0,1,4,3,0,1,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,130,            PreciseDurationField other = (PreciseDurationField) obj;,2,0,0,1,2,0,0,2,0,4,56,7,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,131,            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);,3,3,0,2,8,1,3,0,1,7,76,7,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,16,133,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,0,4,1,5,0,1,4,84,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,118,        if (minuendInstant < subtrahendInstant) {,2,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);",0,0,0,0,2,1,3,0,2,4,63,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,122,        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;,4,2,0,1,2,1,0,0,0,5,69,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {",1,1,0,0,5,1,3,0,1,6,58,4,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,125,                difference++;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);",1,1,0,0,5,1,3,0,1,6,63,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,127,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {",1,1,0,0,6,2,3,0,1,6,65,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,130,                difference--;,1,0,0,0,0,0,0,0,1,2,13,9,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);",1,1,0,0,5,1,3,0,1,6,62,7,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,133,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,16,145,        return iUnitMillis;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,435,        SavedState() {,1,0,0,1,3,0,0,0,0,3,14,3,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,436,            this.iZone = DateTimeParserBucket.this.iZone;,3,0,0,0,0,2,0,0,1,3,45,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,437,            this.iOffset = DateTimeParserBucket.this.iOffset;,3,0,0,0,0,2,0,0,1,3,49,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,438,            this.iSavedFields = DateTimeParserBucket.this.iSavedFields;,3,0,0,0,0,2,0,0,1,3,59,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,439,            this.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;,3,0,0,0,0,2,0,0,1,3,69,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,440,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,443,            if (enclosing != DateTimeParserBucket.this) {,2,1,0,1,3,2,0,0,0,5,45,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,444,                return false;,0,0,0,0,0,1,0,0,1,2,13,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,446,            enclosing.iZone = this.iZone;,3,0,0,0,0,1,0,0,1,3,29,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,447,            enclosing.iOffset = this.iOffset;,3,0,0,0,0,1,0,0,1,3,33,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,448,            enclosing.iSavedFields = this.iSavedFields;,3,0,0,0,0,1,0,0,1,3,43,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,449,            if (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {,3,1,0,1,3,2,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,454,                enclosing.iSavedFieldsShared = true;,2,0,0,0,0,0,0,0,2,2,36,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,456,            enclosing.iSavedFieldsCount = this.iSavedFieldsCount;,3,0,0,0,0,1,0,0,1,3,53,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,457,            return true;,0,0,0,0,0,1,0,0,1,2,12,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,88,"        this(instantLocal, chrono, locale, null, 2000);",3,0,0,0,2,1,0,0,0,3,47,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,89,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,104,"        this(instantLocal, chrono, locale, pivotYear, 2000);",4,0,0,0,2,1,0,0,0,3,52,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,105,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,134,        return iChrono;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,144,        return iLocale;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,159,        iSavedState = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,160,        iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,161,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,170,        return (iOffset != null ? iOffset : 0);,2,1,0,1,2,1,0,0,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,177,        return iOffset;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,186,        iSavedState = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,187,        iOffset = offset;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,188,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,194,        iSavedState = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,195,        iOffset = offset;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,196,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,212,        return iPivotYear;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,225,        iPivotYear = pivotYear;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,226,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,236,"        saveField(new SavedField(field, value));",2,0,0,0,4,1,1,1,2,6,40,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,237,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,257,"        saveField(new SavedField(fieldType.getField(iChrono), text, locale));",2,0,0,1,6,1,4,1,2,7,69,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,258,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,266,            SavedField[] newArray = new SavedField,1,0,0,0,2,1,0,2,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,268,"            System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);",0,0,0,0,2,0,5,0,0,2,64,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,269,            iSavedFields = savedFields = newArray;,3,0,0,0,0,0,0,0,2,2,38,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,270,            iSavedFieldsShared = false;,1,0,0,0,0,0,0,0,2,2,27,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,286,        if (iSavedState == null) {,1,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,287,            iSavedState = new SavedState();,1,0,0,1,2,1,0,1,2,6,31,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,289,        return iSavedState;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,301,        if (savedState instanceof SavedState) {,1,0,0,1,3,2,0,1,0,5,39,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,302,            if (((SavedState) savedState).restoreState(this)) {,1,0,0,3,9,2,1,1,0,6,51,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,303,                iSavedState = savedState;,2,0,0,0,0,0,0,0,1,2,25,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,304,                return true;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,307,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,318,"        return computeMillis(false, null);",0,0,0,0,2,1,1,0,2,4,34,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,330,"        return computeMillis(resetFields, null);",0,0,0,0,2,1,2,0,1,4,40,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,347,            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();,2,0,0,1,6,0,2,1,2,6,64,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,348,            iSavedFieldsShared = false;,1,0,0,0,0,0,0,0,2,2,27,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,368,                for (int i = 0; i < count; i++) {,4,1,0,1,3,2,0,0,1,6,33,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,369,"                    millis = savedFields[i].set(millis, i == (count - 1));",3,2,1,1,6,0,2,0,1,7,54,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,372,        } catch (IllegalFieldValueException e) {,1,0,0,1,4,1,0,1,0,5,40,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,373,            if (text != null) {,1,1,0,1,3,1,0,0,0,5,19,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,374,"                e.prependMessage(""Cannot parse \"""" + text + '""');",1,1,0,1,2,0,2,0,2,6,49,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,376,            throw e;,1,0,0,0,0,1,0,0,0,2,8,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,380,            millis -= iOffset;,2,0,0,0,0,0,0,0,1,2,18,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,385,                String message =,1,0,0,0,0,0,0,1,0,2,16,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,387,                if (text != null) {,1,1,0,1,3,1,0,0,0,5,19,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,388,"                    message = ""Cannot parse \"""" + text + ""\"": "" + message;",3,1,0,0,0,0,0,0,3,3,54,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,390,                throw new IllegalArgumentException(message);,1,0,0,1,2,2,0,1,1,6,44,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,417,"            Arrays.sort(array, 0, high);",0,0,0,0,2,0,4,0,0,2,28,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,512,            if (b == null || !b.isSupported()) {,1,2,0,2,5,1,2,0,1,7,36,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,513,                return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,515,            return -1;,0,0,0,0,0,1,0,0,1,2,10,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,55,public class DateTimeParserBucket {,1,0,0,0,1,2,0,0,1,4,35,1,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,474,"        SavedField(DateTimeField field, String text, Locale locale) {",4,0,0,0,3,0,0,3,0,3,61,3,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,475,            iField = field;,2,0,0,0,0,0,0,0,1,2,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,476,            iValue = 0;,1,0,0,0,0,0,0,0,1,2,11,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,477,            iText = text;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,478,            iLocale = locale;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,479,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,485,"                millis = iField.set(millis, iText, iLocale);",1,0,0,0,2,0,5,0,1,4,44,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,488,                millis = iField.roundFloor(millis);,1,0,0,1,2,0,3,0,1,5,35,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,505,            return compareReverse,0,0,0,0,0,1,1,0,1,3,21,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,16,461,    static class SavedField implements Comparable<SavedField> {,1,0,0,0,1,3,0,2,1,5,59,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,116,"        throw new UnsupportedOperationException(""Both printing and parsing not supported"");",0,0,0,1,2,2,0,1,2,5,83,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,132,        Object f = getFormatter();,1,0,0,1,2,0,1,1,1,6,26,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,133,        if (isPrinter(f)) {,0,0,0,2,5,1,2,0,1,5,19,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,134,            return (DateTimePrinter) f;,1,0,0,1,2,1,0,1,0,5,27,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,136,"        throw new UnsupportedOperationException(""Printing is not supported"");",0,0,0,1,2,2,0,1,2,5,69,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,152,        Object f = getFormatter();,1,0,0,1,2,0,1,1,1,6,26,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,153,        if (isParser(f)) {,0,0,0,2,5,1,2,0,1,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,154,            return (DateTimeParser) f;,1,0,0,1,2,1,0,1,0,5,26,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,156,"        throw new UnsupportedOperationException(""Parsing is not supported"");",0,0,0,1,2,2,0,1,2,5,68,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,167,        return isFormatter(getFormatter());,0,0,0,2,4,1,2,0,2,5,35,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,177,        return isPrinter(getFormatter());,0,0,0,2,4,1,2,0,2,5,33,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,187,        return isParser(getFormatter());,0,0,0,2,4,1,2,0,2,5,32,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,196,        iFormatter = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,197,        iElementPairs.clear();,0,0,0,1,2,0,2,0,0,3,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,198,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,210,"            throw new IllegalArgumentException(""No formatter supplied"");",0,0,0,1,2,2,0,1,2,5,60,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,224,        checkPrinter(printer);,0,0,0,1,2,0,2,0,1,4,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,225,"        return append0(printer, null);",0,0,0,0,2,1,2,0,1,4,30,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,237,        checkParser(parser);,0,0,0,1,2,0,2,0,1,4,20,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,238,"        return append0(null, parser);",0,0,0,0,2,1,2,0,1,4,29,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,250,        checkPrinter(printer);,0,0,0,1,2,0,2,0,1,4,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,251,        checkParser(parser);,0,0,0,1,2,0,2,0,1,4,20,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,252,"        return append0(printer, parser);",0,0,0,0,2,1,3,0,1,4,32,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,273,        if (printer != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,274,            checkPrinter(printer);,0,0,0,1,2,0,2,0,1,4,22,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,276,        if (parsers == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,277,"            throw new IllegalArgumentException(""No parsers supplied"");",0,0,0,1,2,2,0,1,2,5,58,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,279,        int length = parsers.length;,3,0,0,0,0,1,0,0,0,2,28,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,280,        if (length == 1) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,281,            if (parsers[0] == null) {,0,1,1,1,5,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,282,"                throw new IllegalArgumentException(""No parser supplied"");",0,0,0,1,2,2,0,1,2,5,57,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,284,"            return append0(printer, parsers[0]);",0,0,1,0,4,1,2,0,1,5,36,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,287,        DateTimeParser[] copyOfParsers = new DateTimeParser[length];,1,0,1,0,4,1,0,2,0,5,60,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,289,        for (i = 0; i < length - 1; i++) {,4,2,0,1,3,1,0,0,2,6,34,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,290,            if ((copyOfParsers[i] = parsers[i]) == null) {,0,1,1,2,9,1,0,0,1,6,46,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,291,"                throw new IllegalArgumentException(""Incomplete parser array"");",0,0,0,1,2,2,0,1,2,5,62,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,294,        copyOfParsers[i] = parsers[i];,0,0,1,0,4,0,0,0,1,3,30,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,296,"        return append0(printer, new MatchingParser(copyOfParsers));",1,0,0,1,4,2,2,1,2,7,59,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,307,        checkParser(parser);,0,0,0,1,2,0,2,0,1,4,20,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,308,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",2,0,0,0,6,1,0,2,0,4,63,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,309,"        return append0(null, new MatchingParser(parsers));",1,0,0,1,4,2,1,1,2,7,50,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,319,        if (parser == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,320,"            throw new IllegalArgumentException(""No parser supplied"");",0,0,0,1,2,2,0,1,2,5,57,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,322,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,330,        if (printer == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,331,"            throw new IllegalArgumentException(""No printer supplied"");",0,0,0,1,2,2,0,1,2,5,58,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,333,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,370,        if (text == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,371,"            throw new IllegalArgumentException(""Literal must not be null"");",0,0,0,1,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,373,        switch (text.length()) {,0,0,0,2,5,1,2,0,0,4,24,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,375,                return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,377,                return append0(new CharacterLiteral(text.charAt(0)));,0,0,0,3,6,2,3,1,2,6,53,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,379,                return append0(new StringLiteral(text));,1,0,0,2,4,2,1,1,2,7,40,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,397,"            throw new IllegalArgumentException(""Field type must not be null"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,400,            maxDigits = minDigits;,2,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,403,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,426,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,427,"            throw new IllegalArgumentException(""Field type must not be null"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,429,        if (numDigits <= 0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,430,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);",1,1,0,1,2,2,0,1,2,7,77,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,432,"        return append0(new FixedNumber(fieldType, numDigits, false));",2,0,0,0,4,2,1,1,3,6,61,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,449,"            throw new IllegalArgumentException(""Field type must not be null"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,452,            maxDigits = minDigits;,2,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,455,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,458,"            return append0(new UnpaddedNumber(fieldType, maxDigits, true));",2,0,0,0,4,2,1,1,3,6,63,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,478,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,479,"            throw new IllegalArgumentException(""Field type must not be null"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,481,        if (numDigits <= 0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,482,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);",1,1,0,1,2,2,0,1,2,7,77,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,484,"        return append0(new FixedNumber(fieldType, numDigits, true));",2,0,0,0,4,2,1,1,3,6,60,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,496,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,497,"            throw new IllegalArgumentException(""Field type must not be null"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,499,"        return append0(new TextField(fieldType, false));",1,0,0,0,4,2,1,1,3,6,48,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,512,"            throw new IllegalArgumentException(""Field type must not be null"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,533,"            throw new IllegalArgumentException(""Field type must not be null"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,536,            maxDigits = minDigits;,2,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,539,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,576,"        return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,77,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,593,"        return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,75,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,610,"        return appendFraction(DateTimeFieldType.dayOfYear(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,75,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,627,"        return appendDecimal(DateTimeFieldType.millisOfSecond(), minDigits, 3);",0,0,0,1,4,1,4,0,1,5,71,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,637,"        return appendDecimal(DateTimeFieldType.millisOfDay(), minDigits, 8);",0,0,0,1,4,1,4,0,1,5,68,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,657,"        return appendDecimal(DateTimeFieldType.secondOfDay(), minDigits, 5);",0,0,0,1,4,1,4,0,1,5,68,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,677,"        return appendDecimal(DateTimeFieldType.minuteOfDay(), minDigits, 4);",0,0,0,1,4,1,4,0,1,5,68,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,697,"        return appendDecimal(DateTimeFieldType.clockhourOfDay(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,71,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,707,"        return appendDecimal(DateTimeFieldType.hourOfHalfday(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,70,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,717,"        return appendDecimal(DateTimeFieldType.clockhourOfHalfday(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,75,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,727,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",0,0,0,1,4,1,4,0,1,5,66,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,747,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",0,0,0,1,4,1,4,0,1,5,66,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,757,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,71,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,769,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,79,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,813,"        return appendTwoDigitYear(pivot, false);",0,0,0,0,2,1,2,0,2,4,40,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,831,"        return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot, lenientParse));",2,0,0,1,6,2,3,1,2,7,80,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,853,"        return appendTwoDigitWeekyear(pivot, false);",0,0,0,0,2,1,2,0,2,4,44,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,871,"        return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot, lenientParse));",2,0,0,1,6,2,3,1,2,7,84,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,883,"        return appendDecimal(DateTimeFieldType.yearOfEra(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,74,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,895,"        return appendDecimal(DateTimeFieldType.yearOfCentury(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,78,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,907,"        return appendSignedDecimal(DateTimeFieldType.centuryOfEra(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,83,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,917,        return appendText(DateTimeFieldType.halfdayOfDay());,0,0,0,2,4,1,3,0,1,5,52,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,927,        return appendText(DateTimeFieldType.dayOfWeek());,0,0,0,2,4,1,3,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,949,        return appendText(DateTimeFieldType.monthOfYear());,0,0,0,2,4,1,3,0,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,959,        return appendShortText(DateTimeFieldType.monthOfYear());,0,0,0,2,4,1,3,0,1,5,56,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,969,        return appendText(DateTimeFieldType.era());,0,0,0,2,4,1,3,0,1,5,43,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,980,"        return append0(new TimeZoneName(TimeZoneName.LONG_NAME, null), null);",2,0,0,0,4,2,1,1,2,6,69,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,993,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.LONG_NAME, parseLookup);",4,0,0,0,2,1,0,2,1,5,72,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,994,"        return append0(pp, pp);",0,0,0,0,2,1,3,0,1,4,23,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1005,"        return append0(new TimeZoneName(TimeZoneName.SHORT_NAME, null), null);",2,0,0,0,4,2,1,1,2,6,70,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1019,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.SHORT_NAME, parseLookup);",4,0,0,0,2,1,0,2,1,5,73,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1020,"        return append0(pp, pp);",0,0,0,0,2,1,3,0,1,4,23,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1030,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);",4,0,0,0,2,1,1,0,1,5,57,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1080,        return append0(new TimeZoneOffset,0,0,0,0,1,2,1,1,2,5,33,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1094,"        DateTimeFormat.appendPatternTo(this, pattern);",0,0,0,0,2,1,3,0,0,3,46,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1095,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1112,                    f = parser;,2,0,0,0,0,0,0,0,1,2,11,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1133,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1143,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1147,        return (isPrinter(f) || isParser(f));,0,1,0,2,6,1,4,0,2,6,37,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1151,        for (int i = len; --i >= 0;) {,3,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1152,            buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1154,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1157,        for (int i = len; --i >= 0;) {,3,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1158,            out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1160,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,145,        return (iPrinter != null);,1,1,0,1,2,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,163,        return (iParser != null);,1,1,0,1,2,1,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,189,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,221,        if (iOffsetParsed == true) {,1,1,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,222,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,224,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",3,0,0,0,1,2,0,1,1,5,56,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,235,        return iOffsetParsed;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,256,        if (iChrono == chrono) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,257,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,259,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",3,0,0,0,1,2,0,1,1,5,56,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,269,        return iChrono;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,280,        return iChrono;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,300,        return withZone(DateTimeZone.UTC);,2,0,0,1,2,1,1,0,1,6,34,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,320,        if (iZone == zone) {,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,321,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,323,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",3,0,0,0,1,2,0,1,1,5,56,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,333,        return iZone;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,367,        if (iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear))) {,3,4,0,3,7,1,3,0,0,6,86,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,368,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,370,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",3,0,0,0,1,2,0,1,1,5,56,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,404,        return withPivotYear(Integer.valueOf(pivotYear));,0,0,0,2,4,1,4,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,414,      return iPivotYear;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,448,      return iDefaultYear;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,471,        long millis = DateTimeUtils.getInstantMillis(instant);,1,0,0,1,2,1,3,0,0,5,54,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,472,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,1,0,0,1,2,0,3,1,0,5,64,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,473,"        printTo(out, millis, chrono);",0,0,0,0,2,0,4,0,1,3,29,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,474,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,484,        appendable.append(print(instant));,0,0,0,2,4,0,4,0,1,4,34,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,485,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,496,"        printTo(buf, instant, null);",0,0,0,0,2,0,3,0,1,3,28,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,497,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,507,"        printTo(out, instant, null);",0,0,0,0,2,0,3,0,1,3,28,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,508,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,519,        appendable.append(print(instant));,0,0,0,2,4,0,4,0,1,4,34,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,520,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,533,        DateTimePrinter printer = requirePrinter();,1,0,0,1,2,0,1,1,1,6,43,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,534,        if (partial == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,535,"            throw new IllegalArgumentException(""The partial must not be null"");",0,0,0,1,2,2,0,1,2,5,67,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,537,"        printer.printTo(buf, partial, iLocale);",0,0,0,0,2,0,5,0,0,2,39,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,538,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,550,        DateTimePrinter printer = requirePrinter();,1,0,0,1,2,0,1,1,1,6,43,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,551,        if (partial == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,552,"            throw new IllegalArgumentException(""The partial must not be null"");",0,0,0,1,2,2,0,1,2,5,67,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,554,"        printer.printTo(out, partial, iLocale);",0,0,0,0,2,0,5,0,0,2,39,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,555,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,568,        appendable.append(print(partial));,0,0,0,2,4,0,4,0,1,4,34,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,569,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,597,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,1,0,0,2,6,1,2,2,2,7,78,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,598,"        printTo(buf, instant);",0,0,0,0,2,0,3,0,1,3,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,599,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,612,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,1,0,0,2,6,1,2,2,2,7,78,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,613,"        printTo(buf, partial);",0,0,0,0,2,0,3,0,1,3,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,614,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,627,            zone = DateTimeZone.UTC;,3,0,0,0,0,0,0,0,1,2,24,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,628,            offset = 0;,1,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,629,            adjustedInstant = instant;,2,0,0,0,0,0,0,0,1,2,26,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,635,        DateTimePrinter printer = requirePrinter();,1,0,0,1,2,0,1,1,1,6,43,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,636,        chrono = selectChronology(chrono);,1,0,0,1,2,0,2,0,2,5,34,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,639,        DateTimeZone zone = chrono.getZone();,1,0,0,1,2,0,2,1,0,5,37,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,640,        int offset = zone.getOffset(instant);,1,0,0,1,2,1,3,0,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,641,        long adjustedInstant = instant + offset;,3,1,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,642,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,4,5,0,2,7,1,0,0,0,5,65,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,644,            zone = DateTimeZone.UTC;,3,0,0,0,0,0,0,0,1,2,24,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,645,            offset = 0;,1,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,646,            adjustedInstant = instant;,2,0,0,0,0,0,0,0,1,2,26,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,648,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0,0,0,1,4,0,9,0,0,3,79,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,649,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,659,"            throw new UnsupportedOperationException(""Printing not supported"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,700,"            throw new IllegalArgumentException(""Instant must not be null"");",0,0,0,1,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,713,            int parsedOffset = bucket.getOffsetInteger();,1,0,0,1,2,1,2,0,0,5,45,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,714,            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,1,0,0,1,2,0,3,1,0,5,69,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,715,            chrono = chrono.withZone(parsedZone);,1,0,0,1,2,0,3,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,716,        } else if (bucket.getZone() != null) {,0,1,0,2,6,2,2,0,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,721,            instant.setZone(iZone);,0,0,0,1,2,0,3,0,0,3,23,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,739,        DateTimeParser parser = requireParser();,1,0,0,1,2,0,1,1,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,741,        Chronology chrono = selectChronology(iChrono);,1,0,0,1,2,0,2,1,1,6,46,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,742,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",5,0,0,0,2,1,0,2,1,5,101,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,743,"        int newPos = parser.parseInto(bucket, text, 0);",1,0,0,0,2,1,4,0,0,4,47,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,744,        if (newPos >= 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,745,            if (newPos >= text.length()) {,1,1,0,2,5,1,2,0,0,6,30,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,746,"                return bucket.computeMillis(true, text);",0,0,0,0,2,1,3,0,1,4,40,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,749,            newPos = ~newPos;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,751,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,0,4,2,4,1,1,5,81,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,769,        return parseLocalDateTime(text).toLocalDate();,0,0,0,1,4,1,3,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,787,        return parseLocalDateTime(text).toLocalTime();,0,0,0,1,4,1,3,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,805,        DateTimeParser parser = requireParser();,1,0,0,1,2,0,1,1,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,807,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps",1,0,0,1,4,0,2,1,1,6,91,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,808,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",5,0,0,0,2,1,0,2,1,5,101,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,809,"        int newPos = parser.parseInto(bucket, text, 0);",1,0,0,0,2,1,4,0,0,4,47,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,810,        if (newPos >= 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,811,            if (newPos >= text.length()) {,1,1,0,2,5,1,2,0,0,6,30,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,812,"                long millis = bucket.computeMillis(true, text);",1,0,0,0,2,1,3,0,1,5,47,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,813,                if (bucket.getOffsetInteger() != null) {  // treat withOffsetParsed() as being true,0,1,0,2,7,1,2,0,0,5,83,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,814,                    int parsedOffset = bucket.getOffsetInteger();,1,0,0,1,2,1,2,0,0,5,45,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,815,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,1,0,0,1,2,0,3,1,0,5,69,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,816,                    chrono = chrono.withZone(parsedZone);,1,0,0,1,2,0,3,0,1,5,37,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,817,                } else if (bucket.getZone() != null) {,0,1,0,2,6,2,2,0,0,5,38,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,818,                    chrono = chrono.withZone(bucket.getZone());,1,0,0,2,4,0,4,0,1,5,43,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,820,"                return new LocalDateTime(millis, chrono);",2,0,0,0,2,2,0,1,1,5,41,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,823,            newPos = ~newPos;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,825,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,0,4,2,4,1,1,5,81,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,846,        DateTimeParser parser = requireParser();,1,0,0,1,2,0,1,1,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,848,        Chronology chrono = selectChronology(null);,1,0,0,1,2,0,1,1,1,6,43,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,849,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",5,0,0,0,2,1,0,2,1,5,101,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,850,"        int newPos = parser.parseInto(bucket, text, 0);",1,0,0,0,2,1,4,0,0,4,47,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,851,        if (newPos >= 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,852,            if (newPos >= text.length()) {,1,1,0,2,5,1,2,0,0,6,30,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,853,"                long millis = bucket.computeMillis(true, text);",1,0,0,0,2,1,3,0,1,5,47,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,854,                if (iOffsetParsed && bucket.getOffsetInteger() != null) {,1,2,0,2,5,1,2,0,0,6,57,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,855,                    int parsedOffset = bucket.getOffsetInteger();,1,0,0,1,2,1,2,0,0,5,45,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,856,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,1,0,0,1,2,0,3,1,0,5,69,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,857,                    chrono = chrono.withZone(parsedZone);,1,0,0,1,2,0,3,0,1,5,37,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,858,                } else if (bucket.getZone() != null) {,0,1,0,2,6,2,2,0,0,5,38,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,859,                    chrono = chrono.withZone(bucket.getZone());,1,0,0,2,4,0,4,0,1,5,43,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,861,"                DateTime dt = new DateTime(millis, chrono);",3,0,0,0,2,1,0,2,1,5,43,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,862,                if (iZone != null) {,1,1,0,1,3,1,0,0,0,5,20,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,863,                    dt = dt.withZone(iZone);,1,0,0,1,2,0,3,0,1,5,24,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,865,                return dt;,1,0,0,0,0,1,0,0,0,2,10,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,868,            newPos = ~newPos;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,870,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,0,4,2,4,1,1,5,81,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,891,        DateTimeParser parser = requireParser();,1,0,0,1,2,0,1,1,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,893,        Chronology chrono = selectChronology(null);,1,0,0,1,2,0,1,1,1,6,43,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,894,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",5,0,0,0,2,1,0,2,1,5,101,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,895,"        int newPos = parser.parseInto(bucket, text, 0);",1,0,0,0,2,1,4,0,0,4,47,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,896,        if (newPos >= 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,897,            if (newPos >= text.length()) {,1,1,0,2,5,1,2,0,0,6,30,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,898,"                long millis = bucket.computeMillis(true, text);",1,0,0,0,2,1,3,0,1,5,47,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,899,                if (iOffsetParsed && bucket.getOffsetInteger() != null) {,1,2,0,2,5,1,2,0,0,6,57,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,900,                    int parsedOffset = bucket.getOffsetInteger();,1,0,0,1,2,1,2,0,0,5,45,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,901,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,1,0,0,1,2,0,3,1,0,5,69,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,902,                    chrono = chrono.withZone(parsedZone);,1,0,0,1,2,0,3,0,1,5,37,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,903,                } else if (bucket.getZone() != null) {,0,1,0,2,6,2,2,0,0,5,38,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,904,                    chrono = chrono.withZone(bucket.getZone());,1,0,0,2,4,0,4,0,1,5,43,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,906,"                MutableDateTime dt = new MutableDateTime(millis, chrono);",3,0,0,0,2,1,0,2,1,5,57,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,907,                if (iZone != null) {,1,1,0,1,3,1,0,0,0,5,20,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,908,                    dt.setZone(iZone);,0,0,0,1,2,0,3,0,0,3,18,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,910,                return dt;,1,0,0,0,0,1,0,0,0,2,10,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,913,            newPos = ~newPos;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,915,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,0,4,2,4,1,1,5,81,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,926,"            throw new UnsupportedOperationException(""Parsing not supported"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,941,            chrono = iChrono;,2,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,16,944,            chrono = chrono.withZone(iZone);,1,0,0,1,2,0,3,0,1,5,32,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,145,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,146,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,230,        if (fields == null || fields.size() == 0) {,1,3,0,2,5,1,2,0,0,6,43,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,231,"            throw new IllegalArgumentException(""The fields must not be null or empty"");",0,0,0,1,2,2,0,1,2,5,75,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,233,        Set<DateTimeFieldType> workingFields = new HashSet<DateTimeFieldType>(fields);,2,0,0,1,2,1,0,4,1,6,78,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,234,        int inputSize = workingFields.size();,1,0,0,1,2,1,2,0,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,235,        boolean reducedPrec = false;,1,0,0,0,0,1,0,0,1,3,28,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,236,        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();,1,0,0,1,2,1,0,2,1,6,62,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,238,        if (workingFields.contains(DateTimeFieldType.monthOfYear())) {,0,0,0,3,7,1,4,0,0,4,62,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,239,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);",1,0,0,0,2,0,5,0,2,4,67,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,240,        } else if (workingFields.contains(DateTimeFieldType.dayOfYear())) {,0,0,0,3,8,2,4,0,0,4,67,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,241,"            reducedPrec = dateByOrdinal(bld, workingFields, extended, strictISO);",1,0,0,0,2,0,5,0,2,4,69,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,242,        } else if (workingFields.contains(DateTimeFieldType.weekOfWeekyear())) {,0,0,0,3,8,2,4,0,0,4,72,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,243,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);",1,0,0,0,2,0,5,0,2,4,66,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,244,        } else if (workingFields.contains(DateTimeFieldType.dayOfMonth())) {,0,0,0,3,8,2,4,0,0,4,68,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,245,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);",1,0,0,0,2,0,5,0,2,4,67,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,246,        } else if (workingFields.contains(DateTimeFieldType.dayOfWeek())) {,0,0,0,3,8,2,4,0,0,4,67,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,247,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);",1,0,0,0,2,0,5,0,2,4,66,10,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,248,        } else if (workingFields.remove(DateTimeFieldType.year())) {,0,0,0,3,8,2,4,0,0,4,60,10,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,249,            bld.append(yearElement());,0,0,0,2,4,0,3,0,1,4,26,12,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,250,            reducedPrec = true;,1,0,0,0,0,0,0,0,2,2,19,11,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,251,        } else if (workingFields.remove(DateTimeFieldType.weekyear())) {,0,0,0,3,8,2,4,0,0,4,64,11,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,252,            bld.append(weekyearElement());,0,0,0,2,4,0,3,0,1,4,30,13,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,253,            reducedPrec = true;,1,0,0,0,0,0,0,0,2,2,19,12,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,255,        boolean datePresent = (workingFields.size() < inputSize);,2,1,0,2,4,1,2,0,0,6,57,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,258,"        time(bld, workingFields, extended, strictISO, reducedPrec, datePresent);",0,0,0,0,2,0,7,0,1,3,72,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,261,        if (bld.canBuildFormatter() == false) {,0,1,0,2,5,1,2,0,1,6,39,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,262,"            throw new IllegalArgumentException(""No valid format for fields: "" + fields);",1,1,0,1,2,3,0,1,2,7,76,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,268,            fields.retainAll(workingFields);,0,0,0,1,2,0,3,0,0,3,32,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,271,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,269,        } catch (UnsupportedOperationException ex) {,1,0,0,1,4,1,0,1,0,5,44,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,272,        return bld.toFormatter();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,293,        boolean reducedPrec = false;,1,0,0,0,0,1,0,0,1,3,28,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,294,        if (fields.remove(DateTimeFieldType.year())) {,0,0,0,3,7,1,4,0,0,4,46,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,295,            bld.append(yearElement());,0,0,0,2,4,0,3,0,1,4,26,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,296,            if (fields.remove(DateTimeFieldType.monthOfYear())) {,0,0,0,3,7,1,4,0,0,4,53,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,297,                if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0,0,0,3,7,1,4,0,0,4,52,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,299,"                    appendSeparator(bld, extended);",0,0,0,0,2,0,3,0,1,3,31,10,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,300,                    bld.appendMonthOfYear(2);,0,0,0,1,2,0,2,0,0,3,25,11,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,301,"                    appendSeparator(bld, extended);",0,0,0,0,2,0,3,0,1,3,31,10,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,302,                    bld.appendDayOfMonth(2);,0,0,0,1,2,0,2,0,0,3,24,11,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,305,                    bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,11,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,306,                    bld.appendMonthOfYear(2);,0,0,0,1,2,0,2,0,0,3,25,11,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,307,                    reducedPrec = true;,1,0,0,0,0,0,0,0,2,2,19,10,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,310,                if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0,0,0,3,7,1,4,0,0,4,52,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,312,"                    checkNotStrictISO(fields, strictISO);",0,0,0,0,2,0,3,0,1,3,37,10,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,313,                    bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,11,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,314,                    bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,11,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,315,                    bld.appendDayOfMonth(2);,0,0,0,1,2,0,2,0,0,3,24,11,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,318,                    reducedPrec = true;,1,0,0,0,0,0,0,0,2,2,19,10,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,322,        } else if (fields.remove(DateTimeFieldType.monthOfYear())) {,0,0,0,3,8,2,4,0,0,4,60,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,323,            bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,324,            bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,325,            bld.appendMonthOfYear(2);,0,0,0,1,2,0,2,0,0,3,25,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,326,            if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0,0,0,3,7,1,4,0,0,4,52,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,328,"                appendSeparator(bld, extended);",0,0,0,0,2,0,3,0,1,3,31,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,329,                bld.appendDayOfMonth(2);,0,0,0,1,2,0,2,0,0,3,24,10,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,332,                reducedPrec = true;,1,0,0,0,0,0,0,0,2,2,19,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,334,        } else if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0,0,0,3,8,2,4,0,0,4,59,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,336,            bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,337,            bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,338,            bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,339,            bld.appendDayOfMonth(2);,0,0,0,1,2,0,2,0,0,3,24,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,341,        return reducedPrec;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,361,        boolean reducedPrec = false;,1,0,0,0,0,1,0,0,1,3,28,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,362,        if (fields.remove(DateTimeFieldType.year())) {,0,0,0,3,7,1,4,0,0,4,46,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,363,            bld.append(yearElement());,0,0,0,2,4,0,3,0,1,4,26,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,364,            if (fields.remove(DateTimeFieldType.dayOfYear())) {,0,0,0,3,7,1,4,0,0,4,51,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,366,"                appendSeparator(bld, extended);",0,0,0,0,2,0,3,0,1,3,31,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,367,                bld.appendDayOfYear(3);,0,0,0,1,2,0,2,0,0,3,23,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,370,                reducedPrec = true;,1,0,0,0,0,0,0,0,2,2,19,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,373,        } else if (fields.remove(DateTimeFieldType.dayOfYear())) {,0,0,0,3,8,2,4,0,0,4,58,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,375,            bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,376,            bld.appendDayOfYear(3);,0,0,0,1,2,0,2,0,0,3,23,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,378,        return reducedPrec;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,398,        boolean reducedPrec = false;,1,0,0,0,0,1,0,0,1,3,28,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,399,        if (fields.remove(DateTimeFieldType.weekyear())) {,0,0,0,3,7,1,4,0,0,4,50,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,400,            bld.append(weekyearElement());,0,0,0,2,4,0,3,0,1,4,30,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,401,            if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {,0,0,0,3,7,1,4,0,0,4,56,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,402,"                appendSeparator(bld, extended);",0,0,0,0,2,0,3,0,1,3,31,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,403,                bld.appendLiteral('W');,0,0,0,1,2,0,2,0,1,4,23,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,404,                bld.appendWeekOfWeekyear(2);,0,0,0,1,2,0,2,0,0,3,28,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,405,                if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0,0,0,3,7,1,4,0,0,4,51,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,407,"                    appendSeparator(bld, extended);",0,0,0,0,2,0,3,0,1,3,31,10,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,408,                    bld.appendDayOfWeek(1);,0,0,0,1,2,0,2,0,0,3,23,11,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,411,                    reducedPrec = true;,1,0,0,0,0,0,0,0,2,2,19,10,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,414,                if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0,0,0,3,7,1,4,0,0,4,51,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,416,"                    checkNotStrictISO(fields, strictISO);",0,0,0,0,2,0,3,0,1,3,37,10,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,417,"                    appendSeparator(bld, extended);",0,0,0,0,2,0,3,0,1,3,31,10,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,418,                    bld.appendLiteral('W');,0,0,0,1,2,0,2,0,1,4,23,11,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,419,                    bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,11,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,420,                    bld.appendDayOfWeek(1);,0,0,0,1,2,0,2,0,0,3,23,11,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,423,                    reducedPrec = true;,1,0,0,0,0,0,0,0,2,2,19,10,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,427,        } else if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {,0,0,0,3,8,2,4,0,0,4,63,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,428,            bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,429,            bld.appendLiteral('W');,0,0,0,1,2,0,2,0,1,4,23,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,430,            bld.appendWeekOfWeekyear(2);,0,0,0,1,2,0,2,0,0,3,28,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,431,            if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0,0,0,3,7,1,4,0,0,4,51,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,433,"                appendSeparator(bld, extended);",0,0,0,0,2,0,3,0,1,3,31,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,434,                bld.appendDayOfWeek(1);,0,0,0,1,2,0,2,0,0,3,23,10,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,437,                reducedPrec = true;,1,0,0,0,0,0,0,0,2,2,19,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,439,        } else if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0,0,0,3,8,2,4,0,0,4,58,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,441,            bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,442,            bld.appendLiteral('W');,0,0,0,1,2,0,2,0,1,4,23,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,443,            bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,444,            bld.appendDayOfWeek(1);,0,0,0,1,2,0,2,0,0,3,23,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,446,        return reducedPrec;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,470,        boolean hour = fields.remove(DateTimeFieldType.hourOfDay());,1,0,0,2,4,1,4,0,0,5,60,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,471,        boolean minute = fields.remove(DateTimeFieldType.minuteOfHour());,1,0,0,2,4,1,4,0,0,5,65,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,472,        boolean second = fields.remove(DateTimeFieldType.secondOfMinute());,1,0,0,2,4,1,4,0,0,5,67,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,473,        boolean milli = fields.remove(DateTimeFieldType.millisOfSecond());,1,0,0,2,4,1,4,0,0,5,66,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,474,        if (!hour && !minute && !second && !milli) {,4,1,0,1,3,1,0,0,4,6,44,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,475,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,477,        if (hour || minute || second || milli) {,4,1,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,478,            if (strictISO && reducedPrec) {,2,1,0,1,3,1,0,0,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,479,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Date was reduced precision: "" + fields);",1,1,0,1,2,3,0,1,2,7,119,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,481,            if (datePresent) {,1,0,0,1,3,1,0,0,0,4,18,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,482,                bld.appendLiteral('T');,0,0,0,1,2,0,2,0,1,4,23,9,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,485,        if (hour && minute && second || (hour && !second && !milli)) {,6,3,0,2,5,1,0,0,2,6,62,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,488,            if (strictISO && datePresent) {,2,1,0,1,3,1,0,0,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,489,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Time was truncated: "" + fields);",1,1,0,1,2,3,0,1,2,7,111,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,491,            if (!hour && (minute && second || (minute && !milli) || second)) {,6,5,0,3,7,1,0,0,2,6,66,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,494,                if (strictISO) {,1,0,0,1,3,1,0,0,0,4,16,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,495,"                    throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);",1,1,0,1,2,3,0,1,2,7,84,10,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,499,        if (hour) {,1,0,0,1,3,1,0,0,0,4,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,500,            bld.appendHourOfDay(2);,0,0,0,1,2,0,2,0,0,3,23,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,501,        } else if (minute || second || milli) {,3,1,0,1,4,2,0,0,0,5,39,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,502,            bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,504,        if (extended && hour && minute) {,3,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,505,            bld.appendLiteral(':');,0,0,0,1,2,0,2,0,1,4,23,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,507,        if (minute) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,508,            bld.appendMinuteOfHour(2);,0,0,0,1,2,0,2,0,0,3,26,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,509,        } else if (second || milli) {,2,1,0,1,4,2,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,510,            bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,512,        if (extended && minute && second) {,3,1,0,1,3,1,0,0,0,5,35,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,513,            bld.appendLiteral(':');,0,0,0,1,2,0,2,0,1,4,23,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,515,        if (second) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,516,            bld.appendSecondOfMinute(2);,0,0,0,1,2,0,2,0,0,3,28,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,517,        } else if (milli) {,1,0,0,1,4,2,0,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,518,            bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,8,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,520,        if (milli) {,1,0,0,1,3,1,0,0,0,4,12,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,521,            bld.appendLiteral('.');,0,0,0,1,2,0,2,0,1,4,23,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,522,            bld.appendMillisOfSecond(3);,0,0,0,1,2,0,2,0,0,3,28,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,524,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,535,        if (strictISO) {,1,0,0,1,3,1,0,0,0,4,16,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,536,"            throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);",1,1,0,1,2,3,0,1,2,7,84,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,538,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,549,        if (extended) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,550,            bld.appendLiteral('-');,0,0,0,1,2,0,2,0,1,4,23,7,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,552,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,569,        if (dp == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,570,            DateTimeParser tOffset = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,2,1,6,55,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,573,            dp = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,35,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,578,        return dp;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,595,        if (ldp == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,596,            ldp = dateElementParser().withZoneUTC();,1,0,0,1,4,0,2,0,2,5,40,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,598,        return ldp;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,613,        if (dpe == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,614,            dpe = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,636,        return dpe;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,654,        if (tp == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,655,            tp = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,35,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,661,        return tp;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,680,        if (ltp == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,681,            ltp = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,686,        return ltp;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,702,        if (tpe == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,704,            DateTimeParser decimalPoint = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,2,1,6,60,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,715,            tpe = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,751,        return tpe;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,775,        if (dtp == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,778,            DateTimeParser time = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,2,1,6,52,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,783,            dtp = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,787,        return dtp;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,810,        if (dotp == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,811,            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,2,1,6,60,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,816,            dotp = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,37,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,821,        return dotp;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,845,        if (ldotp == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,846,            DateTimeParser time = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,2,1,6,52,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,850,            ldotp = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,38,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,855,        return ldotp;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,988,        if (od == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,989,            od = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,35,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,994,        return od;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1007,        if (odt == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1008,            odt = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1013,        return odt;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1026,        if (odtx == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1027,            odtx = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,37,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1032,        return odtx;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1042,        return weekyearWeekDay();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1054,        if (wdt == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1055,            wdt = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1060,        return wdt;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1072,        if (wdtx == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1073,            wdtx = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,37,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1078,        return wdtx;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1089,        if (bd == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1090,            bd = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,35,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1096,        return bd;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1109,        if (bt == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1110,            bt = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,35,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1119,        return bt;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1131,        if (btx == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1132,            btx = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1139,        return btx;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1152,        if (btt == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1153,            btt = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1158,        return btt;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1171,        if (bttx == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1172,            bttx = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,37,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1177,        return bttx;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1189,        if (bdt == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1190,            bdt = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1195,        return bdt;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1207,        if (bdtx == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1208,            bdtx = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,37,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1213,        return bdtx;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1224,        if (bod == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1225,            bod = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1230,        return bod;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1243,        if (bodt == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1244,            bodt = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,37,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1249,        return bodt;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1262,        if (bodtx == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1263,            bodtx = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,38,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1268,        return bodtx;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1278,        if (bwd == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1279,            bwd = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1286,        return bwd;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1298,        if (bwdt == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1299,            bwdt = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,37,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1304,        return bwdt;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1316,        if (bwdtx == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1317,            bwdtx = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,38,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1322,        return bwdtx;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1332,        return yearElement();,0,0,0,1,2,1,1,0,1,5,21,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1342,        if (ym == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1343,            ym = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,35,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1348,        return ym;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1374,        return weekyearElement();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1384,        if (ww == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1385,            ww = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,35,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1390,        return ww;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1400,        if (wwd == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1401,            wwd = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1407,        return wwd;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1416,        return hourElement();,0,0,0,1,2,1,1,0,1,5,21,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1426,        if (hm == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1427,            hm = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,35,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1432,        return hm;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1461,        if (hmsl == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1462,            hmsl = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,37,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1470,        return hmsl;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1500,        if (dh == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1501,            dh = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,35,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1507,        return dh;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1517,        if (dhm == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1518,            dhm = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1524,        return dhm;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1535,        if (dhms == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1536,            dhms = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,37,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1542,        return dhms;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1554,        if (dhmsl == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1555,            dhmsl = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,38,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1561,        return dhmsl;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1573,        if (dhmsf == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1574,            dhmsf = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,38,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1580,        return dhmsf;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1614,        if (we == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1615,            we = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,35,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1619,        return we;,1,0,0,0,0,1,0,0,0,2,10,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1623,        if (wwe == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1624,            wwe = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1629,        return wwe;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1633,        if (dwe == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1634,            dwe = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1639,        return dwe;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1643,        if (dye == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1644,            dye = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/ISODateTimeFormat,16,1649,        return dye;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2752,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2753,            iParsers = parsers;,2,0,0,0,0,0,0,0,1,2,19,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2754,            int est = 0;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2755,            for (int i=parsers.length; --i>=0 ;) {,4,1,0,1,3,2,0,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2756,                DateTimeParser parser = parsers[i];,1,0,1,0,2,0,0,1,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2757,                if (parser != null) {,1,1,0,1,3,1,0,0,0,5,21,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2758,                    int len = parser.estimateParsedLength();,1,0,0,1,2,1,2,0,0,5,40,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2759,                    if (len > est) {,2,1,0,1,3,1,0,0,0,5,16,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2760,                        est = len;,2,0,0,0,0,0,0,0,1,2,10,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2763,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2764,            iParsedLengthEstimate = est;,2,0,0,0,0,0,0,0,1,2,28,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2765,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2768,            return iParsedLengthEstimate;,1,0,0,0,0,1,0,0,0,2,29,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2772,            DateTimeParser[] parsers = iParsers;,2,0,0,0,2,0,0,1,0,3,36,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2773,            int length = parsers.length;,3,0,0,0,0,1,0,0,0,2,28,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2775,            final Object originalState = bucket.saveState();,1,0,0,1,2,1,2,1,1,7,48,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2776,            boolean isOptional = false;,1,0,0,0,0,1,0,0,1,3,27,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2778,            int bestValidPos = position;,2,0,0,0,0,1,0,0,0,2,28,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2779,            Object bestValidState = null;,1,0,0,0,0,0,0,1,0,2,29,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2781,            int bestInvalidPos = position;,2,0,0,0,0,1,0,0,0,2,30,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2783,            for (int i=0; i<length; i++) {,4,1,0,1,3,2,0,0,1,6,30,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2784,                DateTimeParser parser = parsers[i];,1,0,1,0,2,0,0,1,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2785,                if (parser == null) {,1,1,0,1,3,1,0,0,0,5,21,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2787,                    if (bestValidPos <= position) {,2,1,0,1,3,1,0,0,0,5,31,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2788,                        return position;,1,0,0,0,0,1,0,0,0,2,16,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2790,                    isOptional = true;,1,0,0,0,0,0,0,0,2,2,18,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2791,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2793,"                int parsePos = parser.parseInto(bucket, text, position);",1,0,0,0,2,1,5,0,0,4,56,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2794,                if (parsePos >= position) {,2,1,0,1,3,1,0,0,0,5,27,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2795,                    if (parsePos > bestValidPos) {,2,1,0,1,3,1,0,0,0,5,30,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2796,                        if (parsePos >= text.length() ||,1,3,0,1,3,1,2,0,0,6,32,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2801,                            return parsePos;,1,0,0,0,0,1,0,0,0,2,16,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2803,                        bestValidPos = parsePos;,2,0,0,0,0,0,0,0,1,2,24,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2804,                        bestValidState = bucket.saveState();,1,0,0,1,2,0,2,0,1,5,36,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2807,                    if (parsePos < 0) {,1,1,0,1,3,1,0,0,0,5,19,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2808,                        parsePos = ~parsePos;,2,0,0,0,0,0,0,0,2,2,21,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2809,                        if (parsePos > bestInvalidPos) {,2,1,0,1,3,1,0,0,0,5,32,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2810,                            bestInvalidPos = parsePos;,2,0,0,0,0,0,0,0,1,2,26,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2814,                bucket.restoreState(originalState);,0,0,0,1,2,0,3,0,0,3,35,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2817,            if (bestValidPos > position || (bestValidPos == position && isOptional)) {,5,4,0,2,5,1,0,0,0,5,74,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2819,                if (bestValidState != null) {,1,1,0,1,3,1,0,0,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2820,                    bucket.restoreState(bestValidState);,0,0,0,1,2,0,3,0,0,3,36,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2822,                return bestValidPos;,1,0,0,0,0,1,0,0,0,2,20,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2825,            return ~bestInvalidPos;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,691,"            throw new IllegalArgumentException(""Id must not be null"");",0,0,0,1,2,2,0,1,2,5,58,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,145,                        } catch (RuntimeException ex) {,1,0,0,1,4,1,0,1,0,5,31,14,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,149,                            temp = forTimeZone(TimeZone.getDefault());,1,0,0,2,4,0,3,0,2,5,42,14,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,151,                    } catch (IllegalArgumentException ex) {,1,0,0,1,4,1,0,1,0,5,39,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,155,                        temp = UTC;,2,0,0,0,0,0,0,0,1,2,11,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0,0,0,2,4,1,2,1,2,6,70,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0,0,0,1,2,2,0,1,2,5,73,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,205,            return getDefault();,0,0,0,1,2,1,1,0,1,5,20,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,208,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,214,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0,1,0,2,7,1,4,0,2,6,47,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,215,            int offset = parseOffset(id);,1,0,0,1,2,1,2,0,1,6,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,216,            if (offset == 0L) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,217,                return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,219,                id = printOffset(offset);,1,0,0,1,2,0,2,0,2,5,25,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,220,"                return fixedOffsetZone(id, offset);",0,0,0,0,2,1,3,0,1,4,35,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,223,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",1,1,0,1,2,2,0,1,3,7,90,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,237,"        return forOffsetHoursMinutes(hoursOffset, 0);",0,0,0,0,2,1,2,0,1,4,45,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,254,        if (hoursOffset == 0 && minutesOffset == 0) {,2,3,0,1,3,1,0,0,0,5,45,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,255,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,257,        if (minutesOffset < 0 || minutesOffset > 59) {,2,3,0,1,3,1,0,0,0,5,46,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",1,1,0,1,2,2,0,1,2,7,77,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,260,        int offset = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",1,0,0,0,2,1,3,0,0,4,62,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,263,            if (hoursInMinutes < 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",2,0,0,0,2,0,3,0,2,4,67,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",1,0,0,0,2,0,4,0,1,4,66,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",3,0,0,0,2,0,3,0,1,4,85,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,271,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,269,        } catch (ArithmeticException ex) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,270,"            throw new IllegalArgumentException(""Offset is too large"");",0,0,0,1,2,2,0,1,2,5,58,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,272,        return forOffsetMillis(offset);,0,0,0,1,2,1,2,0,1,5,31,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,282,        String id = printOffset(millisOffset);,1,0,0,1,2,0,2,1,1,6,38,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,283,"        return fixedOffsetZone(id, millisOffset);",0,0,0,0,2,1,3,0,1,4,41,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,302,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,303,            return getDefault();,0,0,0,1,2,1,1,0,1,5,20,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,305,        final String id = zone.getID();,1,0,0,1,2,1,2,1,1,7,31,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,306,"        if (id.equals(""UTC"")) {",0,0,0,2,5,1,2,0,1,5,23,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,307,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,311,        DateTimeZone dtz = null;,1,0,0,0,0,0,0,1,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,312,        String convId = getConvertedId(id);,1,0,0,1,2,0,2,1,1,6,35,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,313,        if (convId != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,314,            dtz = cProvider.getZone(convId);,1,0,0,1,2,0,3,0,1,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,316,        if (dtz == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,317,            dtz = cProvider.getZone(id);,1,0,0,1,2,0,3,0,1,5,28,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,319,        if (dtz != null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,320,            return dtz;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,324,        if (convId == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,325,            convId = zone.getID();,1,0,0,1,2,0,2,0,1,5,22,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,326,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0,1,0,2,7,1,4,0,2,6,61,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,327,                convId = convId.substring(3);,1,0,0,1,2,0,2,0,1,5,29,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,328,                int offset = parseOffset(convId);,1,0,0,1,2,1,2,0,1,6,33,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,329,                if (offset == 0L) {,1,1,0,1,3,1,0,0,0,5,19,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,330,                    return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,332,                    convId = printOffset(offset);,1,0,0,1,2,0,2,0,2,5,29,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,333,"                    return fixedOffsetZone(convId, offset);",0,0,0,0,2,1,3,0,1,4,39,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,337,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",1,1,0,1,2,2,0,1,3,7,90,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,349,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,350,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,352,        if (iFixedOffsetCache == null) {,1,1,0,1,3,1,0,0,0,5,32,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",1,0,0,1,2,1,0,4,2,6,71,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,356,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,1,0,0,1,2,0,3,2,0,5,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,357,        if (ref != null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,358,            zone = ref.get();,1,0,0,1,2,0,2,0,1,5,17,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,359,            if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,360,                return zone;,1,0,0,0,0,1,0,0,0,2,12,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);",4,0,0,0,2,1,0,1,2,5,55,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",1,0,0,1,4,1,3,2,1,7,65,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,365,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,374,        return cAvailableIDs;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,387,        return cProvider;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,401,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,402,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,403,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0,0,0,2,4,1,2,1,2,6,71,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,405,        setProvider0(provider);,0,0,0,1,2,0,2,0,1,4,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,406,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,420,            throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,424,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0,0,0,1,2,2,0,1,2,5,71,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,427,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,450,                    provider = (Provider) Class.forName(providerClass).newInstance();,1,0,0,1,6,0,4,1,1,6,65,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,454,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,451,                } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,452,                    Thread thread = Thread.currentThread();,1,0,0,1,2,0,2,1,0,5,39,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,453,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0,0,0,1,4,0,5,0,0,3,54,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,456,        } catch (SecurityException ex) {,1,0,0,1,4,1,0,1,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,463,            } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,464,                Thread thread = Thread.currentThread();,1,0,0,1,2,0,2,1,0,5,39,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,465,"                thread.getThreadGroup().uncaughtException(thread, ex);",0,0,0,1,4,0,5,0,0,3,54,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,470,            provider = new UTCProvider();,1,0,0,1,2,1,0,1,2,6,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,486,        return cNameProvider;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,500,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,501,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,502,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0,0,0,2,4,1,2,1,2,6,75,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,504,        setNameProvider0(nameProvider);,0,0,0,1,2,0,2,0,1,4,31,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,505,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,534,                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();,1,0,0,1,6,0,4,1,1,6,73,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,538,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,535,                } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,536,                    Thread thread = Thread.currentThread();,1,0,0,1,2,0,2,1,0,5,39,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,537,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0,0,0,1,4,0,5,0,0,3,54,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,540,        } catch (SecurityException ex) {,1,0,0,1,4,1,0,1,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,559,"        Map<String, String> map = cZoneIdConversion;",2,0,0,0,0,0,0,3,0,2,44,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,560,        if (map == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,562,"            map = new HashMap<String, String>();",1,0,0,1,2,1,0,3,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,563,"            map.put(""GMT"", ""UTC"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,564,"            map.put(""WET"", ""WET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,565,"            map.put(""CET"", ""CET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,566,"            map.put(""MET"", ""CET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,567,"            map.put(""ECT"", ""CET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,568,"            map.put(""EET"", ""EET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,569,"            map.put(""MIT"", ""Pacific/Apia"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,570,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0,0,0,0,2,0,2,0,2,3,58,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,571,"            map.put(""AST"", ""America/Anchorage"");",0,0,0,0,2,0,2,0,2,3,36,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,572,"            map.put(""PST"", ""America/Los_Angeles"");",0,0,0,0,2,0,2,0,2,3,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,573,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",0,0,0,0,2,0,2,0,2,3,56,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,574,"            map.put(""PNT"", ""America/Phoenix"");",0,0,0,0,2,0,2,0,2,3,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,575,"            map.put(""CST"", ""America/Chicago"");",0,0,0,0,2,0,2,0,2,3,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,576,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0,0,0,0,2,0,2,0,2,3,58,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,577,"            map.put(""IET"", ""America/Indiana/Indianapolis"");",0,0,0,0,2,0,2,0,2,3,47,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,578,"            map.put(""PRT"", ""America/Puerto_Rico"");",0,0,0,0,2,0,2,0,2,3,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,579,"            map.put(""CNT"", ""America/St_Johns"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,580,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");",0,0,0,0,2,0,2,0,2,3,49,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,581,"            map.put(""BET"", ""America/Sao_Paulo"");",0,0,0,0,2,0,2,0,2,3,36,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,582,"            map.put(""ART"", ""Africa/Cairo"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,583,"            map.put(""CAT"", ""Africa/Harare"");",0,0,0,0,2,0,2,0,2,3,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,584,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0,0,0,0,2,0,2,0,2,3,37,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,585,"            map.put(""NET"", ""Asia/Yerevan"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,586,"            map.put(""PLT"", ""Asia/Karachi"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,587,"            map.put(""IST"", ""Asia/Kolkata"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,588,"            map.put(""BST"", ""Asia/Dhaka"");",0,0,0,0,2,0,2,0,2,3,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,589,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,590,"            map.put(""CTT"", ""Asia/Shanghai"");",0,0,0,0,2,0,2,0,2,3,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,591,"            map.put(""JST"", ""Asia/Tokyo"");",0,0,0,0,2,0,2,0,2,3,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,592,"            map.put(""ACT"", ""Australia/Darwin"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,593,"            map.put(""AET"", ""Australia/Sydney"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,594,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0,0,0,0,2,0,2,0,2,3,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,595,"            map.put(""NST"", ""Pacific/Auckland"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,596,            cZoneIdConversion = map;,2,0,0,0,0,0,0,0,1,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,598,        return map.get(id);,0,0,0,1,2,1,3,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,604,        Chronology chrono = new BaseChronology() {,1,0,0,1,3,1,0,2,1,6,42,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,618,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,0,0,0,1,8,2,5,0,2,5,72,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,631,        StringBuffer buf = new StringBuffer();,1,0,0,1,2,1,0,2,1,6,38,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,632,        if (offset >= 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,633,            buf.append('+');,0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,635,            buf.append('-');,0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,636,            offset = -offset;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,639,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,1,0,0,0,3,55,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,0,2,0,4,0,0,2,47,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,1,2,1,0,0,1,6,58,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,643,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,1,0,0,0,3,59,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,644,        buf.append(':');,0,0,0,1,2,0,2,0,1,4,16,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,0,2,0,4,0,0,2,49,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,647,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,648,            return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,651,        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,1,0,0,0,3,59,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,652,        buf.append(':');,0,0,0,1,2,0,2,0,1,4,16,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,653,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0,0,0,0,2,0,4,0,0,2,49,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,654,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,655,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,656,            return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,659,        buf.append('.');,0,0,0,1,2,0,2,0,1,4,16,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,660,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0,0,0,0,2,0,4,0,0,2,48,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,661,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,670,        if (cOffsetFormatter == null) {,1,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,49,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,675,        return cOffsetFormatter;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,729,"        return getShortName(instant, null);",0,0,0,0,2,1,2,0,1,4,35,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,744,        if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,745,            locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,747,        String nameKey = getNameKey(instant);,1,0,0,1,2,0,2,1,1,6,37,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,748,        if (nameKey == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,749,            return iID;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,751,"        String name = cNameProvider.getShortName(locale, iID, nameKey);",1,0,0,0,2,0,5,1,0,4,63,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,752,        if (name != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,753,            return name;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,755,        return printOffset(getOffset(instant));,0,0,0,2,4,1,3,0,2,5,39,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,769,"        return getName(instant, null);",0,0,0,0,2,1,2,0,1,4,30,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,784,        if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,785,            locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,787,        String nameKey = getNameKey(instant);,1,0,0,1,2,0,2,1,1,6,37,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,788,        if (nameKey == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,789,            return iID;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,791,"        String name = cNameProvider.getName(locale, iID, nameKey);",1,0,0,0,2,0,5,1,0,4,58,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,792,        if (name != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,793,            return name;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,795,        return printOffset(getOffset(instant));,0,0,0,2,4,1,3,0,2,5,39,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,813,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,814,            return getOffset(DateTimeUtils.currentTimeMillis());,0,0,0,2,4,1,3,0,1,5,52,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,816,        return getOffset(instant.getMillis());,0,0,0,2,4,1,3,0,1,5,38,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,844,        return getOffset(instant) == getStandardOffset(instant);,0,1,0,1,4,1,4,0,2,6,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,890,            if ((offsetLocal - offsetAdjusted) < 0) {,2,2,0,2,5,1,0,0,0,5,41,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,894,                long nextLocal = nextTransition(instantAdjusted);,1,0,0,1,2,1,2,0,1,6,49,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,895,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,3,1,0,1,2,1,1,0,1,7,66,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,896,                if (nextLocal != nextAdjusted) {,2,1,0,1,3,1,0,0,0,5,32,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,897,                    return offsetLocal;,1,0,0,0,0,1,0,0,0,2,19,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,899,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,906,                    return offsetPrev;,1,0,0,0,0,1,0,0,0,2,18,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,928,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,73,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,982,            if (strict || offsetLocal < 0) {,2,2,0,1,3,1,0,0,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,984,                long nextLocal = nextTransition(instantLocal - offsetLocal);,3,1,0,1,2,1,1,0,1,7,60,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,985,                if (nextLocal == (instantLocal - offsetLocal)) {,3,2,0,2,5,1,0,0,0,5,48,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,986,                    nextLocal = Long.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,27,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,988,                long nextAdjusted = nextTransition(instantLocal - offset);,3,1,0,1,2,1,1,0,1,7,58,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,989,                if (nextAdjusted == (instantLocal - offset)) {,3,2,0,2,5,1,0,0,0,5,46,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,990,                    nextAdjusted = Long.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,30,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,992,                if (nextLocal != nextAdjusted) {,2,1,0,1,3,1,0,0,0,5,32,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,994,                    if (strict) {,1,0,0,1,3,1,0,0,0,4,13,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,996,"                        throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" +",0,1,0,0,1,2,0,1,2,5,91,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1003,                        offset = offsetLocal;,2,0,0,0,0,0,0,0,1,2,21,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1012,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,78,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1028,        if (newZone == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1029,            newZone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,36,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1031,        if (newZone == this) {,1,1,0,1,3,2,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1032,            return oldInstant;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1034,        long instantLocal = convertUTCToLocal(oldInstant);,1,0,0,1,2,1,2,0,1,6,50,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1035,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",0,0,0,0,2,1,4,0,1,4,66,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1145,        if (isFixed()) {,0,0,0,2,5,1,1,0,1,5,16,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1146,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1149,            localDateTime.toDateTime(this);,0,0,0,1,2,1,2,0,0,4,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1150,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1151,        } catch (IllegalArgumentException ex) {,1,0,0,1,4,1,0,1,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1152,            return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1167,        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;,4,2,0,0,0,1,0,0,0,3,69,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1168,        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;,4,2,0,0,0,1,0,0,0,3,68,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1169,        long offsetBefore = getOffset(instantBefore);,1,0,0,1,2,1,2,0,1,6,45,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1170,        long offsetAfter = getOffset(instantAfter);,1,0,0,1,2,1,2,0,1,6,43,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1171,        if (offsetBefore <= offsetAfter) {,2,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1172,"            return instant;  // not an overlap (less than is a gap, equal is normal case)",1,0,0,0,2,2,0,0,0,3,77,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1176,        long diff = offsetBefore - offsetAfter;,3,1,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1177,        long transition = nextTransition(instantBefore);,1,0,0,1,2,1,2,0,1,6,48,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1178,        long overlapStart = transition - diff;,3,1,0,0,0,1,0,0,0,3,38,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1179,        long overlapEnd = transition + diff;,3,1,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1180,        if (instant < overlapStart || instant >= overlapEnd) {,4,3,0,1,3,1,0,0,0,5,54,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1181,          return instant;  // not an overlap,1,0,0,0,0,1,0,0,0,2,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1185,        long afterStart = instant - overlapStart;,3,1,0,0,0,1,0,0,0,3,41,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1186,        if (afterStart >= diff) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1188,          return earlierOrLater ? instant : instant - diff;,4,1,0,0,0,1,0,0,0,3,49,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1191,          return earlierOrLater ? instant + diff : instant;,4,1,0,0,0,1,0,0,0,3,49,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1233,        return java.util.TimeZone.getTimeZone(iID);,3,0,0,1,2,1,2,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1258,        return getID();,0,0,0,1,2,1,1,0,1,5,15,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,1268,        return new Stub(iID);,1,0,0,1,2,2,0,1,1,6,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,155,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,156,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,168,        super(zone);,1,0,0,1,2,1,0,0,1,5,12,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,169,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,182,        super(chronology);,1,0,0,1,2,1,0,0,1,5,18,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,183,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,193,        super(instant);,1,0,0,1,2,1,0,0,1,5,15,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,194,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,206,"        super(instant, zone);",2,0,0,0,2,1,0,0,1,4,21,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,207,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,220,"        super(instant, chronology);",2,0,0,0,2,1,0,0,1,4,27,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,221,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,241,"        super(instant, (Chronology) null);",1,0,0,1,4,1,0,1,1,6,34,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,242,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,265,"        super(instant, zone);",2,0,0,0,2,1,0,0,1,4,21,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,266,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,286,"        super(instant, DateTimeUtils.getChronology(chronology));",1,0,0,1,4,1,3,0,1,6,56,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,287,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,307,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0);",5,0,0,0,2,1,0,0,1,4,68,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,308,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,331,"        super(year, monthOfYear, dayOfMonth,",3,0,0,0,1,1,0,0,1,4,36,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,333,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,357,"        super(year, monthOfYear, dayOfMonth,",3,0,0,0,1,1,0,0,1,4,36,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,359,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,381,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0);",6,0,0,0,2,1,0,0,1,4,81,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,382,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,407,"        super(year, monthOfYear, dayOfMonth,",3,0,0,0,1,1,0,0,1,4,36,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,409,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,435,"        super(year, monthOfYear, dayOfMonth,",3,0,0,0,1,1,0,0,1,4,36,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,437,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,460,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);",7,0,0,0,2,1,0,0,1,4,94,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,461,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,487,"        super(year, monthOfYear, dayOfMonth,",3,0,0,0,1,1,0,0,1,4,36,3,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,489,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,89,        return new DateTime();,0,0,0,1,2,2,0,1,1,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,101,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,102,"            throw new NullPointerException(""Zone must not be null"");",0,0,0,1,2,2,0,1,2,5,56,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,104,        return new DateTime(zone);,1,0,0,1,2,2,0,1,1,6,26,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,116,        if (chronology == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,117,"            throw new NullPointerException(""Chronology must not be null"");",0,0,0,1,2,2,0,1,2,5,62,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,119,        return new DateTime(chronology);,1,0,0,1,2,2,0,1,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,133,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());",0,0,0,1,6,1,5,0,1,5,73,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,144,        return formatter.parseDateTime(str);,0,0,0,1,2,1,3,0,0,4,36,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,537,        if (getChronology() == ISOChronology.getInstance()) {,0,1,0,2,7,1,3,0,1,6,53,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,538,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,540,        return super.toDateTimeISO();,1,0,0,1,2,2,0,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,550,        zone = DateTimeUtils.getZone(zone);,1,0,0,1,2,0,3,0,1,5,35,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,551,        if (getZone() == zone) {,1,1,0,2,5,1,1,0,1,7,24,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,552,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,554,        return super.toDateTime(zone);,2,0,0,1,2,2,0,0,0,4,30,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,564,        chronology = DateTimeUtils.getChronology(chronology);,1,0,0,1,2,0,3,0,1,5,53,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,565,        if (getChronology() == chronology) {,1,1,0,2,5,1,1,0,1,7,36,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,566,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,568,        return super.toDateTime(chronology);,2,0,0,1,2,2,0,0,0,4,36,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",2,1,0,1,8,3,2,1,3,8,84,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,595,        newChronology = DateTimeUtils.getChronology(newChronology);,1,0,0,1,2,0,3,0,1,5,59,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,596,"        return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));",2,1,0,1,8,3,2,1,3,8,92,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,618,        return withChronology(getChronology().withZone(newZone));,0,0,0,2,6,1,4,0,2,5,57,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,639,        newZone = DateTimeUtils.getZone(newZone);,1,0,0,1,2,0,3,0,1,5,41,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,640,        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());,1,0,0,2,4,0,3,1,1,6,61,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,641,        if (newZone == originalZone) {,2,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,642,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,645,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());",1,0,0,1,4,1,4,0,1,6,68,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,646,"        return new DateTime(millis, getChronology().withZone(newZone));",1,0,0,1,6,2,3,1,2,7,63,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);",1,0,0,1,6,1,3,0,3,6,60,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,666,        return withMillis(newMillis);,0,0,0,1,2,1,2,0,1,5,29,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);",1,0,0,1,6,1,3,0,3,6,59,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,686,        return withMillis(newMillis);,0,0,0,1,2,1,2,0,1,5,29,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,709,        Chronology chrono = getChronology();,1,0,0,1,2,0,1,1,1,6,36,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,710,        long instant = getMillis();,1,0,0,1,2,1,1,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,711,"        instant = chrono.year().set(instant, year);",1,0,0,1,4,0,5,0,1,5,43,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,712,"        instant = chrono.monthOfYear().set(instant, monthOfYear);",1,0,0,1,4,0,5,0,1,5,57,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,713,"        instant = chrono.dayOfMonth().set(instant, dayOfMonth);",1,0,0,1,4,0,5,0,1,5,55,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,714,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,737,        Chronology chrono = getChronology();,1,0,0,1,2,0,1,1,1,6,36,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,738,        long instant = getMillis();,1,0,0,1,2,1,1,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,739,"        instant = chrono.hourOfDay().set(instant, hourOfDay);",1,0,0,1,4,0,5,0,1,5,53,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,740,"        instant = chrono.minuteOfHour().set(instant, minuteOfHour);",1,0,0,1,4,0,5,0,1,5,59,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,741,"        instant = chrono.secondOfMinute().set(instant, secondOfMinute);",1,0,0,1,4,0,5,0,1,5,63,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,742,"        instant = chrono.millisOfSecond().set(instant, millisOfSecond);",1,0,0,1,4,0,5,0,1,5,63,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,743,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,759,        return toLocalDate().toDateTimeAtStartOfDay(getZone());,0,0,0,2,6,1,3,0,2,5,55,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,776,        if (partial == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,777,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,779,"        return withMillis(getChronology().set(partial, getMillis()));",0,0,0,1,8,1,5,0,3,5,61,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,802,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,803,"            throw new IllegalArgumentException(""Field must not be null"");",0,0,0,1,2,2,0,1,2,5,61,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,805,"        long instant = fieldType.getField(getChronology()).set(getMillis(), value);",1,0,0,2,8,1,6,0,2,6,75,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,806,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,828,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,829,"            throw new IllegalArgumentException(""Field must not be null"");",0,0,0,1,2,2,0,1,2,5,61,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,831,        if (amount == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,832,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,834,"        long instant = fieldType.getField(getChronology()).add(getMillis(), amount);",1,0,0,2,8,1,6,0,2,6,76,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,835,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,850,        if (durationToAdd == 0 || scalar == 0) {,2,3,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,851,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,853,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);",1,0,0,1,6,1,5,0,2,6,71,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,854,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,868,        if (durationToAdd == null || scalar == 0) {,2,3,0,1,3,1,0,0,0,5,43,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,869,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,871,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0,0,0,1,4,1,4,0,1,5,60,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,890,        if (period == null || scalar == 0) {,2,3,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,891,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,893,"        long instant = getChronology().add(period, getMillis(), scalar);",1,0,0,1,6,1,5,0,2,6,64,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,894,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,909,"        return withDurationAdded(duration, 1);",0,0,0,0,2,1,2,0,1,4,38,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,923,"        return withDurationAdded(duration, 1);",0,0,0,0,2,1,2,0,1,4,38,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,949,"        return withPeriodAdded(period, 1);",0,0,0,0,2,1,2,0,1,4,34,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,976,        if (years == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,977,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,979,"        long instant = getChronology().years().add(getMillis(), years);",1,0,0,1,8,1,5,0,2,6,63,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,980,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1006,        if (months == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1007,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1009,"        long instant = getChronology().months().add(getMillis(), months);",1,0,0,1,8,1,5,0,2,6,65,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1010,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1032,        if (weeks == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1033,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1035,"        long instant = getChronology().weeks().add(getMillis(), weeks);",1,0,0,1,8,1,5,0,2,6,63,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1036,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1067,        if (days == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1068,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1070,"        long instant = getChronology().days().add(getMillis(), days);",1,0,0,1,8,1,5,0,2,6,61,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1071,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1098,        if (hours == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1099,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1101,"        long instant = getChronology().hours().add(getMillis(), hours);",1,0,0,1,8,1,5,0,2,6,63,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1102,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1125,        if (minutes == 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1126,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1128,"        long instant = getChronology().minutes().add(getMillis(), minutes);",1,0,0,1,8,1,5,0,2,6,67,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1129,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1152,        if (seconds == 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1153,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1155,"        long instant = getChronology().seconds().add(getMillis(), seconds);",1,0,0,1,8,1,5,0,2,6,67,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1156,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1178,        if (millis == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1179,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1181,"        long instant = getChronology().millis().add(getMillis(), millis);",1,0,0,1,8,1,5,0,2,6,65,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1182,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1197,"        return withDurationAdded(duration, -1);",0,0,0,0,2,1,2,0,2,4,39,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1211,"        return withDurationAdded(duration, -1);",0,0,0,0,2,1,2,0,2,4,39,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1238,"        return withPeriodAdded(period, -1);",0,0,0,0,2,1,2,0,2,4,35,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1265,        if (years == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1266,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1268,"        long instant = getChronology().years().subtract(getMillis(), years);",1,0,0,1,8,1,5,0,2,6,68,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1269,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1295,        if (months == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1296,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1298,"        long instant = getChronology().months().subtract(getMillis(), months);",1,0,0,1,8,1,5,0,2,6,70,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1299,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1321,        if (weeks == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1322,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1324,"        long instant = getChronology().weeks().subtract(getMillis(), weeks);",1,0,0,1,8,1,5,0,2,6,68,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1325,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1356,        if (days == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1357,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1359,"        long instant = getChronology().days().subtract(getMillis(), days);",1,0,0,1,8,1,5,0,2,6,66,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1360,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1388,        if (hours == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1389,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1391,"        long instant = getChronology().hours().subtract(getMillis(), hours);",1,0,0,1,8,1,5,0,2,6,68,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1392,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1415,        if (minutes == 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1416,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1418,"        long instant = getChronology().minutes().subtract(getMillis(), minutes);",1,0,0,1,8,1,5,0,2,6,72,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1419,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1442,        if (seconds == 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1443,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1445,"        long instant = getChronology().seconds().subtract(getMillis(), seconds);",1,0,0,1,8,1,5,0,2,6,72,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1446,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1469,        if (millis == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1470,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1472,"        long instant = getChronology().millis().subtract(getMillis(), millis);",1,0,0,1,8,1,5,0,2,6,70,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1473,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1485,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1486,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0,0,0,1,2,2,0,1,2,5,77,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1488,        DateTimeField field = type.getField(getChronology());,1,0,0,2,4,0,3,1,1,6,53,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1489,        if (field.isSupported() == false) {,0,1,0,2,5,1,2,0,1,6,35,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1490,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",1,1,0,1,2,2,0,1,3,7,76,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1492,"        return new Property(this, field);",1,0,0,0,2,3,0,1,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1503,"        return new DateMidnight(getMillis(), getChronology());",0,0,0,1,6,2,2,1,3,6,54,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1515,"        return new YearMonthDay(getMillis(), getChronology());",0,0,0,1,6,2,2,1,3,6,54,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1527,"        return new TimeOfDay(getMillis(), getChronology());",0,0,0,1,6,2,2,1,3,6,51,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1538,"        return new LocalDateTime(getMillis(), getChronology());",0,0,0,1,6,2,2,1,3,6,55,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1549,"        return new LocalDate(getMillis(), getChronology());",0,0,0,1,6,2,2,1,3,6,51,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1560,"        return new LocalTime(getMillis(), getChronology());",0,0,0,1,6,2,2,1,3,6,51,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1577,"        return withMillis(getChronology().era().set(getMillis(), era));",0,0,0,1,10,1,6,0,3,5,63,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1593,"        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));",0,0,0,1,10,1,6,0,3,5,81,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1609,"        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));",0,0,0,1,10,1,6,0,3,5,75,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1625,"        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));",0,0,0,1,10,1,6,0,3,5,83,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1641,"        return withMillis(getChronology().year().set(getMillis(), year));",0,0,0,1,10,1,6,0,3,5,65,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1663,"        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));",0,0,0,1,10,1,6,0,3,5,73,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1679,"        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));",0,0,0,1,10,1,6,0,3,5,79,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1700,"        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));",0,0,0,1,10,1,6,0,3,5,85,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1716,"        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));",0,0,0,1,10,1,6,0,3,5,75,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1732,"        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));",0,0,0,1,10,1,6,0,3,5,77,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1748,"        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));",0,0,0,1,10,1,6,0,3,5,75,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1765,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));",0,0,0,1,10,1,6,0,3,5,70,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1781,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));",0,0,0,1,10,1,6,0,3,5,75,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1797,"        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));",0,0,0,1,10,1,6,0,3,5,77,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1813,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0,0,0,1,10,1,6,0,3,5,77,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1829,"        return withMillis(getChronology().millisOfDay().set(getMillis(), millis));",0,0,0,1,10,1,6,0,3,5,74,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1840,"        return new Property(this, getChronology().era());",0,0,0,1,6,3,2,1,2,6,49,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1849,"        return new Property(this, getChronology().centuryOfEra());",0,0,0,1,6,3,2,1,2,6,58,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1858,"        return new Property(this, getChronology().yearOfCentury());",0,0,0,1,6,3,2,1,2,6,59,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1867,"        return new Property(this, getChronology().yearOfEra());",0,0,0,1,6,3,2,1,2,6,55,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1876,"        return new Property(this, getChronology().year());",0,0,0,1,6,3,2,1,2,6,50,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1885,"        return new Property(this, getChronology().weekyear());",0,0,0,1,6,3,2,1,2,6,54,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1894,"        return new Property(this, getChronology().monthOfYear());",0,0,0,1,6,3,2,1,2,6,57,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1903,"        return new Property(this, getChronology().weekOfWeekyear());",0,0,0,1,6,3,2,1,2,6,60,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1912,"        return new Property(this, getChronology().dayOfYear());",0,0,0,1,6,3,2,1,2,6,55,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1921,"        return new Property(this, getChronology().dayOfMonth());",0,0,0,1,6,3,2,1,2,6,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1930,"        return new Property(this, getChronology().dayOfWeek());",0,0,0,1,6,3,2,1,2,6,55,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1941,"        return new Property(this, getChronology().hourOfDay());",0,0,0,1,6,3,2,1,2,6,55,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1950,"        return new Property(this, getChronology().minuteOfDay());",0,0,0,1,6,3,2,1,2,6,57,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1959,"        return new Property(this, getChronology().minuteOfHour());",0,0,0,1,6,3,2,1,2,6,58,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1968,"        return new Property(this, getChronology().secondOfDay());",0,0,0,1,6,3,2,1,2,6,57,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1977,"        return new Property(this, getChronology().secondOfMinute());",0,0,0,1,6,3,2,1,2,6,60,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1986,"        return new Property(this, getChronology().millisOfDay());",0,0,0,1,6,3,2,1,2,6,57,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,1995,"        return new Property(this, getChronology().millisOfSecond());",0,0,0,1,6,3,2,1,2,6,60,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,61,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());",0,0,0,1,6,1,4,0,0,4,69,5,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,73,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));",0,0,0,1,6,1,5,0,0,4,73,5,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,74,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,86,"        this(DateTimeUtils.currentTimeMillis(), chronology);",1,0,0,1,4,1,2,0,0,5,52,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,87,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,97,"        this(instant, ISOChronology.getInstance());",1,0,0,1,4,1,2,0,0,5,43,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,98,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,110,"        this(instant, ISOChronology.getInstance(zone));",1,0,0,1,4,1,3,0,0,5,47,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,111,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,124,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,125,        iChronology = checkChronology(chronology);,1,0,0,1,2,0,2,0,2,5,42,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,126,"        iMillis = checkInstant(instant, iChronology);",1,0,0,0,2,0,3,0,2,4,45,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,127,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,146,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,1,0,0,1,4,0,4,1,0,5,89,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",1,0,0,0,4,0,5,1,1,5,76,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,149,        iChronology = chrono;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",1,0,0,0,4,0,6,0,2,4,76,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,151,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,168,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,169,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,1,0,0,1,4,0,4,1,0,5,89,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,170,"        iChronology = checkChronology(converter.getChronology(instant, chronology));",1,0,0,0,4,0,5,0,2,4,76,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,171,"        iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);",1,0,0,0,4,0,6,0,2,4,85,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,172,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,195,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",4,0,0,0,1,1,0,0,0,3,46,4,0.0,0,0
defect4j,time,org/joda/time/base/BaseDateTime,16,197,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,66,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,67,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0,0,0,1,2,2,0,1,2,5,77,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,69,        return type.getField(getChronology()).get(getMillis());,0,0,0,2,8,1,5,0,2,5,55,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,79,        return getChronology().era().get(getMillis());,0,0,0,2,8,1,4,0,2,5,46,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,88,        return getChronology().centuryOfEra().get(getMillis());,0,0,0,2,8,1,4,0,2,5,55,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,97,        return getChronology().yearOfEra().get(getMillis());,0,0,0,2,8,1,4,0,2,5,52,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,106,        return getChronology().yearOfCentury().get(getMillis());,0,0,0,2,8,1,4,0,2,5,56,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,115,        return getChronology().year().get(getMillis());,0,0,0,2,8,1,4,0,2,5,47,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,130,        return getChronology().weekyear().get(getMillis());,0,0,0,2,8,1,4,0,2,5,51,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,139,        return getChronology().monthOfYear().get(getMillis());,0,0,0,2,8,1,4,0,2,5,54,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,153,        return getChronology().weekOfWeekyear().get(getMillis());,0,0,0,2,8,1,4,0,2,5,57,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,162,        return getChronology().dayOfYear().get(getMillis());,0,0,0,2,8,1,4,0,2,5,52,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,173,        return getChronology().dayOfMonth().get(getMillis());,0,0,0,2,8,1,4,0,2,5,53,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,184,        return getChronology().dayOfWeek().get(getMillis());,0,0,0,2,8,1,4,0,2,5,52,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,194,        return getChronology().hourOfDay().get(getMillis());,0,0,0,2,8,1,4,0,2,5,52,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,203,        return getChronology().minuteOfDay().get(getMillis());,0,0,0,2,8,1,4,0,2,5,54,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,212,        return getChronology().minuteOfHour().get(getMillis());,0,0,0,2,8,1,4,0,2,5,55,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,221,        return getChronology().secondOfDay().get(getMillis());,0,0,0,2,8,1,4,0,2,5,54,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,230,        return getChronology().secondOfMinute().get(getMillis());,0,0,0,2,8,1,4,0,2,5,57,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,239,        return getChronology().millisOfDay().get(getMillis());,0,0,0,2,8,1,4,0,2,5,54,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,248,        return getChronology().millisOfSecond().get(getMillis());,0,0,0,2,8,1,4,0,2,5,57,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,270,        if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,271,            locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,273,        DateTimeZone zone = getZone();,1,0,0,1,2,0,1,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,274,"        Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);",1,0,0,1,4,0,5,1,0,5,63,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,275,        cal.setTime(toDate());,0,0,0,2,4,0,3,0,1,4,22,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,276,        return cal;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,294,        DateTimeZone zone = getZone();,1,0,0,1,2,0,1,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,295,        GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());,1,0,0,2,4,1,2,2,1,7,65,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,296,        cal.setTime(toDate());,0,0,0,2,4,0,3,0,1,4,22,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,297,        return cal;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,308,        if (pattern == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,309,            return toString();,0,0,0,1,2,1,1,0,1,5,18,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,311,        return DateTimeFormat.forPattern(pattern).print(this);,0,0,0,1,4,2,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,322,        if (pattern == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,323,            return toString();,0,0,0,1,2,1,1,0,1,5,18,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractDateTime,16,325,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0,0,0,1,6,2,6,0,0,4,73,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,71,        return getChronology().getZone();,0,0,0,1,4,1,2,0,1,5,33,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,89,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,90,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0,0,0,1,2,2,0,1,2,5,77,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,92,        return type.getField(getChronology()).get(getMillis());,0,0,0,2,8,1,5,0,2,5,55,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,103,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,104,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,106,        return type.getField(getChronology()).isSupported();,0,0,0,2,6,1,4,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,124,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,125,"            throw new IllegalArgumentException(""The DateTimeField must not be null"");",0,0,0,1,2,2,0,1,2,5,73,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,127,        return field.get(getMillis());,0,0,0,2,4,1,3,0,1,5,30,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,137,        return new Instant(getMillis());,0,0,0,2,4,2,1,1,2,6,32,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,146,"        return new DateTime(getMillis(), getZone());",0,0,0,1,6,2,2,1,3,6,44,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,155,"        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));",0,0,0,2,8,2,4,1,3,6,71,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,165,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,1,0,0,2,4,0,3,1,1,6,65,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,166,        chrono = chrono.withZone(zone);,1,0,0,1,2,0,3,0,1,5,31,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,167,"        return new DateTime(getMillis(), chrono);",1,0,0,1,4,2,1,1,2,7,41,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,177,"        return new DateTime(getMillis(), chronology);",1,0,0,1,4,2,1,1,2,7,45,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,191,"        return new MutableDateTime(getMillis(), getZone());",0,0,0,1,6,2,2,1,3,6,51,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,200,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));",0,0,0,2,8,2,4,1,3,6,78,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,210,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,1,0,0,2,4,0,3,1,1,6,65,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,211,        chrono = chrono.withZone(zone);,1,0,0,1,2,0,3,0,1,5,31,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,212,"        return new MutableDateTime(getMillis(), chrono);",1,0,0,1,4,2,1,1,2,7,48,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,222,"        return new MutableDateTime(getMillis(), chronology);",1,0,0,1,4,2,1,1,2,7,52,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,235,        return new Date(getMillis());,0,0,0,2,4,2,1,1,2,6,29,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,263,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,278,        return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,296,        if (this == other) {,1,1,0,1,3,2,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,297,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,300,        long otherMillis = other.getMillis();,1,0,0,1,2,1,2,0,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,301,        long thisMillis = getMillis();,1,0,0,1,2,1,1,0,1,6,30,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,304,        if (thisMillis == otherMillis) {,2,1,0,1,3,1,0,0,0,5,32,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,305,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,307,        if (thisMillis < otherMillis) {,2,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,308,            return -1;,0,0,0,0,0,1,0,0,1,2,10,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,310,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,323,        return (getMillis() > instant);,1,1,0,2,4,1,1,0,1,7,31,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,333,        return isAfter(DateTimeUtils.currentTimeMillis());,0,0,0,2,4,1,3,0,1,5,50,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,344,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,1,0,0,1,2,1,3,0,0,5,61,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,345,        return isAfter(instantMillis);,0,0,0,1,2,1,2,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,357,        return (getMillis() < instant);,1,1,0,2,4,1,1,0,1,7,31,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,367,        return isBefore(DateTimeUtils.currentTimeMillis());,0,0,0,2,4,1,3,0,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,378,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,1,0,0,1,2,1,3,0,0,5,61,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,379,        return isBefore(instantMillis);,0,0,0,1,2,1,2,0,1,5,31,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,391,        return (getMillis() == instant);,1,1,0,2,4,1,1,0,1,7,32,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,401,        return isEqual(DateTimeUtils.currentTimeMillis());,0,0,0,2,4,1,3,0,1,5,50,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,412,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,1,0,0,1,2,1,3,0,0,5,61,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,413,        return isEqual(instantMillis);,0,0,0,1,2,1,2,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,424,        return ISODateTimeFormat.dateTime().print(this);,0,0,0,1,4,2,3,0,0,4,48,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,436,        if (formatter == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,437,            return toString();,0,0,0,1,2,1,1,0,1,5,18,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,439,        return formatter.print(this);,0,0,0,1,2,2,2,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractInstant,16,55,public abstract class AbstractInstant implements ReadableInstant {,1,0,0,0,1,4,0,1,2,5,66,1,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,172,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,173,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,185,        super(zone);,1,0,0,1,2,1,0,0,1,5,12,3,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,186,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,199,        super(chronology);,1,0,0,1,2,1,0,0,1,5,18,3,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,200,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,210,        super(instant);,1,0,0,1,2,1,0,0,1,5,15,3,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,211,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,223,"        super(instant, zone);",2,0,0,0,2,1,0,0,1,4,21,3,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,224,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,237,"        super(instant, chronology);",2,0,0,0,2,1,0,0,1,4,27,3,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,238,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,257,"        super(instant, (Chronology) null);",1,0,0,1,4,1,0,1,1,6,34,3,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,258,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,280,"        super(instant, zone);",2,0,0,0,2,1,0,0,1,4,21,3,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,281,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,300,"        super(instant, DateTimeUtils.getChronology(chronology));",1,0,0,1,4,1,3,0,1,6,56,3,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,301,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,324,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);",7,0,0,0,2,1,0,0,1,4,94,3,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,325,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,380,"        super(year, monthOfYear, dayOfMonth,",3,0,0,0,1,1,0,0,1,4,36,3,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,382,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,106,        return new MutableDateTime();,0,0,0,1,2,2,0,1,1,5,29,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,118,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,119,"            throw new NullPointerException(""Zone must not be null"");",0,0,0,1,2,2,0,1,2,5,56,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,121,        return new MutableDateTime(zone);,1,0,0,1,2,2,0,1,1,6,33,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,133,        if (chronology == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,134,"            throw new NullPointerException(""Chronology must not be null"");",0,0,0,1,2,2,0,1,2,5,62,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,136,        return new MutableDateTime(chronology);,1,0,0,1,2,2,0,1,1,6,39,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,150,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());",0,0,0,1,6,1,5,0,1,5,73,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,161,        return formatter.parseDateTime(str).toMutableDateTime();,0,0,0,1,4,1,4,0,0,4,56,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,392,        return iRoundingField;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,402,        return iRoundingMode;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,418,"        setRounding(field, MutableDateTime.ROUND_FLOOR);",2,0,0,0,2,0,2,0,1,4,48,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,419,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,436,        if (field != null && (mode < ROUND_NONE || mode > ROUND_HALF_EVEN)) {,5,5,0,2,5,1,0,0,0,5,69,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,437,"            throw new IllegalArgumentException(""Illegal rounding mode: "" + mode);",1,1,0,1,2,2,0,1,2,7,69,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,439,        iRoundingField = (mode == ROUND_NONE ? null : field);,4,1,0,1,2,0,0,0,1,5,53,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,440,        iRoundingMode = (field == null ? ROUND_NONE : mode);,4,1,0,1,2,0,0,0,1,5,52,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,441,        setMillis(getMillis());,0,0,0,2,4,0,2,0,2,4,23,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,442,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,458,                instant = iRoundingField.roundFloor(instant);,1,0,0,1,2,0,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,459,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,461,                instant = iRoundingField.roundCeiling(instant);,1,0,0,1,2,0,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,462,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,464,                instant = iRoundingField.roundHalfFloor(instant);,1,0,0,1,2,0,3,0,1,5,49,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,465,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,467,                instant = iRoundingField.roundHalfCeiling(instant);,1,0,0,1,2,0,3,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,468,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,470,                instant = iRoundingField.roundHalfEven(instant);,1,0,0,1,2,0,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,486,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,1,0,0,1,2,1,3,0,0,5,61,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,487,        setMillis(instantMillis);  // set via this class not super,0,0,0,1,2,2,2,0,1,5,58,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,488,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,498,"        setMillis(FieldUtils.safeAdd(getMillis(), duration));  // set via this class not super",0,0,0,1,6,2,5,0,2,5,86,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,499,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,510,"        add(duration, 1);",0,0,0,0,2,0,2,0,1,3,17,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,511,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,523,        if (duration != null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,524,"            add(FieldUtils.safeMultiply(duration.getMillis(), scalar));",0,0,0,1,6,0,6,0,1,4,59,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,526,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,537,"        add(period, 1);",0,0,0,0,2,0,2,0,1,3,15,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,538,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,550,        if (period != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,551,"            setMillis(getChronology().add(period, getMillis(), scalar));  // set via this class not super",0,0,0,1,8,2,6,0,3,5,93,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,553,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,583,        newZone = DateTimeUtils.getZone(newZone);,1,0,0,1,2,0,3,0,1,5,41,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,584,        Chronology chrono = getChronology();,1,0,0,1,2,0,1,1,1,6,36,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,585,        if (chrono.getZone() != newZone) {,1,1,0,2,5,1,2,0,0,6,34,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,586,            setChronology(chrono.withZone(newZone));  // set via this class not super,0,0,0,2,4,2,4,0,1,5,73,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,588,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,602,        newZone = DateTimeUtils.getZone(newZone);,1,0,0,1,2,0,3,0,1,5,41,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,603,        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());,1,0,0,2,4,0,3,1,1,6,61,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,604,        if (newZone == originalZone) {,2,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,605,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,608,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());",1,0,0,1,4,1,4,0,1,6,68,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,609,        setChronology(getChronology().withZone(newZone));  // set via this class not super,0,0,0,2,6,2,4,0,2,5,82,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,610,        setMillis(millis);,0,0,0,1,2,0,2,0,1,4,18,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,611,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,622,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,623,"            throw new IllegalArgumentException(""Field must not be null"");",0,0,0,1,2,2,0,1,2,5,61,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,625,"        setMillis(type.getField(getChronology()).set(getMillis(), value));",0,0,0,2,10,0,7,0,3,4,66,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,626,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,637,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,638,"            throw new IllegalArgumentException(""Field must not be null"");",0,0,0,1,2,2,0,1,2,5,61,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,640,"        setMillis(type.getField(getChronology()).add(getMillis(), amount));",0,0,0,2,10,0,7,0,3,4,67,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,641,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,651,"        setMillis(getChronology().year().set(getMillis(), year));",0,0,0,1,10,0,6,0,3,4,57,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,652,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,661,"        setMillis(getChronology().years().add(getMillis(), years));",0,0,0,1,10,0,6,0,3,4,59,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,662,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,672,"        setMillis(getChronology().weekyear().set(getMillis(), weekyear));",0,0,0,1,10,0,6,0,3,4,65,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,673,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,682,"        setMillis(getChronology().weekyears().add(getMillis(), weekyears));",0,0,0,1,10,0,6,0,3,4,67,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,683,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,693,"        setMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));",0,0,0,1,10,0,6,0,3,4,71,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,694,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,703,"        setMillis(getChronology().months().add(getMillis(), months));",0,0,0,1,10,0,6,0,3,4,61,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,704,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,714,"        setMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));",0,0,0,1,10,0,6,0,3,4,77,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,715,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,724,"        setMillis(getChronology().weeks().add(getMillis(), weeks));",0,0,0,1,10,0,6,0,3,4,59,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,725,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,735,"        setMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));",0,0,0,1,10,0,6,0,3,4,67,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,736,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,745,"        setMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));",0,0,0,1,10,0,6,0,3,4,69,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,746,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,755,"        setMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));",0,0,0,1,10,0,6,0,3,4,67,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,756,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,765,"        setMillis(getChronology().days().add(getMillis(), days));",0,0,0,1,10,0,6,0,3,4,57,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,766,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,776,"        setMillis(getChronology().hourOfDay().set(getMillis(), hourOfDay));",0,0,0,1,10,0,6,0,3,4,67,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,777,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,786,"        setMillis(getChronology().hours().add(getMillis(), hours));",0,0,0,1,10,0,6,0,3,4,59,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,787,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,797,"        setMillis(getChronology().minuteOfDay().set(getMillis(), minuteOfDay));",0,0,0,1,10,0,6,0,3,4,71,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,798,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,807,"        setMillis(getChronology().minuteOfHour().set(getMillis(), minuteOfHour));",0,0,0,1,10,0,6,0,3,4,73,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,808,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,817,"        setMillis(getChronology().minutes().add(getMillis(), minutes));",0,0,0,1,10,0,6,0,3,4,63,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,818,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,828,"        setMillis(getChronology().secondOfDay().set(getMillis(), secondOfDay));",0,0,0,1,10,0,6,0,3,4,71,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,829,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,838,"        setMillis(getChronology().secondOfMinute().set(getMillis(), secondOfMinute));",0,0,0,1,10,0,6,0,3,4,77,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,839,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,848,"        setMillis(getChronology().seconds().add(getMillis(), seconds));",0,0,0,1,10,0,6,0,3,4,63,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,849,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,859,"        setMillis(getChronology().millisOfDay().set(getMillis(), millisOfDay));",0,0,0,1,10,0,6,0,3,4,71,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,860,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,869,"        setMillis(getChronology().millisOfSecond().set(getMillis(), millisOfSecond));",0,0,0,1,10,0,6,0,3,4,77,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,870,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,881,"        setMillis(getChronology().millis().add(getMillis(), millis));",0,0,0,1,10,0,6,0,3,4,61,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,882,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,893,"        setMillis(getChronology().millisOfDay().set(instant, getMillisOfDay()));",0,0,0,1,10,0,6,0,3,4,72,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,894,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,904,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,1,0,0,1,2,1,3,0,0,5,61,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,905,        Chronology instantChrono = DateTimeUtils.getInstantChronology(instant);,1,0,0,1,2,0,3,1,0,5,71,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,906,        DateTimeZone zone = instantChrono.getZone();,1,0,0,1,2,0,2,1,0,5,44,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,907,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,908,"            instantMillis = zone.getMillisKeepLocal(DateTimeZone.UTC, instantMillis);",3,0,0,0,2,0,3,0,1,4,73,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,910,        setDate(instantMillis);,0,0,0,1,2,0,2,0,1,4,23,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,911,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,926,        Chronology c = getChronology();,1,0,0,1,2,0,1,1,1,6,31,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,927,"        long instantMidnight = c.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);",1,0,0,0,2,1,5,0,0,4,77,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,928,        setDate(instantMidnight);,0,0,0,1,2,0,2,0,1,4,25,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,929,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,940,        int millisOfDay = ISOChronology.getInstanceUTC().millisOfDay().get(millis);,1,0,0,1,6,1,5,0,0,5,75,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,941,"        setMillis(getChronology().millisOfDay().set(getMillis(), millisOfDay));",0,0,0,1,10,0,6,0,3,4,71,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,942,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,952,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,1,0,0,1,2,1,3,0,0,5,61,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,953,        Chronology instantChrono = DateTimeUtils.getInstantChronology(instant);,1,0,0,1,2,0,3,1,0,5,71,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,954,        DateTimeZone zone = instantChrono.getZone();,1,0,0,1,2,0,2,1,0,5,44,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,955,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,956,"            instantMillis = zone.getMillisKeepLocal(DateTimeZone.UTC, instantMillis);",3,0,0,0,2,0,3,0,1,4,73,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,958,        setTime(instantMillis);,0,0,0,1,2,0,2,0,1,4,23,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,959,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,976,        long instant = getChronology().getDateTimeMillis(,1,0,0,1,3,1,2,0,1,6,49,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,978,        setMillis(instant);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,979,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1001,        long instant = getChronology().getDateTimeMillis(,1,0,0,1,3,1,2,0,1,6,49,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1003,        setMillis(instant);,0,0,0,1,2,0,2,0,1,4,19,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1004,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1016,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1017,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0,0,0,1,2,2,0,1,2,5,77,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1019,        DateTimeField field = type.getField(getChronology());,1,0,0,2,4,0,3,1,1,6,53,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1020,        if (field.isSupported() == false) {,0,1,0,2,5,1,2,0,1,6,35,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1021,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",1,1,0,1,2,2,0,1,3,7,76,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1023,"        return new Property(this, field);",1,0,0,0,2,3,0,1,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1032,"        return new Property(this, getChronology().era());",0,0,0,1,6,3,2,1,2,6,49,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1041,"        return new Property(this, getChronology().centuryOfEra());",0,0,0,1,6,3,2,1,2,6,58,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1050,"        return new Property(this, getChronology().yearOfCentury());",0,0,0,1,6,3,2,1,2,6,59,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1059,"        return new Property(this, getChronology().yearOfEra());",0,0,0,1,6,3,2,1,2,6,55,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1068,"        return new Property(this, getChronology().year());",0,0,0,1,6,3,2,1,2,6,50,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1077,"        return new Property(this, getChronology().weekyear());",0,0,0,1,6,3,2,1,2,6,54,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1086,"        return new Property(this, getChronology().monthOfYear());",0,0,0,1,6,3,2,1,2,6,57,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1095,"        return new Property(this, getChronology().weekOfWeekyear());",0,0,0,1,6,3,2,1,2,6,60,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1104,"        return new Property(this, getChronology().dayOfYear());",0,0,0,1,6,3,2,1,2,6,55,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1115,"        return new Property(this, getChronology().dayOfMonth());",0,0,0,1,6,3,2,1,2,6,56,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1126,"        return new Property(this, getChronology().dayOfWeek());",0,0,0,1,6,3,2,1,2,6,55,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1136,"        return new Property(this, getChronology().hourOfDay());",0,0,0,1,6,3,2,1,2,6,55,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1145,"        return new Property(this, getChronology().minuteOfDay());",0,0,0,1,6,3,2,1,2,6,57,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1154,"        return new Property(this, getChronology().minuteOfHour());",0,0,0,1,6,3,2,1,2,6,58,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1163,"        return new Property(this, getChronology().secondOfDay());",0,0,0,1,6,3,2,1,2,6,57,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1172,"        return new Property(this, getChronology().secondOfMinute());",0,0,0,1,6,3,2,1,2,6,60,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1181,"        return new Property(this, getChronology().millisOfDay());",0,0,0,1,6,3,2,1,2,6,57,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1190,"        return new Property(this, getChronology().millisOfSecond());",0,0,0,1,6,3,2,1,2,6,60,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1200,        return (MutableDateTime) clone();,0,0,0,1,4,1,1,1,1,6,33,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1211,            return super.clone();,1,0,0,1,2,2,0,0,0,4,21,7,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1212,        } catch (CloneNotSupportedException ex) {,1,0,0,1,4,1,0,1,0,5,41,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1213,"            throw new InternalError(""Clone error"");",0,0,0,1,2,2,0,1,2,5,39,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1186,            out.write(iValue);,0,0,0,1,2,0,3,0,0,3,18,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1187,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1190,            buf.append(iValue);,0,0,0,1,2,0,3,0,0,3,19,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1191,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1194,            out.write(iValue);,0,0,0,1,2,0,3,0,0,3,18,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1195,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1203,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1210,                a = Character.toUpperCase(a);,1,0,0,1,2,0,3,0,1,5,29,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1211,                b = Character.toUpperCase(b);,1,0,0,1,2,0,3,0,1,5,29,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1212,                if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1213,                    a = Character.toLowerCase(a);,1,0,0,1,2,0,3,0,1,5,29,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1214,                    b = Character.toLowerCase(b);,1,0,0,1,2,0,3,0,1,5,29,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1215,                    if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1216,                        return ~position;,1,0,0,0,0,1,0,0,1,3,17,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2577,                iPrinters = null;,1,0,0,0,0,0,0,0,1,2,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2578,                iPrintedLengthEstimate = 0;,1,0,0,0,0,0,0,0,1,2,27,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2592,                iParsers = null;,1,0,0,0,0,0,0,0,1,2,16,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2593,                iParsedLengthEstimate = 0;,1,0,0,0,0,0,0,0,1,2,26,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2616,                throw new UnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,42,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2633,            DateTimePrinter[] elements = iPrinters;,2,0,0,0,2,0,0,1,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2634,            if (elements == null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2635,                throw new UnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,42,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2638,            if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2640,                locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2643,            int len = elements.length;,3,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2644,            for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2645,"                elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);",0,0,1,0,4,0,7,0,0,3,78,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2647,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2650,            DateTimePrinter[] elements = iPrinters;,2,0,0,0,2,0,0,1,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2651,            if (elements == null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2652,                throw new UnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,42,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2655,            if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2657,                locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2660,            int len = elements.length;,3,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2661,            for (int i=0; i<len; i++) {,4,1,0,1,3,2,0,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2662,"                elements[i].printTo(buf, partial, locale);",0,0,1,0,4,0,4,0,0,3,42,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2664,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2667,            DateTimePrinter[] elements = iPrinters;,2,0,0,0,2,0,0,1,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2668,            if (elements == null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2669,                throw new UnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,42,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2672,            if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2674,                locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2677,            int len = elements.length;,3,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2678,            for (int i=0; i<len; i++) {,4,1,0,1,3,2,0,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2679,"                elements[i].printTo(out, partial, locale);",0,0,1,0,4,0,4,0,0,3,42,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2681,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2684,            return iParsedLengthEstimate;,1,0,0,0,0,1,0,0,0,2,29,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2690,                throw new UnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,42,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2498,    static enum TimeZoneId,1,0,0,0,0,2,0,0,1,3,22,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2501,        INSTANCE;,1,0,0,0,0,0,0,0,0,1,9,3,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2502,        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();,1,0,0,1,2,2,2,2,2,7,66,3,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2505,            int max = 0;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2506,            for (String id : ALL_IDS) {,2,0,0,1,3,1,0,1,0,5,27,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2507,"                max = Math.max(max, id.length());",1,0,0,1,4,0,5,0,1,5,33,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2508,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2509,            MAX_LENGTH = max;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2510,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2513,            return MAX_LENGTH;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2519,"            buf.append(displayZone != null ? displayZone.getID() : """");",1,1,0,2,4,0,4,0,1,6,59,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2520,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2525,"            out.write(displayZone != null ? displayZone.getID() : """");",1,1,0,2,4,0,4,0,1,6,58,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2526,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2530,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2534,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2537,            return MAX_LENGTH;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2541,            String str = text.substring(position);,1,0,0,1,2,0,3,1,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2542,            String best = null;,1,0,0,0,0,0,0,1,0,2,19,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2543,            for (String id : ALL_IDS) {,2,0,0,1,3,1,0,1,0,5,27,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2544,                if (str.startsWith(id)) {,0,0,0,2,5,1,3,0,0,4,25,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2545,                    if (best == null || id.length() > best.length()) {,1,3,0,2,7,1,4,0,0,6,50,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2546,                        best = id;,2,0,0,0,0,0,0,0,1,2,10,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2549,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2550,            if (best != null) {,1,1,0,1,3,1,0,0,0,5,19,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2551,                bucket.setZone(DateTimeZone.forID(best));,0,0,0,2,4,0,5,0,0,3,41,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2552,                return position + best.length();,1,1,0,1,2,1,2,0,0,6,32,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2554,            return ~position;,1,0,0,0,0,1,0,0,1,3,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2439,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2440,            iType = type;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2441,            iParseLookup = parseLookup;,2,0,0,0,0,0,0,0,1,2,27,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2442,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2445,            return (iType == SHORT_NAME ? 4 : 20);,2,1,0,1,2,1,0,0,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2451,"            buf.append(print(instant - displayOffset, displayZone, locale));",2,1,0,0,4,0,5,0,1,5,64,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2452,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2457,"            out.write(print(instant - displayOffset, displayZone, locale));",2,1,0,0,4,0,5,0,1,5,63,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2458,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2461,            if (displayZone == null) {,1,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2462,"                return """";  // no zone",0,0,0,0,0,1,0,0,1,2,22,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2464,            switch (iType) {,1,0,0,1,3,1,0,0,0,4,16,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2466,"                    return displayZone.getName(instant, locale);",0,0,0,0,2,1,4,0,0,3,44,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2468,"                    return displayZone.getShortName(instant, locale);",0,0,0,0,2,1,4,0,0,3,49,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2470,"            return """";",0,0,0,0,0,1,0,0,1,2,10,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2475,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2479,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2482,            return (iType == SHORT_NAME ? 4 : 20);,2,1,0,1,2,1,0,0,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2486,            String str = text.substring(position);,1,0,0,1,2,0,3,1,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2487,            for (String name : iParseLookup.keySet()) {,1,0,0,2,5,1,2,1,0,6,43,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2488,                if (str.startsWith(name)) {,0,0,0,2,5,1,3,0,0,4,27,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2489,                    bucket.setZone(iParseLookup.get(name));,0,0,0,2,4,0,5,0,0,3,39,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2490,                    return position + name.length();,1,1,0,1,2,1,2,0,0,6,32,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2492,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2493,            return ~position;,1,0,0,0,0,1,0,0,1,3,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2088,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2091,                minFields = 4;,1,0,0,0,0,0,0,0,1,2,14,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2092,                maxFields = 4;,1,0,0,0,0,0,0,0,1,2,14,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2104,                est = iZeroOffsetPrintText.length();,1,0,0,1,2,0,2,0,1,5,36,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2113,                return;  // no zone,0,0,0,0,0,1,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2122,                buf.append('-');,0,0,0,1,2,0,2,0,1,4,16,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2123,                displayOffset = -displayOffset;,2,0,0,0,0,0,0,0,2,2,31,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2129,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2133,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2142,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2149,            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,1,0,0,0,3,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2150,            if (iShowSeparators) {,1,0,0,1,3,1,0,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2151,                buf.append(':');,0,0,0,1,2,0,2,0,1,4,16,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2153,"            FormatUtils.appendPaddedInteger(buf, seconds, 2);",0,0,0,0,2,0,4,0,0,2,49,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2154,            if (iMaxFields == 3) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2155,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2157,            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,0,0,0,1,3,63,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2158,            if (displayOffset == 0 && iMinFields <= 3) {,2,3,0,1,3,1,0,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2159,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2162,            if (iShowSeparators) {,1,0,0,1,3,1,0,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2163,                buf.append('.');,0,0,0,1,2,0,2,0,1,4,16,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2165,"            FormatUtils.appendPaddedInteger(buf, displayOffset, 3);",0,0,0,0,2,0,4,0,0,2,55,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2166,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2171,            if (displayZone == null) {,1,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2172,                return;  // no zone,0,0,0,0,0,1,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2174,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,2,3,0,1,3,1,0,0,0,5,57,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2175,                out.write(iZeroOffsetPrintText);,0,0,0,1,2,0,3,0,0,3,32,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2176,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2178,            if (displayOffset >= 0) {,1,1,0,1,3,1,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2179,                out.write('+');,0,0,0,1,2,0,2,0,1,4,15,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2181,                out.write('-');,0,0,0,1,2,0,2,0,1,4,15,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2182,                displayOffset = -displayOffset;,2,0,0,0,0,0,0,0,2,2,31,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2185,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,1,0,0,0,3,62,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2186,"            FormatUtils.writePaddedInteger(out, hours, 2);",0,0,0,0,2,0,4,0,0,2,46,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2187,            if (iMaxFields == 1) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2188,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2190,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,1,2,1,0,0,1,6,64,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2191,            if (displayOffset == 0 && iMinFields == 1) {,2,3,0,1,3,1,0,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2192,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2195,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,1,0,0,0,3,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2196,            if (iShowSeparators) {,1,0,0,1,3,1,0,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2197,                out.write(':');,0,0,0,1,2,0,2,0,1,4,15,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2199,"            FormatUtils.writePaddedInteger(out, minutes, 2);",0,0,0,0,2,0,4,0,0,2,48,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2200,            if (iMaxFields == 2) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2201,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2203,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,0,0,0,1,3,63,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2204,            if (displayOffset == 0 && iMinFields == 2) {,2,3,0,1,3,1,0,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2205,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2208,            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,1,0,0,0,3,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2209,            if (iShowSeparators) {,1,0,0,1,3,1,0,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2210,                out.write(':');,0,0,0,1,2,0,2,0,1,4,15,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2212,"            FormatUtils.writePaddedInteger(out, seconds, 2);",0,0,0,0,2,0,4,0,0,2,48,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2213,            if (iMaxFields == 3) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2214,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2216,            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,0,0,0,1,3,63,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2217,            if (displayOffset == 0 && iMinFields == 3) {,2,3,0,1,3,1,0,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2218,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2221,            if (iShowSeparators) {,1,0,0,1,3,1,0,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2222,                out.write('.');,0,0,0,1,2,0,2,0,1,4,15,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2224,"            FormatUtils.writePaddedInteger(out, displayOffset, 3);",0,0,0,0,2,0,4,0,0,2,54,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2225,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2229,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2233,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2240,            int limit = text.length() - position;,2,1,0,1,2,1,2,0,0,6,37,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2243,            if (iZeroOffsetParseText != null) {,1,1,0,1,3,1,0,0,0,5,35,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2244,                if (iZeroOffsetParseText.length() == 0) {,0,1,0,2,5,1,2,0,0,5,41,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2246,                    if (limit > 0) {,1,1,0,1,3,1,0,0,0,5,16,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2247,                        char c = text.charAt(position);,1,0,0,1,2,1,3,0,0,5,31,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2248,                        if (c == '-' || c == '+') {,2,3,0,1,3,1,0,0,2,6,27,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2249,                            break zeroOffset;,1,0,0,0,0,1,0,0,0,2,17,14,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2252,                    bucket.setOffset(Integer.valueOf(0));,0,0,0,2,4,0,4,0,0,3,37,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2253,                    return position;,1,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2255,"                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {",0,0,0,1,7,1,6,0,1,5,97,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2256,                    bucket.setOffset(Integer.valueOf(0));,0,0,0,2,4,0,4,0,0,3,37,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2257,                    return position + iZeroOffsetParseText.length();,1,1,0,1,2,1,2,0,0,6,48,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2263,            if (limit <= 1) {,1,1,0,1,3,1,0,0,0,5,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2264,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2268,            char c = text.charAt(position);,1,0,0,1,2,1,3,0,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2269,            if (c == '-') {,1,1,0,1,3,1,0,0,1,6,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2270,                negative = true;,1,0,0,0,0,0,0,0,2,2,16,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2271,            } else if (c == '+') {,1,1,0,1,4,2,0,0,1,6,22,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2272,                negative = false;,1,0,0,0,0,0,0,0,2,2,17,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2274,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2277,            limit--;,1,0,0,0,0,0,0,0,1,2,8,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2278,            position++;,1,0,0,0,0,0,0,0,1,2,11,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2292,"            if (digitCount(text, position, 2) < 2) {",0,1,0,0,5,1,3,0,1,5,40,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2294,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2299,"            int hours = FormatUtils.parseTwoDigits(text, position);",1,0,0,0,2,1,4,0,0,4,55,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2300,            if (hours > 23) {,1,1,0,1,3,1,0,0,0,5,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2301,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2303,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,0,0,0,1,3,51,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2304,            limit -= 2;,1,0,0,0,0,0,0,0,1,2,11,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2305,            position += 2;,1,0,0,0,0,0,0,0,1,2,14,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2311,                if (limit <= 0) {,1,1,0,1,3,1,0,0,0,5,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2312,                    break parse;,1,0,0,0,0,1,0,0,0,2,12,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2316,                c = text.charAt(position);,1,0,0,1,2,0,3,0,1,5,26,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2317,                if (c == ':') {,1,1,0,1,3,1,0,0,1,6,15,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2318,                    expectSeparators = true;,1,0,0,0,0,0,0,0,2,2,24,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2319,                    limit--;,1,0,0,0,0,0,0,0,1,2,8,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2320,                    position++;,1,0,0,0,0,0,0,0,1,2,11,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2321,                } else if (c >= '0' && c <= '9') {,2,3,0,1,4,2,0,0,2,6,34,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2322,                    expectSeparators = false;,1,0,0,0,0,0,0,0,2,2,25,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2329,"                int count = digitCount(text, position, 2);",1,0,0,0,2,1,3,0,1,5,42,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2330,                if (count == 0 && !expectSeparators) {,2,2,0,1,3,1,0,0,1,6,38,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2331,                    break parse;,1,0,0,0,0,1,0,0,0,2,12,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2332,                } else if (count < 2) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2334,                    return ~position;,1,0,0,0,0,1,0,0,1,3,17,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2337,"                int minutes = FormatUtils.parseTwoDigits(text, position);",1,0,0,0,2,1,4,0,0,4,57,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2338,                if (minutes > 59) {,1,1,0,1,3,1,0,0,0,5,19,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2339,                    return ~position;,1,0,0,0,0,1,0,0,1,3,17,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2341,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,0,0,0,1,3,56,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2342,                limit -= 2;,1,0,0,0,0,0,0,0,1,2,11,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2343,                position += 2;,1,0,0,0,0,0,0,0,1,2,14,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2347,                if (limit <= 0) {,1,1,0,1,3,1,0,0,0,5,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2348,                    break parse;,1,0,0,0,0,1,0,0,0,2,12,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2351,                if (expectSeparators) {,1,0,0,1,3,1,0,0,0,4,23,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2352,                    if (text.charAt(position) != ':') {,0,1,0,2,5,1,3,0,1,6,35,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2353,                        break parse;,1,0,0,0,0,1,0,0,0,2,12,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2355,                    limit--;,1,0,0,0,0,0,0,0,1,2,8,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2356,                    position++;,1,0,0,0,0,0,0,0,1,2,11,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2359,"                count = digitCount(text, position, 2);",1,0,0,0,2,0,3,0,2,4,38,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2360,                if (count == 0 && !expectSeparators) {,2,2,0,1,3,1,0,0,1,6,38,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2361,                    break parse;,1,0,0,0,0,1,0,0,0,2,12,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2362,                } else if (count < 2) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2364,                    return ~position;,1,0,0,0,0,1,0,0,1,3,17,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2367,"                int seconds = FormatUtils.parseTwoDigits(text, position);",1,0,0,0,2,1,4,0,0,4,57,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2368,                if (seconds > 59) {,1,1,0,1,3,1,0,0,0,5,19,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2369,                    return ~position;,1,0,0,0,0,1,0,0,1,3,17,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2371,                offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,0,0,0,1,3,56,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2372,                limit -= 2;,1,0,0,0,0,0,0,0,1,2,11,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2373,                position += 2;,1,0,0,0,0,0,0,0,1,2,14,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2377,                if (limit <= 0) {,1,1,0,1,3,1,0,0,0,5,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2378,                    break parse;,1,0,0,0,0,1,0,0,0,2,12,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2381,                if (expectSeparators) {,1,0,0,1,3,1,0,0,0,4,23,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2382,"                    if (text.charAt(position) != '.' && text.charAt(position) != ',') {",0,3,0,1,7,1,6,0,2,6,67,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2383,                        break parse;,1,0,0,0,0,1,0,0,0,2,12,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2385,                    limit--;,1,0,0,0,0,0,0,0,1,2,8,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2386,                    position++;,1,0,0,0,0,0,0,0,1,2,11,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2389,"                count = digitCount(text, position, 3);",1,0,0,0,2,0,3,0,2,4,38,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2390,                if (count == 0 && !expectSeparators) {,2,2,0,1,3,1,0,0,1,6,38,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2391,                    break parse;,1,0,0,0,0,1,0,0,0,2,12,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2392,                } else if (count < 1) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2394,                    return ~position;,1,0,0,0,0,1,0,0,1,3,17,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2397,                offset += (text.charAt(position++) - '0') * 100;,2,2,0,2,4,0,2,0,3,6,48,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2398,                if (count > 1) {,1,1,0,1,3,1,0,0,0,5,16,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2399,                    offset += (text.charAt(position++) - '0') * 10;,2,2,0,2,4,0,2,0,3,6,47,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2400,                    if (count > 2) {,1,1,0,1,3,1,0,0,0,5,16,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2401,                        offset += text.charAt(position++) - '0';,2,1,0,1,2,0,2,0,3,6,40,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2406,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,3,0,0,2,4,0,4,0,1,5,63,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2407,            return position;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2415,"            int limit = Math.min(text.length() - position, amount);",2,1,0,1,4,1,5,0,0,6,55,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2416,            amount = 0;,1,0,0,0,0,0,0,0,1,2,11,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2417,            for (; limit > 0; limit--) {,2,1,0,1,3,1,0,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2418,                char c = text.charAt(position + amount);,3,1,0,1,2,1,2,0,0,6,40,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2419,                if (c < '0' || c > '9') {,2,3,0,1,3,1,0,0,2,6,25,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2420,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2422,                amount++;,1,0,0,0,0,0,0,0,1,2,9,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2424,            return amount;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1861,                maxDigits = 18;,1,0,0,0,0,0,0,0,1,2,15,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1876,            } catch (IOException e) {,1,0,0,1,4,1,0,1,0,5,25,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1884,"            printTo(null, out, instant, chrono);",0,0,0,0,2,0,4,0,1,3,36,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1885,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1890,"            long millis = partial.getChronology().set(partial, 0L);",1,0,0,1,4,1,4,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1892,"                printTo(buf, null, millis, partial.getChronology());",0,0,0,1,4,0,5,0,1,4,52,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1895,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1893,            } catch (IOException e) {,1,0,0,1,4,1,0,1,0,5,25,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1896,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1901,"            long millis = partial.getChronology().set(partial, 0L);",1,0,0,1,4,1,4,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1902,"            printTo(null, out, millis, partial.getChronology());",0,0,0,1,4,0,5,0,1,4,52,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1903,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1914,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1915,                if (buf != null) {,1,1,0,1,3,1,0,0,0,5,18,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1916,"                    appendUnknownString(buf, minDigits);",0,0,0,0,2,0,3,0,1,3,36,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1918,"                    printUnknownString(out, minDigits);",0,0,0,0,2,0,3,0,1,3,35,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1920,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1929,                    while (--minDigits >= 0) {,1,1,0,1,3,1,0,0,1,6,26,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1930,                        out.write('0');,0,0,0,1,2,0,2,0,1,4,15,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1937,"            long[] fractionData = getFractionData(fraction, field);",1,0,0,0,4,1,3,0,1,5,55,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1938,            long scaled = fractionData[0];,1,0,1,0,2,1,0,0,0,4,30,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1939,            int maxDigits = (int) fractionData[1];,1,0,1,1,4,2,0,0,0,5,38,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1941,            if ((scaled & 0x7fffffff) == scaled) {,2,2,0,2,5,1,0,0,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1942,                str = Integer.toString((int) scaled);,2,0,0,2,4,1,2,0,1,6,37,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1944,                str = Long.toString(scaled);,1,0,0,1,2,0,3,0,1,5,28,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1947,            int length = str.length();,1,0,0,1,2,1,2,0,0,5,26,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1948,            int digits = maxDigits;,2,0,0,0,0,1,0,0,0,2,23,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1949,            while (length < digits) {,2,1,0,1,3,1,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1950,                if (buf != null) {,1,1,0,1,3,1,0,0,0,5,18,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1951,                    buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1953,                    out.write('0');,0,0,0,1,2,0,2,0,1,4,15,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1955,                minDigits--;,1,0,0,0,0,0,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1956,                digits--;,1,0,0,0,0,0,0,0,1,2,9,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1959,            if (minDigits < digits) {,2,1,0,1,3,1,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1961,                while (minDigits < digits) {,2,1,0,1,3,1,0,0,0,5,28,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1962,                    if (length <= 1 || str.charAt(length - 1) != '0') {,2,4,0,2,5,1,2,0,1,7,51,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1963,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1965,                    digits--;,1,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1966,                    length--;,1,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1968,                if (length < str.length()) {,1,1,0,2,5,1,2,0,0,6,28,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1969,                    if (buf != null) {,1,1,0,1,3,1,0,0,0,5,18,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1970,                        for (int i=0; i<length; i++) {,4,1,0,1,3,2,0,0,1,6,30,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1971,                            buf.append(str.charAt(i));,0,0,0,2,4,0,5,0,0,3,26,14,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1974,                        for (int i=0; i<length; i++) {,4,1,0,1,3,2,0,0,1,6,30,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1975,                            out.write(str.charAt(i));,0,0,0,2,4,0,5,0,0,3,25,14,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1978,                    return;,0,0,0,0,0,1,0,0,1,2,7,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1982,            if (buf != null) {,1,1,0,1,3,1,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1983,                buf.append(str);,0,0,0,1,2,0,3,0,0,3,16,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1985,                out.write(str);,0,0,0,1,2,0,3,0,0,3,15,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1987,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1990,            long rangeMillis = field.getDurationField().getUnitMillis();,1,0,0,1,4,1,3,0,0,5,60,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1992,            int maxDigits = iMaxDigits;,2,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1994,                switch (maxDigits) {,1,0,0,1,3,1,0,0,0,4,20,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1995,                default: scalar = 1L; break;,1,0,0,0,0,2,0,0,2,3,28,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1996,                case 1:  scalar = 10L; break;,1,0,0,0,0,2,0,0,1,3,29,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1997,                case 2:  scalar = 100L; break;,1,0,0,0,0,2,0,0,1,3,30,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1998,                case 3:  scalar = 1000L; break;,1,0,0,0,0,2,0,0,1,3,31,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1999,                case 4:  scalar = 10000L; break;,1,0,0,0,0,2,0,0,1,3,32,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2000,                case 5:  scalar = 100000L; break;,1,0,0,0,0,2,0,0,1,3,33,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2001,                case 6:  scalar = 1000000L; break;,1,0,0,0,0,2,0,0,1,3,34,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2002,                case 7:  scalar = 10000000L; break;,1,0,0,0,0,2,0,0,1,3,35,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2003,                case 8:  scalar = 100000000L; break;,1,0,0,0,0,2,0,0,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2004,                case 9:  scalar = 1000000000L; break;,1,0,0,0,0,2,0,0,1,3,37,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2005,                case 10: scalar = 10000000000L; break;,1,0,0,0,0,2,0,0,1,3,38,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2006,                case 11: scalar = 100000000000L; break;,1,0,0,0,0,2,0,0,1,3,39,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2007,                case 12: scalar = 1000000000000L; break;,1,0,0,0,0,2,0,0,1,3,40,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2008,                case 13: scalar = 10000000000000L; break;,1,0,0,0,0,2,0,0,1,3,41,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2009,                case 14: scalar = 100000000000000L; break;,1,0,0,0,0,2,0,0,1,3,42,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2010,                case 15: scalar = 1000000000000000L; break;,1,0,0,0,0,2,0,0,1,3,43,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2011,                case 16: scalar = 10000000000000000L; break;,1,0,0,0,0,2,0,0,1,3,44,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2012,                case 17: scalar = 100000000000000000L; break;,1,0,0,0,0,2,0,0,1,3,45,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2013,                case 18: scalar = 1000000000000000000L; break;,1,0,0,0,0,2,0,0,1,3,46,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2015,                if (((rangeMillis * scalar) / scalar) == rangeMillis) {,4,3,0,3,7,1,0,0,0,5,55,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2016,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2019,                maxDigits--;,1,0,0,0,0,0,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2022,"            return new long[] {fraction * scalar / rangeMillis, maxDigits};",4,2,0,0,4,3,0,0,0,4,63,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2030,            DateTimeField field = iFieldType.getField(bucket.getChronology());,1,0,0,2,4,0,4,1,0,5,66,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2032,"            int limit = Math.min(iMaxDigits, text.length() - position);",2,1,0,1,4,1,5,0,0,6,59,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2034,            long value = 0;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2035,            long n = field.getDurationField().getUnitMillis() * 10;,1,1,0,1,4,1,3,0,0,6,55,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2036,            int length = 0;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2037,            while (length < limit) {,2,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2038,                char c = text.charAt(position + length);,3,1,0,1,2,1,2,0,0,6,40,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2039,                if (c < '0' || c > '9') {,2,3,0,1,3,1,0,0,2,6,25,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2040,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2042,                length++;,1,0,0,0,0,0,0,0,1,2,9,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2043,                long nn = n / 10;,2,1,0,0,0,1,0,0,0,3,17,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2044,                value += (c - '0') * nn;,3,2,0,1,2,0,0,0,2,5,24,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2045,                n = nn;,2,0,0,0,0,0,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2046,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2048,            value /= 10;,1,0,0,0,0,0,0,0,1,2,12,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2050,            if (length == 0) {,1,1,0,1,3,1,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2051,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2054,            if (value > Integer.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2055,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2058,            DateTimeField parseField = new PreciseDateTimeField(,1,0,0,0,1,1,0,2,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2063,"            bucket.saveField(parseField, (int) value);",1,0,0,1,4,1,3,0,0,5,42,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,2065,            return position + length;,2,1,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1729,"                buf.append(print(instant, chrono, locale));",0,0,0,0,4,0,6,0,1,3,43,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1732,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1730,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1731,                buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1733,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1739,"                out.write(print(instant, chrono, locale));",0,0,0,0,4,0,6,0,1,3,42,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1742,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1740,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1741,                out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1743,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1747,"                buf.append(print(partial, locale));",0,0,0,0,4,0,5,0,1,3,35,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1750,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1748,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1749,                buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1751,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1755,"                out.write(print(partial, locale));",0,0,0,0,4,0,5,0,1,3,34,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1758,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1756,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1757,                out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1759,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1762,            DateTimeField field = iFieldType.getField(chrono);,1,0,0,1,2,0,3,1,0,5,50,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1763,            if (iShort) {,1,0,0,1,3,1,0,0,0,4,13,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1764,"                return field.getAsShortText(instant, locale);",0,0,0,0,2,1,4,0,0,3,45,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1766,"                return field.getAsText(instant, locale);",0,0,0,0,2,1,4,0,0,3,40,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1771,            if (partial.isSupported(iFieldType)) {,0,0,0,2,5,1,3,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1772,                DateTimeField field = iFieldType.getField(partial.getChronology());,1,0,0,2,4,0,4,1,0,5,67,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1773,                if (iShort) {,1,0,0,1,3,1,0,0,0,4,13,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1774,"                    return field.getAsShortText(partial, locale);",0,0,0,0,2,1,4,0,0,3,45,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1776,"                    return field.getAsText(partial, locale);",0,0,0,0,2,1,4,0,0,3,40,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1779,"                return ""\ufffd"";",0,0,0,0,0,1,0,0,1,2,16,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1789,            Locale locale = bucket.getLocale();,1,0,0,1,2,0,2,1,0,5,35,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1792,            Set<String> validValues = null;,1,0,0,0,0,0,0,2,0,2,31,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1793,            int maxLength = 0;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1794,            synchronized (cParseCache) {,1,0,0,1,3,1,0,0,0,4,28,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1795,"                Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);",1,0,0,1,4,0,3,3,0,5,68,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1796,                if (innerMap == null) {,1,1,0,1,3,1,0,0,0,5,23,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1797,"                    innerMap = new HashMap<DateTimeFieldType, Object[]>();",1,0,0,1,4,1,0,3,2,6,54,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1798,"                    cParseCache.put(locale, innerMap);",0,0,0,0,2,0,4,0,0,2,34,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1800,                Object[] array = innerMap.get(iFieldType);,1,0,0,1,4,0,3,1,0,5,42,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1801,                if (array == null) {,1,1,0,1,3,1,0,0,0,5,20,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1802,                    validValues = new HashSet<String>(32);,1,0,0,1,2,1,0,2,2,6,38,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1803,"                    MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);",3,0,0,0,2,1,0,2,1,5,63,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1804,                    Property property = dt.property(iFieldType);,1,0,0,1,2,0,3,1,0,5,44,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1805,                    int min = property.getMinimumValueOverall();,1,0,0,1,2,1,2,0,0,5,44,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1806,                    int max = property.getMaximumValueOverall();,1,0,0,1,2,1,2,0,0,5,44,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1807,                    if (max - min > 32) {  // protect against invalid fields,2,2,0,1,3,1,0,0,0,5,56,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1808,                        return ~position;,1,0,0,0,0,1,0,0,1,3,17,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1810,                    maxLength = property.getMaximumTextLength(locale);,1,0,0,1,2,0,3,0,1,5,50,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1811,                    for (int i = min; i <= max; i++) {,5,1,0,1,3,2,0,0,1,6,34,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1812,                        property.set(i);,0,0,0,1,2,0,3,0,0,3,16,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1813,                        validValues.add(property.getAsShortText(locale));,0,0,0,2,4,0,5,0,0,3,49,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1814,                        validValues.add(property.getAsShortText(locale).toLowerCase(locale));,0,0,0,2,6,0,7,0,0,3,69,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1815,                        validValues.add(property.getAsShortText(locale).toUpperCase(locale));,0,0,0,2,6,0,7,0,0,3,69,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1816,                        validValues.add(property.getAsText(locale));,0,0,0,2,4,0,5,0,0,3,44,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1817,                        validValues.add(property.getAsText(locale).toLowerCase(locale));,0,0,0,2,6,0,7,0,0,3,64,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1818,                        validValues.add(property.getAsText(locale).toUpperCase(locale));,0,0,0,2,6,0,7,0,0,3,64,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1820,"                    if (""en"".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era()) {",1,2,0,3,9,1,5,0,1,7,81,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1822,"                        validValues.add(""BCE"");",0,0,0,1,2,0,2,0,1,4,23,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1823,"                        validValues.add(""bce"");",0,0,0,1,2,0,2,0,1,4,23,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1824,"                        validValues.add(""CE"");",0,0,0,1,2,0,2,0,1,4,22,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1825,"                        validValues.add(""ce"");",0,0,0,1,2,0,2,0,1,4,22,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1826,                        maxLength = 3;,1,0,0,0,0,0,0,0,1,2,14,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1828,"                    array = new Object[] {validValues, Integer.valueOf(maxLength)};",2,0,0,1,6,1,3,1,1,7,63,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1829,"                    innerMap.put(iFieldType, array);",0,0,0,0,2,0,4,0,0,2,32,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1830,                } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1831,                    validValues = (Set<String>) array[0];,1,0,1,1,4,0,0,2,1,6,37,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1832,                    maxLength = ((Integer) array[1]).intValue();,1,0,1,2,8,0,1,1,1,7,44,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1834,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1836,"            int limit = Math.min(text.length(), position + maxLength);",3,1,0,1,4,1,4,0,0,6,58,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1837,            for (int i = limit; i > position; i--) {,5,1,0,1,3,2,0,0,1,6,40,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1838,"                String match = text.substring(position, i);",1,0,0,0,2,0,4,1,0,4,43,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1839,                if (validValues.contains(match)) {,0,0,0,2,5,1,3,0,0,4,34,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1840,"                    bucket.saveField(iFieldType, match, locale);",0,0,0,0,2,0,5,0,0,2,44,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1841,                    return i;,1,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1844,            return ~position;,1,0,0,0,0,1,0,0,1,3,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1523,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1524,            iType = type;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1525,            iPivot = pivot;,2,0,0,0,0,0,0,0,1,2,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1526,            iLenientParse = lenientParse;,2,0,0,0,0,0,0,0,1,2,29,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1527,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1530,            return iLenientParse ? 4 : 2;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1534,            int limit = text.length() - position;,2,1,0,1,2,1,2,0,0,6,37,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1536,            if (!iLenientParse) {,1,0,0,1,3,1,0,0,1,5,21,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1537,"                limit = Math.min(2, limit);",1,0,0,0,2,0,3,0,1,4,27,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1538,                if (limit < 2) {,1,1,0,1,3,1,0,0,0,5,16,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1539,                    return ~position;,1,0,0,0,0,1,0,0,1,3,17,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1542,                boolean hasSignChar = false;,1,0,0,0,0,1,0,0,1,3,28,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1543,                boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1544,                int length = 0;,1,0,0,0,0,1,0,0,0,2,15,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1545,                while (length < limit) {,2,1,0,1,3,1,0,0,0,5,24,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1546,                    char c = text.charAt(position + length);,3,1,0,1,2,1,2,0,0,6,40,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1547,                    if (length == 0 && (c == '-' || c == '+')) {,3,5,0,2,5,1,0,0,2,6,44,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1548,                        hasSignChar = true;,1,0,0,0,0,0,0,0,2,2,19,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1549,                        negative = c == '-';,2,1,0,0,0,0,0,0,2,3,20,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1550,                        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1551,                            length++;,1,0,0,0,0,0,0,0,1,2,9,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1554,                            position++;,1,0,0,0,0,0,0,0,1,2,11,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1555,                            limit--;,1,0,0,0,0,0,0,0,1,2,8,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1557,                        continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1559,                    if (c < '0' || c > '9') {,2,3,0,1,3,1,0,0,2,6,25,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1560,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1562,                    length++;,1,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1563,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1565,                if (length == 0) {,1,1,0,1,3,1,0,0,0,5,18,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1566,                    return ~position;,1,0,0,0,0,1,0,0,1,3,17,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1569,                if (hasSignChar || length != 2) {,2,2,0,1,3,1,0,0,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1571,                    if (length >= 9) {,1,1,0,1,3,1,0,0,0,5,18,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1574,"                        value = Integer.parseInt(text.substring(position, position += length));",3,0,0,0,4,0,5,0,2,4,71,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1576,                        int i = position;,2,0,0,0,0,1,0,0,0,2,17,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1577,                        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1578,                            i++;,1,0,0,0,0,0,0,0,1,2,4,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1581,                            value = text.charAt(i++) - '0';,2,1,0,1,2,0,2,0,3,6,31,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1584,                        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1582,                        } catch (StringIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,45,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1583,                            return ~position;,1,0,0,0,0,1,0,0,1,3,17,14,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1585,                        position += length;,2,0,0,0,0,0,0,0,1,2,19,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1586,                        while (i < position) {,2,1,0,1,3,1,0,0,0,5,22,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1587,                            value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,4,5,0,2,8,0,2,0,3,6,63,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1589,                        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1590,                            value = -value;,2,0,0,0,0,0,0,0,2,2,15,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1594,"                    bucket.saveField(iType, value);",0,0,0,0,2,0,4,0,0,2,31,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1595,                    return position;,1,0,0,0,0,1,0,0,0,2,16,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1600,            char c = text.charAt(position);,1,0,0,1,2,1,3,0,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1601,            if (c < '0' || c > '9') {,2,3,0,1,3,1,0,0,2,6,25,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1602,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1604,            year = c - '0';,2,1,0,0,0,0,0,0,2,3,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1605,            c = text.charAt(position + 1);,2,1,0,1,2,0,2,0,1,6,30,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1606,            if (c < '0' || c > '9') {,2,3,0,1,3,1,0,0,2,6,25,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1607,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1609,            year = ((year << 3) + (year << 1)) + c - '0';,4,5,0,2,6,0,0,0,2,5,45,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1611,            int pivot = iPivot;,2,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1613,            if (bucket.getPivotYear() != null) {,0,1,0,2,5,1,2,0,0,5,36,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1614,                pivot = bucket.getPivotYear().intValue();,1,0,0,1,4,0,3,0,1,5,41,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1617,            int low = pivot - 50;,2,1,0,0,0,1,0,0,0,3,21,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1620,            if (low >= 0) {,1,1,0,1,3,1,0,0,0,5,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1621,                t = low % 100;,2,1,0,0,0,0,0,0,1,3,14,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1623,                t = 99 + ((low + 1) % 100);,2,3,0,2,4,0,0,0,1,5,27,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1626,            year += low + ((year < t) ? 100 : 0) - t;,5,3,0,2,4,0,0,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1628,"            bucket.saveField(iType, year);",0,0,0,0,2,0,4,0,0,2,30,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1629,            return position + 2;,1,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1633,            return 2;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1639,"            int year = getTwoDigitYear(instant, chrono);",1,0,0,0,2,1,3,0,1,5,44,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1640,            if (year < 0) {,1,1,0,1,3,1,0,0,0,5,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1641,                buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1642,                buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1644,"                FormatUtils.appendPaddedInteger(buf, year, 2);",0,0,0,0,2,0,4,0,0,2,46,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1646,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1651,"            int year = getTwoDigitYear(instant, chrono);",1,0,0,0,2,1,3,0,1,5,44,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1652,            if (year < 0) {,1,1,0,1,3,1,0,0,0,5,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1653,                out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1654,                out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1656,"                FormatUtils.writePaddedInteger(out, year, 2);",0,0,0,0,2,0,4,0,0,2,45,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1658,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1662,                int year = iType.getField(chrono).get(instant);,1,0,0,1,4,1,5,0,0,5,47,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1663,                if (year < 0) {,1,1,0,1,3,1,0,0,0,5,15,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1664,                    year = -year;,2,0,0,0,0,0,0,0,2,2,13,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1666,                return year % 100;,1,1,0,0,0,1,0,0,0,3,18,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1667,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1668,                return -1;,0,0,0,0,0,1,0,0,1,2,10,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1673,            int year = getTwoDigitYear(partial);,1,0,0,1,2,1,2,0,1,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1674,            if (year < 0) {,1,1,0,1,3,1,0,0,0,5,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1675,                buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1676,                buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1678,"                FormatUtils.appendPaddedInteger(buf, year, 2);",0,0,0,0,2,0,4,0,0,2,46,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1680,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1683,            int year = getTwoDigitYear(partial);,1,0,0,1,2,1,2,0,1,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1684,            if (year < 0) {,1,1,0,1,3,1,0,0,0,5,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1685,                out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1686,                out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1688,"                FormatUtils.writePaddedInteger(out, year, 2);",0,0,0,0,2,0,4,0,0,2,45,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1690,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1693,            if (partial.isSupported(iType)) {,0,0,0,2,5,1,3,0,0,4,33,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1695,                    int year = partial.get(iType);,1,0,0,1,2,1,3,0,0,5,30,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1696,                    if (year < 0) {,1,1,0,1,3,1,0,0,0,5,15,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1697,                        year = -year;,2,0,0,0,0,0,0,0,2,2,13,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1699,                    return year % 100;,1,1,0,0,0,1,0,0,0,3,18,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1700,                } catch (RuntimeException e) {},1,0,0,1,5,1,0,1,0,5,31,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1702,            return -1;,0,0,0,0,0,1,0,0,1,2,10,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1484,"            super(fieldType, numDigits, signed, numDigits);",4,0,0,0,2,1,0,0,1,4,47,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1485,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1488,"            int newPos = super.parseInto(bucket, text, position);",5,0,0,0,2,2,0,0,0,3,53,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1489,            if (newPos < 0) {,1,1,0,1,3,1,0,0,0,5,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1490,                return newPos;,1,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1492,            int expectedPos = position + iMaxParsedDigits;,3,1,0,0,0,1,0,0,0,3,46,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1493,            if (newPos != expectedPos) {,2,1,0,1,3,1,0,0,0,5,28,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1494,                if (iSigned) {,1,0,0,1,3,1,0,0,0,4,14,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1495,                    char c = text.charAt(position);,1,0,0,1,2,1,3,0,0,5,31,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1496,                    if (c == '-' || c == '+') {,2,3,0,1,3,1,0,0,2,6,27,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1497,                        expectedPos++;,1,0,0,0,0,0,0,0,1,2,14,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1500,                if (newPos > expectedPos) {,2,1,0,1,3,1,0,0,0,5,27,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1502,                    return ~(expectedPos + 1);,1,1,0,1,2,1,0,0,1,6,26,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1503,                } else if (newPos < expectedPos) {,2,1,0,1,4,2,0,0,0,5,34,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1505,                    return ~newPos;,1,0,0,0,0,1,0,0,1,3,15,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1508,            return newPos;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1439,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1440,"                appendUnknownString(buf, iMinPrintedDigits);",0,0,0,0,2,0,3,0,1,3,44,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1448,                DateTimeField field = iFieldType.getField(chrono);,1,0,0,1,2,0,3,1,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1449,"                FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);",0,0,0,1,4,0,7,0,0,3,75,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1452,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1450,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1451,"                printUnknownString(out, iMinPrintedDigits);",0,0,0,0,2,0,3,0,1,3,43,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1453,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1456,            if (partial.isSupported(iFieldType)) {,0,0,0,2,5,1,3,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1458,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);",0,0,0,1,4,0,7,0,0,3,81,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1461,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1459,                } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1460,"                    appendUnknownString(buf, iMinPrintedDigits);",0,0,0,0,2,0,3,0,1,3,44,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1463,"                appendUnknownString(buf, iMinPrintedDigits);",0,0,0,0,2,0,3,0,1,3,44,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1465,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1468,            if (partial.isSupported(iFieldType)) {,0,0,0,2,5,1,3,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1470,"                    FormatUtils.writePaddedInteger(out, partial.get(iFieldType), iMinPrintedDigits);",0,0,0,1,4,0,7,0,0,3,80,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1473,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1471,                } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1472,"                    printUnknownString(out, iMinPrintedDigits);",0,0,0,0,2,0,3,0,1,3,43,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1475,"                printUnknownString(out, iMinPrintedDigits);",0,0,0,0,2,0,3,0,1,3,43,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1477,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1299,                    negative = c == '-';,2,1,0,0,0,0,0,0,2,3,20,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1302,                    if (length + 1 >= limit || ,2,4,0,0,1,1,0,0,0,4,26,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1305,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1308,                    if (negative) {,1,0,0,1,3,1,0,0,0,4,15,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1309,                        length++;,1,0,0,0,0,0,0,0,1,2,9,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1312,                        position++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1315,"                    limit = Math.min(limit + 1, text.length() - position);",3,2,0,1,4,0,4,0,1,6,54,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1316,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1319,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1325,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1332,"                value = Integer.parseInt(text.substring(position, position += length));",3,0,0,0,4,0,5,0,2,4,71,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1336,                    i++;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1340,                } catch (StringIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,45,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1341,                    return ~position;,1,0,0,0,0,1,0,0,1,3,17,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1348,                    value = -value;,2,0,0,0,0,0,0,0,2,2,15,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1374,                DateTimeField field = iFieldType.getField(chrono);,1,0,0,1,2,0,3,1,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1375,"                FormatUtils.appendUnpaddedInteger(buf, field.get(instant));",0,0,0,1,4,0,6,0,0,3,59,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1378,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1376,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1377,                buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1379,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1385,                DateTimeField field = iFieldType.getField(chrono);,1,0,0,1,2,0,3,1,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1386,"                FormatUtils.writeUnpaddedInteger(out, field.get(instant));",0,0,0,1,4,0,6,0,0,3,58,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1389,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1387,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1388,                out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1390,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1393,            if (partial.isSupported(iFieldType)) {,0,0,0,2,5,1,3,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1395,"                    FormatUtils.appendUnpaddedInteger(buf, partial.get(iFieldType));",0,0,0,1,4,0,6,0,0,3,64,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1398,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1396,                } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1397,                    buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1400,                buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1402,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1405,            if (partial.isSupported(iFieldType)) {,0,0,0,2,5,1,3,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1407,"                    FormatUtils.writeUnpaddedInteger(out, partial.get(iFieldType));",0,0,0,1,4,0,6,0,0,3,63,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1410,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1408,                } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1409,                    out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1412,                out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1414,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1232,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1233,            iValue = value;,2,0,0,0,0,0,0,0,1,2,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1234,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1237,            return iValue.length();,0,0,0,1,2,1,2,0,0,4,23,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1243,            buf.append(iValue);,0,0,0,1,2,0,3,0,0,3,19,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1244,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1249,            out.write(iValue);,0,0,0,1,2,0,3,0,0,3,18,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1250,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1253,            buf.append(iValue);,0,0,0,1,2,0,3,0,0,3,19,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1254,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1257,            out.write(iValue);,0,0,0,1,2,0,3,0,0,3,18,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1258,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1261,            return iValue.length();,0,0,0,1,2,1,2,0,0,4,23,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1265,"            if (text.regionMatches(true, position, iValue, 0, iValue.length())) {",0,0,0,1,7,1,6,0,1,5,69,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1266,                return position + iValue.length();,1,1,0,1,2,1,2,0,0,6,34,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,16,1268,            return ~position;,1,0,0,0,0,1,0,0,1,3,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,387,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,388,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,194,        return createFormatterForStyle(style);,0,0,0,1,2,1,2,0,1,5,38,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,212,        DateTimeFormatter formatter = createFormatterForStyle(style);,1,0,0,1,2,0,2,1,1,6,61,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,213,        if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,214,            locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,217,        return ((StyleFormatter) formatter.getPrinter()).getPattern(locale);,0,0,0,2,8,1,4,1,0,5,68,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,230,"        return createFormatterForStyleIndex(SHORT, NONE);",0,0,0,0,2,1,3,0,1,4,49,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,242,"        return createFormatterForStyleIndex(NONE, SHORT);",0,0,0,0,2,1,3,0,1,4,49,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,254,"        return createFormatterForStyleIndex(SHORT, SHORT);",0,0,0,0,2,1,3,0,1,4,50,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,267,"        return createFormatterForStyleIndex(MEDIUM, NONE);",0,0,0,0,2,1,3,0,1,4,50,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,279,"        return createFormatterForStyleIndex(NONE, MEDIUM);",0,0,0,0,2,1,3,0,1,4,50,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,291,"        return createFormatterForStyleIndex(MEDIUM, MEDIUM);",0,0,0,0,2,1,3,0,1,4,52,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,304,"        return createFormatterForStyleIndex(LONG, NONE);",0,0,0,0,2,1,3,0,1,4,48,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,316,"        return createFormatterForStyleIndex(NONE, LONG);",0,0,0,0,2,1,3,0,1,4,48,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,328,"        return createFormatterForStyleIndex(LONG, LONG);",0,0,0,0,2,1,3,0,1,4,48,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,341,"        return createFormatterForStyleIndex(FULL, NONE);",0,0,0,0,2,1,3,0,1,4,48,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,353,"        return createFormatterForStyleIndex(NONE, FULL);",0,0,0,0,2,1,3,0,1,4,48,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,365,"        return createFormatterForStyleIndex(FULL, FULL);",0,0,0,0,2,1,3,0,1,4,48,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,377,"        parsePatternTo(builder, pattern);",0,0,0,0,2,0,3,0,1,3,33,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,378,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,410,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,416,                builder.appendEraText();,0,0,0,1,2,0,2,0,0,3,24,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,417,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,419,"                builder.appendCenturyOfEra(tokenLen, tokenLen);",0,0,0,0,2,0,4,0,0,2,47,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,420,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,424,                if (tokenLen == 2) {,1,1,0,1,3,1,0,0,0,5,20,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,425,                    boolean lenientParse = true;,1,0,0,0,0,1,0,0,1,3,28,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,428,                    if (i + 1 < length) {,2,2,0,1,3,1,0,0,0,5,21,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,429,                        indexRef[0]++;,0,0,1,0,2,0,0,0,1,3,14,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,430,"                        if (isNumericToken(parseToken(pattern, indexRef))) {",0,0,0,0,7,1,4,0,2,4,52,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,434,                            lenientParse = false;,1,0,0,0,0,0,0,0,2,2,21,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,436,                        indexRef[0]--;,0,0,1,0,2,0,0,0,1,3,14,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,440,                    switch (c) {,1,0,0,1,3,1,0,0,0,4,12,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,442,                        builder.appendTwoDigitWeekyear,0,0,0,0,0,0,2,0,0,1,30,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,444,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,448,"                        builder.appendTwoDigitYear(new DateTime().getYear() - 30, lenientParse);",0,1,0,1,6,1,4,1,1,7,72,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,451,                } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,453,                    int maxDigits = 9;,1,0,0,0,0,1,0,0,0,2,18,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,456,                    if (i + 1 < length) {,2,2,0,1,3,1,0,0,0,5,21,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,457,                        indexRef[0]++;,0,0,1,0,2,0,0,0,1,3,14,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,458,"                        if (isNumericToken(parseToken(pattern, indexRef))) {",0,0,0,0,7,1,4,0,2,4,52,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,460,                            maxDigits = tokenLen;,2,0,0,0,0,0,0,0,1,2,21,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,462,                        indexRef[0]--;,0,0,1,0,2,0,0,0,1,3,14,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,465,                    switch (c) {,1,0,0,1,3,1,0,0,0,4,12,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,467,"                        builder.appendWeekyear(tokenLen, maxDigits);",0,0,0,0,2,0,4,0,0,2,44,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,468,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,470,"                        builder.appendYear(tokenLen, maxDigits);",0,0,0,0,2,0,4,0,0,2,40,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,471,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,473,"                        builder.appendYearOfEra(tokenLen, maxDigits);",0,0,0,0,2,0,4,0,0,2,45,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,477,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,480,                    if (tokenLen >= 4) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,481,                        builder.appendMonthOfYearText();,0,0,0,1,2,0,2,0,0,3,32,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,483,                        builder.appendMonthOfYearShortText();,0,0,0,1,2,0,2,0,0,3,37,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,493,                builder.appendHalfdayOfDayText();,0,0,0,1,2,0,2,0,0,3,33,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,494,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,496,                builder.appendClockhourOfHalfday(tokenLen);,0,0,0,1,2,0,3,0,0,3,43,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,497,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,499,                builder.appendHourOfDay(tokenLen);,0,0,0,1,2,0,3,0,0,3,34,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,500,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,502,                builder.appendClockhourOfDay(tokenLen);,0,0,0,1,2,0,3,0,0,3,39,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,503,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,505,                builder.appendHourOfHalfday(tokenLen);,0,0,0,1,2,0,3,0,0,3,38,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,506,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,508,                builder.appendMinuteOfHour(tokenLen);,0,0,0,1,2,0,3,0,0,3,37,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,509,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,511,                builder.appendSecondOfMinute(tokenLen);,0,0,0,1,2,0,3,0,0,3,39,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,512,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,514,"                builder.appendFractionOfSecond(tokenLen, tokenLen);",0,0,0,0,2,0,4,0,0,2,51,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,515,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,517,                builder.appendDayOfWeek(tokenLen);,0,0,0,1,2,0,3,0,0,3,34,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,518,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,520,                if (tokenLen >= 4) {,1,1,0,1,3,1,0,0,0,5,20,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,521,                    builder.appendDayOfWeekText();,0,0,0,1,2,0,2,0,0,3,30,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,523,                    builder.appendDayOfWeekShortText();,0,0,0,1,2,0,2,0,0,3,35,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,525,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,527,                builder.appendDayOfYear(tokenLen);,0,0,0,1,2,0,3,0,0,3,34,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,528,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,530,                builder.appendWeekOfWeekyear(tokenLen);,0,0,0,1,2,0,3,0,0,3,39,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,531,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,533,                if (tokenLen >= 4) {,1,1,0,1,3,1,0,0,0,5,20,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,534,                    builder.appendTimeZoneName();,0,0,0,1,2,0,2,0,0,3,29,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,536,                    builder.appendTimeZoneShortName();,0,0,0,1,2,0,2,0,0,3,34,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,538,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,540,                if (tokenLen == 1) {,1,1,0,1,3,1,0,0,0,5,20,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,541,"                    builder.appendTimeZoneOffset(null, ""Z"", false, 2, 2);",0,0,0,0,2,0,2,0,2,3,53,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,542,                } else if (tokenLen == 2) {,1,1,0,1,4,2,0,0,0,5,27,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,543,"                    builder.appendTimeZoneOffset(null, ""Z"", true, 2, 2);",0,0,0,0,2,0,2,0,2,3,52,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,545,                    builder.appendTimeZoneId();,0,0,0,1,2,0,2,0,0,3,27,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,547,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,555,                    builder.appendLiteral(new String(sub));,1,0,0,2,4,1,2,1,1,7,39,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,557,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,559,                throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,588,                    buf.append(c);,0,0,0,1,2,0,3,0,0,3,14,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,589,                    i++;,1,0,0,0,0,0,0,0,1,2,4,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,593,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,604,                    if (i + 1 < length && pattern.charAt(i + 1) == '\'') {,3,5,0,2,5,1,2,0,1,7,54,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,606,                        i++;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,607,                        buf.append(c);,0,0,0,1,2,0,3,0,0,3,14,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,609,                        inLiteral = !inLiteral;,2,0,0,0,0,0,0,0,2,2,23,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,632,        int tokenLen = token.length();,1,0,0,1,2,1,2,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,633,        if (tokenLen > 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,634,            char c = token.charAt(0);,1,0,0,1,2,1,2,0,0,5,25,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,635,            switch (c) {,1,0,0,1,3,1,0,0,0,4,12,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,654,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,656,                if (tokenLen <= 2) {,1,1,0,1,3,1,0,0,0,5,20,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,657,                    return true;,0,0,0,0,0,1,0,0,1,2,12,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,662,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,675,"            throw new IllegalArgumentException(""Invalid pattern specification"");",0,0,0,1,2,2,0,1,2,5,68,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,701,        if (style == null || style.length() != 2) {,1,3,0,2,5,1,2,0,0,6,43,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,702,"            throw new IllegalArgumentException(""Invalid style specification: "" + style);",1,1,0,1,2,2,0,1,2,7,76,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,704,        int dateStyle = selectStyle(style.charAt(0));,1,0,0,2,4,1,3,0,1,6,45,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,705,        int timeStyle = selectStyle(style.charAt(1));,1,0,0,2,4,1,3,0,1,6,45,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,706,        if (dateStyle == NONE && timeStyle == NONE) {,4,3,0,1,3,1,0,0,0,5,45,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,707,"            throw new IllegalArgumentException(""Style '--' is invalid"");",0,0,0,1,2,2,0,1,2,5,60,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,709,"        return createFormatterForStyleIndex(dateStyle, timeStyle);",0,0,0,0,2,1,3,0,1,4,58,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,720,        int index = ((dateStyle << 2) + dateStyle) + timeStyle;,4,3,0,2,4,1,0,0,0,5,55,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,721,        DateTimeFormatter f = null;,1,0,0,0,0,0,0,1,0,2,27,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,722,        synchronized (cStyleCache) {,1,0,0,1,3,1,0,0,0,4,28,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,723,            f = cStyleCache[index];,1,0,1,0,2,0,0,0,1,4,23,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,724,            if (f == null) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,725,                int type = DATETIME;,2,0,0,0,0,1,0,0,0,2,20,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,726,                if (dateStyle == NONE) {,2,1,0,1,3,1,0,0,0,5,24,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,727,                    type = TIME;,2,0,0,0,0,0,0,0,1,2,12,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,728,                } else if (timeStyle == NONE) {,2,1,0,1,4,2,0,0,0,5,31,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,729,                    type = DATE;,2,0,0,0,0,0,0,0,1,2,12,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,731,                StyleFormatter llf = new StyleFormatter(,1,0,0,0,1,1,0,2,1,5,40,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,733,"                f = new DateTimeFormatter(llf, llf);",3,0,0,0,2,1,0,1,2,5,36,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,734,                cStyleCache[index] = f;,1,0,1,0,2,0,0,0,1,4,23,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,736,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,737,        return f;,1,0,0,0,0,1,0,0,0,2,9,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,747,        switch (ch) {,1,0,0,1,3,1,0,0,0,4,13,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,749,            return SHORT;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,751,            return MEDIUM;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,753,            return LONG;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,755,            return FULL;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,757,            return NONE;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,759,"            throw new IllegalArgumentException(""Invalid style character: "" + ch);",1,1,0,1,2,2,0,1,2,7,69,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,774,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,775,            iDateStyle = dateStyle;,2,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,776,            iTimeStyle = timeStyle;,2,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,777,            iType = type;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,778,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,767,"        private static final Map<String, DateTimeFormatter> cCache = new HashMap<String, DateTimeFormatter>();  // manual sync",1,0,0,1,2,4,0,6,4,6,118,3,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,781,            return 40;  // guess,0,0,0,0,0,1,0,0,0,1,20,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,787,            DateTimePrinter p = getFormatter(locale).getPrinter();,1,0,0,1,4,0,3,1,1,6,54,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,788,"            p.printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,0,0,2,0,8,0,0,2,68,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,789,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,794,            DateTimePrinter p = getFormatter(locale).getPrinter();,1,0,0,1,4,0,3,1,1,6,54,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,795,"            p.printTo(out, instant, chrono, displayOffset, displayZone, locale);",0,0,0,0,2,0,8,0,0,2,68,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,796,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,799,            DateTimePrinter p = getFormatter(locale).getPrinter();,1,0,0,1,4,0,3,1,1,6,54,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,800,"            p.printTo(buf, partial, locale);",0,0,0,0,2,0,5,0,0,2,32,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,801,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,804,            DateTimePrinter p = getFormatter(locale).getPrinter();,1,0,0,1,4,0,3,1,1,6,54,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,805,"            p.printTo(out, partial, locale);",0,0,0,0,2,0,5,0,0,2,32,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,806,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,809,            return 40;  // guess,0,0,0,0,0,1,0,0,0,1,20,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,813,            DateTimeParser p = getFormatter(bucket.getLocale()).getParser();,1,0,0,2,6,0,4,1,1,6,64,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,814,"            return p.parseInto(bucket, text, position);",0,0,0,0,2,1,5,0,0,3,43,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,818,            locale = (locale == null ? Locale.getDefault() : locale);,3,1,0,2,4,0,2,0,1,6,57,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,819,            String key = Integer.toString(iType + (iDateStyle << 4) + (iTimeStyle << 8)) + locale.toString();,4,4,0,2,8,0,4,1,0,6,97,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,820,            DateTimeFormatter f = null;,1,0,0,0,0,0,0,1,0,2,27,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,821,            synchronized (cCache) {,1,0,0,1,3,1,0,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,822,                f = cCache.get(key);,1,0,0,1,2,0,3,0,1,5,20,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,823,                if (f == null) {,1,1,0,1,3,1,0,0,0,5,16,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,824,                    String pattern = getPattern(locale);,1,0,0,1,2,0,2,1,1,6,36,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,825,                    f = DateTimeFormat.forPattern(pattern);,1,0,0,1,2,0,3,0,1,5,39,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,826,"                    cCache.put(key, f);",0,0,0,0,2,0,4,0,0,2,19,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,828,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,829,            return f;,1,0,0,0,0,1,0,0,0,2,9,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,833,            DateFormat f = null;,1,0,0,0,0,0,0,1,0,2,20,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,834,            switch (iType) {,1,0,0,1,3,1,0,0,0,4,16,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,836,"                    f = DateFormat.getDateInstance(iDateStyle, locale);",1,0,0,0,2,0,4,0,1,4,51,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,837,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,839,"                    f = DateFormat.getTimeInstance(iTimeStyle, locale);",1,0,0,0,2,0,4,0,1,4,51,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,840,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,842,"                    f = DateFormat.getDateTimeInstance(iDateStyle, iTimeStyle, locale);",1,0,0,0,2,0,5,0,1,4,67,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,845,            if (f instanceof SimpleDateFormat == false) {,1,1,0,1,3,2,0,1,1,7,45,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,846,"                throw new IllegalArgumentException(""No datetime pattern for locale: "" + locale);",1,1,0,1,2,3,0,1,2,7,80,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormat,16,848,            return ((SimpleDateFormat) f).toPattern();,1,0,0,2,6,1,1,1,0,6,42,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,604,        Chronology chrono = new BaseChronology() {,1,0,0,1,3,1,0,2,1,6,42,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,606,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,609,                return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,612,                return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,16,615,                return getClass().getName();,0,0,0,1,4,1,2,0,1,5,28,11,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,102,"        long instant = year().set(0, year);",1,0,0,1,4,1,3,0,1,6,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,103,"        instant = monthOfYear().set(instant, monthOfYear);",1,0,0,1,4,0,4,0,2,5,50,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",1,0,0,1,4,0,4,0,2,5,48,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,105,"        return millisOfDay().set(instant, millisOfDay);",0,0,0,1,4,1,4,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,163,"        instant = hourOfDay().set(instant, hourOfDay);",1,0,0,1,4,0,4,0,2,5,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",1,0,0,1,4,0,4,0,2,5,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",1,0,0,1,4,0,4,0,2,5,56,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,166,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,1,4,1,4,0,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,183,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,184,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,185,            int value = values[i];,1,0,1,0,2,1,0,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,186,            DateTimeField field = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,187,            if (value < field.getMinimumValue()) {,1,1,0,2,5,1,2,0,0,6,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,188,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,192,            if (value > field.getMaximumValue()) {,1,1,0,2,5,1,2,0,0,6,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,193,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,199,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,200,            int value = values[i];,1,0,1,0,2,1,0,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,201,            DateTimeField field = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,202,"            if (value < field.getMinimumValue(partial, values)) {",1,1,0,0,5,1,4,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,203,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,207,"            if (value > field.getMaximumValue(partial, values)) {",1,1,0,0,5,1,4,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,208,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,213,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,223,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,224,        int[] values = new int[size];,1,0,1,0,4,3,0,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,225,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0,0,1,1,8,1,6,0,1,6,64,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,228,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,57,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",1,0,0,1,8,1,9,0,1,6,83,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,242,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,255,        int size = period.size();,1,0,0,1,2,1,2,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,256,        int[] values = new int[size];,1,0,1,0,4,3,0,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,257,        if (startInstant != endInstant) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,258,            for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,259,                DurationField field = period.getFieldType(i).getField(this);,1,0,0,1,4,1,4,1,0,6,60,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,260,"                int value = field.getDifference(endInstant, startInstant);",1,0,0,0,2,1,4,0,0,4,58,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,261,"                startInstant = field.add(startInstant, value);",1,0,0,0,2,0,4,0,1,4,46,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,262,                values[i] = value;,1,0,1,0,2,0,0,0,1,4,18,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,265,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,276,        int size = period.size();,1,0,0,1,2,1,2,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,277,        int[] values = new int[size];,1,0,1,0,4,3,0,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,278,        if (duration != 0) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,279,            long current = 0;,1,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,280,            for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,281,                DurationField field = period.getFieldType(i).getField(this);,1,0,0,1,4,1,4,1,0,6,60,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,282,                if (field.isPrecise()) {,0,0,0,2,5,1,2,0,0,4,24,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,283,"                    int value = field.getDifference(duration, current);",1,0,0,0,2,1,4,0,0,4,51,11,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,284,"                    current = field.add(current, value);",1,0,0,0,2,0,4,0,1,4,36,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,285,                    values[i] = value;,1,0,1,0,2,0,0,0,1,4,18,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,289,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,301,        if (scalar != 0 && period != null) {,2,3,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,56,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),1,0,0,1,4,3,3,0,0,5,82,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,304,                if (value != 0) {,1,1,0,1,3,1,0,0,0,5,17,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",3,1,0,1,6,1,6,0,1,7,77,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,309,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,322,        if (duration == 0 || scalar == 0) {,2,3,0,1,3,1,0,0,0,5,35,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,323,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",1,0,0,0,2,1,4,0,0,4,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,326,"        return FieldUtils.safeAdd(instant, add);",0,0,0,0,2,1,4,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0,0,0,2,4,1,4,0,0,4,72,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0,0,0,1,6,1,5,0,1,5,90,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0,0,0,1,6,1,5,0,1,5,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0,0,0,2,4,1,4,0,0,4,73,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0,0,0,1,6,1,5,0,1,5,91,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0,0,0,2,4,1,4,0,0,4,73,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0,0,0,1,6,1,5,0,1,5,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0,0,0,2,4,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0,0,0,1,6,1,5,0,1,5,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0,0,0,1,6,1,5,0,1,5,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0,0,0,2,4,1,4,0,0,4,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0,0,0,1,6,1,5,0,1,5,93,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0,0,0,1,6,1,5,0,1,5,90,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0,0,0,2,4,1,4,0,0,4,70,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0,0,0,1,6,1,5,0,1,5,83,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0,0,0,1,6,1,5,0,1,5,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0,0,0,1,6,1,5,0,1,5,83,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0,0,0,2,4,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0,0,0,1,6,1,5,0,1,5,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0,0,0,2,4,1,4,0,0,4,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0,0,0,1,6,1,5,0,1,5,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0,0,0,1,6,1,5,0,1,5,96,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0,0,0,2,4,1,4,0,0,4,72,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0,0,0,1,6,1,5,0,1,5,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0,0,0,2,4,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0,0,0,1,6,1,5,0,1,5,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0,0,0,1,6,1,5,0,1,5,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0,0,0,2,4,1,4,0,0,4,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0,0,0,1,6,1,5,0,1,5,91,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,16,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0,0,0,1,6,1,5,0,1,5,77,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,86,        return getInstance(DateTimeZone.getDefault());,0,0,0,2,4,1,3,0,1,5,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,97,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,144,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,149,        return getInstance(zone);,0,0,0,1,2,1,2,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,160,"        String str = ""ISOChronology"";",1,0,0,0,0,0,0,1,1,3,29,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,161,        DateTimeZone zone = getZone();,1,0,0,1,2,0,1,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,162,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,163,            str = str + '[' + zone.getID() + ']';,2,1,0,1,4,0,2,0,3,6,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,165,        return str;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,190,        return super.equals(obj);,2,0,0,1,2,2,0,0,0,4,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0,2,0,1,6,1,3,0,2,6,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,208,        return new Stub(getZone());,0,0,0,2,4,2,1,1,2,6,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,110,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,3,4,0,2,7,1,0,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0,0,0,0,2,1,6,0,0,3,74,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",5,0,0,0,2,2,0,0,0,3,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,3,4,0,2,7,1,0,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,148,            return base.getDateTimeMillis,0,0,0,0,0,1,2,0,0,2,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,151,        return super.getDateTimeMillis,1,0,0,0,0,2,0,0,0,2,30,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,389,        in.defaultReadObject();,0,0,0,1,2,0,2,0,0,3,23,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,390,        setFields();,0,0,0,1,2,0,1,0,1,4,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,391,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1264,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1265,            iInstant = instant;,2,0,0,0,0,0,0,0,1,2,19,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1266,            iField = field;,2,0,0,0,0,0,0,0,1,2,15,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1267,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1273,            oos.writeObject(iInstant);,0,0,0,1,2,0,3,0,0,3,26,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1274,            oos.writeObject(iField.getType());,0,0,0,2,4,0,4,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1275,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1281,            iInstant = (MutableDateTime) oos.readObject();,1,0,0,1,4,0,2,1,1,6,46,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1282,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,1,0,0,1,4,0,2,2,0,5,62,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1283,            iField = type.getField(iInstant.getChronology());,1,0,0,2,4,0,4,0,1,5,49,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1284,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1293,            return iField;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1302,            return iInstant.getMillis();,0,0,0,1,2,1,2,0,0,4,28,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1312,            return iInstant.getChronology();,0,0,0,1,2,1,2,0,0,4,32,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1321,            return iInstant;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1333,"            iInstant.setMillis(getField().add(iInstant.getMillis(), value));",0,0,0,1,8,0,7,0,1,4,64,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1334,            return iInstant;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1345,"            iInstant.setMillis(getField().add(iInstant.getMillis(), value));",0,0,0,1,8,0,7,0,1,4,64,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1346,            return iInstant;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1357,"            iInstant.setMillis(getField().addWrapField(iInstant.getMillis(), value));",0,0,0,1,8,0,7,0,1,4,73,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1358,            return iInstant;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1370,"            iInstant.setMillis(getField().set(iInstant.getMillis(), value));",0,0,0,1,8,0,7,0,1,4,64,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1371,            return iInstant;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1384,"            iInstant.setMillis(getField().set(iInstant.getMillis(), text, locale));",0,0,0,1,8,0,8,0,1,4,71,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1385,            return iInstant;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1397,"            set(text, null);",0,0,0,0,2,0,2,0,1,3,16,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1398,            return iInstant;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1409,            iInstant.setMillis(getField().roundFloor(iInstant.getMillis()));,0,0,0,3,8,0,6,0,1,4,64,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1410,            return iInstant;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1420,            iInstant.setMillis(getField().roundCeiling(iInstant.getMillis()));,0,0,0,3,8,0,6,0,1,4,66,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1421,            return iInstant;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1432,            iInstant.setMillis(getField().roundHalfFloor(iInstant.getMillis()));,0,0,0,3,8,0,6,0,1,4,68,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1433,            return iInstant;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1444,            iInstant.setMillis(getField().roundHalfCeiling(iInstant.getMillis()));,0,0,0,3,8,0,6,0,1,4,70,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1445,            return iInstant;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1456,            iInstant.setMillis(getField().roundHalfEven(iInstant.getMillis()));,0,0,0,3,8,0,6,0,1,4,67,6,0.0,0,0
defect4j,time,org/joda/time/MutableDateTime,16,1457,            return iInstant;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/Instant,16,108,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/Instant,16,109,        iMillis = DateTimeUtils.currentTimeMillis();,1,0,0,1,2,0,2,0,1,5,44,4,0.0,0,0
defect4j,time,org/joda/time/Instant,16,110,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Instant,16,132,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/Instant,16,133,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,1,0,0,1,4,0,4,1,0,5,89,4,0.0,0,0
defect4j,time,org/joda/time/Instant,16,134,"        iMillis = converter.getInstantMillis(instant, ISOChronology.getInstanceUTC());",1,0,0,1,4,0,5,0,1,5,78,4,0.0,0,0
defect4j,time,org/joda/time/Instant,16,135,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Instant,16,73,        return new Instant();,0,0,0,1,2,2,0,1,1,5,21,4,0.0,0,0
defect4j,time,org/joda/time/Instant,16,87,"        return parse(str, ISODateTimeFormat.dateTimeParser());",0,0,0,1,4,1,4,0,1,5,54,4,0.0,0,0
defect4j,time,org/joda/time/Instant,16,98,        return formatter.parseDateTime(str).toInstant();,0,0,0,1,4,1,4,0,0,4,48,5,0.0,0,0
defect4j,time,org/joda/time/Instant,16,157,        return (newMillis == iMillis ? this : new Instant(newMillis));,3,1,0,2,4,3,0,1,1,7,62,6,0.0,0,0
defect4j,time,org/joda/time/Instant,16,171,        if (durationToAdd == 0 || scalar == 0) {,2,3,0,1,3,1,0,0,0,5,40,4,0.0,0,0
defect4j,time,org/joda/time/Instant,16,172,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Instant,16,174,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);",1,0,0,1,6,1,5,0,2,6,71,5,0.0,0,0
defect4j,time,org/joda/time/Instant,16,175,        return withMillis(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/Instant,16,189,        if (durationToAdd == null || scalar == 0) {,2,3,0,1,3,1,0,0,0,5,43,4,0.0,0,0
defect4j,time,org/joda/time/Instant,16,190,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Instant,16,192,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0,0,0,1,4,1,4,0,1,5,60,4,0.0,0,0
defect4j,time,org/joda/time/Instant,16,206,"        return withDurationAdded(duration, 1);",0,0,0,0,2,1,2,0,1,4,38,4,0.0,0,0
defect4j,time,org/joda/time/Instant,16,219,"        return withDurationAdded(duration, 1);",0,0,0,0,2,1,2,0,1,4,38,4,0.0,0,0
defect4j,time,org/joda/time/Instant,16,233,"        return withDurationAdded(duration, -1);",0,0,0,0,2,1,2,0,2,4,39,4,0.0,0,0
defect4j,time,org/joda/time/Instant,16,246,"        return withDurationAdded(duration, -1);",0,0,0,0,2,1,2,0,2,4,39,4,0.0,0,0
defect4j,time,org/joda/time/Instant,16,268,        return ISOChronology.getInstanceUTC();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/Instant,16,288,"        return new DateTime(getMillis(), ISOChronology.getInstance());",0,0,0,1,6,2,3,1,2,6,62,4,0.0,0,0
defect4j,time,org/joda/time/Instant,16,315,        return toDateTime();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/Instant,16,334,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance());",0,0,0,1,6,2,3,1,2,6,69,4,0.0,0,0
defect4j,time,org/joda/time/Instant,16,361,        return toMutableDateTime();,0,0,0,1,2,1,1,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,57,"            throw new IllegalArgumentException(""Must supply a chronology"");",0,0,0,1,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,61,"            throw new IllegalArgumentException(""UTC chronology must not be null"");",0,0,0,1,2,2,0,1,2,5,70,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,64,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");",0,0,0,1,2,2,0,1,2,5,68,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,90,        return getBase();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,94,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,95,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,97,        if (zone == getParam()) {,1,1,0,2,5,1,1,0,1,7,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,98,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,100,        if (zone == DateTimeZone.UTC) {,3,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,101,            return getBase();,0,0,0,1,2,1,1,0,1,5,17,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,103,"        return new ZonedChronology(getBase(), zone);",1,0,0,1,4,2,1,1,2,7,44,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,110,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,3,0,2,5,45,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,129,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,3,0,2,5,45,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,143,            throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,213,            return field;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,216,            return (DateTimeField)converted.get(field);,0,0,0,1,4,1,3,1,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,237,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,238,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,240,        if (obj instanceof ZonedChronology == false) {,1,1,0,1,3,2,0,1,1,7,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,241,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,243,        ZonedChronology chrono = (ZonedChronology) obj;,2,0,0,1,2,0,0,2,0,4,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,244,        return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,256,        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;,0,4,0,1,8,1,4,0,2,6,69,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,265,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';",0,1,0,1,8,1,3,0,5,6,71,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,90,"        return getInstance(DateTimeZone.getDefault(), 4);",0,0,0,1,4,1,3,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,112,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,123,            } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,124,                throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",3,0,0,0,2,0,2,0,2,4,59,10,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,132,                    chrono = new GregorianChronology,1,0,0,0,0,1,0,1,2,4,32,10,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,155,        Chronology base = getBase();,1,0,0,1,2,0,1,1,1,6,28,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,156,        int minDays = getMinimumDaysInFirstWeek();,1,0,0,1,2,1,1,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,157,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,3,1,0,1,2,0,0,0,1,5,77,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,158,        return base == null ?,1,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,171,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,181,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,182,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,184,        if (zone == getZone()) {,1,1,0,2,5,1,1,0,1,7,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,185,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,16,187,        return getInstance(zone);,0,0,0,1,2,1,2,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,148,        int minuendYear = getYear(minuendInstant);,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,149,        int subtrahendYear = getYear(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,2,1,0,1,2,1,2,0,1,7,62,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,153,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,2,1,0,1,2,1,2,0,1,7,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,156,        if (subtrahendRem >= FEB_29) {,2,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,157,            if (isLeapYear(subtrahendYear)) {,0,0,0,2,5,1,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,158,                if (!isLeapYear(minuendYear)) {,0,0,0,2,5,1,2,0,2,5,31,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,159,                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;,3,0,0,0,0,0,0,0,1,2,50,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,2,2,0,2,6,2,2,0,1,7,61,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,162,                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;,3,0,0,0,0,0,0,0,1,2,47,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,166,        int difference = minuendYear - subtrahendYear;,3,1,0,0,0,1,0,0,0,3,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,167,        if (minuendRem < subtrahendRem) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,168,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,16,170,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,134,            throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,144,            return base.getZone();,0,0,0,1,2,1,2,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0,0,0,0,2,1,6,0,0,3,74,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,5,0,0,3,60,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,196,        return super.equals(obj);,2,0,0,1,2,2,0,0,0,4,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,206,        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();,0,3,0,1,12,1,6,0,3,6,97,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,217,        StringBuffer sb = new StringBuffer(60);,1,0,0,1,2,1,0,2,1,6,39,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,218,        String name = getClass().getName();,1,0,0,1,4,0,2,1,1,6,35,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,219,        int index = name.lastIndexOf('.');,1,0,0,1,2,1,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,220,        if (index >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,221,            name = name.substring(index + 1);,2,1,0,1,2,0,2,0,1,6,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,223,        sb.append(name);,0,0,0,1,2,0,3,0,0,3,16,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,224,        sb.append('[');,0,0,0,1,3,0,2,0,1,4,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,225,        DateTimeZone zone = getZone();,1,0,0,1,2,0,1,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,226,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,227,            sb.append(zone.getID());,0,0,0,2,4,0,4,0,0,3,24,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,229,        if (getMinimumDaysInFirstWeek() != 4) {,0,1,0,2,5,1,1,0,1,6,39,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,230,"            sb.append("",mdfw="");",0,0,0,0,2,0,2,0,1,3,20,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,231,            sb.append(getMinimumDaysInFirstWeek());,0,0,0,2,4,0,3,0,1,4,39,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,233,        sb.append(']');,0,0,0,1,3,0,2,0,1,4,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,234,        return sb.toString();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,307,        return 366;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,317,        return isLeapYear(year) ? 366 : 365;,0,0,0,1,2,1,2,0,1,5,36,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,348,            return jan1millis - (jan1dayOfWeek - 1),2,3,0,1,2,1,0,0,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,371,        long millis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,372,"        millis += getTotalMillisByYearMonth(year, month);",1,0,0,0,2,0,3,0,2,4,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,373,        return millis;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,477,"        return getDayOfYear(instant, getYear(instant));",0,0,0,1,4,1,4,0,2,5,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,497,        } else if (week > 51) {,1,1,0,1,4,2,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,498,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,3,2,0,2,4,1,1,0,1,7,66,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,500,            return year;,1,0,0,0,0,1,0,0,0,2,12,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,518,            return getWeeksInYear(year - 1);,1,1,0,1,2,1,1,0,1,7,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,522,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,565,        return 31;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,590,        return getDaysInMonthMax(instant);,0,0,0,1,2,1,2,0,1,5,34,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,16,479,                    eras = f;,2,0,0,0,0,0,0,0,1,2,9,8,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,461,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,462,            return getWrappedField().get(instant);,0,0,0,1,4,1,3,0,1,5,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,466,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,467,"            return getWrappedField().getAsText(instant, locale);",0,0,0,1,4,1,4,0,1,5,52,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,471,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,472,"            return getWrappedField().getAsShortText(instant, locale);",0,0,0,1,4,1,4,0,1,5,57,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,476,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,477,"            long result = getWrappedField().add(instant, amount);",1,0,0,1,4,1,4,0,1,6,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,478,"            checkLimits(result, ""resulting"");",0,0,0,0,2,0,2,0,2,3,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,479,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,483,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,484,"            long result = getWrappedField().add(instant, amount);",1,0,0,1,4,1,4,0,1,6,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,485,"            checkLimits(result, ""resulting"");",0,0,0,0,2,0,2,0,2,3,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,486,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,490,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,491,"            long result = getWrappedField().addWrapField(instant, amount);",1,0,0,1,4,1,4,0,1,6,62,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,492,"            checkLimits(result, ""resulting"");",0,0,0,0,2,0,2,0,2,3,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,493,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,497,"            checkLimits(minuendInstant, ""minuend"");",0,0,0,0,2,0,2,0,2,3,39,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,498,"            checkLimits(subtrahendInstant, ""subtrahend"");",0,0,0,0,2,0,2,0,2,3,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,499,"            return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,74,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,503,"            checkLimits(minuendInstant, ""minuend"");",0,0,0,0,2,0,2,0,2,3,39,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,504,"            checkLimits(subtrahendInstant, ""subtrahend"");",0,0,0,0,2,0,2,0,2,3,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,505,"            return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,80,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,509,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,510,"            long result = getWrappedField().set(instant, value);",1,0,0,1,4,1,4,0,1,6,52,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,511,"            checkLimits(result, ""resulting"");",0,0,0,0,2,0,2,0,2,3,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,512,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,516,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,517,"            long result = getWrappedField().set(instant, text, locale);",1,0,0,1,4,1,5,0,1,6,59,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,518,"            checkLimits(result, ""resulting"");",0,0,0,0,2,0,2,0,2,3,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,519,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,523,            return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,527,            return iRangeDurationField;,1,0,0,0,0,1,0,0,0,2,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,531,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,532,            return getWrappedField().isLeap(instant);,0,0,0,1,4,1,3,0,1,5,41,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,536,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,537,            return getWrappedField().getLeapAmount(instant);,0,0,0,1,4,1,3,0,1,5,48,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,541,            return iLeapDurationField;,1,0,0,0,0,1,0,0,0,2,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,545,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,546,            long result = getWrappedField().roundFloor(instant);,1,0,0,1,4,1,3,0,1,6,52,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,547,"            checkLimits(result, ""resulting"");",0,0,0,0,2,0,2,0,2,3,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,548,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,552,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,553,            long result = getWrappedField().roundCeiling(instant);,1,0,0,1,4,1,3,0,1,6,54,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,554,"            checkLimits(result, ""resulting"");",0,0,0,0,2,0,2,0,2,3,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,555,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,559,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,560,            long result = getWrappedField().roundHalfFloor(instant);,1,0,0,1,4,1,3,0,1,6,56,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,561,"            checkLimits(result, ""resulting"");",0,0,0,0,2,0,2,0,2,3,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,562,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,566,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,567,            long result = getWrappedField().roundHalfCeiling(instant);,1,0,0,1,4,1,3,0,1,6,58,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,568,"            checkLimits(result, ""resulting"");",0,0,0,0,2,0,2,0,2,3,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,569,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,573,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,574,            long result = getWrappedField().roundHalfEven(instant);,1,0,0,1,4,1,3,0,1,6,55,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,575,"            checkLimits(result, ""resulting"");",0,0,0,0,2,0,2,0,2,3,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,576,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,580,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,581,            long result = getWrappedField().remainder(instant);,1,0,0,1,4,1,3,0,1,6,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,582,"            checkLimits(result, ""resulting"");",0,0,0,0,2,0,2,0,2,3,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,583,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,587,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,588,            return getWrappedField().getMinimumValue(instant);,0,0,0,1,4,1,3,0,1,5,50,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,592,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,593,            return getWrappedField().getMaximumValue(instant);,0,0,0,1,4,1,3,0,1,5,50,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,597,            return getWrappedField().getMaximumTextLength(locale);,0,0,0,1,4,1,3,0,1,5,54,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,601,            return getWrappedField().getMaximumShortTextLength(locale);,0,0,0,1,4,1,3,0,1,5,59,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,52,        return iChronology.getDayOfYear(instant);,0,0,0,1,2,1,3,0,0,4,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,60,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,64,        return iChronology.getDaysInYearMax();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,68,        int year = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,69,        return iChronology.getDaysInYear(year);,0,0,0,1,2,1,3,0,0,4,39,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,73,        if (partial.isSupported(DateTimeFieldType.year())) {,0,0,0,3,7,1,4,0,0,4,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,74,            int year = partial.get(DateTimeFieldType.year());,1,0,0,2,4,1,4,0,0,5,49,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,75,            return iChronology.getDaysInYear(year);,0,0,0,1,2,1,3,0,0,4,39,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,77,        return iChronology.getDaysInYearMax();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,81,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,82,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,83,            if (partial.getFieldType(i) == DateTimeFieldType.year()) {,0,1,0,2,7,1,5,0,0,5,58,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,84,                int year = values[i];,1,0,1,0,2,1,0,0,0,4,21,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,85,                return iChronology.getDaysInYear(year);,0,0,0,1,2,1,3,0,0,4,39,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,88,        return iChronology.getDaysInYearMax();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,92,        int maxLessOne = iChronology.getDaysInYearMax() - 1;,1,1,0,1,2,1,2,0,0,6,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,93,        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;,4,3,0,1,4,1,2,0,1,7,81,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,16,100,        return iChronology.dayOfYear();,0,0,0,1,2,1,2,0,0,4,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,286,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,294,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,2,1,0,1,6,2,5,0,0,6,84,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,302,"            return iField.getValue(duration, addOffset(instant));",0,0,0,1,4,1,5,0,1,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,306,"            return iField.getValueAsLong(duration, addOffset(instant));",0,0,0,1,4,1,5,0,1,5,59,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,310,"            return iField.getMillis(value, addOffset(instant));",0,0,0,1,4,1,5,0,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,314,"            return iField.getMillis(value, addOffset(instant));",0,0,0,1,4,1,5,0,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,318,            int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,319,"            instant = iField.add(instant + offset, value);",3,1,0,0,2,0,3,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,3,1,0,2,4,1,2,0,1,7,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,324,            int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,325,"            instant = iField.add(instant + offset, value);",3,1,0,0,2,0,3,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,326,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,3,1,0,2,4,1,2,0,1,7,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,330,            int offset = getOffsetToAdd(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,331,            return iField.getDifference,0,0,0,0,0,1,2,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,337,            int offset = getOffsetToAdd(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,338,            return iField.getDifferenceAsLong,0,0,0,0,0,1,2,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,344,            int offset = this.iZone.getOffset(instant);,2,0,0,1,2,2,2,0,0,5,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,345,            long sum = instant + offset;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,4,5,0,2,7,1,0,0,0,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,348,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,73,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,350,            return offset;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,354,            int offset = this.iZone.getOffsetFromLocal(instant);,2,0,0,1,2,2,2,0,0,5,52,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,355,            long diff = instant - offset;,3,1,0,0,0,1,0,0,0,3,29,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,357,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,4,5,0,2,7,1,0,0,0,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,358,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,78,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,360,            return offset;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,364,            return iZone.convertUTCToLocal(instant);,0,0,0,1,2,1,3,0,0,4,40,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,391,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,402,            return iField.isLenient();,0,0,0,1,2,1,2,0,0,4,26,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,411,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,412,"            return iField.getAsText(localInstant, locale);",0,0,0,0,2,1,4,0,0,3,46,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,416,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,417,"            return iField.getAsShortText(localInstant, locale);",0,0,0,0,2,1,4,0,0,3,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,421,"            return iField.getAsText(fieldValue, locale);",0,0,0,0,2,1,4,0,0,3,44,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,425,"            return iField.getAsShortText(fieldValue, locale);",0,0,0,0,2,1,4,0,0,3,49,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,429,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,430,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,431,"                long localInstant = iField.add(instant + offset, value);",3,1,0,0,2,1,3,0,0,5,56,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,432,                return localInstant - offset;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,434,               long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,435,"               localInstant = iField.add(localInstant, value);",1,0,0,0,2,0,4,0,1,4,47,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,436,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,441,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,442,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,443,"                long localInstant = iField.add(instant + offset, value);",3,1,0,0,2,1,3,0,0,5,56,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,444,                return localInstant - offset;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,446,               long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,447,"               localInstant = iField.add(localInstant, value);",1,0,0,0,2,0,4,0,1,4,47,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,448,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,453,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,454,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,455,"                long localInstant = iField.addWrapField(instant + offset, value);",3,1,0,0,2,1,3,0,0,5,65,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,456,                return localInstant - offset;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,458,                long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,459,"                localInstant = iField.addWrapField(localInstant, value);",1,0,0,0,2,0,4,0,1,4,56,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,460,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,469,"                throw new IllegalFieldValueException(iField.getType(), Integer.valueOf(value),",0,0,0,1,5,2,5,1,1,6,78,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,479,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,480,"            localInstant = iField.set(localInstant, text, locale);",1,0,0,0,2,0,5,0,1,4,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,481,"            return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,485,            int offset = getOffsetToAdd(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,486,            return iField.getDifference,0,0,0,0,0,1,2,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,492,            int offset = getOffsetToAdd(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,493,            return iField.getDifferenceAsLong,0,0,0,0,0,1,2,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,507,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,508,            return iField.isLeap(localInstant);,0,0,0,1,2,1,3,0,0,4,35,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,512,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,513,            return iField.getLeapAmount(localInstant);,0,0,0,1,2,1,3,0,0,4,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,521,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,522,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,523,                instant = iField.roundFloor(instant + offset);,3,1,0,1,2,0,2,0,1,6,46,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,524,                return instant - offset;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,526,                long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,527,                localInstant = iField.roundFloor(localInstant);,1,0,0,1,2,0,3,0,1,5,47,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,528,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,533,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,534,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,535,                instant = iField.roundCeiling(instant + offset);,3,1,0,1,2,0,2,0,1,6,48,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,536,                return instant - offset;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,538,                long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,539,                localInstant = iField.roundCeiling(localInstant);,1,0,0,1,2,0,3,0,1,5,49,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,540,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,545,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,546,            return iField.remainder(localInstant);,0,0,0,1,2,1,3,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,554,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,555,            return iField.getMinimumValue(localInstant);,0,0,0,1,2,1,3,0,0,4,44,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,559,            return iField.getMinimumValue(instant);,0,0,0,1,2,1,3,0,0,4,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,563,"            return iField.getMinimumValue(instant, values);",0,0,0,0,2,1,4,0,0,3,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,571,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,572,            return iField.getMaximumValue(localInstant);,0,0,0,1,2,1,3,0,0,4,44,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,576,            return iField.getMaximumValue(instant);,0,0,0,1,2,1,3,0,0,4,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,580,"            return iField.getMaximumValue(instant, values);",0,0,0,0,2,1,4,0,0,3,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,584,            return iField.getMaximumTextLength(locale);,0,0,0,1,2,1,3,0,0,4,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,588,            return iField.getMaximumShortTextLength(locale);,0,0,0,1,2,1,3,0,0,4,48,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,592,            int offset = this.iZone.getOffset(instant);,2,0,0,1,2,2,2,0,0,5,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,593,            long sum = instant + offset;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,595,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,4,5,0,2,7,1,0,0,0,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,596,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,73,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,16,598,            return offset;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,59,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,93,            return instant; // the easy case,1,0,0,0,0,1,0,0,0,2,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,117,            yearToUse = thisYear + (monthToUse / iMax) - 1;,4,3,0,1,2,0,0,0,1,5,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,118,            monthToUse = Math.abs(monthToUse);,1,0,0,1,2,0,3,0,1,5,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,119,            int remMonthToUse = monthToUse % iMax;,3,1,0,0,0,1,0,0,0,3,38,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,121,            if (remMonthToUse == 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,122,                remMonthToUse = iMax;,2,0,0,0,0,0,0,0,1,2,21,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,124,            monthToUse = iMax - remMonthToUse + 1;,3,2,0,0,0,0,0,0,1,3,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,126,            if (monthToUse == 1) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,127,                yearToUse += 1;,1,0,0,0,0,0,0,0,1,2,15,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,139,            dayToUse = maxDay;,2,0,0,0,0,0,0,0,1,2,18,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,151,        int i_months = (int)months;,2,0,0,1,2,2,0,0,0,4,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,152,        if (i_months == months) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,153,"            return add(instant, i_months);",0,0,0,0,2,1,3,0,1,4,30,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,158,        long timePart = iChronology.getMillisOfDay(instant);,1,0,0,1,2,1,3,0,0,5,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,160,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",1,0,0,0,2,1,4,0,0,4,62,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,164,        long monthToUse = thisMonth - 1 + months;,3,2,0,0,0,1,0,0,0,3,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,165,        if (monthToUse >= 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,166,            yearToUse = thisYear + (monthToUse / iMax);,4,2,0,1,2,0,0,0,1,5,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,167,            monthToUse = (monthToUse % iMax) + 1;,3,2,0,1,2,0,0,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,169,            yearToUse = thisYear + (monthToUse / iMax) - 1;,4,3,0,1,2,0,0,0,1,5,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,170,            monthToUse = Math.abs(monthToUse);,1,0,0,1,2,0,3,0,1,5,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,171,            int remMonthToUse = (int)(monthToUse % iMax);,3,1,0,1,4,2,0,0,0,5,45,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,172,            if (remMonthToUse == 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,173,                remMonthToUse = iMax;,2,0,0,0,0,0,0,0,1,2,21,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,175,            monthToUse = iMax - remMonthToUse + 1;,3,2,0,0,0,0,0,0,1,3,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,176,            if (monthToUse == 1) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,177,                yearToUse += 1;,1,0,0,0,0,0,0,0,1,2,15,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,181,        if (yearToUse < iChronology.getMinYear() ||,1,2,0,1,3,1,2,0,0,6,43,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,184,            throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,188,        int i_yearToUse = (int)yearToUse;,2,0,0,1,2,2,0,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,189,        int i_monthToUse = (int)monthToUse;,2,0,0,1,2,2,0,0,0,4,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",1,0,0,0,2,1,5,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);",1,0,0,0,2,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,193,        if (dayToUse > maxDay) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,194,            dayToUse = maxDay;,2,0,0,0,0,0,0,0,1,2,18,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,197,        long datePart =,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,199,        return datePart + timePart;,2,1,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,206,        if (valueToAdd == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,207,            return values;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,209,        if (DateTimeUtils.isContiguous(partial)) {,0,0,0,2,5,1,3,0,0,4,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,210,            long instant = 0L;,1,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,211,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,57,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,212,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",1,0,1,1,8,0,7,0,1,6,80,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,214,"            instant = add(instant, valueToAdd);",1,0,0,0,2,0,3,0,2,4,35,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,215,"            return iChronology.get(partial, instant);",0,0,0,0,2,1,4,0,0,3,41,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,217,"            return super.add(partial, fieldIndex, values, valueToAdd);",5,0,0,0,2,2,0,0,0,3,58,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,232,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));",0,0,0,1,6,1,9,0,2,5,81,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,237,        if (minuendInstant < subtrahendInstant) {,2,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,238,"            return -getDifference(subtrahendInstant, minuendInstant);",0,0,0,0,2,1,3,0,2,4,57,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,241,        int minuendYear = iChronology.getYear(minuendInstant);,1,0,0,1,2,1,3,0,0,5,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,242,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",1,0,0,0,2,1,4,0,0,4,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,243,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,1,0,0,1,2,1,3,0,0,5,60,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,244,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",1,0,0,0,2,1,4,0,0,4,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,246,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,6,4,0,2,6,2,0,0,0,5,98,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,250,        int minuendDom = iChronology.getDayOfMonth,1,0,0,0,0,1,2,0,0,3,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,252,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",1,1,0,0,5,1,4,0,0,5,78,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,254,            int subtrahendDom = iChronology.getDayOfMonth,1,0,0,0,0,1,2,0,0,3,45,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,256,            if (subtrahendDom > minuendDom) {,2,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,260,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);",1,0,0,1,4,0,5,0,1,5,80,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,265,        long minuendRem = minuendInstant,2,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,267,        long subtrahendRem = subtrahendInstant,2,1,0,0,0,1,0,0,0,3,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,270,        if (minuendRem < subtrahendRem) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,271,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,274,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,300,            thisDom = maxDom;,2,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,314,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,315,        if (iChronology.isLeapYear(thisYear)) {,0,0,0,2,5,1,3,0,0,4,39,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,316,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);",1,1,0,0,4,1,4,0,0,5,69,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,318,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,323,        return isLeap(instant) ? 1 : 0;,0,0,0,1,2,1,2,0,1,5,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,333,        return MIN;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,338,        return iMax;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,343,        int year = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,344,"        int month = iChronology.getMonthOfYear(instant, year);",1,0,0,0,2,1,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,345,"        return iChronology.getYearMonthMillis(year, month);",0,0,0,0,2,1,4,0,0,3,51,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,350,        return instant - roundFloor(instant);,1,1,0,1,2,1,2,0,1,7,37,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,16,358,        return iChronology.monthOfYear();,0,0,0,1,2,1,2,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,84,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,93,        return getInstance(DateTimeZone.getDefault());,0,0,0,2,4,1,3,0,1,5,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,105,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,135,        Chronology base = getBase();,1,0,0,1,2,0,1,1,1,6,28,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,136,        return base == null ? getInstanceUTC() : getInstance(base.getZone());,1,1,0,2,6,1,4,0,2,7,69,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,147,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,157,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,158,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,160,        if (zone == getZone()) {,1,1,0,2,5,1,1,0,1,7,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,161,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,163,        return getInstance(zone);,0,0,0,1,2,1,2,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,174,        return super.equals(obj);,2,0,0,1,2,2,0,0,0,4,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,184,"        return ""Buddhist"".hashCode() * 11 + getZone().hashCode();",0,2,0,1,6,1,3,0,2,6,57,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,195,"        String str = ""BuddhistChronology"";",1,0,0,0,0,0,0,1,1,3,34,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,196,        DateTimeZone zone = getZone();,1,0,0,1,2,0,1,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,197,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,198,            str = str + '[' + zone.getID() + ']';,2,1,0,1,4,0,2,0,3,6,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BuddhistChronology,16,200,        return str;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,95,"        newInstant = to.weekyear().set(0, from.weekyear().get(instant));",1,0,0,1,8,0,7,0,1,5,64,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,96,"        newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant));",1,0,0,1,8,0,8,0,1,5,85,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,97,"        newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant));",1,0,0,1,8,0,8,0,1,5,75,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,98,"        newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant));",1,0,0,1,8,0,8,0,1,5,79,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,99,        return newInstant;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,123,"        return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);",2,0,0,0,2,1,2,0,1,5,57,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,139,"        return getInstance(DateTimeZone.getDefault(), DEFAULT_CUTOVER, 4);",0,0,0,1,4,1,4,0,1,5,66,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,155,"        return getInstance(zone, DEFAULT_CUTOVER, 4);",0,0,0,0,2,1,3,0,1,4,45,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,247,        if (gregorianCutover == DEFAULT_CUTOVER.getMillis()) {,1,1,0,2,5,1,2,0,0,6,54,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,248,            cutoverInstant = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,250,            cutoverInstant = new Instant(gregorianCutover);,2,0,0,1,2,1,0,1,2,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,252,"        return getInstance(zone, cutoverInstant, minDaysInFirstWeek);",0,0,0,0,2,1,4,0,1,4,61,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,288,"        return getInstance(getZone(), iCutoverInstant, getMinimumDaysInFirstWeek());",0,0,0,1,6,1,4,0,3,5,76,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,294,            return base.getZone();,0,0,0,1,2,1,2,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,318,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,323,"        return getInstance(zone, iCutoverInstant, getMinimumDaysInFirstWeek());",0,0,0,1,4,1,4,0,2,5,71,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,331,        if ((base = getBase()) != null) {,1,1,0,3,7,1,1,0,2,7,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,332,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0,0,0,0,2,1,6,0,0,3,74,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,336,        long instant = iGregorianChronology.getDateTimeMillis,1,0,0,0,0,1,2,0,0,3,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,338,        if (instant < iCutoverMillis) {,2,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,340,            instant = iJulianChronology.getDateTimeMillis,1,0,0,0,0,0,2,0,1,3,45,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,342,            if (instant >= iCutoverMillis) {,2,1,0,1,3,1,0,0,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,344,"                throw new IllegalArgumentException(""Specified date does not exist"");",0,0,0,1,2,2,0,1,2,5,68,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,347,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,356,        if ((base = getBase()) != null) {,1,1,0,3,7,1,1,0,2,7,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,357,            return base.getDateTimeMillis,0,0,0,0,0,1,2,0,0,2,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,365,            instant = iGregorianChronology.getDateTimeMillis,1,0,0,0,0,0,2,0,1,3,48,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,378,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,368,        } catch (IllegalFieldValueException ex) {,1,0,0,1,4,1,0,1,0,5,41,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,369,            if (monthOfYear != 2 || dayOfMonth != 29) {,2,3,0,1,3,1,0,0,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,370,                throw ex;,1,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,372,            instant = iGregorianChronology.getDateTimeMillis,1,0,0,0,0,0,2,0,1,3,48,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,375,            if (instant >= iCutoverMillis) {,2,1,0,1,3,1,0,0,0,5,32,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,376,                throw ex;,1,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,379,        if (instant < iCutoverMillis) {,2,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,381,            instant = iJulianChronology.getDateTimeMillis,1,0,0,0,0,0,2,0,1,3,45,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,384,            if (instant >= iCutoverMillis) {,2,1,0,1,3,1,0,0,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,386,"                throw new IllegalArgumentException(""Specified date does not exist"");",0,0,0,1,2,2,0,1,2,5,68,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,389,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,417,        return super.equals(obj);,2,0,0,1,2,2,0,0,0,4,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,427,"        return ""GJ"".hashCode() * 11 + iJulianChronology.hashCode() +",0,4,0,1,4,1,3,0,1,6,60,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,439,        StringBuffer sb = new StringBuffer(60);,1,0,0,1,2,1,0,2,1,6,39,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,440,"        sb.append(""GJChronology"");",0,0,0,1,2,0,2,0,1,4,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,441,        sb.append('[');,0,0,0,1,3,0,2,0,1,4,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,442,        sb.append(getZone().getID());,0,0,0,2,6,0,4,0,1,4,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,444,        if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) {,1,1,0,2,5,1,2,0,0,6,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,445,"            sb.append("",cutover="");",0,0,0,0,2,0,2,0,1,3,23,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,447,            if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {,0,1,0,2,9,1,4,0,1,6,59,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,448,                printer = ISODateTimeFormat.date();,1,0,0,1,2,0,2,0,1,5,35,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,450,                printer = ISODateTimeFormat.dateTime();,1,0,0,1,2,0,2,0,1,5,39,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,452,"            printer.withChronology(withUTC()).printTo(sb, iCutoverMillis);",0,0,0,2,6,0,6,0,1,4,62,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,455,        if (getMinimumDaysInFirstWeek() != 4) {,0,1,0,2,5,1,1,0,1,6,39,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,456,"            sb.append("",mdfw="");",0,0,0,0,2,0,2,0,1,3,20,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,457,            sb.append(getMinimumDaysInFirstWeek());,0,0,0,2,4,0,3,0,1,4,39,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,459,        sb.append(']');,0,0,0,1,3,0,2,0,1,4,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,461,        return sb.toString();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,481,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,583,"        return convertByWeekyear(instant, iJulianChronology, iGregorianChronology);",0,0,0,0,2,1,4,0,1,4,75,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,587,"        return convertByWeekyear(instant, iGregorianChronology, iJulianChronology);",0,0,0,0,2,1,4,0,1,4,75,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,68,"            throw new IllegalArgumentException(""Must supply a chronology"");",0,0,0,1,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,75,            if (!lowerLimit.isBefore(upperLimit)) {,0,0,0,2,5,1,3,0,1,5,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,76,                throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,8,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,111,        return iLowerLimit;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,120,        return iUpperLimit;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,129,        return withZone(DateTimeZone.UTC);,2,0,0,1,2,1,1,0,1,6,34,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,138,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,139,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,141,        if (zone == getZone()) {,1,1,0,2,5,1,1,0,1,7,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,142,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,145,        if (zone == DateTimeZone.UTC && iWithUTC != null) {,4,3,0,1,3,1,0,0,0,5,51,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,146,            return iWithUTC;,1,0,0,0,0,1,0,0,0,2,16,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,149,        DateTime lowerLimit = iLowerLimit;,2,0,0,0,0,0,0,1,0,2,34,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,150,        if (lowerLimit != null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,151,            MutableDateTime mdt = lowerLimit.toMutableDateTime();,1,0,0,1,2,0,2,1,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,152,            mdt.setZoneRetainFields(zone);,0,0,0,1,2,0,3,0,0,3,30,7,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,153,            lowerLimit = mdt.toDateTime();,1,0,0,1,2,0,2,0,1,5,30,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,156,        DateTime upperLimit = iUpperLimit;,2,0,0,0,0,0,0,1,0,2,34,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,157,        if (upperLimit != null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,158,            MutableDateTime mdt = upperLimit.toMutableDateTime();,1,0,0,1,2,0,2,1,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,159,            mdt.setZoneRetainFields(zone);,0,0,0,1,2,0,3,0,0,3,30,7,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,160,            upperLimit = mdt.toDateTime();,1,0,0,1,2,0,2,0,1,5,30,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,163,        LimitChronology chrono = getInstance,1,0,0,0,0,0,1,1,1,4,36,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,166,        if (zone == DateTimeZone.UTC) {,3,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,167,            iWithUTC = chrono;,2,0,0,0,0,0,0,0,1,2,18,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,170,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,177,"        long instant = getBase().getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",1,0,0,1,4,1,6,0,1,6,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,178,"        checkLimits(instant, ""resulting"");",0,0,0,0,2,0,2,0,2,3,34,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,179,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,187,        long instant = getBase().getDateTimeMillis,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,190,"        checkLimits(instant, ""resulting"");",0,0,0,0,2,0,2,0,2,3,34,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,191,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,199,"        checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,200,        instant = getBase().getDateTimeMillis,1,0,0,1,2,0,2,0,2,5,37,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,202,"        checkLimits(instant, ""resulting"");",0,0,0,0,2,0,2,0,2,3,34,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,203,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,269,            return field;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,272,            return (DateTimeField)converted.get(field);,0,0,0,1,4,1,3,1,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,285,        if ((limit = iLowerLimit) != null && instant < limit.getMillis()) {,3,3,0,2,7,1,2,0,1,7,67,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,286,"            throw new LimitException(desc, true);",1,0,0,0,2,2,0,1,2,5,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,288,        if ((limit = iUpperLimit) != null && instant >= limit.getMillis()) {,3,3,0,2,7,1,2,0,1,7,68,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,289,"            throw new LimitException(desc, false);",1,0,0,0,2,2,0,1,2,5,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,291,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,303,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,304,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,306,        if (obj instanceof LimitChronology == false) {,1,1,0,1,3,2,0,1,1,7,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,307,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,309,        LimitChronology chrono = (LimitChronology) obj;,2,0,0,1,2,0,0,2,0,4,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,310,        return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,323,        int hash = 317351877;,1,0,0,0,0,1,0,0,0,2,21,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,324,        hash += (getLowerLimit() != null ? getLowerLimit().hashCode() : 0);,1,1,0,2,8,0,3,0,3,6,67,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,325,        hash += (getUpperLimit() != null ? getUpperLimit().hashCode() : 0);,1,1,0,2,8,0,3,0,3,6,67,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,326,        hash += getBase().hashCode() * 7;,1,1,0,1,4,0,2,0,2,6,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,327,        return hash;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,336,"        return ""LimitChronology["" + getBase().toString() + "", "" +",0,1,0,1,5,1,2,0,3,6,57,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,57,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,62,        return ERA_VALUE;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,67,"        FieldUtils.verifyValueBounds(this, era, ERA_VALUE, ERA_VALUE);",0,0,0,0,2,1,5,0,0,3,62,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,68,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,73,"        if (iEraText.equals(text) == false && ""1"".equals(text) == false) {",0,3,0,2,7,1,5,0,3,6,66,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,74,"            throw new IllegalFieldValueException(DateTimeFieldType.era(), text);",1,0,0,1,4,2,2,1,1,7,68,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,76,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,81,        return Long.MIN_VALUE;,2,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,86,        return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,91,        return Long.MIN_VALUE;,2,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,96,        return Long.MIN_VALUE;,2,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,101,        return Long.MIN_VALUE;,2,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,116,        return ERA_VALUE;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,121,        return ERA_VALUE;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,126,        return iEraText;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicSingleEraDateTimeField,16,131,        return iEraText.length();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,396,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,397,"            return getWrappedField().getValue(duration, instant);",0,0,0,1,4,1,4,0,1,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,401,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,402,"            return getWrappedField().getValueAsLong(duration, instant);",0,0,0,1,4,1,4,0,1,5,59,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,406,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,407,"            return getWrappedField().getMillis(value, instant);",0,0,0,1,4,1,4,0,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,411,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,412,"            return getWrappedField().getMillis(value, instant);",0,0,0,1,4,1,4,0,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,416,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,417,"            long result = getWrappedField().add(instant, amount);",1,0,0,1,4,1,4,0,1,6,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,418,"            checkLimits(result, ""resulting"");",0,0,0,0,2,0,2,0,2,3,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,419,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,423,"            checkLimits(instant, null);",0,0,0,0,2,0,2,0,1,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,424,"            long result = getWrappedField().add(instant, amount);",1,0,0,1,4,1,4,0,1,6,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,425,"            checkLimits(result, ""resulting"");",0,0,0,0,2,0,2,0,2,3,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,426,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,430,"            checkLimits(minuendInstant, ""minuend"");",0,0,0,0,2,0,2,0,2,3,39,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,431,"            checkLimits(subtrahendInstant, ""subtrahend"");",0,0,0,0,2,0,2,0,2,3,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,432,"            return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,74,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,436,"            checkLimits(minuendInstant, ""minuend"");",0,0,0,0,2,0,2,0,2,3,39,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,437,"            checkLimits(subtrahendInstant, ""subtrahend"");",0,0,0,0,2,0,2,0,2,3,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,438,"            return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,80,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,16,42,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);,0,0,0,1,4,1,5,0,0,4,76,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,16,47,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);,0,0,0,1,4,1,5,0,0,4,81,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,16,52,        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);,0,0,0,1,4,1,5,0,0,4,70,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,16,57,        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();,0,0,0,1,4,1,4,0,0,4,65,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,16,62,        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();,0,0,0,1,4,1,4,0,0,4,70,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,965,            if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,966,"                instant = iGregorianField.add(instant, value);",1,0,0,0,2,0,4,0,1,4,46,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,967,                if (instant < iCutover) {,2,1,0,1,3,1,0,0,0,5,25,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,969,                    if (instant + iGapDuration < iCutover) {,3,2,0,1,3,1,0,0,0,5,40,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,970,                        instant = gregorianToJulian(instant);,1,0,0,1,2,0,2,0,2,5,37,11,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,974,"                instant = iJulianField.add(instant, value);",1,0,0,0,2,0,4,0,1,4,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,975,                if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,977,                    if (instant - iGapDuration >= iCutover) {,3,2,0,1,3,1,0,0,0,5,41,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,978,                        instant = julianToGregorian(instant);,1,0,0,1,2,0,2,0,2,5,37,11,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,982,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,986,            if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,987,"                instant = iGregorianField.add(instant, value);",1,0,0,0,2,0,4,0,1,4,46,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,988,                if (instant < iCutover) {,2,1,0,1,3,1,0,0,0,5,25,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,990,                    if (instant + iGapDuration < iCutover) {,3,2,0,1,3,1,0,0,0,5,40,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,991,                        instant = gregorianToJulian(instant);,1,0,0,1,2,0,2,0,2,5,37,11,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,995,"                instant = iJulianField.add(instant, value);",1,0,0,0,2,0,4,0,1,4,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,996,                if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,998,                    if (instant - iGapDuration >= iCutover) {,3,2,0,1,3,1,0,0,0,5,41,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,999,                        instant = julianToGregorian(instant);,1,0,0,1,2,0,2,0,2,5,37,11,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1003,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1007,            if (minuendInstant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1008,                if (subtrahendInstant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,36,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1009,"                    return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,72,10,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1013,                minuendInstant = gregorianToJulian(minuendInstant);,1,0,0,1,2,0,2,0,2,5,51,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1014,"                return iJulianField.getDifference(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,69,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1016,                if (subtrahendInstant < iCutover) {,2,1,0,1,3,1,0,0,0,5,35,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1017,"                    return iJulianField.getDifference(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,69,10,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1021,                minuendInstant = julianToGregorian(minuendInstant);,1,0,0,1,2,0,2,0,2,5,51,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1022,"                return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,72,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1027,            if (minuendInstant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1028,                if (subtrahendInstant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,36,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1029,"                    return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,78,10,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1033,                minuendInstant = gregorianToJulian(minuendInstant);,1,0,0,1,2,0,2,0,2,5,51,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1034,"                return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,75,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1036,                if (subtrahendInstant < iCutover) {,2,1,0,1,3,1,0,0,0,5,35,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1037,"                    return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,75,10,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1041,                minuendInstant = julianToGregorian(minuendInstant);,1,0,0,1,2,0,2,0,2,5,51,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1042,"                return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,78,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1057,            if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1058,                return iGregorianField.getMinimumValue(instant);,0,0,0,1,2,1,3,0,0,4,48,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1060,                return iJulianField.getMinimumValue(instant);,0,0,0,1,2,1,3,0,0,4,45,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1065,            if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1066,                return iGregorianField.getMaximumValue(instant);,0,0,0,1,2,1,3,0,0,4,48,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1068,                return iJulianField.getMaximumValue(instant);,0,0,0,1,2,1,3,0,0,4,45,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,640,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,645,                return iGregorianField.get(instant);,0,0,0,1,2,1,3,0,0,4,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,652,            if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,653,"                return iGregorianField.getAsText(instant, locale);",0,0,0,0,2,1,4,0,0,3,50,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,655,"                return iJulianField.getAsText(instant, locale);",0,0,0,0,2,1,4,0,0,3,47,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,660,"            return iGregorianField.getAsText(fieldValue, locale);",0,0,0,0,2,1,4,0,0,3,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,664,            if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,665,"                return iGregorianField.getAsShortText(instant, locale);",0,0,0,0,2,1,4,0,0,3,55,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,667,"                return iJulianField.getAsShortText(instant, locale);",0,0,0,0,2,1,4,0,0,3,52,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,672,"            return iGregorianField.getAsShortText(fieldValue, locale);",0,0,0,0,2,1,4,0,0,3,58,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,676,"            return iGregorianField.add(instant, value);",0,0,0,0,2,1,4,0,0,3,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,680,"            return iGregorianField.add(instant, value);",0,0,0,0,2,1,4,0,0,3,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,686,            if (valueToAdd == 0) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,687,                return values;,1,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,689,            if (DateTimeUtils.isContiguous(partial)) {,0,0,0,2,5,1,3,0,0,4,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,690,                long instant = 0L;,1,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,691,"                for (int i = 0, isize = partial.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,57,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,692,"                    instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]);",2,0,1,1,8,1,6,0,1,7,86,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,694,"                instant = add(instant, valueToAdd);",1,0,0,0,2,0,3,0,2,4,35,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,695,"                return GJChronology.this.get(partial, instant);",1,0,0,0,2,2,3,0,0,4,47,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,697,"                return super.add(partial, fieldIndex, values, valueToAdd);",5,0,0,0,2,2,0,0,0,3,58,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,702,"            return iGregorianField.getDifference(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,72,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,706,"            return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,78,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,719,                        throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,11,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,727,                    if (instant - iGapDuration >= iCutover) {,3,2,0,1,3,1,0,0,0,5,41,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,728,                        instant = julianToGregorian(instant);,1,0,0,1,2,0,2,0,2,5,37,11,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,731,                    if (get(instant) != value) {,1,1,0,2,5,1,2,0,1,7,28,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,732,                       throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,11,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,741,            if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,742,"                instant = iGregorianField.set(instant, text, locale);",1,0,0,0,2,0,5,0,1,4,53,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,743,                if (instant < iCutover) {,2,1,0,1,3,1,0,0,0,5,25,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,745,                    if (instant + iGapDuration < iCutover) {,3,2,0,1,3,1,0,0,0,5,40,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,746,                        instant = gregorianToJulian(instant);,1,0,0,1,2,0,2,0,2,5,37,11,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,751,"                instant = iJulianField.set(instant, text, locale);",1,0,0,0,2,0,5,0,1,4,50,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,752,                if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,754,                    if (instant - iGapDuration >= iCutover) {,3,2,0,1,3,1,0,0,0,5,41,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,755,                        instant = julianToGregorian(instant);,1,0,0,1,2,0,2,0,2,5,37,11,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,760,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,772,            if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,773,                return iGregorianField.isLeap(instant);,0,0,0,1,2,1,3,0,0,4,39,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,775,                return iJulianField.isLeap(instant);,0,0,0,1,2,1,3,0,0,4,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,780,            if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,781,                return iGregorianField.getLeapAmount(instant);,0,0,0,1,2,1,3,0,0,4,46,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,783,                return iJulianField.getLeapAmount(instant);,0,0,0,1,2,1,3,0,0,4,43,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,799,            return iJulianField.getMinimumValue(partial);,0,0,0,1,2,1,3,0,0,4,45,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,803,"            return iJulianField.getMinimumValue(partial, values);",0,0,0,0,2,1,4,0,0,3,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,807,            if (instant < iCutover) {,2,1,0,1,3,1,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,808,                return iJulianField.getMinimumValue(instant);,0,0,0,1,2,1,3,0,0,4,45,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,811,            int min = iGregorianField.getMinimumValue(instant);,1,0,0,1,2,1,3,0,0,5,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,815,"            instant = iGregorianField.set(instant, min);",1,0,0,0,2,0,4,0,1,4,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,816,            if (instant < iCutover) {,2,1,0,1,3,1,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,817,                min = iGregorianField.get(iCutover);,1,0,0,1,2,0,3,0,1,5,36,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,820,            return min;,1,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,830,            if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,831,                return iGregorianField.getMaximumValue(instant);,0,0,0,1,2,1,3,0,0,4,48,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,834,            int max = iJulianField.getMaximumValue(instant);,1,0,0,1,2,1,3,0,0,5,48,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,838,"            instant = iJulianField.set(instant, max);",1,0,0,0,2,0,4,0,1,4,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,839,            if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,840,"                max = iJulianField.get(iJulianField.add(iCutover, -1));",1,0,0,0,4,0,5,0,2,4,55,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,843,            return max;,1,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,847,"            long instant = GJChronology.getInstanceUTC().set(partial, 0L);",1,0,0,1,4,1,4,0,0,5,62,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,848,            return getMaximumValue(instant);,0,0,0,1,2,1,2,0,1,5,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,852,            Chronology chrono = GJChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,853,            long instant = 0L;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,854,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,57,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,855,                DateTimeField field = partial.getFieldType(i).getField(chrono);,1,0,0,1,4,0,5,1,0,5,63,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,856,                if (values[i] <= field.getMaximumValue(instant)) {,0,1,1,2,7,1,3,0,0,6,50,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,857,"                    instant = field.set(instant, values[i]);",1,0,1,0,4,0,3,0,1,5,40,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,860,            return getMaximumValue(instant);,0,0,0,1,2,1,2,0,1,5,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,864,            if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,865,                instant = iGregorianField.roundFloor(instant);,1,0,0,1,2,0,3,0,1,5,46,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,866,                if (instant < iCutover) {,2,1,0,1,3,1,0,0,0,5,25,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,868,                    if (instant + iGapDuration < iCutover) {,3,2,0,1,3,1,0,0,0,5,40,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,869,                        instant = gregorianToJulian(instant);,1,0,0,1,2,0,2,0,2,5,37,11,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,873,                instant = iJulianField.roundFloor(instant);,1,0,0,1,2,0,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,875,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,879,            if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,880,                instant = iGregorianField.roundCeiling(instant);,1,0,0,1,2,0,3,0,1,5,48,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,882,                instant = iJulianField.roundCeiling(instant);,1,0,0,1,2,0,3,0,1,5,45,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,883,                if (instant >= iCutover) {,2,1,0,1,3,1,0,0,0,5,26,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,885,                    if (instant - iGapDuration >= iCutover) {,3,2,0,1,3,1,0,0,0,5,41,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,886,                        instant = julianToGregorian(instant);,1,0,0,1,2,0,2,0,2,5,37,11,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,890,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,894,"            return Math.max(iJulianField.getMaximumTextLength(locale),",0,0,0,1,3,1,5,0,0,4,58,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,899,"            return Math.max(iJulianField.getMaximumShortTextLength(locale),",0,0,0,1,3,1,5,0,0,4,63,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,904,            if (iConvertByWeekyear) {,1,0,0,1,3,1,0,0,0,4,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,905,                return julianToGregorianByWeekyear(instant);,0,0,0,1,2,1,2,0,1,5,44,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,907,                return julianToGregorianByYear(instant);,0,0,0,1,2,1,2,0,1,5,40,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,913,                return gregorianToJulianByWeekyear(instant);,0,0,0,1,2,1,2,0,1,5,44,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1088,"            return iField.add(instant, value);",0,0,0,0,2,1,4,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1092,"            return iField.add(instant, value);",0,0,0,0,2,1,4,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1096,"            return iField.getDifference(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,63,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJChronology,16,1100,"            return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,69,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,54,        return iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,1,3,0,0,4,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,70,        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),4,3,0,1,2,2,0,0,0,5,73,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,75,        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);,4,2,0,1,2,2,0,0,0,5,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,79,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,83,        return 53;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,87,        int weekyear = iChronology.getWeekyear(instant);,1,0,0,1,2,1,3,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,88,        return iChronology.getWeeksInYear(weekyear);,0,0,0,1,2,1,3,0,0,4,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,92,        if (partial.isSupported(DateTimeFieldType.weekyear())) {,0,0,0,3,7,1,4,0,0,4,56,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,93,            int weekyear = partial.get(DateTimeFieldType.weekyear());,1,0,0,2,4,1,4,0,0,5,57,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,94,            return iChronology.getWeeksInYear(weekyear);,0,0,0,1,2,1,3,0,0,4,44,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,96,        return 53;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,100,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,101,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,102,            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {,0,1,0,2,7,1,5,0,0,5,62,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,103,                int weekyear = values[i];,1,0,1,0,2,1,0,0,0,4,25,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,104,                return iChronology.getWeeksInYear(weekyear);,0,0,0,1,2,1,3,0,0,4,44,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,107,        return 53;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,111,        return value > 52 ? getMaximumValue(instant) : 52;,1,1,0,1,2,1,2,0,1,7,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,16,118,        return iChronology.weekOfWeekyear();,0,0,0,1,2,1,2,0,0,4,36,5,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,80,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,95,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,104,"        return getInstance(DateTimeZone.getDefault(), 4);",0,0,0,1,4,1,3,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,126,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,137,            } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,8,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,138,                throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,9,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,145,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",3,0,0,0,2,0,2,0,2,4,59,10,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,146,                    chrono = new JulianChronology,1,0,0,0,0,1,0,1,2,4,29,10,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,169,        Chronology base = getBase();,1,0,0,1,2,0,1,1,1,6,28,4,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,170,        int minDays = getMinimumDaysInFirstWeek();,1,0,0,1,2,1,1,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,171,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,3,1,0,1,2,0,0,0,1,5,77,4,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,172,        return base == null ?,1,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,185,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,195,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,196,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,198,        if (zone == getZone()) {,1,1,0,2,5,1,1,0,1,7,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,199,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,201,        return getInstance(zone);,0,0,0,1,2,1,2,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,226,            leapYears = relativeYear >> 2;,2,1,0,0,0,0,0,0,1,3,30,6,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,228,            if (!isLeapYear(year)) {,0,0,0,2,5,1,2,0,2,5,24,6,0.0,0,0
defect4j,time,org/joda/time/chrono/JulianChronology,16,229,                leapYears++;,1,0,0,0,0,0,0,0,1,2,12,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,754,            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);,0,0,0,1,4,1,5,0,0,4,72,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,758,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));",0,0,0,1,6,1,7,0,1,5,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,16,762,            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();,0,0,0,1,4,1,4,0,0,4,67,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,50,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,59,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,67,"        return add(instant, FieldUtils.safeToInt(years));",0,0,0,1,4,1,5,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,71,        if (years == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,72,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,75,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,76,        int wrappedYear = FieldUtils.getWrappedValue,1,0,0,0,0,1,2,0,0,3,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,78,"        return set(instant, wrappedYear);",0,0,0,0,2,1,3,0,1,4,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,88,        if (minuendInstant < subtrahendInstant) {,2,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);",0,0,0,0,2,1,4,0,1,4,73,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,72,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,99,        return iChronology.isLeapYear(get(instant));,0,0,0,2,4,1,4,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,103,        if (iChronology.isLeapYear(get(instant))) {,0,0,0,3,7,1,4,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,104,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,106,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,123,        return iChronology.getYearMillis(get(instant));,0,0,0,2,4,1,4,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,137,        return instant - roundFloor(instant);,1,1,0,1,2,1,2,0,1,7,37,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,16,144,        return iChronology.year();,0,0,0,1,2,1,2,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,45,        int year = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,46,        if (year <= 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,47,            year = 1 - year;,2,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,49,        return year;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,53,"        return getWrappedField().add(instant, years);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,57,"        return getWrappedField().add(instant, years);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,61,"        return getWrappedField().addWrapField(instant, years);",0,0,0,1,4,1,4,0,1,5,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0,0,0,1,4,1,6,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,80,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());",0,0,0,1,4,1,4,0,1,5,63,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,86,        if (iChronology.getYear(instant) <= 0) {,0,1,0,2,5,1,3,0,0,5,40,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,87,            year = 1 - year;,2,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,89,"        return super.set(instant, year);",3,0,0,0,2,2,0,0,0,3,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,101,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,105,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,109,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,16,116,        return iChronology.yearOfEra();,0,0,0,1,2,1,2,0,0,4,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,51,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,60,        if (iChronology.getYear(instant) <= 0) {,0,1,0,2,5,1,3,0,0,5,40,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,61,            return DateTimeConstants.BCE;,2,0,0,0,0,1,0,0,0,2,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,63,            return DateTimeConstants.CE;,2,0,0,0,0,1,0,0,0,2,28,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,68,        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);,0,0,0,1,4,1,5,0,0,4,68,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);",4,0,0,0,2,1,3,0,0,4,85,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,82,        int oldEra = get(instant);,1,0,0,1,2,1,2,0,1,6,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,83,        if (oldEra != era) {,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,84,            int year = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,40,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,85,"            return iChronology.setYear(instant, -year);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,87,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));",0,0,0,1,6,1,7,0,1,5,76,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,96,        if (get(instant) == DateTimeConstants.CE) {,2,1,0,2,5,1,2,0,1,7,43,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,97,"            return iChronology.setYear(0, 1);",0,0,0,0,2,1,2,0,0,3,33,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,99,            return Long.MIN_VALUE;,2,0,0,0,0,1,0,0,0,2,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,104,        if (get(instant) == DateTimeConstants.BCE) {,2,1,0,2,5,1,2,0,1,7,44,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,105,"            return iChronology.setYear(0, 1);",0,0,0,0,2,1,2,0,0,3,33,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,107,            return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,113,        return roundFloor(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,118,        return roundFloor(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,123,        return roundFloor(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,135,        return DateTimeConstants.BCE;,2,0,0,0,0,1,0,0,0,2,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,139,        return DateTimeConstants.CE;,2,0,0,0,0,1,0,0,0,2,28,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,143,        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();,0,0,0,1,4,1,4,0,0,4,63,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,16,150,        return iChronology.era();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,16,67,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);,0,0,0,1,4,1,5,0,0,4,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,16,78,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);,0,0,0,1,4,1,5,0,0,4,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,16,90,        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);,0,0,0,1,4,1,5,0,0,4,68,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,16,122,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();,0,0,0,1,4,1,4,0,0,4,69,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,16,132,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();,0,0,0,1,4,1,4,0,0,4,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,16,139,        return iChronology.dayOfWeek();,0,0,0,1,2,1,2,0,0,4,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,59,        return iChronology.getDaysInMonthMax();,0,0,0,1,2,1,2,0,0,4,39,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,63,        return iChronology.getDaysInMonthMax(instant);,0,0,0,1,2,1,3,0,0,4,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,67,        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {,0,0,0,3,7,1,4,0,0,4,59,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,68,            int month = partial.get(DateTimeFieldType.monthOfYear());,1,0,0,2,4,1,4,0,0,5,57,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,69,            if (partial.isSupported(DateTimeFieldType.year())) {,0,0,0,3,7,1,4,0,0,4,52,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,70,                int year = partial.get(DateTimeFieldType.year());,1,0,0,2,4,1,4,0,0,5,49,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,71,"                return iChronology.getDaysInYearMonth(year, month);",0,0,0,0,2,1,4,0,0,3,51,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,73,            return iChronology.getDaysInMonthMax(month);,0,0,0,1,2,1,3,0,0,4,44,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,75,        return getMaximumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,79,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,80,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0,1,0,2,7,1,5,0,0,5,65,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,82,                int month = values[i];,1,0,1,0,2,1,0,0,0,4,22,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,83,                for (int j = 0; j < size; j++) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0,1,0,2,7,1,5,0,0,5,58,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,85,                        int year = values[j];,1,0,1,0,2,1,0,0,0,4,21,13,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,86,"                        return iChronology.getDaysInYearMonth(year, month);",0,0,0,0,2,1,4,0,0,3,51,13,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,89,                return iChronology.getDaysInMonthMax(month);,0,0,0,1,2,1,3,0,0,4,44,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,92,        return getMaximumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,16,103,        return iChronology.dayOfMonth();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,49,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,73,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,79,"        return add(instant, FieldUtils.safeToInt(value));",0,0,0,1,4,1,5,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,92,"        return add(instant, years);",0,0,0,0,2,1,3,0,1,4,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,96,        if (minuendInstant < subtrahendInstant) {,2,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,97,"            return -getDifference(subtrahendInstant, minuendInstant);",0,0,0,0,2,1,3,0,2,4,57,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,100,        int minuendWeekyear = get(minuendInstant);,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,101,        int subtrahendWeekyear = get(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,103,        long minuendRem = remainder(minuendInstant);,1,0,0,1,2,1,2,0,1,6,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,104,        long subtrahendRem = remainder(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,107,        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {,2,3,0,2,5,1,3,0,0,6,84,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,108,            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;,3,0,0,0,0,0,0,0,1,2,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,111,        int difference = minuendWeekyear - subtrahendWeekyear;,3,1,0,0,0,1,0,0,0,3,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,112,        if (minuendRem < subtrahendRem) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,113,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,115,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,135,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,156,            setToWeek = maxOutWeeks;,2,0,0,0,0,0,0,0,1,2,24,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,180,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,3,0,0,0,0,0,0,0,1,2,49,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,182,            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;,3,0,0,0,0,0,0,0,1,2,49,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,212,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;,0,1,0,2,4,1,5,0,0,5,73,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,216,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;,0,1,0,2,4,1,5,0,0,5,73,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,243,        return instant - roundFloor(instant);,1,1,0,1,2,1,2,0,1,7,37,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,16,250,        return iChronology.weekyear();,0,0,0,1,2,1,2,0,0,4,30,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,216,        Stub(DateTimeZone zone) {,2,0,0,1,3,0,0,1,0,4,25,3,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,217,            iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,218,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,221,            return ISOChronology.getInstance(iZone);,0,0,0,1,2,1,3,0,0,4,40,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,225,            out.writeObject(iZone);,0,0,0,1,2,0,3,0,0,3,23,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,226,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,231,            iZone = (DateTimeZone)in.readObject();,1,0,0,1,4,0,2,1,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,16,232,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,351,"        LimitException(String desc, boolean isLow) {",3,0,0,0,3,1,0,1,0,4,44,3,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,352,            super(desc);,1,0,0,1,2,1,0,0,1,5,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,353,            iIsLow = isLow;,2,0,0,0,0,0,0,0,1,2,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,354,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,357,            StringBuffer buf = new StringBuffer(85);,1,0,0,1,2,1,0,2,1,6,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,358,"            buf.append(""The"");",0,0,0,1,2,0,2,0,1,4,18,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,359,            String desc = super.getMessage();,2,0,0,1,2,1,0,1,0,5,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,360,            if (desc != null) {,1,1,0,1,3,1,0,0,0,5,19,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,361,                buf.append(' ');,0,0,0,1,2,0,2,0,1,4,16,8,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,362,                buf.append(desc);,0,0,0,1,2,0,3,0,0,3,17,8,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,364,"            buf.append("" instant is "");",0,0,0,1,2,0,2,0,1,4,27,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,366,            DateTimeFormatter p = ISODateTimeFormat.dateTime();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,367,            p = p.withChronology(getBase());,1,0,0,2,4,0,3,0,2,5,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,368,            if (iIsLow) {,1,0,0,1,3,1,0,0,0,4,13,5,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,369,"                buf.append(""below the supported minimum of "");",0,0,0,1,2,0,2,0,1,4,46,8,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,370,"                p.printTo(buf, getLowerLimit().getMillis());",0,0,0,1,6,0,5,0,1,4,44,8,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,372,"                buf.append(""above the supported maximum of "");",0,0,0,1,2,0,2,0,1,4,46,8,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,373,"                p.printTo(buf, getUpperLimit().getMillis());",0,0,0,1,6,0,5,0,1,4,44,8,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,376,"            buf.append("" ("");",0,0,0,1,3,0,2,0,1,4,17,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,377,            buf.append(getBase());,0,0,0,2,4,0,3,0,1,4,22,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,378,            buf.append(')');,0,0,0,1,3,0,2,0,1,4,16,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,380,            return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,6,0.0,0,0
defect4j,time,org/joda/time/chrono/LimitChronology,16,384,"            return ""IllegalArgumentException: "" + getMessage();",0,1,0,1,2,1,1,0,2,6,51,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,50,        int year = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,51,        return year < 0 ? -year : year;,3,1,0,0,0,1,0,0,1,4,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,55,"        return getWrappedField().add(instant, years);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,59,"        return getWrappedField().add(instant, years);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,63,"        return getWrappedField().addWrapField(instant, years);",0,0,0,1,4,1,4,0,1,5,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,67,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0,0,0,1,4,1,6,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,71,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,75,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,80,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,79,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());",0,0,0,1,4,1,4,0,1,5,63,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,80,        if (getWrappedField().get(instant) < 0) {,0,1,0,2,7,1,3,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,81,            year = -year;,2,0,0,0,0,0,0,0,2,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,83,"        return super.set(instant, year);",3,0,0,0,2,2,0,0,0,3,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,95,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,99,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,103,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,16,110,        return INSTANCE;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,266,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,267,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,269,            if (obj instanceof StandardDurationFieldType) {,1,0,0,1,3,2,0,1,0,5,47,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,3,1,0,2,4,1,0,1,0,6,62,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,272,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,286,                    return chronology.eras();,0,0,0,1,2,1,2,0,0,4,25,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,288,                    return chronology.centuries();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,290,                    return chronology.weekyears();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,292,                    return chronology.years();,0,0,0,1,2,1,2,0,0,4,26,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,296,                    return chronology.weeks();,0,0,0,1,2,1,2,0,0,4,26,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,300,                    return chronology.halfdays();,0,0,0,1,2,1,2,0,0,4,29,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,302,                    return chronology.hours();,0,0,0,1,2,1,2,0,0,4,26,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,304,                    return chronology.minutes();,0,0,0,1,2,1,2,0,0,4,28,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,306,                    return chronology.seconds();,0,0,0,1,2,1,2,0,0,4,28,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,308,                    return chronology.millis();,0,0,0,1,2,1,2,0,0,4,27,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,311,                    throw new InternalError();,0,0,0,1,2,2,0,1,1,5,26,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,321,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,323,                    return ERAS_TYPE;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,325,                    return CENTURIES_TYPE;,1,0,0,0,0,1,0,0,0,2,22,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,327,                    return WEEKYEARS_TYPE;,1,0,0,0,0,1,0,0,0,2,22,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,329,                    return YEARS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,331,                    return MONTHS_TYPE;,1,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,333,                    return WEEKS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,335,                    return DAYS_TYPE;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,337,                    return HALFDAYS_TYPE;,1,0,0,0,0,1,0,0,0,2,21,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,339,                    return HOURS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,341,                    return MINUTES_TYPE;,1,0,0,0,0,1,0,0,0,2,20,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,343,                    return SECONDS_TYPE;,1,0,0,0,0,1,0,0,0,2,20,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,345,                    return MILLIS_TYPE;,1,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,16,348,                    return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,40,        } catch (SecurityException e) {,1,0,0,1,4,1,0,1,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,41,            i = null;,1,0,0,0,0,0,0,0,1,2,9,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,50,            cacheSize = i.intValue();,1,0,0,1,2,0,2,0,1,5,25,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,52,            cacheSize--;,1,0,0,0,0,0,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,53,            int shift = 0;,1,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,54,            while (cacheSize > 0) {,1,1,0,1,3,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,55,                shift++;,1,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,56,                cacheSize >>= 1;,1,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,58,            cacheSize = 1 << shift;,2,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,69,            return (CachedDateTimeZone)zone;,1,0,0,1,2,1,0,1,0,5,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,95,        return iZone;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,99,        return getInfo(instant).getNameKey(instant);,0,0,0,1,4,1,4,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,107,        return getInfo(instant).getStandardOffset(instant);,0,0,0,1,4,1,4,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,111,        return iZone.isFixed();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,115,        return iZone.nextTransition(instant);,0,0,0,1,2,1,3,0,0,4,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,127,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,128,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,130,        if (obj instanceof CachedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,131,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,2,0,0,3,6,1,2,1,0,6,53,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,133,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,45,        return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,49,        return iWallOffset;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,53,        return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,57,        return iWallOffset;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,61,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,65,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,69,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,77,        String id = getID();,1,0,0,1,2,0,1,1,1,6,20,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0,3,0,3,11,1,6,0,2,6,69,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",3,1,0,2,4,1,2,0,2,7,55,7,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",4,0,0,1,4,2,1,0,2,6,58,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,91,        if (obj instanceof FixedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,39,5,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,92,            FixedDateTimeZone other = (FixedDateTimeZone) obj;,2,0,0,1,2,0,0,2,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,93,            return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,16,98,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,186,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,4,3,0,1,3,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,187,                if (iNameKey == null) {,1,1,0,1,3,1,0,0,0,5,23,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,188,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,1,0,0,1,2,0,3,0,1,5,45,9,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,190,                return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,192,            return iNextInfo.getNameKey(millis);,0,0,0,1,2,1,3,0,0,4,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,202,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,3,0,0,4,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,206,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,4,3,0,1,3,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,207,                if (iStandardOffset == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,208,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,1,0,0,1,2,0,3,0,1,5,59,9,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,210,                return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,16,212,            return iNextInfo.getStandardOffset(millis);,0,0,0,1,2,1,3,0,0,4,43,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,883,"        Transition(long millis, Transition tr) {",3,0,0,0,3,1,0,1,0,4,40,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,884,            iMillis = millis;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,885,            iNameKey = tr.iNameKey;,3,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,886,            iWallOffset = tr.iWallOffset;,3,0,0,0,0,0,0,0,1,2,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,887,            iStandardOffset = tr.iStandardOffset;,3,0,0,0,0,0,0,0,1,2,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,888,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,890,"        Transition(long millis, Rule rule, int standardOffset) {",4,0,0,0,3,2,0,1,0,4,56,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,891,            iMillis = millis;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,892,            iNameKey = rule.getNameKey();,1,0,0,1,2,0,2,0,1,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,893,            iWallOffset = standardOffset + rule.getSaveMillis();,2,1,0,1,2,0,2,0,1,6,52,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,894,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,895,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,898,"                   int wallOffset, int standardOffset) {",2,0,0,0,2,2,0,0,0,3,37,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,899,            iMillis = millis;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,900,            iNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,901,            iWallOffset = wallOffset;,2,0,0,0,0,0,0,0,1,2,25,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,902,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,903,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,906,            return iMillis;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,910,            return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,914,            return iWallOffset;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,918,            return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,922,            return iWallOffset - iStandardOffset;,2,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,929,            if (other == null) {,1,1,0,1,3,1,0,0,0,5,20,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,930,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,932,            return iMillis > other.iMillis &&,3,2,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,754,            return iOfYear;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,772,            return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,780,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,781,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,783,            if (obj instanceof Recurrence) {,1,0,0,1,3,2,0,1,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,784,                Recurrence other = (Recurrence)obj;,2,0,0,1,2,0,0,2,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,785,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,790,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,794,            iOfYear.writeTo(out);,0,0,0,1,2,0,3,0,0,3,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,795,            out.writeUTF(iNameKey);,0,0,0,1,2,0,3,0,0,3,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,796,"            writeMillis(out, iSaveMillis);",0,0,0,0,2,0,3,0,1,3,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,797,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",3,0,0,0,2,2,0,1,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,804,            return rename((iNameKey + appendNameKey).intern());,2,1,0,2,6,1,2,0,1,7,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",1,1,0,1,2,2,0,1,2,7,60,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,522,            if (iMode == 'w') {,1,1,0,1,3,1,0,0,1,6,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,523,                offset = standardOffset + saveMillis;,3,1,0,0,0,0,0,0,1,3,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,524,            } else if (iMode == 's') {,1,1,0,1,4,2,0,0,1,6,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,525,                offset = standardOffset;,2,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,527,                offset = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,530,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,531,"            long millis = chrono.year().set(0, year);",1,0,0,1,4,1,4,0,0,5,41,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",1,0,0,1,4,0,5,0,1,5,56,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",1,0,0,1,4,0,5,0,1,5,56,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,534,"            millis = setDayOfMonth(chrono, millis);",1,0,0,0,2,0,3,0,2,4,39,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,536,            if (iDayOfWeek != 0) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,537,"                millis = setDayOfWeek(chrono, millis);",1,0,0,0,2,0,3,0,2,4,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,541,            return millis - offset;,2,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,550,                offset = standardOffset + saveMillis;,3,1,0,0,0,0,0,0,1,3,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,552,                offset = standardOffset;,2,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,568,                if (next <= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,569,"                    next = chrono.year().add(next, 1);",1,0,0,1,4,0,4,0,1,5,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,570,"                    next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,592,                offset = standardOffset + saveMillis;,3,1,0,0,0,0,0,0,1,3,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,594,                offset = standardOffset;,2,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,610,                if (prev >= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,611,"                    prev = chrono.year().add(prev, -1);",1,0,0,1,4,0,4,0,2,5,35,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",1,0,0,0,2,0,3,0,2,4,43,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,629,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,630,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,632,            if (obj instanceof OfYear) {,1,0,0,1,3,2,0,1,0,5,28,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,633,                OfYear other = (OfYear)obj;,2,0,0,1,2,0,0,2,0,4,27,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,634,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,642,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,659,            out.writeByte(iMode);,0,0,0,1,2,0,3,0,0,3,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,660,            out.writeByte(iMonthOfYear);,0,0,0,1,2,0,3,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,661,            out.writeByte(iDayOfMonth);,0,0,0,1,2,0,3,0,0,3,27,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,662,            out.writeByte(iDayOfWeek);,0,0,0,1,2,0,3,0,0,3,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,663,            out.writeBoolean(iAdvance);,0,0,0,1,2,0,3,0,0,3,27,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,664,"            writeMillis(out, iMillisOfDay);",0,0,0,0,2,0,3,0,1,3,31,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,665,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,673,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,2,3,0,1,3,1,0,0,0,5,45,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,675,                    while (chrono.year().isLeap(next) == false) {,0,1,0,2,7,1,4,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,676,"                        next = chrono.year().add(next, 1);",1,0,0,1,4,0,4,0,1,5,34,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,678,"                    next = setDayOfMonth(chrono, next);",1,0,0,0,2,0,3,0,2,4,35,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,680,                    throw e;,1,0,0,0,0,1,0,0,0,2,8,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,692,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,2,3,0,1,3,1,0,0,0,5,45,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,694,                    while (chrono.year().isLeap(prev) == false) {,0,1,0,2,7,1,4,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,695,"                        prev = chrono.year().add(prev, -1);",1,0,0,1,4,0,4,0,2,5,35,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,697,"                    prev = setDayOfMonth(chrono, prev);",1,0,0,0,2,0,3,0,2,4,35,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,699,                    throw e;,1,0,0,0,0,1,0,0,0,2,8,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",1,0,0,1,4,0,5,0,1,5,56,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,721,                    if (daysToAdd < 0) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,722,                        daysToAdd += 7;,1,0,0,0,0,0,0,0,1,2,15,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,963,        RuleSet() {,1,0,0,1,3,0,0,0,0,3,11,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,964,            iRules = new ArrayList<Rule>(10);,1,0,0,1,2,1,0,2,2,6,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,965,            iUpperYear = Integer.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,31,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,966,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,971,        RuleSet(RuleSet rs) {,2,0,0,1,3,0,0,1,0,4,21,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,972,            iStandardOffset = rs.iStandardOffset;,3,0,0,0,0,0,0,0,1,2,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,973,            iRules = new ArrayList<Rule>(rs.iRules);,3,0,0,1,2,1,0,2,2,6,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,974,            iInitialNameKey = rs.iInitialNameKey;,3,0,0,0,0,0,0,0,1,2,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,3,0,0,0,0,0,0,0,1,2,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,976,            iUpperYear = rs.iUpperYear;,3,0,0,0,0,0,0,0,1,2,27,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,977,            iUpperOfYear = rs.iUpperOfYear;,3,0,0,0,0,0,0,0,1,2,31,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,978,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,948,            long now = DateTimeUtils.currentTimeMillis();,1,0,0,1,2,1,2,0,0,5,45,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,1,1,0,1,6,0,5,0,1,6,66,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,950,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,981,            return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,985,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,986,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,989,            iInitialNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,26,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,990,            iInitialSaveMillis = saveMillis;,2,0,0,0,0,0,0,0,1,2,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,991,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,994,            if (!iRules.contains(rule)) {,0,0,0,2,5,1,3,0,1,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,995,                iRules.add(rule);,0,0,0,1,2,0,3,0,0,3,17,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,997,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1000,            iUpperYear = year;,2,0,0,0,0,0,0,0,1,2,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1001,            iUpperOfYear = ofYear;,2,0,0,0,0,0,0,0,1,2,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1002,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1011,            if (iInitialNameKey != null) {,1,1,0,1,3,1,0,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1013,"                return new Transition(firstMillis, iInitialNameKey,",2,0,0,0,1,2,0,1,1,5,51,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,2,0,0,1,2,1,0,4,1,6,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1024,            long millis = Long.MIN_VALUE;,3,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1025,            int saveMillis = 0;,1,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1026,            Transition first = null;,1,0,0,0,0,0,0,1,0,2,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",1,1,0,0,7,1,3,0,2,6,61,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1030,                millis = next.getMillis();,1,0,0,1,2,0,2,0,1,5,26,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1032,                if (millis == firstMillis) {,2,1,0,1,3,1,0,0,0,5,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1033,"                    first = new Transition(firstMillis, next);",3,0,0,0,2,1,0,1,2,5,42,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1034,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1037,                if (millis > firstMillis) {,2,1,0,1,3,1,0,0,0,5,27,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1038,                    if (first == null) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1042,                        for (Rule rule : copy) {,2,0,0,1,3,1,0,1,0,5,24,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1043,                            if (rule.getSaveMillis() == 0) {,0,1,0,2,5,1,2,0,0,5,32,13,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",4,0,0,0,2,1,0,1,2,5,59,15,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1045,                                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1047,                        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1049,                    if (first == null) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1053,"                        first = new Transition(firstMillis, next.getNameKey(),",2,0,0,1,3,1,2,1,2,7,54,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1061,"                first = new Transition(firstMillis, next);",3,0,0,0,2,1,0,1,2,5,42,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1063,                saveMillis = next.getSaveMillis();,1,0,0,1,2,0,2,0,1,5,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1066,            iRules = copy;,2,0,0,0,0,0,0,0,1,2,14,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1067,            return first;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1085,            Rule nextRule = null;,1,0,0,0,0,0,0,1,0,2,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1086,            long nextMillis = Long.MAX_VALUE;,3,0,0,0,0,1,0,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1088,            Iterator<Rule> it = iRules.iterator();,1,0,0,1,2,0,2,2,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1089,            while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1090,                Rule rule = it.next();,1,0,0,1,2,0,2,1,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",1,0,0,0,2,1,5,0,0,4,60,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1092,                if (next <= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1093,                    it.remove();,0,0,0,1,2,0,2,0,0,3,12,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1094,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1098,                if (next <= nextMillis) {,2,1,0,1,3,1,0,0,0,5,25,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1100,                    nextRule = rule;,2,0,0,0,0,0,0,0,1,2,16,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1101,                    nextMillis = next;,2,0,0,0,0,0,0,0,1,2,18,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1103,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1105,            if (nextRule == null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1106,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,1,1,0,2,7,1,4,0,0,6,50,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1111,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1115,            if (iUpperYear < Integer.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1116,                long upperMillis =,1,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1118,                if (nextMillis >= upperMillis) {,2,1,0,1,3,1,0,0,0,5,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1120,                    return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",3,0,0,0,2,2,0,1,1,5,61,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1131,            if (iUpperYear == Integer.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1132,                return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0,0,0,0,2,1,5,0,0,3,72,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1141,            if (iRules.size() == 2) {,0,1,0,2,5,1,2,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1142,                Rule startRule = iRules.get(0);,1,0,0,1,2,0,2,1,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1143,                Rule endRule = iRules.get(1);,1,0,0,1,2,0,2,1,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,2,2,0,1,3,1,2,0,0,6,49,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1154,"                    return new DSTZone(id, iStandardOffset,",2,0,0,0,1,2,0,1,1,5,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1158,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1183,            return findMatchingRecurrence(instant).getNameKey();,0,0,0,1,4,1,3,0,1,5,52,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1191,            return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1195,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1210,                    start = instant;,2,0,0,0,0,0,0,0,1,2,16,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1212,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1214,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1215,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1217,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1225,                    end = instant;,2,0,0,0,0,0,0,0,1,2,14,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1227,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1229,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1230,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1232,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1254,                    start = instant;,2,0,0,0,0,0,0,0,1,2,16,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1256,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1258,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1259,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1261,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1269,                    end = instant;,2,0,0,0,0,0,0,0,1,2,14,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1271,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1273,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1274,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1276,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1283,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1284,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1286,            if (obj instanceof DSTZone) {,1,0,0,1,3,2,0,1,0,5,29,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1287,                DSTZone other = (DSTZone)obj;,2,0,0,1,2,0,0,2,0,4,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1288,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1294,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1298,"            writeMillis(out, iStandardOffset);",0,0,0,0,2,0,3,0,1,3,34,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1299,            iStartRecurrence.writeTo(out);,0,0,0,1,2,0,3,0,0,3,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1300,            iEndRecurrence.writeTo(out);,0,0,0,1,2,0,3,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1301,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1313,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1315,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1316,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1318,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1324,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1326,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1327,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1329,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",4,0,0,0,3,2,0,1,0,4,55,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,817,            iRecurrence = recurrence;,2,0,0,0,0,0,0,0,1,2,25,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,818,            iFromYear = fromYear;,2,0,0,0,0,0,0,0,1,2,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,819,            iToYear = toYear;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,820,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,823,            return iFromYear;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,827,            return iToYear;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,831,            return iRecurrence.getOfYear();,0,0,0,1,2,1,2,0,0,4,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,835,            return iRecurrence.getNameKey();,0,0,0,1,2,1,2,0,0,4,32,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,839,            return iRecurrence.getSaveMillis();,0,0,0,1,2,1,2,0,0,4,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,843,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,845,            final int wallOffset = standardOffset + saveMillis;,3,1,0,0,0,2,0,0,1,4,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,846,            long testInstant = instant;,2,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,849,            if (instant == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,850,                year = Integer.MIN_VALUE;,3,0,0,0,0,0,0,0,1,2,25,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,852,                year = chrono.year().get(instant + wallOffset);,3,1,0,1,4,0,3,0,1,6,47,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,855,            if (year < iFromYear) {,2,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",2,1,0,1,4,0,4,0,1,6,59,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,860,                testInstant -= 1;,1,0,0,0,0,0,0,0,1,2,17,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",1,0,0,0,2,1,5,0,0,4,70,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,865,            if (next > instant) {,2,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,866,                year = chrono.year().get(next + wallOffset);,3,1,0,1,4,0,3,0,1,6,44,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,867,                if (year > iToYear) {,2,1,0,1,3,1,0,0,0,5,21,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,869,                    next = instant;,2,0,0,0,0,0,0,0,1,2,15,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,873,            return next;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",1,0,0,0,4,0,4,1,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,44,        return nameSet == null ? null : nameSet[0];,1,1,1,0,2,1,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",1,0,0,0,4,0,4,1,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,49,        return nameSet == null ? null : nameSet[1];,1,1,1,0,2,1,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,53,        if (locale == null || id == null || nameKey == null) {,3,5,0,1,3,1,0,0,0,5,54,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,54,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",1,0,0,1,2,0,3,5,0,5,72,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,58,        if (byIdCache == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",1,0,0,1,4,0,4,0,2,5,54,7,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",1,0,0,1,2,0,3,3,0,5,55,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,63,        if (byNameKeyCache == null) {,1,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,64,"            byIdCache.put(id, byNameKeyCache = createCache());",1,0,0,1,4,0,4,0,2,5,50,7,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,66,            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();,3,0,0,1,8,0,3,1,0,5,95,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,67,            String[] setEn = null;,1,0,0,0,2,0,0,1,0,3,22,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,68,            for (String[] strings : zoneStringsEn) {,2,0,0,1,5,1,0,1,0,5,40,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,69,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,3,4,1,2,7,1,2,0,0,7,70,8,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,70,                setEn = strings;,2,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,71,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,74,            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,1,0,0,1,8,0,4,1,0,5,88,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,75,            String[] setLoc = null;,1,0,0,0,2,0,0,1,0,3,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,76,            for (String[] strings : zoneStringsLoc) {,2,0,0,1,5,1,0,1,0,5,41,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,77,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,3,4,1,2,7,1,2,0,0,7,70,8,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,78,                setLoc = strings;,2,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,79,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,83,            if (setEn != null && setLoc != null) {,2,3,0,1,3,1,0,0,0,5,38,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});",0,0,1,0,12,1,2,1,0,5,66,9,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,88,              if (setEn[2].equals(setEn[4])) {,0,0,1,2,9,1,1,0,0,5,32,9,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});",0,1,1,0,12,1,2,1,1,7,78,11,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});",0,0,1,0,12,1,2,1,0,5,66,11,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,16,95,        return (String[]) byNameKeyCache.get(nameKey);,0,0,0,1,6,1,3,1,0,5,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,225,    public DateTimeZoneBuilder() {,1,0,0,1,3,1,0,0,1,5,30,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,226,        iRuleSets = new ArrayList<RuleSet>(10);,1,0,0,1,2,1,0,2,2,6,39,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,227,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,96,"            return readFrom((DataInput)in, id);",1,0,0,1,4,1,2,1,1,7,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,112,            DateTimeZone fixed = new FixedDateTimeZone,1,0,0,0,0,1,0,2,1,4,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,114,            if (fixed.equals(DateTimeZone.UTC)) {,2,0,0,2,5,1,2,0,0,5,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,115,                fixed = DateTimeZone.UTC;,3,0,0,0,0,0,0,0,1,2,25,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,117,            return fixed;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,121,"            return PrecalculatedZone.readFrom(in, id);",0,0,0,0,2,1,4,0,0,3,42,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,123,"            throw new IOException(""Invalid encoding"");",0,0,0,1,2,2,0,1,2,5,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,140,        if (millis % (30 * 60000L) == 0) {,1,3,0,2,5,1,0,0,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,142,            long units = millis / (30 * 60000L);,2,2,0,1,2,1,0,0,0,5,36,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,2,5,0,4,11,1,0,0,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,145,                out.writeByte((int)(units & 0x3f));,1,1,0,2,6,1,2,0,0,6,35,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,146,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,150,        if (millis % 60000L == 0) {,1,2,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,152,            long minutes = millis / 60000L;,2,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,2,5,0,4,11,1,0,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,1,2,0,2,6,1,2,0,0,6,55,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,156,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,160,        if (millis % 1000L == 0) {,1,2,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,162,            long seconds = millis / 1000L;,2,1,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,2,5,0,4,11,1,0,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,1,3,0,3,8,1,2,0,0,6,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,166,                out.writeInt((int)(seconds & 0xffffffff));,1,1,0,2,6,1,2,0,0,6,42,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,167,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,1,1,0,1,2,0,2,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,176,        out.writeLong(millis);,0,0,0,1,2,0,3,0,0,3,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,177,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0,2,0,1,5,1,5,0,1,6,45,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,217,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",4,0,0,0,2,2,0,1,1,5,70,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,252,        if (iRuleSets.size() > 0) {,0,1,0,2,5,1,2,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,253,            OfYear ofYear = new OfYear,1,0,0,0,0,1,0,2,1,4,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,1,1,0,2,4,0,4,1,0,6,58,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0,0,0,0,2,0,4,0,0,2,40,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,258,        iRuleSets.add(new RuleSet());,0,0,0,2,4,1,2,1,1,6,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,259,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,268,        getLastRuleSet().setStandardOffset(standardOffset);,0,0,0,1,4,0,3,0,1,4,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,269,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0,0,0,1,4,0,4,0,1,4,54,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,277,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,309,        if (fromYear <= toYear) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,310,            OfYear ofYear = new OfYear,1,0,0,0,0,1,0,2,1,4,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",4,0,0,0,2,1,0,2,1,5,68,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",4,0,0,0,2,1,0,2,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,314,            getLastRuleSet().addRule(rule);,0,0,0,1,4,0,3,0,1,4,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,316,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,320,        if (iRuleSets.size() == 0) {,0,1,0,2,5,1,2,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",2,0,0,0,2,0,1,0,3,4,54,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,323,        return iRuleSets.get(iRuleSets.size() - 1);,0,1,0,2,4,1,4,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,333,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,334,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,1,0,0,1,2,1,0,4,1,6,64,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,343,        DSTZone tailZone = null;,1,0,0,0,0,0,0,1,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,345,        long millis = Long.MIN_VALUE;,3,0,0,0,0,1,0,0,0,2,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,346,        int saveMillis = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,348,        int ruleSetCount = iRuleSets.size();,1,0,0,1,2,1,2,0,0,5,36,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,349,        for (int i=0; i<ruleSetCount; i++) {,4,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,350,            RuleSet rs = iRuleSets.get(i);,1,0,0,1,2,0,3,1,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,351,            Transition next = rs.firstTransition(millis);,1,0,0,1,2,0,3,1,0,5,45,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,352,            if (next == null) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,353,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,355,"            addTransition(transitions, next);",0,0,0,0,2,0,3,0,1,3,33,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,356,            millis = next.getMillis();,1,0,0,1,2,0,2,0,1,5,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,357,            saveMillis = next.getSaveMillis();,1,0,0,1,2,0,2,0,1,5,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,360,            rs = new RuleSet(rs);,2,0,0,1,2,1,0,1,2,6,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",1,1,0,0,7,1,4,0,1,6,64,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,363,"                if (addTransition(transitions, next)) {",0,0,0,0,5,1,3,0,1,4,39,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,364,                    if (tailZone != null) {,1,1,0,1,3,1,0,0,0,5,23,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,366,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,369,                millis = next.getMillis();,1,0,0,1,2,0,2,0,1,5,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,370,                saveMillis = next.getSaveMillis();,1,0,0,1,2,0,2,0,1,5,34,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,371,                if (tailZone == null && i == ruleSetCount - 1) {,3,4,0,1,3,1,0,0,0,5,48,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,372,                    tailZone = rs.buildTailZone(id);,1,0,0,1,2,0,3,0,1,5,32,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,379,            millis = rs.getUpperLimit(saveMillis);,1,0,0,1,2,0,3,0,1,5,38,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,383,        if (transitions.size() == 0) {,0,1,0,2,5,1,2,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,384,            if (tailZone != null) {,1,1,0,1,3,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,386,                return tailZone;,1,0,0,0,0,1,0,0,0,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0,0,0,0,2,1,2,0,2,4,39,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,390,        if (transitions.size() == 1 && tailZone == null) {,1,3,0,2,5,1,2,0,0,6,50,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,391,            Transition tr = transitions.get(0);,1,0,0,1,2,0,2,1,0,5,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,392,"            return buildFixedZone(id, tr.getNameKey(),",0,0,0,1,3,1,4,0,1,5,42,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",1,0,0,0,2,0,6,1,0,4,87,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,397,        if (zone.isCachable()) {,0,0,0,2,5,1,2,0,0,4,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,398,            return CachedDateTimeZone.forZone(zone);,0,0,0,1,2,1,3,0,0,4,40,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,400,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,404,        int size = transitions.size();,1,0,0,1,2,1,2,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,405,        if (size == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,406,            transitions.add(tr);,0,0,0,1,2,0,3,0,0,3,20,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,407,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,410,        Transition last = transitions.get(size - 1);,2,1,0,1,2,0,2,1,0,6,44,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,411,        if (!tr.isTransitionFrom(last)) {,0,0,0,2,5,1,3,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,412,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,417,        int offsetForLast = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,418,        if (size >= 2) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,2,1,0,1,4,0,3,0,1,6,58,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,421,        int offsetForNew = last.getWallOffset();,1,0,0,1,2,1,2,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,423,        long lastLocal = last.getMillis() + offsetForLast;,2,1,0,1,2,1,2,0,0,6,50,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,424,        long newLocal = tr.getMillis() + offsetForNew;,2,1,0,1,2,1,2,0,0,6,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,426,        if (newLocal != lastLocal) {,2,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,427,            transitions.add(tr);,0,0,0,1,2,0,3,0,0,3,20,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,428,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,431,        transitions.remove(size - 1);,1,1,0,1,2,0,2,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,432,"        return addTransition(transitions, tr);",0,0,0,0,2,1,3,0,1,4,38,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,443,        if (out instanceof DataOutput) {,1,0,0,1,3,2,0,1,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,444,"            writeTo(zoneID, (DataOutput)out);",1,0,0,1,4,0,2,1,1,6,33,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",1,0,0,1,6,1,2,2,2,7,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,448,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",1,0,0,0,2,0,2,1,2,5,50,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,461,        if (zone instanceof FixedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,462,            out.writeByte('F'); // 'F' for fixed,0,0,0,1,2,1,2,0,1,5,36,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,463,            out.writeUTF(zone.getNameKey(0));,0,0,0,2,4,0,4,0,0,3,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,464,"            writeMillis(out, zone.getOffset(0));",0,0,0,1,4,0,4,0,1,4,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,465,"            writeMillis(out, zone.getStandardOffset(0));",0,0,0,1,4,0,4,0,1,4,44,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,467,            if (zone instanceof CachedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,41,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0,0,0,1,2,1,2,0,1,5,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,2,0,0,2,6,0,1,1,1,6,52,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0,0,0,1,2,1,2,0,1,5,54,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,473,            ((PrecalculatedZone)zone).writeTo(out);,1,0,0,2,6,0,2,1,0,5,39,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,475,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1362,                        index = in.readUnsignedShort();,1,0,0,1,2,0,2,0,1,5,31,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1365,                } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1366,"                    throw new IOException(""Invalid encoding"");",0,0,0,1,2,2,0,1,2,5,42,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1389,            int size = transitions.size();,1,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1390,            if (size == 0) {,1,1,0,1,3,1,0,0,0,5,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1391,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1394,            long[] trans = new long[size];,1,0,1,0,4,3,0,0,0,4,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1395,            int[] wallOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1396,            int[] standardOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1397,            String[] nameKeys = new String[size];,1,0,1,0,4,1,0,2,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1399,            Transition last = null;,1,0,0,0,0,0,0,1,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1400,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1401,                Transition tr = transitions.get(i);,1,0,0,1,2,0,3,1,0,5,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1403,                if (!tr.isTransitionFrom(last)) {,0,0,0,2,5,1,3,0,1,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1404,                    throw new IllegalArgumentException(id);,1,0,0,1,2,2,0,1,1,6,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1407,                trans[i] = tr.getMillis();,0,0,1,1,4,0,2,0,1,5,26,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1408,                wallOffsets[i] = tr.getWallOffset();,0,0,1,1,4,0,2,0,1,5,36,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1409,                standardOffsets[i] = tr.getStandardOffset();,0,0,1,1,4,0,2,0,1,5,44,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1410,                nameKeys[i] = tr.getNameKey();,0,0,1,1,4,0,2,0,1,5,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1412,                last = tr;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1417,            String[] zoneNameData = new String[5];,1,0,0,0,4,1,0,2,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1418,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,3,0,0,1,8,1,1,2,1,7,80,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1419,            for (int j = 0; j < zoneStrings.length; j++) {,5,1,0,1,3,2,0,0,1,6,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1420,                String[] set = zoneStrings[j];,1,0,1,0,4,0,0,1,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,3,4,1,2,7,1,2,0,0,7,58,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1422,                    zoneNameData = set;,2,0,0,0,0,0,0,0,1,2,19,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1426,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,5,2,0,1,3,2,0,0,1,6,47,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1429,                String curNameKey = nameKeys[i];,1,0,1,0,2,0,0,1,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1430,                String nextNameKey = nameKeys[i + 1];,2,1,1,0,2,0,0,1,0,5,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1431,                long curOffset = wallOffsets[i];,1,0,1,0,2,1,0,0,0,4,32,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1432,                long nextOffset = wallOffsets[i + 1];,2,1,1,0,2,1,0,0,0,5,37,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1433,                long curStdOffset = standardOffsets[i];,1,0,1,0,2,1,0,0,0,4,39,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1434,                long nextStdOffset = standardOffsets[i + 1];,2,1,1,0,2,1,0,0,0,5,44,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",3,1,1,1,8,1,2,2,1,9,81,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1436,                if (curOffset != nextOffset &&,2,8,0,0,1,1,0,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1443,                    if (ZoneInfoCompiler.verbose()) {,0,0,0,2,5,1,2,0,0,4,33,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",3,1,0,1,2,0,1,0,1,6,65,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",3,1,1,0,5,1,1,1,2,8,63,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1448,                    if (curOffset > nextOffset) {,2,1,0,1,3,1,0,0,0,5,29,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",1,1,1,1,6,0,1,0,2,7,48,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1450,                    } else if (curOffset < nextOffset) {,2,1,0,1,4,2,0,0,0,5,36,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",2,2,1,1,6,0,1,0,2,7,53,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1452,                        i++;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1457,            if (tailZone != null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1458,                if (tailZone.iStartRecurrence.getNameKey(),2,0,0,1,3,1,1,0,0,5,42,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1460,                    if (ZoneInfoCompiler.verbose()) {,0,0,0,2,5,1,2,0,0,4,33,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",2,1,0,0,1,0,1,0,1,5,61,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1464,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,2,1,0,2,5,1,1,0,0,6,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1465,                        tailZone = new DSTZone(,1,0,0,0,1,1,0,1,2,5,23,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1471,                        tailZone = new DSTZone(,1,0,0,0,1,1,0,1,2,5,23,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1480,            return new PrecalculatedZone,0,0,0,0,0,2,0,1,1,3,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1509,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1510,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1511,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1512,                return iNameKeys[i];,0,0,1,0,2,1,0,0,0,3,20,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1514,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1515,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1516,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1517,                    return iNameKeys[i - 1];,1,1,1,0,2,1,0,0,0,5,24,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1519,"                return ""UTC"";",0,0,0,0,0,1,0,0,1,2,13,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1521,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1522,                return iNameKeys[i - 1];,1,1,1,0,2,1,0,0,0,5,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1524,            return iTailZone.getNameKey(instant);,0,0,0,1,2,1,3,0,0,4,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1531,                return iWallOffsets[i];,0,0,1,0,2,1,0,0,0,3,23,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1538,                return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1547,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1548,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1549,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1550,                return iStandardOffsets[i];,0,0,1,0,2,1,0,0,0,3,27,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1552,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1553,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1554,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1555,                    return iStandardOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,31,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1557,                return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1559,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1560,                return iStandardOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,31,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1562,            return iTailZone.getStandardOffset(instant);,0,0,0,1,2,1,3,0,0,4,44,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1566,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1581,                instant = end;,2,0,0,0,0,0,0,0,1,2,14,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1590,                if (instant > Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1591,                    return instant - 1;,1,1,0,0,0,1,0,0,0,3,19,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1593,                return instant;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1597,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1598,                    long prev = transitions[i - 1];,2,1,1,0,2,1,0,0,0,5,31,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1599,                    if (prev > Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,28,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1600,                        return prev - 1;,1,1,0,0,0,1,0,0,0,3,16,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1603,                return instant;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1615,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1619,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1620,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1622,            if (obj instanceof PrecalculatedZone) {,1,0,0,1,3,2,0,1,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1623,                PrecalculatedZone other = (PrecalculatedZone)obj;,2,0,0,1,2,0,0,2,0,4,49,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1624,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1634,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1638,            int size = iTransitions.length;,3,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1641,            Set<String> poolSet = new HashSet<String>();,1,0,0,1,2,1,0,4,1,6,44,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1642,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1643,                poolSet.add(iNameKeys[i]);,0,0,1,1,4,0,2,0,0,4,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1646,            int poolSize = poolSet.size();,1,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1647,            if (poolSize > 65535) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1648,"                throw new UnsupportedOperationException(""String pool is too large"");",0,0,0,1,2,2,0,1,2,5,68,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1650,            String[] pool = new String[poolSize];,1,0,1,0,4,1,0,2,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1651,            Iterator<String> it = poolSet.iterator();,1,0,0,1,2,0,2,2,0,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1652,            for (int i=0; it.hasNext(); i++) {,2,0,0,2,5,2,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1653,                pool[i] = it.next();,0,0,1,1,4,0,2,0,1,5,20,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1657,            out.writeShort(poolSize);,0,0,0,1,2,0,3,0,0,3,25,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1658,            for (int i=0; i<poolSize; i++) {,4,1,0,1,3,2,0,0,1,6,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1659,                out.writeUTF(pool[i]);,0,0,1,1,4,0,2,0,0,4,22,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1662,            out.writeInt(size);,0,0,0,1,2,0,3,0,0,3,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1664,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1665,"                writeMillis(out, iTransitions[i]);",0,0,1,0,4,0,2,0,1,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1666,"                writeMillis(out, iWallOffsets[i]);",0,0,1,0,4,0,2,0,1,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1667,"                writeMillis(out, iStandardOffsets[i]);",0,0,1,0,4,0,2,0,1,4,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1670,                String nameKey = iNameKeys[i];,1,0,1,0,2,0,0,1,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1671,                for (int j=0; j<poolSize; j++) {,4,1,0,1,3,2,0,0,1,6,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1672,                    if (pool[j].equals(nameKey)) {,0,0,1,2,7,1,2,0,0,5,30,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1673,                        if (poolSize < 256) {,1,1,0,1,3,1,0,0,0,5,21,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1674,                            out.writeByte(j);,0,0,0,1,2,0,3,0,0,3,17,14,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1676,                            out.writeShort(j);,0,0,0,1,2,0,3,0,0,3,18,14,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1678,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1683,            out.writeBoolean(iTailZone != null);,1,1,0,1,2,0,2,0,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1684,            if (iTailZone != null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1685,                iTailZone.writeTo(out);,0,0,0,1,2,0,3,0,0,3,23,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1687,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1690,            if (iTailZone != null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1691,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1693,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1694,            if (transitions.length <= 1) {,2,1,0,1,3,1,0,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1695,                return false;,0,0,0,0,0,1,0,0,1,2,13,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1700,            double distances = 0;,1,0,0,0,0,1,0,0,0,2,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1701,            int count = 0;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1703,            for (int i=1; i<transitions.length; i++) {,5,1,0,1,3,2,0,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1704,                long diff = transitions[i] - transitions[i - 1];,2,2,1,0,4,1,0,0,0,5,48,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1705,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,1,3,0,3,7,1,0,0,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1706,                    distances += (double)diff;,2,0,0,1,2,1,0,0,1,5,26,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1707,                    count++;,1,0,0,0,0,0,0,0,1,2,8,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1711,            if (count > 0) {,1,1,0,1,3,1,0,0,0,5,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1712,                double avg = distances / count;,3,1,0,0,0,1,0,0,0,3,31,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1713,                avg /= 24 * 60 * 60 * 1000;,1,1,0,0,0,0,0,0,1,3,27,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1714,                if (avg >= 25) {,1,1,0,1,3,1,0,0,0,5,16,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1721,                    return true;,0,0,0,0,0,1,0,0,1,2,12,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,16,1725,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,56,    public ZoneInfoProvider(File fileDir) throws IOException {,3,0,0,1,3,2,0,1,1,6,58,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,57,        if (fileDir == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,58,"            throw new IllegalArgumentException(""No file directory provided"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,60,        if (!fileDir.exists()) {,0,0,0,2,5,1,2,0,1,5,24,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",1,1,0,1,2,2,0,1,2,7,66,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,63,        if (!fileDir.isDirectory()) {,0,0,0,2,5,1,2,0,1,5,29,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",1,1,0,1,2,2,0,1,2,7,71,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,67,        iFileDir = fileDir;,2,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,68,        iResourcePath = null;,1,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,69,        iLoader = null;,1,0,0,0,0,0,0,0,1,2,15,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",1,0,0,2,4,0,2,0,4,5,60,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,96,"        this(resourcePath, loader, true);",2,0,0,0,2,1,0,0,1,4,33,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,97,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,108,"            throw new IllegalArgumentException(""No resource path provided"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,137,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,158,            return loadZoneData(id);,0,0,0,1,2,1,2,0,1,5,24,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,162,        return getZone((String)obj);,1,0,0,2,4,1,1,1,1,7,28,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,183,        Thread t = Thread.currentThread();,1,0,0,1,2,0,2,1,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,184,"        t.getThreadGroup().uncaughtException(t, ex);",0,0,0,1,4,0,5,0,0,3,44,5,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,185,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,197,"            in = new FileInputStream(new File(iFileDir, name));",3,0,0,0,4,2,0,2,3,5,51,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,203,                in = ClassLoader.getSystemResourceAsStream(path);,1,0,0,1,2,0,3,0,1,5,49,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,206,                StringBuffer buf = new StringBuffer(40),1,0,0,1,2,1,0,2,1,6,39,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,211,                throw new IOException(buf.toString());,0,0,0,2,4,2,2,1,1,6,38,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,239,            } catch (IOException ex) {,1,0,0,1,4,1,0,1,0,5,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,230,        } catch (IOException ex) {,1,0,0,1,4,1,0,1,0,5,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,231,            uncaughtException(ex);,0,0,0,1,2,0,2,0,1,4,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,232,            iZoneInfoMap.remove(id);,0,0,0,1,2,0,3,0,0,3,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,233,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,235,            try {,0,0,0,0,1,1,0,0,0,2,5,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,259,            } catch (IOException ex) {,1,0,0,1,4,1,0,1,0,5,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,261,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,257,            try {,0,0,0,0,1,1,0,0,0,2,5,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,285,            } catch (ArrayIndexOutOfBoundsException ex) {,1,0,0,1,4,1,0,1,0,5,45,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,16,286,"                throw new IOException(""Corrupt zone info map"");",0,0,0,1,2,2,0,1,2,5,47,9,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2045,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2046,            iInstant = instant;,2,0,0,0,0,0,0,0,1,2,19,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2047,            iField = field;,2,0,0,0,0,0,0,0,1,2,15,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2048,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2054,            oos.writeObject(iInstant);,0,0,0,1,2,0,3,0,0,3,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2055,            oos.writeObject(iField.getType());,0,0,0,2,4,0,4,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2056,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2062,            iInstant = (DateTime) oos.readObject();,1,0,0,1,4,0,2,1,1,6,39,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2063,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,1,0,0,1,4,0,2,2,0,5,62,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2064,            iField = type.getField(iInstant.getChronology());,1,0,0,2,4,0,4,0,1,5,49,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2065,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2074,            return iField;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2083,            return iInstant.getMillis();,0,0,0,1,2,1,2,0,0,4,28,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2093,            return iInstant.getChronology();,0,0,0,1,2,1,2,0,0,4,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2102,            return iInstant;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2119,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0,0,0,1,6,1,7,0,0,4,68,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2135,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0,0,0,1,6,1,7,0,0,4,68,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2153,"            return iInstant.withMillis(iField.addWrapField(iInstant.getMillis(), value));",0,0,0,1,6,1,7,0,0,4,77,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2170,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), value));",0,0,0,1,6,1,7,0,0,4,68,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2187,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), text, locale));",0,0,0,1,6,1,8,0,0,4,75,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2203,"            return setCopy(text, null);",0,0,0,0,2,1,2,0,1,4,27,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2227,            return setCopy(getMaximumValue());,0,0,0,2,4,1,2,0,2,5,34,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2244,            return setCopy(getMinimumValue());,0,0,0,2,4,1,2,0,2,5,34,5,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2254,            return iInstant.withMillis(iField.roundFloor(iInstant.getMillis()));,0,0,0,3,6,1,6,0,0,4,68,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2263,            return iInstant.withMillis(iField.roundCeiling(iInstant.getMillis()));,0,0,0,3,6,1,6,0,0,4,70,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2273,            return iInstant.withMillis(iField.roundHalfFloor(iInstant.getMillis()));,0,0,0,3,6,1,6,0,0,4,72,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2283,            return iInstant.withMillis(iField.roundHalfCeiling(iInstant.getMillis()));,0,0,0,3,6,1,6,0,0,4,74,6,0.0,0,0
defect4j,time,org/joda/time/DateTime,16,2294,            return iInstant.withMillis(iField.roundHalfEven(iInstant.getMillis()));,0,0,0,3,6,1,6,0,0,4,71,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,438,        OffsetMillisProvider(long offsetMillis) {,2,0,0,1,3,1,0,0,0,4,41,3,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,439,            iMillis = offsetMillis;,2,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,440,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,447,            return System.currentTimeMillis() + iMillis;,1,1,0,1,2,1,2,0,0,6,44,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,43,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,56,        return cMillisProvider.getMillis();,0,0,0,1,2,1,2,0,0,4,35,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,97,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,98,        if (offsetMillis == 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,99,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,0,0,0,0,0,0,1,2,41,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,101,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,2,0,0,1,2,1,0,1,2,6,57,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,116,        if (millisProvider == null) {,1,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,117,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0,0,0,1,2,2,0,1,2,5,74,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,119,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,120,        cMillisProvider = millisProvider;,2,0,0,0,0,0,0,0,1,2,33,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,121,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,131,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0,0,0,2,4,1,2,1,2,6,70,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,147,            return DateTimeUtils.currentTimeMillis();,0,0,0,1,2,1,2,0,0,4,41,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,165,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,169,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,187,        Chronology chrono = null;,1,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,188,        if (start != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,189,            chrono = start.getChronology();,1,0,0,1,2,0,2,0,1,5,31,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,190,        } else if (end != null) {,1,1,0,1,4,2,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,191,            chrono = end.getChronology();,1,0,0,1,2,0,2,0,1,5,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,193,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,194,            chrono = ISOChronology.getInstance();,1,0,0,1,2,0,2,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,196,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,211,        if (interval == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,212,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,214,        Chronology chrono = interval.getChronology();,1,0,0,1,2,0,2,1,0,5,45,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,215,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,216,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,218,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,234,        if (interval == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,235,            long now = DateTimeUtils.currentTimeMillis();,1,0,0,1,2,1,2,0,0,5,45,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,236,"            interval = new Interval(now, now);",3,0,0,0,2,1,0,1,2,5,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,238,        return interval;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,253,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,270,            return DateTimeZone.getDefault();,0,0,0,1,2,1,2,0,0,4,33,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,286,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,287,            return PeriodType.standard();,0,0,0,1,2,1,2,0,0,4,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,289,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,303,        if (duration == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,304,            return 0L;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,306,        return duration.getMillis();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,334,        if (partial == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,335,"            throw new IllegalArgumentException(""Partial must not be null"");",0,0,0,1,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,337,        DurationFieldType lastType = null;,1,0,0,0,0,0,0,1,0,2,34,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,338,        for (int i = 0; i < partial.size(); i++) {,3,1,0,2,5,2,2,0,1,7,42,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,339,            DateTimeField loopField = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,46,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,340,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,341,                if (loopField.getRangeDurationField().getType() != lastType) {,1,1,0,2,7,1,3,0,0,6,62,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,342,                    return false;,0,0,0,0,0,1,0,0,1,2,13,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,345,            lastType = loopField.getDurationField().getType();,1,0,0,1,4,0,3,0,1,5,50,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,347,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,365,"            Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});",1,0,0,0,6,3,1,4,1,6,93,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,366,"            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});",1,0,0,1,8,2,2,2,0,6,70,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,367,        } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,368,            return new DateFormatSymbols(locale);,1,0,0,1,2,2,0,1,1,6,37,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,399,            return System.currentTimeMillis();,0,0,0,1,2,1,2,0,0,4,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,16,423,            return iMillis;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,463,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,464,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,466,            if (obj instanceof StandardDateTimeFieldType) {,1,0,0,1,3,2,0,1,0,5,47,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,467,                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;,3,1,0,2,4,1,0,1,0,6,62,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,469,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,475,            return (1 << iOrdinal);,1,1,0,1,2,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,484,                    return chronology.era();,0,0,0,1,2,1,2,0,0,4,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,486,                    return chronology.yearOfEra();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,488,                    return chronology.centuryOfEra();,0,0,0,1,2,1,2,0,0,4,33,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,490,                    return chronology.yearOfCentury();,0,0,0,1,2,1,2,0,0,4,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,494,                    return chronology.dayOfYear();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,500,                    return chronology.weekyearOfCentury();,0,0,0,1,2,1,2,0,0,4,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,502,                    return chronology.weekyear();,0,0,0,1,2,1,2,0,0,4,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,504,                    return chronology.weekOfWeekyear();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,506,                    return chronology.dayOfWeek();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,508,                    return chronology.halfdayOfDay();,0,0,0,1,2,1,2,0,0,4,33,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,510,                    return chronology.hourOfHalfday();,0,0,0,1,2,1,2,0,0,4,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,512,                    return chronology.clockhourOfHalfday();,0,0,0,1,2,1,2,0,0,4,39,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,514,                    return chronology.clockhourOfDay();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,518,                    return chronology.minuteOfDay();,0,0,0,1,2,1,2,0,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,526,                    return chronology.millisOfDay();,0,0,0,1,2,1,2,0,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,528,                    return chronology.millisOfSecond();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,531,                    throw new InternalError();,0,0,0,1,2,2,0,1,1,5,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,541,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,543,                    return ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,16,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,545,                    return YEAR_OF_ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,547,                    return CENTURY_OF_ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,549,                    return YEAR_OF_CENTURY_TYPE;,1,0,0,0,0,1,0,0,0,2,28,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,551,                    return YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,553,                    return DAY_OF_YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,555,                    return MONTH_OF_YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,557,                    return DAY_OF_MONTH_TYPE;,1,0,0,0,0,1,0,0,0,2,25,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,559,                    return WEEKYEAR_OF_CENTURY_TYPE;,1,0,0,0,0,1,0,0,0,2,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,561,                    return WEEKYEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,21,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,563,                    return WEEK_OF_WEEKYEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,565,                    return DAY_OF_WEEK_TYPE;,1,0,0,0,0,1,0,0,0,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,567,                    return HALFDAY_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,569,                    return HOUR_OF_HALFDAY_TYPE;,1,0,0,0,0,1,0,0,0,2,28,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,571,                    return CLOCKHOUR_OF_HALFDAY_TYPE;,1,0,0,0,0,1,0,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,573,                    return CLOCKHOUR_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,575,                    return HOUR_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,577,                    return MINUTE_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,579,                    return MINUTE_OF_HOUR_TYPE;,1,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,581,                    return SECOND_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,583,                    return SECOND_OF_MINUTE_TYPE;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,585,                    return MILLIS_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,587,                    return MILLIS_OF_SECOND_TYPE;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,16,590,                    return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
