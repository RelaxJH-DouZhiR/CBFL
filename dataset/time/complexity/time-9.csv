dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line
defect4j,time,org/joda/time/DateTimeZone,9,256,        },0,0,0,0,1,0,0,0,0,1,1,2,1.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,265,            } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.2,1,0
defect4j,time,org/joda/time/DateTimeZone,9,636,            offset = -offset;,2,0,0,0,0,0,0,0,2,2,17,6,0.08333,1,1
defect4j,time,org/joda/time/DateTimeZone,9,637,        },0,0,0,0,1,0,0,0,0,1,1,2,0.08333,1,1
defect4j,time,org/joda/time/DateTimeZone,9,359,            if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,6,0.05263,0,0
defect4j,time,org/joda/time/DateTimeZone,9,360,                return zone;,1,0,0,0,0,1,0,0,0,2,12,8,0.05263,0,0
defect4j,time,org/joda/time/DateTimeZone,9,361,            },0,0,0,0,1,0,0,0,0,1,1,2,0.05263,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2308,                negative = true;,1,0,0,0,0,0,0,0,2,2,16,7,0.05,0,0
defect4j,time,org/joda/time/DateTimeZone,9,216,            if (offset == 0L) {,1,1,0,1,3,1,0,0,0,5,19,6,0.03571,0,0
defect4j,time,org/joda/time/DateTimeZone,9,217,                return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,9,0.03571,0,0
defect4j,time,org/joda/time/DateTimeZone,9,220,"                return fixedOffsetZone(id, offset);",0,0,0,0,2,1,3,0,1,4,35,8,0.03571,0,0
defect4j,time,org/joda/time/DateTimeZone,9,221,            },0,0,0,0,1,0,0,0,0,1,1,2,0.03571,0,0
defect4j,time,org/joda/time/DateTimeZone,9,215,            int offset = parseOffset(id);,1,0,0,1,2,1,2,0,1,6,29,7,0.03448,0,0
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,1,0,0,1,3,1,0,1,1,6,31,8,0.03333,0,0
defect4j,time,org/joda/time/DateTimeZone,9,607,            },0,0,0,0,1,0,0,0,0,1,1,2,0.03333,0,0
defect4j,time,org/joda/time/DateTimeZone,9,610,            },0,0,0,0,1,0,0,0,0,1,1,2,0.03333,0,0
defect4j,time,org/joda/time/DateTimeZone,9,605,            public DateTimeZone getZone() {,1,0,0,1,3,1,0,1,1,6,31,8,0.03333,0,0
defect4j,time,org/joda/time/DateTimeZone,9,619,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03333,0,0
defect4j,time,org/joda/time/DateTimeZone,9,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,49,6,0.03333,0,0
defect4j,time,org/joda/time/DateTimeZone,9,672,"                .appendTimeZoneOffset(null, true, 2, 4)",0,0,0,0,2,0,1,0,1,3,39,9,0.03333,0,0
defect4j,time,org/joda/time/DateTimeZone,9,676,    },0,0,0,0,1,0,0,0,0,1,1,2,0.03333,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,142,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.03125,0,0
defect4j,time,org/joda/time/DateTimeZone,9,267,            },0,0,0,0,1,0,0,0,0,1,1,2,0.01754,1,0
defect4j,time,org/joda/time/DateTimeZone,9,255,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.01639,0,0
defect4j,time,org/joda/time/DateTimeZone,9,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",1,1,0,1,2,2,0,1,2,7,77,6,0.01639,0,0
defect4j,time,org/joda/time/DateTimeZone,9,261,        try {,0,0,0,0,1,1,0,0,0,2,5,2,0.01639,0,0
defect4j,time,org/joda/time/DateTimeZone,9,263,            if (hoursInMinutes < 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.01639,1,0
defect4j,time,org/joda/time/DateTimeZone,9,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",2,0,0,0,2,0,3,0,2,4,67,8,0.01639,0,0
defect4j,time,org/joda/time/DateTimeZone,9,269,        } catch (ArithmeticException ex) {,1,0,0,1,4,1,0,1,0,5,34,6,0.01639,0,0
defect4j,time,org/joda/time/DateTimeZone,9,272,        return forOffsetMillis(offset);,0,0,0,1,2,1,2,0,1,5,31,4,0.01639,0,0
defect4j,time,org/joda/time/DateTimeZone,9,273,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01639,0,0
defect4j,time,org/joda/time/DateTimeZone,9,283,"        return fixedOffsetZone(id, millisOffset);",0,0,0,0,2,1,3,0,1,4,41,4,0.01408,0,0
defect4j,time,org/joda/time/DateTimeZone,9,284,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01408,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2310,                negative = false;,1,0,0,0,0,0,0,0,2,2,17,8,0.01282,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2309,            } else if (c == '+') {,1,1,0,1,4,2,0,0,1,6,22,6,0.01205,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2386,                    break parse;,1,0,0,0,0,1,0,0,0,2,12,9,0.01149,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2356,                    expectSeparators = true;,1,0,0,0,0,0,0,0,2,2,24,9,0.01111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2357,                    limit--;,1,0,0,0,0,0,0,0,1,2,8,9,0.01111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2358,                    position++;,1,0,0,0,0,0,0,0,1,2,11,9,0.01111,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2315,            limit--;,1,0,0,0,0,0,0,0,1,2,8,5,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2316,            position++;,1,0,0,0,0,0,0,0,1,2,11,5,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2330,"            if (digitCount(text, position, 2) < 2) {",0,1,0,0,5,1,3,0,1,5,40,5,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",1,0,0,0,2,1,4,0,0,4,55,6,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2338,            if (hours > 23) {,1,1,0,1,3,1,0,0,0,5,17,5,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,0,0,0,1,3,51,5,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2342,            limit -= 2;,1,0,0,0,0,0,0,0,1,2,11,5,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2343,            position += 2;,1,0,0,0,0,0,0,0,1,2,14,5,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2349,                if (limit <= 0) {,1,1,0,1,3,1,0,0,0,5,17,7,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2354,                c = text.charAt(position);,1,0,0,1,2,0,3,0,1,5,26,7,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2355,                if (c == ':') {,1,1,0,1,3,1,0,0,1,6,15,7,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2367,"                int count = digitCount(text, position, 2);",1,0,0,0,2,1,3,0,1,5,42,8,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2368,                if (count == 0 && !expectSeparators) {,2,2,0,1,3,1,0,0,1,6,38,7,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2370,                } else if (count < 2) {,1,1,0,1,4,2,0,0,0,5,23,8,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",1,0,0,0,2,1,4,0,0,4,57,8,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2376,                if (minutes > 59) {,1,1,0,1,3,1,0,0,0,5,19,7,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,0,0,0,1,3,56,7,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2380,                limit -= 2;,1,0,0,0,0,0,0,0,1,2,11,7,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2381,                position += 2;,1,0,0,0,0,0,0,0,1,2,14,7,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2385,                if (limit <= 0) {,1,1,0,1,3,1,0,0,0,5,17,7,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,3,0,0,2,4,0,4,0,1,5,63,6,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2445,            return position;,1,0,0,0,0,1,0,0,0,2,16,5,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2453,"            int limit = Math.min(text.length() - position, amount);",2,1,0,1,4,1,5,0,0,6,55,6,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2454,            amount = 0;,1,0,0,0,0,0,0,0,1,2,11,5,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2455,            for (; limit > 0; limit--) {,2,1,0,1,3,1,0,0,1,6,28,5,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2456,                char c = text.charAt(position + amount);,3,1,0,1,2,1,2,0,0,6,40,8,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2457,                if (c < '0' || c > '9') {,2,3,0,1,3,1,0,0,2,6,25,7,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2460,                amount++;,1,0,0,0,0,0,0,0,1,2,9,7,0.01099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2462,            return amount;,1,0,0,0,0,1,0,0,0,2,14,5,0.01099,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,352,        int value = text.charAt(position) - '0';,1,1,0,1,2,1,3,0,1,7,40,5,0.01099,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,3,6,0,2,8,1,2,0,1,7,71,4,0.01099,0,0
defect4j,time,org/joda/time/DateTimeZone,9,634,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.01053,0,0
defect4j,time,org/joda/time/DateTimeZone,9,350,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.01042,0,0
defect4j,time,org/joda/time/DateTimeZone,9,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",1,0,0,1,2,1,0,4,2,6,71,6,0.01042,0,0
defect4j,time,org/joda/time/DateTimeZone,9,354,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01042,0,0
defect4j,time,org/joda/time/DateTimeZone,9,357,        if (ref != null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.01042,0,0
defect4j,time,org/joda/time/DateTimeZone,9,358,            zone = ref.get();,1,0,0,1,2,0,2,0,1,5,17,6,0.01042,0,0
defect4j,time,org/joda/time/DateTimeZone,9,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",1,0,0,1,4,1,3,2,1,7,65,5,0.01042,0,0
defect4j,time,org/joda/time/DateTimeZone,9,365,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.01042,0,0
defect4j,time,org/joda/time/DateTimeZone,9,366,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01042,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2306,            char c = text.charAt(position);,1,0,0,1,2,1,3,0,0,5,31,6,0.01042,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2307,            if (c == '-') {,1,1,0,1,3,1,0,0,1,6,15,5,0.01042,0,0
defect4j,time,org/joda/time/DateTimeZone,9,632,        if (offset >= 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.01031,0,0
defect4j,time,org/joda/time/DateTimeZone,9,633,            buf.append('+');,0,0,0,1,2,0,2,0,1,4,16,7,0.01031,0,0
defect4j,time,org/joda/time/DateTimeZone,9,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,0,2,0,4,0,0,2,47,5,0.01031,0,0
defect4j,time,org/joda/time/DateTimeZone,9,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,1,2,1,0,0,1,6,58,4,0.01031,0,0
defect4j,time,org/joda/time/DateTimeZone,9,642,,0,0,0,0,0,0,0,0,0,0,0,2,0.01031,0,0
defect4j,time,org/joda/time/DateTimeZone,9,644,        buf.append(':');,0,0,0,1,2,0,2,0,1,4,16,5,0.01031,0,0
defect4j,time,org/joda/time/DateTimeZone,9,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,0,2,0,4,0,0,2,49,5,0.01031,0,0
defect4j,time,org/joda/time/DateTimeZone,9,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,0,0,0,1,3,56,4,0.01031,0,0
defect4j,time,org/joda/time/DateTimeZone,9,647,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.01031,0,0
defect4j,time,org/joda/time/DateTimeZone,9,648,            return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,7,0.01031,0,0
defect4j,time,org/joda/time/DateTimeZone,9,649,        },0,0,0,0,1,0,0,0,0,1,1,2,0.01031,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,119,        long total = (long) val1 * (long) val2;,3,1,0,1,4,3,0,0,0,5,39,5,0.01031,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,61,4,0.01031,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,123,        return (int) total;,1,0,0,1,2,2,0,0,0,4,19,5,0.01031,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,195,        iSavedState = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.00781,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,196,        iOffset = offset;,2,0,0,0,0,0,0,0,1,2,17,4,0.00781,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,197,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00781,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,381,            millis -= iOffset;,2,0,0,0,0,0,0,0,1,2,18,6,0.00781,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2301,            if (limit <= 1) {,1,1,0,1,3,1,0,0,0,5,17,5,0.00725,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,747,"                return bucket.computeMillis(true, text);",0,0,0,0,2,1,3,0,1,4,40,9,0.00649,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2278,            int limit = text.length() - position;,2,1,0,1,2,1,2,0,0,6,37,6,0.00571,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2281,            if (iZeroOffsetParseText != null) {,1,1,0,1,3,1,0,0,0,5,35,6,0.00571,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,746,            if (newPos >= text.length()) {,1,1,0,2,5,1,2,0,0,6,30,6,0.00543,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,942,            chrono = iChrono;,2,0,0,0,0,0,0,0,1,2,17,6,0.00498,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,260,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",3,0,0,0,1,2,0,1,1,5,56,4,0.00495,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,740,        DateTimeParser parser = requireParser();,1,0,0,1,2,0,1,1,1,6,40,4,0.0045,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,742,        Chronology chrono = selectChronology(iChrono);,1,0,0,1,2,0,2,1,1,6,46,4,0.0045,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,743,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",5,0,0,0,2,1,0,2,1,5,101,4,0.0045,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,744,"        int newPos = parser.parseInto(bucket, text, 0);",1,0,0,0,2,1,4,0,0,4,47,5,0.0045,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,745,        if (newPos >= 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0045,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,257,        if (iChrono == chrono) {,2,1,0,1,3,1,0,0,0,5,24,4,0.00433,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,369,                for (int i = 0; i < count; i++) {,4,1,0,1,3,2,0,0,1,6,33,8,0.00336,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,394,        return millis;,1,0,0,0,0,1,0,0,0,2,14,4,0.00323,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,345,        SavedField[] savedFields = iSavedFields;,2,0,0,0,2,0,0,1,0,3,40,4,0.00321,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,346,        int count = iSavedFieldsCount;,2,0,0,0,0,1,0,0,0,2,30,5,0.00321,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,347,        if (iSavedFieldsShared) {,1,0,0,1,3,1,0,0,0,4,25,4,0.00321,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,351,"        sort(savedFields, count);",0,0,0,0,2,0,3,0,1,3,25,4,0.00321,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,352,        if (count > 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.00321,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,363,        long millis = iMillis;,2,0,0,0,0,1,0,0,0,2,22,5,0.00321,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,365,            for (int i = 0; i < count; i++) {,4,1,0,1,3,2,0,0,1,6,33,6,0.00321,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,368,            if (resetFields) {,1,0,0,1,3,1,0,0,0,4,18,6,0.00321,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,378,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00321,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,380,        if (iOffset != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.00321,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,416,        if (high > 10) {,1,1,0,1,3,1,0,0,0,5,16,4,0.00321,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,419,            for (int i=0; i<high; i++) {,4,1,0,1,3,2,0,0,1,6,28,6,0.00321,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,427,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00321,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,929,        return parser;,1,0,0,0,0,1,0,0,0,2,14,4,0.00283,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,120,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00283,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,73,    private SavedField[] iSavedFields = new SavedField[8];,1,0,0,0,4,2,0,2,1,5,54,2,0.00283,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,121,        chrono = DateTimeUtils.getChronology(chrono);,1,0,0,1,2,0,3,0,1,5,45,4,0.00283,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,122,        iMillis = instantLocal;,2,0,0,0,0,0,0,0,1,2,23,4,0.00283,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,123,        iZone = chrono.getZone();,1,0,0,1,2,0,2,0,1,5,25,4,0.00283,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,124,        iChrono = chrono.withUTC();,1,0,0,1,2,0,2,0,1,5,27,4,0.00283,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,125,        iLocale = (locale == null ? Locale.getDefault() : locale);,3,1,0,2,4,0,2,0,1,6,58,4,0.00283,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,126,        iPivotYear = pivotYear;,2,0,0,0,0,0,0,0,1,2,23,4,0.00283,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,127,        iDefaultYear = defaultYear;,2,0,0,0,0,0,0,0,1,2,27,4,0.00283,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,128,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00283,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,925,        DateTimeParser parser = iParser;,2,0,0,0,0,0,0,1,0,2,32,4,0.00282,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,926,        if (parser == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.00282,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,68,            for (; size > 2; size--) {,2,1,0,1,3,1,0,0,1,6,26,7,0.00242,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,74,            int d = ((value + 1) * 13421772) >> 27;,2,3,0,2,4,1,0,0,0,5,39,8,0.00242,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,75,            buf.append((char) (d + '0'));,1,1,0,2,6,1,2,0,1,7,29,8,0.00242,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,3,4,0,3,10,1,2,0,1,7,55,8,0.00242,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,78,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.00242,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,128,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00203,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,129,        iPrinter = printer;,2,0,0,0,0,0,0,0,1,2,19,4,0.00203,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,130,        iParser = parser;,2,0,0,0,0,0,0,0,1,2,17,4,0.00203,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,131,        iLocale = locale;,2,0,0,0,0,0,0,0,1,2,17,4,0.00203,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,132,        iOffsetParsed = offsetParsed;,2,0,0,0,0,0,0,0,1,2,29,4,0.00203,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,133,        iChrono = chrono;,2,0,0,0,0,0,0,0,1,2,17,4,0.00203,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,134,        iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,4,0.00203,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,135,        iPivotYear = pivotYear;,2,0,0,0,0,0,0,0,1,2,23,4,0.00203,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,136,        iDefaultYear = defaultYear;,2,0,0,0,0,0,0,0,1,2,27,4,0.00203,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,137,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00203,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,67,        } else if (value < 100) {,1,1,0,1,4,2,0,0,0,5,25,5,0.00187,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,64,                buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,9,0.00186,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,63,            for (; size > 1; size--) {,2,1,0,1,3,1,0,0,1,6,26,6,0.00186,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,66,            buf.append((char)(value + '0'));,1,1,0,2,6,1,2,0,1,7,32,7,0.00186,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1091,        return append0(new TimeZoneOffset,0,0,0,0,1,2,1,1,2,5,33,4,0.00172,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2121,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0017,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2122,            iZeroOffsetPrintText = zeroOffsetPrintText;,2,0,0,0,0,0,0,0,1,2,43,5,0.0017,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2123,            iZeroOffsetParseText = zeroOffsetParseText;,2,0,0,0,0,0,0,0,1,2,43,5,0.0017,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2124,            iShowSeparators = showSeparators;,2,0,0,0,0,0,0,0,1,2,33,5,0.0017,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2125,            if (minFields <= 0 || maxFields < minFields) {,3,3,0,1,3,1,0,0,0,5,46,5,0.0017,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2128,            if (minFields > 4) {,1,1,0,1,3,1,0,0,0,5,20,5,0.0017,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2132,            iMinFields = minFields;,2,0,0,0,0,0,0,0,1,2,23,5,0.0017,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2133,            iMaxFields = maxFields;,2,0,0,0,0,0,0,0,1,2,23,5,0.0017,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2134,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0017,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,50,        if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.00158,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,62,        if (value < 10) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00158,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,92,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00158,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,940,        chrono = DateTimeUtils.getChronology(chrono);,1,0,0,1,2,0,3,0,1,5,45,4,0.00137,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,941,        if (iChrono != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.00137,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,944,        if (iZone != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.00137,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,947,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.00137,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,31,    private static final double LOG_10 = Math.log(10);,1,0,0,1,2,4,2,0,3,6,50,2,0.00122,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1169,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.00116,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1179,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.00116,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1142,                Object printer = iElementPairs.get(0);,1,0,0,1,2,0,2,1,0,5,38,8,0.00116,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1143,                Object parser = iElementPairs.get(1);,1,0,0,1,2,0,2,1,0,5,37,8,0.00116,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1145,                if (printer != null) {,1,1,0,1,3,1,0,0,0,5,22,8,0.00116,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1146,                    if (printer == parser || parser == null) {,3,3,0,1,3,1,0,0,0,5,42,10,0.00116,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1147,                        f = printer;,2,0,0,0,0,0,0,0,1,2,12,12,0.00116,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,112,            parser = (DateTimeParser) f;,2,0,0,1,2,0,0,1,1,5,28,6,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,108,            printer = (DateTimePrinter) f;,2,0,0,1,2,0,0,1,1,5,30,6,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,109,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,110,        iPrinter = printer;,2,0,0,0,0,0,0,0,1,2,19,4,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,111,        iParser = parser;,2,0,0,0,0,0,0,0,1,2,17,4,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,112,        iLocale = null;,1,0,0,0,0,0,0,0,1,2,15,4,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,113,        iOffsetParsed = false;,1,0,0,0,0,0,0,0,2,2,22,4,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,114,        iChrono = null;,1,0,0,0,0,0,0,0,1,2,15,4,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,115,        iZone = null;,1,0,0,0,0,0,0,0,1,2,13,4,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,116,        iPivotYear = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,117,        iDefaultYear = 2000;,1,0,0,0,0,0,0,0,1,2,20,4,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,118,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,105,        Object f = getFormatter();,1,0,0,1,2,0,1,1,1,6,26,4,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,106,        DateTimePrinter printer = null;,1,0,0,0,0,0,0,1,0,2,31,4,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,107,        if (isPrinter(f)) {,0,0,0,2,5,1,2,0,1,5,19,4,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,110,        DateTimeParser parser = null;,1,0,0,0,0,0,0,1,0,2,29,4,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,111,        if (isParser(f)) {,0,0,0,2,5,1,2,0,1,5,18,4,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,114,        if (printer != null || parser != null) {,2,3,0,1,3,1,0,0,0,5,40,4,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,115,"            return new DateTimeFormatter(printer, parser);",2,0,0,0,2,2,0,1,1,5,46,6,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1165,        if (f instanceof DateTimePrinter) {,1,0,0,1,3,2,0,1,0,5,35,5,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1166,            if (f instanceof Composite) {,1,0,0,1,3,2,0,1,0,5,29,7,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1175,        if (f instanceof DateTimeParser) {,1,0,0,1,3,2,0,1,0,5,34,5,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1176,            if (f instanceof Composite) {,1,0,0,1,3,2,0,1,0,5,29,7,0.00099,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,374,        iFormatter = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.00098,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,376,        iElementPairs.add(element);,0,0,0,1,2,0,3,0,0,3,27,5,0.00098,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,377,        iElementPairs.add(element);,0,0,0,1,2,0,3,0,0,3,27,5,0.00098,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,378,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.00098,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1138,        Object f = iFormatter;,2,0,0,0,0,0,0,1,0,2,22,4,0.00098,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1140,        if (f == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.00098,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1141,            if (iElementPairs.size() == 2) {,0,1,0,2,5,1,2,0,0,5,32,6,0.00098,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1154,            if (f == null) {,1,1,0,1,3,1,0,0,0,5,16,6,0.00098,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1158,            iFormatter = f;,2,0,0,0,0,0,0,0,1,2,15,6,0.00098,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1161,        return f;,1,0,0,0,0,1,0,0,0,2,9,4,0.00098,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,84,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00098,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,85,        iElementPairs = new ArrayList<Object>();,1,0,0,1,2,1,0,2,2,6,40,4,0.00098,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,86,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00098,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,70,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.00097,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,64,        int sum = val1 + val2;,3,1,0,0,0,1,0,0,0,3,22,5,0.00097,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,4,5,0,2,7,1,0,0,0,5,45,4,0.00097,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,285,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.00036,0,0
defect4j,time,org/joda/time/DateTimeZone,9,175,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00034,0,0
defect4j,time,org/joda/time/DateTimeZone,9,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0,0,0,2,4,1,2,1,2,6,70,7,0.00034,0,0
defect4j,time,org/joda/time/DateTimeZone,9,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0,0,0,1,2,2,0,1,2,5,73,6,0.00034,0,0
defect4j,time,org/joda/time/DateTimeZone,9,182,            cDefault = zone;,2,0,0,0,0,0,0,0,1,2,16,6,0.00034,0,0
defect4j,time,org/joda/time/DateTimeZone,9,183,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00034,0,0
defect4j,time,org/joda/time/DateTimeZone,9,184,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00034,0,0
defect4j,time,org/joda/time/DateTimeZone,9,185,,0,0,0,0,0,0,0,0,0,0,0,2,0.00034,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,282,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.00032,0,0
defect4j,time,org/joda/time/DateTimeZone,9,148,                        if (temp == null) {,1,1,0,1,3,1,0,0,0,5,19,12,0.0003,0,0
defect4j,time,org/joda/time/DateTimeZone,9,134,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0003,0,0
defect4j,time,org/joda/time/DateTimeZone,9,135,            synchronized(DateTimeZone.class) {,0,0,0,1,3,2,0,1,0,4,34,8,0.0003,0,0
defect4j,time,org/joda/time/DateTimeZone,9,136,                zone = cDefault;,2,0,0,0,0,0,0,0,1,2,16,8,0.0003,0,0
defect4j,time,org/joda/time/DateTimeZone,9,137,                if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,8,0.0003,0,0
defect4j,time,org/joda/time/DateTimeZone,9,138,                    DateTimeZone temp = null;,1,0,0,0,0,0,0,1,0,2,25,10,0.0003,0,0
defect4j,time,org/joda/time/DateTimeZone,9,139,                    try {,0,0,0,0,1,1,0,0,0,2,5,2,0.0003,0,0
defect4j,time,org/joda/time/DateTimeZone,9,142,                            if (id != null) {  // null check avoids stack overflow,1,1,0,1,3,1,0,0,0,5,54,14,0.0003,0,0
defect4j,time,org/joda/time/DateTimeZone,9,143,                                temp = forID(id);,1,0,0,1,2,0,2,0,2,5,17,16,0.0003,0,0
defect4j,time,org/joda/time/DateTimeZone,9,144,                            },0,0,0,0,1,0,0,0,0,1,1,2,0.0003,0,0
defect4j,time,org/joda/time/DateTimeZone,9,149,                            temp = forTimeZone(TimeZone.getDefault());,1,0,0,2,4,0,3,0,2,5,42,14,0.0003,0,0
defect4j,time,org/joda/time/DateTimeZone,9,154,                    if (temp == null) {,1,1,0,1,3,1,0,0,0,5,19,10,0.0003,0,0
defect4j,time,org/joda/time/DateTimeZone,9,155,                        temp = UTC;,2,0,0,0,0,0,0,0,1,2,11,12,0.0003,0,0
defect4j,time,org/joda/time/DateTimeZone,9,158,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0003,0,0
defect4j,time,org/joda/time/DateTimeZone,9,160,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0003,0,0
defect4j,time,org/joda/time/DateTimeZone,9,162,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0003,0,0
defect4j,time,org/joda/time/Chronology,9,63,public abstract class Chronology {,1,0,0,0,1,3,0,0,2,4,34,1,0.0003,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,54,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0003,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,55,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0003,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,39,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,1,0,0,1,2,4,0,2,4,6,94,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,41,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,0,0,0,3,0,1,3,4,80,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,47,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();",1,0,0,1,2,1,0,6,1,6,74,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,48,"        map.put(""UT"", DateTimeZone.UTC);",2,0,0,0,2,0,2,0,1,4,32,5,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,49,"        map.put(""UTC"", DateTimeZone.UTC);",2,0,0,0,2,0,2,0,1,4,33,5,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,50,"        map.put(""GMT"", DateTimeZone.UTC);",2,0,0,0,2,0,2,0,1,4,33,5,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,51,"        put(map, ""EST"", ""America/New_York"");",0,0,0,0,2,0,2,0,3,3,36,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,52,"        put(map, ""EDT"", ""America/New_York"");",0,0,0,0,2,0,2,0,3,3,36,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,53,"        put(map, ""CST"", ""America/Chicago"");",0,0,0,0,2,0,2,0,3,3,35,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,54,"        put(map, ""CDT"", ""America/Chicago"");",0,0,0,0,2,0,2,0,3,3,35,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,55,"        put(map, ""MST"", ""America/Denver"");",0,0,0,0,2,0,2,0,3,3,34,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,56,"        put(map, ""MDT"", ""America/Denver"");",0,0,0,0,2,0,2,0,3,3,34,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,57,"        put(map, ""PST"", ""America/Los_Angeles"");",0,0,0,0,2,0,2,0,3,3,39,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,58,"        put(map, ""PDT"", ""America/Los_Angeles"");",0,0,0,0,2,0,2,0,3,3,39,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,59,        cZoneNames = Collections.unmodifiableMap(map);,1,0,0,1,2,0,3,0,1,5,46,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,63,"            map.put(name, DateTimeZone.forID(id));",0,0,0,1,4,0,6,0,0,3,38,7,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,66,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,67,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,524,    static class SystemMillisProvider implements MillisProvider {,1,0,0,0,1,3,0,1,1,5,61,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,9,205,            return getDefault();,0,0,0,1,2,1,1,0,1,5,20,6,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,208,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,211,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,212,            return zone;,1,0,0,0,0,1,0,0,0,2,12,6,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,213,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,504,        {,0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,3,5,0,1,3,1,0,0,3,6,48,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,509,            iMode = mode;,2,0,0,0,0,0,0,0,1,2,13,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,510,            iMonthOfYear = monthOfYear;,2,0,0,0,0,0,0,0,1,2,27,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,511,            iDayOfMonth = dayOfMonth;,2,0,0,0,0,0,0,0,1,2,25,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,512,            iDayOfWeek = dayOfWeek;,2,0,0,0,0,0,0,0,1,2,23,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,513,            iAdvance = advanceDayOfWeek;,2,0,0,0,0,0,0,0,1,2,28,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,514,            iMillisOfDay = millisOfDay;,2,0,0,0,0,0,0,0,1,2,27,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,515,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,482,"            return new OfYear((char)in.readUnsignedByte(),",0,0,0,1,5,3,2,1,1,6,46,5,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,147,            return loadZoneData(id);,0,0,0,1,2,1,2,0,1,5,24,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,224,        InputStream in = null;,1,0,0,0,0,0,0,1,0,2,22,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,226,            in = openResource(id);,1,0,0,1,2,0,2,0,2,5,22,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",1,0,0,0,2,0,4,1,0,4,55,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",1,0,0,1,4,1,3,2,1,7,58,7,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,229,            return tz;,1,0,0,0,0,1,0,0,0,2,10,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,236,                if (in != null) {,1,1,0,1,3,1,0,0,0,5,17,8,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,237,                    in.close();,0,0,0,1,2,0,2,0,0,3,11,11,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,240,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1176,            super(id);,1,0,0,1,2,1,0,0,1,5,10,4,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1177,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1178,            iStartRecurrence = startRecurrence;,2,0,0,0,0,0,0,0,1,2,35,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1179,            iEndRecurrence = endRecurrence;,2,0,0,0,0,0,0,0,1,2,31,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1180,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1166,"            return new DSTZone(id, (int)readMillis(in), ",1,0,0,1,5,3,2,1,2,7,43,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,95,        if (in instanceof DataInput) {,1,0,0,1,3,2,0,1,0,5,30,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,98,"            return readFrom((DataInput)new DataInputStream(in), id);",1,0,0,1,6,2,2,2,2,7,56,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,110,        switch (in.readUnsignedByte()) {,0,0,0,2,5,1,2,0,0,4,32,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0,0,0,0,4,1,6,0,0,3,70,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,183,        int v = in.readUnsignedByte();,1,0,0,1,2,1,2,0,0,5,30,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,184,        switch (v >> 6) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,187,            v = (v << (32 - 6)) >> (32 - 6);,2,4,0,2,6,0,0,0,1,5,32,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,188,            return v * (30 * 60000L);,1,2,0,1,2,1,0,0,0,5,25,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,192,            v = (v << (32 - 6)) >> (32 - 30);,2,4,0,2,6,0,0,0,1,5,33,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,193,            v |= (in.readUnsignedByte()) << 16;,1,1,0,2,4,0,2,0,1,6,35,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,194,            v |= (in.readUnsignedByte()) << 8;,1,1,0,2,4,0,2,0,1,6,34,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,195,            v |= (in.readUnsignedByte());,1,0,0,2,4,0,2,0,1,5,29,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,196,            return v * 60000L;,1,1,0,0,0,1,0,0,0,3,18,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,2,4,0,3,10,2,0,0,0,5,46,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,201,            w |= (in.readUnsignedByte()) << 24;,1,1,0,2,4,0,2,0,1,6,35,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,202,            w |= (in.readUnsignedByte()) << 16;,1,1,0,2,4,0,2,0,1,6,35,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,203,            w |= (in.readUnsignedByte()) << 8;,1,1,0,2,4,0,2,0,1,6,34,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,204,            w |= (in.readUnsignedByte());,1,0,0,2,4,0,2,0,1,5,29,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,205,            return w * 1000L;,1,1,0,0,0,1,0,0,0,3,17,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,209,            return in.readLong();,0,0,0,1,2,1,2,0,0,4,21,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1500,            super(id);,1,0,0,1,2,1,0,0,1,5,10,4,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1501,            iTransitions = transitions;,2,0,0,0,0,0,0,0,1,2,27,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1502,            iWallOffsets = wallOffsets;,2,0,0,0,0,0,0,0,1,2,27,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1503,            iStandardOffsets = standardOffsets;,2,0,0,0,0,0,0,0,1,2,35,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1504,            iNameKeys = nameKeys;,2,0,0,0,0,0,0,0,1,2,21,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1505,            iTailZone = tailZone;,2,0,0,0,0,0,0,0,1,2,21,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1506,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1341,            int poolSize = in.readUnsignedShort();,1,0,0,1,2,1,2,0,0,5,38,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1342,            String[] pool = new String[poolSize];,1,0,1,0,4,1,0,2,0,5,37,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1343,            for (int i=0; i<poolSize; i++) {,4,1,0,1,3,2,0,0,1,6,32,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1344,                pool[i] = in.readUTF();,0,0,1,1,4,0,2,0,1,5,23,7,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1347,            int size = in.readInt();,1,0,0,1,2,1,2,0,0,5,24,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1348,            long[] transitions = new long[size];,1,0,1,0,4,3,0,0,0,4,36,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1349,            int[] wallOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,34,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1350,            int[] standardOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,38,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1351,            String[] nameKeys = new String[size];,1,0,1,0,4,1,0,2,0,5,37,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1353,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1354,                transitions[i] = readMillis(in);,0,0,1,1,4,0,2,0,2,5,32,7,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1355,                wallOffsets[i] = (int)readMillis(in);,0,0,1,1,6,1,2,0,2,6,37,7,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1356,                standardOffsets[i] = (int)readMillis(in);,0,0,1,1,6,1,2,0,2,6,41,7,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1359,                    if (poolSize < 256) {,1,1,0,1,3,1,0,0,0,5,21,9,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1360,                        index = in.readUnsignedByte();,1,0,0,1,2,0,2,0,1,5,30,11,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1364,                    nameKeys[i] = pool[index];,0,0,1,0,4,0,0,0,1,3,26,9,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1367,                },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1370,            DSTZone tailZone = null;,1,0,0,0,0,0,0,1,0,2,24,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1371,            if (in.readBoolean()) {,0,0,0,2,5,1,2,0,0,4,23,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1372,"                tailZone = DSTZone.readFrom(in, id);",1,0,0,0,2,0,4,0,1,4,36,7,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1375,            return new PrecalculatedZone,0,0,0,0,0,2,0,1,1,3,28,5,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,87,        super(zone.getID());,0,0,0,2,4,1,2,0,1,5,20,3,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,84,    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];,2,1,0,0,4,3,0,2,2,6,63,2,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,88,        iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,4,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,89,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",1,0,0,1,2,0,2,0,2,5,67,6,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,42,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,45,        if (i == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,48,            cacheSize = 512; // (1 << 9),1,0,0,1,2,0,0,0,1,4,28,6,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,61,        cInfoCacheMask = cacheSize - 1;,2,1,0,0,0,0,0,0,1,3,31,4,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,68,        if (zone instanceof CachedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,41,5,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,71,        return new CachedDateTimeZone(zone);,1,0,0,1,2,2,0,1,1,6,36,4,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",4,0,0,0,3,1,0,2,0,4,59,3,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,748,            iOfYear = ofYear;,2,0,0,0,0,0,0,0,1,2,17,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,749,            iNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,19,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,750,            iSaveMillis = saveMillis;,2,0,0,0,0,0,0,0,1,2,25,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,751,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0,0,0,1,10,3,7,1,2,6,78,5,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,707,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,690,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,691,"            throw new IllegalArgumentException(""Id must not be null"");",0,0,0,1,2,2,0,1,2,5,58,6,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,694,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,695,,0,0,0,0,0,0,0,0,0,0,0,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,94,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",1,0,0,0,2,4,0,2,6,5,81,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,116,        setNameProvider0(null);,0,0,0,1,2,0,1,0,1,4,23,4,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,117,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,118,,0,0,0,0,0,0,0,0,0,0,0,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,416,            provider = getDefaultProvider();,1,0,0,1,2,0,1,0,2,5,32,6,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,417,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,419,        if (ids == null || ids.size() == 0) {,1,3,0,2,5,1,2,0,0,6,37,4,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,420,            throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,424,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0,0,0,1,2,2,0,1,2,5,71,6,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,427,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0,0,0,1,2,2,0,1,2,5,64,6,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,430,        cAvailableIDs = ids;,2,0,0,0,0,0,0,0,1,2,20,4,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,431,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,432,,0,0,0,0,0,0,0,0,0,0,0,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,444,,0,0,0,0,0,0,0,0,0,0,0,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,447,"                System.getProperty(""org.joda.time.DateTimeZone.Provider"");",0,0,0,1,2,0,2,0,1,4,58,8,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,449,                try {,0,0,0,0,1,1,0,0,0,2,5,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,459,,0,0,0,0,0,0,0,0,0,0,0,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,461,            try {,0,0,0,0,1,1,0,0,0,2,5,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,463,            } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,8,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,467,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,470,            provider = new UTCProvider();,1,0,0,1,2,1,0,1,2,6,29,6,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,474,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,515,            nameProvider = getDefaultNameProvider();,1,0,0,1,2,0,1,0,2,5,40,6,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,516,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,518,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,519,,0,0,0,0,0,0,0,0,0,0,0,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,530,        try {,0,0,0,0,1,1,0,0,0,2,5,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,532,            if (providerClass != null) {,1,1,0,1,3,1,0,0,0,5,28,6,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,533,                try {,0,0,0,0,1,1,0,0,0,2,5,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,543,,0,0,0,0,0,0,0,0,0,0,0,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,545,            nameProvider = new DefaultNameProvider();,1,0,0,1,2,1,0,1,2,6,41,6,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,546,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,9,549,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,82,"        this(resourcePath, null, false);",1,0,0,0,2,1,0,0,1,4,32,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,83,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,106,    {,0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,107,        if (resourcePath == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,110,"        if (!resourcePath.endsWith(""/"")) {",0,0,0,2,5,1,2,0,2,5,34,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,111,            resourcePath += '/';,1,0,0,0,0,0,0,0,2,2,20,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,114,        iFileDir = null;,1,0,0,0,0,0,0,0,1,2,16,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,115,        iResourcePath = resourcePath;,2,0,0,0,0,0,0,0,1,2,29,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,117,        if (loader == null && !favorSystemLoader) {,2,2,0,1,3,1,0,0,1,6,43,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,118,            loader = getClass().getClassLoader();,1,0,0,1,4,0,2,0,2,5,37,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,121,        iLoader = loader;,2,0,0,0,0,0,0,0,1,2,17,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",1,0,0,2,4,0,2,0,4,5,60,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,124,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,136,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,140,        Object obj = iZoneInfoMap.get(id);,1,0,0,1,2,0,3,1,0,5,34,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,141,        if (obj == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,145,        if (id.equals(obj)) {,0,0,0,2,5,1,3,0,0,4,21,5,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,150,        if (obj instanceof SoftReference<?>) {,1,0,0,1,3,2,0,1,0,5,38,5,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,152,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,2,0,0,1,2,0,0,4,0,4,68,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,153,            DateTimeZone tz = ref.get();,1,0,0,1,2,0,2,1,0,5,28,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,154,            if (tz != null) {,1,1,0,1,3,1,0,0,0,5,17,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,155,                return tz;,1,0,0,0,0,1,0,0,0,2,10,8,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,174,        return new TreeSet<String>(iZoneInfoMap.keySet());,0,0,0,2,4,2,2,2,1,6,50,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,196,        if (iFileDir != null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,199,            String path = iResourcePath.concat(name);,1,0,0,1,2,0,3,1,0,5,41,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,200,            if (iLoader != null) {,1,1,0,1,3,1,0,0,0,5,22,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,201,                in = iLoader.getResourceAsStream(path);,1,0,0,1,2,0,3,0,1,5,39,8,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,205,            if (in == null) {,1,1,0,1,3,1,0,0,0,5,17,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,214,        return in;,1,0,0,0,0,1,0,0,0,2,10,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",1,0,0,1,2,1,0,6,1,6,66,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,253,        DataInputStream din = new DataInputStream(in);,2,0,0,1,2,1,0,2,1,6,46,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,255,"            readZoneInfoMap(din, map);",0,0,0,0,2,0,3,0,1,3,26,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,258,                din.close();,0,0,0,1,2,0,2,0,0,3,12,9,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,260,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",2,0,0,1,4,1,2,2,2,7,66,5,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,263,        return map;,1,0,0,0,0,1,0,0,0,2,11,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,274,        int size = din.readUnsignedShort();,1,0,0,1,2,1,2,0,0,5,35,5,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,275,        String[] pool = new String[size];,1,0,1,0,4,1,0,2,0,5,33,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,276,        for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,277,            pool[i] = din.readUTF().intern();,0,0,1,1,6,0,3,0,1,5,33,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,281,        size = din.readUnsignedShort();,1,0,0,1,2,0,2,0,1,5,31,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,282,        for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0,0,1,1,10,0,6,0,0,4,72,9,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,287,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,289,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,38,        super(id);,1,0,0,1,2,1,0,0,1,5,10,3,0.00027,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,39,        iNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,19,4,0.00027,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,40,        iWallOffset = wallOffset;,2,0,0,0,0,0,0,0,1,2,25,4,0.00027,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,41,        iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,4,0.00027,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,88,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.00027,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,89,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,39,    public DefaultNameProvider() {,1,0,0,1,3,1,0,0,1,5,30,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",1,0,0,1,2,1,1,7,2,7,89,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,40,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,99,        return new HashMap(7);,0,0,0,1,2,2,0,1,1,5,22,4,0.00027,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,569,        OffsetMillisProvider(long offsetMillis) {,2,0,0,1,3,1,0,0,0,4,41,3,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,570,            iMillis = offsetMillis;,2,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,571,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,578,            return System.currentTimeMillis() + iMillis;,1,1,0,1,2,1,2,0,0,6,44,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,73,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,74,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,64,        } catch (RuntimeException ex) {,1,0,0,1,4,1,0,1,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,86,        return cMillisProvider.getMillis();,0,0,0,1,2,1,2,0,0,4,35,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,98,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,99,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,0,0,0,0,0,0,1,2,41,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,100,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,112,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,113,        cMillisProvider = new FixedMillisProvider(fixedMillis);,2,0,0,1,2,1,0,1,2,6,55,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,114,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,127,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,128,        if (offsetMillis == 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,129,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,0,0,0,0,0,0,1,2,41,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,131,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,2,0,0,1,2,1,0,1,2,6,57,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,133,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,146,        if (millisProvider == null) {,1,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,147,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0,0,0,1,2,2,0,1,2,5,74,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,149,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,150,        cMillisProvider = millisProvider;,2,0,0,0,0,0,0,0,1,2,33,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,151,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,159,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,160,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,161,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0,0,0,2,4,1,2,1,2,6,70,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,163,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,176,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,177,            return DateTimeUtils.currentTimeMillis();,0,0,0,1,2,1,2,0,0,4,41,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,179,        return instant.getMillis();,0,0,0,1,2,1,2,0,0,4,27,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,194,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,195,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,197,        Chronology chrono = instant.getChronology();,1,0,0,1,2,0,2,1,0,5,44,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,198,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,199,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,201,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,217,        Chronology chrono = null;,1,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,218,        if (start != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,219,            chrono = start.getChronology();,1,0,0,1,2,0,2,0,1,5,31,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,220,        } else if (end != null) {,1,1,0,1,4,2,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,221,            chrono = end.getChronology();,1,0,0,1,2,0,2,0,1,5,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,223,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,224,            chrono = ISOChronology.getInstance();,1,0,0,1,2,0,2,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,226,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,241,        if (interval == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,242,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,244,        Chronology chrono = interval.getChronology();,1,0,0,1,2,0,2,1,0,5,45,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,245,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,246,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,248,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,264,        if (interval == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,265,            long now = DateTimeUtils.currentTimeMillis();,1,0,0,1,2,1,2,0,0,5,45,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,266,"            interval = new Interval(now, now);",3,0,0,0,2,1,0,1,2,5,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,268,        return interval;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,283,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,299,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,300,            return DateTimeZone.getDefault();,0,0,0,1,2,1,2,0,0,4,33,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,302,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,316,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,317,            return PeriodType.standard();,0,0,0,1,2,1,2,0,0,4,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,319,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,333,        if (duration == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,334,            return 0L;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,336,        return duration.getMillis();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,364,        if (partial == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,365,"            throw new IllegalArgumentException(""Partial must not be null"");",0,0,0,1,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,367,        DurationFieldType lastType = null;,1,0,0,0,0,0,0,1,0,2,34,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,368,        for (int i = 0; i < partial.size(); i++) {,3,1,0,2,5,2,2,0,1,7,42,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,369,            DateTimeField loopField = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,46,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,370,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,371,                if (loopField.getRangeDurationField().getType() != lastType) {,1,1,0,2,7,1,3,0,0,6,62,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,372,                    return false;,0,0,0,0,0,1,0,0,1,2,13,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,375,            lastType = loopField.getDurationField().getType();,1,0,0,1,4,0,3,0,1,5,50,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,377,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,395,"            Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});",1,0,0,0,6,3,1,4,1,6,93,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,396,"            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});",1,0,0,1,8,2,2,2,0,6,70,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,397,        } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,398,            return new DateFormatSymbols(locale);,1,0,0,1,2,2,0,1,1,6,37,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,427,        return cZoneNames;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,439,"        cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));",2,0,0,1,4,1,2,3,2,7,83,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,440,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,466,        double epochDay = epochMillis / 86400000d;,2,1,0,0,0,1,0,0,0,3,42,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,467,        return epochDay + 2440587.5d;,1,1,0,0,0,1,0,0,0,3,29,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,486,        return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);,0,1,0,2,6,2,4,0,1,6,58,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,499,        double epochDay = julianDay - 2440587.5d;,2,1,0,0,0,1,0,0,0,3,41,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,500,        return (long) (epochDay * 86400000d);,1,1,0,1,4,2,0,0,0,5,37,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,1,6,1,6,0,2,5,79,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,109,        iDateTimeFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,110,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,111,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,112,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,113,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,114,        iLowerBound = lowerBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,115,        iUpperBound = upperBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,116,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,117,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0,0,0,1,6,1,5,0,2,5,70,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,130,        iDateTimeFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,131,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,132,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,133,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,134,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,135,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,136,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,137,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,138,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,1,6,1,6,0,2,5,79,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,151,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,152,        iDurationFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,153,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,154,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,155,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,156,        iLowerBound = lowerBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,157,        iUpperBound = upperBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,158,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,159,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0,0,0,0,4,1,5,0,2,4,69,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,172,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,173,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,174,        iFieldName = fieldName;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,175,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,176,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,177,        iLowerBound = lowerBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,178,        iUpperBound = upperBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,179,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,189,"        super(createMessage(fieldType.getName(), value));",0,0,0,1,6,1,4,0,2,5,49,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,190,        iDateTimeFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,191,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,192,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,193,        iStringValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,194,        iNumberValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,195,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,196,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,197,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,198,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,207,"        super(createMessage(fieldType.getName(), value));",0,0,0,1,6,1,4,0,2,5,49,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,208,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,209,        iDurationFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,210,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,211,        iStringValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,212,        iNumberValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,213,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,214,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,215,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,216,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,225,"        super(createMessage(fieldName, value));",0,0,0,0,4,1,3,0,2,4,39,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,226,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,227,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,228,        iFieldName = fieldName;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,229,        iStringValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,230,        iNumberValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,231,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,232,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,233,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,234,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,41,        StringBuilder buf = new StringBuilder(),1,0,0,1,2,1,0,2,1,6,39,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,44,        if (lowerBound == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,45,            if (upperBound == null) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,46,"                buf.append(""is not supported"");",0,0,0,1,2,0,2,0,1,4,31,9,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,48,"                buf.append(""must not be larger than "").append(upperBound);",0,0,0,1,4,0,4,0,1,4,58,9,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,50,        } else if (upperBound == null) {,1,1,0,1,4,2,0,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0,0,0,1,4,0,4,0,1,4,59,8,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,53,"            buf.append(""must be in the range ["")",0,0,0,1,3,0,2,0,1,4,36,12,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,59,        if (explain != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,60,"            buf.append("": "").append(explain);",0,0,0,1,4,0,4,0,1,4,33,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,63,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",1,0,0,1,4,1,1,2,2,7,55,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,76,        if (value == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,77,"            buf.append(""null"");",0,0,0,1,2,0,2,0,1,4,19,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,79,"            buf.append('""');",0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,80,            buf.append(value);,0,0,0,1,2,0,3,0,0,3,18,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,81,"            buf.append('""');",0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0,0,0,1,8,1,6,0,3,5,77,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,86,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,243,        return iDateTimeFieldType;,1,0,0,0,0,1,0,0,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,252,        return iDurationFieldType;,1,0,0,0,0,1,0,0,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,261,        return iFieldName;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,270,        return iNumberValue;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,279,        return iStringValue;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,288,        String value = iStringValue;,2,0,0,0,0,0,0,1,0,2,28,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,289,        if (value == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,290,            value = String.valueOf(iNumberValue);,1,0,0,1,2,0,3,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,292,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,301,        return iLowerBound;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,310,        return iUpperBound;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,314,        return iMessage;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,323,        if (iMessage == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,324,            iMessage = message;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,325,        } else if (message != null) {,1,1,0,1,4,2,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,326,"            iMessage = message + "": "" + iMessage;",3,1,0,0,0,0,0,0,2,3,37,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,9,328,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,613,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,616,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,102,"        long instant = year().set(0, year);",1,0,0,1,4,1,3,0,1,6,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,103,"        instant = monthOfYear().set(instant, monthOfYear);",1,0,0,1,4,0,4,0,2,5,50,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",1,0,0,1,4,0,4,0,2,5,48,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,105,"        return millisOfDay().set(instant, millisOfDay);",0,0,0,1,4,1,4,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,132,"        long instant = year().set(0, year);",1,0,0,1,4,1,3,0,1,6,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,133,"        instant = monthOfYear().set(instant, monthOfYear);",1,0,0,1,4,0,4,0,2,5,50,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",1,0,0,1,4,0,4,0,2,5,48,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,135,"        instant = hourOfDay().set(instant, hourOfDay);",1,0,0,1,4,0,4,0,2,5,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",1,0,0,1,4,0,4,0,2,5,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",1,0,0,1,4,0,4,0,2,5,56,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,138,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,1,4,1,4,0,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,163,"        instant = hourOfDay().set(instant, hourOfDay);",1,0,0,1,4,0,4,0,2,5,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",1,0,0,1,4,0,4,0,2,5,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",1,0,0,1,4,0,4,0,2,5,56,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,166,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,1,4,1,4,0,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,183,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,184,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,185,            int value = values[i];,1,0,1,0,2,1,0,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,186,            DateTimeField field = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,187,            if (value < field.getMinimumValue()) {,1,1,0,2,5,1,2,0,0,6,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,188,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,192,            if (value > field.getMaximumValue()) {,1,1,0,2,5,1,2,0,0,6,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,193,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,199,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,200,            int value = values[i];,1,0,1,0,2,1,0,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,201,            DateTimeField field = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,202,"            if (value < field.getMinimumValue(partial, values)) {",1,1,0,0,5,1,4,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,203,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,207,"            if (value > field.getMaximumValue(partial, values)) {",1,1,0,0,5,1,4,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,208,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,213,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,223,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,224,        int[] values = new int[size];,1,0,1,0,4,3,0,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,225,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0,0,1,1,8,1,6,0,1,6,64,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,228,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,57,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",1,0,0,1,8,1,9,0,1,6,83,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,242,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,255,        int size = period.size();,1,0,0,1,2,1,2,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,256,        int[] values = new int[size];,1,0,1,0,4,3,0,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,257,        if (startInstant != endInstant) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,258,            for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,259,                DurationField field = period.getFieldType(i).getField(this);,1,0,0,1,4,1,4,1,0,6,60,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,260,"                int value = field.getDifference(endInstant, startInstant);",1,0,0,0,2,1,4,0,0,4,58,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,261,"                startInstant = field.add(startInstant, value);",1,0,0,0,2,0,4,0,1,4,46,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,262,                values[i] = value;,1,0,1,0,2,0,0,0,1,4,18,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,265,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,276,        int size = period.size();,1,0,0,1,2,1,2,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,277,        int[] values = new int[size];,1,0,1,0,4,3,0,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,278,        if (duration != 0) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,279,            long current = 0;,1,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,280,            for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,281,                DurationField field = period.getFieldType(i).getField(this);,1,0,0,1,4,1,4,1,0,6,60,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,282,                if (field.isPrecise()) {,0,0,0,2,5,1,2,0,0,4,24,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,283,"                    int value = field.getDifference(duration, current);",1,0,0,0,2,1,4,0,0,4,51,11,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,284,"                    current = field.add(current, value);",1,0,0,0,2,0,4,0,1,4,36,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,285,                    values[i] = value;,1,0,1,0,2,0,0,0,1,4,18,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,289,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,301,        if (scalar != 0 && period != null) {,2,3,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,56,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),1,0,0,1,4,3,3,0,0,5,82,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,304,                if (value != 0) {,1,1,0,1,3,1,0,0,0,5,17,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",3,1,0,1,6,1,6,0,1,7,77,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,309,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,322,        if (duration == 0 || scalar == 0) {,2,3,0,1,3,1,0,0,0,5,35,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,323,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",1,0,0,0,2,1,4,0,0,4,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,326,"        return FieldUtils.safeAdd(instant, add);",0,0,0,0,2,1,4,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0,0,0,2,4,1,4,0,0,4,72,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0,0,0,1,6,1,5,0,1,5,90,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0,0,0,1,6,1,5,0,1,5,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0,0,0,2,4,1,4,0,0,4,73,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0,0,0,1,6,1,5,0,1,5,91,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0,0,0,2,4,1,4,0,0,4,73,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0,0,0,1,6,1,5,0,1,5,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0,0,0,2,4,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0,0,0,1,6,1,5,0,1,5,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0,0,0,1,6,1,5,0,1,5,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0,0,0,2,4,1,4,0,0,4,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0,0,0,1,6,1,5,0,1,5,93,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0,0,0,1,6,1,5,0,1,5,90,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0,0,0,2,4,1,4,0,0,4,70,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0,0,0,1,6,1,5,0,1,5,83,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0,0,0,1,6,1,5,0,1,5,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0,0,0,1,6,1,5,0,1,5,83,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0,0,0,2,4,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0,0,0,1,6,1,5,0,1,5,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0,0,0,2,4,1,4,0,0,4,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0,0,0,1,6,1,5,0,1,5,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0,0,0,1,6,1,5,0,1,5,96,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0,0,0,2,4,1,4,0,0,4,72,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0,0,0,1,6,1,5,0,1,5,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0,0,0,2,4,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0,0,0,1,6,1,5,0,1,5,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0,0,0,1,6,1,5,0,1,5,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0,0,0,2,4,1,4,0,0,4,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0,0,0,1,6,1,5,0,1,5,91,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,4,0,0,4,70,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,9,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0,0,0,1,6,1,5,0,1,5,77,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,692,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,146,                            // ignored,0,0,0,0,0,0,0,0,0,0,10,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,150,                        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,152,                        // ignored,0,0,0,0,0,0,0,0,0,0,10,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,156,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,177,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,180,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,206,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,209,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,218,            } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,224,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,238,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,259,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,270,"            throw new IllegalArgumentException(""Offset is too large"");",0,0,0,1,2,2,0,1,2,5,58,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,271,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,303,            return getDefault();,0,0,0,1,2,1,1,0,1,5,20,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,304,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,306,"        if (id.equals(""UTC"")) {",0,0,0,2,5,1,2,0,1,5,23,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,307,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,308,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,312,        String convId = getConvertedId(id);,1,0,0,1,2,0,2,1,1,6,35,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,313,        if (convId != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,314,            dtz = cProvider.getZone(convId);,1,0,0,1,2,0,3,0,1,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,315,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,317,            dtz = cProvider.getZone(id);,1,0,0,1,2,0,3,0,1,5,28,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,318,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,320,            return dtz;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,321,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,325,            convId = zone.getID();,1,0,0,1,2,0,2,0,1,5,22,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,326,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0,1,0,2,7,1,4,0,2,6,61,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,327,                convId = convId.substring(3);,1,0,0,1,2,0,2,0,1,5,29,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,328,                int offset = parseOffset(convId);,1,0,0,1,2,1,2,0,1,6,33,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,329,                if (offset == 0L) {,1,1,0,1,3,1,0,0,0,5,19,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,330,                    return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,331,                } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,333,"                    return fixedOffsetZone(convId, offset);",0,0,0,0,2,1,3,0,1,4,39,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,334,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,338,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,351,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,375,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,388,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,402,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,403,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0,0,0,2,4,1,2,1,2,6,71,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,404,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,406,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,407,,0,0,0,0,0,0,0,0,0,0,0,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,421,"                (""The provider doesn't have any available ids"");",0,0,0,1,2,0,0,0,1,3,48,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,425,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,428,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,451,                } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,455,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,452,                    Thread thread = Thread.currentThread();,1,0,0,1,2,0,2,1,0,5,39,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,453,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0,0,0,1,4,0,5,0,0,3,54,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,454,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,457,            // ignored,0,0,0,0,0,0,0,0,0,0,10,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,464,                Thread thread = Thread.currentThread();,1,0,0,1,2,0,2,1,0,5,39,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,465,"                thread.getThreadGroup().uncaughtException(thread, ex);",0,0,0,1,4,0,5,0,0,3,54,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,466,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,471,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,487,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,501,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,502,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0,0,0,2,4,1,2,1,2,6,75,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,503,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,505,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,506,,0,0,0,0,0,0,0,0,0,0,0,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,535,                } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,539,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,536,                    Thread thread = Thread.currentThread();,1,0,0,1,2,0,2,1,0,5,39,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,537,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0,0,0,1,4,0,5,0,0,3,54,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,538,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,541,            // ignore,0,0,0,0,0,0,0,0,0,0,9,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,560,        if (map == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,561,            // Backwards compatibility with TimeZone.,0,0,0,0,0,0,0,0,0,0,41,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,563,"            map.put(""GMT"", ""UTC"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,564,"            map.put(""WET"", ""WET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,565,"            map.put(""CET"", ""CET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,566,"            map.put(""MET"", ""CET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,567,"            map.put(""ECT"", ""CET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,568,"            map.put(""EET"", ""EET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,569,"            map.put(""MIT"", ""Pacific/Apia"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,570,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0,0,0,0,2,0,2,0,2,3,58,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,571,"            map.put(""AST"", ""America/Anchorage"");",0,0,0,0,2,0,2,0,2,3,36,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,572,"            map.put(""PST"", ""America/Los_Angeles"");",0,0,0,0,2,0,2,0,2,3,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,573,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",0,0,0,0,2,0,2,0,2,3,56,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,574,"            map.put(""PNT"", ""America/Phoenix"");",0,0,0,0,2,0,2,0,2,3,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,575,"            map.put(""CST"", ""America/Chicago"");",0,0,0,0,2,0,2,0,2,3,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,576,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0,0,0,0,2,0,2,0,2,3,58,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,577,"            map.put(""IET"", ""America/Indiana/Indianapolis"");",0,0,0,0,2,0,2,0,2,3,47,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,578,"            map.put(""PRT"", ""America/Puerto_Rico"");",0,0,0,0,2,0,2,0,2,3,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,579,"            map.put(""CNT"", ""America/St_Johns"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,580,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");",0,0,0,0,2,0,2,0,2,3,49,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,581,"            map.put(""BET"", ""America/Sao_Paulo"");",0,0,0,0,2,0,2,0,2,3,36,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,582,"            map.put(""ART"", ""Africa/Cairo"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,583,"            map.put(""CAT"", ""Africa/Harare"");",0,0,0,0,2,0,2,0,2,3,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,584,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0,0,0,0,2,0,2,0,2,3,37,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,585,"            map.put(""NET"", ""Asia/Yerevan"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,586,"            map.put(""PLT"", ""Asia/Karachi"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,587,"            map.put(""IST"", ""Asia/Kolkata"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,588,"            map.put(""BST"", ""Asia/Dhaka"");",0,0,0,0,2,0,2,0,2,3,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,589,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,590,"            map.put(""CTT"", ""Asia/Shanghai"");",0,0,0,0,2,0,2,0,2,3,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,591,"            map.put(""JST"", ""Asia/Tokyo"");",0,0,0,0,2,0,2,0,2,3,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,592,"            map.put(""ACT"", ""Australia/Darwin"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,593,"            map.put(""AET"", ""Australia/Sydney"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,594,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0,0,0,0,2,0,2,0,2,3,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,595,"            map.put(""NST"", ""Pacific/Auckland"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,596,            cZoneIdConversion = map;,2,0,0,0,0,0,0,0,1,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,597,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,599,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,652,        buf.append(':');,0,0,0,1,2,0,2,0,1,4,16,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,653,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0,0,0,0,2,0,4,0,0,2,49,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,654,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,655,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,656,            return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,657,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,660,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0,0,0,0,2,0,4,0,0,2,48,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,661,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,662,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,730,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,745,            locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,746,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,748,        if (nameKey == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,749,            return iID;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,750,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,752,        if (name != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,753,            return name;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,754,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,756,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,770,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,785,            locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,786,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,788,        if (nameKey == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,789,            return iID;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,790,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,792,        if (name != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,793,            return name;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,794,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,796,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,814,            return getOffset(DateTimeUtils.currentTimeMillis());,0,0,0,2,4,1,3,0,1,5,52,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,815,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,817,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,845,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,883,        // adjust instantLocal using the estimate and recalc the offset,0,0,0,0,0,0,0,0,0,0,63,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,885,        final int offsetAdjusted = getOffset(instantAdjusted);,1,0,0,1,2,2,2,0,2,6,54,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,886,"        // if the offsets differ, we must be near a DST boundary",0,0,0,0,0,1,0,0,0,1,56,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,888,            // we need to ensure that time is always after the DST gap,0,0,0,0,0,0,0,0,0,0,58,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,891,                // if we just return offsetAdjusted then the time is pushed,0,0,0,0,0,2,0,0,0,1,59,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,895,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,3,1,0,1,2,1,1,0,1,7,66,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,896,                if (nextLocal != nextAdjusted) {,2,1,0,1,3,1,0,0,0,5,32,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,897,                    return offsetLocal;,1,0,0,0,0,1,0,0,0,2,19,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,898,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,900,        } else if (offsetLocal >= 0) {,1,1,0,1,4,2,0,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,901,            long prev = previousTransition(instantAdjusted);,1,0,0,1,2,1,2,0,1,6,48,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,902,            if (prev < instantAdjusted) {,2,1,0,1,3,1,0,0,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,903,                int offsetPrev = getOffset(prev);,1,0,0,1,2,1,2,0,1,6,33,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,904,                int diff = offsetPrev - offsetLocal;,3,1,0,0,0,1,0,0,0,3,36,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,905,                if (instantAdjusted - prev <= diff) {,3,2,0,1,3,1,0,0,0,5,37,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,906,                    return offsetPrev;,1,0,0,0,0,1,0,0,0,2,18,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,907,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,911,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,925,        long instantLocal = instantUTC + offset;,3,1,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,926,"        // If there is a sign change, but the two values have the same sign...",0,0,0,0,0,0,0,0,0,0,70,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,928,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,73,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,929,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,931,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,952,        long instantUTC = instantLocal - offsetOriginal;,3,1,0,0,0,1,0,0,0,3,48,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,953,        int offsetLocalFromOriginal = getOffset(instantUTC);,1,0,0,1,2,1,2,0,1,6,52,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,954,        if (offsetLocalFromOriginal == offsetOriginal) {,2,1,0,1,3,1,0,0,0,5,48,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,955,            return instantUTC;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,956,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,958,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,975,        // adjust instantLocal using the estimate and recalc the offset,0,0,0,0,0,0,0,0,0,0,63,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,977,"        // if the offsets differ, we must be near a DST boundary",0,0,0,0,0,1,0,0,0,1,56,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,979,            // if strict then always check if in DST gap,0,0,0,0,0,2,0,0,0,1,44,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,983,                // determine if we are in the DST gap,0,0,0,0,0,1,0,0,0,1,37,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,985,                if (nextLocal == (instantLocal - offsetLocal)) {,3,2,0,2,5,1,0,0,0,5,48,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,986,                    nextLocal = Long.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,27,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,987,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,989,                if (nextAdjusted == (instantLocal - offset)) {,3,2,0,2,5,1,0,0,0,5,46,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,990,                    nextAdjusted = Long.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,30,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,991,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,993,                    // yes we are in the DST gap,0,0,0,0,0,0,0,0,0,0,28,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,995,                        // DST gap is not acceptable,0,0,0,0,0,0,0,0,0,0,28,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,997,                    } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1002,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1008,"        // If there is a sign change, but the two values have different signs...",0,0,0,0,0,0,0,0,0,0,72,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1010,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,78,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1011,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1013,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1027,            newZone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,36,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1028,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1030,            return oldInstant;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1031,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1033,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",0,0,0,0,2,1,4,0,1,4,66,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1034,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1144,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1145,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1148,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1149,        } catch (IllegalInstantException ex) {,1,0,0,1,4,1,0,1,0,5,38,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1150,            return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1151,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1166,        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;,4,2,0,0,0,1,0,0,0,3,68,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1167,        long offsetBefore = getOffset(instantBefore);,1,0,0,1,2,1,2,0,1,6,45,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1168,        long offsetAfter = getOffset(instantAfter);,1,0,0,1,2,1,2,0,1,6,43,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1169,        if (offsetBefore <= offsetAfter) {,2,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1170,"            return instant;  // not an overlap (less than is a gap, equal is normal case)",1,0,0,0,2,2,0,0,0,3,77,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1171,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1175,        long transition = nextTransition(instantBefore);,1,0,0,1,2,1,2,0,1,6,48,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1176,        long overlapStart = transition - diff;,3,1,0,0,0,1,0,0,0,3,38,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1177,        long overlapEnd = transition + diff;,3,1,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1178,        if (instant < overlapStart || instant >= overlapEnd) {,4,3,0,1,3,1,0,0,0,5,54,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1179,          return instant;  // not an overlap,1,0,0,0,0,1,0,0,0,2,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1180,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1184,        if (afterStart >= diff) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1185,          // currently in later offset,0,0,0,0,0,0,0,0,0,0,28,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1187,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1190,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1232,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1249,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1257,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1267,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeField,9,33,public abstract class DateTimeField {,1,0,0,0,1,3,0,0,2,4,37,1,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",3,0,0,0,3,1,0,2,1,5,87,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,83,        if (type == null || durationField == null) {,2,3,0,1,3,1,0,0,0,5,44,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,84,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,86,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,87,        iDurationField = durationField;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,88,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,55,        if (cCache == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",1,0,0,1,2,1,0,3,2,6,69,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,57,            field = null;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,59,            field = cCache.get(type);,1,0,0,1,2,0,3,0,1,5,25,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,60,            if (field != null && field.getDurationField() != durationField) {,2,3,0,2,5,1,2,0,0,6,65,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,61,                field = null;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,64,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,65,"            field = new UnsupportedDateTimeField(type, durationField);",3,0,0,0,2,1,0,1,2,5,58,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,66,"            cCache.put(type, field);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,68,        return field;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,95,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,99,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,108,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,117,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,126,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,135,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,144,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,153,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,162,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,171,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,180,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,189,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,198,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,207,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,216,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,225,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,234,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,243,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,252,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,261,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,270,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,75,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,81,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,297,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,306,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,315,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,324,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,333,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,343,        return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,352,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,361,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,370,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,379,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,388,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,397,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,406,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,415,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,424,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,433,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,442,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,451,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,460,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,469,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,478,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,487,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,496,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,505,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,514,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,523,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,533,"        return ""UnsupportedDateTimeField"";",0,0,0,0,0,1,0,0,1,2,34,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,540,"        return getInstance(iType, iDurationField);",0,0,0,0,2,1,3,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,9,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",1,1,0,1,2,2,0,1,2,7,74,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,9,30,public abstract class DurationField implements Comparable<DurationField> {,1,0,0,0,1,4,0,2,2,5,74,1,0.0,0,0
defect4j,time,org/joda/time/DurationField,9,209,        if (value == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,9,210,"            return subtract(instant, (long) value);",1,0,0,1,4,2,2,0,1,6,39,6,0.0,0,0
defect4j,time,org/joda/time/DurationField,9,212,"        return add(instant, -value);",1,0,0,0,2,1,2,0,2,5,28,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,9,224,        if (value == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,9,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/DurationField,9,227,"        return add(instant, -value);",1,0,0,0,2,1,2,0,2,5,28,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,70,    private UnsupportedDurationField(DurationFieldType type) {,2,0,0,1,3,1,0,1,1,6,58,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,71,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,49,        if (cCache == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",1,0,0,1,2,1,0,3,2,6,69,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,51,            field = null;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,53,            field = cCache.get(type);,1,0,0,1,2,0,3,0,1,5,25,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,55,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,56,            field = new UnsupportedDurationField(type);,2,0,0,1,2,1,0,1,2,6,43,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,57,"            cCache.put(type, field);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,59,        return field;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,79,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,83,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,92,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,101,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,110,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,119,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,128,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,137,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,146,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,155,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,164,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,173,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,182,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,191,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,200,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,209,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,218,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,227,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,238,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,239,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,240,        } else if (obj instanceof UnsupportedDurationField) {,1,0,0,1,4,3,0,1,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,241,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,2,0,0,1,2,0,0,2,0,4,64,7,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,242,            if (other.getName() == null) {,0,1,0,2,5,1,2,0,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,243,                return (getName() == null);,0,1,0,2,4,1,1,0,1,6,27,10,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,245,            return (other.getName().equals(getName()));,0,0,0,3,8,1,4,0,1,5,43,9,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,247,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,256,        return getName().hashCode();,0,0,0,1,4,1,2,0,1,5,28,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,265,"        return ""UnsupportedDurationField["" + getName() + ']';",0,1,0,1,4,1,1,0,3,6,53,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,272,        return getInstance(iType);,0,0,0,1,2,1,2,0,1,5,26,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",1,1,0,1,2,2,0,1,2,7,74,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,9,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,1,0,0,0,1,5,0,2,2,5,91,1,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,9,53,        super(message);,1,0,0,1,2,1,0,0,1,5,15,3,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,9,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,9,63,"        super(createMessage(instantLocal, zoneId));",0,0,0,0,4,1,3,0,2,4,43,3,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,9,64,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,9,67,"        String localDateTime = DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal));",2,0,0,2,6,1,3,2,2,7,111,4,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,9,68,"        String zone = (zoneId != null ? "" ("" + zoneId + "")"" : """");",3,2,0,2,4,0,0,1,3,6,58,4,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,9,69,"        return ""Illegal instant due to time zone offset transition (daylight savings time 'gap'): "" + localDateTime + zone;",2,1,0,1,2,1,0,0,1,6,115,4,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,9,80,        if (ex instanceof IllegalInstantException) {,1,0,0,1,3,2,0,1,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,9,81,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,9,83,        while (ex.getCause() != null && ex.getCause() != ex) {,1,3,0,2,7,1,4,0,0,6,54,4,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,9,84,            return isIllegalInstant(ex.getCause());,0,0,0,2,4,1,3,0,1,5,39,6,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,9,86,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,36,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,37,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,49,        if (value == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");",0,0,0,1,2,2,0,1,2,5,69,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,52,        return -value;,1,0,0,0,0,1,0,0,1,3,14,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,67,            throw new ArithmeticException,0,0,0,0,0,2,0,1,1,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,82,        long sum = val1 + val2;,3,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,4,5,0,2,7,1,0,0,0,5,45,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,85,            throw new ArithmeticException,0,0,0,0,0,2,0,1,1,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,88,        return sum;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,100,        long diff = val1 - val2;,3,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,4,5,0,2,7,1,0,0,0,5,45,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,103,            throw new ArithmeticException,0,0,0,0,0,2,0,1,1,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,106,        return diff;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,121,"          throw new ArithmeticException(""Multiplication overflows an int: "" + val1 + "" * "" + val2);",2,1,0,1,2,3,0,1,3,7,89,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,136,        switch (val2) {,1,0,0,1,3,1,0,0,0,4,15,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,138,                if (val1 == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,139,"                    throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",2,1,0,1,2,3,0,1,3,7,89,7,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,141,                return -val1;,1,0,0,0,0,1,0,0,1,3,13,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,143,                return 0L;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,145,                return val1;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,147,        long total = val1 * val2;,3,1,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,148,        if (total / val2 != val1) {,3,2,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,149,"          throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",2,1,0,1,2,3,0,1,3,7,89,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,151,        return total;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,163,        if (val2 == 1) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,164,            return val1;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,166,        if (val1 == 1) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,167,            return val2;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,169,        if (val1 == 0 || val2 == 0) {,2,3,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,170,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,172,        long total = val1 * val2;,3,1,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,173,        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {,11,10,0,1,3,1,0,0,2,6,107,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,174,"            throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",2,1,0,1,2,3,0,1,3,7,89,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,176,        return total;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,187,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,6,3,0,1,3,1,0,0,0,5,63,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,188,            return (int) value;,1,0,0,1,2,2,0,0,0,4,19,7,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,190,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);",1,1,0,1,2,3,0,1,2,7,70,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,202,"        long val = FieldUtils.safeMultiply(val1, val2);",1,0,0,0,2,1,4,0,0,4,47,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,203,        return FieldUtils.safeToInt(val);,0,0,0,1,2,1,3,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,217,        if ((value < lowerBound) || (value > upperBound)) {,4,3,0,2,7,1,0,0,0,5,51,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,218,            throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,222,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,235,        if ((value < lowerBound) || (value > upperBound)) {,4,3,0,2,7,1,0,0,0,5,51,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,236,            throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,240,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,252,        if ((value < lowerBound) || (value > upperBound)) {,4,3,0,2,7,1,0,0,0,5,51,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,253,            throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,257,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,276,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",2,1,0,0,2,1,3,0,1,6,69,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,292,        if (minValue >= maxValue) {,2,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,293,"            throw new IllegalArgumentException(""MIN > MAX"");",0,0,0,1,2,2,0,1,2,5,48,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,296,        int wrapRange = maxValue - minValue + 1;,3,2,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,297,        value -= minValue;,2,0,0,0,0,0,0,0,1,2,18,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,299,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,300,            return (value % wrapRange) + minValue;,3,2,0,1,2,1,0,0,0,5,38,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,303,        int remByRange = (-value) % wrapRange;,3,1,0,1,2,1,0,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,305,        if (remByRange == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,306,            return 0 + minValue;,1,1,0,0,0,1,0,0,0,3,20,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,308,        return (wrapRange - remByRange) + minValue;,3,2,0,1,2,1,0,0,0,5,43,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,321,        if (object1 == object2) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,322,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,324,        if (object1 == null || object2 == null) {,2,3,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,325,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/FieldUtils,9,327,        return object1.equals(object2);,0,0,0,1,2,1,3,0,0,4,31,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,530,            return System.currentTimeMillis();,0,0,0,1,2,1,2,0,0,4,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,545,        FixedMillisProvider(long fixedMillis) {,2,0,0,1,3,1,0,0,0,4,39,3,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,546,            iMillis = fixedMillis;,2,0,0,0,0,0,0,0,1,2,22,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,547,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,9,554,            return iMillis;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,216,        Stub(DateTimeZone zone) {,2,0,0,1,3,0,0,1,0,4,25,3,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,217,            iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,218,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,221,            return ISOChronology.getInstance(iZone);,0,0,0,1,2,1,3,0,0,4,40,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,225,            out.writeObject(iZone);,0,0,0,1,2,0,3,0,0,3,23,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,226,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,231,            iZone = (DateTimeZone)in.readObject();,1,0,0,1,4,0,2,1,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,232,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,436,        Fields() {,1,0,0,1,3,0,0,0,0,3,10,3,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,437,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,445,                if (isSupported(f = chrono.millis())) {,1,0,0,3,7,1,3,0,2,6,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,446,                    millis = f;,2,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,448,                if (isSupported(f = chrono.seconds())) {,1,0,0,3,7,1,3,0,2,6,40,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,449,                    seconds = f;,2,0,0,0,0,0,0,0,1,2,12,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,451,                if (isSupported(f = chrono.minutes())) {,1,0,0,3,7,1,3,0,2,6,40,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,452,                    minutes = f;,2,0,0,0,0,0,0,0,1,2,12,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,454,                if (isSupported(f = chrono.hours())) {,1,0,0,3,7,1,3,0,2,6,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,455,                    hours = f;,2,0,0,0,0,0,0,0,1,2,10,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,457,                if (isSupported(f = chrono.halfdays())) {,1,0,0,3,7,1,3,0,2,6,41,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,458,                    halfdays = f;,2,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,460,                if (isSupported(f = chrono.days())) {,1,0,0,3,7,1,3,0,2,6,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,461,                    days = f;,2,0,0,0,0,0,0,0,1,2,9,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,463,                if (isSupported(f = chrono.weeks())) {,1,0,0,3,7,1,3,0,2,6,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,464,                    weeks = f;,2,0,0,0,0,0,0,0,1,2,10,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,466,                if (isSupported(f = chrono.weekyears())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,467,                    weekyears = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,469,                if (isSupported(f = chrono.months())) {,1,0,0,3,7,1,3,0,2,6,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,470,                    months = f;,2,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,472,                if (isSupported(f = chrono.years())) {,1,0,0,3,7,1,3,0,2,6,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,473,                    years = f;,2,0,0,0,0,0,0,0,1,2,10,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,475,                if (isSupported(f = chrono.centuries())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,476,                    centuries = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,478,                if (isSupported(f = chrono.eras())) {,1,0,0,3,7,1,3,0,2,6,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,479,                    eras = f;,2,0,0,0,0,0,0,0,1,2,9,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,485,                if (isSupported(f = chrono.millisOfSecond())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,486,                    millisOfSecond = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,488,                if (isSupported(f = chrono.millisOfDay())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,489,                    millisOfDay = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,491,                if (isSupported(f = chrono.secondOfMinute())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,492,                    secondOfMinute = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,494,                if (isSupported(f = chrono.secondOfDay())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,495,                    secondOfDay = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,497,                if (isSupported(f = chrono.minuteOfHour())) {,1,0,0,3,7,1,3,0,2,6,45,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,498,                    minuteOfHour = f;,2,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,500,                if (isSupported(f = chrono.minuteOfDay())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,501,                    minuteOfDay = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,503,                if (isSupported(f = chrono.hourOfDay())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,504,                    hourOfDay = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,506,                if (isSupported(f = chrono.clockhourOfDay())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,507,                    clockhourOfDay = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,509,                if (isSupported(f = chrono.hourOfHalfday())) {,1,0,0,3,7,1,3,0,2,6,46,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,510,                    hourOfHalfday = f;,2,0,0,0,0,0,0,0,1,2,18,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,1,0,0,3,7,1,3,0,2,6,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,513,                    clockhourOfHalfday = f;,2,0,0,0,0,0,0,0,1,2,23,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,515,                if (isSupported(f = chrono.halfdayOfDay())) {,1,0,0,3,7,1,3,0,2,6,45,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,516,                    halfdayOfDay = f;,2,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,518,                if (isSupported(f = chrono.dayOfWeek())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,519,                    dayOfWeek = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,521,                if (isSupported(f = chrono.dayOfMonth())) {,1,0,0,3,7,1,3,0,2,6,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,522,                    dayOfMonth = f;,2,0,0,0,0,0,0,0,1,2,15,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,524,                if (isSupported(f = chrono.dayOfYear())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,525,                    dayOfYear = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,528,                    weekOfWeekyear = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,530,                if (isSupported(f = chrono.weekyear())) {,1,0,0,3,7,1,3,0,2,6,41,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,531,                    weekyear = f;,2,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,1,0,0,3,7,1,3,0,2,6,50,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,534,                    weekyearOfCentury = f;,2,0,0,0,0,0,0,0,1,2,22,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,536,                if (isSupported(f = chrono.monthOfYear())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,537,                    monthOfYear = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,539,                if (isSupported(f = chrono.year())) {,1,0,0,3,7,1,3,0,2,6,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,540,                    year = f;,2,0,0,0,0,0,0,0,1,2,9,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,542,                if (isSupported(f = chrono.yearOfEra())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,543,                    yearOfEra = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,545,                if (isSupported(f = chrono.yearOfCentury())) {,1,0,0,3,7,1,3,0,2,6,46,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,546,                    yearOfCentury = f;,2,0,0,0,0,0,0,0,1,2,18,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,548,                if (isSupported(f = chrono.centuryOfEra())) {,1,0,0,3,7,1,3,0,2,6,45,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,549,                    centuryOfEra = f;,2,0,0,0,0,0,0,0,1,2,17,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,551,                if (isSupported(f = chrono.era())) {,1,0,0,3,7,1,3,0,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,552,                    era = f;,2,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,555,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,558,            return field == null ? false : field.isSupported();,1,1,0,1,2,1,2,0,1,7,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,562,            return field == null ? false : field.isSupported();,1,1,0,1,2,1,2,0,1,7,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,99,"    protected AssembledChronology(Chronology base, Object param) {",3,0,0,0,3,1,0,2,1,5,62,2,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,100,        iBase = base;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,101,        iParam = param;,2,0,0,0,0,0,0,0,1,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,102,        setFields();,0,0,0,1,2,0,1,0,1,4,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,107,        if ((base = iBase) != null) {,2,1,0,2,5,1,0,0,1,6,29,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,108,            return base.getZone();,0,0,0,1,2,1,2,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,110,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,3,4,0,2,7,1,0,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0,0,0,0,2,1,6,0,0,3,74,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",5,0,0,0,2,2,0,0,0,3,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,3,4,0,2,7,1,0,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,5,0,0,3,60,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",4,0,0,0,1,2,0,0,0,3,61,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,3,4,0,2,7,1,0,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,148,            return base.getDateTimeMillis,0,0,0,0,0,1,2,0,0,2,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,151,        return super.getDateTimeMillis,1,0,0,0,0,2,0,0,0,2,30,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,156,        return iMillis;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,160,        return iMillisOfSecond;,1,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,164,        return iMillisOfDay;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,168,        return iSeconds;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,172,        return iSecondOfMinute;,1,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,176,        return iSecondOfDay;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,180,        return iMinutes;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,184,        return iMinuteOfHour;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,188,        return iMinuteOfDay;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,192,        return iHours;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,196,        return iHourOfDay;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,200,        return iClockhourOfDay;,1,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,204,        return iHalfdays;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,208,        return iHourOfHalfday;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,212,        return iClockhourOfHalfday;,1,0,0,0,0,1,0,0,0,2,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,216,        return iHalfdayOfDay;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,220,        return iDays;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,224,        return iDayOfWeek;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,228,        return iDayOfMonth;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,232,        return iDayOfYear;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,236,        return iWeeks;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,240,        return iWeekOfWeekyear;,1,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,244,        return iWeekyears;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,248,        return iWeekyear;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,252,        return iWeekyearOfCentury;,1,0,0,0,0,1,0,0,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,256,        return iMonths;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,260,        return iMonthOfYear;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,264,        return iYears;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,268,        return iYear;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,272,        return iYearOfEra;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,276,        return iYearOfCentury;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,280,        return iCenturies;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,284,        return iCenturyOfEra;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,288,        return iEras;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,292,        return iEra;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,308,        return iBase;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,315,        return iParam;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,319,        Fields fields = new Fields();,1,0,0,1,2,1,0,2,1,6,29,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,320,        if (iBase != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,321,            fields.copyFieldsFrom(iBase);,0,0,0,1,2,0,3,0,0,3,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,323,        assemble(fields);,0,0,0,1,2,0,2,0,1,4,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,6,1,0,1,4,1,0,0,2,6,65,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,6,1,0,1,4,1,0,0,2,6,66,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,6,1,0,1,4,1,0,0,2,6,66,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,6,1,0,1,4,1,0,0,2,6,64,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,6,1,0,1,4,1,0,0,2,6,67,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,332,            iDays      = (f = fields.days)      != null ? f : super.days();,6,1,0,1,4,1,0,0,2,6,63,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,6,1,0,1,4,1,0,0,2,6,64,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,6,1,0,1,4,1,0,0,2,6,68,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,6,1,0,1,4,1,0,0,2,6,65,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,336,            iYears     = (f = fields.years)     != null ? f : super.years();,6,1,0,1,4,1,0,0,2,6,64,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,6,1,0,1,4,1,0,0,2,6,68,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,6,1,0,1,4,1,0,0,2,6,63,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,6,1,0,1,4,1,0,0,2,6,91,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,6,1,0,1,4,1,0,0,2,6,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,6,1,0,1,4,1,0,0,2,6,91,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,6,1,0,1,4,1,0,0,2,6,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,6,1,0,1,4,1,0,0,2,6,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,6,1,0,1,4,1,0,0,2,6,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,6,1,0,1,4,1,0,0,2,6,86,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,6,1,0,1,4,1,0,0,2,6,91,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,6,1,0,1,4,1,0,0,2,6,90,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,6,1,0,1,4,1,0,0,2,6,95,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,6,1,0,1,4,1,0,0,2,6,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,6,1,0,1,4,1,0,0,2,6,86,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,6,1,0,1,4,1,0,0,2,6,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,6,1,0,1,4,1,0,0,2,6,86,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,6,1,0,1,4,1,0,0,2,6,91,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,6,1,0,1,4,1,0,0,2,6,85,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,6,1,0,1,4,1,0,0,2,6,94,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,6,1,0,1,4,1,0,0,2,6,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,361,            iYear               = (f = fields.year)               != null ? f : super.year();,6,1,0,1,4,1,0,0,2,6,81,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,6,1,0,1,4,1,0,0,2,6,86,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,6,1,0,1,4,1,0,0,2,6,90,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,6,1,0,1,4,1,0,0,2,6,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,365,            iEra                = (f = fields.era)                != null ? f : super.era();,6,1,0,1,4,1,0,0,2,6,80,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,369,        if (iBase == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,370,            flags = 0;,1,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,372,            flags = ,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,385,        iBaseFlags = flags;,2,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,386,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,389,        in.defaultReadObject();,0,0,0,1,2,0,2,0,0,3,23,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,390,        setFields();,0,0,0,1,2,0,1,0,1,4,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,9,391,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,122,"        super(base, null);",1,0,0,0,2,1,0,0,1,4,18,3,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,123,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",1,0,0,1,2,4,0,6,4,6,106,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,1,0,1,0,2,1,0,1,1,6,48,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,1,0,0,2,4,1,2,1,2,7,71,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",2,0,0,0,2,0,3,0,0,3,43,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,68,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,77,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,86,        return getInstance(DateTimeZone.getDefault());,0,0,0,2,4,1,3,0,1,5,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,96,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,97,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,2,2,0,1,4,1,3,0,0,6,66,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,100,        ISOChronology chrono = cFastCache[index];,1,0,1,0,2,0,0,1,0,4,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,101,        if (chrono != null && chrono.getZone() == zone) {,2,3,0,2,5,1,2,0,0,6,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,102,            return chrono;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,104,        synchronized (cCache) {,1,0,0,1,3,1,0,0,0,4,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,105,            chrono = cCache.get(zone);,1,0,0,1,2,0,3,0,1,5,26,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,106,            if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",1,0,0,0,4,1,4,1,2,6,76,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,108,"                cCache.put(zone, chrono);",0,0,0,0,2,0,4,0,0,2,25,9,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,110,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,111,        cFastCache[index] = chrono;,1,0,1,0,2,0,0,0,1,4,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,112,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,133,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,143,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,144,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,146,        if (zone == getZone()) {,1,1,0,2,5,1,1,0,1,7,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,147,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,149,        return getInstance(zone);,0,0,0,1,2,1,2,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,160,"        String str = ""ISOChronology"";",1,0,0,0,0,0,0,1,1,3,29,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,161,        DateTimeZone zone = getZone();,1,0,0,1,2,0,1,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,162,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,163,            str = str + '[' + zone.getID() + ']';,2,1,0,1,4,0,2,0,3,6,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,165,        return str;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,169,        if (getBase().getZone() == DateTimeZone.UTC) {,2,1,0,2,7,1,2,0,1,7,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,171,            fields.centuryOfEra = new DividedDateTimeField(,2,0,0,0,1,1,0,1,2,5,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,173,            fields.yearOfCentury = new RemainderDateTimeField(,2,0,0,0,1,1,0,1,2,5,50,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,2,0,0,0,1,1,0,1,2,5,54,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,178,            fields.centuries = fields.centuryOfEra.getDurationField();,4,0,0,1,2,0,1,0,1,5,58,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,190,        return super.equals(obj);,2,0,0,1,2,2,0,0,0,4,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0,2,0,1,6,1,3,0,2,6,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,9,208,        return new Stub(getZone());,0,0,0,2,4,2,1,1,2,6,27,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,883,"        Transition(long millis, Transition tr) {",3,0,0,0,3,1,0,1,0,4,40,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,884,            iMillis = millis;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,885,            iNameKey = tr.iNameKey;,3,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,886,            iWallOffset = tr.iWallOffset;,3,0,0,0,0,0,0,0,1,2,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,887,            iStandardOffset = tr.iStandardOffset;,3,0,0,0,0,0,0,0,1,2,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,888,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,890,"        Transition(long millis, Rule rule, int standardOffset) {",4,0,0,0,3,2,0,1,0,4,56,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,891,            iMillis = millis;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,892,            iNameKey = rule.getNameKey();,1,0,0,1,2,0,2,0,1,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,893,            iWallOffset = standardOffset + rule.getSaveMillis();,2,1,0,1,2,0,2,0,1,6,52,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,894,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,895,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,898,"                   int wallOffset, int standardOffset) {",2,0,0,0,2,2,0,0,0,3,37,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,899,            iMillis = millis;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,900,            iNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,901,            iWallOffset = wallOffset;,2,0,0,0,0,0,0,0,1,2,25,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,902,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,903,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,906,            return iMillis;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,910,            return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,914,            return iWallOffset;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,918,            return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,922,            return iWallOffset - iStandardOffset;,2,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,929,            if (other == null) {,1,1,0,1,3,1,0,0,0,5,20,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,930,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,932,            return iMillis > other.iMillis &&,3,2,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",1,1,0,1,2,2,0,1,2,7,60,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,522,            if (iMode == 'w') {,1,1,0,1,3,1,0,0,1,6,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,523,                offset = standardOffset + saveMillis;,3,1,0,0,0,0,0,0,1,3,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,524,            } else if (iMode == 's') {,1,1,0,1,4,2,0,0,1,6,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,525,                offset = standardOffset;,2,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,527,                offset = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,530,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,531,"            long millis = chrono.year().set(0, year);",1,0,0,1,4,1,4,0,0,5,41,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",1,0,0,1,4,0,5,0,1,5,56,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",1,0,0,1,4,0,5,0,1,5,56,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,534,"            millis = setDayOfMonth(chrono, millis);",1,0,0,0,2,0,3,0,2,4,39,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,536,            if (iDayOfWeek != 0) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,537,"                millis = setDayOfWeek(chrono, millis);",1,0,0,0,2,0,3,0,2,4,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,541,            return millis - offset;,2,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,549,            if (iMode == 'w') {,1,1,0,1,3,1,0,0,1,6,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,550,                offset = standardOffset + saveMillis;,3,1,0,0,0,0,0,0,1,3,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,551,            } else if (iMode == 's') {,1,1,0,1,4,2,0,0,1,6,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,552,                offset = standardOffset;,2,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,554,                offset = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,558,            instant += offset;,2,0,0,0,0,0,0,0,1,2,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,560,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",1,0,0,1,4,1,5,0,0,5,60,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,563,"            next = chrono.millisOfDay().set(next, 0);",1,0,0,1,4,0,4,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",1,0,0,1,4,0,5,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,565,"            next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,567,            if (iDayOfWeek == 0) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,568,                if (next <= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,569,"                    next = chrono.year().add(next, 1);",1,0,0,1,4,0,4,0,1,5,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,570,"                    next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,573,"                next = setDayOfWeek(chrono, next);",1,0,0,0,2,0,3,0,2,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,574,                if (next <= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,575,"                    next = chrono.year().add(next, 1);",1,0,0,1,4,0,4,0,1,5,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",1,0,0,1,4,0,5,0,1,5,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,577,"                    next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,578,"                    next = setDayOfWeek(chrono, next);",1,0,0,0,2,0,3,0,2,4,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,583,            return next - offset;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,591,            if (iMode == 'w') {,1,1,0,1,3,1,0,0,1,6,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,592,                offset = standardOffset + saveMillis;,3,1,0,0,0,0,0,0,1,3,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,593,            } else if (iMode == 's') {,1,1,0,1,4,2,0,0,1,6,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,594,                offset = standardOffset;,2,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,596,                offset = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,600,            instant += offset;,2,0,0,0,0,0,0,0,1,2,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,602,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",1,0,0,1,4,1,5,0,0,5,60,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,605,"            prev = chrono.millisOfDay().set(prev, 0);",1,0,0,1,4,0,4,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",1,0,0,1,4,0,5,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,607,"            prev = setDayOfMonthPrevious(chrono, prev);",1,0,0,0,2,0,3,0,2,4,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,609,            if (iDayOfWeek == 0) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,610,                if (prev >= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,611,"                    prev = chrono.year().add(prev, -1);",1,0,0,1,4,0,4,0,2,5,35,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",1,0,0,0,2,0,3,0,2,4,43,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,615,"                prev = setDayOfWeek(chrono, prev);",1,0,0,0,2,0,3,0,2,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,616,                if (prev >= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,617,"                    prev = chrono.year().add(prev, -1);",1,0,0,1,4,0,4,0,2,5,35,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",1,0,0,1,4,0,5,0,1,5,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",1,0,0,0,2,0,3,0,2,4,43,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,620,"                    prev = setDayOfWeek(chrono, prev);",1,0,0,0,2,0,3,0,2,4,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,625,            return prev - offset;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,629,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,630,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,632,            if (obj instanceof OfYear) {,1,0,0,1,3,2,0,1,0,5,28,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,633,                OfYear other = (OfYear)obj;,2,0,0,1,2,0,0,2,0,4,27,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,634,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,642,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,659,            out.writeByte(iMode);,0,0,0,1,2,0,3,0,0,3,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,660,            out.writeByte(iMonthOfYear);,0,0,0,1,2,0,3,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,661,            out.writeByte(iDayOfMonth);,0,0,0,1,2,0,3,0,0,3,27,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,662,            out.writeByte(iDayOfWeek);,0,0,0,1,2,0,3,0,0,3,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,663,            out.writeBoolean(iAdvance);,0,0,0,1,2,0,3,0,0,3,27,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,664,"            writeMillis(out, iMillisOfDay);",0,0,0,0,2,0,3,0,1,3,31,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,665,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,672,"                next = setDayOfMonth(chrono, next);",1,0,0,0,2,0,3,0,2,4,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,682,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,673,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,2,3,0,1,3,1,0,0,0,5,45,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,675,                    while (chrono.year().isLeap(next) == false) {,0,1,0,2,7,1,4,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,676,"                        next = chrono.year().add(next, 1);",1,0,0,1,4,0,4,0,1,5,34,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,678,"                    next = setDayOfMonth(chrono, next);",1,0,0,0,2,0,3,0,2,4,35,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,680,                    throw e;,1,0,0,0,0,1,0,0,0,2,8,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,683,            return next;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,691,"                prev = setDayOfMonth(chrono, prev);",1,0,0,0,2,0,3,0,2,4,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,701,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,692,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,2,3,0,1,3,1,0,0,0,5,45,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,694,                    while (chrono.year().isLeap(prev) == false) {,0,1,0,2,7,1,4,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,695,"                        prev = chrono.year().add(prev, -1);",1,0,0,1,4,0,4,0,2,5,35,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,697,"                    prev = setDayOfMonth(chrono, prev);",1,0,0,0,2,0,3,0,2,4,35,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,699,                    throw e;,1,0,0,0,0,1,0,0,0,2,8,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,702,            return prev;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,706,            if (iDayOfMonth >= 0) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",1,0,0,1,4,0,5,0,1,5,56,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,709,"                instant = chrono.dayOfMonth().set(instant, 1);",1,0,0,1,4,0,4,0,1,5,46,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,710,"                instant = chrono.monthOfYear().add(instant, 1);",1,0,0,1,4,0,4,0,1,5,47,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",1,0,0,1,4,0,5,0,1,5,56,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,713,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,1,0,0,1,4,1,4,0,0,5,48,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,3,1,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,719,            if (daysToAdd != 0) {,1,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,720,                if (iAdvance) {,1,0,0,1,3,1,0,0,0,4,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,721,                    if (daysToAdd < 0) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,722,                        daysToAdd += 7;,1,0,0,0,0,0,0,0,1,2,15,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,725,                    if (daysToAdd > 0) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,726,                        daysToAdd -= 7;,1,0,0,0,0,0,0,0,1,2,15,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",1,0,0,1,4,0,5,0,1,5,53,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,731,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,56,    public ZoneInfoProvider(File fileDir) throws IOException {,3,0,0,1,3,2,0,1,1,6,58,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,57,        if (fileDir == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,58,"            throw new IllegalArgumentException(""No file directory provided"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,60,        if (!fileDir.exists()) {,0,0,0,2,5,1,2,0,1,5,24,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",1,1,0,1,2,2,0,1,2,7,66,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,63,        if (!fileDir.isDirectory()) {,0,0,0,2,5,1,2,0,1,5,29,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",1,1,0,1,2,2,0,1,2,7,71,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,67,        iFileDir = fileDir;,2,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,68,        iResourcePath = null;,1,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,69,        iLoader = null;,1,0,0,0,0,0,0,0,1,2,15,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",1,0,0,2,4,0,2,0,4,5,60,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,96,"        this(resourcePath, loader, true);",2,0,0,0,2,1,0,0,1,4,33,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,97,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,108,"            throw new IllegalArgumentException(""No resource path provided"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,137,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,158,            return loadZoneData(id);,0,0,0,1,2,1,2,0,1,5,24,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,162,        return getZone((String)obj);,1,0,0,2,4,1,1,1,1,7,28,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,183,        Thread t = Thread.currentThread();,1,0,0,1,2,0,2,1,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,184,"        t.getThreadGroup().uncaughtException(t, ex);",0,0,0,1,4,0,5,0,0,3,44,5,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,185,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,197,"            in = new FileInputStream(new File(iFileDir, name));",3,0,0,0,4,2,0,2,3,5,51,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,203,                in = ClassLoader.getSystemResourceAsStream(path);,1,0,0,1,2,0,3,0,1,5,49,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,206,                StringBuilder buf = new StringBuilder(40),1,0,0,1,2,1,0,2,1,6,41,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,211,                throw new IOException(buf.toString());,0,0,0,2,4,2,2,1,1,6,38,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,239,            } catch (IOException ex) {,1,0,0,1,4,1,0,1,0,5,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,230,        } catch (IOException ex) {,1,0,0,1,4,1,0,1,0,5,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,231,            uncaughtException(ex);,0,0,0,1,2,0,2,0,1,4,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,232,            iZoneInfoMap.remove(id);,0,0,0,1,2,0,3,0,0,3,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,233,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,235,            try {,0,0,0,0,1,1,0,0,0,2,5,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,259,            } catch (IOException ex) {,1,0,0,1,4,1,0,1,0,5,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,261,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,257,            try {,0,0,0,0,1,1,0,0,0,2,5,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,285,            } catch (ArrayIndexOutOfBoundsException ex) {,1,0,0,1,4,1,0,1,0,5,45,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,9,286,"                throw new IOException(""Corrupt zone info map"");",0,0,0,1,2,2,0,1,2,5,47,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1183,            return findMatchingRecurrence(instant).getNameKey();,0,0,0,1,4,1,3,0,1,5,52,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,1,1,0,1,4,1,3,0,1,7,73,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1191,            return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1195,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1199,            int standardOffset = iStandardOffset;,2,0,0,0,0,1,0,0,0,2,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1200,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,0,1,0,2,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1201,            Recurrence endRecurrence = iEndRecurrence;,2,0,0,0,0,0,0,1,0,2,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1206,                start = startRecurrence.next,1,0,0,0,0,0,2,0,1,3,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1208,                if (instant > 0 && start < 0) {,2,3,0,1,3,1,0,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1210,                    start = instant;,2,0,0,0,0,0,0,0,1,2,16,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1218,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1212,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1214,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1215,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1217,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1221,                end = endRecurrence.next,1,0,0,0,0,0,2,0,1,3,24,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1223,                if (instant > 0 && end < 0) {,2,3,0,1,3,1,0,0,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1225,                    end = instant;,2,0,0,0,0,0,0,0,1,2,14,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1233,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1227,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1229,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1230,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1232,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1235,            return (start > end) ? end : start;,4,1,0,1,2,1,0,0,0,5,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1241,            instant++;,1,0,0,0,0,0,0,0,1,2,10,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1243,            int standardOffset = iStandardOffset;,2,0,0,0,0,1,0,0,0,2,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1244,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,0,1,0,2,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1245,            Recurrence endRecurrence = iEndRecurrence;,2,0,0,0,0,0,0,1,0,2,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1250,                start = startRecurrence.previous,1,0,0,0,0,0,2,0,1,3,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1252,                if (instant < 0 && start > 0) {,2,3,0,1,3,1,0,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1254,                    start = instant;,2,0,0,0,0,0,0,0,1,2,16,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1262,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1256,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1258,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1259,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1261,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1265,                end = endRecurrence.previous,1,0,0,0,0,0,2,0,1,3,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1267,                if (instant < 0 && end > 0) {,2,3,0,1,3,1,0,0,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1269,                    end = instant;,2,0,0,0,0,0,0,0,1,2,14,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1277,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1271,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1273,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1274,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1276,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1279,            return ((start > end) ? start : end) - 1;,4,2,0,2,4,1,0,0,0,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1283,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1284,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1286,            if (obj instanceof DSTZone) {,1,0,0,1,3,2,0,1,0,5,29,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1287,                DSTZone other = (DSTZone)obj;,2,0,0,1,2,0,0,2,0,4,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1288,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1294,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1298,"            writeMillis(out, iStandardOffset);",0,0,0,0,2,0,3,0,1,3,34,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1299,            iStartRecurrence.writeTo(out);,0,0,0,1,2,0,3,0,0,3,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1300,            iEndRecurrence.writeTo(out);,0,0,0,1,2,0,3,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1301,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1304,            int standardOffset = iStandardOffset;,2,0,0,0,0,1,0,0,0,2,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1305,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,0,1,0,2,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1306,            Recurrence endRecurrence = iEndRecurrence;,2,0,0,0,0,0,0,1,0,2,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1311,                start = startRecurrence.next,1,0,0,0,0,0,2,0,1,3,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1319,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1313,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1315,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1316,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1318,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1322,                end = endRecurrence.next,1,0,0,0,0,0,2,0,1,3,24,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1330,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1324,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1326,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1327,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1329,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1332,            return (start > end) ? startRecurrence : endRecurrence;,4,1,0,1,2,1,0,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/JodaTimePermission,9,57,        super(name);,1,0,0,1,2,1,0,0,1,5,12,3,0.0,0,0
defect4j,time,org/joda/time/JodaTimePermission,9,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,45,        return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,49,        return iWallOffset;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,53,        return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,57,        return iWallOffset;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,61,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,65,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,69,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,77,        String id = getID();,1,0,0,1,2,0,1,1,1,6,20,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0,3,0,3,11,1,6,0,2,6,69,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",3,1,0,2,4,1,2,0,2,7,55,7,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",4,0,0,1,4,2,1,0,2,6,58,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,91,        if (obj instanceof FixedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,39,5,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,92,            FixedDateTimeZone other = (FixedDateTimeZone) obj;,2,0,0,1,2,0,0,2,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,93,            return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,98,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,9,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,2,4,0,1,4,1,2,0,1,7,68,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",1,0,0,0,4,0,4,1,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,44,        return nameSet == null ? null : nameSet[0];,1,1,1,0,2,1,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",1,0,0,0,4,0,4,1,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,49,        return nameSet == null ? null : nameSet[1];,1,1,1,0,2,1,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,53,        if (locale == null || id == null || nameKey == null) {,3,5,0,1,3,1,0,0,0,5,54,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,54,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",1,0,0,1,2,0,3,5,0,5,72,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,58,        if (byIdCache == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",1,0,0,1,4,0,4,0,2,5,54,7,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",1,0,0,1,2,0,3,3,0,5,55,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,63,        if (byNameKeyCache == null) {,1,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,64,"            byIdCache.put(id, byNameKeyCache = createCache());",1,0,0,1,4,0,4,0,2,5,50,7,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,66,            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();,3,0,0,1,8,0,3,1,0,5,95,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,67,            String[] setEn = null;,1,0,0,0,2,0,0,1,0,3,22,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,68,            for (String[] strings : zoneStringsEn) {,2,0,0,1,5,1,0,1,0,5,40,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,69,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,3,4,1,2,7,1,2,0,0,7,70,8,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,70,                setEn = strings;,2,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,71,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,74,            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,1,0,0,1,8,0,4,1,0,5,88,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,75,            String[] setLoc = null;,1,0,0,0,2,0,0,1,0,3,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,76,            for (String[] strings : zoneStringsLoc) {,2,0,0,1,5,1,0,1,0,5,41,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,77,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,3,4,1,2,7,1,2,0,0,7,70,8,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,78,                setLoc = strings;,2,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,79,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,83,            if (setEn != null && setLoc != null) {,2,3,0,1,3,1,0,0,0,5,38,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});",0,0,1,0,12,1,2,1,0,5,66,9,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,88,              if (setEn[2].equals(setEn[4])) {,0,0,1,2,9,1,1,0,0,5,32,9,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});",0,1,1,0,12,1,2,1,1,7,78,11,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});",0,0,1,0,12,1,2,1,0,5,66,11,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,9,95,        return (String[]) byNameKeyCache.get(nameKey);,0,0,0,1,6,1,3,1,0,5,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,225,    public DateTimeZoneBuilder() {,1,0,0,1,3,1,0,0,1,5,30,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,226,        iRuleSets = new ArrayList<RuleSet>(10);,1,0,0,1,2,1,0,2,2,6,39,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,227,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,96,"            return readFrom((DataInput)in, id);",1,0,0,1,4,1,2,1,1,7,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,112,            DateTimeZone fixed = new FixedDateTimeZone,1,0,0,0,0,1,0,2,1,4,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,114,            if (fixed.equals(DateTimeZone.UTC)) {,2,0,0,2,5,1,2,0,0,5,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,115,                fixed = DateTimeZone.UTC;,3,0,0,0,0,0,0,0,1,2,25,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,117,            return fixed;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,121,"            return PrecalculatedZone.readFrom(in, id);",0,0,0,0,2,1,4,0,0,3,42,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,123,"            throw new IOException(""Invalid encoding"");",0,0,0,1,2,2,0,1,2,5,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,140,        if (millis % (30 * 60000L) == 0) {,1,3,0,2,5,1,0,0,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,142,            long units = millis / (30 * 60000L);,2,2,0,1,2,1,0,0,0,5,36,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,2,5,0,4,11,1,0,0,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,145,                out.writeByte((int)(units & 0x3f));,1,1,0,2,6,1,2,0,0,6,35,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,146,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,150,        if (millis % 60000L == 0) {,1,2,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,152,            long minutes = millis / 60000L;,2,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,2,5,0,4,11,1,0,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,1,2,0,2,6,1,2,0,0,6,55,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,156,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,160,        if (millis % 1000L == 0) {,1,2,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,162,            long seconds = millis / 1000L;,2,1,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,2,5,0,4,11,1,0,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,1,3,0,3,8,1,2,0,0,6,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,166,                out.writeInt((int)(seconds & 0xffffffff));,1,1,0,2,6,1,2,0,0,6,42,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,167,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,1,1,0,1,2,0,2,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,176,        out.writeLong(millis);,0,0,0,1,2,0,3,0,0,3,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,177,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0,2,0,1,5,1,5,0,1,6,45,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,217,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",4,0,0,0,2,2,0,1,1,5,70,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,252,        if (iRuleSets.size() > 0) {,0,1,0,2,5,1,2,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,253,            OfYear ofYear = new OfYear,1,0,0,0,0,1,0,2,1,4,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,1,1,0,2,4,0,4,1,0,6,58,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0,0,0,0,2,0,4,0,0,2,40,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,258,        iRuleSets.add(new RuleSet());,0,0,0,2,4,1,2,1,1,6,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,259,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,268,        getLastRuleSet().setStandardOffset(standardOffset);,0,0,0,1,4,0,3,0,1,4,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,269,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0,0,0,1,4,0,4,0,1,4,54,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,277,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,309,        if (fromYear <= toYear) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,310,            OfYear ofYear = new OfYear,1,0,0,0,0,1,0,2,1,4,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",4,0,0,0,2,1,0,2,1,5,68,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",4,0,0,0,2,1,0,2,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,314,            getLastRuleSet().addRule(rule);,0,0,0,1,4,0,3,0,1,4,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,316,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,320,        if (iRuleSets.size() == 0) {,0,1,0,2,5,1,2,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",2,0,0,0,2,0,1,0,3,4,54,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,323,        return iRuleSets.get(iRuleSets.size() - 1);,0,1,0,2,4,1,4,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,333,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,334,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,1,0,0,1,2,1,0,4,1,6,64,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,343,        DSTZone tailZone = null;,1,0,0,0,0,0,0,1,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,345,        long millis = Long.MIN_VALUE;,3,0,0,0,0,1,0,0,0,2,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,346,        int saveMillis = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,348,        int ruleSetCount = iRuleSets.size();,1,0,0,1,2,1,2,0,0,5,36,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,349,        for (int i=0; i<ruleSetCount; i++) {,4,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,350,            RuleSet rs = iRuleSets.get(i);,1,0,0,1,2,0,3,1,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,351,            Transition next = rs.firstTransition(millis);,1,0,0,1,2,0,3,1,0,5,45,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,352,            if (next == null) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,353,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,355,"            addTransition(transitions, next);",0,0,0,0,2,0,3,0,1,3,33,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,356,            millis = next.getMillis();,1,0,0,1,2,0,2,0,1,5,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,357,            saveMillis = next.getSaveMillis();,1,0,0,1,2,0,2,0,1,5,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,360,            rs = new RuleSet(rs);,2,0,0,1,2,1,0,1,2,6,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",1,1,0,0,7,1,4,0,1,6,64,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,363,"                if (addTransition(transitions, next)) {",0,0,0,0,5,1,3,0,1,4,39,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,364,                    if (tailZone != null) {,1,1,0,1,3,1,0,0,0,5,23,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,366,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,369,                millis = next.getMillis();,1,0,0,1,2,0,2,0,1,5,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,370,                saveMillis = next.getSaveMillis();,1,0,0,1,2,0,2,0,1,5,34,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,371,                if (tailZone == null && i == ruleSetCount - 1) {,3,4,0,1,3,1,0,0,0,5,48,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,372,                    tailZone = rs.buildTailZone(id);,1,0,0,1,2,0,3,0,1,5,32,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,379,            millis = rs.getUpperLimit(saveMillis);,1,0,0,1,2,0,3,0,1,5,38,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,383,        if (transitions.size() == 0) {,0,1,0,2,5,1,2,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,384,            if (tailZone != null) {,1,1,0,1,3,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,386,                return tailZone;,1,0,0,0,0,1,0,0,0,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0,0,0,0,2,1,2,0,2,4,39,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,390,        if (transitions.size() == 1 && tailZone == null) {,1,3,0,2,5,1,2,0,0,6,50,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,391,            Transition tr = transitions.get(0);,1,0,0,1,2,0,2,1,0,5,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,392,"            return buildFixedZone(id, tr.getNameKey(),",0,0,0,1,3,1,4,0,1,5,42,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",1,0,0,0,2,0,6,1,0,4,87,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,397,        if (zone.isCachable()) {,0,0,0,2,5,1,2,0,0,4,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,398,            return CachedDateTimeZone.forZone(zone);,0,0,0,1,2,1,3,0,0,4,40,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,400,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,404,        int size = transitions.size();,1,0,0,1,2,1,2,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,405,        if (size == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,406,            transitions.add(tr);,0,0,0,1,2,0,3,0,0,3,20,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,407,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,410,        Transition last = transitions.get(size - 1);,2,1,0,1,2,0,2,1,0,6,44,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,411,        if (!tr.isTransitionFrom(last)) {,0,0,0,2,5,1,3,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,412,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,417,        int offsetForLast = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,418,        if (size >= 2) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,2,1,0,1,4,0,3,0,1,6,58,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,421,        int offsetForNew = last.getWallOffset();,1,0,0,1,2,1,2,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,423,        long lastLocal = last.getMillis() + offsetForLast;,2,1,0,1,2,1,2,0,0,6,50,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,424,        long newLocal = tr.getMillis() + offsetForNew;,2,1,0,1,2,1,2,0,0,6,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,426,        if (newLocal != lastLocal) {,2,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,427,            transitions.add(tr);,0,0,0,1,2,0,3,0,0,3,20,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,428,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,431,        transitions.remove(size - 1);,1,1,0,1,2,0,2,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,432,"        return addTransition(transitions, tr);",0,0,0,0,2,1,3,0,1,4,38,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,443,        if (out instanceof DataOutput) {,1,0,0,1,3,2,0,1,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,444,"            writeTo(zoneID, (DataOutput)out);",1,0,0,1,4,0,2,1,1,6,33,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",1,0,0,1,6,1,2,2,2,7,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,448,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",1,0,0,0,2,0,2,1,2,5,50,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,461,        if (zone instanceof FixedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,462,            out.writeByte('F'); // 'F' for fixed,0,0,0,1,2,1,2,0,1,5,36,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,463,            out.writeUTF(zone.getNameKey(0));,0,0,0,2,4,0,4,0,0,3,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,464,"            writeMillis(out, zone.getOffset(0));",0,0,0,1,4,0,4,0,1,4,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,465,"            writeMillis(out, zone.getStandardOffset(0));",0,0,0,1,4,0,4,0,1,4,44,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,467,            if (zone instanceof CachedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,41,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0,0,0,1,2,1,2,0,1,5,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,2,0,0,2,6,0,1,1,1,6,52,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0,0,0,1,2,1,2,0,1,5,54,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,473,            ((PrecalculatedZone)zone).writeTo(out);,1,0,0,2,6,0,2,1,0,5,39,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,475,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1362,                        index = in.readUnsignedShort();,1,0,0,1,2,0,2,0,1,5,31,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1365,                } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1366,"                    throw new IOException(""Invalid encoding"");",0,0,0,1,2,2,0,1,2,5,42,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1389,            int size = transitions.size();,1,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1390,            if (size == 0) {,1,1,0,1,3,1,0,0,0,5,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1391,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1394,            long[] trans = new long[size];,1,0,1,0,4,3,0,0,0,4,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1395,            int[] wallOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1396,            int[] standardOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1397,            String[] nameKeys = new String[size];,1,0,1,0,4,1,0,2,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1399,            Transition last = null;,1,0,0,0,0,0,0,1,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1400,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1401,                Transition tr = transitions.get(i);,1,0,0,1,2,0,3,1,0,5,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1403,                if (!tr.isTransitionFrom(last)) {,0,0,0,2,5,1,3,0,1,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1404,                    throw new IllegalArgumentException(id);,1,0,0,1,2,2,0,1,1,6,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1407,                trans[i] = tr.getMillis();,0,0,1,1,4,0,2,0,1,5,26,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1408,                wallOffsets[i] = tr.getWallOffset();,0,0,1,1,4,0,2,0,1,5,36,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1409,                standardOffsets[i] = tr.getStandardOffset();,0,0,1,1,4,0,2,0,1,5,44,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1410,                nameKeys[i] = tr.getNameKey();,0,0,1,1,4,0,2,0,1,5,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1412,                last = tr;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1417,            String[] zoneNameData = new String[5];,1,0,0,0,4,1,0,2,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1418,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,3,0,0,1,8,1,1,2,1,7,80,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1419,            for (int j = 0; j < zoneStrings.length; j++) {,5,1,0,1,3,2,0,0,1,6,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1420,                String[] set = zoneStrings[j];,1,0,1,0,4,0,0,1,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,3,4,1,2,7,1,2,0,0,7,58,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1422,                    zoneNameData = set;,2,0,0,0,0,0,0,0,1,2,19,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1426,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,5,2,0,1,3,2,0,0,1,6,47,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1429,                String curNameKey = nameKeys[i];,1,0,1,0,2,0,0,1,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1430,                String nextNameKey = nameKeys[i + 1];,2,1,1,0,2,0,0,1,0,5,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1431,                long curOffset = wallOffsets[i];,1,0,1,0,2,1,0,0,0,4,32,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1432,                long nextOffset = wallOffsets[i + 1];,2,1,1,0,2,1,0,0,0,5,37,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1433,                long curStdOffset = standardOffsets[i];,1,0,1,0,2,1,0,0,0,4,39,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1434,                long nextStdOffset = standardOffsets[i + 1];,2,1,1,0,2,1,0,0,0,5,44,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",3,1,1,1,8,1,2,2,1,9,81,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1436,                if (curOffset != nextOffset &&,2,8,0,0,1,1,0,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1443,                    if (ZoneInfoCompiler.verbose()) {,0,0,0,2,5,1,2,0,0,4,33,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",3,1,0,1,2,0,1,0,1,6,65,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",3,1,1,0,5,1,1,1,2,8,63,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1448,                    if (curOffset > nextOffset) {,2,1,0,1,3,1,0,0,0,5,29,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",1,1,1,1,6,0,1,0,2,7,48,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1450,                    } else if (curOffset < nextOffset) {,2,1,0,1,4,2,0,0,0,5,36,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",2,2,1,1,6,0,1,0,2,7,53,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1452,                        i++;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1457,            if (tailZone != null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1458,                if (tailZone.iStartRecurrence.getNameKey(),2,0,0,1,3,1,1,0,0,5,42,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1460,                    if (ZoneInfoCompiler.verbose()) {,0,0,0,2,5,1,2,0,0,4,33,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",2,1,0,0,1,0,1,0,1,5,61,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1464,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,2,1,0,2,5,1,1,0,0,6,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1465,                        tailZone = new DSTZone(,1,0,0,0,1,1,0,1,2,5,23,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1471,                        tailZone = new DSTZone(,1,0,0,0,1,1,0,1,2,5,23,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1480,            return new PrecalculatedZone,0,0,0,0,0,2,0,1,1,3,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1509,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1510,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1511,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1512,                return iNameKeys[i];,0,0,1,0,2,1,0,0,0,3,20,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1514,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1515,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1516,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1517,                    return iNameKeys[i - 1];,1,1,1,0,2,1,0,0,0,5,24,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1519,"                return ""UTC"";",0,0,0,0,0,1,0,0,1,2,13,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1521,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1522,                return iNameKeys[i - 1];,1,1,1,0,2,1,0,0,0,5,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1524,            return iTailZone.getNameKey(instant);,0,0,0,1,2,1,3,0,0,4,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1528,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1529,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1530,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1531,                return iWallOffsets[i];,0,0,1,0,2,1,0,0,0,3,23,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1533,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1534,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1535,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1536,                    return iWallOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,27,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1538,                return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1540,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1541,                return iWallOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,27,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1543,            return iTailZone.getOffset(instant);,0,0,0,1,2,1,3,0,0,4,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1547,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1548,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1549,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1550,                return iStandardOffsets[i];,0,0,1,0,2,1,0,0,0,3,27,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1552,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1553,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1554,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1555,                    return iStandardOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,31,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1557,                return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1559,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1560,                return iStandardOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,31,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1562,            return iTailZone.getStandardOffset(instant);,0,0,0,1,2,1,3,0,0,4,44,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1566,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1570,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1571,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1572,            i = (i >= 0) ? (i + 1) : ~i;,4,2,0,1,4,0,0,0,2,5,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1573,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1574,                return transitions[i];,0,0,1,0,2,1,0,0,0,3,22,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1576,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1577,                return instant;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1579,            long end = transitions[transitions.length - 1];,3,1,1,0,2,1,0,0,0,5,47,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1580,            if (instant < end) {,2,1,0,1,3,1,0,0,0,5,20,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1581,                instant = end;,2,0,0,0,0,0,0,0,1,2,14,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1583,            return iTailZone.nextTransition(instant);,0,0,0,1,2,1,3,0,0,4,41,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1587,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1588,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1589,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1590,                if (instant > Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1591,                    return instant - 1;,1,1,0,0,0,1,0,0,0,3,19,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1593,                return instant;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1595,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1596,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1597,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1598,                    long prev = transitions[i - 1];,2,1,1,0,2,1,0,0,0,5,31,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1599,                    if (prev > Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,28,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1600,                        return prev - 1;,1,1,0,0,0,1,0,0,0,3,16,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1603,                return instant;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1605,            if (iTailZone != null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1606,                long prev = iTailZone.previousTransition(instant);,1,0,0,1,2,1,3,0,0,5,50,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1607,                if (prev < instant) {,2,1,0,1,3,1,0,0,0,5,21,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1608,                    return prev;,1,0,0,0,0,1,0,0,0,2,12,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1611,            long prev = transitions[i - 1];,2,1,1,0,2,1,0,0,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1612,            if (prev > Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1613,                return prev - 1;,1,1,0,0,0,1,0,0,0,3,16,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1615,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1619,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1620,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1622,            if (obj instanceof PrecalculatedZone) {,1,0,0,1,3,2,0,1,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1623,                PrecalculatedZone other = (PrecalculatedZone)obj;,2,0,0,1,2,0,0,2,0,4,49,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1624,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1634,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1638,            int size = iTransitions.length;,3,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1641,            Set<String> poolSet = new HashSet<String>();,1,0,0,1,2,1,0,4,1,6,44,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1642,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1643,                poolSet.add(iNameKeys[i]);,0,0,1,1,4,0,2,0,0,4,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1646,            int poolSize = poolSet.size();,1,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1647,            if (poolSize > 65535) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1648,"                throw new UnsupportedOperationException(""String pool is too large"");",0,0,0,1,2,2,0,1,2,5,68,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1650,            String[] pool = new String[poolSize];,1,0,1,0,4,1,0,2,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1651,            Iterator<String> it = poolSet.iterator();,1,0,0,1,2,0,2,2,0,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1652,            for (int i=0; it.hasNext(); i++) {,2,0,0,2,5,2,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1653,                pool[i] = it.next();,0,0,1,1,4,0,2,0,1,5,20,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1657,            out.writeShort(poolSize);,0,0,0,1,2,0,3,0,0,3,25,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1658,            for (int i=0; i<poolSize; i++) {,4,1,0,1,3,2,0,0,1,6,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1659,                out.writeUTF(pool[i]);,0,0,1,1,4,0,2,0,0,4,22,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1662,            out.writeInt(size);,0,0,0,1,2,0,3,0,0,3,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1664,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1665,"                writeMillis(out, iTransitions[i]);",0,0,1,0,4,0,2,0,1,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1666,"                writeMillis(out, iWallOffsets[i]);",0,0,1,0,4,0,2,0,1,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1667,"                writeMillis(out, iStandardOffsets[i]);",0,0,1,0,4,0,2,0,1,4,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1670,                String nameKey = iNameKeys[i];,1,0,1,0,2,0,0,1,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1671,                for (int j=0; j<poolSize; j++) {,4,1,0,1,3,2,0,0,1,6,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1672,                    if (pool[j].equals(nameKey)) {,0,0,1,2,7,1,2,0,0,5,30,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1673,                        if (poolSize < 256) {,1,1,0,1,3,1,0,0,0,5,21,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1674,                            out.writeByte(j);,0,0,0,1,2,0,3,0,0,3,17,14,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1676,                            out.writeShort(j);,0,0,0,1,2,0,3,0,0,3,18,14,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1678,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1683,            out.writeBoolean(iTailZone != null);,1,1,0,1,2,0,2,0,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1684,            if (iTailZone != null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1685,                iTailZone.writeTo(out);,0,0,0,1,2,0,3,0,0,3,23,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1687,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1690,            if (iTailZone != null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1691,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1693,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1694,            if (transitions.length <= 1) {,2,1,0,1,3,1,0,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1695,                return false;,0,0,0,0,0,1,0,0,1,2,13,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1700,            double distances = 0;,1,0,0,0,0,1,0,0,0,2,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1701,            int count = 0;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1703,            for (int i=1; i<transitions.length; i++) {,5,1,0,1,3,2,0,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1704,                long diff = transitions[i] - transitions[i - 1];,2,2,1,0,4,1,0,0,0,5,48,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1705,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,1,3,0,3,7,1,0,0,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1706,                    distances += (double)diff;,2,0,0,1,2,1,0,0,1,5,26,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1707,                    count++;,1,0,0,0,0,0,0,0,1,2,8,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1711,            if (count > 0) {,1,1,0,1,3,1,0,0,0,5,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1712,                double avg = distances / count;,3,1,0,0,0,1,0,0,0,3,31,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1713,                avg /= 24 * 60 * 60 * 1000;,1,1,0,0,0,0,0,0,1,3,27,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1714,                if (avg >= 25) {,1,1,0,1,3,1,0,0,0,5,16,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1721,                    return true;,0,0,0,0,0,1,0,0,1,2,12,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1725,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,40,        } catch (SecurityException e) {,1,0,0,1,4,1,0,1,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,41,            i = null;,1,0,0,0,0,0,0,0,1,2,9,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,50,            cacheSize = i.intValue();,1,0,0,1,2,0,2,0,1,5,25,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,52,            cacheSize--;,1,0,0,0,0,0,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,53,            int shift = 0;,1,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,54,            while (cacheSize > 0) {,1,1,0,1,3,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,55,                shift++;,1,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,56,                cacheSize >>= 1;,1,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,58,            cacheSize = 1 << shift;,2,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,69,            return (CachedDateTimeZone)zone;,1,0,0,1,2,1,0,1,0,5,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,95,        return iZone;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,99,        return getInfo(instant).getNameKey(instant);,0,0,0,1,4,1,4,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,103,        return getInfo(instant).getOffset(instant);,0,0,0,1,4,1,4,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,107,        return getInfo(instant).getStandardOffset(instant);,0,0,0,1,4,1,4,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,111,        return iZone.isFixed();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,115,        return iZone.nextTransition(instant);,0,0,0,1,2,1,3,0,0,4,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,119,        return iZone.previousTransition(instant);,0,0,0,1,2,1,3,0,0,4,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,123,        return iZone.hashCode();,0,0,0,1,2,1,2,0,0,4,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,127,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,128,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,130,        if (obj instanceof CachedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,131,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,2,0,0,3,6,1,2,1,0,6,53,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,133,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,140,        int period = (int)(millis >> 32);,2,1,0,1,4,2,0,0,0,5,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,141,        Info[] cache = iInfoCache;,2,0,0,0,2,0,0,1,0,3,26,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,142,        int index = period & cInfoCacheMask;,3,1,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,143,        Info info = cache[index];,1,0,1,0,2,0,0,1,0,4,25,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,144,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,4,4,0,3,9,2,0,0,0,5,65,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,145,            info = createInfo(millis);,1,0,0,1,2,0,2,0,2,5,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,146,            cache[index] = info;,1,0,1,0,2,0,0,0,1,4,20,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,148,        return info;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,152,        long periodStart = millis & (0xffffffffL << 32);,2,2,0,1,2,1,0,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,153,"        Info info = new Info(iZone, periodStart);",3,0,0,0,2,1,0,2,1,5,41,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,155,        long end = periodStart | 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,156,        Info chain = info;,2,0,0,0,0,0,0,1,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,158,            long next = iZone.nextTransition(periodStart);,1,0,0,1,2,1,3,0,0,5,46,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,159,            if (next == periodStart || next > end) {,4,3,0,1,3,1,0,0,0,5,40,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,160,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,162,            periodStart = next;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",5,0,0,0,4,1,0,1,3,5,57,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,164,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,166,        return info;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,963,        RuleSet() {,1,0,0,1,3,0,0,0,0,3,11,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,964,            iRules = new ArrayList<Rule>(10);,1,0,0,1,2,1,0,2,2,6,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,965,            iUpperYear = Integer.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,31,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,966,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,971,        RuleSet(RuleSet rs) {,2,0,0,1,3,0,0,1,0,4,21,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,972,            iStandardOffset = rs.iStandardOffset;,3,0,0,0,0,0,0,0,1,2,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,973,            iRules = new ArrayList<Rule>(rs.iRules);,3,0,0,1,2,1,0,2,2,6,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,974,            iInitialNameKey = rs.iInitialNameKey;,3,0,0,0,0,0,0,0,1,2,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,3,0,0,0,0,0,0,0,1,2,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,976,            iUpperYear = rs.iUpperYear;,3,0,0,0,0,0,0,0,1,2,27,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,977,            iUpperOfYear = rs.iUpperOfYear;,3,0,0,0,0,0,0,0,1,2,31,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,978,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,948,            long now = DateTimeUtils.currentTimeMillis();,1,0,0,1,2,1,2,0,0,5,45,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,1,1,0,1,6,0,5,0,1,6,66,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,950,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,981,            return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,985,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,986,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,989,            iInitialNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,26,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,990,            iInitialSaveMillis = saveMillis;,2,0,0,0,0,0,0,0,1,2,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,991,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,994,            if (!iRules.contains(rule)) {,0,0,0,2,5,1,3,0,1,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,995,                iRules.add(rule);,0,0,0,1,2,0,3,0,0,3,17,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,997,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1000,            iUpperYear = year;,2,0,0,0,0,0,0,0,1,2,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1001,            iUpperOfYear = ofYear;,2,0,0,0,0,0,0,0,1,2,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1002,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1011,            if (iInitialNameKey != null) {,1,1,0,1,3,1,0,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1013,"                return new Transition(firstMillis, iInitialNameKey,",2,0,0,0,1,2,0,1,1,5,51,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,2,0,0,1,2,1,0,4,1,6,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1024,            long millis = Long.MIN_VALUE;,3,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1025,            int saveMillis = 0;,1,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1026,            Transition first = null;,1,0,0,0,0,0,0,1,0,2,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",1,1,0,0,7,1,3,0,2,6,61,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1030,                millis = next.getMillis();,1,0,0,1,2,0,2,0,1,5,26,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1032,                if (millis == firstMillis) {,2,1,0,1,3,1,0,0,0,5,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1033,"                    first = new Transition(firstMillis, next);",3,0,0,0,2,1,0,1,2,5,42,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1034,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1037,                if (millis > firstMillis) {,2,1,0,1,3,1,0,0,0,5,27,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1038,                    if (first == null) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1042,                        for (Rule rule : copy) {,2,0,0,1,3,1,0,1,0,5,24,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1043,                            if (rule.getSaveMillis() == 0) {,0,1,0,2,5,1,2,0,0,5,32,13,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",4,0,0,0,2,1,0,1,2,5,59,15,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1045,                                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1047,                        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1049,                    if (first == null) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1053,"                        first = new Transition(firstMillis, next.getNameKey(),",2,0,0,1,3,1,2,1,2,7,54,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1061,"                first = new Transition(firstMillis, next);",3,0,0,0,2,1,0,1,2,5,42,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1063,                saveMillis = next.getSaveMillis();,1,0,0,1,2,0,2,0,1,5,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1066,            iRules = copy;,2,0,0,0,0,0,0,0,1,2,14,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1067,            return first;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1085,            Rule nextRule = null;,1,0,0,0,0,0,0,1,0,2,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1086,            long nextMillis = Long.MAX_VALUE;,3,0,0,0,0,1,0,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1088,            Iterator<Rule> it = iRules.iterator();,1,0,0,1,2,0,2,2,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1089,            while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1090,                Rule rule = it.next();,1,0,0,1,2,0,2,1,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",1,0,0,0,2,1,5,0,0,4,60,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1092,                if (next <= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1093,                    it.remove();,0,0,0,1,2,0,2,0,0,3,12,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1094,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1098,                if (next <= nextMillis) {,2,1,0,1,3,1,0,0,0,5,25,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1100,                    nextRule = rule;,2,0,0,0,0,0,0,0,1,2,16,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1101,                    nextMillis = next;,2,0,0,0,0,0,0,0,1,2,18,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1103,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1105,            if (nextRule == null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1106,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,1,1,0,2,7,1,4,0,0,6,50,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1111,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1115,            if (iUpperYear < Integer.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1116,                long upperMillis =,1,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1118,                if (nextMillis >= upperMillis) {,2,1,0,1,3,1,0,0,0,5,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1120,                    return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",3,0,0,0,2,2,0,1,1,5,61,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1131,            if (iUpperYear == Integer.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1132,                return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0,0,0,0,2,1,5,0,0,3,72,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1141,            if (iRules.size() == 2) {,0,1,0,2,5,1,2,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1142,                Rule startRule = iRules.get(0);,1,0,0,1,2,0,2,1,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1143,                Rule endRule = iRules.get(1);,1,0,0,1,2,0,2,1,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,2,2,0,1,3,1,2,0,0,6,49,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1154,"                    return new DSTZone(id, iStandardOffset,",2,0,0,0,1,2,0,1,1,5,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,1158,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",4,0,0,0,3,2,0,1,0,4,55,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,817,            iRecurrence = recurrence;,2,0,0,0,0,0,0,0,1,2,25,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,818,            iFromYear = fromYear;,2,0,0,0,0,0,0,0,1,2,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,819,            iToYear = toYear;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,820,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,823,            return iFromYear;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,827,            return iToYear;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,831,            return iRecurrence.getOfYear();,0,0,0,1,2,1,2,0,0,4,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,835,            return iRecurrence.getNameKey();,0,0,0,1,2,1,2,0,0,4,32,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,839,            return iRecurrence.getSaveMillis();,0,0,0,1,2,1,2,0,0,4,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,843,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,845,            final int wallOffset = standardOffset + saveMillis;,3,1,0,0,0,2,0,0,1,4,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,846,            long testInstant = instant;,2,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,849,            if (instant == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,850,                year = Integer.MIN_VALUE;,3,0,0,0,0,0,0,0,1,2,25,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,852,                year = chrono.year().get(instant + wallOffset);,3,1,0,1,4,0,3,0,1,6,47,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,855,            if (year < iFromYear) {,2,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",2,1,0,1,4,0,4,0,1,6,59,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,860,                testInstant -= 1;,1,0,0,0,0,0,0,0,1,2,17,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",1,0,0,0,2,1,5,0,0,4,70,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,865,            if (next > instant) {,2,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,866,                year = chrono.year().get(next + wallOffset);,3,1,0,1,4,0,3,0,1,6,44,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,867,                if (year > iToYear) {,2,1,0,1,3,1,0,0,0,5,21,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,869,                    next = instant;,2,0,0,0,0,0,0,0,1,2,15,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,873,            return next;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,146,        return (iPrinter != null);,1,1,0,1,2,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,155,        return iPrinter;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,164,        return (iParser != null);,1,1,0,1,2,1,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,173,        return iParser;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,189,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,2,4,0,4,11,1,4,0,2,7,78,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,190,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,192,"        return new DateTimeFormatter(iPrinter, iParser, locale,",3,0,0,0,1,2,0,1,1,5,55,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,203,        return iLocale;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,222,        if (iOffsetParsed == true) {,1,1,0,1,3,1,0,0,1,6,28,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,223,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,225,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",3,0,0,0,1,2,0,1,1,5,56,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,236,        return iOffsetParsed;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,258,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,270,        return iChrono;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,281,        return iChrono;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,301,        return withZone(DateTimeZone.UTC);,2,0,0,1,2,1,1,0,1,6,34,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,321,        if (iZone == zone) {,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,322,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,324,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",3,0,0,0,1,2,0,1,1,5,56,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,334,        return iZone;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,368,        if (iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear))) {,3,4,0,3,7,1,3,0,0,6,86,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,369,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,371,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",3,0,0,0,1,2,0,1,1,5,56,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,405,        return withPivotYear(Integer.valueOf(pivotYear));,0,0,0,2,4,1,4,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,415,      return iPivotYear;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,438,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",3,0,0,0,1,2,0,1,1,5,56,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,449,      return iDefaultYear;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,460,        long millis = DateTimeUtils.getInstantMillis(instant);,1,0,0,1,2,1,3,0,0,5,54,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,461,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,1,0,0,1,2,0,3,1,0,5,64,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,462,"        printTo(buf, millis, chrono);",0,0,0,0,2,0,4,0,1,3,29,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,463,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,472,        long millis = DateTimeUtils.getInstantMillis(instant);,1,0,0,1,2,1,3,0,0,5,54,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,473,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,1,0,0,1,2,0,3,1,0,5,64,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,474,"        printTo(out, millis, chrono);",0,0,0,0,2,0,4,0,1,3,29,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,475,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,485,        appendable.append(print(instant));,0,0,0,2,4,0,4,0,1,4,34,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,486,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,497,"        printTo(buf, instant, null);",0,0,0,0,2,0,3,0,1,3,28,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,498,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,508,"        printTo(out, instant, null);",0,0,0,0,2,0,3,0,1,3,28,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,509,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,520,        appendable.append(print(instant));,0,0,0,2,4,0,4,0,1,4,34,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,521,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,534,        DateTimePrinter printer = requirePrinter();,1,0,0,1,2,0,1,1,1,6,43,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,535,        if (partial == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,536,"            throw new IllegalArgumentException(""The partial must not be null"");",0,0,0,1,2,2,0,1,2,5,67,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,538,"        printer.printTo(buf, partial, iLocale);",0,0,0,0,2,0,5,0,0,2,39,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,539,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,551,        DateTimePrinter printer = requirePrinter();,1,0,0,1,2,0,1,1,1,6,43,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,552,        if (partial == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,553,"            throw new IllegalArgumentException(""The partial must not be null"");",0,0,0,1,2,2,0,1,2,5,67,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,555,"        printer.printTo(out, partial, iLocale);",0,0,0,0,2,0,5,0,0,2,39,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,556,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,569,        appendable.append(print(partial));,0,0,0,2,4,0,4,0,1,4,34,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,570,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,583,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,1,0,0,2,6,1,2,2,2,7,78,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,584,"        printTo(buf, instant);",0,0,0,0,2,0,3,0,1,3,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,585,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,598,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,1,0,0,2,6,1,2,2,2,7,78,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,599,"        printTo(buf, instant);",0,0,0,0,2,0,3,0,1,3,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,600,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,613,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,1,0,0,2,6,1,2,2,2,7,78,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,614,"        printTo(buf, partial);",0,0,0,0,2,0,3,0,1,3,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,615,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,619,        DateTimePrinter printer = requirePrinter();,1,0,0,1,2,0,1,1,1,6,43,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,620,        chrono = selectChronology(chrono);,1,0,0,1,2,0,2,0,2,5,34,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,623,        DateTimeZone zone = chrono.getZone();,1,0,0,1,2,0,2,1,0,5,37,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,624,        int offset = zone.getOffset(instant);,1,0,0,1,2,1,3,0,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,625,        long adjustedInstant = instant + offset;,3,1,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,626,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,4,5,0,2,7,1,0,0,0,5,65,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,628,            zone = DateTimeZone.UTC;,3,0,0,0,0,0,0,0,1,2,24,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,629,            offset = 0;,1,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,630,            adjustedInstant = instant;,2,0,0,0,0,0,0,0,1,2,26,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,632,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0,0,0,1,4,0,9,0,0,3,79,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,633,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,636,        DateTimePrinter printer = requirePrinter();,1,0,0,1,2,0,1,1,1,6,43,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,637,        chrono = selectChronology(chrono);,1,0,0,1,2,0,2,0,2,5,34,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,640,        DateTimeZone zone = chrono.getZone();,1,0,0,1,2,0,2,1,0,5,37,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,641,        int offset = zone.getOffset(instant);,1,0,0,1,2,1,3,0,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,642,        long adjustedInstant = instant + offset;,3,1,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,643,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,4,5,0,2,7,1,0,0,0,5,65,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,645,            zone = DateTimeZone.UTC;,3,0,0,0,0,0,0,0,1,2,24,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,646,            offset = 0;,1,0,0,0,0,0,0,0,1,2,11,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,647,            adjustedInstant = instant;,2,0,0,0,0,0,0,0,1,2,26,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,649,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0,0,0,1,4,0,9,0,0,3,79,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,650,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,658,        DateTimePrinter printer = iPrinter;,2,0,0,0,0,0,0,1,0,2,35,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,659,        if (printer == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,660,"            throw new UnsupportedOperationException(""Printing not supported"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,662,        return printer;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,699,        DateTimeParser parser = requireParser();,1,0,0,1,2,0,1,1,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,700,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,701,"            throw new IllegalArgumentException(""Instant must not be null"");",0,0,0,1,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,704,        long instantMillis = instant.getMillis();,1,0,0,1,2,1,2,0,0,5,41,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,705,        Chronology chrono = instant.getChronology();,1,0,0,1,2,0,2,1,0,5,44,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,706,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,2,1,0,1,4,1,4,0,0,6,78,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,707,        chrono = selectChronology(chrono);,1,0,0,1,2,0,2,0,2,5,34,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,709,        DateTimeParserBucket bucket = new DateTimeParserBucket(,1,0,0,0,1,1,0,2,1,5,55,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,711,"        int newPos = parser.parseInto(bucket, text, position);",1,0,0,0,2,1,5,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,712,"        instant.setMillis(bucket.computeMillis(false, text));",0,0,0,0,4,0,5,0,1,3,53,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,713,        if (iOffsetParsed && bucket.getOffsetInteger() != null) {,1,2,0,2,5,1,2,0,0,6,57,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,714,            int parsedOffset = bucket.getOffsetInteger();,1,0,0,1,2,1,2,0,0,5,45,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,715,            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,1,0,0,1,2,0,3,1,0,5,69,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,716,            chrono = chrono.withZone(parsedZone);,1,0,0,1,2,0,3,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,717,        } else if (bucket.getZone() != null) {,0,1,0,2,6,2,2,0,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,718,            chrono = chrono.withZone(bucket.getZone());,1,0,0,2,4,0,4,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,720,        instant.setChronology(chrono);,0,0,0,1,2,0,3,0,0,3,30,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,721,        if (iZone != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,722,            instant.setZone(iZone);,0,0,0,1,2,0,3,0,0,3,23,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,724,        return newPos;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,750,            newPos = ~newPos;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,752,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,0,4,2,4,1,1,5,81,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,770,        return parseLocalDateTime(text).toLocalDate();,0,0,0,1,4,1,3,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,788,        return parseLocalDateTime(text).toLocalTime();,0,0,0,1,4,1,3,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,806,        DateTimeParser parser = requireParser();,1,0,0,1,2,0,1,1,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,808,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps",1,0,0,1,4,0,2,1,1,6,91,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,809,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",5,0,0,0,2,1,0,2,1,5,101,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,810,"        int newPos = parser.parseInto(bucket, text, 0);",1,0,0,0,2,1,4,0,0,4,47,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,811,        if (newPos >= 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,812,            if (newPos >= text.length()) {,1,1,0,2,5,1,2,0,0,6,30,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,813,"                long millis = bucket.computeMillis(true, text);",1,0,0,0,2,1,3,0,1,5,47,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,814,                if (bucket.getOffsetInteger() != null) {  // treat withOffsetParsed() as being true,0,1,0,2,7,1,2,0,0,5,83,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,815,                    int parsedOffset = bucket.getOffsetInteger();,1,0,0,1,2,1,2,0,0,5,45,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,816,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,1,0,0,1,2,0,3,1,0,5,69,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,817,                    chrono = chrono.withZone(parsedZone);,1,0,0,1,2,0,3,0,1,5,37,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,818,                } else if (bucket.getZone() != null) {,0,1,0,2,6,2,2,0,0,5,38,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,819,                    chrono = chrono.withZone(bucket.getZone());,1,0,0,2,4,0,4,0,1,5,43,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,821,"                return new LocalDateTime(millis, chrono);",2,0,0,0,2,2,0,1,1,5,41,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,824,            newPos = ~newPos;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,826,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,0,4,2,4,1,1,5,81,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,847,        DateTimeParser parser = requireParser();,1,0,0,1,2,0,1,1,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,849,        Chronology chrono = selectChronology(null);,1,0,0,1,2,0,1,1,1,6,43,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,850,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",5,0,0,0,2,1,0,2,1,5,101,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,851,"        int newPos = parser.parseInto(bucket, text, 0);",1,0,0,0,2,1,4,0,0,4,47,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,852,        if (newPos >= 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,853,            if (newPos >= text.length()) {,1,1,0,2,5,1,2,0,0,6,30,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,854,"                long millis = bucket.computeMillis(true, text);",1,0,0,0,2,1,3,0,1,5,47,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,855,                if (iOffsetParsed && bucket.getOffsetInteger() != null) {,1,2,0,2,5,1,2,0,0,6,57,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,856,                    int parsedOffset = bucket.getOffsetInteger();,1,0,0,1,2,1,2,0,0,5,45,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,857,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,1,0,0,1,2,0,3,1,0,5,69,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,858,                    chrono = chrono.withZone(parsedZone);,1,0,0,1,2,0,3,0,1,5,37,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,859,                } else if (bucket.getZone() != null) {,0,1,0,2,6,2,2,0,0,5,38,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,860,                    chrono = chrono.withZone(bucket.getZone());,1,0,0,2,4,0,4,0,1,5,43,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,862,"                DateTime dt = new DateTime(millis, chrono);",3,0,0,0,2,1,0,2,1,5,43,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,863,                if (iZone != null) {,1,1,0,1,3,1,0,0,0,5,20,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,864,                    dt = dt.withZone(iZone);,1,0,0,1,2,0,3,0,1,5,24,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,866,                return dt;,1,0,0,0,0,1,0,0,0,2,10,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,869,            newPos = ~newPos;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,871,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,0,4,2,4,1,1,5,81,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,892,        DateTimeParser parser = requireParser();,1,0,0,1,2,0,1,1,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,894,        Chronology chrono = selectChronology(null);,1,0,0,1,2,0,1,1,1,6,43,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,895,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",5,0,0,0,2,1,0,2,1,5,101,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,896,"        int newPos = parser.parseInto(bucket, text, 0);",1,0,0,0,2,1,4,0,0,4,47,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,897,        if (newPos >= 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,898,            if (newPos >= text.length()) {,1,1,0,2,5,1,2,0,0,6,30,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,899,"                long millis = bucket.computeMillis(true, text);",1,0,0,0,2,1,3,0,1,5,47,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,900,                if (iOffsetParsed && bucket.getOffsetInteger() != null) {,1,2,0,2,5,1,2,0,0,6,57,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,901,                    int parsedOffset = bucket.getOffsetInteger();,1,0,0,1,2,1,2,0,0,5,45,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,902,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,1,0,0,1,2,0,3,1,0,5,69,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,903,                    chrono = chrono.withZone(parsedZone);,1,0,0,1,2,0,3,0,1,5,37,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,904,                } else if (bucket.getZone() != null) {,0,1,0,2,6,2,2,0,0,5,38,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,905,                    chrono = chrono.withZone(bucket.getZone());,1,0,0,2,4,0,4,0,1,5,43,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,907,"                MutableDateTime dt = new MutableDateTime(millis, chrono);",3,0,0,0,2,1,0,2,1,5,57,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,908,                if (iZone != null) {,1,1,0,1,3,1,0,0,0,5,20,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,909,                    dt.setZone(iZone);,0,0,0,1,2,0,3,0,0,3,18,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,911,                return dt;,1,0,0,0,0,1,0,0,0,2,10,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,914,            newPos = ~newPos;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,916,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0,0,0,0,4,2,4,1,1,5,81,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,927,"            throw new UnsupportedOperationException(""Parsing not supported"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatter,9,945,            chrono = chrono.withZone(iZone);,1,0,0,1,2,0,3,0,1,5,32,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,754,            return iOfYear;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0,0,0,0,2,1,5,0,0,3,57,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0,0,0,0,2,1,5,0,0,3,61,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,772,            return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,776,            return iSaveMillis;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,780,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,781,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,783,            if (obj instanceof Recurrence) {,1,0,0,1,3,2,0,1,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,784,                Recurrence other = (Recurrence)obj;,2,0,0,1,2,0,0,2,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,785,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,790,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,794,            iOfYear.writeTo(out);,0,0,0,1,2,0,3,0,0,3,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,795,            out.writeUTF(iNameKey);,0,0,0,1,2,0,3,0,0,3,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,796,"            writeMillis(out, iSaveMillis);",0,0,0,0,2,0,3,0,1,3,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,797,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",3,0,0,0,2,2,0,1,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,9,804,            return rename((iNameKey + appendNameKey).intern());,2,1,0,2,6,1,2,0,1,7,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,180,"        Info(DateTimeZone zone, long periodStart) {",3,0,0,0,3,1,0,1,0,4,43,3,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,177,        private int iOffset = Integer.MIN_VALUE;,3,0,0,0,0,2,0,0,1,3,40,3,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,178,        private int iStandardOffset = Integer.MIN_VALUE;,3,0,0,0,0,2,0,0,1,3,48,3,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,181,            iPeriodStart = periodStart;,2,0,0,0,0,0,0,0,1,2,27,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,182,            iZoneRef = zone;,2,0,0,0,0,0,0,0,1,2,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,183,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,186,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,4,3,0,1,3,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,187,                if (iNameKey == null) {,1,1,0,1,3,1,0,0,0,5,23,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,188,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,1,0,0,1,2,0,3,0,1,5,45,9,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,190,                return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,192,            return iNextInfo.getNameKey(millis);,0,0,0,1,2,1,3,0,0,4,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,196,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,4,3,0,1,3,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,197,                if (iOffset == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,198,                    iOffset = iZoneRef.getOffset(iPeriodStart);,1,0,0,1,2,0,3,0,1,5,43,9,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,200,                return iOffset;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,202,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,3,0,0,4,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,206,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,4,3,0,1,3,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,207,                if (iStandardOffset == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,208,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,1,0,0,1,2,0,3,0,1,5,59,9,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,210,                return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,9,212,            return iNextInfo.getStandardOffset(millis);,0,0,0,1,2,1,3,0,0,4,43,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1283,            iID = id;,2,0,0,0,0,0,0,0,1,2,9,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1284,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1285,,0,0,0,0,0,0,0,0,0,0,0,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1288,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1289,,0,0,0,0,0,0,0,0,0,0,0,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1292,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1293,,0,0,0,0,0,0,0,0,0,0,0,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,9,1296,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1463,"            super(fieldType, maxParsedDigits, signed);",3,0,0,0,2,1,0,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1464,            iMinPrintedDigits = minPrintedDigits;,2,0,0,0,0,0,0,0,1,2,37,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1465,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1468,            return iMaxParsedDigits;,1,0,0,0,0,1,0,0,0,2,24,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1475,                DateTimeField field = iFieldType.getField(chrono);,1,0,0,1,2,0,3,1,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1476,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",0,0,0,1,4,0,7,0,0,3,76,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1479,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1477,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1478,"                appendUnknownString(buf, iMinPrintedDigits);",0,0,0,0,2,0,3,0,1,3,44,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1480,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1486,                DateTimeField field = iFieldType.getField(chrono);,1,0,0,1,2,0,3,1,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1487,"                FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);",0,0,0,1,4,0,7,0,0,3,75,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1490,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1488,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1489,"                printUnknownString(out, iMinPrintedDigits);",0,0,0,0,2,0,3,0,1,3,43,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1491,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1494,            if (partial.isSupported(iFieldType)) {,0,0,0,2,5,1,3,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1496,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);",0,0,0,1,4,0,7,0,0,3,81,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1499,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1497,                } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1498,"                    appendUnknownString(buf, iMinPrintedDigits);",0,0,0,0,2,0,3,0,1,3,44,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1501,"                appendUnknownString(buf, iMinPrintedDigits);",0,0,0,0,2,0,3,0,1,3,44,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1503,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1506,            if (partial.isSupported(iFieldType)) {,0,0,0,2,5,1,3,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1508,"                    FormatUtils.writePaddedInteger(out, partial.get(iFieldType), iMinPrintedDigits);",0,0,0,1,4,0,7,0,0,3,80,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1511,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1509,                } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1510,"                    printUnknownString(out, iMinPrintedDigits);",0,0,0,0,2,0,3,0,1,3,43,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1513,"                printUnknownString(out, iMinPrintedDigits);",0,0,0,0,2,0,3,0,1,3,43,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1515,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1319,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1320,            iFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1321,            iMaxParsedDigits = maxParsedDigits;,2,0,0,0,0,0,0,0,1,2,35,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1322,            iSigned = signed;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1323,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1326,            return iMaxParsedDigits;,1,0,0,0,0,1,0,0,0,2,24,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1330,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",2,1,0,1,4,1,5,0,0,6,65,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1332,            boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1333,            int length = 0;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1334,            while (length < limit) {,2,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1335,                char c = text.charAt(position + length);,3,1,0,1,2,1,2,0,0,6,40,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1336,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,4,6,0,2,5,1,0,0,2,6,55,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1337,                    negative = c == '-';,2,1,0,0,0,0,0,0,2,3,20,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1340,                    if (length + 1 >= limit || ,2,4,0,0,1,1,0,0,0,4,26,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1343,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1346,                    if (negative) {,1,0,0,1,3,1,0,0,0,4,15,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1347,                        length++;,1,0,0,0,0,0,0,0,1,2,9,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1350,                        position++;,1,0,0,0,0,0,0,0,1,2,11,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1353,"                    limit = Math.min(limit + 1, text.length() - position);",3,2,0,1,4,0,4,0,1,6,54,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1354,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1356,                if (c < '0' || c > '9') {,2,3,0,1,3,1,0,0,2,6,25,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1357,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1359,                length++;,1,0,0,0,0,0,0,0,1,2,9,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1360,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1362,            if (length == 0) {,1,1,0,1,3,1,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1363,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1367,            if (length >= 9) {,1,1,0,1,3,1,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1370,"                value = Integer.parseInt(text.substring(position, position += length));",3,0,0,0,4,0,5,0,2,4,71,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1372,                int i = position;,2,0,0,0,0,1,0,0,0,2,17,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1373,                if (negative) {,1,0,0,1,3,1,0,0,0,4,15,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1374,                    i++;,1,0,0,0,0,0,0,0,1,2,4,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1377,                    value = text.charAt(i++) - '0';,2,1,0,1,2,0,2,0,3,6,31,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1380,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1378,                } catch (StringIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,45,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1379,                    return ~position;,1,0,0,0,0,1,0,0,1,3,17,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1381,                position += length;,2,0,0,0,0,0,0,0,1,2,19,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1382,                while (i < position) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1383,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,4,5,0,2,8,0,2,0,3,6,63,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1385,                if (negative) {,1,0,0,1,3,1,0,0,0,4,15,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1386,                    value = -value;,2,0,0,0,0,0,0,0,2,2,15,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1390,"            bucket.saveField(iFieldType, value);",0,0,0,0,2,0,4,0,0,2,36,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1391,            return position;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,117,"        throw new UnsupportedOperationException(""Both printing and parsing not supported"");",0,0,0,1,2,2,0,1,2,5,83,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,133,        Object f = getFormatter();,1,0,0,1,2,0,1,1,1,6,26,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,134,        if (isPrinter(f)) {,0,0,0,2,5,1,2,0,1,5,19,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,135,            return (DateTimePrinter) f;,1,0,0,1,2,1,0,1,0,5,27,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,137,"        throw new UnsupportedOperationException(""Printing is not supported"");",0,0,0,1,2,2,0,1,2,5,69,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,153,        Object f = getFormatter();,1,0,0,1,2,0,1,1,1,6,26,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,154,        if (isParser(f)) {,0,0,0,2,5,1,2,0,1,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,155,            return (DateTimeParser) f;,1,0,0,1,2,1,0,1,0,5,26,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,157,"        throw new UnsupportedOperationException(""Parsing is not supported"");",0,0,0,1,2,2,0,1,2,5,68,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,168,        return isFormatter(getFormatter());,0,0,0,2,4,1,2,0,2,5,35,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,178,        return isPrinter(getFormatter());,0,0,0,2,4,1,2,0,2,5,33,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,188,        return isParser(getFormatter());,0,0,0,2,4,1,2,0,2,5,32,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,197,        iFormatter = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,198,        iElementPairs.clear();,0,0,0,1,2,0,2,0,0,3,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,199,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,217,        if (formatter == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,218,"            throw new IllegalArgumentException(""No formatter supplied"");",0,0,0,1,2,2,0,1,2,5,60,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,220,"        return append0(formatter.getPrinter(), formatter.getParser());",0,0,0,1,6,1,5,0,1,5,62,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,238,        checkPrinter(printer);,0,0,0,1,2,0,2,0,1,4,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,239,"        return append0(printer, null);",0,0,0,0,2,1,2,0,1,4,30,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,257,        checkParser(parser);,0,0,0,1,2,0,2,0,1,4,20,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,258,"        return append0(null, parser);",0,0,0,0,2,1,2,0,1,4,29,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,276,        checkPrinter(printer);,0,0,0,1,2,0,2,0,1,4,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,277,        checkParser(parser);,0,0,0,1,2,0,2,0,1,4,20,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,278,"        return append0(printer, parser);",0,0,0,0,2,1,3,0,1,4,32,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,305,        if (printer != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,306,            checkPrinter(printer);,0,0,0,1,2,0,2,0,1,4,22,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,308,        if (parsers == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,309,"            throw new IllegalArgumentException(""No parsers supplied"");",0,0,0,1,2,2,0,1,2,5,58,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,311,        int length = parsers.length;,3,0,0,0,0,1,0,0,0,2,28,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,312,        if (length == 1) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,313,            if (parsers[0] == null) {,0,1,1,1,5,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,314,"                throw new IllegalArgumentException(""No parser supplied"");",0,0,0,1,2,2,0,1,2,5,57,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,316,"            return append0(printer, parsers[0]);",0,0,1,0,4,1,2,0,1,5,36,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,319,        DateTimeParser[] copyOfParsers = new DateTimeParser[length];,1,0,1,0,4,1,0,2,0,5,60,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,321,        for (i = 0; i < length - 1; i++) {,4,2,0,1,3,1,0,0,2,6,34,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,322,            if ((copyOfParsers[i] = parsers[i]) == null) {,0,1,1,2,9,1,0,0,1,6,46,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,323,"                throw new IllegalArgumentException(""Incomplete parser array"");",0,0,0,1,2,2,0,1,2,5,62,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,326,        copyOfParsers[i] = parsers[i];,0,0,1,0,4,0,0,0,1,3,30,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,328,"        return append0(printer, new MatchingParser(copyOfParsers));",1,0,0,1,4,2,2,1,2,7,59,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,345,        checkParser(parser);,0,0,0,1,2,0,2,0,1,4,20,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,346,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",2,0,0,0,6,1,0,2,0,4,63,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,347,"        return append0(null, new MatchingParser(parsers));",1,0,0,1,4,2,1,1,2,7,50,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,357,        if (parser == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,358,"            throw new IllegalArgumentException(""No parser supplied"");",0,0,0,1,2,2,0,1,2,5,57,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,360,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,368,        if (printer == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,369,"            throw new IllegalArgumentException(""No printer supplied"");",0,0,0,1,2,2,0,1,2,5,58,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,371,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,383,        iFormatter = null;,1,0,0,0,0,0,0,0,1,2,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,384,        iElementPairs.add(printer);,0,0,0,1,2,0,3,0,0,3,27,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,385,        iElementPairs.add(parser);,0,0,0,1,2,0,3,0,0,3,26,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,386,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,397,        return append0(new CharacterLiteral(c));,1,0,0,2,4,2,1,1,2,7,40,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,408,        if (text == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,409,"            throw new IllegalArgumentException(""Literal must not be null"");",0,0,0,1,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,411,        switch (text.length()) {,0,0,0,2,5,1,2,0,0,4,24,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,413,                return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,415,                return append0(new CharacterLiteral(text.charAt(0)));,0,0,0,3,6,2,3,1,2,6,53,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,417,                return append0(new StringLiteral(text));,1,0,0,2,4,2,1,1,2,7,40,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,434,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,435,"            throw new IllegalArgumentException(""Field type must not be null"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,437,        if (maxDigits < minDigits) {,2,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,438,            maxDigits = minDigits;,2,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,440,        if (minDigits < 0 || maxDigits <= 0) {,2,3,0,1,3,1,0,0,0,5,38,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,441,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,443,        if (minDigits <= 1) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",2,0,0,0,4,2,1,1,3,6,64,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,446,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",3,0,0,0,4,2,1,1,3,6,73,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,464,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,465,"            throw new IllegalArgumentException(""Field type must not be null"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,467,        if (numDigits <= 0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,468,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);",1,1,0,1,2,2,0,1,2,7,77,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,470,"        return append0(new FixedNumber(fieldType, numDigits, false));",2,0,0,0,4,2,1,1,3,6,61,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,486,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,487,"            throw new IllegalArgumentException(""Field type must not be null"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,489,        if (maxDigits < minDigits) {,2,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,490,            maxDigits = minDigits;,2,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,492,        if (minDigits < 0 || maxDigits <= 0) {,2,3,0,1,3,1,0,0,0,5,38,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,493,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,495,        if (minDigits <= 1) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,496,"            return append0(new UnpaddedNumber(fieldType, maxDigits, true));",2,0,0,0,4,2,1,1,3,6,63,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,498,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",3,0,0,0,4,2,1,1,3,6,72,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,516,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,517,"            throw new IllegalArgumentException(""Field type must not be null"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,519,        if (numDigits <= 0) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,520,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);",1,1,0,1,2,2,0,1,2,7,77,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,522,"        return append0(new FixedNumber(fieldType, numDigits, true));",2,0,0,0,4,2,1,1,3,6,60,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,534,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,535,"            throw new IllegalArgumentException(""Field type must not be null"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,537,"        return append0(new TextField(fieldType, false));",1,0,0,0,4,2,1,1,3,6,48,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,549,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,550,"            throw new IllegalArgumentException(""Field type must not be null"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,552,"        return append0(new TextField(fieldType, true));",1,0,0,0,4,2,1,1,3,6,47,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,570,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,571,"            throw new IllegalArgumentException(""Field type must not be null"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,573,        if (maxDigits < minDigits) {,2,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,574,            maxDigits = minDigits;,2,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,576,        if (minDigits < 0 || maxDigits <= 0) {,2,3,0,1,3,1,0,0,0,5,38,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,577,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,579,"        return append0(new Fraction(fieldType, minDigits, maxDigits));",3,0,0,0,4,2,1,1,2,6,62,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,597,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,77,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,614,"        return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,77,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,631,"        return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,75,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,648,"        return appendFraction(DateTimeFieldType.dayOfYear(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,75,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,665,"        return appendDecimal(DateTimeFieldType.millisOfSecond(), minDigits, 3);",0,0,0,1,4,1,4,0,1,5,71,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,675,"        return appendDecimal(DateTimeFieldType.millisOfDay(), minDigits, 8);",0,0,0,1,4,1,4,0,1,5,68,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,685,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,71,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,695,"        return appendDecimal(DateTimeFieldType.secondOfDay(), minDigits, 5);",0,0,0,1,4,1,4,0,1,5,68,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,705,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,69,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,715,"        return appendDecimal(DateTimeFieldType.minuteOfDay(), minDigits, 4);",0,0,0,1,4,1,4,0,1,5,68,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,725,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,66,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,735,"        return appendDecimal(DateTimeFieldType.clockhourOfDay(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,71,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,745,"        return appendDecimal(DateTimeFieldType.hourOfHalfday(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,70,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,755,"        return appendDecimal(DateTimeFieldType.clockhourOfHalfday(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,75,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,765,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",0,0,0,1,4,1,4,0,1,5,66,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,775,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,67,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,785,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",0,0,0,1,4,1,4,0,1,5,66,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,795,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,71,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,807,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,79,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,817,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0,0,0,1,4,1,4,0,1,5,68,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,829,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,75,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,851,"        return appendTwoDigitYear(pivot, false);",0,0,0,0,2,1,2,0,2,4,40,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,869,"        return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot, lenientParse));",2,0,0,1,6,2,3,1,2,7,80,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,891,"        return appendTwoDigitWeekyear(pivot, false);",0,0,0,0,2,1,2,0,2,4,44,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,909,"        return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot, lenientParse));",2,0,0,1,6,2,3,1,2,7,84,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,921,"        return appendDecimal(DateTimeFieldType.yearOfEra(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,74,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,933,"        return appendDecimal(DateTimeFieldType.yearOfCentury(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,78,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,945,"        return appendSignedDecimal(DateTimeFieldType.centuryOfEra(), minDigits, maxDigits);",0,0,0,1,4,1,5,0,1,5,83,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,955,        return appendText(DateTimeFieldType.halfdayOfDay());,0,0,0,2,4,1,3,0,1,5,52,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,965,        return appendText(DateTimeFieldType.dayOfWeek());,0,0,0,2,4,1,3,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,976,        return appendShortText(DateTimeFieldType.dayOfWeek());,0,0,0,2,4,1,3,0,1,5,54,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,987,        return appendText(DateTimeFieldType.monthOfYear());,0,0,0,2,4,1,3,0,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,997,        return appendShortText(DateTimeFieldType.monthOfYear());,0,0,0,2,4,1,3,0,1,5,56,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1007,        return appendText(DateTimeFieldType.era());,0,0,0,2,4,1,3,0,1,5,43,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1018,"        return append0(new TimeZoneName(TimeZoneName.LONG_NAME, null), null);",2,0,0,0,4,2,1,1,2,6,69,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1031,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.LONG_NAME, parseLookup);",4,0,0,0,2,1,0,2,1,5,72,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1032,"        return append0(pp, pp);",0,0,0,0,2,1,3,0,1,4,23,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1043,"        return append0(new TimeZoneName(TimeZoneName.SHORT_NAME, null), null);",2,0,0,0,4,2,1,1,2,6,70,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1057,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.SHORT_NAME, parseLookup);",4,0,0,0,2,1,0,2,1,5,73,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1058,"        return append0(pp, pp);",0,0,0,0,2,1,3,0,1,4,23,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1068,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);",4,0,0,0,2,1,1,0,1,5,57,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1118,        return append0(new TimeZoneOffset,0,0,0,0,1,2,1,1,2,5,33,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1132,"        DateTimeFormat.appendPatternTo(this, pattern);",0,0,0,0,2,1,3,0,0,3,46,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1133,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1150,                    f = parser;,2,0,0,0,0,0,0,0,1,2,11,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1155,                f = new Composite(iElementPairs);,2,0,0,1,2,1,0,1,2,6,33,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1167,                return ((Composite)f).isPrinter();,1,0,0,2,6,1,1,1,0,6,34,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1171,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1177,                return ((Composite)f).isParser();,1,0,0,2,6,1,1,1,0,6,33,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1181,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1185,        return (isPrinter(f) || isParser(f));,0,1,0,2,6,1,4,0,2,6,37,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1189,        for (int i = len; --i >= 0;) {,3,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1190,            buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1192,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1195,        for (int i = len; --i >= 0;) {,3,1,0,1,3,2,0,0,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1196,            out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1198,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2794,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2795,            iParsers = parsers;,2,0,0,0,0,0,0,0,1,2,19,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2796,            int est = 0;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2797,            for (int i=parsers.length; --i>=0 ;) {,4,1,0,1,3,2,0,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2798,                DateTimeParser parser = parsers[i];,1,0,1,0,2,0,0,1,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2799,                if (parser != null) {,1,1,0,1,3,1,0,0,0,5,21,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2800,                    int len = parser.estimateParsedLength();,1,0,0,1,2,1,2,0,0,5,40,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2801,                    if (len > est) {,2,1,0,1,3,1,0,0,0,5,16,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2802,                        est = len;,2,0,0,0,0,0,0,0,1,2,10,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2805,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2806,            iParsedLengthEstimate = est;,2,0,0,0,0,0,0,0,1,2,28,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2807,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2810,            return iParsedLengthEstimate;,1,0,0,0,0,1,0,0,0,2,29,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2814,            DateTimeParser[] parsers = iParsers;,2,0,0,0,2,0,0,1,0,3,36,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2815,            int length = parsers.length;,3,0,0,0,0,1,0,0,0,2,28,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2817,            final Object originalState = bucket.saveState();,1,0,0,1,2,1,2,1,1,7,48,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2818,            boolean isOptional = false;,1,0,0,0,0,1,0,0,1,3,27,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2820,            int bestValidPos = position;,2,0,0,0,0,1,0,0,0,2,28,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2821,            Object bestValidState = null;,1,0,0,0,0,0,0,1,0,2,29,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2823,            int bestInvalidPos = position;,2,0,0,0,0,1,0,0,0,2,30,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2825,            for (int i=0; i<length; i++) {,4,1,0,1,3,2,0,0,1,6,30,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2826,                DateTimeParser parser = parsers[i];,1,0,1,0,2,0,0,1,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2827,                if (parser == null) {,1,1,0,1,3,1,0,0,0,5,21,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2829,                    if (bestValidPos <= position) {,2,1,0,1,3,1,0,0,0,5,31,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2830,                        return position;,1,0,0,0,0,1,0,0,0,2,16,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2832,                    isOptional = true;,1,0,0,0,0,0,0,0,2,2,18,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2833,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2835,"                int parsePos = parser.parseInto(bucket, text, position);",1,0,0,0,2,1,5,0,0,4,56,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2836,                if (parsePos >= position) {,2,1,0,1,3,1,0,0,0,5,27,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2837,                    if (parsePos > bestValidPos) {,2,1,0,1,3,1,0,0,0,5,30,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2838,                        if (parsePos >= text.length() ||,1,3,0,1,3,1,2,0,0,6,32,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2843,                            return parsePos;,1,0,0,0,0,1,0,0,0,2,16,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2845,                        bestValidPos = parsePos;,2,0,0,0,0,0,0,0,1,2,24,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2846,                        bestValidState = bucket.saveState();,1,0,0,1,2,0,2,0,1,5,36,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2849,                    if (parsePos < 0) {,1,1,0,1,3,1,0,0,0,5,19,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2850,                        parsePos = ~parsePos;,2,0,0,0,0,0,0,0,2,2,21,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2851,                        if (parsePos > bestInvalidPos) {,2,1,0,1,3,1,0,0,0,5,32,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2852,                            bestInvalidPos = parsePos;,2,0,0,0,0,0,0,0,1,2,26,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2856,                bucket.restoreState(originalState);,0,0,0,1,2,0,3,0,0,3,35,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2859,            if (bestValidPos > position || (bestValidPos == position && isOptional)) {,5,4,0,2,5,1,0,0,0,5,74,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2861,                if (bestValidState != null) {,1,1,0,1,3,1,0,0,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2862,                    bucket.restoreState(bestValidState);,0,0,0,1,2,0,3,0,0,3,36,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2864,                return bestValidPos;,1,0,0,0,0,1,0,0,0,2,20,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2867,            return ~bestInvalidPos;,1,0,0,0,0,1,0,0,1,3,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2615,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2617,            List<Object> printerList = new ArrayList<Object>();,1,0,0,1,2,1,0,4,1,6,51,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2618,            List<Object> parserList = new ArrayList<Object>();,1,0,0,1,2,1,0,4,1,6,50,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2620,"            decompose(elementPairs, printerList, parserList);",0,0,0,0,2,0,4,0,1,3,49,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2622,            if (printerList.contains(null) || printerList.isEmpty()) {,0,1,0,2,7,1,4,0,0,5,58,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2623,                iPrinters = null;,1,0,0,0,0,0,0,0,1,2,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2624,                iPrintedLengthEstimate = 0;,1,0,0,0,0,0,0,0,1,2,27,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2626,                int size = printerList.size();,1,0,0,1,2,1,2,0,0,5,30,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2627,                iPrinters = new DateTimePrinter[size];,1,0,1,0,2,1,0,1,1,6,38,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2628,                int printEst = 0;,1,0,0,0,0,1,0,0,0,2,17,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2629,                for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2630,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,1,0,0,1,4,0,3,2,0,5,63,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2631,                    printEst += printer.estimatePrintedLength();,1,0,0,1,2,0,2,0,1,5,44,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2632,                    iPrinters[i] = printer;,1,0,1,0,2,0,0,0,1,4,23,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2634,                iPrintedLengthEstimate = printEst;,2,0,0,0,0,0,0,0,1,2,34,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2637,            if (parserList.contains(null) || parserList.isEmpty()) {,0,1,0,2,7,1,4,0,0,5,56,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2638,                iParsers = null;,1,0,0,0,0,0,0,0,1,2,16,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2639,                iParsedLengthEstimate = 0;,1,0,0,0,0,0,0,0,1,2,26,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2641,                int size = parserList.size();,1,0,0,1,2,1,2,0,0,5,29,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2642,                iParsers = new DateTimeParser[size];,1,0,1,0,2,1,0,1,1,6,36,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2643,                int parseEst = 0;,1,0,0,0,0,1,0,0,0,2,17,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2644,                for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2645,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,1,0,0,1,4,0,3,2,0,5,59,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2646,                    parseEst += parser.estimateParsedLength();,1,0,0,1,2,0,2,0,1,5,42,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2647,                    iParsers[i] = parser;,1,0,1,0,2,0,0,0,1,4,21,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2649,                iParsedLengthEstimate = parseEst;,2,0,0,0,0,0,0,0,1,2,33,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2651,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2654,            return iPrintedLengthEstimate;,1,0,0,0,0,1,0,0,0,2,30,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2660,            DateTimePrinter[] elements = iPrinters;,2,0,0,0,2,0,0,1,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2661,            if (elements == null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2662,                throw new UnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,42,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2665,            if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2667,                locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2670,            int len = elements.length;,3,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2671,            for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2672,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0,0,1,0,4,0,7,0,0,3,78,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2674,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2679,            DateTimePrinter[] elements = iPrinters;,2,0,0,0,2,0,0,1,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2680,            if (elements == null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2681,                throw new UnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,42,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2684,            if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2686,                locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2689,            int len = elements.length;,3,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2690,            for (int i = 0; i < len; i++) {,4,1,0,1,3,2,0,0,1,6,31,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2691,"                elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);",0,0,1,0,4,0,7,0,0,3,78,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2693,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2696,            DateTimePrinter[] elements = iPrinters;,2,0,0,0,2,0,0,1,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2697,            if (elements == null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2698,                throw new UnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,42,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2701,            if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2703,                locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2706,            int len = elements.length;,3,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2707,            for (int i=0; i<len; i++) {,4,1,0,1,3,2,0,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2708,"                elements[i].printTo(buf, partial, locale);",0,0,1,0,4,0,4,0,0,3,42,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2710,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2713,            DateTimePrinter[] elements = iPrinters;,2,0,0,0,2,0,0,1,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2714,            if (elements == null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2715,                throw new UnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,42,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2718,            if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2720,                locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2723,            int len = elements.length;,3,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2724,            for (int i=0; i<len; i++) {,4,1,0,1,3,2,0,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2725,"                elements[i].printTo(out, partial, locale);",0,0,1,0,4,0,4,0,0,3,42,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2727,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2730,            return iParsedLengthEstimate;,1,0,0,0,0,1,0,0,0,2,29,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2734,            DateTimeParser[] elements = iParsers;,2,0,0,0,2,0,0,1,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2735,            if (elements == null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2736,                throw new UnsupportedOperationException();,0,0,0,1,2,2,0,1,1,5,42,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2739,            int len = elements.length;,3,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2740,            for (int i=0; i<len && position >= 0; i++) {,5,3,0,1,3,2,0,0,1,6,44,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2741,"                position = elements[i].parseInto(bucket, text, position);",1,0,1,0,4,0,4,0,1,5,57,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2743,            return position;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2747,            return iPrinters != null;,1,1,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2751,            return iParsers != null;,1,1,0,0,0,1,0,0,0,3,24,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2759,            int size = elementPairs.size();,1,0,0,1,2,1,2,0,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2760,            for (int i=0; i<size; i+=2) {,4,1,0,1,3,2,0,0,1,6,29,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2761,                Object element = elementPairs.get(i);,1,0,0,1,2,0,3,1,0,5,37,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2762,                if (element instanceof Composite) {,1,0,0,1,3,2,0,1,0,5,35,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2763,"                    addArrayToList(printerList, ((Composite)element).iPrinters);",2,0,0,2,6,0,2,1,1,6,60,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2765,                    printerList.add(element);,0,0,0,1,2,0,3,0,0,3,25,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2768,                element = elementPairs.get(i + 1);,2,1,0,1,2,0,2,0,1,6,34,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2769,                if (element instanceof Composite) {,1,0,0,1,3,2,0,1,0,5,35,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2770,"                    addArrayToList(parserList, ((Composite)element).iParsers);",2,0,0,2,6,0,2,1,1,6,58,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2772,                    parserList.add(element);,0,0,0,1,2,0,3,0,0,3,24,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2775,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2778,            if (array != null) {,1,1,0,1,3,1,0,0,0,5,20,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2779,                for (int i=0; i<array.length; i++) {,5,1,0,1,3,2,0,0,1,6,36,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2780,                    list.add(array[i]);,0,0,1,1,4,0,2,0,0,4,19,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2783,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2544,    static enum TimeZoneId,1,0,0,0,0,2,0,0,1,3,22,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2547,        INSTANCE;,1,0,0,0,0,0,0,0,0,1,9,3,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2548,        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();,1,0,0,1,2,2,2,2,2,7,66,3,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2551,            int max = 0;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2552,            for (String id : ALL_IDS) {,2,0,0,1,3,1,0,1,0,5,27,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2553,"                max = Math.max(max, id.length());",1,0,0,1,4,0,5,0,1,5,33,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2554,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2555,            MAX_LENGTH = max;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2556,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2559,            return MAX_LENGTH;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2565,"            buf.append(displayZone != null ? displayZone.getID() : """");",1,1,0,2,4,0,4,0,1,6,59,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2566,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2571,"            out.write(displayZone != null ? displayZone.getID() : """");",1,1,0,2,4,0,4,0,1,6,58,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2572,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2576,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2580,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2583,            return MAX_LENGTH;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2587,            String str = text.substring(position);,1,0,0,1,2,0,3,1,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2588,            String best = null;,1,0,0,0,0,0,0,1,0,2,19,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2589,            for (String id : ALL_IDS) {,2,0,0,1,3,1,0,1,0,5,27,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2590,                if (str.startsWith(id)) {,0,0,0,2,5,1,3,0,0,4,25,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2591,                    if (best == null || id.length() > best.length()) {,1,3,0,2,7,1,4,0,0,6,50,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2592,                        best = id;,2,0,0,0,0,0,0,0,1,2,10,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2595,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2596,            if (best != null) {,1,1,0,1,3,1,0,0,0,5,19,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2597,                bucket.setZone(DateTimeZone.forID(best));,0,0,0,2,4,0,5,0,0,3,41,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2598,                return position + best.length();,1,1,0,1,2,1,2,0,0,6,32,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2600,            return ~position;,1,0,0,0,0,1,0,0,1,3,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2477,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2478,            iType = type;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2479,            iParseLookup = parseLookup;,2,0,0,0,0,0,0,0,1,2,27,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2480,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2483,            return (iType == SHORT_NAME ? 4 : 20);,2,1,0,1,2,1,0,0,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2489,"            buf.append(print(instant - displayOffset, displayZone, locale));",2,1,0,0,4,0,5,0,1,5,64,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2490,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2495,"            out.write(print(instant - displayOffset, displayZone, locale));",2,1,0,0,4,0,5,0,1,5,63,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2496,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2499,            if (displayZone == null) {,1,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2500,"                return """";  // no zone",0,0,0,0,0,1,0,0,1,2,22,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2502,            switch (iType) {,1,0,0,1,3,1,0,0,0,4,16,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2504,"                    return displayZone.getName(instant, locale);",0,0,0,0,2,1,4,0,0,3,44,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2506,"                    return displayZone.getShortName(instant, locale);",0,0,0,0,2,1,4,0,0,3,49,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2508,"            return """";",0,0,0,0,0,1,0,0,1,2,10,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2513,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2517,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2520,            return (iType == SHORT_NAME ? 4 : 20);,2,1,0,1,2,1,0,0,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2524,"            Map<String, DateTimeZone> parseLookup = iParseLookup;",2,0,0,0,0,0,0,3,0,2,53,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2525,            parseLookup = (parseLookup != null ? parseLookup : DateTimeUtils.getDefaultTimeZoneNames());,3,1,0,2,4,0,2,0,1,6,92,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2526,            String str = text.substring(position);,1,0,0,1,2,0,3,1,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2527,            String matched = null;,1,0,0,0,0,0,0,1,0,2,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2528,            for (String name : parseLookup.keySet()) {,1,0,0,2,5,1,2,1,0,6,42,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2529,                if (str.startsWith(name)) {,0,0,0,2,5,1,3,0,0,4,27,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2530,                    if (matched == null || name.length() > matched.length()) {,1,3,0,2,7,1,4,0,0,6,58,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2531,                        matched = name;,2,0,0,0,0,0,0,0,1,2,15,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2534,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2535,            if (matched != null) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2536,                bucket.setZone(parseLookup.get(matched));,0,0,0,2,4,0,5,0,0,3,41,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2537,                return position + matched.length();,1,1,0,1,2,1,2,0,0,6,35,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2539,            return ~position;,1,0,0,0,0,1,0,0,1,3,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2126,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2129,                minFields = 4;,1,0,0,0,0,0,0,0,1,2,14,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2130,                maxFields = 4;,1,0,0,0,0,0,0,0,1,2,14,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2137,            int est = 1 + iMinFields << 1;,2,2,0,0,0,1,0,0,0,3,30,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2138,            if (iShowSeparators) {,1,0,0,1,3,1,0,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2139,                est += iMinFields - 1;,2,1,0,0,0,0,0,0,1,3,22,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2141,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,2,3,0,2,5,1,2,0,0,6,74,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2142,                est = iZeroOffsetPrintText.length();,1,0,0,1,2,0,2,0,1,5,36,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2144,            return est;,1,0,0,0,0,1,0,0,0,2,11,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2150,            if (displayZone == null) {,1,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2151,                return;  // no zone,0,0,0,0,0,1,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2153,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,2,3,0,1,3,1,0,0,0,5,57,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2154,                buf.append(iZeroOffsetPrintText);,0,0,0,1,2,0,3,0,0,3,33,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2155,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2157,            if (displayOffset >= 0) {,1,1,0,1,3,1,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2158,                buf.append('+');,0,0,0,1,2,0,2,0,1,4,16,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2160,                buf.append('-');,0,0,0,1,2,0,2,0,1,4,16,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2161,                displayOffset = -displayOffset;,2,0,0,0,0,0,0,0,2,2,31,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2164,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,1,0,0,0,3,62,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2165,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,0,2,0,4,0,0,2,47,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2166,            if (iMaxFields == 1) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2167,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2169,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,1,2,1,0,0,1,6,64,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2170,            if (displayOffset == 0 && iMinFields <= 1) {,2,3,0,1,3,1,0,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2171,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2174,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,1,0,0,0,3,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2175,            if (iShowSeparators) {,1,0,0,1,3,1,0,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2176,                buf.append(':');,0,0,0,1,2,0,2,0,1,4,16,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2178,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,0,2,0,4,0,0,2,49,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2179,            if (iMaxFields == 2) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2180,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2182,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,0,0,0,1,3,63,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2183,            if (displayOffset == 0 && iMinFields <= 2) {,2,3,0,1,3,1,0,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2184,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2187,            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,1,0,0,0,3,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2188,            if (iShowSeparators) {,1,0,0,1,3,1,0,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2189,                buf.append(':');,0,0,0,1,2,0,2,0,1,4,16,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2191,"            FormatUtils.appendPaddedInteger(buf, seconds, 2);",0,0,0,0,2,0,4,0,0,2,49,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2192,            if (iMaxFields == 3) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2193,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2195,            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,0,0,0,1,3,63,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2196,            if (displayOffset == 0 && iMinFields <= 3) {,2,3,0,1,3,1,0,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2197,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2200,            if (iShowSeparators) {,1,0,0,1,3,1,0,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2201,                buf.append('.');,0,0,0,1,2,0,2,0,1,4,16,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2203,"            FormatUtils.appendPaddedInteger(buf, displayOffset, 3);",0,0,0,0,2,0,4,0,0,2,55,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2204,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2209,            if (displayZone == null) {,1,1,0,1,3,1,0,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2210,                return;  // no zone,0,0,0,0,0,1,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2212,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,2,3,0,1,3,1,0,0,0,5,57,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2213,                out.write(iZeroOffsetPrintText);,0,0,0,1,2,0,3,0,0,3,32,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2214,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2216,            if (displayOffset >= 0) {,1,1,0,1,3,1,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2217,                out.write('+');,0,0,0,1,2,0,2,0,1,4,15,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2219,                out.write('-');,0,0,0,1,2,0,2,0,1,4,15,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2220,                displayOffset = -displayOffset;,2,0,0,0,0,0,0,0,2,2,31,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2223,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,1,0,0,0,3,62,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2224,"            FormatUtils.writePaddedInteger(out, hours, 2);",0,0,0,0,2,0,4,0,0,2,46,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2225,            if (iMaxFields == 1) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2226,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2228,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,1,2,1,0,0,1,6,64,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2229,            if (displayOffset == 0 && iMinFields == 1) {,2,3,0,1,3,1,0,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2230,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2233,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,1,0,0,0,3,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2234,            if (iShowSeparators) {,1,0,0,1,3,1,0,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2235,                out.write(':');,0,0,0,1,2,0,2,0,1,4,15,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2237,"            FormatUtils.writePaddedInteger(out, minutes, 2);",0,0,0,0,2,0,4,0,0,2,48,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2238,            if (iMaxFields == 2) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2239,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2241,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,0,0,0,1,3,63,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2242,            if (displayOffset == 0 && iMinFields == 2) {,2,3,0,1,3,1,0,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2243,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2246,            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,1,0,0,0,3,66,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2247,            if (iShowSeparators) {,1,0,0,1,3,1,0,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2248,                out.write(':');,0,0,0,1,2,0,2,0,1,4,15,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2250,"            FormatUtils.writePaddedInteger(out, seconds, 2);",0,0,0,0,2,0,4,0,0,2,48,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2251,            if (iMaxFields == 3) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2252,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2254,            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,0,0,0,1,3,63,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2255,            if (displayOffset == 0 && iMinFields == 3) {,2,3,0,1,3,1,0,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2256,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2259,            if (iShowSeparators) {,1,0,0,1,3,1,0,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2260,                out.write('.');,0,0,0,1,2,0,2,0,1,4,15,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2262,"            FormatUtils.writePaddedInteger(out, displayOffset, 3);",0,0,0,0,2,0,4,0,0,2,54,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2263,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2267,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2271,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2274,            return estimatePrintedLength();,0,0,0,1,2,1,1,0,1,5,31,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2282,                if (iZeroOffsetParseText.length() == 0) {,0,1,0,2,5,1,2,0,0,5,41,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2284,                    if (limit > 0) {,1,1,0,1,3,1,0,0,0,5,16,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2285,                        char c = text.charAt(position);,1,0,0,1,2,1,3,0,0,5,31,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2286,                        if (c == '-' || c == '+') {,2,3,0,1,3,1,0,0,2,6,27,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2287,                            break zeroOffset;,1,0,0,0,0,1,0,0,0,2,17,14,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2290,                    bucket.setOffset(Integer.valueOf(0));,0,0,0,2,4,0,4,0,0,3,37,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2291,                    return position;,1,0,0,0,0,1,0,0,0,2,16,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2293,"                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {",0,0,0,1,7,1,6,0,1,5,97,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2294,                    bucket.setOffset(Integer.valueOf(0));,0,0,0,2,4,0,4,0,0,3,37,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2295,                    return position + iZeroOffsetParseText.length();,1,1,0,1,2,1,2,0,0,6,48,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2302,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2312,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2332,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2339,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2350,                    break parse;,1,0,0,0,0,1,0,0,0,2,12,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2359,                } else if (c >= '0' && c <= '9') {,2,3,0,1,4,2,0,0,2,6,34,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2360,                    expectSeparators = false;,1,0,0,0,0,0,0,0,2,2,25,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2369,                    break parse;,1,0,0,0,0,1,0,0,0,2,12,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2372,                    return ~position;,1,0,0,0,0,1,0,0,1,3,17,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2377,                    return ~position;,1,0,0,0,0,1,0,0,1,3,17,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2389,                if (expectSeparators) {,1,0,0,1,3,1,0,0,0,4,23,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2390,                    if (text.charAt(position) != ':') {,0,1,0,2,5,1,3,0,1,6,35,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2391,                        break parse;,1,0,0,0,0,1,0,0,0,2,12,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2393,                    limit--;,1,0,0,0,0,0,0,0,1,2,8,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2394,                    position++;,1,0,0,0,0,0,0,0,1,2,11,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2397,"                count = digitCount(text, position, 2);",1,0,0,0,2,0,3,0,2,4,38,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2398,                if (count == 0 && !expectSeparators) {,2,2,0,1,3,1,0,0,1,6,38,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2399,                    break parse;,1,0,0,0,0,1,0,0,0,2,12,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2400,                } else if (count < 2) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2402,                    return ~position;,1,0,0,0,0,1,0,0,1,3,17,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2405,"                int seconds = FormatUtils.parseTwoDigits(text, position);",1,0,0,0,2,1,4,0,0,4,57,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2406,                if (seconds > 59) {,1,1,0,1,3,1,0,0,0,5,19,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2407,                    return ~position;,1,0,0,0,0,1,0,0,1,3,17,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2409,                offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,0,0,0,1,3,56,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2410,                limit -= 2;,1,0,0,0,0,0,0,0,1,2,11,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2411,                position += 2;,1,0,0,0,0,0,0,0,1,2,14,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2415,                if (limit <= 0) {,1,1,0,1,3,1,0,0,0,5,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2416,                    break parse;,1,0,0,0,0,1,0,0,0,2,12,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2419,                if (expectSeparators) {,1,0,0,1,3,1,0,0,0,4,23,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2420,"                    if (text.charAt(position) != '.' && text.charAt(position) != ',') {",0,3,0,1,7,1,6,0,2,6,67,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2421,                        break parse;,1,0,0,0,0,1,0,0,0,2,12,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2423,                    limit--;,1,0,0,0,0,0,0,0,1,2,8,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2424,                    position++;,1,0,0,0,0,0,0,0,1,2,11,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2427,"                count = digitCount(text, position, 3);",1,0,0,0,2,0,3,0,2,4,38,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2428,                if (count == 0 && !expectSeparators) {,2,2,0,1,3,1,0,0,1,6,38,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2429,                    break parse;,1,0,0,0,0,1,0,0,0,2,12,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2430,                } else if (count < 1) {,1,1,0,1,4,2,0,0,0,5,23,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2432,                    return ~position;,1,0,0,0,0,1,0,0,1,3,17,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2435,                offset += (text.charAt(position++) - '0') * 100;,2,2,0,2,4,0,2,0,3,6,48,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2436,                if (count > 1) {,1,1,0,1,3,1,0,0,0,5,16,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2437,                    offset += (text.charAt(position++) - '0') * 10;,2,2,0,2,4,0,2,0,3,6,47,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2438,                    if (count > 2) {,1,1,0,1,3,1,0,0,0,5,16,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2439,                        offset += text.charAt(position++) - '0';,2,1,0,1,2,0,2,0,3,6,40,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2458,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1895,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1896,            iFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1898,            if (maxDigits > 18) {,1,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1899,                maxDigits = 18;,1,0,0,0,0,0,0,0,1,2,15,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1901,            iMinDigits = minDigits;,2,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1902,            iMaxDigits = maxDigits;,2,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1903,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1906,            return iMaxDigits;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1913,"                printTo(buf, null, instant, chrono);",0,0,0,0,2,0,4,0,1,3,36,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1916,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1914,            } catch (IOException e) {,1,0,0,1,4,1,0,1,0,5,25,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1917,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1922,"            printTo(null, out, instant, chrono);",0,0,0,0,2,0,4,0,1,3,36,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1923,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1928,"            long millis = partial.getChronology().set(partial, 0L);",1,0,0,1,4,1,4,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1930,"                printTo(buf, null, millis, partial.getChronology());",0,0,0,1,4,0,5,0,1,4,52,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1933,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1931,            } catch (IOException e) {,1,0,0,1,4,1,0,1,0,5,25,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1934,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1939,"            long millis = partial.getChronology().set(partial, 0L);",1,0,0,1,4,1,4,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1940,"            printTo(null, out, millis, partial.getChronology());",0,0,0,1,4,0,5,0,1,4,52,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1941,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1946,            DateTimeField field = iFieldType.getField(chrono);,1,0,0,1,2,0,3,1,0,5,50,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1947,            int minDigits = iMinDigits;,2,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1951,                fraction = field.remainder(instant);,1,0,0,1,2,0,3,0,1,5,36,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1959,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1952,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1953,                if (buf != null) {,1,1,0,1,3,1,0,0,0,5,18,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1954,"                    appendUnknownString(buf, minDigits);",0,0,0,0,2,0,3,0,1,3,36,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1956,"                    printUnknownString(out, minDigits);",0,0,0,0,2,0,3,0,1,3,35,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1958,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1961,            if (fraction == 0) {,1,1,0,1,3,1,0,0,0,5,20,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1962,                if (buf != null) {,1,1,0,1,3,1,0,0,0,5,18,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1963,                    while (--minDigits >= 0) {,1,1,0,1,3,1,0,0,1,6,26,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1964,                        buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1967,                    while (--minDigits >= 0) {,1,1,0,1,3,1,0,0,1,6,26,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1968,                        out.write('0');,0,0,0,1,2,0,2,0,1,4,15,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1971,                return;,0,0,0,0,0,1,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1975,"            long[] fractionData = getFractionData(fraction, field);",1,0,0,0,4,1,3,0,1,5,55,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1976,            long scaled = fractionData[0];,1,0,1,0,2,1,0,0,0,4,30,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1977,            int maxDigits = (int) fractionData[1];,1,0,1,1,4,2,0,0,0,5,38,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1979,            if ((scaled & 0x7fffffff) == scaled) {,2,2,0,2,5,1,0,0,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1980,                str = Integer.toString((int) scaled);,2,0,0,2,4,1,2,0,1,6,37,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1982,                str = Long.toString(scaled);,1,0,0,1,2,0,3,0,1,5,28,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1985,            int length = str.length();,1,0,0,1,2,1,2,0,0,5,26,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1986,            int digits = maxDigits;,2,0,0,0,0,1,0,0,0,2,23,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1987,            while (length < digits) {,2,1,0,1,3,1,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1988,                if (buf != null) {,1,1,0,1,3,1,0,0,0,5,18,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1989,                    buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1991,                    out.write('0');,0,0,0,1,2,0,2,0,1,4,15,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1993,                minDigits--;,1,0,0,0,0,0,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1994,                digits--;,1,0,0,0,0,0,0,0,1,2,9,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1997,            if (minDigits < digits) {,2,1,0,1,3,1,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1999,                while (minDigits < digits) {,2,1,0,1,3,1,0,0,0,5,28,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2000,                    if (length <= 1 || str.charAt(length - 1) != '0') {,2,4,0,2,5,1,2,0,1,7,51,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2001,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2003,                    digits--;,1,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2004,                    length--;,1,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2006,                if (length < str.length()) {,1,1,0,2,5,1,2,0,0,6,28,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2007,                    if (buf != null) {,1,1,0,1,3,1,0,0,0,5,18,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2008,                        for (int i=0; i<length; i++) {,4,1,0,1,3,2,0,0,1,6,30,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2009,                            buf.append(str.charAt(i));,0,0,0,2,4,0,5,0,0,3,26,14,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2012,                        for (int i=0; i<length; i++) {,4,1,0,1,3,2,0,0,1,6,30,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2013,                            out.write(str.charAt(i));,0,0,0,2,4,0,5,0,0,3,25,14,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2016,                    return;,0,0,0,0,0,1,0,0,1,2,7,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2020,            if (buf != null) {,1,1,0,1,3,1,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2021,                buf.append(str);,0,0,0,1,2,0,3,0,0,3,16,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2023,                out.write(str);,0,0,0,1,2,0,3,0,0,3,15,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2025,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2028,            long rangeMillis = field.getDurationField().getUnitMillis();,1,0,0,1,4,1,3,0,0,5,60,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2030,            int maxDigits = iMaxDigits;,2,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2032,                switch (maxDigits) {,1,0,0,1,3,1,0,0,0,4,20,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2033,                default: scalar = 1L; break;,1,0,0,0,0,2,0,0,2,3,28,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2034,                case 1:  scalar = 10L; break;,1,0,0,0,0,2,0,0,1,3,29,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2035,                case 2:  scalar = 100L; break;,1,0,0,0,0,2,0,0,1,3,30,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2036,                case 3:  scalar = 1000L; break;,1,0,0,0,0,2,0,0,1,3,31,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2037,                case 4:  scalar = 10000L; break;,1,0,0,0,0,2,0,0,1,3,32,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2038,                case 5:  scalar = 100000L; break;,1,0,0,0,0,2,0,0,1,3,33,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2039,                case 6:  scalar = 1000000L; break;,1,0,0,0,0,2,0,0,1,3,34,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2040,                case 7:  scalar = 10000000L; break;,1,0,0,0,0,2,0,0,1,3,35,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2041,                case 8:  scalar = 100000000L; break;,1,0,0,0,0,2,0,0,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2042,                case 9:  scalar = 1000000000L; break;,1,0,0,0,0,2,0,0,1,3,37,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2043,                case 10: scalar = 10000000000L; break;,1,0,0,0,0,2,0,0,1,3,38,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2044,                case 11: scalar = 100000000000L; break;,1,0,0,0,0,2,0,0,1,3,39,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2045,                case 12: scalar = 1000000000000L; break;,1,0,0,0,0,2,0,0,1,3,40,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2046,                case 13: scalar = 10000000000000L; break;,1,0,0,0,0,2,0,0,1,3,41,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2047,                case 14: scalar = 100000000000000L; break;,1,0,0,0,0,2,0,0,1,3,42,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2048,                case 15: scalar = 1000000000000000L; break;,1,0,0,0,0,2,0,0,1,3,43,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2049,                case 16: scalar = 10000000000000000L; break;,1,0,0,0,0,2,0,0,1,3,44,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2050,                case 17: scalar = 100000000000000000L; break;,1,0,0,0,0,2,0,0,1,3,45,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2051,                case 18: scalar = 1000000000000000000L; break;,1,0,0,0,0,2,0,0,1,3,46,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2053,                if (((rangeMillis * scalar) / scalar) == rangeMillis) {,4,3,0,3,7,1,0,0,0,5,55,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2054,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2057,                maxDigits--;,1,0,0,0,0,0,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2060,"            return new long[] {fraction * scalar / rangeMillis, maxDigits};",4,2,0,0,4,3,0,0,0,4,63,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2064,            return iMaxDigits;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2068,            DateTimeField field = iFieldType.getField(bucket.getChronology());,1,0,0,2,4,0,4,1,0,5,66,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2070,"            int limit = Math.min(iMaxDigits, text.length() - position);",2,1,0,1,4,1,5,0,0,6,59,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2072,            long value = 0;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2073,            long n = field.getDurationField().getUnitMillis() * 10;,1,1,0,1,4,1,3,0,0,6,55,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2074,            int length = 0;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2075,            while (length < limit) {,2,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2076,                char c = text.charAt(position + length);,3,1,0,1,2,1,2,0,0,6,40,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2077,                if (c < '0' || c > '9') {,2,3,0,1,3,1,0,0,2,6,25,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2078,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2080,                length++;,1,0,0,0,0,0,0,0,1,2,9,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2081,                long nn = n / 10;,2,1,0,0,0,1,0,0,0,3,17,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2082,                value += (c - '0') * nn;,3,2,0,1,2,0,0,0,2,5,24,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2083,                n = nn;,2,0,0,0,0,0,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2084,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2086,            value /= 10;,1,0,0,0,0,0,0,0,1,2,12,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2088,            if (length == 0) {,1,1,0,1,3,1,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2089,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2092,            if (value > Integer.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2093,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2096,            DateTimeField parseField = new PreciseDateTimeField(,1,0,0,0,1,1,0,2,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2101,"            bucket.saveField(parseField, (int) value);",1,0,0,1,4,1,3,0,0,5,42,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,2103,            return position + length;,2,1,0,0,0,1,0,0,0,3,25,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1754,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1755,            iFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1756,            iShort = isShort;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1757,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1748,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",1,0,0,0,2,2,0,5,2,5,74,3,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1760,            return iShort ? 6 : 20;,1,0,0,0,0,1,0,0,0,2,23,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1767,"                buf.append(print(instant, chrono, locale));",0,0,0,0,4,0,6,0,1,3,43,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1770,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1768,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1769,                buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1771,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1777,"                out.write(print(instant, chrono, locale));",0,0,0,0,4,0,6,0,1,3,42,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1780,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1778,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1779,                out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1781,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1785,"                buf.append(print(partial, locale));",0,0,0,0,4,0,5,0,1,3,35,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1788,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1786,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1787,                buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1789,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1793,"                out.write(print(partial, locale));",0,0,0,0,4,0,5,0,1,3,34,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1796,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1794,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1795,                out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1797,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1800,            DateTimeField field = iFieldType.getField(chrono);,1,0,0,1,2,0,3,1,0,5,50,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1801,            if (iShort) {,1,0,0,1,3,1,0,0,0,4,13,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1802,"                return field.getAsShortText(instant, locale);",0,0,0,0,2,1,4,0,0,3,45,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1804,"                return field.getAsText(instant, locale);",0,0,0,0,2,1,4,0,0,3,40,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1809,            if (partial.isSupported(iFieldType)) {,0,0,0,2,5,1,3,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1810,                DateTimeField field = iFieldType.getField(partial.getChronology());,1,0,0,2,4,0,4,1,0,5,67,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1811,                if (iShort) {,1,0,0,1,3,1,0,0,0,4,13,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1812,"                    return field.getAsShortText(partial, locale);",0,0,0,0,2,1,4,0,0,3,45,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1814,"                    return field.getAsText(partial, locale);",0,0,0,0,2,1,4,0,0,3,40,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1817,"                return ""\ufffd"";",0,0,0,0,0,1,0,0,1,2,16,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1822,            return estimatePrintedLength();,0,0,0,1,2,1,1,0,1,5,31,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1827,            Locale locale = bucket.getLocale();,1,0,0,1,2,0,2,1,0,5,35,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1830,            Set<String> validValues = null;,1,0,0,0,0,0,0,2,0,2,31,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1831,            int maxLength = 0;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1832,            synchronized (cParseCache) {,1,0,0,1,3,1,0,0,0,4,28,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1833,"                Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);",1,0,0,1,4,0,3,3,0,5,68,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1834,                if (innerMap == null) {,1,1,0,1,3,1,0,0,0,5,23,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1835,"                    innerMap = new HashMap<DateTimeFieldType, Object[]>();",1,0,0,1,4,1,0,3,2,6,54,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1836,"                    cParseCache.put(locale, innerMap);",0,0,0,0,2,0,4,0,0,2,34,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1838,                Object[] array = innerMap.get(iFieldType);,1,0,0,1,4,0,3,1,0,5,42,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1839,                if (array == null) {,1,1,0,1,3,1,0,0,0,5,20,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1840,                    validValues = new HashSet<String>(32);,1,0,0,1,2,1,0,2,2,6,38,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1841,"                    MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);",3,0,0,0,2,1,0,2,1,5,63,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1842,                    Property property = dt.property(iFieldType);,1,0,0,1,2,0,3,1,0,5,44,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1843,                    int min = property.getMinimumValueOverall();,1,0,0,1,2,1,2,0,0,5,44,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1844,                    int max = property.getMaximumValueOverall();,1,0,0,1,2,1,2,0,0,5,44,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1845,                    if (max - min > 32) {  // protect against invalid fields,2,2,0,1,3,1,0,0,0,5,56,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1846,                        return ~position;,1,0,0,0,0,1,0,0,1,3,17,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1848,                    maxLength = property.getMaximumTextLength(locale);,1,0,0,1,2,0,3,0,1,5,50,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1849,                    for (int i = min; i <= max; i++) {,5,1,0,1,3,2,0,0,1,6,34,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1850,                        property.set(i);,0,0,0,1,2,0,3,0,0,3,16,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1851,                        validValues.add(property.getAsShortText(locale));,0,0,0,2,4,0,5,0,0,3,49,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1852,                        validValues.add(property.getAsShortText(locale).toLowerCase(locale));,0,0,0,2,6,0,7,0,0,3,69,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1853,                        validValues.add(property.getAsShortText(locale).toUpperCase(locale));,0,0,0,2,6,0,7,0,0,3,69,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1854,                        validValues.add(property.getAsText(locale));,0,0,0,2,4,0,5,0,0,3,44,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1855,                        validValues.add(property.getAsText(locale).toLowerCase(locale));,0,0,0,2,6,0,7,0,0,3,64,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1856,                        validValues.add(property.getAsText(locale).toUpperCase(locale));,0,0,0,2,6,0,7,0,0,3,64,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1858,"                    if (""en"".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era()) {",1,2,0,3,9,1,5,0,1,7,81,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1860,"                        validValues.add(""BCE"");",0,0,0,1,2,0,2,0,1,4,23,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1861,"                        validValues.add(""bce"");",0,0,0,1,2,0,2,0,1,4,23,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1862,"                        validValues.add(""CE"");",0,0,0,1,2,0,2,0,1,4,22,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1863,"                        validValues.add(""ce"");",0,0,0,1,2,0,2,0,1,4,22,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1864,                        maxLength = 3;,1,0,0,0,0,0,0,0,1,2,14,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1866,"                    array = new Object[] {validValues, Integer.valueOf(maxLength)};",2,0,0,1,6,1,3,1,1,7,63,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1867,"                    innerMap.put(iFieldType, array);",0,0,0,0,2,0,4,0,0,2,32,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1868,                } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1869,                    validValues = (Set<String>) array[0];,1,0,1,1,4,0,0,2,1,6,37,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1870,                    maxLength = ((Integer) array[1]).intValue();,1,0,1,2,8,0,1,1,1,7,44,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1872,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1874,"            int limit = Math.min(text.length(), position + maxLength);",3,1,0,1,4,1,4,0,0,6,58,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1875,            for (int i = limit; i > position; i--) {,5,1,0,1,3,2,0,0,1,6,40,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1876,"                String match = text.substring(position, i);",1,0,0,0,2,0,4,1,0,4,43,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1877,                if (validValues.contains(match)) {,0,0,0,2,5,1,3,0,0,4,34,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1878,"                    bucket.saveField(iFieldType, match, locale);",0,0,0,0,2,0,5,0,0,2,44,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1879,                    return i;,1,0,0,0,0,1,0,0,0,2,9,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1882,            return ~position;,1,0,0,0,0,1,0,0,1,3,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1561,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1562,            iType = type;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1563,            iPivot = pivot;,2,0,0,0,0,0,0,0,1,2,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1564,            iLenientParse = lenientParse;,2,0,0,0,0,0,0,0,1,2,29,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1565,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1568,            return iLenientParse ? 4 : 2;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1572,            int limit = text.length() - position;,2,1,0,1,2,1,2,0,0,6,37,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1574,            if (!iLenientParse) {,1,0,0,1,3,1,0,0,1,5,21,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1575,"                limit = Math.min(2, limit);",1,0,0,0,2,0,3,0,1,4,27,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1576,                if (limit < 2) {,1,1,0,1,3,1,0,0,0,5,16,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1577,                    return ~position;,1,0,0,0,0,1,0,0,1,3,17,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1580,                boolean hasSignChar = false;,1,0,0,0,0,1,0,0,1,3,28,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1581,                boolean negative = false;,1,0,0,0,0,1,0,0,1,3,25,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1582,                int length = 0;,1,0,0,0,0,1,0,0,0,2,15,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1583,                while (length < limit) {,2,1,0,1,3,1,0,0,0,5,24,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1584,                    char c = text.charAt(position + length);,3,1,0,1,2,1,2,0,0,6,40,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1585,                    if (length == 0 && (c == '-' || c == '+')) {,3,5,0,2,5,1,0,0,2,6,44,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1586,                        hasSignChar = true;,1,0,0,0,0,0,0,0,2,2,19,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1587,                        negative = c == '-';,2,1,0,0,0,0,0,0,2,3,20,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1588,                        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1589,                            length++;,1,0,0,0,0,0,0,0,1,2,9,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1592,                            position++;,1,0,0,0,0,0,0,0,1,2,11,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1593,                            limit--;,1,0,0,0,0,0,0,0,1,2,8,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1595,                        continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1597,                    if (c < '0' || c > '9') {,2,3,0,1,3,1,0,0,2,6,25,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1598,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1600,                    length++;,1,0,0,0,0,0,0,0,1,2,9,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1601,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1603,                if (length == 0) {,1,1,0,1,3,1,0,0,0,5,18,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1604,                    return ~position;,1,0,0,0,0,1,0,0,1,3,17,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1607,                if (hasSignChar || length != 2) {,2,2,0,1,3,1,0,0,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1609,                    if (length >= 9) {,1,1,0,1,3,1,0,0,0,5,18,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1612,"                        value = Integer.parseInt(text.substring(position, position += length));",3,0,0,0,4,0,5,0,2,4,71,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1614,                        int i = position;,2,0,0,0,0,1,0,0,0,2,17,12,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1615,                        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1616,                            i++;,1,0,0,0,0,0,0,0,1,2,4,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1619,                            value = text.charAt(i++) - '0';,2,1,0,1,2,0,2,0,3,6,31,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1622,                        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1620,                        } catch (StringIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,45,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1621,                            return ~position;,1,0,0,0,0,1,0,0,1,3,17,14,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1623,                        position += length;,2,0,0,0,0,0,0,0,1,2,19,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1624,                        while (i < position) {,2,1,0,1,3,1,0,0,0,5,22,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1625,                            value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,4,5,0,2,8,0,2,0,3,6,63,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1627,                        if (negative) {,1,0,0,1,3,1,0,0,0,4,15,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1628,                            value = -value;,2,0,0,0,0,0,0,0,2,2,15,13,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1632,"                    bucket.saveField(iType, value);",0,0,0,0,2,0,4,0,0,2,31,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1633,                    return position;,1,0,0,0,0,1,0,0,0,2,16,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1638,            char c = text.charAt(position);,1,0,0,1,2,1,3,0,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1639,            if (c < '0' || c > '9') {,2,3,0,1,3,1,0,0,2,6,25,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1640,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1642,            year = c - '0';,2,1,0,0,0,0,0,0,2,3,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1643,            c = text.charAt(position + 1);,2,1,0,1,2,0,2,0,1,6,30,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1644,            if (c < '0' || c > '9') {,2,3,0,1,3,1,0,0,2,6,25,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1645,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1647,            year = ((year << 3) + (year << 1)) + c - '0';,4,5,0,2,6,0,0,0,2,5,45,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1649,            int pivot = iPivot;,2,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1651,            if (bucket.getPivotYear() != null) {,0,1,0,2,5,1,2,0,0,5,36,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1652,                pivot = bucket.getPivotYear().intValue();,1,0,0,1,4,0,3,0,1,5,41,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1655,            int low = pivot - 50;,2,1,0,0,0,1,0,0,0,3,21,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1658,            if (low >= 0) {,1,1,0,1,3,1,0,0,0,5,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1659,                t = low % 100;,2,1,0,0,0,0,0,0,1,3,14,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1661,                t = 99 + ((low + 1) % 100);,2,3,0,2,4,0,0,0,1,5,27,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1664,            year += low + ((year < t) ? 100 : 0) - t;,5,3,0,2,4,0,0,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1666,"            bucket.saveField(iType, year);",0,0,0,0,2,0,4,0,0,2,30,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1667,            return position + 2;,1,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1671,            return 2;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1677,"            int year = getTwoDigitYear(instant, chrono);",1,0,0,0,2,1,3,0,1,5,44,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1678,            if (year < 0) {,1,1,0,1,3,1,0,0,0,5,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1679,                buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1680,                buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1682,"                FormatUtils.appendPaddedInteger(buf, year, 2);",0,0,0,0,2,0,4,0,0,2,46,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1684,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1689,"            int year = getTwoDigitYear(instant, chrono);",1,0,0,0,2,1,3,0,1,5,44,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1690,            if (year < 0) {,1,1,0,1,3,1,0,0,0,5,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1691,                out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1692,                out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1694,"                FormatUtils.writePaddedInteger(out, year, 2);",0,0,0,0,2,0,4,0,0,2,45,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1696,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1700,                int year = iType.getField(chrono).get(instant);,1,0,0,1,4,1,5,0,0,5,47,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1701,                if (year < 0) {,1,1,0,1,3,1,0,0,0,5,15,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1702,                    year = -year;,2,0,0,0,0,0,0,0,2,2,13,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1704,                return year % 100;,1,1,0,0,0,1,0,0,0,3,18,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1705,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1706,                return -1;,0,0,0,0,0,1,0,0,1,2,10,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1711,            int year = getTwoDigitYear(partial);,1,0,0,1,2,1,2,0,1,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1712,            if (year < 0) {,1,1,0,1,3,1,0,0,0,5,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1713,                buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1714,                buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1716,"                FormatUtils.appendPaddedInteger(buf, year, 2);",0,0,0,0,2,0,4,0,0,2,46,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1718,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1721,            int year = getTwoDigitYear(partial);,1,0,0,1,2,1,2,0,1,6,36,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1722,            if (year < 0) {,1,1,0,1,3,1,0,0,0,5,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1723,                out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1724,                out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1726,"                FormatUtils.writePaddedInteger(out, year, 2);",0,0,0,0,2,0,4,0,0,2,45,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1728,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1731,            if (partial.isSupported(iType)) {,0,0,0,2,5,1,3,0,0,4,33,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1733,                    int year = partial.get(iType);,1,0,0,1,2,1,3,0,0,5,30,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1734,                    if (year < 0) {,1,1,0,1,3,1,0,0,0,5,15,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1735,                        year = -year;,2,0,0,0,0,0,0,0,2,2,13,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1737,                    return year % 100;,1,1,0,0,0,1,0,0,0,3,18,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1738,                } catch (RuntimeException e) {},1,0,0,1,5,1,0,1,0,5,31,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1740,            return -1;,0,0,0,0,0,1,0,0,1,2,10,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1522,"            super(fieldType, numDigits, signed, numDigits);",4,0,0,0,2,1,0,0,1,4,47,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1523,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1526,"            int newPos = super.parseInto(bucket, text, position);",5,0,0,0,2,2,0,0,0,3,53,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1527,            if (newPos < 0) {,1,1,0,1,3,1,0,0,0,5,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1528,                return newPos;,1,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1530,            int expectedPos = position + iMaxParsedDigits;,3,1,0,0,0,1,0,0,0,3,46,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1531,            if (newPos != expectedPos) {,2,1,0,1,3,1,0,0,0,5,28,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1532,                if (iSigned) {,1,0,0,1,3,1,0,0,0,4,14,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1533,                    char c = text.charAt(position);,1,0,0,1,2,1,3,0,0,5,31,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1534,                    if (c == '-' || c == '+') {,2,3,0,1,3,1,0,0,2,6,27,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1535,                        expectedPos++;,1,0,0,0,0,0,0,0,1,2,14,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1538,                if (newPos > expectedPos) {,2,1,0,1,3,1,0,0,0,5,27,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1540,                    return ~(expectedPos + 1);,1,1,0,1,2,1,0,0,1,6,26,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1541,                } else if (newPos < expectedPos) {,2,1,0,1,4,2,0,0,0,5,34,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1543,                    return ~newPos;,1,0,0,0,0,1,0,0,1,3,15,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1546,            return newPos;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,89,"        this(instantLocal, chrono, locale, null, 2000);",3,0,0,0,2,1,0,0,0,3,47,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,90,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,105,"        this(instantLocal, chrono, locale, pivotYear, 2000);",4,0,0,0,2,1,0,0,0,3,52,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,106,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,135,        return iChrono;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,145,        return iLocale;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,153,        return iZone;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,160,        iSavedState = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,161,        iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,162,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,171,        return (iOffset != null ? iOffset : 0);,2,1,0,1,2,1,0,0,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,178,        return iOffset;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,187,        iSavedState = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,188,        iOffset = offset;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,189,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,213,        return iPivotYear;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,226,        iPivotYear = pivotYear;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,227,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,237,"        saveField(new SavedField(field, value));",2,0,0,0,4,1,1,1,2,6,40,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,238,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,247,"        saveField(new SavedField(fieldType.getField(iChrono), value));",1,0,0,1,6,1,4,1,2,7,62,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,248,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,258,"        saveField(new SavedField(fieldType.getField(iChrono), text, locale));",2,0,0,1,6,1,4,1,2,7,69,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,259,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,262,        SavedField[] savedFields = iSavedFields;,2,0,0,0,2,0,0,1,0,3,40,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,263,        int savedFieldsCount = iSavedFieldsCount;,2,0,0,0,0,1,0,0,0,2,41,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,265,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,4,2,0,1,3,1,0,0,0,5,67,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,267,            SavedField[] newArray = new SavedField,1,0,0,0,2,1,0,2,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,269,"            System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);",0,0,0,0,2,0,5,0,0,2,64,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,270,            iSavedFields = savedFields = newArray;,3,0,0,0,0,0,0,0,2,2,38,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,271,            iSavedFieldsShared = false;,1,0,0,0,0,0,0,0,2,2,27,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,274,        iSavedState = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,275,        savedFields[savedFieldsCount] = field;,1,0,1,0,2,0,0,0,1,4,38,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,276,        iSavedFieldsCount = savedFieldsCount + 1;,2,1,0,0,0,0,0,0,1,3,41,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,277,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,287,        if (iSavedState == null) {,1,1,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,288,            iSavedState = new SavedState();,1,0,0,1,2,1,0,1,2,6,31,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,290,        return iSavedState;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,302,        if (savedState instanceof SavedState) {,1,0,0,1,3,2,0,1,0,5,39,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,303,            if (((SavedState) savedState).restoreState(this)) {,1,0,0,3,9,2,1,1,0,6,51,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,304,                iSavedState = savedState;,2,0,0,0,0,0,0,0,1,2,25,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,305,                return true;,0,0,0,0,0,1,0,0,1,2,12,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,308,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,319,"        return computeMillis(false, null);",0,0,0,0,2,1,1,0,2,4,34,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,331,"        return computeMillis(resetFields, null);",0,0,0,0,2,1,2,0,1,4,40,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,348,            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();,2,0,0,1,6,0,2,1,2,6,64,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,349,            iSavedFieldsShared = false;,1,0,0,0,0,0,0,0,2,2,27,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,354,            DurationField months = DurationFieldType.months().getField(iChrono);,1,0,0,1,4,0,4,1,0,5,68,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,355,            DurationField days = DurationFieldType.days().getField(iChrono);,1,0,0,1,4,0,4,1,0,5,64,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,356,            DurationField first = savedFields[0].iField.getDurationField();,2,0,1,1,4,0,1,1,0,6,63,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,357,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0,3,0,0,7,1,6,0,2,5,77,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,358,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0,0,0,1,4,0,4,0,1,4,50,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,359,"                return computeMillis(resetFields, text);",0,0,0,0,2,1,3,0,1,4,40,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,366,"                millis = savedFields[i].set(millis, resetFields);",1,0,1,0,4,0,3,0,1,5,49,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,370,"                    millis = savedFields[i].set(millis, i == (count - 1));",3,2,1,1,6,0,2,0,1,7,54,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,373,        } catch (IllegalFieldValueException e) {,1,0,0,1,4,1,0,1,0,5,40,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,374,            if (text != null) {,1,1,0,1,3,1,0,0,0,5,19,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,375,"                e.prependMessage(""Cannot parse \"""" + text + '""');",1,1,0,1,2,0,2,0,2,6,49,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,377,            throw e;,1,0,0,0,0,1,0,0,0,2,8,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,382,        } else if (iZone != null) {,1,1,0,1,4,2,0,0,0,5,27,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,383,            int offset = iZone.getOffsetFromLocal(millis);,1,0,0,1,2,1,3,0,0,5,46,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,384,            millis -= offset;,2,0,0,0,0,0,0,0,1,2,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,385,            if (offset != iZone.getOffset(millis)) {,1,1,0,2,5,1,3,0,0,6,40,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,386,"                String message = ""Illegal instant due to time zone offset transition ("" + iZone + ')';",2,1,0,1,2,0,0,1,2,6,86,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,387,                if (text != null) {,1,1,0,1,3,1,0,0,0,5,19,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,388,"                    message = ""Cannot parse \"""" + text + ""\"": "" + message;",3,1,0,0,0,0,0,0,3,3,54,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,390,                throw new IllegalInstantException(message);,1,0,0,1,2,2,0,1,1,6,43,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,417,"            Arrays.sort(array, 0, high);",0,0,0,0,2,0,4,0,0,2,28,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,420,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,5,4,1,2,11,2,1,0,1,8,63,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,421,                    SavedField t = array[j];,1,0,1,0,2,0,0,1,0,4,24,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,422,                    array[j] = array[j-1];,1,1,1,0,4,0,0,0,1,5,22,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,423,                    array[j-1] = t;,2,1,1,0,2,0,0,0,1,5,15,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,511,        if (a == null || !a.isSupported()) {,1,2,0,2,5,1,2,0,1,7,36,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,512,            if (b == null || !b.isSupported()) {,1,2,0,2,5,1,2,0,1,7,36,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,513,                return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,515,            return -1;,0,0,0,0,0,1,0,0,1,2,10,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,517,        if (b == null || !b.isSupported()) {,1,2,0,2,5,1,2,0,1,7,36,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,518,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,520,        return -a.compareTo(b);,0,0,0,1,2,1,3,0,1,5,23,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,56,public class DateTimeParserBucket {,1,0,0,0,1,2,0,0,1,4,35,1,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1401,"            super(fieldType, maxParsedDigits, signed);",3,0,0,0,2,1,0,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1402,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1405,            return iMaxParsedDigits;,1,0,0,0,0,1,0,0,0,2,24,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1412,                DateTimeField field = iFieldType.getField(chrono);,1,0,0,1,2,0,3,1,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1413,"                FormatUtils.appendUnpaddedInteger(buf, field.get(instant));",0,0,0,1,4,0,6,0,0,3,59,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1416,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1414,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1415,                buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1417,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1423,                DateTimeField field = iFieldType.getField(chrono);,1,0,0,1,2,0,3,1,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1424,"                FormatUtils.writeUnpaddedInteger(out, field.get(instant));",0,0,0,1,4,0,6,0,0,3,58,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1427,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1425,            } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1426,                out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1428,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1431,            if (partial.isSupported(iFieldType)) {,0,0,0,2,5,1,3,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1433,"                    FormatUtils.appendUnpaddedInteger(buf, partial.get(iFieldType));",0,0,0,1,4,0,6,0,0,3,64,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1436,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1434,                } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1435,                    buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1438,                buf.append('\ufffd');,0,0,0,1,2,0,2,0,1,4,21,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1440,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1443,            if (partial.isSupported(iFieldType)) {,0,0,0,2,5,1,3,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1445,"                    FormatUtils.writeUnpaddedInteger(out, partial.get(iFieldType));",0,0,0,1,4,0,6,0,0,3,63,10,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1448,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1446,                } catch (RuntimeException e) {,1,0,0,1,4,1,0,1,0,5,30,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1447,                    out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1450,                out.write('\ufffd');,0,0,0,1,2,0,2,0,1,4,20,8,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1452,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1270,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1271,            iValue = value;,2,0,0,0,0,0,0,0,1,2,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1272,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1275,            return iValue.length();,0,0,0,1,2,1,2,0,0,4,23,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1281,            buf.append(iValue);,0,0,0,1,2,0,3,0,0,3,19,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1282,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1287,            out.write(iValue);,0,0,0,1,2,0,3,0,0,3,18,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1288,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1291,            buf.append(iValue);,0,0,0,1,2,0,3,0,0,3,19,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1292,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1295,            out.write(iValue);,0,0,0,1,2,0,3,0,0,3,18,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1296,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1299,            return iValue.length();,0,0,0,1,2,1,2,0,0,4,23,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1303,"            if (text.regionMatches(true, position, iValue, 0, iValue.length())) {",0,0,0,1,7,1,6,0,1,5,69,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1304,                return position + iValue.length();,1,1,0,1,2,1,2,0,0,6,34,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1306,            return ~position;,1,0,0,0,0,1,0,0,1,3,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,435,        SavedState() {,1,0,0,1,3,0,0,0,0,3,14,3,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,436,            this.iZone = DateTimeParserBucket.this.iZone;,3,0,0,0,0,2,0,0,1,3,45,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,437,            this.iOffset = DateTimeParserBucket.this.iOffset;,3,0,0,0,0,2,0,0,1,3,49,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,438,            this.iSavedFields = DateTimeParserBucket.this.iSavedFields;,3,0,0,0,0,2,0,0,1,3,59,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,439,            this.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;,3,0,0,0,0,2,0,0,1,3,69,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,440,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,443,            if (enclosing != DateTimeParserBucket.this) {,2,1,0,1,3,2,0,0,0,5,45,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,444,                return false;,0,0,0,0,0,1,0,0,1,2,13,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,446,            enclosing.iZone = this.iZone;,3,0,0,0,0,1,0,0,1,3,29,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,447,            enclosing.iOffset = this.iOffset;,3,0,0,0,0,1,0,0,1,3,33,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,448,            enclosing.iSavedFields = this.iSavedFields;,3,0,0,0,0,1,0,0,1,3,43,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,449,            if (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {,3,1,0,1,3,2,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,454,                enclosing.iSavedFieldsShared = true;,2,0,0,0,0,0,0,0,2,2,36,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,456,            enclosing.iSavedFieldsCount = this.iSavedFieldsCount;,3,0,0,0,0,1,0,0,1,3,53,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,457,            return true;,0,0,0,0,0,1,0,0,1,2,12,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,467,"        SavedField(DateTimeField field, int value) {",3,0,0,0,3,1,0,1,0,4,44,3,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,468,            iField = field;,2,0,0,0,0,0,0,0,1,2,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,469,            iValue = value;,2,0,0,0,0,0,0,0,1,2,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,470,            iText = null;,1,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,471,            iLocale = null;,1,0,0,0,0,0,0,0,1,2,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,472,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,474,"        SavedField(DateTimeField field, String text, Locale locale) {",4,0,0,0,3,0,0,3,0,3,61,3,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,475,            iField = field;,2,0,0,0,0,0,0,0,1,2,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,476,            iValue = 0;,1,0,0,0,0,0,0,0,1,2,11,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,477,            iText = text;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,478,            iLocale = locale;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,479,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,482,            if (iText == null) {,1,1,0,1,3,1,0,0,0,5,20,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,483,"                millis = iField.set(millis, iValue);",1,0,0,0,2,0,4,0,1,4,36,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,485,"                millis = iField.set(millis, iText, iLocale);",1,0,0,0,2,0,5,0,1,4,44,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,487,            if (reset) {,1,0,0,1,3,1,0,0,0,4,12,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,488,                millis = iField.roundFloor(millis);,1,0,0,1,2,0,3,0,1,5,35,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,490,            return millis;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,499,            DateTimeField other = obj.iField;,3,0,0,0,0,0,0,1,0,2,33,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,500,            int result = compareReverse,1,0,0,0,0,1,1,0,1,4,27,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,502,            if (result != 0) {,1,1,0,1,3,1,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,503,                return result;,1,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,505,            return compareReverse,0,0,0,0,0,1,1,0,1,3,21,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeParserBucket,9,461,    static class SavedField implements Comparable<SavedField> {,1,0,0,0,1,3,0,2,1,5,59,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,36,    private FormatUtils() {,1,0,0,1,3,1,0,0,1,5,23,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,37,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,51,            buf.append('-');,0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,52,            if (value != Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,53,                value = -value;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,55,                for (; size > 10; size--) {,2,1,0,1,3,1,0,0,1,6,27,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,56,                    buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,58,"                buf.append("""" + -(long)Integer.MIN_VALUE);",2,1,0,2,4,1,2,0,2,7,42,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,59,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,69,                buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,80,            if (value < 1000) {,1,1,0,1,3,1,0,0,0,5,19,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,81,                digits = 3;,1,0,0,0,0,0,0,0,1,2,11,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,82,            } else if (value < 10000) {,1,1,0,1,4,2,0,0,0,5,27,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,83,                digits = 4;,1,0,0,0,0,0,0,0,1,2,11,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,85,                digits = (int)(Math.log(value) / LOG_10) + 1;,2,2,0,2,6,1,3,0,1,7,45,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,87,            for (; size > digits; size--) {,3,1,0,1,3,1,0,0,1,6,31,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,88,                buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,90,            buf.append(Integer.toString(value));,0,0,0,2,4,0,5,0,0,3,36,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,105,        int intValue = (int)value;,2,0,0,1,2,2,0,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,106,        if (intValue == value) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,107,"            appendPaddedInteger(buf, intValue, size);",0,0,0,0,2,0,4,0,1,3,41,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,108,        } else if (size <= 19) {,1,1,0,1,4,2,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,109,            buf.append(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,33,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,111,            if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,112,                buf.append('-');,0,0,0,1,2,0,2,0,1,4,16,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,113,                if (value != Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,30,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,114,                    value = -value;,2,0,0,0,0,0,0,0,2,2,15,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,116,                    for (; size > 19; size--) {,2,1,0,1,3,1,0,0,1,6,27,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,117,                        buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,14,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,119,"                    buf.append(""9223372036854775808"");",0,0,0,1,2,0,2,0,1,4,34,12,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,120,                    return;,0,0,0,0,0,1,0,0,1,2,7,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,123,            int digits = (int)(Math.log(value) / LOG_10) + 1;,2,2,0,2,6,2,3,0,0,6,49,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,124,            for (; size > digits; size--) {,3,1,0,1,3,1,0,0,1,6,31,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,125,                buf.append('0');,0,0,0,1,2,0,2,0,1,4,16,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,127,            buf.append(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,33,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,129,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,144,        if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,145,            out.write('-');,0,0,0,1,2,0,2,0,1,4,15,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,146,            if (value != Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,147,                value = -value;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,149,                for (; size > 10; size--) {,2,1,0,1,3,1,0,0,1,6,27,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,150,                    out.write('0');,0,0,0,1,2,0,2,0,1,4,15,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,152,"                out.write("""" + -(long)Integer.MIN_VALUE);",2,1,0,2,4,1,2,0,2,7,41,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,153,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,156,        if (value < 10) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,157,            for (; size > 1; size--) {,2,1,0,1,3,1,0,0,1,6,26,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,158,                out.write('0');,0,0,0,1,2,0,2,0,1,4,15,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,160,            out.write(value + '0');,1,1,0,1,2,0,2,0,1,6,23,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,161,        } else if (value < 100) {,1,1,0,1,4,2,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,162,            for (; size > 2; size--) {,2,1,0,1,3,1,0,0,1,6,26,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,163,                out.write('0');,0,0,0,1,2,0,2,0,1,4,15,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,168,            int d = ((value + 1) * 13421772) >> 27;,2,3,0,2,4,1,0,0,0,5,39,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,169,            out.write(d + '0');,1,1,0,1,2,0,2,0,1,6,19,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,171,            out.write(value - (d << 3) - (d << 1) + '0');,3,4,0,2,6,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,172,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,174,            if (value < 1000) {,1,1,0,1,3,1,0,0,0,5,19,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,175,                digits = 3;,1,0,0,0,0,0,0,0,1,2,11,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,176,            } else if (value < 10000) {,1,1,0,1,4,2,0,0,0,5,27,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,177,                digits = 4;,1,0,0,0,0,0,0,0,1,2,11,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,179,                digits = (int)(Math.log(value) / LOG_10) + 1;,2,2,0,2,6,1,3,0,1,7,45,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,181,            for (; size > digits; size--) {,3,1,0,1,3,1,0,0,1,6,31,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,182,                out.write('0');,0,0,0,1,2,0,2,0,1,4,15,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,184,            out.write(Integer.toString(value));,0,0,0,2,4,0,5,0,0,3,35,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,186,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,201,        int intValue = (int)value;,2,0,0,1,2,2,0,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,202,        if (intValue == value) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,203,"            writePaddedInteger(out, intValue, size);",0,0,0,0,2,0,4,0,1,3,40,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,204,        } else if (size <= 19) {,1,1,0,1,4,2,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,205,            out.write(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,32,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,207,            if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,208,                out.write('-');,0,0,0,1,2,0,2,0,1,4,15,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,209,                if (value != Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,30,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,210,                    value = -value;,2,0,0,0,0,0,0,0,2,2,15,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,212,                    for (; size > 19; size--) {,2,1,0,1,3,1,0,0,1,6,27,11,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,213,                        out.write('0');,0,0,0,1,2,0,2,0,1,4,15,14,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,215,"                    out.write(""9223372036854775808"");",0,0,0,1,2,0,2,0,1,4,33,12,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,216,                    return;,0,0,0,0,0,1,0,0,1,2,7,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,219,            int digits = (int)(Math.log(value) / LOG_10) + 1;,2,2,0,2,6,2,3,0,0,6,49,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,220,            for (; size > digits; size--) {,3,1,0,1,3,1,0,0,1,6,31,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,221,                out.write('0');,0,0,0,1,2,0,2,0,1,4,15,10,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,223,            out.write(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,32,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,225,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,236,        if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,237,            buf.append('-');,0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,238,            if (value != Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,239,                value = -value;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,241,"                buf.append("""" + -(long)Integer.MIN_VALUE);",2,1,0,2,4,1,2,0,2,7,42,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,242,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,245,        if (value < 10) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,246,            buf.append((char)(value + '0'));,1,1,0,2,6,1,2,0,1,7,32,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,247,        } else if (value < 100) {,1,1,0,1,4,2,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,251,            int d = ((value + 1) * 13421772) >> 27;,2,3,0,2,4,1,0,0,0,5,39,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,252,            buf.append((char) (d + '0'));,1,1,0,2,6,1,2,0,1,7,29,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,254,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,3,4,0,3,10,1,2,0,1,7,55,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,255,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,256,            buf.append(Integer.toString(value));,0,0,0,2,4,0,5,0,0,3,36,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,258,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,269,        int intValue = (int)value;,2,0,0,1,2,2,0,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,270,        if (intValue == value) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,271,"            appendUnpaddedInteger(buf, intValue);",0,0,0,0,2,0,3,0,1,3,37,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,273,            buf.append(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,33,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,275,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,288,        if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,289,            out.write('-');,0,0,0,1,2,0,2,0,1,4,15,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,290,            if (value != Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,291,                value = -value;,2,0,0,0,0,0,0,0,2,2,15,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,293,"                out.write("""" + -(long)Integer.MIN_VALUE);",2,1,0,2,4,1,2,0,2,7,41,9,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,294,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,297,        if (value < 10) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,298,            out.write(value + '0');,1,1,0,1,2,0,2,0,1,6,23,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,299,        } else if (value < 100) {,1,1,0,1,4,2,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,303,            int d = ((value + 1) * 13421772) >> 27;,2,3,0,2,4,1,0,0,0,5,39,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,304,            out.write(d + '0');,1,1,0,1,2,0,2,0,1,6,19,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,306,            out.write(value - (d << 3) - (d << 1) + '0');,3,4,0,2,6,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,307,        } else {,0,0,0,0,2,1,0,0,0,2,8,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,308,            out.write(Integer.toString(value));,0,0,0,2,4,0,5,0,0,3,35,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,310,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,323,        int intValue = (int)value;,2,0,0,1,2,2,0,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,324,        if (intValue == value) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,325,"            writeUnpaddedInteger(out, intValue);",0,0,0,0,2,0,3,0,1,3,36,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,327,            out.write(Long.toString(value));,0,0,0,2,4,0,5,0,0,3,32,7,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,329,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,336,        if (value < 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,337,            if (value != Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,338,                return calculateDigitCount(-value) + 1;,1,1,0,1,2,1,1,0,2,7,39,8,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,340,                return 20;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,343,        return ,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,357,        int sampleLen = errorPos + 32;,2,1,0,0,0,1,0,0,0,3,30,5,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,359,        if (text.length() <= sampleLen + 3) {,1,2,0,2,5,1,2,0,0,6,37,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,360,            sampleText = text;,2,0,0,0,0,0,0,0,1,2,18,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,362,"            sampleText = text.substring(0, sampleLen).concat(""..."");",1,0,0,1,4,0,4,0,2,5,56,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,365,        if (errorPos <= 0) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,366,"            return ""Invalid format: \"""" + sampleText + '""';",1,1,0,0,0,1,0,0,2,4,47,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,369,        if (errorPos >= text.length()) {,1,1,0,2,5,1,2,0,0,6,32,4,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,370,"            return ""Invalid format: \"""" + sampleText + ""\"" is too short"";",1,1,0,0,0,2,0,0,2,4,61,6,0.0,0,0
defect4j,time,org/joda/time/format/FormatUtils,9,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +",1,1,0,0,0,1,0,0,2,4,68,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1207,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1208,            iValue = value;,2,0,0,0,0,0,0,0,1,2,15,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1209,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1212,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1218,            buf.append(iValue);,0,0,0,1,2,0,3,0,0,3,19,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1219,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1224,            out.write(iValue);,0,0,0,1,2,0,3,0,0,3,18,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1225,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1228,            buf.append(iValue);,0,0,0,1,2,0,3,0,0,3,19,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1229,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1232,            out.write(iValue);,0,0,0,1,2,0,3,0,0,3,18,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1233,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1236,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1240,            if (position >= text.length()) {,1,1,0,2,5,1,2,0,0,6,32,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1241,                return ~position;,1,0,0,0,0,1,0,0,1,3,17,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1244,            char a = text.charAt(position);,1,0,0,1,2,1,3,0,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1245,            char b = iValue;,2,0,0,0,0,1,0,0,0,2,16,6,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1247,            if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1248,                a = Character.toUpperCase(a);,1,0,0,1,2,0,3,0,1,5,29,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1249,                b = Character.toUpperCase(b);,1,0,0,1,2,0,3,0,1,5,29,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1250,                if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,7,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1251,                    a = Character.toLowerCase(a);,1,0,0,1,2,0,3,0,1,5,29,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1252,                    b = Character.toLowerCase(b);,1,0,0,1,2,0,3,0,1,5,29,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1253,                    if (a != b) {,2,1,0,1,3,1,0,0,0,5,13,9,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1254,                        return ~position;,1,0,0,0,0,1,0,0,1,3,17,11,0.0,0,0
defect4j,time,org/joda/time/format/DateTimeFormatterBuilder,9,1259,            return position + 1;,1,1,0,0,0,1,0,0,0,3,20,5,0.0,0,0
