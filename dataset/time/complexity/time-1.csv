dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,other,lengthEle,lengthWord,depth,suspicious,accuracy,miss_line
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,227,        if (durationField.isSupported()) {,0,0,0,2,5,1,2,0,0,4,34,5,0.16667,1,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,228,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.16667,1,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,1,0,0,0,1,5,0,2,2,5,91,1,0.16667,0,0
defect4j,time,org/joda/time/DurationFieldType,1,286,                    return chronology.eras();,0,0,0,1,2,1,2,0,0,4,25,7,0.11111,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,136,        return DateTimeConstants.BCE;,2,0,0,0,0,1,0,0,0,2,29,5,0.1,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,140,        return DateTimeConstants.CE;,2,0,0,0,0,1,0,0,0,2,28,5,0.1,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,484,                    return chronology.era();,0,0,0,1,2,1,2,0,0,4,24,7,0.04545,0,0
defect4j,time,org/joda/time/Partial,1,176,    },0,0,0,0,1,0,0,0,0,1,1,2,0.01429,0,0
defect4j,time,org/joda/time/Partial,1,175,"        this(types, values, null);",2,0,0,0,2,1,0,0,0,3,26,4,0.01316,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,153,            return -1;,0,0,0,0,0,1,0,0,1,2,10,6,0.0102,0,0
defect4j,time,org/joda/time/Partial,1,217,                int compare = lastUnitField.compareTo(loopUnitField);,1,0,0,1,2,1,3,0,0,5,53,9,0.00714,1,1
defect4j,time,org/joda/time/Partial,1,218,                if (compare < 0) {,1,1,0,1,3,1,0,0,0,5,18,8,0.00714,0,0
defect4j,time,org/joda/time/Partial,1,221,                } else if (compare == 0) {,1,1,0,1,4,2,0,0,0,5,26,9,0.00714,1,0
defect4j,time,org/joda/time/Partial,1,250,        iValues = (int[]) values.clone();,1,0,0,1,6,1,2,0,1,6,33,4,0.00667,0,0
defect4j,time,org/joda/time/Partial,1,251,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00667,0,0
defect4j,time,org/joda/time/Partial,1,248,        iTypes = (DateTimeFieldType[]) types.clone();,1,0,0,1,6,0,2,1,1,6,45,4,0.00662,0,0
defect4j,time,org/joda/time/Partial,1,249,"        chronology.validate(this, values);",0,0,0,0,2,1,3,0,0,3,34,5,0.00662,0,0
defect4j,time,org/joda/time/Partial,1,212,        DurationField lastUnitField = null;,1,0,0,0,0,0,0,1,0,2,35,4,0.00658,0,0
defect4j,time,org/joda/time/Partial,1,213,        for (int i = 0; i < types.length; i++) {,5,1,0,1,3,2,0,0,1,6,40,4,0.00658,0,0
defect4j,time,org/joda/time/Partial,1,214,            DateTimeFieldType loopType = types[i];,1,0,1,0,2,0,0,1,0,4,38,6,0.00658,0,0
defect4j,time,org/joda/time/Partial,1,215,            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,1,0,0,1,4,0,4,1,0,5,79,6,0.00658,0,0
defect4j,time,org/joda/time/Partial,1,216,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.00658,0,0
defect4j,time,org/joda/time/Partial,1,245,            lastUnitField = loopUnitField;,2,0,0,0,0,0,0,0,1,2,30,6,0.00658,0,0
defect4j,time,org/joda/time/Partial,1,207,        for (int i = 0; i < types.length; i++) {,5,1,0,1,3,2,0,0,1,6,40,4,0.00654,0,0
defect4j,time,org/joda/time/Partial,1,208,            if (types[i] == null) {,0,1,1,1,5,1,0,0,0,5,23,6,0.00654,0,0
defect4j,time,org/joda/time/Partial,1,202,        if (types.length == 0) {,2,1,0,1,3,1,0,0,0,5,24,4,0.00649,0,0
defect4j,time,org/joda/time/Partial,1,199,        if (values.length != types.length) {,4,1,0,1,3,1,0,0,0,5,36,4,0.00645,0,0
defect4j,time,org/joda/time/Partial,1,196,        if (values == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.00641,0,0
defect4j,time,org/joda/time/Partial,1,335,        return iTypes[index].getField(chrono);,0,0,1,1,4,1,2,0,0,5,38,5,0.00641,0,0
defect4j,time,org/joda/time/Partial,1,190,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00637,0,0
defect4j,time,org/joda/time/Partial,1,191,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,1,0,0,1,4,0,4,0,1,5,63,4,0.00637,0,0
defect4j,time,org/joda/time/Partial,1,192,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00637,0,0
defect4j,time,org/joda/time/Partial,1,193,        if (types == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.00637,0,0
defect4j,time,org/joda/time/Partial,1,323,        return iChronology;,1,0,0,0,0,1,0,0,0,2,19,4,0.00625,0,0
defect4j,time,org/joda/time/Partial,1,311,        return iTypes.length;,2,0,0,0,0,1,0,0,0,2,21,5,0.00621,0,0
defect4j,time,org/joda/time/DurationFieldType,1,292,                    return chronology.years();,0,0,0,1,2,1,2,0,0,4,26,7,0.00457,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,378,        return iName;,1,0,0,0,0,1,0,0,0,2,13,4,0.00342,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,340,        return MIN;,1,0,0,0,0,1,0,0,0,2,11,4,0.00329,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,345,        return iMax;,1,0,0,0,0,1,0,0,0,2,12,4,0.00327,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,155,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.00234,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,38,public abstract class BaseDurationField extends DurationField implements Serializable {,1,0,0,0,1,5,0,2,2,5,87,1,0.00234,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,146,        long otherMillis = otherField.getUnitMillis();,1,0,0,1,2,1,2,0,0,5,46,5,0.00233,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,147,        long thisMillis = getUnitMillis();,1,0,0,1,2,1,1,0,1,6,34,5,0.00233,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,149,        if (thisMillis == otherMillis) {,2,1,0,1,3,1,0,0,0,5,32,4,0.00233,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,152,        if (thisMillis < otherMillis) {,2,1,0,1,3,1,0,0,0,5,31,4,0.00233,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",3,0,0,0,2,0,2,0,2,4,59,10,0.0021,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,132,                    chrono = new GregorianChronology,1,0,0,0,0,1,0,1,2,4,32,10,0.0021,0,0
defect4j,time,org/joda/time/DurationFieldType,1,294,                    return chronology.months();,0,0,0,1,2,1,2,0,0,4,27,7,0.00197,0,0
defect4j,time,org/joda/time/DurationFieldType,1,298,                    return chronology.days();,0,0,0,1,2,1,2,0,0,4,25,7,0.00185,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,818,        return getMaximumValue(instant);,0,0,0,1,2,1,2,0,1,5,32,4,0.00166,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,804,        return getMaximumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.00166,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,213,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00166,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,199,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.00165,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,200,            int value = values[i];,1,0,1,0,2,1,0,0,0,4,22,7,0.00165,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,201,            DateTimeField field = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,42,6,0.00165,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,202,"            if (value < field.getMinimumValue(partial, values)) {",1,1,0,0,5,1,4,0,0,5,53,6,0.00165,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,207,"            if (value > field.getMaximumValue(partial, values)) {",1,1,0,0,5,1,4,0,0,5,53,6,0.00165,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,192,            if (value > field.getMaximumValue()) {,1,1,0,2,5,1,2,0,0,6,38,6,0.00165,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,758,        return getMinimumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.00165,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,772,        return getMinimumValue(instant);,0,0,0,1,2,1,2,0,1,5,32,4,0.00165,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,183,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.00164,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,184,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.00164,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,185,            int value = values[i];,1,0,1,0,2,1,0,0,0,4,22,7,0.00164,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,186,            DateTimeField field = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,42,6,0.00164,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,187,            if (value < field.getMinimumValue()) {,1,1,0,2,5,1,2,0,0,6,38,6,0.00164,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,105,"        return getField(index, getChronology());",0,0,0,1,4,1,3,0,2,5,40,4,0.00156,0,0
defect4j,time,org/joda/time/DurationFieldType,1,282,            chronology = DateTimeUtils.getChronology(chronology);,1,0,0,1,2,0,3,0,1,5,53,5,0.00128,0,0
defect4j,time,org/joda/time/DurationFieldType,1,284,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,0.00128,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,496,                    return chronology.monthOfYear();,0,0,0,1,2,1,2,0,0,4,32,7,0.00121,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,492,                    return chronology.year();,0,0,0,1,2,1,2,0,0,4,25,7,0.00119,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,171,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.0009,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,480,            chronology = DateTimeUtils.getChronology(chronology);,1,0,0,1,2,0,3,0,1,5,53,5,0.00081,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,482,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,0.00081,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,102,            return chrono;,1,0,0,0,0,1,0,0,0,2,14,6,0.00075,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,285,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.00067,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,54,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00063,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,55,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00063,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,116,        return iChronology.getMinYear();,0,0,0,1,2,1,2,0,0,4,32,5,0.0006,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,166,        return getWrappedField().getLeapDurationField();,0,0,0,1,4,1,2,0,1,5,48,5,0.00058,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,131,        return super.getRangeDurationField();,1,0,0,1,2,2,0,0,0,4,37,5,0.00057,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,107,        if ((base = iBase) != null) {,2,1,0,2,5,1,0,0,1,6,29,4,0.0005,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,108,            return base.getZone();,0,0,0,1,2,1,2,0,0,4,22,7,0.0005,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,221,        return MIN_YEAR;,1,0,0,0,0,1,0,0,0,2,16,4,0.00046,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,77,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.00046,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,86,        return getInstance(DateTimeZone.getDefault());,0,0,0,2,4,1,3,0,1,5,46,4,0.00045,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",1,0,0,0,4,1,4,1,2,6,76,8,0.00038,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,108,"                cCache.put(zone, chrono);",0,0,0,0,2,0,4,0,0,2,25,9,0.00038,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,96,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00037,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,2,2,0,1,4,1,3,0,0,6,66,5,0.00037,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,100,        ISOChronology chrono = cFastCache[index];,1,0,1,0,2,0,0,1,0,4,41,4,0.00037,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,101,        if (chrono != null && chrono.getZone() == zone) {,2,3,0,2,5,1,2,0,0,6,49,4,0.00037,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,104,        synchronized (cCache) {,1,0,0,1,3,1,0,0,0,4,23,4,0.00037,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,105,            chrono = cCache.get(zone);,1,0,0,1,2,0,3,0,1,5,26,6,0.00037,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,106,            if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.00037,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,110,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00037,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,111,        cFastCache[index] = chrono;,1,0,1,0,2,0,0,0,1,4,27,4,0.00037,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,112,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.00037,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,129,            return iRangeDurationField;,1,0,0,0,0,1,0,0,0,2,27,6,0.00035,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,547,        FixedMillisProvider(long fixedMillis) {,2,0,0,1,3,1,0,0,0,4,39,3,0.00035,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,548,            iMillis = fixedMillis;,2,0,0,0,0,0,0,0,1,2,22,5,0.00035,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,549,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00035,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,114,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.00035,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,115,        cMillisProvider = new FixedMillisProvider(fixedMillis);,2,0,0,1,2,1,0,1,2,6,55,4,0.00035,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,116,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00035,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,100,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.00035,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,101,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,0,0,0,0,0,0,1,2,41,4,0.00035,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,102,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00035,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,161,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.00035,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,162,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00035,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,165,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00035,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,287,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.00035,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,128,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,4,0,0,4,70,5,0.00033,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,132,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.00033,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,133,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.00033,0,0
defect4j,time,org/joda/time/DateTimeZone,1,175,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.00033,0,0
defect4j,time,org/joda/time/DateTimeZone,1,176,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00033,0,0
defect4j,time,org/joda/time/DateTimeZone,1,179,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00033,0,0
defect4j,time,org/joda/time/DateTimeZone,1,182,        synchronized(DateTimeZone.class) {,0,0,0,1,3,2,0,1,0,4,34,6,0.00033,0,0
defect4j,time,org/joda/time/DateTimeZone,1,183,            cDefault = zone;,2,0,0,0,0,0,0,0,1,2,16,6,0.00033,0,0
defect4j,time,org/joda/time/DateTimeZone,1,184,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00033,0,0
defect4j,time,org/joda/time/DateTimeZone,1,185,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00033,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,123,        return iZone.hashCode();,0,0,0,1,2,1,2,0,0,4,24,5,0.00033,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1273,        return 57 + getID().hashCode();,0,1,0,1,4,1,2,0,1,6,31,4,0.00032,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,218,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,404,            super(field.getType());,0,0,0,2,4,1,2,0,1,5,23,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,405,            if (!field.isSupported()) {,0,0,0,2,5,1,2,0,1,5,27,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,408,            iField = field;,2,0,0,0,0,0,0,0,1,2,15,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,409,            iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,410,            iDurationField = durationField;,2,0,0,0,0,0,0,0,1,2,31,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,411,            iTimeField = useTimeArithmetic(durationField);,1,0,0,1,2,0,2,0,2,5,46,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,412,            iRangeDurationField = rangeDurationField;,2,0,0,0,0,0,0,0,1,2,41,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,413,            iLeapDurationField = leapDurationField;,2,0,0,0,0,0,0,0,1,2,39,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,414,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,81,"        super(base, zone);",2,0,0,0,2,1,0,0,1,4,18,3,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,82,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,55,        if (base == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,58,        base = base.withUTC();,1,0,0,1,2,0,2,0,1,5,22,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,59,        if (base == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,62,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,65,"        return new ZonedChronology(base, zone);",2,0,0,0,2,2,0,1,1,5,39,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,71,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,3,4,0,1,2,1,2,0,0,6,87,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,85,        return (DateTimeZone)getParam();,0,0,0,1,4,1,1,1,1,6,32,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,150,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",1,0,0,1,2,1,0,6,1,6,66,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,154,"        fields.eras = convertField(fields.eras, converted);",4,0,0,0,2,0,2,0,2,4,51,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,155,"        fields.centuries = convertField(fields.centuries, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,156,"        fields.years = convertField(fields.years, converted);",4,0,0,0,2,0,2,0,2,4,53,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,157,"        fields.months = convertField(fields.months, converted);",4,0,0,0,2,0,2,0,2,4,55,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,158,"        fields.weekyears = convertField(fields.weekyears, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,159,"        fields.weeks = convertField(fields.weeks, converted);",4,0,0,0,2,0,2,0,2,4,53,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,160,"        fields.days = convertField(fields.days, converted);",4,0,0,0,2,0,2,0,2,4,51,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,162,"        fields.halfdays = convertField(fields.halfdays, converted);",4,0,0,0,2,0,2,0,2,4,59,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,163,"        fields.hours = convertField(fields.hours, converted);",4,0,0,0,2,0,2,0,2,4,53,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,164,"        fields.minutes = convertField(fields.minutes, converted);",4,0,0,0,2,0,2,0,2,4,57,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,165,"        fields.seconds = convertField(fields.seconds, converted);",4,0,0,0,2,0,2,0,2,4,57,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,166,"        fields.millis = convertField(fields.millis, converted);",4,0,0,0,2,0,2,0,2,4,55,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,170,"        fields.year = convertField(fields.year, converted);",4,0,0,0,2,0,2,0,2,4,51,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,171,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,172,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",4,0,0,0,2,0,2,0,2,4,69,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,173,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",4,0,0,0,2,0,2,0,2,4,67,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,174,"        fields.era = convertField(fields.era, converted);",4,0,0,0,2,0,2,0,2,4,49,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,175,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,176,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",4,0,0,0,2,0,2,0,2,4,63,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,177,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,178,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,179,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,180,"        fields.weekyear = convertField(fields.weekyear, converted);",4,0,0,0,2,0,2,0,2,4,59,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,181,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",4,0,0,0,2,0,2,0,2,4,77,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,183,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,184,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,185,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,186,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,187,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",4,0,0,0,2,0,2,0,2,4,67,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,188,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",4,0,0,0,2,0,2,0,2,4,65,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,189,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",4,0,0,0,2,0,2,0,2,4,61,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,190,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",4,0,0,0,2,0,2,0,2,4,69,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,191,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",4,0,0,0,2,0,2,0,2,4,71,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,192,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",4,0,0,0,2,0,2,0,2,4,79,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,193,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",4,0,0,0,2,0,2,0,2,4,67,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,194,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,197,        if (field == null || !field.isSupported()) {,1,2,0,2,5,1,2,0,1,7,44,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,198,            return field;,1,0,0,0,0,1,0,0,0,2,13,6,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,200,        if (converted.containsKey(field)) {,0,0,0,2,5,1,3,0,0,4,35,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,201,            return (DurationField)converted.get(field);,0,0,0,1,4,1,3,1,0,5,43,7,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,203,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",2,0,0,1,4,1,1,2,2,7,73,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,204,"        converted.put(field, zonedField);",0,0,0,0,2,0,4,0,0,2,33,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,205,        return zonedField;,1,0,0,0,0,1,0,0,0,2,18,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,209,        if (field == null || !field.isSupported()) {,1,2,0,2,5,1,2,0,1,7,44,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,212,        if (converted.containsKey(field)) {,0,0,0,2,5,1,3,0,0,4,35,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,215,        ZonedDateTimeField zonedField =,1,0,0,0,0,0,0,1,0,2,31,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,220,"        converted.put(field, zonedField);",0,0,0,0,2,0,4,0,0,2,33,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,221,        return zonedField;,1,0,0,0,0,1,0,0,0,2,18,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,281,            super(field.getType());,0,0,0,2,4,1,2,0,1,5,23,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,282,            if (!field.isSupported()) {,0,0,0,2,5,1,2,0,1,5,27,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,285,            iField = field;,2,0,0,0,0,0,0,0,1,2,15,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,286,            iTimeField = useTimeArithmetic(field);,1,0,0,1,2,0,2,0,2,5,38,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,287,            iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,288,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00032,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,295,            return iField.getUnitMillis();,0,0,0,1,2,1,2,0,0,4,30,6,0.00032,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,109,        return getWrappedField().getUnitMillis() * iScalar;,1,1,0,1,4,1,2,0,1,7,51,4,0.00032,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,315,        return iParam;,1,0,0,0,0,1,0,0,0,2,14,4,0.00032,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,161,            return iUnitMillis;,1,0,0,0,0,1,0,0,0,2,19,5,0.00032,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,59,        return iChronology.weekyears();,0,0,0,1,2,1,2,0,0,4,31,5,0.00031,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,57,        return iChronology.years();,0,0,0,1,2,1,2,0,0,4,27,5,0.00031,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,335,        return iChronology.days();,0,0,0,1,2,1,2,0,0,4,26,5,0.00031,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,142,        long millis = iUnitMillis;,2,0,0,0,0,1,0,0,0,2,26,5,0.00031,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,143,        int hash = (int) (millis ^ (millis >>> 32));,3,2,0,2,6,2,0,0,0,5,44,5,0.00031,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,144,        hash += getType().hashCode();,1,0,0,1,4,0,2,0,2,5,29,4,0.00031,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,145,        return hash;,1,0,0,0,0,1,0,0,0,2,12,4,0.00031,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,102,        return getWrappedField().getLeapDurationField();,0,0,0,1,4,1,2,0,1,5,48,5,0.00031,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,112,        return iChronology.days();,0,0,0,1,2,1,2,0,0,4,26,5,0.00031,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,221,        return iChronology.weeks();,0,0,0,1,2,1,2,0,0,4,27,5,0.00031,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,147,        long scalar = iScalar;,2,0,0,0,0,1,0,0,0,2,22,5,0.00031,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,148,        int hash = (int) (scalar ^ (scalar >>> 32));,3,2,0,2,6,2,0,0,0,5,44,5,0.00031,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,149,        hash += getType().hashCode();,1,0,0,1,4,0,2,0,2,5,29,4,0.00031,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,150,        hash += getWrappedField().hashCode();,1,0,0,1,4,0,2,0,2,5,37,4,0.00031,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,151,        return hash;,1,0,0,0,0,1,0,0,0,2,12,4,0.00031,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,155,        return (int) getUnitMillis();,0,0,0,1,4,2,1,0,1,5,29,5,0.00031,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,49,        return DurationFieldType.millis();,0,0,0,1,2,1,2,0,0,4,34,5,0.00031,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,726,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.00031,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,1,95,        return iChronology.weeks();,0,0,0,1,2,1,2,0,0,4,27,5,0.00031,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,1,69,        return iField;,1,0,0,0,0,1,0,0,0,2,14,4,0.00031,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,284,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.00031,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,128,        if (iRangeDurationField != null) {,1,1,0,1,3,1,0,0,0,5,34,4,0.00031,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,173,        return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,4,0.00031,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,180,        return iRangeField;,1,0,0,0,0,1,0,0,0,2,19,4,0.00031,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,209,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.00031,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,55,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.00031,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,316,        return iChronology.years();,0,0,0,1,2,1,2,0,0,4,27,5,0.00031,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,52,        return iChronology.months();,0,0,0,1,2,1,2,0,0,4,28,5,0.00031,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,96,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,122,"        super(base, null);",1,0,0,0,2,1,0,0,1,4,18,3,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,123,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",1,0,0,1,2,4,0,6,4,6,106,2,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,1,0,1,0,2,1,0,1,1,6,48,4,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,1,0,0,2,4,1,2,1,2,7,71,4,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",2,0,0,0,2,0,3,0,0,3,43,5,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,68,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,169,        if (getBase().getZone() == DateTimeZone.UTC) {,2,1,0,2,7,1,2,0,1,7,46,4,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,171,            fields.centuryOfEra = new DividedDateTimeField(,2,0,0,0,1,1,0,1,2,5,47,6,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,173,            fields.centuries = fields.centuryOfEra.getDurationField();,4,0,0,1,2,0,1,0,1,5,58,6,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,175,            fields.yearOfCentury = new RemainderDateTimeField(,2,0,0,0,1,1,0,1,2,5,50,6,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,177,            fields.weekyearOfCentury = new RemainderDateTimeField(,2,0,0,0,1,1,0,1,2,5,54,6,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,48,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",0,0,0,1,8,1,5,0,1,5,82,3,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,42,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,1,0,0,1,2,3,0,2,3,6,70,2,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,53,        return GregorianChronology.getInstanceUTC().eras();,0,0,0,1,4,1,3,0,0,4,51,5,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,94,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.00031,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,98,        return getWrappedField().getMaximumValue();,0,0,0,1,4,1,2,0,1,5,43,5,0.00031,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,81,        return INSTANCE_UTC;,1,0,0,0,0,1,0,0,0,2,20,4,0.00031,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,123,        return iRangeField;,1,0,0,0,0,1,0,0,0,2,19,4,0.0003,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,142,        return iUnitField;,1,0,0,0,0,1,0,0,0,2,18,4,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,146,        return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,5,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,143,        if ((base = getBase()) != null) {,1,1,0,3,7,1,1,0,2,7,33,4,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,45,public final class GregorianChronology extends BasicGJChronology {,1,0,0,0,1,4,0,1,2,5,66,1,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,148,"        super(base, param, minDaysInFirstWeek);",3,0,0,0,2,1,0,0,1,4,39,3,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,149,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",1,0,0,1,6,4,0,6,4,6,122,2,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,3,0,0,1,2,0,1,0,2,5,45,4,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,100,"        return getInstance(zone, 4);",0,0,0,0,2,1,2,0,1,4,28,4,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,111,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,115,        synchronized (cCache) {,1,0,0,1,3,1,0,0,0,4,23,4,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,116,            GregorianChronology[] chronos = cCache.get(zone);,1,0,0,1,4,0,3,1,0,5,49,6,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,117,            if (chronos == null) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,118,                chronos = new GregorianChronology[7];,1,0,0,0,2,1,0,1,1,5,37,8,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,119,"                cCache.put(zone, chronos);",0,0,0,0,2,0,4,0,0,2,26,9,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,122,                chrono = chronos[minDaysInFirstWeek - 1];,2,1,1,0,2,0,0,0,1,5,41,8,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,126,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,127,            if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,6,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,128,                if (zone == DateTimeZone.UTC) {,3,1,0,1,3,1,0,0,0,5,31,8,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",2,0,0,0,2,1,0,1,2,5,65,10,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,135,                chronos[minDaysInFirstWeek - 1] = chrono;,2,1,1,0,2,0,0,0,1,5,41,8,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,137,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,138,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,191,        if (getBase() == null) {,0,1,0,2,5,1,1,0,1,6,24,4,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,192,            super.assemble(fields);,2,0,0,1,2,1,0,0,0,4,23,7,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,194,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,225,        return MAX_YEAR;,1,0,0,0,0,1,0,0,0,2,16,4,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,229,        return MILLIS_PER_YEAR;,1,0,0,0,0,1,0,0,0,2,23,4,0.0003,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,237,        return MILLIS_PER_MONTH;,1,0,0,0,0,1,0,0,0,2,24,4,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,699,        return 12;,0,0,0,0,0,1,0,0,0,1,10,2,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,75,"        super(base, param, minDaysInFirstWeek);",3,0,0,0,2,1,0,0,1,4,39,3,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,76,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,1,0,0,0,3,4,0,0,3,4,55,2,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,1,0,0,0,3,4,0,0,3,4,55,2,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,1,0,0,0,2,2,0,0,1,4,47,4,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,1,0,0,0,2,2,0,0,1,4,47,4,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,56,        long minSum = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,57,        long maxSum = 0;,1,0,0,0,0,1,0,0,0,2,16,5,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,58,        for (int i = 0; i < 11; i++) {,3,1,0,1,3,2,0,0,1,6,30,4,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],1,1,1,0,2,1,0,0,0,5,41,7,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,61,            minSum += millis;,2,0,0,0,0,0,0,0,1,2,17,6,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,2,1,1,0,2,0,0,0,1,5,48,6,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],1,1,1,0,2,0,0,0,1,5,36,6,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,66,            maxSum += millis;,2,0,0,0,0,0,0,0,1,2,17,6,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,2,1,1,0,2,0,0,0,1,5,48,6,0.0003,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,69,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0003,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,321,            fields.copyFieldsFrom(iBase);,0,0,0,1,2,0,3,0,0,3,29,7,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,372,            flags = ,1,0,0,0,0,0,0,0,1,2,7,6,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,1,148,                        },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,1,134,        DateTimeZone zone = cDefault;,2,0,0,0,0,0,0,1,0,2,29,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,1,135,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,1,136,            synchronized(DateTimeZone.class) {,0,0,0,1,3,2,0,1,0,4,34,8,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,1,137,                zone = cDefault;,2,0,0,0,0,0,0,0,1,2,16,8,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,1,138,                if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,8,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,1,139,                    DateTimeZone temp = null;,1,0,0,0,0,0,0,1,0,2,25,10,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,1,142,"                            String id = System.getProperty(""user.timezone"");",1,0,0,1,2,0,2,1,1,6,48,14,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,1,143,                            if (id != null) {  // null check avoids stack overflow,1,1,0,1,3,1,0,0,0,5,54,14,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,1,144,                                temp = forID(id);,1,0,0,1,2,0,2,0,2,5,17,16,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,1,149,                        if (temp == null) {,1,1,0,1,3,1,0,0,0,5,19,12,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,1,154,                    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,1,155,                    if (temp == null) {,1,1,0,1,3,1,0,0,0,5,19,10,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,1,158,                    cDefault = zone = temp;,3,0,0,0,0,0,0,0,2,2,23,10,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,1,160,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeZone,1,162,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.00029,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,92,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,156,        return iMillis;,1,0,0,0,0,1,0,0,0,2,15,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,160,        return iMillisOfSecond;,1,0,0,0,0,1,0,0,0,2,23,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,164,        return iMillisOfDay;,1,0,0,0,0,1,0,0,0,2,20,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,168,        return iSeconds;,1,0,0,0,0,1,0,0,0,2,16,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,172,        return iSecondOfMinute;,1,0,0,0,0,1,0,0,0,2,23,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,176,        return iSecondOfDay;,1,0,0,0,0,1,0,0,0,2,20,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,180,        return iMinutes;,1,0,0,0,0,1,0,0,0,2,16,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,184,        return iMinuteOfHour;,1,0,0,0,0,1,0,0,0,2,21,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,188,        return iMinuteOfDay;,1,0,0,0,0,1,0,0,0,2,20,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,192,        return iHours;,1,0,0,0,0,1,0,0,0,2,14,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,196,        return iHourOfDay;,1,0,0,0,0,1,0,0,0,2,18,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,200,        return iClockhourOfDay;,1,0,0,0,0,1,0,0,0,2,23,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,204,        return iHalfdays;,1,0,0,0,0,1,0,0,0,2,17,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,208,        return iHourOfHalfday;,1,0,0,0,0,1,0,0,0,2,22,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,212,        return iClockhourOfHalfday;,1,0,0,0,0,1,0,0,0,2,27,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,216,        return iHalfdayOfDay;,1,0,0,0,0,1,0,0,0,2,21,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,220,        return iDays;,1,0,0,0,0,1,0,0,0,2,13,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,224,        return iDayOfWeek;,1,0,0,0,0,1,0,0,0,2,18,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,228,        return iDayOfMonth;,1,0,0,0,0,1,0,0,0,2,19,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,232,        return iDayOfYear;,1,0,0,0,0,1,0,0,0,2,18,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,236,        return iWeeks;,1,0,0,0,0,1,0,0,0,2,14,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,240,        return iWeekOfWeekyear;,1,0,0,0,0,1,0,0,0,2,23,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,244,        return iWeekyears;,1,0,0,0,0,1,0,0,0,2,18,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,248,        return iWeekyear;,1,0,0,0,0,1,0,0,0,2,17,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,252,        return iWeekyearOfCentury;,1,0,0,0,0,1,0,0,0,2,26,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,256,        return iMonths;,1,0,0,0,0,1,0,0,0,2,15,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,260,        return iMonthOfYear;,1,0,0,0,0,1,0,0,0,2,20,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,264,        return iYears;,1,0,0,0,0,1,0,0,0,2,14,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,272,        return iYearOfEra;,1,0,0,0,0,1,0,0,0,2,18,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,276,        return iYearOfCentury;,1,0,0,0,0,1,0,0,0,2,22,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,280,        return iCenturies;,1,0,0,0,0,1,0,0,0,2,18,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,284,        return iCenturyOfEra;,1,0,0,0,0,1,0,0,0,2,21,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,292,        return iEra;,1,0,0,0,0,1,0,0,0,2,12,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,445,                if (isSupported(f = chrono.millis())) {,1,0,0,3,7,1,3,0,2,6,39,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,446,                    millis = f;,2,0,0,0,0,0,0,0,1,2,11,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,448,                if (isSupported(f = chrono.seconds())) {,1,0,0,3,7,1,3,0,2,6,40,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,449,                    seconds = f;,2,0,0,0,0,0,0,0,1,2,12,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,451,                if (isSupported(f = chrono.minutes())) {,1,0,0,3,7,1,3,0,2,6,40,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,452,                    minutes = f;,2,0,0,0,0,0,0,0,1,2,12,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,454,                if (isSupported(f = chrono.hours())) {,1,0,0,3,7,1,3,0,2,6,38,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,455,                    hours = f;,2,0,0,0,0,0,0,0,1,2,10,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,457,                if (isSupported(f = chrono.halfdays())) {,1,0,0,3,7,1,3,0,2,6,41,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,458,                    halfdays = f;,2,0,0,0,0,0,0,0,1,2,13,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,460,                if (isSupported(f = chrono.days())) {,1,0,0,3,7,1,3,0,2,6,37,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,461,                    days = f;,2,0,0,0,0,0,0,0,1,2,9,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,463,                if (isSupported(f = chrono.weeks())) {,1,0,0,3,7,1,3,0,2,6,38,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,464,                    weeks = f;,2,0,0,0,0,0,0,0,1,2,10,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,466,                if (isSupported(f = chrono.weekyears())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,467,                    weekyears = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,469,                if (isSupported(f = chrono.months())) {,1,0,0,3,7,1,3,0,2,6,39,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,470,                    months = f;,2,0,0,0,0,0,0,0,1,2,11,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,472,                if (isSupported(f = chrono.years())) {,1,0,0,3,7,1,3,0,2,6,38,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,473,                    years = f;,2,0,0,0,0,0,0,0,1,2,10,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,475,                if (isSupported(f = chrono.centuries())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,476,                    centuries = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,478,                if (isSupported(f = chrono.eras())) {,1,0,0,3,7,1,3,0,2,6,37,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,485,                if (isSupported(f = chrono.millisOfSecond())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,486,                    millisOfSecond = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,488,                if (isSupported(f = chrono.millisOfDay())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,489,                    millisOfDay = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,491,                if (isSupported(f = chrono.secondOfMinute())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,492,                    secondOfMinute = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,494,                if (isSupported(f = chrono.secondOfDay())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,495,                    secondOfDay = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,497,                if (isSupported(f = chrono.minuteOfHour())) {,1,0,0,3,7,1,3,0,2,6,45,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,498,                    minuteOfHour = f;,2,0,0,0,0,0,0,0,1,2,17,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,500,                if (isSupported(f = chrono.minuteOfDay())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,501,                    minuteOfDay = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,503,                if (isSupported(f = chrono.hourOfDay())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,504,                    hourOfDay = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,506,                if (isSupported(f = chrono.clockhourOfDay())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,507,                    clockhourOfDay = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,509,                if (isSupported(f = chrono.hourOfHalfday())) {,1,0,0,3,7,1,3,0,2,6,46,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,510,                    hourOfHalfday = f;,2,0,0,0,0,0,0,0,1,2,18,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,1,0,0,3,7,1,3,0,2,6,51,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,513,                    clockhourOfHalfday = f;,2,0,0,0,0,0,0,0,1,2,23,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,515,                if (isSupported(f = chrono.halfdayOfDay())) {,1,0,0,3,7,1,3,0,2,6,45,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,516,                    halfdayOfDay = f;,2,0,0,0,0,0,0,0,1,2,17,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,518,                if (isSupported(f = chrono.dayOfWeek())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,519,                    dayOfWeek = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,521,                if (isSupported(f = chrono.dayOfMonth())) {,1,0,0,3,7,1,3,0,2,6,43,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,522,                    dayOfMonth = f;,2,0,0,0,0,0,0,0,1,2,15,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,524,                if (isSupported(f = chrono.dayOfYear())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,525,                    dayOfYear = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,1,0,0,3,7,1,3,0,2,6,47,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,528,                    weekOfWeekyear = f;,2,0,0,0,0,0,0,0,1,2,19,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,530,                if (isSupported(f = chrono.weekyear())) {,1,0,0,3,7,1,3,0,2,6,41,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,531,                    weekyear = f;,2,0,0,0,0,0,0,0,1,2,13,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,1,0,0,3,7,1,3,0,2,6,50,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,534,                    weekyearOfCentury = f;,2,0,0,0,0,0,0,0,1,2,22,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,536,                if (isSupported(f = chrono.monthOfYear())) {,1,0,0,3,7,1,3,0,2,6,44,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,537,                    monthOfYear = f;,2,0,0,0,0,0,0,0,1,2,16,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,539,                if (isSupported(f = chrono.year())) {,1,0,0,3,7,1,3,0,2,6,37,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,540,                    year = f;,2,0,0,0,0,0,0,0,1,2,9,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,542,                if (isSupported(f = chrono.yearOfEra())) {,1,0,0,3,7,1,3,0,2,6,42,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,543,                    yearOfEra = f;,2,0,0,0,0,0,0,0,1,2,14,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,545,                if (isSupported(f = chrono.yearOfCentury())) {,1,0,0,3,7,1,3,0,2,6,46,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,546,                    yearOfCentury = f;,2,0,0,0,0,0,0,0,1,2,18,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,548,                if (isSupported(f = chrono.centuryOfEra())) {,1,0,0,3,7,1,3,0,2,6,45,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,549,                    centuryOfEra = f;,2,0,0,0,0,0,0,0,1,2,17,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,551,                if (isSupported(f = chrono.era())) {,1,0,0,3,7,1,3,0,2,6,36,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,552,                    era = f;,2,0,0,0,0,0,0,0,1,2,8,8,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,555,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,558,            return field == null ? false : field.isSupported();,1,1,0,1,2,1,2,0,1,7,51,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,562,            return field == null ? false : field.isSupported();,1,1,0,1,2,1,2,0,1,7,51,6,0.00029,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,53,            field = cCache.get(type);,1,0,0,1,2,0,3,0,1,5,25,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,268,        return iYear;,1,0,0,0,0,1,0,0,0,2,13,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0,0,0,2,4,1,4,0,0,4,70,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,99,"    protected AssembledChronology(Chronology base, Object param) {",3,0,0,0,3,1,0,2,1,5,62,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,100,        iBase = base;,2,0,0,0,0,0,0,0,1,2,13,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,101,        iParam = param;,2,0,0,0,0,0,0,0,1,2,15,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,102,        setFields();,0,0,0,1,2,0,1,0,1,4,12,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,103,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,288,        return iEras;,1,0,0,0,0,1,0,0,0,2,13,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,308,        return iBase;,1,0,0,0,0,1,0,0,0,2,13,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,319,        Fields fields = new Fields();,1,0,0,1,2,1,0,2,1,6,29,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,320,        if (iBase != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,323,        assemble(fields);,0,0,0,1,2,0,2,0,1,4,17,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,6,1,0,1,4,1,0,0,2,6,65,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,6,1,0,1,4,1,0,0,2,6,66,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,6,1,0,1,4,1,0,0,2,6,66,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,6,1,0,1,4,1,0,0,2,6,64,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,6,1,0,1,4,1,0,0,2,6,67,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,332,            iDays      = (f = fields.days)      != null ? f : super.days();,6,1,0,1,4,1,0,0,2,6,63,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,6,1,0,1,4,1,0,0,2,6,64,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,6,1,0,1,4,1,0,0,2,6,68,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,6,1,0,1,4,1,0,0,2,6,65,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,336,            iYears     = (f = fields.years)     != null ? f : super.years();,6,1,0,1,4,1,0,0,2,6,64,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,6,1,0,1,4,1,0,0,2,6,68,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,6,1,0,1,4,1,0,0,2,6,63,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,6,1,0,1,4,1,0,0,2,6,91,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,6,1,0,1,4,1,0,0,2,6,88,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,6,1,0,1,4,1,0,0,2,6,91,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,6,1,0,1,4,1,0,0,2,6,88,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,6,1,0,1,4,1,0,0,2,6,89,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,6,1,0,1,4,1,0,0,2,6,88,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,6,1,0,1,4,1,0,0,2,6,86,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,6,1,0,1,4,1,0,0,2,6,91,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,6,1,0,1,4,1,0,0,2,6,90,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,6,1,0,1,4,1,0,0,2,6,95,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,6,1,0,1,4,1,0,0,2,6,89,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,6,1,0,1,4,1,0,0,2,6,86,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,6,1,0,1,4,1,0,0,2,6,87,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,6,1,0,1,4,1,0,0,2,6,86,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,6,1,0,1,4,1,0,0,2,6,91,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,6,1,0,1,4,1,0,0,2,6,85,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,6,1,0,1,4,1,0,0,2,6,94,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,6,1,0,1,4,1,0,0,2,6,88,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,361,            iYear               = (f = fields.year)               != null ? f : super.year();,6,1,0,1,4,1,0,0,2,6,81,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,6,1,0,1,4,1,0,0,2,6,86,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,6,1,0,1,4,1,0,0,2,6,90,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,6,1,0,1,4,1,0,0,2,6,89,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,365,            iEra                = (f = fields.era)                != null ? f : super.era();,6,1,0,1,4,1,0,0,2,6,80,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,369,        if (iBase == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,370,            flags = 0;,1,0,0,0,0,0,0,0,1,2,10,6,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,385,        iBaseFlags = flags;,2,0,0,0,0,0,0,0,1,2,19,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,386,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,43,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);",1,0,0,1,4,1,2,0,1,6,49,3,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,44,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,131,"        super(base, param);",2,0,0,0,2,1,0,0,1,4,19,3,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,126,    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];,1,0,1,0,4,4,0,2,3,6,77,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,133,        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {,2,3,0,1,3,1,0,0,0,5,55,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,138,        iMinDaysInFirstWeek = minDaysInFirstWeek;,2,0,0,0,0,0,0,0,1,2,41,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,139,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,76,        cMillisField = MillisDurationField.INSTANCE;,3,0,0,0,0,0,0,0,1,2,44,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,77,        cSecondsField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,40,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,79,        cMinutesField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,40,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,81,        cHoursField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,38,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,83,        cHalfdaysField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,41,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,85,        cDaysField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,37,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,87,        cWeeksField = new PreciseDurationField,1,0,0,0,0,1,0,1,2,4,38,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,90,        cMillisOfSecondField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,47,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,93,        cMillisOfDayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,44,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,96,        cSecondOfMinuteField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,47,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,99,        cSecondOfDayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,44,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,102,        cMinuteOfHourField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,45,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,105,        cMinuteOfDayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,44,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,108,        cHourOfDayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,42,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,111,        cHourOfHalfdayField = new PreciseDateTimeField,1,0,0,0,0,1,0,1,2,4,46,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,114,        cClockhourOfDayField = new ZeroIsMaxDateTimeField,1,0,0,0,0,1,0,1,2,4,49,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,117,        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField,1,0,0,0,0,1,0,1,2,4,53,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,120,        cHalfdayOfDayField = new HalfdayField();,1,0,0,1,2,1,0,1,2,6,40,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,121,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,250,        fields.millis = cMillisField;,3,0,0,0,0,0,0,0,1,2,29,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,251,        fields.seconds = cSecondsField;,3,0,0,0,0,0,0,0,1,2,31,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,252,        fields.minutes = cMinutesField;,3,0,0,0,0,0,0,0,1,2,31,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,253,        fields.hours = cHoursField;,3,0,0,0,0,0,0,0,1,2,27,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,254,        fields.halfdays = cHalfdaysField;,3,0,0,0,0,0,0,0,1,2,33,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,255,        fields.days = cDaysField;,3,0,0,0,0,0,0,0,1,2,25,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,256,        fields.weeks = cWeeksField;,3,0,0,0,0,0,0,0,1,2,27,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,258,        fields.millisOfSecond = cMillisOfSecondField;,3,0,0,0,0,0,0,0,1,2,45,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,259,        fields.millisOfDay = cMillisOfDayField;,3,0,0,0,0,0,0,0,1,2,39,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,260,        fields.secondOfMinute = cSecondOfMinuteField;,3,0,0,0,0,0,0,0,1,2,45,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,261,        fields.secondOfDay = cSecondOfDayField;,3,0,0,0,0,0,0,0,1,2,39,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,262,        fields.minuteOfHour = cMinuteOfHourField;,3,0,0,0,0,0,0,0,1,2,41,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,263,        fields.minuteOfDay = cMinuteOfDayField;,3,0,0,0,0,0,0,0,1,2,39,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,264,        fields.hourOfDay = cHourOfDayField;,3,0,0,0,0,0,0,0,1,2,35,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,265,        fields.hourOfHalfday = cHourOfHalfdayField;,3,0,0,0,0,0,0,0,1,2,43,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,266,        fields.clockhourOfDay = cClockhourOfDayField;,3,0,0,0,0,0,0,0,1,2,45,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,267,        fields.clockhourOfHalfday = cClockhourOfHalfdayField;,3,0,0,0,0,0,0,0,1,2,53,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,268,        fields.halfdayOfDay = cHalfdayOfDayField;,3,0,0,0,0,0,0,0,1,2,41,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,273,        fields.year = new BasicYearDateTimeField(this);,2,0,0,1,2,2,0,1,2,6,47,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,274,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);",4,0,0,0,2,2,0,1,2,5,67,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,277,        DateTimeField field = new OffsetDateTimeField(,1,0,0,0,1,1,0,2,1,5,46,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,279,        fields.centuryOfEra = new DividedDateTimeField(,2,0,0,0,1,1,0,1,2,5,47,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,281,        fields.centuries = fields.centuryOfEra.getDurationField();,4,0,0,1,2,0,1,0,1,5,58,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,283,        field = new RemainderDateTimeField(,1,0,0,0,1,1,0,1,2,5,35,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,285,        fields.yearOfCentury = new OffsetDateTimeField(,2,0,0,0,1,1,0,1,2,5,47,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,288,        fields.era = new GJEraDateTimeField(this);,2,0,0,1,2,2,0,1,2,6,42,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,289,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);",4,0,0,0,2,2,0,1,2,5,67,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,290,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);",4,0,0,0,2,2,0,1,2,5,72,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,291,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);",4,0,0,0,2,2,0,1,2,5,70,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,292,        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);,2,0,0,1,2,2,0,1,2,6,58,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,293,        fields.weekyear = new BasicWeekyearDateTimeField(this);,2,0,0,1,2,2,0,1,2,6,55,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,294,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);",4,0,0,0,2,2,0,1,2,5,81,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,296,        field = new RemainderDateTimeField(,1,0,0,0,1,1,0,1,2,5,35,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,298,        fields.weekyearOfCentury = new OffsetDateTimeField(,2,0,0,0,1,1,0,1,2,5,51,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,303,        fields.years = fields.year.getDurationField();,4,0,0,1,2,0,1,0,1,5,46,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,304,        fields.months = fields.monthOfYear.getDurationField();,4,0,0,1,2,0,1,0,1,5,54,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,305,        fields.weekyears = fields.weekyear.getDurationField();,4,0,0,1,2,0,1,0,1,5,54,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,306,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,50,abstract class BasicChronology extends AssembledChronology {,1,0,0,0,1,3,0,1,1,5,60,1,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,164,        return MILLIS_OF_SECOND_TYPE;,1,0,0,0,0,1,0,0,0,2,29,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,173,        return MILLIS_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,209,        return MINUTE_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,218,        return HOUR_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,24,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,236,        return HOUR_OF_HALFDAY_TYPE;,1,0,0,0,0,1,0,0,0,2,28,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,245,        return CLOCKHOUR_OF_HALFDAY_TYPE;,1,0,0,0,0,1,0,0,0,2,33,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,254,        return HALFDAY_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,27,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,264,        return DAY_OF_WEEK_TYPE;,1,0,0,0,0,1,0,0,0,2,24,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,282,        return DAY_OF_YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,24,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,291,        return WEEK_OF_WEEKYEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,29,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,300,        return WEEKYEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,21,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,309,        return WEEKYEAR_OF_CENTURY_TYPE;,1,0,0,0,0,1,0,0,0,2,32,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,318,        return MONTH_OF_YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,26,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,336,        return YEAR_OF_ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,24,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,345,        return YEAR_OF_CENTURY_TYPE;,1,0,0,0,0,1,0,0,0,2,28,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,354,        return CENTURY_OF_ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,27,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,363,        return ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,16,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,52,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());",0,0,0,1,6,1,4,0,1,5,78,3,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,53,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,54,        iMax = iChronology.getMaxMonth();,1,0,0,1,2,0,2,0,1,5,33,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,55,        iLeapMonth = leapMonth;,2,0,0,0,0,0,0,0,1,2,23,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,56,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,56,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.00029,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,57,        iUnitMillis = unitMillis;,2,0,0,0,0,0,0,0,1,2,25,4,0.00029,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,58,        iDurationField = new LinkedDurationField(type.getDurationType());,1,0,0,2,4,1,2,1,2,7,65,4,0.00029,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,59,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,138,        return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,4,0.00029,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,152,        LinkedDurationField(DurationFieldType type) {,2,0,0,1,3,0,0,1,0,4,45,3,0.00029,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,153,            super(type);,1,0,0,1,2,1,0,0,1,5,12,4,0.00029,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,154,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,1,55,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.00029,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,1,56,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.00029,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,1,59,        if (!field.isSupported()) {,0,0,0,2,5,1,2,0,1,5,27,4,0.00029,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,1,62,        iField = field;,2,0,0,0,0,0,0,0,1,2,15,4,0.00029,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,1,63,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,1,71,        return iField;,1,0,0,0,0,1,0,0,0,2,14,4,0.00029,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,1,87,        return iField.getDurationField();,0,0,0,1,2,1,2,0,0,4,33,5,0.00029,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,1,91,        return iField.getRangeDurationField();,0,0,0,1,2,1,2,0,0,4,38,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,1,46,"        super(DateTimeFieldType.dayOfWeek(), days);",1,0,0,1,4,1,2,0,1,6,43,3,0.00029,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,1,47,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,1,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,42,"        super(DateTimeFieldType.dayOfMonth(), days);",1,0,0,1,4,1,2,0,1,6,44,3,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,43,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,46,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.00029,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,47,        if (field.getMinimumValue() != 0) {,0,1,0,2,5,1,2,0,0,5,35,4,0.00029,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,50,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,759,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);",2,0,0,1,4,1,2,0,1,6,68,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,760,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,46,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());",0,0,0,1,6,1,4,0,1,5,70,3,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,47,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,120,        return iChronology.getMaxYear();,0,0,0,1,2,1,2,0,0,4,32,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,42,"        super(yearField, DateTimeFieldType.yearOfEra());",1,0,0,1,4,1,2,0,1,6,48,3,0.00029,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,43,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,48,        return iChronology.eras();,0,0,0,1,2,1,2,0,0,4,26,5,0.00029,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,100,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,104,        return getWrappedField().getMaximumValue();,0,0,0,1,4,1,2,0,1,5,43,5,0.00029,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,47,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",7,1,0,2,6,1,2,0,0,6,100,4,0.00029,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,48,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,59,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",7,0,0,0,2,1,0,0,0,3,64,4,0.00029,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,74,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.00029,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,76,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.00029,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,80,        iOffset = offset;,2,0,0,0,0,0,0,0,1,2,17,4,0.00029,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,82,        if (minValue < (field.getMinimumValue() + offset)) {,2,2,0,3,7,1,2,0,0,6,52,4,0.00029,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,83,            iMin = field.getMinimumValue() + offset;,2,1,0,1,2,0,2,0,1,6,40,6,0.00029,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,87,        if (maxValue > (field.getMaximumValue() + offset)) {,2,2,0,3,7,1,2,0,0,6,52,4,0.00029,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,88,            iMax = field.getMaximumValue() + offset;,2,1,0,1,2,0,2,0,1,6,40,6,0.00029,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,92,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,175,        return iMin;,1,0,0,0,0,1,0,0,0,2,12,4,0.00029,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,184,        return iMax;,1,0,0,0,0,1,0,0,0,2,12,4,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,58,"        this(field, field.getRangeDurationField(), type, divisor);",3,0,0,1,4,1,2,0,0,5,58,4,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,59,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,72,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,73,        if (divisor < 2) {,1,1,0,1,3,1,0,0,0,5,18,4,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,76,        DurationField unitField = field.getDurationField();,1,0,0,1,2,0,2,1,0,5,51,4,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,77,        if (unitField == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,80,            iDurationField = new ScaledDurationField(,1,0,0,0,1,1,0,1,2,5,41,6,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,83,        iRangeDurationField = rangeField;,2,0,0,0,0,0,0,0,1,2,33,4,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,84,        iDivisor = divisor;,2,0,0,0,0,0,0,0,1,2,19,4,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,85,        int i = field.getMinimumValue();,1,0,0,1,2,1,2,0,0,5,32,5,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,86,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,6,5,0,2,6,1,0,0,0,5,59,5,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,87,        int j = field.getMaximumValue();,1,0,0,1,2,1,2,0,0,5,32,5,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,88,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,6,5,0,2,6,1,0,0,0,5,59,5,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,89,        iMin = min;,2,0,0,0,0,0,0,0,1,2,11,4,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,90,        iMax = max;,2,0,0,0,0,0,0,0,1,2,11,4,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,91,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,211,        return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,4,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,82,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,83,        if (divisor < 2) {,1,1,0,1,3,1,0,0,0,5,18,4,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,86,        iRangeField = rangeField;,2,0,0,0,0,0,0,0,1,2,25,4,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,87,        iDurationField = field.getDurationField();,1,0,0,1,2,0,2,0,1,5,42,4,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,88,        iDivisor = divisor;,2,0,0,0,0,0,0,0,1,2,19,4,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,89,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,98,"        this(dividedField, dividedField.getType());",1,0,0,1,4,1,2,0,0,5,43,4,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,99,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,109,"        this(dividedField, dividedField.getWrappedField().getDurationField(), type);",2,0,0,1,6,1,3,0,0,5,76,4,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,110,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,122,"        super(dividedField.getWrappedField(), type);",1,0,0,1,4,1,2,0,1,6,44,3,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,123,        iDivisor = dividedField.iDivisor;,3,0,0,0,0,0,0,0,1,2,33,4,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,124,        iDurationField = durationField;,2,0,0,0,0,0,0,0,1,2,31,4,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,125,        iRangeField = dividedField.iDurationField;,3,0,0,0,0,0,0,0,1,2,42,4,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,126,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,189,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.00029,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,199,        return iDivisor - 1;,1,1,0,0,0,1,0,0,0,3,20,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,47,        super(DateTimeFieldType.era());,0,0,0,2,4,1,2,0,1,5,31,3,0.00029,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,48,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,49,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,42,"        super(DateTimeFieldType.dayOfYear(), days);",1,0,0,1,4,1,2,0,1,6,43,3,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,43,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,44,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,1,38,"        super(chronology, 2);",1,0,0,0,2,1,0,0,1,4,21,3,0.00029,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,1,39,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,45,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());",0,0,0,1,6,1,4,0,1,5,74,3,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,46,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.00029,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,47,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,436,        Fields() {,1,0,0,1,3,0,0,0,0,3,10,3,0.00029,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,437,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,452,            return iUnitType;,1,0,0,0,0,1,0,0,0,2,17,5,0.00029,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,70,    private UnsupportedDurationField(DurationFieldType type) {,2,0,0,1,3,1,0,1,1,6,58,2,0.00029,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,71,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.00029,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,49,        if (cCache == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.00029,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",1,0,0,1,2,1,0,3,2,6,69,6,0.00029,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,51,            field = null;,1,0,0,0,0,0,0,0,1,2,13,6,0.00029,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,55,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.00029,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,56,            field = new UnsupportedDurationField(type);,2,0,0,1,2,1,0,1,2,6,43,6,0.00029,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,57,"            cCache.put(type, field);",0,0,0,0,2,0,4,0,0,2,24,7,0.00029,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,59,        return field;,1,0,0,0,0,1,0,0,0,2,13,4,0.00029,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,2,4,0,1,4,1,2,0,1,7,68,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,227,        return CLOCKHOUR_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,29,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,273,        return DAY_OF_MONTH_TYPE;,1,0,0,0,0,1,0,0,0,2,25,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,327,        return YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,17,4,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,54,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,200,        return MINUTE_OF_HOUR_TYPE;,1,0,0,0,0,1,0,0,0,2,27,4,0.00029,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,66,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.00029,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,71,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.00029,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,69,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.00029,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,80,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,63,        return iUnitMillis;,1,0,0,0,0,1,0,0,0,2,19,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,191,        return SECOND_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,4,0.00029,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,58,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,151,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.00029,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,54,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00029,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,55,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/Chronology,1,63,public abstract class Chronology {,1,0,0,0,1,3,0,0,2,4,34,1,0.00029,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,62,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,43,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,44,        iUnitMillis = unitMillis;,2,0,0,0,0,0,0,0,1,2,25,4,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,1,52,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.00029,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,1,53,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.00029,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,1,56,        if (!field.isSupported()) {,0,0,0,2,5,1,2,0,1,5,27,4,0.00029,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,1,59,        iField = field;,2,0,0,0,0,0,0,0,1,2,15,4,0.00029,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,1,60,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,47,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.00029,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,48,        if (scalar == 0 || scalar == 1) {,2,3,0,1,3,1,0,0,0,5,33,4,0.00029,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,51,        iScalar = scalar;,2,0,0,0,0,0,0,0,1,2,17,4,0.00029,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,155,        return iUnitMillis;,1,0,0,0,0,1,0,0,0,2,19,4,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,58,"        super(type, unit);",2,0,0,0,2,1,0,0,1,4,18,3,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,60,        if (!range.isPrecise()) {,0,0,0,2,5,1,2,0,1,5,25,4,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,64,        long rangeMillis = range.getUnitMillis();,1,0,0,1,2,1,2,0,0,5,41,5,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,65,        iRange = (int)(rangeMillis / getUnitMillis());,2,1,0,2,6,1,1,0,2,7,46,4,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,66,        if (iRange < 2) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,70,        iRangeField = range;,2,0,0,0,0,0,0,0,1,2,20,4,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,71,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/DurationFieldType,1,278,            return (1 << iOrdinal);,1,1,0,1,2,1,0,0,0,5,23,6,0.00029,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,44,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00029,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,45,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,38,    public static final DurationField INSTANCE = new MillisDurationField();,1,0,0,1,2,4,0,2,4,6,71,2,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,49,        super(type);,1,0,0,1,2,1,0,0,1,5,12,3,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,51,        if (!unit.isPrecise()) {,0,0,0,2,5,1,2,0,1,5,24,4,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,55,        iUnitMillis = unit.getUnitMillis();,1,0,0,1,2,0,2,0,1,5,35,4,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,56,        if (iUnitMillis < 1) {,1,1,0,1,3,1,0,0,0,5,22,4,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,60,        iUnitField = unit;,2,0,0,0,0,0,0,0,1,2,18,4,0.00029,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,61,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,41,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,1,0,0,1,2,4,0,2,4,6,94,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,43,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,0,0,0,3,0,1,3,4,80,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,49,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();",1,0,0,1,2,1,0,6,1,6,74,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,50,"        map.put(""UT"", DateTimeZone.UTC);",2,0,0,0,2,0,2,0,1,4,32,5,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,51,"        map.put(""UTC"", DateTimeZone.UTC);",2,0,0,0,2,0,2,0,1,4,33,5,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,52,"        map.put(""GMT"", DateTimeZone.UTC);",2,0,0,0,2,0,2,0,1,4,33,5,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,53,"        put(map, ""EST"", ""America/New_York"");",0,0,0,0,2,0,2,0,3,3,36,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,54,"        put(map, ""EDT"", ""America/New_York"");",0,0,0,0,2,0,2,0,3,3,36,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,55,"        put(map, ""CST"", ""America/Chicago"");",0,0,0,0,2,0,2,0,3,3,35,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,56,"        put(map, ""CDT"", ""America/Chicago"");",0,0,0,0,2,0,2,0,3,3,35,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,57,"        put(map, ""MST"", ""America/Denver"");",0,0,0,0,2,0,2,0,3,3,34,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,58,"        put(map, ""MDT"", ""America/Denver"");",0,0,0,0,2,0,2,0,3,3,34,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,59,"        put(map, ""PST"", ""America/Los_Angeles"");",0,0,0,0,2,0,2,0,3,3,39,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,60,"        put(map, ""PDT"", ""America/Los_Angeles"");",0,0,0,0,2,0,2,0,3,3,39,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,61,        cZoneNames = Collections.unmodifiableMap(map);,1,0,0,1,2,0,3,0,1,5,46,4,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,65,"            map.put(name, DateTimeZone.forID(id));",0,0,0,1,4,0,6,0,0,3,38,7,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,68,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,69,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,526,    static class SystemMillisProvider implements MillisProvider {,1,0,0,0,1,3,0,1,1,5,61,2,0.00029,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,182,        return SECOND_OF_MINUTE_TYPE;,1,0,0,0,0,1,0,0,0,2,29,4,0.00028,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,50,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00028,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,51,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00028,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,54,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.00028,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,55,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeField,1,33,public abstract class DateTimeField {,1,0,0,0,1,3,0,0,2,4,37,1,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,153,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,154,        iName = name;,2,0,0,0,0,0,0,0,1,2,13,4,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,155,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,73,    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,80,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,76,    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,88,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,79,    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,91,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,82,    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,92,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,85,    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,81,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,88,    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,88,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,91,    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,90,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,94,    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,89,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,97,    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,96,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,100,    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,85,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,103,    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,93,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,106,    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,88,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,110,    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,91,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,113,    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,92,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,116,    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,97,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,119,    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,93,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,122,    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,88,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,125,    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,90,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,128,    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,91,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,131,    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,90,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,134,    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,93,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,137,    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,90,2,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,140,    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(,1,0,0,0,1,4,0,2,4,5,93,2,0.00028,0,0
defect4j,time,org/joda/time/DurationFieldType,1,141,        return HALFDAYS_TYPE;,1,0,0,0,0,1,0,0,0,2,21,4,0.00028,0,0
defect4j,time,org/joda/time/DurationFieldType,1,169,        return WEEKYEARS_TYPE;,1,0,0,0,0,1,0,0,0,2,22,4,0.00028,0,0
defect4j,time,org/joda/time/DurationFieldType,1,205,        return ERAS_TYPE;,1,0,0,0,0,1,0,0,0,2,17,4,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,444,            super(name);,1,0,0,1,2,1,0,0,1,5,12,4,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,445,            iOrdinal = ordinal;,2,0,0,0,0,0,0,0,1,2,19,5,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,446,            iUnitType = unitType;,2,0,0,0,0,0,0,0,1,2,21,5,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,447,            iRangeType = rangeType;,2,0,0,0,0,0,0,0,1,2,23,5,0.00028,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,448,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00028,0,0
defect4j,time,org/joda/time/DurationFieldType,1,196,        return CENTURIES_TYPE;,1,0,0,0,0,1,0,0,0,2,22,4,0.00028,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,47,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00028,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,48,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00028,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,51,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.00028,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,52,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00028,0,0
defect4j,time,org/joda/time/DurationField,1,30,public abstract class DurationField implements Comparable<DurationField> {,1,0,0,0,1,4,0,2,2,5,74,1,0.00028,0,0
defect4j,time,org/joda/time/DurationFieldType,1,105,        return MILLIS_TYPE;,1,0,0,0,0,1,0,0,0,2,19,4,0.00028,0,0
defect4j,time,org/joda/time/DurationFieldType,1,178,        return MONTHS_TYPE;,1,0,0,0,0,1,0,0,0,2,19,4,0.00028,0,0
defect4j,time,org/joda/time/DurationFieldType,1,187,        return YEARS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,4,0.00028,0,0
defect4j,time,org/joda/time/DurationFieldType,1,160,        return WEEKS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,4,0.00028,0,0
defect4j,time,org/joda/time/DurationFieldType,1,132,        return HOURS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,4,0.00028,0,0
defect4j,time,org/joda/time/DurationFieldType,1,151,        return DAYS_TYPE;,1,0,0,0,0,1,0,0,0,2,17,4,0.00028,0,0
defect4j,time,org/joda/time/DurationFieldType,1,114,        return SECONDS_TYPE;,1,0,0,0,0,1,0,0,0,2,20,4,0.00027,0,0
defect4j,time,org/joda/time/DurationFieldType,1,123,        return MINUTES_TYPE;,1,0,0,0,0,1,0,0,0,2,20,4,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,1,205,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,1,208,"        if (id.equals(""UTC"")) {",0,0,0,2,5,1,2,0,1,5,23,5,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,1,211,        DateTimeZone zone = cProvider.getZone(id);,1,0,0,1,2,0,3,1,0,5,42,4,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,1,212,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,1,213,            return zone;,1,0,0,0,0,1,0,0,0,2,12,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",4,0,0,0,3,1,0,2,0,4,59,3,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,748,            iOfYear = ofYear;,2,0,0,0,0,0,0,0,1,2,17,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,749,            iNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,19,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,750,            iSaveMillis = saveMillis;,2,0,0,0,0,0,0,0,1,2,25,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,751,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0,0,0,1,10,3,7,1,2,6,78,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,504,        {,0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,3,5,0,1,3,1,0,0,3,6,48,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,509,            iMode = mode;,2,0,0,0,0,0,0,0,1,2,13,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,510,            iMonthOfYear = monthOfYear;,2,0,0,0,0,0,0,0,1,2,27,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,511,            iDayOfMonth = dayOfMonth;,2,0,0,0,0,0,0,0,1,2,25,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,512,            iDayOfWeek = dayOfWeek;,2,0,0,0,0,0,0,0,1,2,23,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,513,            iAdvance = advanceDayOfWeek;,2,0,0,0,0,0,0,0,1,2,28,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,514,            iMillisOfDay = millisOfDay;,2,0,0,0,0,0,0,0,1,2,27,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,515,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,482,"            return new OfYear((char)in.readUnsignedByte(),",0,0,0,1,5,3,2,1,1,6,46,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,95,        if (in instanceof DataInput) {,1,0,0,1,3,2,0,1,0,5,30,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,98,"            return readFrom((DataInput)new DataInputStream(in), id);",1,0,0,1,6,2,2,2,2,7,56,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,110,        switch (in.readUnsignedByte()) {,0,0,0,2,5,1,2,0,0,4,32,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0,0,0,0,4,1,6,0,0,3,70,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,183,        int v = in.readUnsignedByte();,1,0,0,1,2,1,2,0,0,5,30,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,184,        switch (v >> 6) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,187,            v = (v << (32 - 6)) >> (32 - 6);,2,4,0,2,6,0,0,0,1,5,32,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,188,            return v * (30 * 60000L);,1,2,0,1,2,1,0,0,0,5,25,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,192,            v = (v << (32 - 6)) >> (32 - 30);,2,4,0,2,6,0,0,0,1,5,33,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,193,            v |= (in.readUnsignedByte()) << 16;,1,1,0,2,4,0,2,0,1,6,35,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,194,            v |= (in.readUnsignedByte()) << 8;,1,1,0,2,4,0,2,0,1,6,34,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,195,            v |= (in.readUnsignedByte());,1,0,0,2,4,0,2,0,1,5,29,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,196,            return v * 60000L;,1,1,0,0,0,1,0,0,0,3,18,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,2,4,0,3,10,2,0,0,0,5,46,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,201,            w |= (in.readUnsignedByte()) << 24;,1,1,0,2,4,0,2,0,1,6,35,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,202,            w |= (in.readUnsignedByte()) << 16;,1,1,0,2,4,0,2,0,1,6,35,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,203,            w |= (in.readUnsignedByte()) << 8;,1,1,0,2,4,0,2,0,1,6,34,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,204,            w |= (in.readUnsignedByte());,1,0,0,2,4,0,2,0,1,5,29,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,205,            return w * 1000L;,1,1,0,0,0,1,0,0,0,3,17,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,209,            return in.readLong();,0,0,0,1,2,1,2,0,0,4,21,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1503,            super(id);,1,0,0,1,2,1,0,0,1,5,10,4,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1504,            iTransitions = transitions;,2,0,0,0,0,0,0,0,1,2,27,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1505,            iWallOffsets = wallOffsets;,2,0,0,0,0,0,0,0,1,2,27,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1506,            iStandardOffsets = standardOffsets;,2,0,0,0,0,0,0,0,1,2,35,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1507,            iNameKeys = nameKeys;,2,0,0,0,0,0,0,0,1,2,21,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1508,            iTailZone = tailZone;,2,0,0,0,0,0,0,0,1,2,21,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1509,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1344,            int poolSize = in.readUnsignedShort();,1,0,0,1,2,1,2,0,0,5,38,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1345,            String[] pool = new String[poolSize];,1,0,1,0,4,1,0,2,0,5,37,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1346,            for (int i=0; i<poolSize; i++) {,4,1,0,1,3,2,0,0,1,6,32,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1347,                pool[i] = in.readUTF();,0,0,1,1,4,0,2,0,1,5,23,7,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1350,            int size = in.readInt();,1,0,0,1,2,1,2,0,0,5,24,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1351,            long[] transitions = new long[size];,1,0,1,0,4,3,0,0,0,4,36,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1352,            int[] wallOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,34,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1353,            int[] standardOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,38,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1354,            String[] nameKeys = new String[size];,1,0,1,0,4,1,0,2,0,5,37,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1356,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1357,                transitions[i] = readMillis(in);,0,0,1,1,4,0,2,0,2,5,32,7,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1358,                wallOffsets[i] = (int)readMillis(in);,0,0,1,1,6,1,2,0,2,6,37,7,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1359,                standardOffsets[i] = (int)readMillis(in);,0,0,1,1,6,1,2,0,2,6,41,7,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1362,                    if (poolSize < 256) {,1,1,0,1,3,1,0,0,0,5,21,9,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1363,                        index = in.readUnsignedByte();,1,0,0,1,2,0,2,0,1,5,30,11,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1367,                    nameKeys[i] = pool[index];,0,0,1,0,4,0,0,0,1,3,26,9,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1370,                },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1373,            DSTZone tailZone = null;,1,0,0,0,0,0,0,1,0,2,24,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1374,            if (in.readBoolean()) {,0,0,0,2,5,1,2,0,0,4,23,6,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1375,"                tailZone = DSTZone.readFrom(in, id);",1,0,0,0,2,0,4,0,1,4,36,7,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1378,            return new PrecalculatedZone,0,0,0,0,0,2,0,1,1,3,28,5,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,87,        super(zone.getID());,0,0,0,2,4,1,2,0,1,5,20,3,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,84,    private final transient Info[] iInfoCache = new Info[cInfoCacheMask + 1];,2,1,0,0,4,4,0,2,3,6,73,2,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,88,        iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,4,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,89,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",1,0,0,1,2,0,2,0,2,5,67,6,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,42,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,45,        if (i == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,48,            cacheSize = 512; // (1 << 9),1,0,0,1,2,0,0,0,1,4,28,6,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,61,        cInfoCacheMask = cacheSize - 1;,2,1,0,0,0,0,0,0,1,3,31,4,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,62,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,68,        if (zone instanceof CachedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,41,5,0.00027,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,71,        return new CachedDateTimeZone(zone);,1,0,0,1,2,2,0,1,1,6,36,4,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1179,            super(id);,1,0,0,1,2,1,0,0,1,5,10,4,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1180,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1181,            iStartRecurrence = startRecurrence;,2,0,0,0,0,0,0,0,1,2,35,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1182,            iEndRecurrence = endRecurrence;,2,0,0,0,0,0,0,0,1,2,31,5,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1183,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1169,"            return new DSTZone(id, (int)readMillis(in), ",1,0,0,1,5,3,2,1,2,7,43,5,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,146,            return loadZoneData(id);,0,0,0,1,2,1,2,0,1,5,24,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,223,        InputStream in = null;,1,0,0,0,0,0,0,1,0,2,22,4,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,225,            in = openResource(id);,1,0,0,1,2,0,2,0,2,5,22,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,226,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",1,0,0,0,2,0,4,1,0,4,55,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,227,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",1,0,0,1,4,1,3,2,1,7,58,7,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,228,            return tz;,1,0,0,0,0,1,0,0,0,2,10,6,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,235,                if (in != null) {,1,1,0,1,3,1,0,0,0,5,17,8,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,236,                    in.close();,0,0,0,1,2,0,2,0,0,3,11,11,0.00027,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,239,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00027,0,0
defect4j,time,org/joda/time/DateTimeZone,1,714,    protected DateTimeZone(String id) {,2,0,0,1,3,1,0,1,1,6,35,2,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,715,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,718,        iID = id;,2,0,0,0,0,0,0,0,1,2,9,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,719,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,94,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",1,0,0,0,2,4,0,2,6,5,81,2,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,116,        setProvider0(null);,0,0,0,1,2,0,1,0,1,4,19,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,117,        setNameProvider0(null);,0,0,0,1,2,0,1,0,1,4,23,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,118,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,443,        if (provider == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,444,            provider = getDefaultProvider();,1,0,0,1,2,0,1,0,2,5,32,6,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,446,        Set<String> ids = provider.getAvailableIDs();,1,0,0,1,2,0,2,2,0,5,45,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,447,        if (ids == null || ids.size() == 0) {,1,3,0,2,5,1,2,0,0,6,37,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,451,"        if (!ids.contains(""UTC"")) {",0,0,0,2,5,1,2,0,2,5,27,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,454,"        if (!UTC.equals(provider.getZone(""UTC""))) {",0,0,0,3,7,1,4,0,2,5,43,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,457,        cProvider = provider;,2,0,0,0,0,0,0,0,1,2,21,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,458,        cAvailableIDs = ids;,2,0,0,0,0,0,0,0,1,2,20,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,459,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,471,        Provider provider = null;,1,0,0,0,0,0,0,1,0,2,25,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,474,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.Provider"");",1,0,0,1,2,0,2,1,1,6,81,6,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,475,            if (providerClass != null) {,1,1,0,1,3,1,0,0,0,5,28,6,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,484,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,486,        if (provider == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,488,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");",1,0,0,1,2,1,0,1,3,6,57,8,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,491,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,494,        if (provider == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,498,        return provider;,1,0,0,0,0,1,0,0,0,2,16,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,539,        if (nameProvider == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,540,            nameProvider = getDefaultNameProvider();,1,0,0,1,2,0,1,0,2,5,40,6,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,542,        cNameProvider = nameProvider;,2,0,0,0,0,0,0,0,1,2,29,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,543,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,554,        NameProvider nameProvider = null;,1,0,0,0,0,0,0,1,0,2,33,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,556,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");",1,0,0,1,2,0,2,1,1,6,85,6,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,557,            if (providerClass != null) {,1,1,0,1,3,1,0,0,0,5,28,6,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,566,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,568,        if (nameProvider == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,569,            nameProvider = new DefaultNameProvider();,1,0,0,1,2,1,0,1,2,6,41,6,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,572,        return nameProvider;,1,0,0,0,0,1,0,0,0,2,20,4,0.00026,0,0
defect4j,time,org/joda/time/DateTimeZone,1,731,        return iID;,1,0,0,0,0,1,0,0,0,2,11,4,0.00026,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,39,    public DefaultNameProvider() {,1,0,0,1,3,1,0,0,1,5,30,2,0.00026,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",1,0,0,1,2,1,1,7,2,7,89,2,0.00026,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,40,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,99,        return new HashMap(7);,0,0,0,1,2,2,0,1,1,5,22,4,0.00026,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,38,        super(id);,1,0,0,1,2,1,0,0,1,5,10,3,0.00026,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,39,        iNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,19,4,0.00026,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,40,        iWallOffset = wallOffset;,2,0,0,0,0,0,0,0,1,2,25,4,0.00026,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,41,        iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,4,0.00026,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,42,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,88,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.00026,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,89,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,82,"        this(resourcePath, null, false);",1,0,0,0,2,1,0,0,1,4,32,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,83,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,106,    {,0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,107,        if (resourcePath == null) {,1,1,0,1,3,1,0,0,0,5,27,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,110,"        if (!resourcePath.endsWith(""/"")) {",0,0,0,2,5,1,2,0,2,5,34,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,111,            resourcePath += '/';,1,0,0,0,0,0,0,0,2,2,20,6,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,114,        iFileDir = null;,1,0,0,0,0,0,0,0,1,2,16,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,115,        iResourcePath = resourcePath;,2,0,0,0,0,0,0,0,1,2,29,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,117,        if (loader == null && !favorSystemLoader) {,2,2,0,1,3,1,0,0,1,6,43,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,118,            loader = getClass().getClassLoader();,1,0,0,1,4,0,2,0,2,5,37,6,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,121,        iLoader = loader;,2,0,0,0,0,0,0,0,1,2,17,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",1,0,0,2,4,0,2,0,4,5,60,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,124,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,135,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,139,        Object obj = iZoneInfoMap.get(id);,1,0,0,1,2,0,3,1,0,5,34,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,140,        if (obj == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,144,        if (id.equals(obj)) {,0,0,0,2,5,1,3,0,0,4,21,5,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,149,        if (obj instanceof SoftReference<?>) {,1,0,0,1,3,2,0,1,0,5,38,5,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,151,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,2,0,0,1,2,0,0,4,0,4,68,6,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,152,            DateTimeZone tz = ref.get();,1,0,0,1,2,0,2,1,0,5,28,6,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,153,            if (tz != null) {,1,1,0,1,3,1,0,0,0,5,17,6,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,154,                return tz;,1,0,0,0,0,1,0,0,0,2,10,8,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,173,        return new TreeSet<String>(iZoneInfoMap.keySet());,0,0,0,2,4,2,2,2,1,6,50,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,195,        if (iFileDir != null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,198,            String path = iResourcePath.concat(name);,1,0,0,1,2,0,3,1,0,5,41,6,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,199,            if (iLoader != null) {,1,1,0,1,3,1,0,0,0,5,22,6,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,200,                in = iLoader.getResourceAsStream(path);,1,0,0,1,2,0,3,0,1,5,39,8,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,204,            if (in == null) {,1,1,0,1,3,1,0,0,0,5,17,6,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,213,        return in;,1,0,0,0,0,1,0,0,0,2,10,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,251,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",1,0,0,1,2,1,0,6,1,6,66,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,252,        DataInputStream din = new DataInputStream(in);,2,0,0,1,2,1,0,2,1,6,46,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,254,"            readZoneInfoMap(din, map);",0,0,0,0,2,0,3,0,1,3,26,6,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,257,                din.close();,0,0,0,1,2,0,2,0,0,3,12,9,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,259,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,261,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",2,0,0,1,4,1,2,2,2,7,66,5,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,262,        return map;,1,0,0,0,0,1,0,0,0,2,11,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,273,        int size = din.readUnsignedShort();,1,0,0,1,2,1,2,0,0,5,35,5,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,274,        String[] pool = new String[size];,1,0,1,0,4,1,0,2,0,5,33,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,275,        for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,276,            pool[i] = din.readUTF().intern();,0,0,1,1,6,0,3,0,1,5,33,6,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,280,        size = din.readUnsignedShort();,1,0,0,1,2,0,2,0,1,5,31,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,281,        for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,4,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,283,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0,0,1,1,10,0,6,0,0,4,72,9,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,286,            },0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,288,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,94,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,95,        iName = name;,2,0,0,0,0,0,0,0,1,2,13,4,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,96,    },0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);",2,0,0,0,2,3,0,2,4,5,87,2,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);",2,0,0,0,2,3,0,2,4,5,102,2,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);",2,0,0,0,2,3,0,2,4,5,102,2,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);",2,0,0,0,2,3,0,2,4,5,90,2,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);",2,0,0,0,2,3,0,2,4,5,93,2,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);",2,0,0,0,2,3,0,2,4,5,90,2,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);",2,0,0,0,2,3,0,2,4,5,87,2,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);",2,0,0,0,2,3,0,2,4,5,99,2,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);",2,0,0,0,2,3,0,2,4,5,90,2,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);",2,0,0,0,2,3,0,2,4,5,96,2,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);",2,0,0,0,2,3,0,2,4,5,96,2,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);",2,0,0,0,2,3,0,2,4,5,93,2,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,259,            super(name);,1,0,0,1,2,1,0,0,1,5,12,4,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,260,            iOrdinal = ordinal;,2,0,0,0,0,0,0,0,1,2,19,5,0.00026,0,0
defect4j,time,org/joda/time/DurationFieldType,1,261,        },0,0,0,0,1,0,0,0,0,1,1,2,0.00026,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,556,            return iMillis;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,75,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,76,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,66,        } catch (RuntimeException ex) {,1,0,0,1,4,1,0,1,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,88,        return cMillisProvider.getMillis();,0,0,0,1,2,1,2,0,0,4,35,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,129,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,130,        if (offsetMillis == 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,131,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,2,0,0,0,0,0,0,0,1,2,41,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,133,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,2,0,0,1,2,1,0,1,2,6,57,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,135,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,148,        if (millisProvider == null) {,1,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,149,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0,0,0,1,2,2,0,1,2,5,74,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,151,        checkPermission();,0,0,0,1,2,0,1,0,1,4,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,152,        cMillisProvider = millisProvider;,2,0,0,0,0,0,0,0,1,2,33,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,153,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,163,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0,0,0,2,4,1,2,1,2,6,70,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,178,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,179,            return DateTimeUtils.currentTimeMillis();,0,0,0,1,2,1,2,0,0,4,41,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,181,        return instant.getMillis();,0,0,0,1,2,1,2,0,0,4,27,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,196,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,197,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,199,        Chronology chrono = instant.getChronology();,1,0,0,1,2,0,2,1,0,5,44,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,200,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,201,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,203,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,219,        Chronology chrono = null;,1,0,0,0,0,0,0,1,0,2,25,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,220,        if (start != null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,221,            chrono = start.getChronology();,1,0,0,1,2,0,2,0,1,5,31,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,222,        } else if (end != null) {,1,1,0,1,4,2,0,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,223,            chrono = end.getChronology();,1,0,0,1,2,0,2,0,1,5,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,225,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,226,            chrono = ISOChronology.getInstance();,1,0,0,1,2,0,2,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,228,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,243,        if (interval == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,244,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,246,        Chronology chrono = interval.getChronology();,1,0,0,1,2,0,2,1,0,5,45,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,247,        if (chrono == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,248,            return ISOChronology.getInstance();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,250,        return chrono;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,266,        if (interval == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,267,            long now = DateTimeUtils.currentTimeMillis();,1,0,0,1,2,1,2,0,0,5,45,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,268,"            interval = new Interval(now, now);",3,0,0,0,2,1,0,1,2,5,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,270,        return interval;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,301,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,302,            return DateTimeZone.getDefault();,0,0,0,1,2,1,2,0,0,4,33,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,304,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,318,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,319,            return PeriodType.standard();,0,0,0,1,2,1,2,0,0,4,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,321,        return type;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,335,        if (duration == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,336,            return 0L;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,338,        return duration.getMillis();,0,0,0,1,2,1,2,0,0,4,28,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,366,        if (partial == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,367,"            throw new IllegalArgumentException(""Partial must not be null"");",0,0,0,1,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,369,        DurationFieldType lastType = null;,1,0,0,0,0,0,0,1,0,2,34,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,370,        for (int i = 0; i < partial.size(); i++) {,3,1,0,2,5,2,2,0,1,7,42,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,371,            DateTimeField loopField = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,46,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,372,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,373,                if (loopField.getRangeDurationField() == null || loopField.getRangeDurationField().getType() != lastType) {,1,3,0,2,9,1,5,0,0,6,107,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,374,                    return false;,0,0,0,0,0,1,0,0,1,2,13,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,377,            lastType = loopField.getDurationField().getType();,1,0,0,1,4,0,3,0,1,5,50,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,379,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,397,"            Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});",1,0,0,0,6,3,1,4,1,6,93,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,398,"            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});",1,0,0,1,8,2,2,2,0,6,70,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,399,        } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,400,            return new DateFormatSymbols(locale);,1,0,0,1,2,2,0,1,1,6,37,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,429,        return cZoneNames;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,441,"        cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));",2,0,0,1,4,1,2,3,2,7,83,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,442,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,468,        double epochDay = epochMillis / 86400000d;,2,1,0,0,0,1,0,0,0,3,42,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,469,        return epochDay + 2440587.5d;,1,1,0,0,0,1,0,0,0,3,29,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,488,        return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);,0,1,0,2,6,2,4,0,1,6,58,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,501,        double epochDay = julianDay - 2440587.5d;,2,1,0,0,0,1,0,0,0,3,41,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,502,        return (long) (epochDay * 86400000d);,1,1,0,1,4,2,0,0,0,5,37,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,571,        OffsetMillisProvider(long offsetMillis) {,2,0,0,1,3,1,0,0,0,4,41,3,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,572,            iMillis = offsetMillis;,2,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,573,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,580,            return System.currentTimeMillis() + iMillis;,1,1,0,1,2,1,2,0,0,6,44,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,716,"            throw new IllegalArgumentException(""Id must not be null"");",0,0,0,1,2,2,0,1,2,5,58,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,146,                        } catch (RuntimeException ex) {,1,0,0,1,4,1,0,1,0,5,31,14,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,150,                            temp = forTimeZone(TimeZone.getDefault());,1,0,0,2,4,0,3,0,2,5,42,14,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,152,                    } catch (IllegalArgumentException ex) {,1,0,0,1,4,1,0,1,0,5,39,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,156,                        temp = UTC;,2,0,0,0,0,0,0,0,1,2,11,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,177,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0,0,0,2,4,1,2,1,2,6,70,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,180,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0,0,0,1,2,2,0,1,2,5,73,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,206,            return getDefault();,0,0,0,1,2,1,1,0,1,5,20,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,209,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,215,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0,1,0,2,7,1,4,0,2,6,47,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,216,            int offset = parseOffset(id);,1,0,0,1,2,1,2,0,1,6,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,217,            if (offset == 0L) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,218,                return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,220,                id = printOffset(offset);,1,0,0,1,2,0,2,0,2,5,25,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,221,"                return fixedOffsetZone(id, offset);",0,0,0,0,2,1,3,0,1,4,35,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,224,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",1,1,0,1,2,2,0,1,3,7,90,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,238,"        return forOffsetHoursMinutes(hoursOffset, 0);",0,0,0,0,2,1,2,0,1,4,45,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,273,        if (hoursOffset == 0 && minutesOffset == 0) {,2,3,0,1,3,1,0,0,0,5,45,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,274,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,276,        if (hoursOffset < -23 || hoursOffset > 23) {,2,3,0,1,3,1,0,0,1,6,44,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,277,"            throw new IllegalArgumentException(""Hours out of range: "" + hoursOffset);",1,1,0,1,2,2,0,1,2,7,73,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,279,        if (minutesOffset < -59 || minutesOffset > 59) {,2,3,0,1,3,1,0,0,1,6,48,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,280,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",1,1,0,1,2,2,0,1,2,7,77,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,282,        if (hoursOffset > 0 && minutesOffset < 0) {,2,3,0,1,3,1,0,0,0,5,43,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,283,"            throw new IllegalArgumentException(""Positive hours must not have negative minutes: "" + minutesOffset);",1,1,0,1,2,2,0,1,2,7,102,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,285,        int offset = 0;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,287,            int hoursInMinutes = hoursOffset * 60;,2,1,0,0,0,1,0,0,0,3,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,288,            if (hoursInMinutes < 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,289,                minutesOffset = hoursInMinutes - Math.abs(minutesOffset);,2,1,0,1,2,0,3,0,1,6,57,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,291,                minutesOffset = hoursInMinutes + minutesOffset;,3,1,0,0,0,0,0,0,1,3,47,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,293,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",3,0,0,0,2,0,3,0,1,4,85,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,296,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,294,        } catch (ArithmeticException ex) {,1,0,0,1,4,1,0,1,0,5,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,295,"            throw new IllegalArgumentException(""Offset is too large"");",0,0,0,1,2,2,0,1,2,5,58,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,297,        return forOffsetMillis(offset);,0,0,0,1,2,1,2,0,1,5,31,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,307,        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {,4,3,0,1,3,1,0,0,1,6,62,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,308,"            throw new IllegalArgumentException(""Millis out of range: "" + millisOffset);",1,1,0,1,2,2,0,1,2,7,75,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,310,        String id = printOffset(millisOffset);,1,0,0,1,2,0,2,1,1,6,38,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,311,"        return fixedOffsetZone(id, millisOffset);",0,0,0,0,2,1,3,0,1,4,41,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,330,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,331,            return getDefault();,0,0,0,1,2,1,1,0,1,5,20,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,333,        final String id = zone.getID();,1,0,0,1,2,1,2,1,1,7,31,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,334,"        if (id.equals(""UTC"")) {",0,0,0,2,5,1,2,0,1,5,23,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,335,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,339,        DateTimeZone dtz = null;,1,0,0,0,0,0,0,1,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,340,        String convId = getConvertedId(id);,1,0,0,1,2,0,2,1,1,6,35,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,341,        if (convId != null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,342,            dtz = cProvider.getZone(convId);,1,0,0,1,2,0,3,0,1,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,344,        if (dtz == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,345,            dtz = cProvider.getZone(id);,1,0,0,1,2,0,3,0,1,5,28,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,347,        if (dtz != null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,348,            return dtz;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,352,        if (convId == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,353,            convId = zone.getID();,1,0,0,1,2,0,2,0,1,5,22,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,354,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0,1,0,2,7,1,4,0,2,6,61,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,355,                convId = convId.substring(3);,1,0,0,1,2,0,2,0,1,5,29,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,356,                int offset = parseOffset(convId);,1,0,0,1,2,1,2,0,1,6,33,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,357,                if (offset == 0L) {,1,1,0,1,3,1,0,0,0,5,19,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,358,                    return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,360,                    convId = printOffset(offset);,1,0,0,1,2,0,2,0,2,5,29,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,361,"                    return fixedOffsetZone(convId, offset);",0,0,0,0,2,1,3,0,1,4,39,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,365,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",1,1,0,1,2,2,0,1,3,7,90,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,377,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,378,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,380,        if (iFixedOffsetCache == null) {,1,1,0,1,3,1,0,0,0,5,32,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,381,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",1,0,0,1,2,1,0,4,2,6,71,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,384,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,1,0,0,1,2,0,3,2,0,5,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,385,        if (ref != null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,386,            zone = ref.get();,1,0,0,1,2,0,2,0,1,5,17,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,387,            if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,388,                return zone;,1,0,0,0,0,1,0,0,0,2,12,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,391,"        zone = new FixedDateTimeZone(id, null, offset, offset);",4,0,0,0,2,1,0,1,2,5,55,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,392,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",1,0,0,1,4,1,3,2,1,7,65,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,393,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,402,        return cAvailableIDs;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,415,        return cProvider;,1,0,0,0,0,1,0,0,0,2,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,429,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,430,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,431,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0,0,0,2,4,1,2,1,2,6,71,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,433,        setProvider0(provider);,0,0,0,1,2,0,2,0,1,4,23,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,434,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,448,            throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,452,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0,0,0,1,2,2,0,1,2,5,71,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,455,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,477,                    provider = (Provider) Class.forName(providerClass).newInstance();,1,0,0,1,6,0,4,1,1,6,65,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,480,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,478,                } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,479,                    throw new RuntimeException(ex);,1,0,0,1,2,2,0,1,1,6,31,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,482,        } catch (SecurityException ex) {,1,0,0,1,4,1,0,1,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,489,            } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,490,                ex.printStackTrace();,0,0,0,1,2,0,2,0,0,3,21,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,495,            provider = new UTCProvider();,1,0,0,1,2,1,0,1,2,6,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,511,        return cNameProvider;,1,0,0,0,0,1,0,0,0,2,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,525,        SecurityManager sm = System.getSecurityManager();,1,0,0,1,2,0,2,1,0,5,49,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,526,        if (sm != null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,527,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0,0,0,2,4,1,2,1,2,6,75,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,529,        setNameProvider0(nameProvider);,0,0,0,1,2,0,2,0,1,4,31,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,530,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,559,                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();,1,0,0,1,6,0,4,1,1,6,73,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,562,                },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,560,                } catch (Exception ex) {,1,0,0,1,4,1,0,1,0,5,24,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,561,                    throw new RuntimeException(ex);,1,0,0,1,2,2,0,1,1,6,31,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,564,        } catch (SecurityException ex) {,1,0,0,1,4,1,0,1,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,583,"        Map<String, String> map = cZoneIdConversion;",2,0,0,0,0,0,0,3,0,2,44,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,584,        if (map == null) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,586,"            map = new HashMap<String, String>();",1,0,0,1,2,1,0,3,2,6,36,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,587,"            map.put(""GMT"", ""UTC"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,588,"            map.put(""WET"", ""WET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,589,"            map.put(""CET"", ""CET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,590,"            map.put(""MET"", ""CET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,591,"            map.put(""ECT"", ""CET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,592,"            map.put(""EET"", ""EET"");",0,0,0,0,2,0,2,0,2,3,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,593,"            map.put(""MIT"", ""Pacific/Apia"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,594,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0,0,0,0,2,0,2,0,2,3,58,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,595,"            map.put(""AST"", ""America/Anchorage"");",0,0,0,0,2,0,2,0,2,3,36,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,596,"            map.put(""PST"", ""America/Los_Angeles"");",0,0,0,0,2,0,2,0,2,3,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,597,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",0,0,0,0,2,0,2,0,2,3,56,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,598,"            map.put(""PNT"", ""America/Phoenix"");",0,0,0,0,2,0,2,0,2,3,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,599,"            map.put(""CST"", ""America/Chicago"");",0,0,0,0,2,0,2,0,2,3,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,600,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0,0,0,0,2,0,2,0,2,3,58,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,601,"            map.put(""IET"", ""America/Indiana/Indianapolis"");",0,0,0,0,2,0,2,0,2,3,47,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,602,"            map.put(""PRT"", ""America/Puerto_Rico"");",0,0,0,0,2,0,2,0,2,3,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,603,"            map.put(""CNT"", ""America/St_Johns"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,604,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");",0,0,0,0,2,0,2,0,2,3,49,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,605,"            map.put(""BET"", ""America/Sao_Paulo"");",0,0,0,0,2,0,2,0,2,3,36,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,606,"            map.put(""ART"", ""Africa/Cairo"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,607,"            map.put(""CAT"", ""Africa/Harare"");",0,0,0,0,2,0,2,0,2,3,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,608,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0,0,0,0,2,0,2,0,2,3,37,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,609,"            map.put(""NET"", ""Asia/Yerevan"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,610,"            map.put(""PLT"", ""Asia/Karachi"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,611,"            map.put(""IST"", ""Asia/Kolkata"");",0,0,0,0,2,0,2,0,2,3,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,612,"            map.put(""BST"", ""Asia/Dhaka"");",0,0,0,0,2,0,2,0,2,3,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,613,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,614,"            map.put(""CTT"", ""Asia/Shanghai"");",0,0,0,0,2,0,2,0,2,3,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,615,"            map.put(""JST"", ""Asia/Tokyo"");",0,0,0,0,2,0,2,0,2,3,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,616,"            map.put(""ACT"", ""Australia/Darwin"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,617,"            map.put(""AET"", ""Australia/Sydney"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,618,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0,0,0,0,2,0,2,0,2,3,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,619,"            map.put(""NST"", ""Pacific/Auckland"");",0,0,0,0,2,0,2,0,2,3,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,620,            cZoneIdConversion = map;,2,0,0,0,0,0,0,0,1,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,622,        return map.get(id);,0,0,0,1,2,1,3,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,628,        Chronology chrono = new BaseChronology() {,1,0,0,1,3,1,0,2,1,6,42,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,643,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,0,0,0,1,8,2,5,0,2,5,72,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,656,        StringBuffer buf = new StringBuffer();,1,0,0,1,2,1,0,2,1,6,38,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,657,        if (offset >= 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,658,            buf.append('+');,0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,660,            buf.append('-');,0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,661,            offset = -offset;,2,0,0,0,0,0,0,0,2,2,17,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,664,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,0,0,1,0,0,0,3,55,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,665,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0,0,0,0,2,0,4,0,0,2,47,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,666,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,4,1,0,1,2,1,0,0,1,6,58,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,668,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,1,0,0,0,3,59,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,669,        buf.append(':');,0,0,0,1,2,0,2,0,1,4,16,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,670,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0,0,0,0,2,0,4,0,0,2,49,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,671,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,4,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,672,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,673,            return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,676,        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,1,0,0,0,3,59,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,677,        buf.append(':');,0,0,0,1,2,0,2,0,1,4,16,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,678,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0,0,0,0,2,0,4,0,0,2,49,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,679,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,4,1,0,0,0,0,0,0,1,3,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,680,        if (offset == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,681,            return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,684,        buf.append('.');,0,0,0,1,2,0,2,0,1,4,16,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,685,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0,0,0,0,2,0,4,0,0,2,48,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,686,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,695,        if (cOffsetFormatter == null) {,1,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,696,            cOffsetFormatter = new DateTimeFormatterBuilder(),1,0,0,1,2,1,0,1,2,6,49,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,700,        return cOffsetFormatter;,1,0,0,0,0,1,0,0,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,754,"        return getShortName(instant, null);",0,0,0,0,2,1,2,0,1,4,35,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,769,        if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,770,            locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,772,        String nameKey = getNameKey(instant);,1,0,0,1,2,0,2,1,1,6,37,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,773,        if (nameKey == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,774,            return iID;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,776,"        String name = cNameProvider.getShortName(locale, iID, nameKey);",1,0,0,0,2,0,5,1,0,4,63,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,777,        if (name != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,778,            return name;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,780,        return printOffset(getOffset(instant));,0,0,0,2,4,1,3,0,2,5,39,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,794,"        return getName(instant, null);",0,0,0,0,2,1,2,0,1,4,30,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,809,        if (locale == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,810,            locale = Locale.getDefault();,1,0,0,1,2,0,2,0,1,5,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,812,        String nameKey = getNameKey(instant);,1,0,0,1,2,0,2,1,1,6,37,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,813,        if (nameKey == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,814,            return iID;,1,0,0,0,0,1,0,0,0,2,11,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,816,"        String name = cNameProvider.getName(locale, iID, nameKey);",1,0,0,0,2,0,5,1,0,4,58,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,817,        if (name != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,818,            return name;,1,0,0,0,0,1,0,0,0,2,12,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,820,        return printOffset(getOffset(instant));,0,0,0,2,4,1,3,0,2,5,39,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,838,        if (instant == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,839,            return getOffset(DateTimeUtils.currentTimeMillis());,0,0,0,2,4,1,3,0,1,5,52,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,841,        return getOffset(instant.getMillis());,0,0,0,2,4,1,3,0,1,5,38,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,869,        return getOffset(instant) == getStandardOffset(instant);,0,1,0,1,4,1,4,0,2,6,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,907,        final int offsetLocal = getOffset(instantLocal);,1,0,0,1,2,2,2,0,2,6,48,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,909,        final long instantAdjusted = instantLocal - offsetLocal;,3,1,0,0,0,2,0,0,1,4,56,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,910,        final int offsetAdjusted = getOffset(instantAdjusted);,1,0,0,1,2,2,2,0,2,6,54,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,912,        if (offsetLocal != offsetAdjusted) {,2,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,915,            if ((offsetLocal - offsetAdjusted) < 0) {,2,2,0,2,5,1,0,0,0,5,41,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,919,                long nextLocal = nextTransition(instantAdjusted);,1,0,0,1,2,1,2,0,1,6,49,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,920,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,3,1,0,1,2,1,1,0,1,7,66,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,921,                if (nextLocal != nextAdjusted) {,2,1,0,1,3,1,0,0,0,5,32,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,922,                    return offsetLocal;,1,0,0,0,0,1,0,0,0,2,19,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,924,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,925,        } else if (offsetLocal >= 0) {,1,1,0,1,4,2,0,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,926,            long prev = previousTransition(instantAdjusted);,1,0,0,1,2,1,2,0,1,6,48,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,927,            if (prev < instantAdjusted) {,2,1,0,1,3,1,0,0,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,928,                int offsetPrev = getOffset(prev);,1,0,0,1,2,1,2,0,1,6,33,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,929,                int diff = offsetPrev - offsetLocal;,3,1,0,0,0,1,0,0,0,3,36,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,930,                if (instantAdjusted - prev <= diff) {,3,2,0,1,3,1,0,0,0,5,37,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,931,                    return offsetPrev;,1,0,0,0,0,1,0,0,0,2,18,11,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,935,        return offsetAdjusted;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,949,        int offset = getOffset(instantUTC);,1,0,0,1,2,1,2,0,1,6,35,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,950,        long instantLocal = instantUTC + offset;,3,1,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,952,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,4,5,0,2,7,1,0,0,0,5,68,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,953,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,73,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,955,        return instantLocal;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,976,        int offsetOriginal = getOffset(originalInstantUTC);,1,0,0,1,2,1,2,0,1,6,51,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,977,        long instantUTC = instantLocal - offsetOriginal;,3,1,0,0,0,1,0,0,0,3,48,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,978,        int offsetLocalFromOriginal = getOffset(instantUTC);,1,0,0,1,2,1,2,0,1,6,52,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,979,        if (offsetLocalFromOriginal == offsetOriginal) {,2,1,0,1,3,1,0,0,0,5,48,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,980,            return instantUTC;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,982,"        return convertLocalToUTC(instantLocal, strict);",0,0,0,0,2,1,3,0,1,4,47,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,999,        int offsetLocal = getOffset(instantLocal);,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1001,        int offset = getOffset(instantLocal - offsetLocal);,3,1,0,1,2,1,1,0,1,7,51,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1003,        if (offsetLocal != offset) {,2,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1007,            if (strict || offsetLocal < 0) {,2,2,0,1,3,1,0,0,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1009,                long nextLocal = nextTransition(instantLocal - offsetLocal);,3,1,0,1,2,1,1,0,1,7,60,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1010,                if (nextLocal == (instantLocal - offsetLocal)) {,3,2,0,2,5,1,0,0,0,5,48,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1011,                    nextLocal = Long.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,27,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1013,                long nextAdjusted = nextTransition(instantLocal - offset);,3,1,0,1,2,1,1,0,1,7,58,9,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1014,                if (nextAdjusted == (instantLocal - offset)) {,3,2,0,2,5,1,0,0,0,5,46,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1015,                    nextAdjusted = Long.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,30,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1017,                if (nextLocal != nextAdjusted) {,2,1,0,1,3,1,0,0,0,5,32,8,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1019,                    if (strict) {,1,0,0,1,3,1,0,0,0,4,13,10,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1021,"                        throw new IllegalInstantException(instantLocal, getID());",1,0,0,1,4,2,1,1,2,7,57,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1026,                        offset = offsetLocal;,2,0,0,0,0,0,0,0,1,2,21,12,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1032,        long instantUTC = instantLocal - offset;,3,1,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1034,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,4,5,0,2,7,1,0,0,0,5,69,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1035,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,78,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1037,        return instantUTC;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1051,        if (newZone == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1052,            newZone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,36,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1054,        if (newZone == this) {,1,1,0,1,3,2,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1055,            return oldInstant;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1057,        long instantLocal = convertUTCToLocal(oldInstant);,1,0,0,1,2,1,2,0,1,6,50,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1058,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",0,0,0,0,2,1,4,0,1,4,66,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1168,        if (isFixed()) {,0,0,0,2,5,1,1,0,1,5,16,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1169,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1172,            localDateTime.toDateTime(this);,0,0,0,1,2,1,2,0,0,4,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1173,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1174,        } catch (IllegalInstantException ex) {,1,0,0,1,4,1,0,1,0,5,38,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1175,            return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1190,        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;,4,2,0,0,0,1,0,0,0,3,69,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1191,        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;,4,2,0,0,0,1,0,0,0,3,68,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1192,        long offsetBefore = getOffset(instantBefore);,1,0,0,1,2,1,2,0,1,6,45,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1193,        long offsetAfter = getOffset(instantAfter);,1,0,0,1,2,1,2,0,1,6,43,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1194,        if (offsetBefore <= offsetAfter) {,2,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1195,"            return instant;  // not an overlap (less than is a gap, equal is normal case)",1,0,0,0,2,2,0,0,0,3,77,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1199,        long diff = offsetBefore - offsetAfter;,3,1,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1200,        long transition = nextTransition(instantBefore);,1,0,0,1,2,1,2,0,1,6,48,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1201,        long overlapStart = transition - diff;,3,1,0,0,0,1,0,0,0,3,38,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1202,        long overlapEnd = transition + diff;,3,1,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1203,        if (instant < overlapStart || instant >= overlapEnd) {,4,3,0,1,3,1,0,0,0,5,54,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1204,          return instant;  // not an overlap,1,0,0,0,0,1,0,0,0,2,34,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1208,        long afterStart = instant - overlapStart;,3,1,0,0,0,1,0,0,0,3,41,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1209,        if (afterStart >= diff) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1211,          return earlierOrLater ? instant : instant - diff;,4,1,0,0,0,1,0,0,0,3,49,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1214,          return earlierOrLater ? instant + diff : instant;,4,1,0,0,0,1,0,0,0,3,49,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1256,        return java.util.TimeZone.getTimeZone(iID);,3,0,0,1,2,1,2,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1281,        return getID();,0,0,0,1,2,1,1,0,1,5,15,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1291,        return new Stub(iID);,1,0,0,1,2,2,0,1,1,6,21,4,0.0,0,0
defect4j,time,org/joda/time/JodaTimePermission,1,57,        super(name);,1,0,0,1,2,1,0,0,1,5,12,3,0.0,0,0
defect4j,time,org/joda/time/JodaTimePermission,1,58,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,628,        Chronology chrono = new BaseChronology() {,1,0,0,1,3,1,0,2,1,6,42,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,631,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,634,                return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,637,                return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,640,                return getClass().getName();,0,0,0,1,4,1,2,0,1,5,28,11,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,102,"        long instant = year().set(0, year);",1,0,0,1,4,1,3,0,1,6,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,103,"        instant = monthOfYear().set(instant, monthOfYear);",1,0,0,1,4,0,4,0,2,5,50,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",1,0,0,1,4,0,4,0,2,5,48,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,105,"        return millisOfDay().set(instant, millisOfDay);",0,0,0,1,4,1,4,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,132,"        long instant = year().set(0, year);",1,0,0,1,4,1,3,0,1,6,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,133,"        instant = monthOfYear().set(instant, monthOfYear);",1,0,0,1,4,0,4,0,2,5,50,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",1,0,0,1,4,0,4,0,2,5,48,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,135,"        instant = hourOfDay().set(instant, hourOfDay);",1,0,0,1,4,0,4,0,2,5,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",1,0,0,1,4,0,4,0,2,5,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",1,0,0,1,4,0,4,0,2,5,56,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,138,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,1,4,1,4,0,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,163,"        instant = hourOfDay().set(instant, hourOfDay);",1,0,0,1,4,0,4,0,2,5,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",1,0,0,1,4,0,4,0,2,5,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",1,0,0,1,4,0,4,0,2,5,56,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,166,"        return millisOfSecond().set(instant, millisOfSecond);",0,0,0,1,4,1,4,0,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,188,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,193,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,203,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,208,                throw new IllegalFieldValueException,0,0,0,0,0,2,0,1,1,3,36,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,223,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,224,        int[] values = new int[size];,1,0,1,0,4,3,0,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,225,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0,0,1,1,8,1,6,0,1,6,64,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,228,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,57,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",1,0,0,1,8,1,9,0,1,6,83,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,242,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,255,        int size = period.size();,1,0,0,1,2,1,2,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,256,        int[] values = new int[size];,1,0,1,0,4,3,0,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,257,        if (startInstant != endInstant) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,258,            for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,259,                DurationField field = period.getFieldType(i).getField(this);,1,0,0,1,4,1,4,1,0,6,60,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,260,"                int value = field.getDifference(endInstant, startInstant);",1,0,0,0,2,1,4,0,0,4,58,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,261,"                startInstant = field.add(startInstant, value);",1,0,0,0,2,0,4,0,1,4,46,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,262,                values[i] = value;,1,0,1,0,2,0,0,0,1,4,18,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,265,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,276,        int size = period.size();,1,0,0,1,2,1,2,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,277,        int[] values = new int[size];,1,0,1,0,4,3,0,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,278,        if (duration != 0) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,279,            long current = 0;,1,0,0,0,0,1,0,0,0,2,17,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,280,            for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,281,                DurationField field = period.getFieldType(i).getField(this);,1,0,0,1,4,1,4,1,0,6,60,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,282,                if (field.isPrecise()) {,0,0,0,2,5,1,2,0,0,4,24,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,283,"                    int value = field.getDifference(duration, current);",1,0,0,0,2,1,4,0,0,4,51,11,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,284,"                    current = field.add(current, value);",1,0,0,0,2,0,4,0,1,4,36,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,285,                    values[i] = value;,1,0,1,0,2,0,0,0,1,4,18,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,289,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,301,        if (scalar != 0 && period != null) {,2,3,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,56,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),1,0,0,1,4,3,3,0,0,5,82,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,304,                if (value != 0) {,1,1,0,1,3,1,0,0,0,5,17,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",3,1,0,1,6,1,6,0,1,7,77,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,309,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,322,        if (duration == 0 || scalar == 0) {,2,3,0,1,3,1,0,0,0,5,35,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,323,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",1,0,0,0,2,1,4,0,0,4,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,326,"        return FieldUtils.safeAdd(instant, add);",0,0,0,0,2,1,4,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0,0,0,2,4,1,4,0,0,4,72,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0,0,0,1,6,1,5,0,1,5,90,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0,0,0,1,6,1,5,0,1,5,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0,0,0,2,4,1,4,0,0,4,73,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0,0,0,1,6,1,5,0,1,5,91,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0,0,0,2,4,1,4,0,0,4,73,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0,0,0,1,6,1,5,0,1,5,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0,0,0,2,4,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0,0,0,1,6,1,5,0,1,5,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0,0,0,1,6,1,5,0,1,5,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0,0,0,2,4,1,4,0,0,4,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0,0,0,1,6,1,5,0,1,5,93,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0,0,0,1,6,1,5,0,1,5,90,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0,0,0,2,4,1,4,0,0,4,70,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0,0,0,1,6,1,5,0,1,5,83,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0,0,0,1,6,1,5,0,1,5,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0,0,0,1,6,1,5,0,1,5,83,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0,0,0,2,4,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0,0,0,1,6,1,5,0,1,5,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0,0,0,2,4,1,4,0,0,4,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0,0,0,1,6,1,5,0,1,5,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0,0,0,1,6,1,5,0,1,5,96,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0,0,0,2,4,1,4,0,0,4,72,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0,0,0,1,6,1,5,0,1,5,87,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0,0,0,2,4,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0,0,0,1,6,1,5,0,1,5,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0,0,0,1,6,1,5,0,1,5,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0,0,0,1,6,1,5,0,1,5,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0,0,0,2,4,1,4,0,0,4,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0,0,0,1,6,1,5,0,1,5,91,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BaseChronology,1,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0,0,0,1,6,1,5,0,1,5,77,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",3,0,0,0,3,1,0,2,1,5,87,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,83,        if (type == null || durationField == null) {,2,3,0,1,3,1,0,0,0,5,44,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,84,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,86,        iType = type;,2,0,0,0,0,0,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,87,        iDurationField = durationField;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,88,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,55,        if (cCache == null) {,1,1,0,1,3,1,0,0,0,5,21,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",1,0,0,1,2,1,0,3,2,6,69,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,57,            field = null;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,59,            field = cCache.get(type);,1,0,0,1,2,0,3,0,1,5,25,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,60,            if (field != null && field.getDurationField() != durationField) {,2,3,0,2,5,1,2,0,0,6,65,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,61,                field = null;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,64,        if (field == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,65,"            field = new UnsupportedDateTimeField(type, durationField);",3,0,0,0,2,1,0,1,2,5,58,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,66,"            cCache.put(type, field);",0,0,0,0,2,0,4,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,68,        return field;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,95,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,99,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,108,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,117,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,126,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,135,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,144,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,153,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,162,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,171,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,180,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,189,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,198,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,207,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,216,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,225,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,234,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,243,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,252,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,261,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,270,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,75,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,81,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,297,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,306,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,315,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,324,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,333,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,343,        return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,352,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,361,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,370,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,379,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,388,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,397,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,406,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,415,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,424,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,433,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,442,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,451,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,460,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,469,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,478,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,487,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,496,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,505,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,514,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,523,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,533,"        return ""UnsupportedDateTimeField"";",0,0,0,0,0,1,0,0,1,2,34,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,540,"        return getInstance(iType, iDurationField);",0,0,0,0,2,1,3,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDateTimeField,1,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",1,1,0,1,2,2,0,1,2,7,74,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,1,209,        if (value == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,1,210,"            return subtract(instant, (long) value);",1,0,0,1,4,2,2,0,1,6,39,6,0.0,0,0
defect4j,time,org/joda/time/DurationField,1,212,"        return add(instant, -value);",1,0,0,0,2,1,2,0,2,5,28,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,1,224,        if (value == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/DurationField,1,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/DurationField,1,227,"        return add(instant, -value);",1,0,0,0,2,1,2,0,2,5,28,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,79,        return iType;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,83,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,101,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,110,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,119,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,128,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,137,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,146,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,155,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,164,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,173,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,182,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,191,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,200,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,209,        throw unsupported();,0,0,0,1,2,1,1,0,1,5,20,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,230,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,241,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,242,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,243,        } else if (obj instanceof UnsupportedDurationField) {,1,0,0,1,4,3,0,1,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,244,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,2,0,0,1,2,0,0,2,0,4,64,7,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,245,            if (other.getName() == null) {,0,1,0,2,5,1,2,0,0,5,30,7,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,246,                return (getName() == null);,0,1,0,2,4,1,1,0,1,6,27,10,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,248,            return (other.getName().equals(getName()));,0,0,0,3,8,1,4,0,1,5,43,9,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,250,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,259,        return getName().hashCode();,0,0,0,1,4,1,2,0,1,5,28,5,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,268,"        return ""UnsupportedDurationField["" + getName() + ']';",0,1,0,1,4,1,1,0,3,6,53,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,275,        return getInstance(iType);,0,0,0,1,2,1,2,0,1,5,26,4,0.0,0,0
defect4j,time,org/joda/time/field/UnsupportedDurationField,1,279,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",1,1,0,1,2,2,0,1,2,7,74,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,1,6,1,6,0,2,5,79,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,109,        iDateTimeFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,110,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,111,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,112,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,113,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,114,        iLowerBound = lowerBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,115,        iUpperBound = upperBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,116,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,117,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0,0,0,1,6,1,5,0,2,5,70,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,130,        iDateTimeFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,131,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,132,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,133,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,134,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,135,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,136,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,137,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,138,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0,0,0,1,6,1,6,0,2,5,79,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,151,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,152,        iDurationFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,153,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,154,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,155,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,156,        iLowerBound = lowerBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,157,        iUpperBound = upperBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,158,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,159,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0,0,0,0,4,1,5,0,2,4,69,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,172,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,173,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,174,        iFieldName = fieldName;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,175,        iNumberValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,176,        iStringValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,177,        iLowerBound = lowerBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,178,        iUpperBound = upperBound;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,179,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,180,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,189,"        super(createMessage(fieldType.getName(), value));",0,0,0,1,6,1,4,0,2,5,49,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,190,        iDateTimeFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,191,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,192,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,193,        iStringValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,194,        iNumberValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,195,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,196,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,197,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,198,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,207,"        super(createMessage(fieldType.getName(), value));",0,0,0,1,6,1,4,0,2,5,49,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,208,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,209,        iDurationFieldType = fieldType;,2,0,0,0,0,0,0,0,1,2,31,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,210,        iFieldName = fieldType.getName();,1,0,0,1,2,0,2,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,211,        iStringValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,212,        iNumberValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,213,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,214,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,215,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,216,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,225,"        super(createMessage(fieldName, value));",0,0,0,0,4,1,3,0,2,4,39,3,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,226,        iDateTimeFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,227,        iDurationFieldType = null;,1,0,0,0,0,0,0,0,1,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,228,        iFieldName = fieldName;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,229,        iStringValue = value;,2,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,230,        iNumberValue = null;,1,0,0,0,0,0,0,0,1,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,231,        iLowerBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,232,        iUpperBound = null;,1,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,233,        iMessage = super.getMessage();,2,0,0,1,2,1,0,0,1,5,30,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,234,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,41,        StringBuilder buf = new StringBuilder(),1,0,0,1,2,1,0,2,1,6,39,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,44,        if (lowerBound == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,45,            if (upperBound == null) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,46,"                buf.append(""is not supported"");",0,0,0,1,2,0,2,0,1,4,31,9,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,48,"                buf.append(""must not be larger than "").append(upperBound);",0,0,0,1,4,0,4,0,1,4,58,9,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,50,        } else if (upperBound == null) {,1,1,0,1,4,2,0,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0,0,0,1,4,0,4,0,1,4,59,8,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,53,"            buf.append(""must be in the range ["")",0,0,0,1,3,0,2,0,1,4,36,12,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,59,        if (explain != null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,60,"            buf.append("": "").append(explain);",0,0,0,1,4,0,4,0,1,4,33,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,63,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",1,0,0,1,4,1,1,2,2,7,55,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,76,        if (value == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,77,"            buf.append(""null"");",0,0,0,1,2,0,2,0,1,4,19,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,79,"            buf.append('""');",0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,80,            buf.append(value);,0,0,0,1,2,0,3,0,0,3,18,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,81,"            buf.append('""');",0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0,0,0,1,8,1,6,0,3,5,77,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,86,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,243,        return iDateTimeFieldType;,1,0,0,0,0,1,0,0,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,252,        return iDurationFieldType;,1,0,0,0,0,1,0,0,0,2,26,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,261,        return iFieldName;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,270,        return iNumberValue;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,279,        return iStringValue;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,288,        String value = iStringValue;,2,0,0,0,0,0,0,1,0,2,28,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,289,        if (value == null) {,1,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,290,            value = String.valueOf(iNumberValue);,1,0,0,1,2,0,3,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,292,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,301,        return iLowerBound;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,310,        return iUpperBound;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,314,        return iMessage;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,323,        if (iMessage == null) {,1,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,324,            iMessage = message;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,325,        } else if (message != null) {,1,1,0,1,4,2,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,326,"            iMessage = message + "": "" + iMessage;",3,1,0,0,0,0,0,0,2,3,37,7,0.0,0,0
defect4j,time,org/joda/time/IllegalFieldValueException,1,328,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,180,"        Info(DateTimeZone zone, long periodStart) {",3,0,0,0,3,1,0,1,0,4,43,3,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,177,        private int iOffset = Integer.MIN_VALUE;,3,0,0,0,0,2,0,0,1,3,40,3,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,178,        private int iStandardOffset = Integer.MIN_VALUE;,3,0,0,0,0,2,0,0,1,3,48,3,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,181,            iPeriodStart = periodStart;,2,0,0,0,0,0,0,0,1,2,27,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,182,            iZoneRef = zone;,2,0,0,0,0,0,0,0,1,2,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,183,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,186,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,4,3,0,1,3,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,187,                if (iNameKey == null) {,1,1,0,1,3,1,0,0,0,5,23,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,188,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,1,0,0,1,2,0,3,0,1,5,45,9,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,190,                return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,192,            return iNextInfo.getNameKey(millis);,0,0,0,1,2,1,3,0,0,4,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,196,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,4,3,0,1,3,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,197,                if (iOffset == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,198,                    iOffset = iZoneRef.getOffset(iPeriodStart);,1,0,0,1,2,0,3,0,1,5,43,9,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,200,                return iOffset;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,202,            return iNextInfo.getOffset(millis);,0,0,0,1,2,1,3,0,0,4,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,206,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,4,3,0,1,3,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,207,                if (iStandardOffset == Integer.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,208,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,1,0,0,1,2,0,3,0,1,5,59,9,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,210,                return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,212,            return iNextInfo.getStandardOffset(millis);,0,0,0,1,2,1,3,0,0,4,43,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",1,0,0,0,4,0,4,1,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,44,        return nameSet == null ? null : nameSet[0];,1,1,1,0,2,1,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",1,0,0,0,4,0,4,1,1,5,51,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,49,        return nameSet == null ? null : nameSet[1];,1,1,1,0,2,1,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,53,        if (locale == null || id == null || nameKey == null) {,3,5,0,1,3,1,0,0,0,5,54,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,54,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",1,0,0,1,2,0,3,5,0,5,72,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,58,        if (byIdCache == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",1,0,0,1,4,0,4,0,2,5,54,7,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",1,0,0,1,2,0,3,3,0,5,55,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,63,        if (byNameKeyCache == null) {,1,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,64,"            byIdCache.put(id, byNameKeyCache = createCache());",1,0,0,1,4,0,4,0,2,5,50,7,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,66,            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();,3,0,0,1,8,0,3,1,0,5,95,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,67,            String[] setEn = null;,1,0,0,0,2,0,0,1,0,3,22,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,68,            for (String[] strings : zoneStringsEn) {,2,0,0,1,5,1,0,1,0,5,40,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,69,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,3,4,1,2,7,1,2,0,0,7,70,8,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,70,                setEn = strings;,2,0,0,0,0,0,0,0,1,2,16,10,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,71,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,74,            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,1,0,0,1,8,0,4,1,0,5,88,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,75,            String[] setLoc = null;,1,0,0,0,2,0,0,1,0,3,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,76,            for (String[] strings : zoneStringsLoc) {,2,0,0,1,5,1,0,1,0,5,41,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,77,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,3,4,1,2,7,1,2,0,0,7,70,8,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,78,                setLoc = strings;,2,0,0,0,0,0,0,0,1,2,17,10,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,79,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,83,            if (setEn != null && setLoc != null) {,2,3,0,1,3,1,0,0,0,5,38,6,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});",0,0,1,0,12,1,2,1,0,5,66,9,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,88,              if (setEn[2].equals(setEn[4])) {,0,0,1,2,9,1,1,0,0,5,32,9,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});",0,1,1,0,12,1,2,1,1,7,78,11,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});",0,0,1,0,12,1,2,1,0,5,66,11,0.0,0,0
defect4j,time,org/joda/time/tz/DefaultNameProvider,1,95,        return (String[]) byNameKeyCache.get(nameKey);,0,0,0,1,6,1,3,1,0,5,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,754,            return iOfYear;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0,0,0,0,2,1,5,0,0,3,57,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0,0,0,0,2,1,5,0,0,3,61,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,772,            return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,776,            return iSaveMillis;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,780,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,781,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,783,            if (obj instanceof Recurrence) {,1,0,0,1,3,2,0,1,0,5,32,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,784,                Recurrence other = (Recurrence)obj;,2,0,0,1,2,0,0,2,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,785,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,790,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,794,            iOfYear.writeTo(out);,0,0,0,1,2,0,3,0,0,3,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,795,            out.writeUTF(iNameKey);,0,0,0,1,2,0,3,0,0,3,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,796,"            writeMillis(out, iSaveMillis);",0,0,0,0,2,0,3,0,1,3,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,797,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",3,0,0,0,2,2,0,1,1,5,53,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,804,            return rename((iNameKey + appendNameKey).intern());,2,1,0,2,6,1,2,0,1,7,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",1,1,0,1,2,2,0,1,2,7,60,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,522,            if (iMode == 'w') {,1,1,0,1,3,1,0,0,1,6,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,523,                offset = standardOffset + saveMillis;,3,1,0,0,0,0,0,0,1,3,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,524,            } else if (iMode == 's') {,1,1,0,1,4,2,0,0,1,6,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,525,                offset = standardOffset;,2,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,527,                offset = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,530,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,531,"            long millis = chrono.year().set(0, year);",1,0,0,1,4,1,4,0,0,5,41,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",1,0,0,1,4,0,5,0,1,5,56,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",1,0,0,1,4,0,5,0,1,5,56,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,534,"            millis = setDayOfMonth(chrono, millis);",1,0,0,0,2,0,3,0,2,4,39,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,536,            if (iDayOfWeek != 0) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,537,"                millis = setDayOfWeek(chrono, millis);",1,0,0,0,2,0,3,0,2,4,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,541,            return millis - offset;,2,1,0,0,0,1,0,0,0,3,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,549,            if (iMode == 'w') {,1,1,0,1,3,1,0,0,1,6,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,550,                offset = standardOffset + saveMillis;,3,1,0,0,0,0,0,0,1,3,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,551,            } else if (iMode == 's') {,1,1,0,1,4,2,0,0,1,6,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,552,                offset = standardOffset;,2,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,554,                offset = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,558,            instant += offset;,2,0,0,0,0,0,0,0,1,2,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,560,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",1,0,0,1,4,1,5,0,0,5,60,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,563,"            next = chrono.millisOfDay().set(next, 0);",1,0,0,1,4,0,4,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",1,0,0,1,4,0,5,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,565,"            next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,567,            if (iDayOfWeek == 0) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,568,                if (next <= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,569,"                    next = chrono.year().add(next, 1);",1,0,0,1,4,0,4,0,1,5,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,570,"                    next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,573,"                next = setDayOfWeek(chrono, next);",1,0,0,0,2,0,3,0,2,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,574,                if (next <= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,575,"                    next = chrono.year().add(next, 1);",1,0,0,1,4,0,4,0,1,5,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",1,0,0,1,4,0,5,0,1,5,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,577,"                    next = setDayOfMonthNext(chrono, next);",1,0,0,0,2,0,3,0,2,4,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,578,"                    next = setDayOfWeek(chrono, next);",1,0,0,0,2,0,3,0,2,4,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,583,            return next - offset;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,591,            if (iMode == 'w') {,1,1,0,1,3,1,0,0,1,6,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,592,                offset = standardOffset + saveMillis;,3,1,0,0,0,0,0,0,1,3,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,593,            } else if (iMode == 's') {,1,1,0,1,4,2,0,0,1,6,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,594,                offset = standardOffset;,2,0,0,0,0,0,0,0,1,2,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,596,                offset = 0;,1,0,0,0,0,0,0,0,1,2,11,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,600,            instant += offset;,2,0,0,0,0,0,0,0,1,2,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,602,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",1,0,0,1,4,1,5,0,0,5,60,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,605,"            prev = chrono.millisOfDay().set(prev, 0);",1,0,0,1,4,0,4,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",1,0,0,1,4,0,5,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,607,"            prev = setDayOfMonthPrevious(chrono, prev);",1,0,0,0,2,0,3,0,2,4,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,609,            if (iDayOfWeek == 0) {,1,1,0,1,3,1,0,0,0,5,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,610,                if (prev >= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,611,"                    prev = chrono.year().add(prev, -1);",1,0,0,1,4,0,4,0,2,5,35,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",1,0,0,0,2,0,3,0,2,4,43,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,615,"                prev = setDayOfWeek(chrono, prev);",1,0,0,0,2,0,3,0,2,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,616,                if (prev >= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,617,"                    prev = chrono.year().add(prev, -1);",1,0,0,1,4,0,4,0,2,5,35,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",1,0,0,1,4,0,5,0,1,5,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",1,0,0,0,2,0,3,0,2,4,43,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,620,"                    prev = setDayOfWeek(chrono, prev);",1,0,0,0,2,0,3,0,2,4,34,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,625,            return prev - offset;,2,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,629,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,630,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,632,            if (obj instanceof OfYear) {,1,0,0,1,3,2,0,1,0,5,28,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,633,                OfYear other = (OfYear)obj;,2,0,0,1,2,0,0,2,0,4,27,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,634,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,642,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,659,            out.writeByte(iMode);,0,0,0,1,2,0,3,0,0,3,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,660,            out.writeByte(iMonthOfYear);,0,0,0,1,2,0,3,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,661,            out.writeByte(iDayOfMonth);,0,0,0,1,2,0,3,0,0,3,27,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,662,            out.writeByte(iDayOfWeek);,0,0,0,1,2,0,3,0,0,3,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,663,            out.writeBoolean(iAdvance);,0,0,0,1,2,0,3,0,0,3,27,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,664,"            writeMillis(out, iMillisOfDay);",0,0,0,0,2,0,3,0,1,3,31,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,665,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,672,"                next = setDayOfMonth(chrono, next);",1,0,0,0,2,0,3,0,2,4,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,682,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,673,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,2,3,0,1,3,1,0,0,0,5,45,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,675,                    while (chrono.year().isLeap(next) == false) {,0,1,0,2,7,1,4,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,676,"                        next = chrono.year().add(next, 1);",1,0,0,1,4,0,4,0,1,5,34,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,678,"                    next = setDayOfMonth(chrono, next);",1,0,0,0,2,0,3,0,2,4,35,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,680,                    throw e;,1,0,0,0,0,1,0,0,0,2,8,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,683,            return next;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,691,"                prev = setDayOfMonth(chrono, prev);",1,0,0,0,2,0,3,0,2,4,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,701,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,692,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,2,3,0,1,3,1,0,0,0,5,45,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,694,                    while (chrono.year().isLeap(prev) == false) {,0,1,0,2,7,1,4,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,695,"                        prev = chrono.year().add(prev, -1);",1,0,0,1,4,0,4,0,2,5,35,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,697,"                    prev = setDayOfMonth(chrono, prev);",1,0,0,0,2,0,3,0,2,4,35,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,699,                    throw e;,1,0,0,0,0,1,0,0,0,2,8,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,702,            return prev;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,706,            if (iDayOfMonth >= 0) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",1,0,0,1,4,0,5,0,1,5,56,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,709,"                instant = chrono.dayOfMonth().set(instant, 1);",1,0,0,1,4,0,4,0,1,5,46,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,710,"                instant = chrono.monthOfYear().add(instant, 1);",1,0,0,1,4,0,4,0,1,5,47,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",1,0,0,1,4,0,5,0,1,5,56,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,713,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,1,0,0,1,4,1,4,0,0,5,48,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,3,1,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,719,            if (daysToAdd != 0) {,1,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,720,                if (iAdvance) {,1,0,0,1,3,1,0,0,0,4,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,721,                    if (daysToAdd < 0) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,722,                        daysToAdd += 7;,1,0,0,0,0,0,0,0,1,2,15,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,725,                    if (daysToAdd > 0) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,726,                        daysToAdd -= 7;,1,0,0,0,0,0,0,0,1,2,15,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",1,0,0,1,4,0,5,0,1,5,53,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,731,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,885,"        Transition(long millis, Transition tr) {",3,0,0,0,3,1,0,1,0,4,40,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,886,            iMillis = millis;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,887,            iNameKey = tr.iNameKey;,3,0,0,0,0,0,0,0,1,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,888,            iWallOffset = tr.iWallOffset;,3,0,0,0,0,0,0,0,1,2,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,889,            iStandardOffset = tr.iStandardOffset;,3,0,0,0,0,0,0,0,1,2,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,890,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,892,"        Transition(long millis, Rule rule, int standardOffset) {",4,0,0,0,3,2,0,1,0,4,56,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,893,            iMillis = millis;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,894,            iNameKey = rule.getNameKey();,1,0,0,1,2,0,2,0,1,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,895,            iWallOffset = standardOffset + rule.getSaveMillis();,2,1,0,1,2,0,2,0,1,6,52,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,896,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,897,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,900,"                   int wallOffset, int standardOffset) {",2,0,0,0,2,2,0,0,0,3,37,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,901,            iMillis = millis;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,902,            iNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,903,            iWallOffset = wallOffset;,2,0,0,0,0,0,0,0,1,2,25,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,904,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,905,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,908,            return iMillis;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,912,            return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,916,            return iWallOffset;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,920,            return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,924,            return iWallOffset - iStandardOffset;,2,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,931,            if (other == null) {,1,1,0,1,3,1,0,0,0,5,20,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,932,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,934,            return iMillis > other.iMillis &&,3,2,0,0,0,1,0,0,0,3,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,97,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,143,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,144,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,146,        if (zone == getZone()) {,1,1,0,2,5,1,1,0,1,7,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,147,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,149,        return getInstance(zone);,0,0,0,1,2,1,2,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,160,"        String str = ""ISOChronology"";",1,0,0,0,0,0,0,1,1,3,29,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,161,        DateTimeZone zone = getZone();,1,0,0,1,2,0,1,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,162,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,163,            str = str + '[' + zone.getID() + ']';,2,1,0,1,4,0,2,0,3,6,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,165,        return str;,1,0,0,0,0,1,0,0,0,2,11,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,191,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,192,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,194,        if (obj instanceof ISOChronology) {,1,0,0,1,3,2,0,1,0,5,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,195,            ISOChronology chrono = (ISOChronology) obj;,2,0,0,1,2,0,0,2,0,4,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,196,            return getZone().equals(chrono.getZone());,0,0,0,2,6,1,4,0,1,5,42,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,198,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,208,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0,2,0,1,6,1,3,0,2,6,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,217,        return new Stub(getZone());,0,0,0,2,4,2,1,1,2,6,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,110,        return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,3,4,0,2,7,1,0,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0,0,0,0,2,1,6,0,0,3,74,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",5,0,0,0,2,2,0,0,0,3,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,3,4,0,2,7,1,0,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,5,0,0,3,60,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",4,0,0,0,1,2,0,0,0,3,61,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,3,4,0,2,7,1,0,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,148,            return base.getDateTimeMillis,0,0,0,0,0,1,2,0,0,2,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,151,        return super.getDateTimeMillis,1,0,0,0,0,2,0,0,0,2,30,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,389,        in.defaultReadObject();,0,0,0,1,2,0,2,0,0,3,23,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,390,        setFields();,0,0,0,1,2,0,1,0,1,4,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,391,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,225,    public DateTimeZoneBuilder() {,1,0,0,1,3,1,0,0,1,5,30,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,226,        iRuleSets = new ArrayList<RuleSet>(10);,1,0,0,1,2,1,0,2,2,6,39,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,227,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,96,"            return readFrom((DataInput)in, id);",1,0,0,1,4,1,2,1,1,7,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,112,            DateTimeZone fixed = new FixedDateTimeZone,1,0,0,0,0,1,0,2,1,4,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,114,            if (fixed.equals(DateTimeZone.UTC)) {,2,0,0,2,5,1,2,0,0,5,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,115,                fixed = DateTimeZone.UTC;,3,0,0,0,0,0,0,0,1,2,25,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,117,            return fixed;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,121,"            return PrecalculatedZone.readFrom(in, id);",0,0,0,0,2,1,4,0,0,3,42,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,123,"            throw new IOException(""Invalid encoding"");",0,0,0,1,2,2,0,1,2,5,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,140,        if (millis % (30 * 60000L) == 0) {,1,3,0,2,5,1,0,0,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,142,            long units = millis / (30 * 60000L);,2,2,0,1,2,1,0,0,0,5,36,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,2,5,0,4,11,1,0,0,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,145,                out.writeByte((int)(units & 0x3f));,1,1,0,2,6,1,2,0,0,6,35,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,146,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,150,        if (millis % 60000L == 0) {,1,2,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,152,            long minutes = millis / 60000L;,2,1,0,0,0,1,0,0,0,3,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,2,5,0,4,11,1,0,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,1,2,0,2,6,1,2,0,0,6,55,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,156,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,160,        if (millis % 1000L == 0) {,1,2,0,1,3,1,0,0,0,5,26,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,162,            long seconds = millis / 1000L;,2,1,0,0,0,1,0,0,0,3,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,2,5,0,4,11,1,0,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,1,3,0,3,8,1,2,0,0,6,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,166,                out.writeInt((int)(seconds & 0xffffffff));,1,1,0,2,6,1,2,0,0,6,42,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,167,                return;,0,0,0,0,0,1,0,0,1,2,7,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,1,1,0,1,2,0,2,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,176,        out.writeLong(millis);,0,0,0,1,2,0,3,0,0,3,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,177,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0,2,0,1,5,1,5,0,1,6,45,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,217,            return DateTimeZone.UTC;,2,0,0,0,0,1,0,0,0,2,24,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",4,0,0,0,2,2,0,1,1,5,70,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,252,        if (iRuleSets.size() > 0) {,0,1,0,2,5,1,2,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,253,            OfYear ofYear = new OfYear,1,0,0,0,0,1,0,2,1,4,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,1,1,0,2,4,0,4,1,0,6,58,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0,0,0,0,2,0,4,0,0,2,40,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,258,        iRuleSets.add(new RuleSet());,0,0,0,2,4,1,2,1,1,6,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,259,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,268,        getLastRuleSet().setStandardOffset(standardOffset);,0,0,0,1,4,0,3,0,1,4,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,269,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0,0,0,1,4,0,4,0,1,4,54,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,277,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,309,        if (fromYear <= toYear) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,310,            OfYear ofYear = new OfYear,1,0,0,0,0,1,0,2,1,4,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",4,0,0,0,2,1,0,2,1,5,68,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",4,0,0,0,2,1,0,2,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,314,            getLastRuleSet().addRule(rule);,0,0,0,1,4,0,3,0,1,4,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,316,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,320,        if (iRuleSets.size() == 0) {,0,1,0,2,5,1,2,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",2,0,0,0,2,0,1,0,3,4,54,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,323,        return iRuleSets.get(iRuleSets.size() - 1);,0,1,0,2,4,1,4,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,333,        if (id == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,334,            throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,1,0,0,1,2,1,0,4,1,6,64,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,343,        DSTZone tailZone = null;,1,0,0,0,0,0,0,1,0,2,24,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,345,        long millis = Long.MIN_VALUE;,3,0,0,0,0,1,0,0,0,2,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,346,        int saveMillis = 0;,1,0,0,0,0,1,0,0,0,2,19,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,348,        int ruleSetCount = iRuleSets.size();,1,0,0,1,2,1,2,0,0,5,36,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,349,        for (int i=0; i<ruleSetCount; i++) {,4,1,0,1,3,2,0,0,1,6,36,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,350,            RuleSet rs = iRuleSets.get(i);,1,0,0,1,2,0,3,1,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,351,            Transition next = rs.firstTransition(millis);,1,0,0,1,2,0,3,1,0,5,45,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,352,            if (next == null) {,1,1,0,1,3,1,0,0,0,5,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,353,                continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,355,"            addTransition(transitions, next);",0,0,0,0,2,0,3,0,1,3,33,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,356,            millis = next.getMillis();,1,0,0,1,2,0,2,0,1,5,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,357,            saveMillis = next.getSaveMillis();,1,0,0,1,2,0,2,0,1,5,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,360,            rs = new RuleSet(rs);,2,0,0,1,2,1,0,1,2,6,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",1,1,0,0,7,1,4,0,1,6,64,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,363,"                if (addTransition(transitions, next)) {",0,0,0,0,5,1,3,0,1,4,39,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,364,                    if (tailZone != null) {,1,1,0,1,3,1,0,0,0,5,23,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,366,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,369,                millis = next.getMillis();,1,0,0,1,2,0,2,0,1,5,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,370,                saveMillis = next.getSaveMillis();,1,0,0,1,2,0,2,0,1,5,34,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,371,                if (tailZone == null && i == ruleSetCount - 1) {,3,4,0,1,3,1,0,0,0,5,48,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,372,                    tailZone = rs.buildTailZone(id);,1,0,0,1,2,0,3,0,1,5,32,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,379,            millis = rs.getUpperLimit(saveMillis);,1,0,0,1,2,0,3,0,1,5,38,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,383,        if (transitions.size() == 0) {,0,1,0,2,5,1,2,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,384,            if (tailZone != null) {,1,1,0,1,3,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,386,                return tailZone;,1,0,0,0,0,1,0,0,0,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0,0,0,0,2,1,2,0,2,4,39,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,390,        if (transitions.size() == 1 && tailZone == null) {,1,3,0,2,5,1,2,0,0,6,50,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,391,            Transition tr = transitions.get(0);,1,0,0,1,2,0,2,1,0,5,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,392,"            return buildFixedZone(id, tr.getNameKey(),",0,0,0,1,3,1,4,0,1,5,42,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",1,0,0,0,2,0,6,1,0,4,87,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,397,        if (zone.isCachable()) {,0,0,0,2,5,1,2,0,0,4,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,398,            return CachedDateTimeZone.forZone(zone);,0,0,0,1,2,1,3,0,0,4,40,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,400,        return zone;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,404,        int size = transitions.size();,1,0,0,1,2,1,2,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,405,        if (size == 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,406,            transitions.add(tr);,0,0,0,1,2,0,3,0,0,3,20,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,407,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,410,        Transition last = transitions.get(size - 1);,2,1,0,1,2,0,2,1,0,6,44,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,411,        if (!tr.isTransitionFrom(last)) {,0,0,0,2,5,1,3,0,1,5,33,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,412,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,417,        int offsetForLast = 0;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,418,        if (size >= 2) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,2,1,0,1,4,0,3,0,1,6,58,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,421,        int offsetForNew = last.getWallOffset();,1,0,0,1,2,1,2,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,423,        long lastLocal = last.getMillis() + offsetForLast;,2,1,0,1,2,1,2,0,0,6,50,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,424,        long newLocal = tr.getMillis() + offsetForNew;,2,1,0,1,2,1,2,0,0,6,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,426,        if (newLocal != lastLocal) {,2,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,427,            transitions.add(tr);,0,0,0,1,2,0,3,0,0,3,20,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,428,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,431,        transitions.remove(size - 1);,1,1,0,1,2,0,2,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,432,"        return addTransition(transitions, tr);",0,0,0,0,2,1,3,0,1,4,38,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,443,        if (out instanceof DataOutput) {,1,0,0,1,3,2,0,1,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,444,"            writeTo(zoneID, (DataOutput)out);",1,0,0,1,4,0,2,1,1,6,33,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",1,0,0,1,6,1,2,2,2,7,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,448,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",1,0,0,0,2,0,2,1,2,5,50,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,461,        if (zone instanceof FixedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,462,            out.writeByte('F'); // 'F' for fixed,0,0,0,1,2,1,2,0,1,5,36,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,463,            out.writeUTF(zone.getNameKey(0));,0,0,0,2,4,0,4,0,0,3,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,464,"            writeMillis(out, zone.getOffset(0));",0,0,0,1,4,0,4,0,1,4,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,465,"            writeMillis(out, zone.getStandardOffset(0));",0,0,0,1,4,0,4,0,1,4,44,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,467,            if (zone instanceof CachedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,41,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0,0,0,1,2,1,2,0,1,5,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,2,0,0,2,6,0,1,1,1,6,52,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0,0,0,1,2,1,2,0,1,5,54,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,473,            ((PrecalculatedZone)zone).writeTo(out);,1,0,0,2,6,0,2,1,0,5,39,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,475,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,45,        return iNameKey;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,49,        return iWallOffset;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,53,        return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,57,        return iWallOffset;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,61,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,65,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,69,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,77,        String id = getID();,1,0,0,1,2,0,1,1,1,6,20,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0,3,0,3,11,1,6,0,2,6,69,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",3,1,0,2,4,1,2,0,2,7,55,7,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",4,0,0,1,4,2,1,0,2,6,58,4,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,91,        if (obj instanceof FixedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,39,5,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,92,            FixedDateTimeZone other = (FixedDateTimeZone) obj;,2,0,0,1,2,0,0,2,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,93,            return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/FixedDateTimeZone,1,98,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1365,                        index = in.readUnsignedShort();,1,0,0,1,2,0,2,0,1,5,31,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1368,                } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1369,"                    throw new IOException(""Invalid encoding"");",0,0,0,1,2,2,0,1,2,5,42,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1392,            int size = transitions.size();,1,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1393,            if (size == 0) {,1,1,0,1,3,1,0,0,0,5,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1394,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1397,            long[] trans = new long[size];,1,0,1,0,4,3,0,0,0,4,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1398,            int[] wallOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1399,            int[] standardOffsets = new int[size];,1,0,1,0,4,3,0,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1400,            String[] nameKeys = new String[size];,1,0,1,0,4,1,0,2,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1402,            Transition last = null;,1,0,0,0,0,0,0,1,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1403,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1404,                Transition tr = transitions.get(i);,1,0,0,1,2,0,3,1,0,5,35,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1406,                if (!tr.isTransitionFrom(last)) {,0,0,0,2,5,1,3,0,1,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1407,                    throw new IllegalArgumentException(id);,1,0,0,1,2,2,0,1,1,6,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1410,                trans[i] = tr.getMillis();,0,0,1,1,4,0,2,0,1,5,26,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1411,                wallOffsets[i] = tr.getWallOffset();,0,0,1,1,4,0,2,0,1,5,36,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1412,                standardOffsets[i] = tr.getStandardOffset();,0,0,1,1,4,0,2,0,1,5,44,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1413,                nameKeys[i] = tr.getNameKey();,0,0,1,1,4,0,2,0,1,5,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1415,                last = tr;,2,0,0,0,0,0,0,0,1,2,10,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1420,            String[] zoneNameData = new String[5];,1,0,0,0,4,1,0,2,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1421,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,3,0,0,1,8,1,1,2,1,7,80,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1422,            for (int j = 0; j < zoneStrings.length; j++) {,5,1,0,1,3,2,0,0,1,6,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1423,                String[] set = zoneStrings[j];,1,0,1,0,4,0,0,1,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1424,                if (set != null && set.length == 5 && id.equals(set[0])) {,3,4,1,2,7,1,2,0,0,7,58,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1425,                    zoneNameData = set;,2,0,0,0,0,0,0,0,1,2,19,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1429,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1431,            for (int i = 0; i < nameKeys.length - 1; i++) {,5,2,0,1,3,2,0,0,1,6,47,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1432,                String curNameKey = nameKeys[i];,1,0,1,0,2,0,0,1,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1433,                String nextNameKey = nameKeys[i + 1];,2,1,1,0,2,0,0,1,0,5,37,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1434,                long curOffset = wallOffsets[i];,1,0,1,0,2,1,0,0,0,4,32,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1435,                long nextOffset = wallOffsets[i + 1];,2,1,1,0,2,1,0,0,0,5,37,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1436,                long curStdOffset = standardOffsets[i];,1,0,1,0,2,1,0,0,0,4,39,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1437,                long nextStdOffset = standardOffsets[i + 1];,2,1,1,0,2,1,0,0,0,5,44,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1438,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",3,1,1,1,8,1,2,2,1,9,81,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1439,                if (curOffset != nextOffset &&,2,8,0,0,1,1,0,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1446,                    if (ZoneInfoCompiler.verbose()) {,0,0,0,2,5,1,2,0,0,4,33,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1447,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",3,1,0,1,2,0,1,0,1,6,65,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1448,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",3,1,1,0,5,1,1,1,2,8,63,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1451,                    if (curOffset > nextOffset) {,2,1,0,1,3,1,0,0,0,5,29,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1452,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",1,1,1,1,6,0,1,0,2,7,48,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1453,                    } else if (curOffset < nextOffset) {,2,1,0,1,4,2,0,0,0,5,36,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1454,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",2,2,1,1,6,0,1,0,2,7,53,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1455,                        i++;,1,0,0,0,0,0,0,0,1,2,4,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1460,            if (tailZone != null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1461,                if (tailZone.iStartRecurrence.getNameKey(),2,0,0,1,3,1,1,0,0,5,42,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1463,                    if (ZoneInfoCompiler.verbose()) {,0,0,0,2,5,1,2,0,0,4,33,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1464,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",2,1,0,0,1,0,1,0,1,5,61,12,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1467,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,2,1,0,2,5,1,1,0,0,6,52,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1468,                        tailZone = new DSTZone(,1,0,0,0,1,1,0,1,2,5,23,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1474,                        tailZone = new DSTZone(,1,0,0,0,1,1,0,1,2,5,23,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1483,            return new PrecalculatedZone,0,0,0,0,0,2,0,1,1,3,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1512,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1513,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1514,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1515,                return iNameKeys[i];,0,0,1,0,2,1,0,0,0,3,20,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1517,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1518,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1519,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1520,                    return iNameKeys[i - 1];,1,1,1,0,2,1,0,0,0,5,24,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1522,"                return ""UTC"";",0,0,0,0,0,1,0,0,1,2,13,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1524,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1525,                return iNameKeys[i - 1];,1,1,1,0,2,1,0,0,0,5,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1527,            return iTailZone.getNameKey(instant);,0,0,0,1,2,1,3,0,0,4,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1531,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1532,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1533,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1534,                return iWallOffsets[i];,0,0,1,0,2,1,0,0,0,3,23,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1536,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1537,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1538,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1539,                    return iWallOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,27,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1541,                return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1543,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1544,                return iWallOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,27,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1546,            return iTailZone.getOffset(instant);,0,0,0,1,2,1,3,0,0,4,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1550,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1551,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1552,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1553,                return iStandardOffsets[i];,0,0,1,0,2,1,0,0,0,3,27,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1555,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1556,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1557,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1558,                    return iStandardOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,31,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1560,                return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1562,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1563,                return iStandardOffsets[i - 1];,1,1,1,0,2,1,0,0,0,5,31,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1565,            return iTailZone.getStandardOffset(instant);,0,0,0,1,2,1,3,0,0,4,44,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1569,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1573,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1574,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1575,            i = (i >= 0) ? (i + 1) : ~i;,4,2,0,1,4,0,0,0,2,5,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1576,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1577,                return transitions[i];,0,0,1,0,2,1,0,0,0,3,22,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1579,            if (iTailZone == null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1580,                return instant;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1582,            long end = transitions[transitions.length - 1];,3,1,1,0,2,1,0,0,0,5,47,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1583,            if (instant < end) {,2,1,0,1,3,1,0,0,0,5,20,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1584,                instant = end;,2,0,0,0,0,0,0,0,1,2,14,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1586,            return iTailZone.nextTransition(instant);,0,0,0,1,2,1,3,0,0,4,41,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1590,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1591,"            int i = Arrays.binarySearch(transitions, instant);",1,0,0,0,2,1,4,0,0,4,50,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1592,            if (i >= 0) {,1,1,0,1,3,1,0,0,0,5,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1593,                if (instant > Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1594,                    return instant - 1;,1,1,0,0,0,1,0,0,0,3,19,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1596,                return instant;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1598,            i = ~i;,2,0,0,0,0,0,0,0,2,2,7,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1599,            if (i < transitions.length) {,3,1,0,1,3,1,0,0,0,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1600,                if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1601,                    long prev = transitions[i - 1];,2,1,1,0,2,1,0,0,0,5,31,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1602,                    if (prev > Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,28,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1603,                        return prev - 1;,1,1,0,0,0,1,0,0,0,3,16,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1606,                return instant;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1608,            if (iTailZone != null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1609,                long prev = iTailZone.previousTransition(instant);,1,0,0,1,2,1,3,0,0,5,50,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1610,                if (prev < instant) {,2,1,0,1,3,1,0,0,0,5,21,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1611,                    return prev;,1,0,0,0,0,1,0,0,0,2,12,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1614,            long prev = transitions[i - 1];,2,1,1,0,2,1,0,0,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1615,            if (prev > Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1616,                return prev - 1;,1,1,0,0,0,1,0,0,0,3,16,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1618,            return instant;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1622,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1623,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1625,            if (obj instanceof PrecalculatedZone) {,1,0,0,1,3,2,0,1,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1626,                PrecalculatedZone other = (PrecalculatedZone)obj;,2,0,0,1,2,0,0,2,0,4,49,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1627,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1637,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1641,            int size = iTransitions.length;,3,0,0,0,0,1,0,0,0,2,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1644,            Set<String> poolSet = new HashSet<String>();,1,0,0,1,2,1,0,4,1,6,44,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1645,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1646,                poolSet.add(iNameKeys[i]);,0,0,1,1,4,0,2,0,0,4,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1649,            int poolSize = poolSet.size();,1,0,0,1,2,1,2,0,0,5,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1650,            if (poolSize > 65535) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1651,"                throw new UnsupportedOperationException(""String pool is too large"");",0,0,0,1,2,2,0,1,2,5,68,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1653,            String[] pool = new String[poolSize];,1,0,1,0,4,1,0,2,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1654,            Iterator<String> it = poolSet.iterator();,1,0,0,1,2,0,2,2,0,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1655,            for (int i=0; it.hasNext(); i++) {,2,0,0,2,5,2,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1656,                pool[i] = it.next();,0,0,1,1,4,0,2,0,1,5,20,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1660,            out.writeShort(poolSize);,0,0,0,1,2,0,3,0,0,3,25,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1661,            for (int i=0; i<poolSize; i++) {,4,1,0,1,3,2,0,0,1,6,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1662,                out.writeUTF(pool[i]);,0,0,1,1,4,0,2,0,0,4,22,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1665,            out.writeInt(size);,0,0,0,1,2,0,3,0,0,3,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1667,            for (int i=0; i<size; i++) {,4,1,0,1,3,2,0,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1668,"                writeMillis(out, iTransitions[i]);",0,0,1,0,4,0,2,0,1,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1669,"                writeMillis(out, iWallOffsets[i]);",0,0,1,0,4,0,2,0,1,4,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1670,"                writeMillis(out, iStandardOffsets[i]);",0,0,1,0,4,0,2,0,1,4,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1673,                String nameKey = iNameKeys[i];,1,0,1,0,2,0,0,1,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1674,                for (int j=0; j<poolSize; j++) {,4,1,0,1,3,2,0,0,1,6,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1675,                    if (pool[j].equals(nameKey)) {,0,0,1,2,7,1,2,0,0,5,30,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1676,                        if (poolSize < 256) {,1,1,0,1,3,1,0,0,0,5,21,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1677,                            out.writeByte(j);,0,0,0,1,2,0,3,0,0,3,17,14,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1679,                            out.writeShort(j);,0,0,0,1,2,0,3,0,0,3,18,14,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1681,                        break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1686,            out.writeBoolean(iTailZone != null);,1,1,0,1,2,0,2,0,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1687,            if (iTailZone != null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1688,                iTailZone.writeTo(out);,0,0,0,1,2,0,3,0,0,3,23,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1690,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1693,            if (iTailZone != null) {,1,1,0,1,3,1,0,0,0,5,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1694,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1696,            long[] transitions = iTransitions;,2,0,0,0,2,1,0,0,0,3,34,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1697,            if (transitions.length <= 1) {,2,1,0,1,3,1,0,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1698,                return false;,0,0,0,0,0,1,0,0,1,2,13,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1703,            double distances = 0;,1,0,0,0,0,1,0,0,0,2,21,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1704,            int count = 0;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1706,            for (int i=1; i<transitions.length; i++) {,5,1,0,1,3,2,0,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1707,                long diff = transitions[i] - transitions[i - 1];,2,2,1,0,4,1,0,0,0,5,48,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1708,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,1,3,0,3,7,1,0,0,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1709,                    distances += (double)diff;,2,0,0,1,2,1,0,0,1,5,26,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1710,                    count++;,1,0,0,0,0,0,0,0,1,2,8,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1714,            if (count > 0) {,1,1,0,1,3,1,0,0,0,5,16,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1715,                double avg = distances / count;,3,1,0,0,0,1,0,0,0,3,31,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1716,                avg /= 24 * 60 * 60 * 1000;,1,1,0,0,0,0,0,0,1,3,27,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1717,                if (avg >= 25) {,1,1,0,1,3,1,0,0,0,5,16,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1724,                    return true;,0,0,0,0,0,1,0,0,1,2,12,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1728,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,40,        } catch (SecurityException e) {,1,0,0,1,4,1,0,1,0,5,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,41,            i = null;,1,0,0,0,0,0,0,0,1,2,9,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,50,            cacheSize = i.intValue();,1,0,0,1,2,0,2,0,1,5,25,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,52,            cacheSize--;,1,0,0,0,0,0,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,53,            int shift = 0;,1,0,0,0,0,1,0,0,0,2,14,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,54,            while (cacheSize > 0) {,1,1,0,1,3,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,55,                shift++;,1,0,0,0,0,0,0,0,1,2,8,8,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,56,                cacheSize >>= 1;,1,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,58,            cacheSize = 1 << shift;,2,1,0,0,0,0,0,0,1,3,23,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,69,            return (CachedDateTimeZone)zone;,1,0,0,1,2,1,0,1,0,5,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,95,        return iZone;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,99,        return getInfo(instant).getNameKey(instant);,0,0,0,1,4,1,4,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,103,        return getInfo(instant).getOffset(instant);,0,0,0,1,4,1,4,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,107,        return getInfo(instant).getStandardOffset(instant);,0,0,0,1,4,1,4,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,111,        return iZone.isFixed();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,115,        return iZone.nextTransition(instant);,0,0,0,1,2,1,3,0,0,4,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,119,        return iZone.previousTransition(instant);,0,0,0,1,2,1,3,0,0,4,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,127,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,128,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,130,        if (obj instanceof CachedDateTimeZone) {,1,0,0,1,3,2,0,1,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,131,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,2,0,0,3,6,1,2,1,0,6,53,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,133,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,140,        int period = (int)(millis >> 32);,2,1,0,1,4,2,0,0,0,5,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,141,        Info[] cache = iInfoCache;,2,0,0,0,2,0,0,1,0,3,26,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,142,        int index = period & cInfoCacheMask;,3,1,0,0,0,1,0,0,0,3,36,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,143,        Info info = cache[index];,1,0,1,0,2,0,0,1,0,4,25,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,144,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,4,4,0,3,9,2,0,0,0,5,65,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,145,            info = createInfo(millis);,1,0,0,1,2,0,2,0,2,5,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,146,            cache[index] = info;,1,0,1,0,2,0,0,0,1,4,20,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,148,        return info;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,152,        long periodStart = millis & (0xffffffffL << 32);,2,2,0,1,2,1,0,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,153,"        Info info = new Info(iZone, periodStart);",3,0,0,0,2,1,0,2,1,5,41,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,155,        long end = periodStart | 0xffffffffL;,2,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,156,        Info chain = info;,2,0,0,0,0,0,0,1,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,158,            long next = iZone.nextTransition(periodStart);,1,0,0,1,2,1,3,0,0,5,46,7,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,159,            if (next == periodStart || next > end) {,4,3,0,1,3,1,0,0,0,5,40,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,160,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,162,            periodStart = next;,2,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",5,0,0,0,4,1,0,1,3,5,57,6,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,164,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/CachedDateTimeZone,1,166,        return info;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1186,            return findMatchingRecurrence(instant).getNameKey();,0,0,0,1,4,1,3,0,1,5,52,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1190,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,1,1,0,1,4,1,3,0,1,7,73,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1194,            return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1198,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1202,            int standardOffset = iStandardOffset;,2,0,0,0,0,1,0,0,0,2,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1203,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,0,1,0,2,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1204,            Recurrence endRecurrence = iEndRecurrence;,2,0,0,0,0,0,0,1,0,2,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1209,                start = startRecurrence.next,1,0,0,0,0,0,2,0,1,3,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1211,                if (instant > 0 && start < 0) {,2,3,0,1,3,1,0,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1213,                    start = instant;,2,0,0,0,0,0,0,0,1,2,16,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1221,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1215,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1217,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1218,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1220,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1224,                end = endRecurrence.next,1,0,0,0,0,0,2,0,1,3,24,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1226,                if (instant > 0 && end < 0) {,2,3,0,1,3,1,0,0,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1228,                    end = instant;,2,0,0,0,0,0,0,0,1,2,14,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1236,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1230,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1232,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1233,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1235,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1238,            return (start > end) ? end : start;,4,1,0,1,2,1,0,0,0,5,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1244,            instant++;,1,0,0,0,0,0,0,0,1,2,10,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1246,            int standardOffset = iStandardOffset;,2,0,0,0,0,1,0,0,0,2,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1247,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,0,1,0,2,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1248,            Recurrence endRecurrence = iEndRecurrence;,2,0,0,0,0,0,0,1,0,2,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1253,                start = startRecurrence.previous,1,0,0,0,0,0,2,0,1,3,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1255,                if (instant < 0 && start > 0) {,2,3,0,1,3,1,0,0,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1257,                    start = instant;,2,0,0,0,0,0,0,0,1,2,16,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1265,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1259,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1261,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1262,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1264,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1268,                end = endRecurrence.previous,1,0,0,0,0,0,2,0,1,3,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1270,                if (instant < 0 && end > 0) {,2,3,0,1,3,1,0,0,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1272,                    end = instant;,2,0,0,0,0,0,0,0,1,2,14,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1280,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1274,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1276,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1277,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1279,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1282,            return ((start > end) ? start : end) - 1;,4,2,0,2,4,1,0,0,0,5,41,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1286,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1287,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1289,            if (obj instanceof DSTZone) {,1,0,0,1,3,2,0,1,0,5,29,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1290,                DSTZone other = (DSTZone)obj;,2,0,0,1,2,0,0,2,0,4,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1291,                return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1297,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1301,"            writeMillis(out, iStandardOffset);",0,0,0,0,2,0,3,0,1,3,34,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1302,            iStartRecurrence.writeTo(out);,0,0,0,1,2,0,3,0,0,3,30,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1303,            iEndRecurrence.writeTo(out);,0,0,0,1,2,0,3,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1304,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1307,            int standardOffset = iStandardOffset;,2,0,0,0,0,1,0,0,0,2,37,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1308,            Recurrence startRecurrence = iStartRecurrence;,2,0,0,0,0,0,0,1,0,2,46,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1309,            Recurrence endRecurrence = iEndRecurrence;,2,0,0,0,0,0,0,1,0,2,42,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1314,                start = startRecurrence.next,1,0,0,0,0,0,2,0,1,3,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1322,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1316,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1318,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1319,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1321,                start = instant;,2,0,0,0,0,0,0,0,1,2,16,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1325,                end = endRecurrence.next,1,0,0,0,0,0,2,0,1,3,24,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1333,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1327,            } catch (IllegalArgumentException e) {,1,0,0,1,4,1,0,1,0,5,38,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1329,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1330,            } catch (ArithmeticException e) {,1,0,0,1,4,1,0,1,0,5,33,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1332,                end = instant;,2,0,0,0,0,0,0,0,1,2,14,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1335,            return (start > end) ? startRecurrence : endRecurrence;,4,1,0,1,2,1,0,0,0,5,55,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,965,        RuleSet() {,1,0,0,1,3,0,0,0,0,3,11,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,966,            iRules = new ArrayList<Rule>(10);,1,0,0,1,2,1,0,2,2,6,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,967,            iUpperYear = Integer.MAX_VALUE;,3,0,0,0,0,0,0,0,1,2,31,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,968,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,973,        RuleSet(RuleSet rs) {,2,0,0,1,3,0,0,1,0,4,21,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,974,            iStandardOffset = rs.iStandardOffset;,3,0,0,0,0,0,0,0,1,2,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,975,            iRules = new ArrayList<Rule>(rs.iRules);,3,0,0,1,2,1,0,2,2,6,40,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,976,            iInitialNameKey = rs.iInitialNameKey;,3,0,0,0,0,0,0,0,1,2,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,977,            iInitialSaveMillis = rs.iInitialSaveMillis;,3,0,0,0,0,0,0,0,1,2,43,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,978,            iUpperYear = rs.iUpperYear;,3,0,0,0,0,0,0,0,1,2,27,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,979,            iUpperOfYear = rs.iUpperOfYear;,3,0,0,0,0,0,0,0,1,2,31,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,980,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,950,            long now = DateTimeUtils.currentTimeMillis();,1,0,0,1,2,1,2,0,0,5,45,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,951,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,1,1,0,1,6,0,5,0,1,6,66,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,952,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,984,            return iStandardOffset;,1,0,0,0,0,1,0,0,0,2,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,988,            iStandardOffset = standardOffset;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,989,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,992,            iInitialNameKey = nameKey;,2,0,0,0,0,0,0,0,1,2,26,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,993,            iInitialSaveMillis = saveMillis;,2,0,0,0,0,0,0,0,1,2,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,994,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,997,            if (!iRules.contains(rule)) {,0,0,0,2,5,1,3,0,1,5,29,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,998,                iRules.add(rule);,0,0,0,1,2,0,3,0,0,3,17,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1000,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1003,            iUpperYear = year;,2,0,0,0,0,0,0,0,1,2,18,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1004,            iUpperOfYear = ofYear;,2,0,0,0,0,0,0,0,1,2,22,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1005,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1014,            if (iInitialNameKey != null) {,1,1,0,1,3,1,0,0,0,5,30,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1016,"                return new Transition(firstMillis, iInitialNameKey,",2,0,0,0,1,2,0,1,1,5,51,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1021,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,2,0,0,1,2,1,0,4,1,6,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1027,            long millis = Long.MIN_VALUE;,3,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1028,            int saveMillis = 0;,1,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1029,            Transition first = null;,1,0,0,0,0,0,0,1,0,2,24,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1032,"            while ((next = nextTransition(millis, saveMillis)) != null) {",1,1,0,0,7,1,3,0,2,6,61,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1033,                millis = next.getMillis();,1,0,0,1,2,0,2,0,1,5,26,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1035,                if (millis == firstMillis) {,2,1,0,1,3,1,0,0,0,5,28,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1036,"                    first = new Transition(firstMillis, next);",3,0,0,0,2,1,0,1,2,5,42,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1037,                    break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1040,                if (millis > firstMillis) {,2,1,0,1,3,1,0,0,0,5,27,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1041,                    if (first == null) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1045,                        for (Rule rule : copy) {,2,0,0,1,3,1,0,1,0,5,24,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1046,                            if (rule.getSaveMillis() == 0) {,0,1,0,2,5,1,2,0,0,5,32,13,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1047,"                                first = new Transition(firstMillis, rule, iStandardOffset);",4,0,0,0,2,1,0,1,2,5,59,15,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1048,                                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1050,                        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1052,                    if (first == null) {,1,1,0,1,3,1,0,0,0,5,20,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1056,"                        first = new Transition(firstMillis, next.getNameKey(),",2,0,0,1,3,1,2,1,2,7,54,11,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1064,"                first = new Transition(firstMillis, next);",3,0,0,0,2,1,0,1,2,5,42,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1066,                saveMillis = next.getSaveMillis();,1,0,0,1,2,0,2,0,1,5,34,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1069,            iRules = copy;,2,0,0,0,0,0,0,0,1,2,14,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1070,            return first;,1,0,0,0,0,1,0,0,0,2,13,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1085,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1088,            Rule nextRule = null;,1,0,0,0,0,0,0,1,0,2,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1089,            long nextMillis = Long.MAX_VALUE;,3,0,0,0,0,1,0,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1091,            Iterator<Rule> it = iRules.iterator();,1,0,0,1,2,0,2,2,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1092,            while (it.hasNext()) {,0,0,0,2,5,1,2,0,0,4,22,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1093,                Rule rule = it.next();,1,0,0,1,2,0,2,1,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1094,"                long next = rule.next(instant, iStandardOffset, saveMillis);",1,0,0,0,2,1,5,0,0,4,60,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1095,                if (next <= instant) {,2,1,0,1,3,1,0,0,0,5,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1096,                    it.remove();,0,0,0,1,2,0,2,0,0,3,12,10,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1097,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1101,                if (next <= nextMillis) {,2,1,0,1,3,1,0,0,0,5,25,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1103,                    nextRule = rule;,2,0,0,0,0,0,0,0,1,2,16,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1104,                    nextMillis = next;,2,0,0,0,0,0,0,0,1,2,18,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1106,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1108,            if (nextRule == null) {,1,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1109,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1113,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,1,1,0,2,7,1,4,0,0,6,50,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1114,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1118,            if (iUpperYear < Integer.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,37,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1119,                long upperMillis =,1,0,0,0,0,1,0,0,0,2,18,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1121,                if (nextMillis >= upperMillis) {,2,1,0,1,3,1,0,0,0,5,32,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1123,                    return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1127,"            return new Transition(nextMillis, nextRule, iStandardOffset);",3,0,0,0,2,2,0,1,1,5,61,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1134,            if (iUpperYear == Integer.MAX_VALUE) {,3,1,0,1,3,1,0,0,0,5,38,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1135,                return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,8,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1137,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0,0,0,0,2,1,5,0,0,3,72,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1144,            if (iRules.size() == 2) {,0,1,0,2,5,1,2,0,0,5,25,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1145,                Rule startRule = iRules.get(0);,1,0,0,1,2,0,2,1,0,5,31,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1146,                Rule endRule = iRules.get(1);,1,0,0,1,2,0,2,1,0,5,29,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1147,                if (startRule.getToYear() == Integer.MAX_VALUE &&,2,2,0,1,3,1,2,0,0,6,49,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1157,"                    return new DSTZone(id, iStandardOffset,",2,0,0,0,1,2,0,1,1,5,39,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,1161,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,1,53,        super(message);,1,0,0,1,2,1,0,0,1,5,15,3,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,1,54,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,1,63,"        super(createMessage(instantLocal, zoneId));",0,0,0,0,4,1,3,0,2,4,43,3,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,1,64,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,1,67,"        String localDateTime = DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal));",2,0,0,2,6,1,3,2,2,7,111,4,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,1,68,"        String zone = (zoneId != null ? "" ("" + zoneId + "")"" : """");",3,2,0,2,4,0,0,1,3,6,58,4,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,1,69,"        return ""Illegal instant due to time zone offset transition (daylight savings time 'gap'): "" + localDateTime + zone;",2,1,0,1,2,1,0,0,1,6,115,4,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,1,80,        if (ex instanceof IllegalInstantException) {,1,0,0,1,3,2,0,1,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,1,81,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,1,83,        while (ex.getCause() != null && ex.getCause() != ex) {,1,3,0,2,7,1,4,0,0,6,54,4,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,1,84,            return isIllegalInstant(ex.getCause());,0,0,0,2,4,1,3,0,1,5,39,6,0.0,0,0
defect4j,time,org/joda/time/IllegalInstantException,1,86,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,79,"        return getField(index, getChronology()).getType();",0,0,0,1,6,1,4,0,2,5,50,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,90,        DateTimeFieldType[] result = new DateTimeFieldType[size()];,1,0,0,1,6,1,1,2,1,7,59,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,91,        for (int i = 0; i < result.length; i++) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,92,            result[i] = getFieldType(i);,0,0,1,1,4,0,2,0,2,5,28,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,94,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,116,        DateTimeField[] result = new DateTimeField[size()];,1,0,0,1,6,1,1,2,1,7,51,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,117,        for (int i = 0; i < result.length; i++) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,118,            result[i] = getField(i);,0,0,1,1,4,0,2,0,2,5,24,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,120,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,132,        int[] result = new int[size()];,1,0,0,1,6,3,1,0,1,6,31,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,133,        for (int i = 0; i < result.length; i++) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,134,            result[i] = getValue(i);,0,0,1,1,4,0,2,0,2,5,24,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,136,        return result;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,150,        return getValue(indexOfSupported(type));,0,0,0,2,4,1,3,0,2,5,40,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,160,        return (indexOf(type) != -1);,0,1,0,2,4,1,2,0,2,6,29,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,170,"        for (int i = 0, isize = size(); i < isize; i++) {",5,1,0,1,5,2,1,0,2,7,49,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,171,            if (getFieldType(i) == type) {,1,1,0,2,5,1,2,0,1,7,30,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,172,                return i;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,175,        return -1;,0,0,0,0,0,1,0,0,1,2,10,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,187,        int index = indexOf(type);,1,0,0,1,2,1,2,0,1,6,26,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,188,        if (index == -1) {,1,1,0,1,3,1,0,0,1,6,18,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,189,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",1,1,0,1,2,2,0,1,3,7,76,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,191,        return index;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,202,"        for (int i = 0, isize = size(); i < isize; i++) {",5,1,0,1,5,2,1,0,2,7,49,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,203,            if (getFieldType(i).getDurationType() == type) {,1,1,0,2,7,1,3,0,1,7,48,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,204,                return i;,1,0,0,0,0,1,0,0,0,2,9,8,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,207,        return -1;,0,0,0,0,0,1,0,0,1,2,10,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,219,        int index = indexOf(type);,1,0,0,1,2,1,2,0,1,6,26,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,220,        if (index == -1) {,1,1,0,1,3,1,0,0,1,6,18,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,221,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",1,1,0,1,2,2,0,1,3,7,76,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,223,        return index;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,240,        Chronology chrono = DateTimeUtils.getInstantChronology(baseInstant);,1,0,0,1,2,0,3,1,0,5,68,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,241,        long instantMillis = DateTimeUtils.getInstantMillis(baseInstant);,1,0,0,1,2,1,3,0,0,5,65,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,242,"        long resolved = chrono.set(this, instantMillis);",1,0,0,0,2,2,3,0,0,4,48,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,243,"        return new DateTime(resolved, chrono);",2,0,0,0,2,2,0,1,1,5,38,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,255,        if (this == partial) {,1,1,0,1,3,2,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,256,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,258,        if (partial instanceof ReadablePartial == false) {,1,1,0,1,3,2,0,1,1,7,50,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,259,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,261,        ReadablePartial other = (ReadablePartial) partial;,2,0,0,1,2,0,0,2,0,4,50,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,262,        if (size() != other.size()) {,0,1,0,2,7,1,3,0,1,6,29,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,263,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,265,"        for (int i = 0, isize = size(); i < isize; i++) {",5,1,0,1,5,2,1,0,2,7,49,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,266,            if (getValue(i) != other.getValue(i) || getFieldType(i) != other.getFieldType(i)) {,0,3,0,2,11,1,10,0,2,6,83,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,267,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,270,"        return FieldUtils.equals(getChronology(), other.getChronology());",0,0,0,1,6,1,5,0,1,5,65,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,280,        int total = 157;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,281,"        for (int i = 0, isize = size(); i < isize; i++) {",5,1,0,1,5,2,1,0,2,7,49,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,282,            total = 23 * total + getValue(i);,2,2,0,1,2,0,2,0,2,6,33,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,283,            total = 23 * total + getFieldType(i).hashCode();,2,2,0,1,4,0,3,0,2,6,48,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,285,        total += getChronology().hashCode();,1,0,0,1,4,0,2,0,2,5,36,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,286,        return total;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,311,        if (this == other) {,1,1,0,1,3,2,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,312,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,314,        if (size() != other.size()) {,0,1,0,2,7,1,3,0,1,6,29,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,315,"            throw new ClassCastException(""ReadablePartial objects must have matching field types"");",0,0,0,1,2,2,0,1,2,5,87,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,317,"        for (int i = 0, isize = size(); i < isize; i++) {",5,1,0,1,5,2,1,0,2,7,49,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,318,            if (getFieldType(i) != other.getFieldType(i)) {,0,1,0,2,7,1,5,0,1,6,47,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,319,"                throw new ClassCastException(""ReadablePartial objects must have matching field types"");",0,0,0,1,2,2,0,1,2,5,87,8,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,323,"        for (int i = 0, isize = size(); i < isize; i++) {",5,1,0,1,5,2,1,0,2,7,49,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,324,            if (getValue(i) > other.getValue(i)) {,0,1,0,2,7,1,5,0,1,6,38,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,325,                return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,327,            if (getValue(i) < other.getValue(i)) {,0,1,0,2,7,1,5,0,1,6,38,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,328,                return -1;,0,0,0,0,0,1,0,0,1,2,10,8,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,331,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,350,        if (partial == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,351,"            throw new IllegalArgumentException(""Partial cannot be null"");",0,0,0,1,2,2,0,1,2,5,61,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,353,        return compareTo(partial) > 0;,0,1,0,1,2,1,2,0,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,372,        if (partial == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,373,"            throw new IllegalArgumentException(""Partial cannot be null"");",0,0,0,1,2,2,0,1,2,5,61,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,375,        return compareTo(partial) < 0;,0,1,0,1,2,1,2,0,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,394,        if (partial == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,395,"            throw new IllegalArgumentException(""Partial cannot be null"");",0,0,0,1,2,2,0,1,2,5,61,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,397,        return compareTo(partial) == 0;,0,1,0,1,2,1,2,0,1,6,31,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,409,        if (formatter == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,410,            return toString();,0,0,0,1,2,1,1,0,1,5,18,6,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,412,        return formatter.print(this);,0,0,0,1,2,2,2,0,0,4,29,5,0.0,0,0
defect4j,time,org/joda/time/base/AbstractPartial,1,46,public abstract class AbstractPartial,1,0,0,0,0,3,0,0,2,3,37,1,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",4,0,0,0,3,2,0,1,0,4,55,3,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,817,            iRecurrence = recurrence;,2,0,0,0,0,0,0,0,1,2,25,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,818,            iFromYear = fromYear;,2,0,0,0,0,0,0,0,1,2,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,819,            iToYear = toYear;,2,0,0,0,0,0,0,0,1,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,820,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,824,            return iFromYear;,1,0,0,0,0,1,0,0,0,2,17,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,828,            return iToYear;,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,833,            return iRecurrence.getOfYear();,0,0,0,1,2,1,2,0,0,4,31,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,837,            return iRecurrence.getNameKey();,0,0,0,1,2,1,2,0,0,4,32,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,841,            return iRecurrence.getSaveMillis();,0,0,0,1,2,1,2,0,0,4,35,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,845,            Chronology chrono = ISOChronology.getInstanceUTC();,1,0,0,1,2,0,2,1,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,847,            final int wallOffset = standardOffset + saveMillis;,3,1,0,0,0,2,0,0,1,4,51,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,848,            long testInstant = instant;,2,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,851,            if (instant == Long.MIN_VALUE) {,3,1,0,1,3,1,0,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,852,                year = Integer.MIN_VALUE;,3,0,0,0,0,0,0,0,1,2,25,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,854,                year = chrono.year().get(instant + wallOffset);,3,1,0,1,4,0,3,0,1,6,47,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,857,            if (year < iFromYear) {,2,1,0,1,3,1,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,859,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",2,1,0,1,4,0,4,0,1,6,59,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,862,                testInstant -= 1;,1,0,0,0,0,0,0,0,1,2,17,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,865,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",1,0,0,0,2,1,5,0,0,4,70,6,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,867,            if (next > instant) {,2,1,0,1,3,1,0,0,0,5,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,868,                year = chrono.year().get(next + wallOffset);,3,1,0,1,4,0,3,0,1,6,44,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,869,                if (year > iToYear) {,2,1,0,1,3,1,0,0,0,5,21,7,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,871,                    next = instant;,2,0,0,0,0,0,0,0,1,2,15,9,0.0,0,0
defect4j,time,org/joda/time/tz/DateTimeZoneBuilder,1,875,            return next;,1,0,0,0,0,1,0,0,0,2,12,5,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,56,    public ZoneInfoProvider(File fileDir) throws IOException {,3,0,0,1,3,2,0,1,1,6,58,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,57,        if (fileDir == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,58,"            throw new IllegalArgumentException(""No file directory provided"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,60,        if (!fileDir.exists()) {,0,0,0,2,5,1,2,0,1,5,24,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",1,1,0,1,2,2,0,1,2,7,66,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,63,        if (!fileDir.isDirectory()) {,0,0,0,2,5,1,2,0,1,5,29,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",1,1,0,1,2,2,0,1,2,7,71,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,67,        iFileDir = fileDir;,2,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,68,        iResourcePath = null;,1,0,0,0,0,0,0,0,1,2,21,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,69,        iLoader = null;,1,0,0,0,0,0,0,0,1,2,15,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",1,0,0,2,4,0,2,0,4,5,60,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,72,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,96,"        this(resourcePath, loader, true);",2,0,0,0,2,1,0,0,1,4,33,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,97,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,108,"            throw new IllegalArgumentException(""No resource path provided"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,136,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,141,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,157,            return loadZoneData(id);,0,0,0,1,2,1,2,0,1,5,24,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,161,        return getZone((String)obj);,1,0,0,2,4,1,1,1,1,7,28,4,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,182,        ex.printStackTrace();,0,0,0,1,2,0,2,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,183,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,196,"            in = new FileInputStream(new File(iFileDir, name));",3,0,0,0,4,2,0,2,3,5,51,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,202,                in = ClassLoader.getSystemResourceAsStream(path);,1,0,0,1,2,0,3,0,1,5,49,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,205,                StringBuilder buf = new StringBuilder(40),1,0,0,1,2,1,0,2,1,6,41,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,210,                throw new IOException(buf.toString());,0,0,0,2,4,2,2,1,1,6,38,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,238,            } catch (IOException ex) {,1,0,0,1,4,1,0,1,0,5,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,229,        } catch (IOException ex) {,1,0,0,1,4,1,0,1,0,5,26,6,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,230,            uncaughtException(ex);,0,0,0,1,2,0,2,0,1,4,22,7,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,231,            iZoneInfoMap.remove(id);,0,0,0,1,2,0,3,0,0,3,24,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,232,            return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,234,            try {,0,0,0,0,1,1,0,0,0,2,5,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,258,            } catch (IOException ex) {,1,0,0,1,4,1,0,1,0,5,26,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,260,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,256,            try {,0,0,0,0,1,1,0,0,0,2,5,2,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,284,            } catch (ArrayIndexOutOfBoundsException ex) {,1,0,0,1,4,1,0,1,0,5,45,8,0.0,0,0
defect4j,time,org/joda/time/tz/ZoneInfoProvider,1,285,"                throw new IOException(""Corrupt zone info map"");",0,0,0,1,2,2,0,1,2,5,47,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,55,        return iChronology.getWeekOfWeekyear(instant);,0,0,0,1,2,1,3,0,0,4,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,66,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),4,3,0,1,2,2,0,0,0,5,71,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,71,        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),4,3,0,1,2,2,0,0,0,5,73,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,76,        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);,4,2,0,1,2,2,0,0,0,5,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,80,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,84,        return 53;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,88,        int weekyear = iChronology.getWeekyear(instant);,1,0,0,1,2,1,3,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,89,        return iChronology.getWeeksInYear(weekyear);,0,0,0,1,2,1,3,0,0,4,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,93,        if (partial.isSupported(DateTimeFieldType.weekyear())) {,0,0,0,3,7,1,4,0,0,4,56,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,94,            int weekyear = partial.get(DateTimeFieldType.weekyear());,1,0,0,2,4,1,4,0,0,5,57,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,95,            return iChronology.getWeeksInYear(weekyear);,0,0,0,1,2,1,3,0,0,4,44,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,97,        return 53;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,101,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,102,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,103,            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {,0,1,0,2,7,1,5,0,0,5,62,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,104,                int weekyear = values[i];,1,0,1,0,2,1,0,0,0,4,25,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,105,                return iChronology.getWeeksInYear(weekyear);,0,0,0,1,2,1,3,0,0,4,44,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,108,        return 53;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,112,        return value > 52 ? getMaximumValue(instant) : 52;,1,1,0,1,2,1,2,0,1,7,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,1,119,        return iChronology.weekOfWeekyear();,0,0,0,1,2,1,2,0,0,4,36,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,52,"            throw new IllegalArgumentException(""Unit duration field must be precise"");",0,0,0,1,2,2,0,1,2,5,74,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,57,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");",0,0,0,1,2,2,0,1,2,5,79,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,67,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,79,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0,0,0,1,3,1,4,0,1,5,60,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,81,        return instant + (value - get(instant)) * iUnitMillis;,3,3,0,2,4,1,2,0,1,7,54,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,93,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,94,            return instant - instant % iUnitMillis;,3,2,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,96,            instant += 1;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,97,            return instant - instant % iUnitMillis - iUnitMillis;,4,3,0,0,0,1,0,0,0,3,53,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,110,        if (instant > 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,111,            instant -= 1;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,112,            return instant - instant % iUnitMillis + iUnitMillis;,4,3,0,0,0,1,0,0,0,3,53,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,114,            return instant - instant % iUnitMillis;,3,2,0,0,0,1,0,0,0,3,39,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,127,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,128,            return instant % iUnitMillis;,2,1,0,0,0,1,0,0,0,3,29,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,130,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,3,4,0,1,2,1,0,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationDateTimeField,1,164,        return getMaximumValue(instant);,0,0,0,1,2,1,2,0,1,5,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,52,"            throw new IllegalArgumentException(""The type must not be null"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,62,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,94,"        return getAsText(get(instant), locale);",0,0,0,1,4,1,4,0,2,5,39,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,106,"        return getAsText(instant, null);",0,0,0,0,2,1,2,0,1,4,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,121,"        return getAsText(fieldValue, locale);",0,0,0,0,2,1,3,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,136,"        return getAsText(partial, partial.get(getType()), locale);",0,0,0,2,6,1,6,0,2,5,58,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,153,        return Integer.toString(fieldValue);,0,0,0,1,2,1,3,0,0,4,36,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,168,"        return getAsShortText(get(instant), locale);",0,0,0,1,4,1,4,0,2,5,44,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,180,"        return getAsShortText(instant, null);",0,0,0,0,2,1,2,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,195,"        return getAsShortText(fieldValue, locale);",0,0,0,0,2,1,3,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,210,"        return getAsShortText(partial, partial.get(getType()), locale);",0,0,0,2,6,1,6,0,2,5,63,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,227,"        return getAsText(fieldValue, locale);",0,0,0,0,2,1,3,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,253,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,267,"        return getDurationField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,298,        if (valueToAdd == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,299,            return values;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,304,        DateTimeField nextField = null;,1,0,0,0,0,0,0,1,0,2,31,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,306,        while (valueToAdd > 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,307,"            int max = getMaximumValue(instant, values);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,308,            long proposed = values[fieldIndex] + valueToAdd;,2,1,1,0,2,1,0,0,0,5,48,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,309,            if (proposed <= max) {,2,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,310,                values[fieldIndex] = (int) proposed;,1,0,1,1,4,1,0,0,1,6,36,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,311,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,313,            if (nextField == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,314,                if (fieldIndex == 0) {,1,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0,0,0,1,2,3,0,1,2,5,69,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,317,                nextField = instant.getField(fieldIndex - 1);,2,1,0,1,2,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0,1,0,2,11,1,5,0,1,6,82,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0,0,0,1,2,3,0,1,2,5,61,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,2,2,1,1,4,0,0,0,1,6,74,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",2,1,0,0,2,0,4,0,1,5,90,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0,0,1,0,4,1,3,0,2,5,83,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,326,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,327,        while (valueToAdd < 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,328,"            int min = getMinimumValue(instant, values);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,329,            long proposed = values[fieldIndex] + valueToAdd;,2,1,1,0,2,1,0,0,0,5,48,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,330,            if (proposed >= min) {,2,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,331,                values[fieldIndex] = (int) proposed;,1,0,1,1,4,1,0,0,1,6,36,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,332,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,334,            if (nextField == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,335,                if (fieldIndex == 0) {,1,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0,0,0,1,2,3,0,1,2,5,69,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,338,                nextField = instant.getField(fieldIndex - 1);,2,1,0,1,2,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,339,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0,1,0,2,11,1,5,0,1,6,82,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0,0,0,1,2,3,0,1,2,5,61,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,343,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,2,2,1,1,4,0,0,0,1,6,74,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",2,1,0,0,2,0,4,0,2,5,98,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0,0,1,0,4,1,3,0,2,5,88,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,346,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0,0,1,0,4,1,4,0,1,5,87,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,379,        if (valueToAdd == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,380,            return values;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,385,        DateTimeField nextField = null;,1,0,0,0,0,0,0,1,0,2,31,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,387,        while (valueToAdd > 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,388,"            int max = getMaximumValue(instant, values);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,389,            long proposed = values[fieldIndex] + valueToAdd;,2,1,1,0,2,1,0,0,0,5,48,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,390,            if (proposed <= max) {,2,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,391,                values[fieldIndex] = (int) proposed;,1,0,1,1,4,1,0,0,1,6,36,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,392,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,394,            if (nextField == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,395,                if (fieldIndex == 0) {,1,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,396,                    valueToAdd -= (max + 1) - values[fieldIndex];,2,2,1,1,4,0,0,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,397,"                    values[fieldIndex] = getMinimumValue(instant, values);",0,0,1,0,4,0,3,0,2,4,54,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,398,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,400,                nextField = instant.getField(fieldIndex - 1);,2,1,0,1,2,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,402,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0,1,0,2,11,1,5,0,1,6,82,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0,0,0,1,2,3,0,1,2,5,61,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,406,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,2,2,1,1,4,0,0,0,1,6,74,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",2,1,0,0,2,0,4,0,1,5,101,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0,0,1,0,4,1,3,0,2,5,83,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,409,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,410,        while (valueToAdd < 0) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,411,"            int min = getMinimumValue(instant, values);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,412,            long proposed = values[fieldIndex] + valueToAdd;,2,1,1,0,2,1,0,0,0,5,48,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,413,            if (proposed >= min) {,2,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,414,                values[fieldIndex] = (int) proposed;,1,0,1,1,4,1,0,0,1,6,36,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,415,                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,417,            if (nextField == null) {,1,1,0,1,3,1,0,0,0,5,24,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,418,                if (fieldIndex == 0) {,1,1,0,1,3,1,0,0,0,5,22,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,419,                    valueToAdd -= (min - 1) - values[fieldIndex];,2,2,1,1,4,0,0,0,1,6,45,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,420,"                    values[fieldIndex] = getMaximumValue(instant, values);",0,0,1,0,4,0,3,0,2,4,54,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,421,                    continue;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,423,                nextField = instant.getField(fieldIndex - 1);,2,1,0,1,2,0,2,0,1,6,45,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,424,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0,1,0,2,11,1,5,0,1,6,82,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0,0,0,1,2,3,0,1,2,5,61,10,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,428,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,2,2,1,1,4,0,0,0,1,6,74,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",2,1,0,0,2,0,4,0,2,5,109,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0,0,1,0,4,1,3,0,2,5,88,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,431,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0,0,1,0,4,1,4,0,1,5,87,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,461,        int current = get(instant);,1,0,0,1,2,1,2,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,462,        int wrapped = FieldUtils.getWrappedValue,1,0,0,0,0,1,2,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,464,"        return set(instant, wrapped);",0,0,0,0,2,1,3,0,1,4,29,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,495,        int current = values[fieldIndex];,1,0,1,0,2,1,0,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,496,        int wrapped = FieldUtils.getWrappedValue,1,0,0,0,0,1,2,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields",0,0,0,0,2,1,5,0,1,4,76,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,75,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,81,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));",0,0,0,0,6,1,9,0,2,4,113,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,586,        values[fieldIndex] = newValue;,1,0,1,0,2,0,0,0,1,4,30,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,589,        for (int i = fieldIndex + 1; i < partial.size(); i++) {,4,2,0,2,5,2,2,0,1,7,55,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,590,            DateTimeField field = partial.getField(i);,1,0,0,1,2,0,3,1,0,5,42,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,591,"            if (values[i] > field.getMaximumValue(partial, values)) {",0,1,1,0,7,1,4,0,0,5,57,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,592,"                values[i] = field.getMaximumValue(partial, values);",0,0,1,0,4,0,4,0,1,4,51,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,594,"            if (values[i] < field.getMinimumValue(partial, values)) {",0,1,1,0,7,1,4,0,0,5,57,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,595,"                values[i] = field.getMinimumValue(partial, values);",0,0,1,0,4,0,4,0,1,4,51,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,598,        return values;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,618,"        int value = convertText(text, locale);",1,0,0,0,2,1,3,0,1,5,38,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,619,"        return set(instant, value);",0,0,0,0,2,1,3,0,1,4,27,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,635,"        return set(instant, text, null);",0,0,0,0,2,1,3,0,1,4,32,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,654,"        int value = convertText(text, locale);",1,0,0,0,2,1,3,0,1,5,38,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,655,"        return set(instant, fieldIndex, values, value);",0,0,0,0,2,1,5,0,1,4,47,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,668,            return Integer.parseInt(text);,0,0,0,1,2,1,3,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,669,        } catch (NumberFormatException ex) {,1,0,0,1,4,1,0,1,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,670,"            throw new IllegalFieldValueException(getType(), text);",1,0,0,1,4,2,1,1,2,7,54,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,704,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,716,        return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,746,        return getMinimumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,792,        return getMaximumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,829,        int max = getMaximumValue();,1,0,0,1,2,1,1,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,830,        if (max >= 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,831,            if (max < 10) {,1,1,0,1,3,1,0,0,0,5,15,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,832,                return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,833,            } else if (max < 100) {,1,1,0,1,4,2,0,0,0,5,23,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,834,                return 2;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,835,            } else if (max < 1000) {,1,1,0,1,4,2,0,0,0,5,24,8,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,836,                return 3;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,839,        return Integer.toString(max).length();,0,0,0,1,4,1,4,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,850,        return getMaximumTextLength(locale);,0,0,0,1,2,1,2,0,1,5,36,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,886,        long newInstant = roundFloor(instant);,1,0,0,1,2,1,2,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,887,        if (newInstant != instant) {,2,1,0,1,3,1,0,0,0,5,28,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,888,"            instant = add(newInstant, 1);",1,0,0,0,2,0,2,0,2,4,29,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,890,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,903,        long floor = roundFloor(instant);,1,0,0,1,2,1,2,0,1,6,33,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,904,        long ceiling = roundCeiling(instant);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,906,        long diffFromFloor = instant - floor;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,907,        long diffToCeiling = ceiling - instant;,3,1,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,909,        if (diffFromFloor <= diffToCeiling) {,2,1,0,1,3,1,0,0,0,5,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,911,            return floor;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,913,            return ceiling;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,927,        long floor = roundFloor(instant);,1,0,0,1,2,1,2,0,1,6,33,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,928,        long ceiling = roundCeiling(instant);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,930,        long diffFromFloor = instant - floor;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,931,        long diffToCeiling = ceiling - instant;,3,1,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,933,        if (diffToCeiling <= diffFromFloor) {,2,1,0,1,3,1,0,0,0,5,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,935,            return ceiling;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,937,            return floor;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,955,        long floor = roundFloor(instant);,1,0,0,1,2,1,2,0,1,6,33,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,956,        long ceiling = roundCeiling(instant);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,958,        long diffFromFloor = instant - floor;,3,1,0,0,0,1,0,0,0,3,37,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,959,        long diffToCeiling = ceiling - instant;,3,1,0,0,0,1,0,0,0,3,39,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,961,        if (diffFromFloor < diffToCeiling) {,2,1,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,963,            return floor;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,964,        } else if (diffToCeiling < diffFromFloor) {,2,1,0,1,4,2,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,966,            return ceiling;,1,0,0,0,0,1,0,0,0,2,15,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,970,            if ((get(ceiling) & 1) == 0) {,0,2,0,3,7,1,2,0,1,6,30,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,971,                return ceiling;,1,0,0,0,0,1,0,0,0,2,15,9,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,973,            return floor;,1,0,0,0,0,1,0,0,0,2,13,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,994,        return instant - roundFloor(instant);,1,1,0,1,2,1,2,0,1,7,37,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDateTimeField,1,1003,"        return ""DateTimeField["" + getName() + ']';",0,1,0,1,4,1,1,0,3,6,42,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,134,            throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,144,            return base.getZone();,0,0,0,1,2,1,2,0,0,4,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,153,        if ((base = getBase()) != null) {,1,1,0,3,7,1,1,0,2,7,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0,0,0,0,2,1,6,0,0,3,74,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,157,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,2,0,0,1,28,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",1,1,0,0,2,1,4,0,1,6,74,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,167,        if ((base = getBase()) != null) {,1,1,0,3,7,1,1,0,2,7,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0,0,0,0,1,1,5,0,0,3,60,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0,0,0,1,4,0,5,0,0,3,78,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0,0,0,1,4,0,5,0,0,3,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0,0,0,1,4,0,5,0,0,3,88,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0,0,0,1,4,0,5,0,0,3,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0,4,0,0,2,1,4,0,1,5,59,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,185,        return iMinDaysInFirstWeek;,1,0,0,0,0,1,0,0,0,2,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,197,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,198,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,200,        if (obj != null && getClass() == obj.getClass()) {,1,3,0,2,7,1,3,0,1,7,50,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,201,            BasicChronology chrono = (BasicChronology) obj;,2,0,0,1,2,0,0,2,0,4,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,202,            return getMinimumDaysInFirstWeek() == chrono.getMinimumDaysInFirstWeek() &&,0,2,0,1,4,1,3,0,1,6,75,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,205,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,215,        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();,0,3,0,1,12,1,6,0,3,6,97,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,226,        StringBuilder sb = new StringBuilder(60);,1,0,0,1,2,1,0,2,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,227,        String name = getClass().getName();,1,0,0,1,4,0,2,1,1,6,35,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,228,        int index = name.lastIndexOf('.');,1,0,0,1,2,1,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,229,        if (index >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,230,            name = name.substring(index + 1);,2,1,0,1,2,0,2,0,1,6,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,232,        sb.append(name);,0,0,0,1,2,0,3,0,0,3,16,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,233,        sb.append('[');,0,0,0,1,3,0,2,0,1,4,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,234,        DateTimeZone zone = getZone();,1,0,0,1,2,0,1,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,235,        if (zone != null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,236,            sb.append(zone.getID());,0,0,0,2,4,0,4,0,0,3,24,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,238,        if (getMinimumDaysInFirstWeek() != 4) {,0,1,0,2,5,1,1,0,1,6,39,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,239,"            sb.append("",mdfw="");",0,0,0,0,2,0,2,0,1,3,20,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,240,            sb.append(getMinimumDaysInFirstWeek());,0,0,0,2,4,0,3,0,1,4,39,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,242,        sb.append(']');,0,0,0,1,3,0,2,0,1,4,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,243,        return sb.toString();,0,0,0,1,2,1,2,0,0,4,21,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,315,        return 366;,0,0,0,0,0,1,0,0,0,1,11,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,325,        return isLeapYear(year) ? 366 : 365;,0,0,0,1,2,1,2,0,1,5,36,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,335,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,1,0,0,1,2,1,2,0,1,6,55,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,336,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,2,1,0,1,2,1,1,0,1,7,59,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,337,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,4,2,0,2,6,2,0,0,0,5,89,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,347,        long jan1millis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,348,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,1,0,0,1,2,1,2,0,1,6,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,350,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,2,2,0,2,5,1,0,0,0,5,48,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,352,            return jan1millis + (8 - jan1dayOfWeek),2,3,0,1,2,1,0,0,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,356,            return jan1millis - (jan1dayOfWeek - 1),2,3,0,1,2,1,0,0,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,368,        return getYearInfo(year).iFirstDayMillis;,1,0,0,1,2,1,2,0,1,6,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,379,        long millis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,380,"        millis += getTotalMillisByYearMonth(year, month);",1,0,0,0,2,0,3,0,2,4,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,381,        return millis;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,393,        long millis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,394,"        millis += getTotalMillisByYearMonth(year, month);",1,0,0,0,2,0,3,0,2,4,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,395,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,4,3,0,1,4,2,0,0,0,5,74,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,407,        long unitMillis = getAverageMillisPerYearDividedByTwo();,1,0,0,1,2,1,1,0,1,6,56,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,408,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,2,2,0,1,4,1,1,0,1,7,64,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,409,        if (i2 < 0) {,1,1,0,1,3,1,0,0,0,5,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,410,            i2 = i2 - unitMillis + 1;,3,2,0,0,0,0,0,0,1,3,25,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,412,        int year = (int) (i2 / unitMillis);,3,1,0,1,4,2,0,0,0,5,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,414,        long yearStart = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,415,        long diff = instant - yearStart;,3,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,417,        if (diff < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,418,            year--;,1,0,0,0,0,0,0,0,1,2,7,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,419,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,3,2,0,1,4,2,0,0,0,5,61,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,422,            if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,423,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,3,1,0,0,0,0,0,0,1,3,50,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,425,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,3,1,0,0,0,0,0,0,1,3,50,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,428,            yearStart += oneYear;,2,0,0,0,0,0,0,0,1,2,21,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,430,            if (yearStart <= instant) {,2,1,0,1,3,1,0,0,0,5,27,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,432,                year++;,1,0,0,0,0,0,0,0,1,2,7,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,436,        return year;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,443,"        return getMonthOfYear(millis, getYear(millis));",0,0,0,1,4,1,4,0,2,5,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,456,        int year = getYear(millis);,1,0,0,1,2,1,2,0,1,6,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,457,"        int month = getMonthOfYear(millis, year);",1,0,0,0,2,1,3,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,458,"        return getDayOfMonth(millis, year, month);",0,0,0,0,2,1,4,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,466,"        int month = getMonthOfYear(millis, year);",1,0,0,0,2,1,3,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,467,"        return getDayOfMonth(millis, year, month);",0,0,0,0,2,1,4,0,1,4,42,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,476,        long dateMillis = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,477,"        dateMillis += getTotalMillisByYearMonth(year, month);",1,0,0,0,2,0,3,0,2,4,53,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,478,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,4,3,0,2,6,2,0,0,0,5,76,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,485,"        return getDayOfYear(instant, getYear(instant));",0,0,0,1,4,1,4,0,2,5,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,493,        long yearStart = getYearMillis(year);,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,494,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,4,3,0,2,6,2,0,0,0,5,76,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,501,        int year = getYear(instant);,1,0,0,1,2,1,2,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,502,"        int week = getWeekOfWeekyear(instant, year);",1,0,0,0,2,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,503,        if (week == 1) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,504,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,3,1,0,1,2,1,1,0,1,7,60,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,505,        } else if (week > 51) {,1,1,0,1,4,2,0,0,0,5,23,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,506,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,3,2,0,2,4,1,1,0,1,7,66,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,508,            return year;,1,0,0,0,0,1,0,0,0,2,12,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,516,"        return getWeekOfWeekyear(instant, getYear(instant));",0,0,0,1,4,1,4,0,2,5,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,524,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,1,0,0,1,2,1,2,0,1,6,55,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,525,        if (instant < firstWeekMillis1) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,526,            return getWeeksInYear(year - 1);,1,1,0,1,2,1,1,0,1,7,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,528,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,2,1,0,1,2,1,1,0,1,7,59,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,529,        if (instant >= firstWeekMillis2) {,2,1,0,1,3,1,0,0,0,5,34,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,530,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,532,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,4,3,0,2,6,2,0,0,0,5,84,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,542,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,543,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,4,1,0,0,0,0,0,0,1,3,63,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,545,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),4,3,0,2,4,0,0,0,1,5,70,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,547,            if (daysSince19700101 < -3) {,1,1,0,1,3,1,0,0,1,6,29,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,548,                return 7 + (int) ((daysSince19700101 + 4) % 7);,1,3,0,2,6,2,0,0,0,5,47,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,552,        return 1 + (int) ((daysSince19700101 + 3) % 7);,1,3,0,2,6,2,0,0,0,5,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,559,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,560,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,3,1,0,1,4,2,0,0,0,5,58,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,562,            return (DateTimeConstants.MILLIS_PER_DAY - 1),2,2,0,1,2,1,0,0,0,5,45,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,573,        return 31;,0,0,0,0,0,1,0,0,0,1,10,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,583,        int thisYear = getYear(instant);,1,0,0,1,2,1,2,0,1,6,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,584,"        int thisMonth = getMonthOfYear(instant, thisYear);",1,0,0,0,2,1,3,0,1,5,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,585,"        return getDaysInYearMonth(thisYear, thisMonth);",0,0,0,0,2,1,3,0,1,4,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,598,        return getDaysInMonthMax(instant);,0,0,0,1,2,1,2,0,1,5,34,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,611,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0,0,0,1,8,0,7,0,2,4,89,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,612,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0,0,0,1,6,0,7,0,1,4,97,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,613,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0,0,0,1,6,0,8,0,1,4,115,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,614,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0,0,0,0,2,1,4,0,1,4,60,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,690,        return getMaxMonth();,0,0,0,1,2,1,1,0,1,5,21,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,746,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,3,1,1,0,2,0,0,1,0,5,50,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,747,        if (info == null || info.iYear != year) {,4,3,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,748,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",2,0,0,1,4,1,2,1,3,7,63,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,749,            iYearInfoCache[year & CACHE_MASK] = info;,3,1,1,0,2,0,0,0,1,5,41,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,751,        return info;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,410,        return getField(chronology).isSupported();,0,0,0,1,4,1,3,0,1,5,42,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,419,        return getName();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,41,public abstract class DateTimeFieldType implements Serializable {,1,0,0,0,1,4,0,1,2,5,65,1,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,60,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,73,        return iChronology.getMonthOfYear(instant);,0,0,0,1,2,1,3,0,0,4,43,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,93,        if (months == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,94,            return instant; // the easy case,1,0,0,0,0,1,0,0,0,2,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,99,        long timePart = iChronology.getMillisOfDay(instant);,1,0,0,1,2,1,3,0,0,5,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,104,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,105,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",1,0,0,0,2,1,4,0,0,4,62,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,113,        int monthToUse = thisMonth - 1 + months;,3,2,0,0,0,1,0,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,114,        if (monthToUse >= 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,115,            yearToUse = thisYear + (monthToUse / iMax);,4,2,0,1,2,0,0,0,1,5,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,116,            monthToUse = (monthToUse % iMax) + 1;,3,2,0,1,2,0,0,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,118,            yearToUse = thisYear + (monthToUse / iMax) - 1;,4,3,0,1,2,0,0,0,1,5,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,119,            monthToUse = Math.abs(monthToUse);,1,0,0,1,2,0,3,0,1,5,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,120,            int remMonthToUse = monthToUse % iMax;,3,1,0,0,0,1,0,0,0,3,38,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,122,            if (remMonthToUse == 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,123,                remMonthToUse = iMax;,2,0,0,0,0,0,0,0,1,2,21,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,125,            monthToUse = iMax - remMonthToUse + 1;,3,2,0,0,0,0,0,0,1,3,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,127,            if (monthToUse == 1) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,128,                yearToUse += 1;,1,0,0,0,0,0,0,0,1,2,15,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,137,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",1,0,0,0,2,1,5,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,138,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",1,0,0,0,2,1,4,0,0,4,67,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,139,        if (dayToUse > maxDay) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,140,            dayToUse = maxDay;,2,0,0,0,0,0,0,0,1,2,18,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,145,        long datePart =,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,147,        return datePart + timePart;,2,1,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,152,        int i_months = (int)months;,2,0,0,1,2,2,0,0,0,4,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,153,        if (i_months == months) {,2,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,154,"            return add(instant, i_months);",0,0,0,0,2,1,3,0,1,4,30,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,159,        long timePart = iChronology.getMillisOfDay(instant);,1,0,0,1,2,1,3,0,0,5,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,161,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,162,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",1,0,0,0,2,1,4,0,0,4,62,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,165,        long monthToUse = thisMonth - 1 + months;,3,2,0,0,0,1,0,0,0,3,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,166,        if (monthToUse >= 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,167,            yearToUse = thisYear + (monthToUse / iMax);,4,2,0,1,2,0,0,0,1,5,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,168,            monthToUse = (monthToUse % iMax) + 1;,3,2,0,1,2,0,0,0,1,5,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,170,            yearToUse = thisYear + (monthToUse / iMax) - 1;,4,3,0,1,2,0,0,0,1,5,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,171,            monthToUse = Math.abs(monthToUse);,1,0,0,1,2,0,3,0,1,5,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,172,            int remMonthToUse = (int)(monthToUse % iMax);,3,1,0,1,4,2,0,0,0,5,45,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,173,            if (remMonthToUse == 0) {,1,1,0,1,3,1,0,0,0,5,25,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,174,                remMonthToUse = iMax;,2,0,0,0,0,0,0,0,1,2,21,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,176,            monthToUse = iMax - remMonthToUse + 1;,3,2,0,0,0,0,0,0,1,3,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,177,            if (monthToUse == 1) {,1,1,0,1,3,1,0,0,0,5,22,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,178,                yearToUse += 1;,1,0,0,0,0,0,0,0,1,2,15,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,182,        if (yearToUse < iChronology.getMinYear() ||,1,2,0,1,3,1,2,0,0,6,43,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,185,            throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,189,        int i_yearToUse = (int)yearToUse;,2,0,0,1,2,2,0,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,190,        int i_monthToUse = (int)monthToUse;,2,0,0,1,2,2,0,0,0,4,35,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,192,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",1,0,0,0,2,1,5,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,193,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);",1,0,0,0,2,1,4,0,0,4,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,194,        if (dayToUse > maxDay) {,2,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,195,            dayToUse = maxDay;,2,0,0,0,0,0,0,0,1,2,18,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,198,        long datePart =,1,0,0,0,0,1,0,0,0,2,15,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,200,        return datePart + timePart;,2,1,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,207,        if (valueToAdd == 0) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,208,            return values;,1,0,0,0,0,1,0,0,0,2,14,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,210,        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {,1,4,0,3,11,1,7,0,0,6,111,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,212,            int curMonth0 = partial.getValue(0) - 1;,1,1,0,1,2,1,2,0,0,6,40,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,213,            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;,3,4,0,3,6,1,0,0,0,5,63,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,214,"            return set(partial, 0, values, newMonth);",0,0,0,0,2,1,4,0,1,4,41,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,216,        if (DateTimeUtils.isContiguous(partial)) {,0,0,0,2,5,1,3,0,0,4,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,217,            long instant = 0L;,1,0,0,0,0,1,0,0,0,2,18,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,218,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",5,1,0,1,5,2,2,0,1,7,57,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,219,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",1,0,1,1,8,0,7,0,1,6,80,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,221,"            instant = add(instant, valueToAdd);",1,0,0,0,2,0,3,0,2,4,35,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,222,"            return iChronology.get(partial, instant);",0,0,0,0,2,1,4,0,0,3,41,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,224,"            return super.add(partial, fieldIndex, values, valueToAdd);",5,0,0,0,2,2,0,0,0,3,58,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,239,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));",0,0,0,1,6,1,9,0,2,5,81,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,244,        if (minuendInstant < subtrahendInstant) {,2,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,245,"            return -getDifference(subtrahendInstant, minuendInstant);",0,0,0,0,2,1,3,0,2,4,57,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,248,        int minuendYear = iChronology.getYear(minuendInstant);,1,0,0,1,2,1,3,0,0,5,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,249,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",1,0,0,0,2,1,4,0,0,4,75,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,250,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,1,0,0,1,2,1,3,0,0,5,60,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,251,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",1,0,0,0,2,1,4,0,0,4,84,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,253,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,6,4,0,2,6,2,0,0,0,5,98,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,257,        int minuendDom = iChronology.getDayOfMonth,1,0,0,0,0,1,2,0,0,3,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,259,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",1,1,0,0,5,1,4,0,0,5,78,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,261,            int subtrahendDom = iChronology.getDayOfMonth,1,0,0,0,0,1,2,0,0,3,45,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,263,            if (subtrahendDom > minuendDom) {,2,1,0,1,3,1,0,0,0,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,267,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);",1,0,0,1,4,0,5,0,1,5,80,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,272,        long minuendRem = minuendInstant,2,1,0,0,0,1,0,0,0,3,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,274,        long subtrahendRem = subtrahendInstant,2,1,0,0,0,1,0,0,0,3,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,277,        if (minuendRem < subtrahendRem) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,278,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,281,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,299,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0,0,0,0,2,1,5,0,0,3,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,301,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,303,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",1,0,0,0,2,1,4,0,0,4,59,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,304,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",1,0,0,0,2,1,4,0,0,4,61,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,305,        if (thisDom > maxDom) {,2,1,0,1,3,1,0,0,0,5,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,307,            thisDom = maxDom;,2,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,310,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0,1,0,0,2,1,5,0,0,4,68,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,321,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,322,        if (iChronology.isLeapYear(thisYear)) {,0,0,0,2,5,1,3,0,0,4,39,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,323,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);",1,1,0,0,4,1,4,0,0,5,69,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,325,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,330,        return isLeap(instant) ? 1 : 0;,0,0,0,1,2,1,2,0,1,5,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,350,        int year = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,351,"        int month = iChronology.getMonthOfYear(instant, year);",1,0,0,0,2,1,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,352,"        return iChronology.getYearMonthMillis(year, month);",0,0,0,0,2,1,4,0,0,3,51,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,357,        return instant - roundFloor(instant);,1,1,0,1,2,1,2,0,1,7,37,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicMonthOfYearDateTimeField,1,365,        return iChronology.monthOfYear();,0,0,0,1,2,1,2,0,0,4,33,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,92,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,0,4,1,5,0,1,4,84,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,119,        if (minuendInstant < subtrahendInstant) {,2,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,120,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);",0,0,0,0,2,1,3,0,2,4,63,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,123,        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;,4,2,0,1,2,1,0,0,0,5,69,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,124,"        if (add(subtrahendInstant, difference) < minuendInstant) {",1,1,0,0,5,1,3,0,1,6,58,4,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,126,                difference++;,1,0,0,0,0,0,0,0,1,2,13,8,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,127,"            } while (add(subtrahendInstant, difference) <= minuendInstant);",1,1,0,0,5,1,3,0,1,6,63,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,128,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,129,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {",1,1,0,0,6,2,3,0,1,6,65,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,131,                difference--;,1,0,0,0,0,0,0,0,1,2,13,9,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,132,"            } while (add(subtrahendInstant, difference) > minuendInstant);",1,1,0,0,5,1,3,0,1,6,62,7,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,134,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,146,        return iUnitMillis;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,157,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,165,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,170,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,175,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",2,1,0,0,2,2,3,0,0,5,65,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,179,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",2,1,0,0,2,2,3,0,0,5,65,5,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,183,"            return ImpreciseDateTimeField.this.add(instant, value);",1,0,0,0,2,2,3,0,0,4,55,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,187,"            return ImpreciseDateTimeField.this.add(instant, value);",1,0,0,0,2,2,3,0,0,4,55,6,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,191,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,0.0,0,0
defect4j,time,org/joda/time/field/ImpreciseDateTimeField,1,196,            return ImpreciseDateTimeField.this,1,0,0,0,0,1,0,0,0,2,34,7,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,49,"            throw new IllegalArgumentException(""The type must not be null"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,59,        return iType.getName();,0,0,0,1,2,1,2,0,0,4,23,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,79,        return FieldUtils.safeToInt(getValueAsLong(duration));,0,0,0,2,4,1,4,0,1,5,54,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,91,        return duration / getUnitMillis();,1,1,0,1,2,1,1,0,1,7,34,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));",0,0,0,0,4,1,5,0,1,4,63,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,123,        return value * getUnitMillis();  // safe,1,1,0,1,2,1,1,0,1,7,40,4,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());",0,0,0,1,4,1,4,0,1,5,55,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0,0,0,0,4,1,5,0,1,4,84,5,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,150,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/BaseDurationField,1,165,"        return ""DurationField["" + getName() + ']';",0,1,0,1,4,1,1,0,3,6,42,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,57,        int year = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,58,        return year < 0 ? -year : year;,3,1,0,0,0,1,0,0,1,4,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,62,"        return getWrappedField().add(instant, years);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,66,"        return getWrappedField().add(instant, years);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,70,"        return getWrappedField().addWrapField(instant, years);",0,0,0,1,4,1,4,0,1,5,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,74,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0,0,0,1,4,1,6,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,78,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,82,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,80,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,86,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());",0,0,0,1,4,1,4,0,1,5,63,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,87,        if (getWrappedField().get(instant) < 0) {,0,1,0,2,7,1,3,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,88,            year = -year;,2,0,0,0,0,0,0,0,2,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,90,"        return super.set(instant, year);",3,0,0,0,2,2,0,0,0,3,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,102,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,106,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,110,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOYearOfEraDateTimeField,1,117,        return INSTANCE;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,1,57,"            throw new IllegalArgumentException(""The field must not be null"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,1,60,"            throw new IllegalArgumentException(""The field must be supported"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,1,75,        return iField.isLenient();,0,0,0,1,2,1,2,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,1,79,        return iField.get(instant);,0,0,0,1,2,1,3,0,0,4,27,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,1,83,"        return iField.set(instant, value);",0,0,0,0,2,1,4,0,0,3,34,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,1,95,        return iField.getMinimumValue();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,1,99,        return iField.getMaximumValue();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDateTimeField,1,103,        return iField.roundFloor(instant);,0,0,0,1,2,1,3,0,0,4,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,1,57,        return iChronology.getDayOfWeek(instant);,0,0,0,1,2,1,3,0,0,4,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,1,68,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);,0,0,0,1,4,1,5,0,0,4,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,1,79,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);,0,0,0,1,4,1,5,0,0,4,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,1,91,        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);,0,0,0,1,4,1,5,0,0,4,68,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,1,104,        return DateTimeConstants.MONDAY;,2,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,1,113,        return DateTimeConstants.SUNDAY;,2,0,0,0,0,1,0,0,0,2,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,1,123,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();,0,0,0,1,4,1,4,0,0,4,69,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,1,133,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();,0,0,0,1,4,1,4,0,0,4,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJDayOfWeekDateTimeField,1,140,        return iChronology.dayOfWeek();,0,0,0,1,2,1,2,0,0,4,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,225,        Stub(DateTimeZone zone) {,2,0,0,1,3,0,0,1,0,4,25,3,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,226,            iZone = zone;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,227,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,230,            return ISOChronology.getInstance(iZone);,0,0,0,1,2,1,3,0,0,4,40,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,234,            out.writeObject(iZone);,0,0,0,1,2,0,3,0,0,3,23,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,235,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,240,            iZone = (DateTimeZone)in.readObject();,1,0,0,1,4,0,2,1,1,6,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ISOChronology,1,241,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,406,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,417,            return iField.isLenient();,0,0,0,1,2,1,2,0,0,4,26,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,421,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,422,            return iField.get(localInstant);,0,0,0,1,2,1,3,0,0,4,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,426,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,427,"            return iField.getAsText(localInstant, locale);",0,0,0,0,2,1,4,0,0,3,46,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,431,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,432,"            return iField.getAsShortText(localInstant, locale);",0,0,0,0,2,1,4,0,0,3,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,436,"            return iField.getAsText(fieldValue, locale);",0,0,0,0,2,1,4,0,0,3,44,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,440,"            return iField.getAsShortText(fieldValue, locale);",0,0,0,0,2,1,4,0,0,3,49,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,444,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,445,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,446,"                long localInstant = iField.add(instant + offset, value);",3,1,0,0,2,1,3,0,0,5,56,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,447,                return localInstant - offset;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,449,               long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,450,"               localInstant = iField.add(localInstant, value);",1,0,0,0,2,0,4,0,1,4,47,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,451,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,456,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,457,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,458,"                long localInstant = iField.add(instant + offset, value);",3,1,0,0,2,1,3,0,0,5,56,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,459,                return localInstant - offset;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,461,               long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,462,"               localInstant = iField.add(localInstant, value);",1,0,0,0,2,0,4,0,1,4,47,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,463,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,468,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,469,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,470,"                long localInstant = iField.addWrapField(instant + offset, value);",3,1,0,0,2,1,3,0,0,5,65,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,471,                return localInstant - offset;,2,1,0,0,0,1,0,0,0,3,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,473,                long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,474,"                localInstant = iField.addWrapField(localInstant, value);",1,0,0,0,2,0,4,0,1,4,56,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,475,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,480,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,481,"            localInstant = iField.set(localInstant, value);",1,0,0,0,2,0,4,0,1,4,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,482,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",1,0,0,0,2,1,4,0,1,5,68,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,483,            if (get(result) != value) {,1,1,0,2,5,1,2,0,1,7,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,484,"                IllegalInstantException cause = new IllegalInstantException(localInstant,  iZone.getID());",2,0,0,1,4,1,2,2,1,7,90,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,485,"                IllegalFieldValueException ex = new IllegalFieldValueException(iField.getType(), Integer.valueOf(value), cause.getMessage());",1,0,0,1,8,1,7,2,1,7,125,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,486,                ex.initCause(cause);,0,0,0,1,2,0,3,0,0,3,20,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,487,                throw ex;,1,0,0,0,0,1,0,0,0,2,9,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,489,            return result;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,494,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,495,"            localInstant = iField.set(localInstant, text, locale);",1,0,0,0,2,0,5,0,1,4,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,496,"            return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,500,            int offset = getOffsetToAdd(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,501,            return iField.getDifference,0,0,0,0,0,1,2,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,507,            int offset = getOffsetToAdd(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,508,            return iField.getDifferenceAsLong,0,0,0,0,0,1,2,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,514,            return iDurationField;,1,0,0,0,0,1,0,0,0,2,22,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,518,            return iRangeDurationField;,1,0,0,0,0,1,0,0,0,2,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,522,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,523,            return iField.isLeap(localInstant);,0,0,0,1,2,1,3,0,0,4,35,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,527,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,528,            return iField.getLeapAmount(localInstant);,0,0,0,1,2,1,3,0,0,4,42,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,532,            return iLeapDurationField;,1,0,0,0,0,1,0,0,0,2,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,536,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,537,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,538,                instant = iField.roundFloor(instant + offset);,3,1,0,1,2,0,2,0,1,6,46,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,539,                return instant - offset;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,541,                long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,542,                localInstant = iField.roundFloor(localInstant);,1,0,0,1,2,0,3,0,1,5,47,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,543,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,548,            if (iTimeField) {,1,0,0,1,3,1,0,0,0,4,17,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,549,                int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,550,                instant = iField.roundCeiling(instant + offset);,3,1,0,1,2,0,2,0,1,6,48,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,551,                return instant - offset;,2,1,0,0,0,1,0,0,0,3,24,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,553,                long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,554,                localInstant = iField.roundCeiling(localInstant);,1,0,0,1,2,0,3,0,1,5,49,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,555,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0,0,0,0,2,1,4,0,1,4,61,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,560,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,561,            return iField.remainder(localInstant);,0,0,0,1,2,1,3,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,565,            return iField.getMinimumValue();,0,0,0,1,2,1,2,0,0,4,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,569,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,570,            return iField.getMinimumValue(localInstant);,0,0,0,1,2,1,3,0,0,4,44,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,574,            return iField.getMinimumValue(instant);,0,0,0,1,2,1,3,0,0,4,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,578,"            return iField.getMinimumValue(instant, values);",0,0,0,0,2,1,4,0,0,3,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,582,            return iField.getMaximumValue();,0,0,0,1,2,1,2,0,0,4,32,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,586,            long localInstant = iZone.convertUTCToLocal(instant);,1,0,0,1,2,1,3,0,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,587,            return iField.getMaximumValue(localInstant);,0,0,0,1,2,1,3,0,0,4,44,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,591,            return iField.getMaximumValue(instant);,0,0,0,1,2,1,3,0,0,4,39,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,595,"            return iField.getMaximumValue(instant, values);",0,0,0,0,2,1,4,0,0,3,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,599,            return iField.getMaximumTextLength(locale);,0,0,0,1,2,1,3,0,0,4,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,603,            return iField.getMaximumShortTextLength(locale);,0,0,0,1,2,1,3,0,0,4,48,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,607,            int offset = this.iZone.getOffset(instant);,2,0,0,1,2,2,2,0,0,5,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,608,            long sum = instant + offset;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,610,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,4,5,0,2,7,1,0,0,0,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,611,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,73,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,613,            return offset;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,618,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,619,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,620,            } else if (obj instanceof ZonedDateTimeField) {,1,0,0,1,4,3,0,1,0,5,47,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,621,                ZonedDateTimeField other = (ZonedDateTimeField) obj;,2,0,0,1,2,0,0,2,0,4,52,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,622,                return iField.equals(other.iField) &&,2,1,0,1,2,1,2,0,0,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,627,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,632,            return iField.hashCode() ^ iZone.hashCode();,0,1,0,1,4,1,4,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,56,"            throw new IllegalArgumentException(""Must supply a chronology"");",0,0,0,1,2,2,0,1,2,5,63,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,60,"            throw new IllegalArgumentException(""UTC chronology must not be null"");",0,0,0,1,2,2,0,1,2,5,70,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,63,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");",0,0,0,1,2,2,0,1,2,5,68,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,89,        return getBase();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,93,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,94,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,96,        if (zone == getParam()) {,1,1,0,2,5,1,1,0,1,7,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,97,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,99,        if (zone == DateTimeZone.UTC) {,3,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,100,            return getBase();,0,0,0,1,2,1,1,0,1,5,17,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,102,"        return new ZonedChronology(getBase(), zone);",1,0,0,1,4,2,1,1,2,7,44,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,109,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,3,0,2,5,45,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,118,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,3,0,2,5,45,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,128,        return localToUTC(getBase().getDateTimeMillis,0,0,0,1,3,1,3,0,2,5,45,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,138,        DateTimeZone zone = getZone();,1,0,0,1,2,0,1,1,1,6,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,139,        int offset = zone.getOffsetFromLocal(localInstant);,1,0,0,1,2,1,3,0,0,5,51,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,140,        localInstant -= offset;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,141,        if (offset != zone.getOffset(localInstant)) {,1,1,0,2,5,1,3,0,0,6,45,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,142,"            throw new IllegalInstantException(localInstant, zone.getID());",1,0,0,1,4,2,2,1,1,7,62,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,144,        return localInstant;,1,0,0,0,0,1,0,0,0,2,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,210,            return field;,1,0,0,0,0,1,0,0,0,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,213,            return (DateTimeField)converted.get(field);,0,0,0,1,4,1,3,1,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,234,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,235,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,237,        if (obj instanceof ZonedChronology == false) {,1,1,0,1,3,2,0,1,1,7,46,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,238,            return false;,0,0,0,0,0,1,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,240,        ZonedChronology chrono = (ZonedChronology) obj;,2,0,0,1,2,0,0,2,0,4,47,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,241,        return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,253,        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;,0,4,0,1,8,1,4,0,2,6,69,4,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,262,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';",0,1,0,1,8,1,3,0,5,6,71,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,779,"        YearInfo(int year, long firstDayMillis) {",3,0,0,0,3,2,0,0,0,3,41,3,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,780,            iYear = year;,2,0,0,0,0,0,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,781,            iFirstDayMillis = firstDayMillis;,2,0,0,0,0,0,0,0,1,2,33,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,782,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,48,        return iChronology.getDayOfMonth(instant);,0,0,0,1,2,1,3,0,0,4,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,56,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,60,        return iChronology.getDaysInMonthMax();,0,0,0,1,2,1,2,0,0,4,39,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,64,        return iChronology.getDaysInMonthMax(instant);,0,0,0,1,2,1,3,0,0,4,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,68,        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {,0,0,0,3,7,1,4,0,0,4,59,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,69,            int month = partial.get(DateTimeFieldType.monthOfYear());,1,0,0,2,4,1,4,0,0,5,57,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,70,            if (partial.isSupported(DateTimeFieldType.year())) {,0,0,0,3,7,1,4,0,0,4,52,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,71,                int year = partial.get(DateTimeFieldType.year());,1,0,0,2,4,1,4,0,0,5,49,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,72,"                return iChronology.getDaysInYearMonth(year, month);",0,0,0,0,2,1,4,0,0,3,51,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,74,            return iChronology.getDaysInMonthMax(month);,0,0,0,1,2,1,3,0,0,4,44,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,76,        return getMaximumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,80,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,81,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,82,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0,1,0,2,7,1,5,0,0,5,65,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,83,                int month = values[i];,1,0,1,0,2,1,0,0,0,4,22,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,84,                for (int j = 0; j < size; j++) {,4,1,0,1,3,2,0,0,1,6,32,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,85,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0,1,0,2,7,1,5,0,0,5,58,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,86,                        int year = values[j];,1,0,1,0,2,1,0,0,0,4,21,13,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,87,"                        return iChronology.getDaysInYearMonth(year, month);",0,0,0,0,2,1,4,0,0,3,51,13,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,90,                return iChronology.getDaysInMonthMax(month);,0,0,0,1,2,1,3,0,0,4,44,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,93,        return getMaximumValue();,0,0,0,1,2,1,1,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,97,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0,0,0,0,2,1,4,0,0,3,59,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfMonthDateTimeField,1,104,        return iChronology.dayOfMonth();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,90,"        return getInstance(DateTimeZone.getDefault(), 4);",0,0,0,1,4,1,3,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,112,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,123,            } catch (ArrayIndexOutOfBoundsException e) {,1,0,0,1,4,1,0,1,0,5,44,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,124,                throw new IllegalArgumentException,0,0,0,0,0,2,0,1,1,3,34,9,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,155,        Chronology base = getBase();,1,0,0,1,2,0,1,1,1,6,28,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,156,        int minDays = getMinimumDaysInFirstWeek();,1,0,0,1,2,1,1,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,157,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,3,1,0,1,2,0,0,0,1,5,77,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,158,        return base == null ?,1,1,0,0,0,1,0,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,181,        if (zone == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,182,            zone = DateTimeZone.getDefault();,1,0,0,1,2,0,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,184,        if (zone == getZone()) {,1,1,0,2,5,1,1,0,1,7,24,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,185,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,187,        return getInstance(zone);,0,0,0,1,2,1,2,0,1,5,25,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,3,8,0,2,10,1,0,0,0,5,69,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,202,        int leapYears = year / 100;,2,1,0,0,0,1,0,0,0,3,27,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,203,        if (year < 0) {,1,1,0,1,3,1,0,0,0,5,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,4,7,0,2,8,0,0,0,1,5,71,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,4,4,0,1,4,0,0,0,1,5,55,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,212,            if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,213,                leapYears--;,1,0,0,0,0,0,0,0,1,2,12,8,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,5,4,0,2,4,1,0,0,0,5,90,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,233,        return MILLIS_PER_YEAR / 2;,1,1,0,0,0,1,0,0,0,3,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GregorianChronology,1,241,        return (1970L * MILLIS_PER_YEAR) / 2;,1,2,0,1,2,1,0,0,0,5,37,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,2,2,0,3,8,2,2,0,1,7,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,93,        return,0,0,0,0,0,0,0,0,0,0,6,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,120,        if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,43,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,134,        return ((value > 28 || value < 1) ? getDaysInMonthMax(instant) : 28);,2,3,0,2,6,1,2,0,1,7,69,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,139,        if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,1,1,1,0,2,1,0,0,0,5,50,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,148,        int minuendYear = getYear(minuendInstant);,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,149,        int subtrahendYear = getYear(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,2,1,0,1,2,1,2,0,1,7,62,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,153,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,2,1,0,1,2,1,2,0,1,7,71,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,156,        if (subtrahendRem >= FEB_29) {,2,1,0,1,3,1,0,0,0,5,30,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,157,            if (isLeapYear(subtrahendYear)) {,0,0,0,2,5,1,2,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,158,                if (!isLeapYear(minuendYear)) {,0,0,0,2,5,1,2,0,2,5,31,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,159,                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;,3,0,0,0,0,0,0,0,1,2,50,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,2,2,0,2,6,2,2,0,1,7,61,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,162,                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;,3,0,0,0,0,0,0,0,1,2,47,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,166,        int difference = minuendYear - subtrahendYear;,3,1,0,0,0,1,0,0,0,3,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,167,        if (minuendRem < subtrahendRem) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,168,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,170,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,175,        int thisYear = getYear(instant);,1,0,0,1,2,1,2,0,1,6,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",1,0,0,0,2,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,177,        int millisOfDay = getMillisOfDay(instant);,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,1,2,0,2,5,1,0,0,0,5,44,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,180,            if (isLeapYear(thisYear)) {,0,0,0,2,5,1,2,0,1,5,27,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,182,                if (!isLeapYear(year)) {,0,0,0,2,5,1,2,0,2,5,24,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,184,                    dayOfYear--;,1,0,0,0,0,0,0,0,1,2,12,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,188,                if (isLeapYear(year)) {,0,0,0,2,5,1,2,0,1,5,23,8,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,190,                    dayOfYear++;,1,0,0,0,0,0,0,0,1,2,12,10,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",1,0,0,0,2,0,3,0,2,4,52,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,196,        instant += millisOfDay;,2,0,0,0,0,0,0,0,1,2,23,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicGJChronology,1,198,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,76,        return duration / iUnitMillis;  // safe,2,1,0,0,0,1,0,0,0,3,39,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,88,        return value * iUnitMillis;  // safe,2,1,0,0,0,1,0,0,0,3,36,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);",0,0,0,0,2,1,4,0,0,3,51,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,104,        long addition = value * iUnitMillis;  // safe,3,1,0,0,0,1,0,0,0,3,45,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,105,"        return FieldUtils.safeAdd(instant, addition);",0,0,0,0,2,1,4,0,0,3,45,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);",1,0,0,0,2,1,4,0,0,4,60,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,110,"        return FieldUtils.safeAdd(instant, addition);",0,0,0,0,2,1,4,0,0,3,45,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",1,0,0,0,2,1,4,0,0,4,77,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,115,        return difference / iUnitMillis;,2,1,0,0,0,1,0,0,0,3,32,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,127,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,128,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,129,        } else if (obj instanceof PreciseDurationField) {,1,0,0,1,4,3,0,1,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,130,            PreciseDurationField other = (PreciseDurationField) obj;,2,0,0,1,2,0,0,2,0,4,56,7,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,131,            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);,3,3,0,2,8,1,3,0,1,7,76,7,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDurationField,1,133,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,61,"            throw new IllegalArgumentException(""Range duration field must be precise"");",0,0,0,1,2,2,0,1,2,5,75,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,67,"            throw new IllegalArgumentException(""The effective range must be at least 2"");",0,0,0,1,2,2,0,1,2,5,77,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,80,        if (instant >= 0) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,81,            return (int) ((instant / getUnitMillis()) % iRange);,2,2,0,3,8,2,1,0,1,7,52,8,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,83,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,3,5,0,3,10,2,1,0,1,7,71,6,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,96,        int thisValue = get(instant);,1,0,0,1,2,1,2,0,1,6,29,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,97,        int wrappedValue = FieldUtils.getWrappedValue,1,0,0,0,0,1,2,0,0,3,45,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,100,        return instant + (wrappedValue - thisValue) * getUnitMillis();,3,3,0,1,4,1,1,0,1,7,62,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,112,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0,0,0,1,6,1,5,0,2,5,80,5,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,113,        return instant + (value - get(instant)) * iUnitMillis;,3,3,0,2,4,1,2,0,1,7,54,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,132,        return iRange - 1;,1,1,0,0,0,1,0,0,0,3,18,4,0.0,0,0
defect4j,time,org/joda/time/field/PreciseDateTimeField,1,144,        return iRange;,1,0,0,0,0,1,0,0,0,2,14,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,48,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");",0,0,0,1,2,2,0,1,2,5,81,6,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,53,        int value = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,43,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,54,        if (value == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,55,            value = getMaximumValue();,1,0,0,1,2,0,1,0,2,5,26,6,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,57,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,61,"        return getWrappedField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,65,"        return getWrappedField().add(instant, value);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,69,"        return getWrappedField().addWrapField(instant, value);",0,0,0,1,4,1,4,0,1,5,54,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,73,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);",0,0,0,1,4,1,6,0,1,5,79,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,77,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,81,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,80,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,85,        int max = getMaximumValue();,1,0,0,1,2,1,1,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,86,"        FieldUtils.verifyValueBounds(this, value, 1, max);",0,0,0,0,2,1,4,0,0,3,50,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,87,        if (value == max) {,2,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,88,            value = 0;,1,0,0,0,0,0,0,0,1,2,10,6,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,90,"        return getWrappedField().set(instant, value);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,94,        return getWrappedField().isLeap(instant);,0,0,0,1,4,1,3,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,98,        return getWrappedField().getLeapAmount(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,111,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,120,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,129,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,138,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,148,        return getWrappedField().getMaximumValue() + 1;,0,1,0,1,4,1,2,0,1,6,47,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,158,        return getWrappedField().getMaximumValue(instant) + 1;,0,1,0,1,4,1,3,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,168,        return getWrappedField().getMaximumValue(instant) + 1;,0,1,0,1,4,1,3,0,1,6,54,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,178,"        return getWrappedField().getMaximumValue(instant, values) + 1;",0,1,0,1,4,1,4,0,1,6,62,4,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,182,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,186,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,190,        return getWrappedField().roundHalfFloor(instant);,0,0,0,1,4,1,3,0,1,5,49,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,194,        return getWrappedField().roundHalfCeiling(instant);,0,0,0,1,4,1,3,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,198,        return getWrappedField().roundHalfEven(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ZeroIsMaxDateTimeField,1,202,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,763,            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);,0,0,0,1,4,1,5,0,0,4,72,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,767,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));",0,0,0,1,6,1,7,0,1,5,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicChronology,1,771,            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();,0,0,0,1,4,1,4,0,0,4,67,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,51,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,55,        return iChronology.getYear(instant);,0,0,0,1,2,1,3,0,0,4,36,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,59,        if (years == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,60,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,62,        int thisYear = get(instant);,1,0,0,1,2,1,2,0,1,6,28,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,63,"        int newYear = FieldUtils.safeAdd(thisYear, years);",1,0,0,0,2,1,4,0,0,4,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,64,"        return set(instant, newYear);",0,0,0,0,2,1,3,0,1,4,29,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,68,"        return add(instant, FieldUtils.safeToInt(years));",0,0,0,1,4,1,5,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,72,        if (years == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,73,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,76,        int thisYear = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,77,        int wrappedYear = FieldUtils.getWrappedValue,1,0,0,0,0,1,2,0,0,3,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,79,"        return set(instant, wrappedYear);",0,0,0,0,2,1,3,0,1,4,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,83,        FieldUtils.verifyValueBounds,0,0,0,0,0,0,2,0,0,1,28,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,85,"        return iChronology.setYear(instant, year);",0,0,0,0,2,1,4,0,0,3,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,89,        if (minuendInstant < subtrahendInstant) {,2,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,90,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);",0,0,0,0,2,1,4,0,1,4,73,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,92,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,72,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,100,        return iChronology.isLeapYear(get(instant));,0,0,0,2,4,1,4,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,104,        if (iChronology.isLeapYear(get(instant))) {,0,0,0,3,7,1,4,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,105,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,107,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,124,        return iChronology.getYearMillis(get(instant));,0,0,0,2,4,1,4,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,128,        int year = get(instant);,1,0,0,1,2,1,2,0,1,6,24,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,129,        long yearStartMillis = iChronology.getYearMillis(year);,1,0,0,1,2,1,3,0,0,5,55,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,130,        if (instant != yearStartMillis) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,132,            instant = iChronology.getYearMillis(year + 1);,2,1,0,1,2,0,2,0,1,6,46,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,134,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,138,        return instant - roundFloor(instant);,1,1,0,1,2,1,2,0,1,7,37,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicYearDateTimeField,1,145,        return iChronology.year();,0,0,0,1,2,1,2,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,52,        int year = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,53,        if (year <= 0) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,54,            year = 1 - year;,2,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,56,        return year;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,60,"        return getWrappedField().add(instant, years);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,64,"        return getWrappedField().add(instant, years);",0,0,0,1,4,1,4,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,68,"        return getWrappedField().addWrapField(instant, years);",0,0,0,1,4,1,4,0,1,5,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0,0,0,1,4,1,6,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,74,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,1,4,1,4,0,1,5,80,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,92,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());",0,0,0,1,4,1,4,0,1,5,63,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,93,        if (iChronology.getYear(instant) <= 0) {,0,1,0,2,5,1,3,0,0,5,40,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,94,            year = 1 - year;,2,1,0,0,0,0,0,0,1,3,16,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,96,"        return super.set(instant, year);",3,0,0,0,2,2,0,0,0,3,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,108,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,112,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,116,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJYearOfEraDateTimeField,1,123,        return iChronology.yearOfEra();,0,0,0,1,2,1,2,0,0,4,31,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,77,"            throw new IllegalArgumentException(""The offset cannot be zero"");",0,0,0,1,2,2,0,1,2,5,64,6,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,85,            iMin = minValue;,2,0,0,0,0,0,0,0,1,2,16,6,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,90,            iMax = maxValue;,2,0,0,0,0,0,0,0,1,2,16,6,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,101,        return super.get(instant) + iOffset;,3,1,0,1,2,2,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,113,"        instant = super.add(instant, amount);",4,0,0,0,2,1,0,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,114,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0,0,0,1,4,1,6,0,1,5,61,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,115,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,127,"        instant = super.add(instant, amount);",4,0,0,0,2,1,0,0,1,4,37,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,128,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0,0,0,1,4,1,6,0,1,5,61,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,129,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,141,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0,0,0,1,6,1,9,0,2,5,82,4,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,153,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0,0,0,0,2,1,5,0,0,3,54,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,154,"        return super.set(instant, value - iOffset);",4,1,0,0,2,2,0,0,0,4,43,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,158,        return getWrappedField().isLeap(instant);,0,0,0,1,4,1,3,0,1,5,41,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,162,        return getWrappedField().getLeapAmount(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,188,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,192,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,196,        return getWrappedField().roundHalfFloor(instant);,0,0,0,1,4,1,3,0,1,5,49,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,200,        return getWrappedField().roundHalfCeiling(instant);,0,0,0,1,4,1,3,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,204,        return getWrappedField().roundHalfEven(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,208,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/field/OffsetDateTimeField,1,217,        return iOffset;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,74,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0,0,0,1,2,2,0,1,2,5,69,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,78,            iDurationField = null;,1,0,0,0,0,0,0,0,1,2,22,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,101,"        this(remainderField, null, type);",2,0,0,0,2,1,0,0,0,3,33,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,102,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,113,"        super(remainderField.getWrappedField(), type);",1,0,0,1,4,1,2,0,1,6,46,3,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,114,        int divisor = iDivisor = remainderField.iDivisor;,4,0,0,0,0,1,0,0,1,3,49,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,115,        iDurationField = remainderField.iRangeField;,3,0,0,0,0,0,0,0,1,2,44,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,116,        iRangeDurationField = rangeField;,2,0,0,0,0,0,0,0,1,2,33,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,117,        DateTimeField field = getWrappedField();,1,0,0,1,2,0,1,1,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,118,        int i = field.getMinimumValue();,1,0,0,1,2,1,2,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,119,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,6,5,0,2,6,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,120,        int j = field.getMaximumValue();,1,0,0,1,2,1,2,0,0,5,32,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,121,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,6,5,0,2,6,1,0,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,122,        iMin = min;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,123,        iMax = max;,2,0,0,0,0,0,0,0,1,2,11,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,124,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,141,        int value = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,43,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,142,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,143,            return value / iDivisor;,2,1,0,0,0,1,0,0,0,3,24,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,145,            return ((value + 1) / iDivisor) - 1;,2,3,0,2,4,1,0,0,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,158,"        return getWrappedField().add(instant, amount * iDivisor);",2,1,0,1,4,1,3,0,1,7,57,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,170,"        return getWrappedField().add(instant, amount * iDivisor);",2,1,0,1,4,1,3,0,1,7,57,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,182,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0,0,0,1,6,1,9,0,2,5,82,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,186,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;",1,1,0,1,4,1,4,0,1,7,85,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,190,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;",1,1,0,1,4,1,4,0,1,7,91,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,202,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0,0,0,0,2,1,5,0,0,3,54,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,203,        int remainder = getRemainder(getWrappedField().get(instant));,1,0,0,2,6,1,4,0,2,6,61,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,204,"        return getWrappedField().set(instant, value * iDivisor + remainder);",3,2,0,1,4,1,3,0,1,7,68,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,220,        return iMin;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,229,        return iMax;,1,0,0,0,0,1,0,0,0,2,12,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,233,        DateTimeField field = getWrappedField();,1,0,0,1,2,0,1,1,1,6,40,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,234,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));",1,1,0,1,6,1,7,0,1,7,69,5,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,238,"        return set(instant, get(getWrappedField().remainder(instant)));",0,0,0,2,8,1,6,0,3,5,63,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,247,        return iDivisor;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,251,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,252,            return value % iDivisor;,2,1,0,0,0,1,0,0,0,3,24,6,0.0,0,0
defect4j,time,org/joda/time/field/DividedDateTimeField,1,254,            return (iDivisor - 1) + ((value + 1) % iDivisor);,3,4,0,2,6,1,0,0,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,54,"        super(field, type);",2,0,0,0,2,1,0,0,1,4,19,3,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,56,        if (divisor < 2) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,57,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0,0,0,1,2,2,0,1,2,5,69,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,60,        DurationField rangeField = field.getDurationField();,1,0,0,1,2,0,2,1,0,5,52,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,61,        if (rangeField == null) {,1,1,0,1,3,1,0,0,0,5,25,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,62,            iRangeField = null;,1,0,0,0,0,0,0,0,1,2,19,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,64,            iRangeField = new ScaledDurationField(,1,0,0,0,1,1,0,1,2,5,38,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,67,        iDurationField = field.getDurationField();,1,0,0,1,2,0,2,0,1,5,42,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,68,        iDivisor = divisor;,2,0,0,0,0,0,0,0,1,2,19,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,69,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,84,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0,0,0,1,2,2,0,1,2,5,69,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,136,        int value = getWrappedField().get(instant);,1,0,0,1,4,1,3,0,1,6,43,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,137,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,138,            return value % iDivisor;,2,1,0,0,0,1,0,0,0,3,24,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,140,            return (iDivisor - 1) + ((value + 1) % iDivisor);,3,4,0,2,6,1,0,0,0,5,49,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,154,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));",1,1,0,1,6,1,7,0,2,7,87,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,166,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);",1,1,0,0,2,1,3,0,0,5,59,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,167,        int divided = getDivided(getWrappedField().get(instant));,1,0,0,2,6,1,4,0,2,6,57,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,168,"        return getWrappedField().set(instant, divided * iDivisor + value);",3,2,0,1,4,1,3,0,1,7,66,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,203,        return getWrappedField().roundFloor(instant);,0,0,0,1,4,1,3,0,1,5,45,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,207,        return getWrappedField().roundCeiling(instant);,0,0,0,1,4,1,3,0,1,5,47,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,211,        return getWrappedField().roundHalfFloor(instant);,0,0,0,1,4,1,3,0,1,5,49,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,215,        return getWrappedField().roundHalfCeiling(instant);,0,0,0,1,4,1,3,0,1,5,51,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,219,        return getWrappedField().roundHalfEven(instant);,0,0,0,1,4,1,3,0,1,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,223,        return getWrappedField().remainder(instant);,0,0,0,1,4,1,3,0,1,5,44,5,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,232,        return iDivisor;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,236,        if (value >= 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,237,            return value / iDivisor;,2,1,0,0,0,1,0,0,0,3,24,6,0.0,0,0
defect4j,time,org/joda/time/field/RemainderDateTimeField,1,239,            return ((value + 1) / iDivisor) - 1;,2,3,0,2,4,1,0,0,0,5,36,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,52,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,61,        if (iChronology.getYear(instant) <= 0) {,0,1,0,2,5,1,3,0,0,5,40,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,62,            return DateTimeConstants.BCE;,2,0,0,0,0,1,0,0,0,2,29,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,64,            return DateTimeConstants.CE;,2,0,0,0,0,1,0,0,0,2,28,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,69,        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);,0,0,0,1,4,1,5,0,0,4,68,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,81,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);",4,0,0,0,2,1,3,0,0,4,85,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,83,        int oldEra = get(instant);,1,0,0,1,2,1,2,0,1,6,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,84,        if (oldEra != era) {,2,1,0,1,3,1,0,0,0,5,20,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,85,            int year = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,40,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,86,"            return iChronology.setYear(instant, -year);",1,0,0,0,2,1,3,0,1,5,43,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,88,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,93,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));",0,0,0,1,6,1,7,0,1,5,76,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,97,        if (get(instant) == DateTimeConstants.CE) {,2,1,0,2,5,1,2,0,1,7,43,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,98,"            return iChronology.setYear(0, 1);",0,0,0,0,2,1,2,0,0,3,33,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,100,            return Long.MIN_VALUE;,2,0,0,0,0,1,0,0,0,2,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,105,        if (get(instant) == DateTimeConstants.BCE) {,2,1,0,2,5,1,2,0,1,7,44,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,106,"            return iChronology.setYear(0, 1);",0,0,0,0,2,1,2,0,0,3,33,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,108,            return Long.MAX_VALUE;,2,0,0,0,0,1,0,0,0,2,22,7,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,114,        return roundFloor(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,119,        return roundFloor(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,124,        return roundFloor(instant);,0,0,0,1,2,1,2,0,1,5,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,144,        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();,0,0,0,1,4,1,4,0,0,4,63,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJEraDateTimeField,1,151,        return iChronology.era();,0,0,0,1,2,1,2,0,0,4,25,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,53,        return iChronology.getDayOfYear(instant);,0,0,0,1,2,1,3,0,0,4,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,61,        return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,65,        return iChronology.getDaysInYearMax();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,69,        int year = iChronology.getYear(instant);,1,0,0,1,2,1,3,0,0,5,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,70,        return iChronology.getDaysInYear(year);,0,0,0,1,2,1,3,0,0,4,39,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,74,        if (partial.isSupported(DateTimeFieldType.year())) {,0,0,0,3,7,1,4,0,0,4,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,75,            int year = partial.get(DateTimeFieldType.year());,1,0,0,2,4,1,4,0,0,5,49,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,76,            return iChronology.getDaysInYear(year);,0,0,0,1,2,1,3,0,0,4,39,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,78,        return iChronology.getDaysInYearMax();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,82,        int size = partial.size();,1,0,0,1,2,1,2,0,0,5,26,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,83,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,84,            if (partial.getFieldType(i) == DateTimeFieldType.year()) {,0,1,0,2,7,1,5,0,0,5,58,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,85,                int year = values[i];,1,0,1,0,2,1,0,0,0,4,21,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,86,                return iChronology.getDaysInYear(year);,0,0,0,1,2,1,3,0,0,4,39,9,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,89,        return iChronology.getDaysInYearMax();,0,0,0,1,2,1,2,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,93,        int maxLessOne = iChronology.getDaysInYearMax() - 1;,1,1,0,1,2,1,2,0,0,6,52,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,94,        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;,4,3,0,1,4,1,2,0,1,7,81,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicDayOfYearDateTimeField,1,101,        return iChronology.dayOfYear();,0,0,0,1,2,1,2,0,0,4,31,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,1,43,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);,0,0,0,1,4,1,5,0,0,4,76,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,1,48,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);,0,0,0,1,4,1,5,0,0,4,81,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,1,53,        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);,0,0,0,1,4,1,5,0,0,4,70,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,1,58,        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();,0,0,0,1,4,1,4,0,0,4,65,5,0.0,0,0
defect4j,time,org/joda/time/chrono/GJMonthOfYearDateTimeField,1,63,        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();,0,0,0,1,4,1,4,0,0,4,70,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,50,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,61,        return iChronology.getWeekyear(instant);,0,0,0,1,2,1,3,0,0,4,40,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,73,        if (years == 0) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,74,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,76,"        return set(instant, get(instant) + years);",1,1,0,1,4,1,4,0,2,7,42,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,80,"        return add(instant, FieldUtils.safeToInt(value));",0,0,0,1,4,1,5,0,1,5,49,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,93,"        return add(instant, years);",0,0,0,0,2,1,3,0,1,4,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,97,        if (minuendInstant < subtrahendInstant) {,2,1,0,1,3,1,0,0,0,5,41,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,98,"            return -getDifference(subtrahendInstant, minuendInstant);",0,0,0,0,2,1,3,0,2,4,57,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,101,        int minuendWeekyear = get(minuendInstant);,1,0,0,1,2,1,2,0,1,6,42,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,102,        int subtrahendWeekyear = get(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,104,        long minuendRem = remainder(minuendInstant);,1,0,0,1,2,1,2,0,1,6,44,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,105,        long subtrahendRem = remainder(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,108,        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {,2,3,0,2,5,1,3,0,0,6,84,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,109,            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;,3,0,0,0,0,0,0,0,1,2,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,112,        int difference = minuendWeekyear - subtrahendWeekyear;,3,1,0,0,0,1,0,0,0,3,54,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,113,        if (minuendRem < subtrahendRem) {,2,1,0,1,3,1,0,0,0,5,33,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,114,            difference--;,1,0,0,0,0,0,0,0,1,2,13,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,116,        return difference;,1,0,0,0,0,1,0,0,0,2,18,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,129,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0,0,0,1,3,1,5,0,0,4,50,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,134,        int thisWeekyear = get( instant );,1,0,0,1,2,1,2,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,135,        if ( thisWeekyear == year ) {,2,1,0,1,3,1,0,0,0,5,29,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,136,            return instant;,1,0,0,0,0,1,0,0,0,2,15,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,141,        int thisDow = iChronology.getDayOfWeek(instant);,1,0,0,1,2,1,3,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,145,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,1,0,0,1,2,1,3,0,0,5,65,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,146,        int weeksInToYear = iChronology.getWeeksInYear( year );,1,0,0,1,2,1,3,0,0,5,55,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,147,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,3,1,0,1,2,1,0,0,0,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,155,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,1,0,0,1,2,1,3,0,0,5,55,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,156,        if ( setToWeek > maxOutWeeks ) {,2,1,0,1,3,1,0,0,0,5,32,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,157,            setToWeek = maxOutWeeks;,2,0,0,0,0,0,0,0,1,2,24,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,163,        long workInstant = instant; // Get a copy,2,0,0,0,0,1,0,0,0,2,41,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,169,"        workInstant = iChronology.setYear( workInstant, year );",1,0,0,0,2,0,4,0,1,4,55,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,174,        int workWoyYear = get( workInstant );,1,0,0,1,2,1,2,0,1,6,37,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,180,        if ( workWoyYear < year ) {,2,1,0,1,3,1,0,0,0,5,27,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,181,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,3,0,0,0,0,0,0,0,1,2,49,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,182,        } else if ( workWoyYear > year ) {,2,1,0,1,4,2,0,0,0,5,34,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,183,            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;,3,0,0,0,0,0,0,0,1,2,49,7,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,190,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,1,0,0,1,2,1,3,0,0,5,64,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,192,        workInstant = workInstant + (setToWeek - currentWoyWeek),4,3,0,1,2,0,0,0,1,5,56,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,201,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",1,0,0,1,4,0,5,0,1,5,66,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,205,        return workInstant;,1,0,0,0,0,1,0,0,0,2,19,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,213,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;,0,1,0,2,4,1,5,0,0,5,73,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,217,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;,0,1,0,2,4,1,5,0,0,5,73,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,225,        return iChronology.getMinYear();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,229,        return iChronology.getMaxYear();,0,0,0,1,2,1,2,0,0,4,32,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,235,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,1,0,0,1,4,0,4,0,1,5,59,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,236,        int wow = iChronology.getWeekOfWeekyear(instant);,1,0,0,1,2,1,3,0,0,5,49,5,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,237,        if (wow > 1) {,1,1,0,1,3,1,0,0,0,5,14,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,238,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,4,2,0,2,6,1,0,0,1,6,66,6,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,240,        return instant;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,244,        return instant - roundFloor(instant);,1,1,0,1,2,1,2,0,1,7,37,4,0.0,0,0
defect4j,time,org/joda/time/chrono/BasicWeekyearDateTimeField,1,251,        return iChronology.weekyear();,0,0,0,1,2,1,2,0,0,4,30,5,0.0,0,0
defect4j,time,org/joda/time/chrono/AssembledChronology,1,479,                    eras = f;,2,0,0,0,0,0,0,0,1,2,9,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,283,                throw new IllegalArgumentException();,0,0,0,1,2,2,0,1,1,5,37,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,291,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,2,1,0,1,6,2,5,0,0,6,84,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,299,"            return iField.getValue(duration, addOffset(instant));",0,0,0,1,4,1,5,0,1,5,53,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,303,"            return iField.getValueAsLong(duration, addOffset(instant));",0,0,0,1,4,1,5,0,1,5,59,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,307,"            return iField.getMillis(value, addOffset(instant));",0,0,0,1,4,1,5,0,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,311,"            return iField.getMillis(value, addOffset(instant));",0,0,0,1,4,1,5,0,1,5,51,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,315,            int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,316,"            instant = iField.add(instant + offset, value);",3,1,0,0,2,0,3,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,317,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,3,1,0,2,4,1,2,0,1,7,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,321,            int offset = getOffsetToAdd(instant);,1,0,0,1,2,1,2,0,1,6,37,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,322,"            instant = iField.add(instant + offset, value);",3,1,0,0,2,0,3,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,323,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,3,1,0,2,4,1,2,0,1,7,79,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,327,            int offset = getOffsetToAdd(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,328,            return iField.getDifference,0,0,0,0,0,1,2,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,334,            int offset = getOffsetToAdd(subtrahendInstant);,1,0,0,1,2,1,2,0,1,6,47,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,335,            return iField.getDifferenceAsLong,0,0,0,0,0,1,2,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,341,            int offset = this.iZone.getOffset(instant);,2,0,0,1,2,2,2,0,0,5,43,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,342,            long sum = instant + offset;,3,1,0,0,0,1,0,0,0,3,28,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,344,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,4,5,0,2,7,1,0,0,0,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,345,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,73,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,347,            return offset;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,351,            int offset = this.iZone.getOffsetFromLocal(instant);,2,0,0,1,2,2,2,0,0,5,52,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,352,            long diff = instant - offset;,3,1,0,0,0,1,0,0,0,3,29,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,354,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,4,5,0,2,7,1,0,0,0,5,53,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,355,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0,0,0,1,2,2,0,1,2,5,78,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,357,            return offset;,1,0,0,0,0,1,0,0,0,2,14,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,361,            return iZone.convertUTCToLocal(instant);,0,0,0,1,2,1,3,0,0,4,40,6,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,366,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,367,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,368,            } else if (obj instanceof ZonedDurationField) {,1,0,0,1,4,3,0,1,0,5,47,7,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,369,                ZonedDurationField other = (ZonedDurationField) obj;,2,0,0,1,2,0,0,2,0,4,52,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,370,                return iField.equals(other.iField) &&,2,1,0,1,2,1,2,0,0,6,37,8,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,373,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/chrono/ZonedChronology,1,378,            return iField.hashCode() ^ iZone.hashCode();,0,1,0,1,4,1,4,0,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,216,        return iName;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,234,        return getField(chronology).isSupported();,0,0,0,1,4,1,3,0,1,5,42,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,243,        return getName();,0,0,0,1,2,1,1,0,1,5,17,4,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1307,        Stub(String id) {,2,0,0,1,3,0,0,1,0,4,17,3,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1308,            iID = id;,2,0,0,0,0,0,0,0,1,2,9,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1309,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1312,            out.writeUTF(iID);,0,0,0,1,2,0,3,0,0,3,18,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1313,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1316,            iID = in.readUTF();,1,0,0,1,2,0,2,0,1,5,19,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1317,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/DateTimeZone,1,1320,            return forID(iID);,0,0,0,1,2,1,2,0,1,5,18,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeUtils,1,532,            return System.currentTimeMillis();,0,0,0,1,2,1,2,0,0,4,34,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,1,54,"            throw new IllegalArgumentException(""The field must not be null"");",0,0,0,1,2,2,0,1,2,5,65,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,1,57,"            throw new IllegalArgumentException(""The field must be supported"");",0,0,0,1,2,2,0,1,2,5,66,6,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,1,73,        return iField.isPrecise();,0,0,0,1,2,1,2,0,0,4,26,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,1,77,"        return iField.getValueAsLong(duration, instant);",0,0,0,0,2,1,4,0,0,3,48,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,1,81,"        return iField.getMillis(value, instant);",0,0,0,0,2,1,4,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,1,85,"        return iField.getMillis(value, instant);",0,0,0,0,2,1,4,0,0,3,40,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,1,89,"        return iField.add(instant, value);",0,0,0,0,2,1,4,0,0,3,34,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,1,93,"        return iField.add(instant, value);",0,0,0,0,2,1,4,0,0,3,34,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,1,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,69,5,0.0,0,0
defect4j,time,org/joda/time/field/DecoratedDurationField,1,101,        return iField.getUnitMillis();,0,0,0,1,2,1,2,0,0,4,30,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");",0,0,0,1,2,2,0,1,2,5,68,6,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,55,        return getWrappedField().getValue(duration) / iScalar;,1,1,0,1,4,1,3,0,1,7,54,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,59,        return getWrappedField().getValueAsLong(duration) / iScalar;,1,1,0,1,4,1,3,0,1,7,60,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,63,"        return getWrappedField().getValue(duration, instant) / iScalar;",1,1,0,1,4,1,4,0,1,7,63,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;",1,1,0,1,4,1,4,0,1,7,69,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,71,        long scaled = ((long) value) * ((long) iScalar);,3,1,0,2,8,3,0,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,72,        return getWrappedField().getMillis(scaled);,0,0,0,1,4,1,3,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",1,0,0,0,2,1,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,77,        return getWrappedField().getMillis(scaled);,0,0,0,1,4,1,3,0,1,5,43,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,81,        long scaled = ((long) value) * ((long) iScalar);,3,1,0,2,8,3,0,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,82,"        return getWrappedField().getMillis(scaled, instant);",0,0,0,1,4,1,4,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",1,0,0,0,2,1,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,87,"        return getWrappedField().getMillis(scaled, instant);",0,0,0,1,4,1,4,0,1,5,52,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,91,        long scaled = ((long) value) * ((long) iScalar);,3,1,0,2,8,3,0,0,0,5,48,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,92,"        return getWrappedField().add(instant, scaled);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",1,0,0,0,2,1,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,97,"        return getWrappedField().add(instant, scaled);",0,0,0,1,4,1,4,0,1,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;",1,1,0,1,4,1,4,0,1,7,84,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;",1,1,0,1,4,1,4,0,1,7,90,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,119,        return iScalar;,1,0,0,0,0,1,0,0,0,2,15,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,130,        if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,131,            return true;,0,0,0,0,0,1,0,0,1,2,12,6,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,132,        } else if (obj instanceof ScaledDurationField) {,1,0,0,1,4,3,0,1,0,5,48,6,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,133,            ScaledDurationField other = (ScaledDurationField) obj;,2,0,0,1,2,0,0,2,0,4,54,7,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,134,            return (getWrappedField().equals(other.getWrappedField())) &&,0,1,0,3,8,1,4,0,1,6,61,7,0.0,0,0
defect4j,time,org/joda/time/field/ScaledDurationField,1,138,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,53,"        return ""millis"";",0,0,0,0,0,1,0,0,1,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,85,        return FieldUtils.safeToInt(duration);,0,0,0,1,2,1,3,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,89,        return duration;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,93,        return FieldUtils.safeToInt(duration);,0,0,0,1,2,1,3,0,0,4,38,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,97,        return duration;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,101,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,105,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,109,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,113,        return value;,1,0,0,0,0,1,0,0,0,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,117,"        return FieldUtils.safeAdd(instant, value);",0,0,0,0,2,1,4,0,0,3,42,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,121,"        return FieldUtils.safeAdd(instant, value);",0,0,0,0,2,1,4,0,0,3,42,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0,0,0,0,4,1,6,0,0,3,88,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0,0,0,0,2,1,4,0,0,3,66,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,134,        long otherMillis = otherField.getUnitMillis();,1,0,0,1,2,1,2,0,0,5,46,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,135,        long thisMillis = getUnitMillis();,1,0,0,1,2,1,1,0,1,6,34,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,137,        if (thisMillis == otherMillis) {,2,1,0,1,3,1,0,0,0,5,32,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,138,            return 0;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,140,        if (thisMillis < otherMillis) {,2,1,0,1,3,1,0,0,0,5,31,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,141,            return -1;,0,0,0,0,0,1,0,0,1,2,10,6,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,143,            return 1;,0,0,0,0,0,1,0,0,0,1,9,2,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,148,        if (obj instanceof MillisDurationField) {,1,0,0,1,3,2,0,1,0,5,41,5,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,149,            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();,1,1,0,2,8,1,2,1,1,8,70,6,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,151,        return false;,0,0,0,0,0,1,0,0,1,2,13,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,164,"        return ""DurationField[millis]"";",0,0,0,0,2,1,0,0,1,3,31,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,171,        return INSTANCE;,1,0,0,0,0,1,0,0,0,2,16,4,0.0,0,0
defect4j,time,org/joda/time/field/MillisDurationField,1,32,public final class MillisDurationField extends DurationField implements Serializable {,1,0,0,0,1,5,0,2,2,5,86,1,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,266,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,267,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,269,            if (obj instanceof StandardDurationFieldType) {,1,0,0,1,3,2,0,1,0,5,47,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,270,                return iOrdinal == ((StandardDurationFieldType) obj).iOrdinal;,3,1,0,2,4,1,0,1,0,6,62,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,272,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,288,                    return chronology.centuries();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,290,                    return chronology.weekyears();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,296,                    return chronology.weeks();,0,0,0,1,2,1,2,0,0,4,26,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,300,                    return chronology.halfdays();,0,0,0,1,2,1,2,0,0,4,29,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,302,                    return chronology.hours();,0,0,0,1,2,1,2,0,0,4,26,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,304,                    return chronology.minutes();,0,0,0,1,2,1,2,0,0,4,28,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,306,                    return chronology.seconds();,0,0,0,1,2,1,2,0,0,4,28,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,308,                    return chronology.millis();,0,0,0,1,2,1,2,0,0,4,27,7,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,311,                    throw new InternalError();,0,0,0,1,2,2,0,1,1,5,26,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,321,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,323,                    return ERAS_TYPE;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,325,                    return CENTURIES_TYPE;,1,0,0,0,0,1,0,0,0,2,22,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,327,                    return WEEKYEARS_TYPE;,1,0,0,0,0,1,0,0,0,2,22,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,329,                    return YEARS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,331,                    return MONTHS_TYPE;,1,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,333,                    return WEEKS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,335,                    return DAYS_TYPE;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,337,                    return HALFDAYS_TYPE;,1,0,0,0,0,1,0,0,0,2,21,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,339,                    return HOURS_TYPE;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,341,                    return MINUTES_TYPE;,1,0,0,0,0,1,0,0,0,2,20,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,343,                    return SECONDS_TYPE;,1,0,0,0,0,1,0,0,0,2,20,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,345,                    return MILLIS_TYPE;,1,0,0,0,0,1,0,0,0,2,19,6,0.0,0,0
defect4j,time,org/joda/time/DurationFieldType,1,348,                    return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,838,            super();,0,0,0,1,2,1,0,0,1,4,8,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,839,            iPartial = partial;,2,0,0,0,0,0,0,0,1,2,19,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,840,            iFieldIndex = fieldIndex;,2,0,0,0,0,0,0,0,1,2,25,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,841,        },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,849,            return iPartial.getField(iFieldIndex);,0,0,0,1,2,1,3,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,858,            return iPartial;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,867,            return iPartial;,1,0,0,0,0,1,0,0,0,2,16,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,876,            return iPartial.getValue(iFieldIndex);,0,0,0,1,2,1,3,0,0,4,38,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,898,            int[] newValues = iPartial.getValues();,1,0,0,1,4,1,2,0,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,899,"            newValues = getField().add(iPartial, iFieldIndex, newValues, valueToAdd);",1,0,0,1,4,0,6,0,2,5,73,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,900,"            return new Partial(iPartial, newValues);",2,0,0,0,2,2,0,1,1,5,40,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,922,            int[] newValues = iPartial.getValues();,1,0,0,1,4,1,2,0,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,923,"            newValues = getField().addWrapField(iPartial, iFieldIndex, newValues, valueToAdd);",1,0,0,1,4,0,6,0,2,5,82,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,924,"            return new Partial(iPartial, newValues);",2,0,0,0,2,2,0,1,1,5,40,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,939,            int[] newValues = iPartial.getValues();,1,0,0,1,4,1,2,0,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,940,"            newValues = getField().set(iPartial, iFieldIndex, newValues, value);",1,0,0,1,4,0,6,0,2,5,68,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,941,"            return new Partial(iPartial, newValues);",2,0,0,0,2,2,0,1,1,5,40,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,956,            int[] newValues = iPartial.getValues();,1,0,0,1,4,1,2,0,0,5,39,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,957,"            newValues = getField().set(iPartial, iFieldIndex, newValues, text, locale);",1,0,0,1,4,0,7,0,2,5,75,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,958,"            return new Partial(iPartial, newValues);",2,0,0,0,2,2,0,1,1,5,40,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,972,"            return setCopy(text, null);",0,0,0,0,2,1,2,0,1,4,27,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,986,            return setCopy(getMaximumValue());,0,0,0,2,4,1,2,0,2,5,34,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,999,            return setCopy(getMinimumValue());,0,0,0,2,4,1,2,0,2,5,34,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,103,        this((Chronology) null);,0,0,0,2,4,1,0,1,0,4,24,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,104,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,123,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/Partial,1,124,        iChronology = DateTimeUtils.getChronology(chrono).withUTC();,1,0,0,1,4,0,4,0,1,5,60,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,125,        iTypes = new DateTimeFieldType[0];,1,0,0,0,2,1,0,1,1,5,34,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,126,        iValues = new int[0];,1,0,0,0,2,2,0,0,1,4,21,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,127,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,139,"        this(type, value, null);",2,0,0,0,2,1,0,0,0,3,24,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,140,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,153,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/Partial,1,154,        chronology = DateTimeUtils.getChronology(chronology).withUTC();,1,0,0,1,4,0,4,0,1,5,63,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,155,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,156,        if (type == null) {,1,1,0,1,3,1,0,0,0,5,19,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,157,"            throw new IllegalArgumentException(""The field type must not be null"");",0,0,0,1,2,2,0,1,2,5,70,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,159,        iTypes = new DateTimeFieldType[] {type};,2,0,0,0,4,1,0,1,1,5,40,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,160,        iValues = new int[] {value};,2,0,0,0,4,2,0,0,1,4,28,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,161,"        chronology.validate(this, iValues);",0,0,0,0,2,1,3,0,0,3,35,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,162,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,194,"            throw new IllegalArgumentException(""Types array must not be null"");",0,0,0,1,2,2,0,1,2,5,67,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,197,"            throw new IllegalArgumentException(""Values array must not be null"");",0,0,0,1,2,2,0,1,2,5,68,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,200,"            throw new IllegalArgumentException(""Values array must be the same length as the types array"");",0,0,0,1,2,2,0,1,2,5,94,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,203,            iTypes = types;,2,0,0,0,0,0,0,0,1,2,15,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,204,            iValues = values;,2,0,0,0,0,0,0,0,1,2,17,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,205,            return;,0,0,0,0,0,1,0,0,1,2,7,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,209,"                throw new IllegalArgumentException(""Types array must not contain null: index "" + i);",1,1,0,1,2,2,0,1,2,7,84,8,0.0,0,0
defect4j,time,org/joda/time/Partial,1,219,"                    throw new IllegalArgumentException(""Types array must be in order largest-smallest: "" +",0,1,0,0,1,2,0,1,2,5,86,10,0.0,0,0
defect4j,time,org/joda/time/Partial,1,222,                    if (types[i - 1].getRangeDurationType() == null) {,1,2,1,2,7,1,1,0,0,7,50,11,0.0,0,0
defect4j,time,org/joda/time/Partial,1,223,                        if (loopType.getRangeDurationType() == null) {,0,1,0,2,5,1,2,0,0,5,46,13,0.0,0,0
defect4j,time,org/joda/time/Partial,1,224,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +",0,1,0,0,1,2,0,1,2,5,79,15,0.0,0,0
defect4j,time,org/joda/time/Partial,1,228,                        if (loopType.getRangeDurationType() == null) {,0,1,0,2,5,1,2,0,0,5,46,13,0.0,0,0
defect4j,time,org/joda/time/Partial,1,229,"                            throw new IllegalArgumentException(""Types array must be in order largest-smallest: "" +",0,1,0,0,1,2,0,1,2,5,86,15,0.0,0,0
defect4j,time,org/joda/time/Partial,1,232,                        DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);,2,1,1,1,6,0,3,1,0,7,89,13,0.0,0,0
defect4j,time,org/joda/time/Partial,1,233,                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);,1,0,0,1,4,0,4,1,0,5,85,13,0.0,0,0
defect4j,time,org/joda/time/Partial,1,234,                        if (lastRangeField.compareTo(loopRangeField) < 0) {,0,1,0,2,5,1,3,0,0,5,51,13,0.0,0,0
defect4j,time,org/joda/time/Partial,1,235,"                            throw new IllegalArgumentException(""Types array must be in order largest-smallest: "" +",0,1,0,0,1,2,0,1,2,5,86,15,0.0,0,0
defect4j,time,org/joda/time/Partial,1,238,                        if (lastRangeField.compareTo(loopRangeField) == 0) {,0,1,0,2,5,1,3,0,0,5,52,13,0.0,0,0
defect4j,time,org/joda/time/Partial,1,239,"                            throw new IllegalArgumentException(""Types array must not contain duplicate: "" +",0,1,0,0,1,2,0,1,2,5,79,15,0.0,0,0
defect4j,time,org/joda/time/Partial,1,260,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/Partial,1,261,        if (partial == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,262,"            throw new IllegalArgumentException(""The partial must not be null"");",0,0,0,1,2,2,0,1,2,5,67,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,264,        iChronology = DateTimeUtils.getChronology(partial.getChronology()).withUTC();,1,0,0,2,6,0,5,0,1,5,77,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,265,        iTypes = new DateTimeFieldType[partial.size()];,1,0,0,1,4,1,2,1,1,7,47,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,266,        iValues = new int[partial.size()];,1,0,0,1,4,2,2,0,1,6,34,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,267,        for (int i = 0; i < partial.size(); i++) {,3,1,0,2,5,2,2,0,1,7,42,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,268,            iTypes[i] = partial.getFieldType(i);,0,0,1,1,4,0,3,0,1,5,36,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,269,            iValues[i] = partial.getValue(i);,0,0,1,1,4,0,3,0,1,5,33,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,271,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,282,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/Partial,1,283,        iChronology = partial.iChronology;,3,0,0,0,0,0,0,0,1,2,34,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,284,        iTypes = partial.iTypes;,3,0,0,0,0,0,0,0,1,2,24,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,285,        iValues = values;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,286,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,298,        super();,0,0,0,1,2,1,0,0,1,4,8,3,0.0,0,0
defect4j,time,org/joda/time/Partial,1,299,        iChronology = chronology;,2,0,0,0,0,0,0,0,1,2,25,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,300,        iTypes = types;,2,0,0,0,0,0,0,0,1,2,15,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,301,        iValues = values;,2,0,0,0,0,0,0,0,1,2,17,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,302,    },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,346,        return iTypes[index];,0,0,1,0,2,1,0,0,0,3,21,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,358,        return (DateTimeFieldType[]) iTypes.clone();,0,0,0,1,6,1,2,1,0,5,44,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,370,        return iValues[index];,0,0,1,0,2,1,0,0,0,3,22,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,383,        return (int[]) iValues.clone();,0,0,0,1,6,2,2,0,0,4,31,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,402,        newChronology = DateTimeUtils.getChronology(newChronology);,1,0,0,1,2,0,3,0,1,5,59,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,403,        newChronology = newChronology.withUTC();,1,0,0,1,2,0,2,0,1,5,40,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,404,        if (newChronology == getChronology()) {,1,1,0,2,5,1,1,0,1,7,39,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,405,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,407,"            Partial newPartial = new Partial(newChronology, iTypes, iValues);",4,0,0,0,2,1,0,2,1,5,65,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,408,"            newChronology.validate(newPartial, iValues);",0,0,0,0,2,0,4,0,0,2,44,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,409,            return newPartial;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,429,        if (fieldType == null) {,1,1,0,1,3,1,0,0,0,5,24,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,430,"            throw new IllegalArgumentException(""The field type must not be null"");",0,0,0,1,2,2,0,1,2,5,70,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,432,        int index = indexOf(fieldType);,1,0,0,1,2,1,2,0,1,6,31,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,433,        if (index == -1) {,1,1,0,1,3,1,0,0,1,6,18,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,434,            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];,3,1,0,0,4,1,0,2,0,5,72,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,435,            int[] newValues = new int[newTypes.length];,3,0,0,0,4,3,0,0,0,3,43,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,438,            int i = 0;,1,0,0,0,0,1,0,0,0,2,10,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,439,            DurationField unitField = fieldType.getDurationType().getField(iChronology);,1,0,0,1,4,0,4,1,0,5,76,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,440,            if (unitField.isSupported()) {,0,0,0,2,5,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,441,                for (; i < iTypes.length; i++) {,4,1,0,1,3,1,0,0,1,6,32,8,0.0,0,0
defect4j,time,org/joda/time/Partial,1,442,                    DateTimeFieldType loopType = iTypes[i];,1,0,1,0,2,0,0,1,0,4,39,10,0.0,0,0
defect4j,time,org/joda/time/Partial,1,443,                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);,1,0,0,1,4,0,4,1,0,5,79,10,0.0,0,0
defect4j,time,org/joda/time/Partial,1,444,                    if (loopUnitField.isSupported()) {,0,0,0,2,5,1,2,0,0,4,34,11,0.0,0,0
defect4j,time,org/joda/time/Partial,1,445,                        int compare = unitField.compareTo(loopUnitField);,1,0,0,1,2,1,3,0,0,5,49,13,0.0,0,0
defect4j,time,org/joda/time/Partial,1,446,                        if (compare > 0) {,1,1,0,1,3,1,0,0,0,5,18,12,0.0,0,0
defect4j,time,org/joda/time/Partial,1,447,                            break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,448,                        } else if (compare == 0) {,1,1,0,1,4,2,0,0,0,5,26,13,0.0,0,0
defect4j,time,org/joda/time/Partial,1,449,                            if (fieldType.getRangeDurationType() == null) {,0,1,0,2,5,1,2,0,0,5,47,15,0.0,0,0
defect4j,time,org/joda/time/Partial,1,450,                                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,452,                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);,1,0,0,1,4,0,4,1,0,5,82,15,0.0,0,0
defect4j,time,org/joda/time/Partial,1,453,                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);,1,0,0,1,4,0,4,1,0,5,85,15,0.0,0,0
defect4j,time,org/joda/time/Partial,1,454,                            if (rangeField.compareTo(loopRangeField) > 0) {,0,1,0,2,5,1,3,0,0,5,47,15,0.0,0,0
defect4j,time,org/joda/time/Partial,1,455,                                break;,0,0,0,0,0,1,0,0,0,1,6,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,461,"            System.arraycopy(iTypes, 0, newTypes, 0, i);",0,0,0,0,2,0,5,0,0,2,44,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,462,"            System.arraycopy(iValues, 0, newValues, 0, i);",0,0,0,0,2,0,5,0,0,2,46,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,463,            newTypes[i] = fieldType;,1,0,1,0,2,0,0,0,1,4,24,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,464,            newValues[i] = value;,1,0,1,0,2,0,0,0,1,4,21,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,465,"            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);",4,2,0,0,2,0,5,0,0,4,70,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,466,"            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);",4,2,0,0,2,0,5,0,0,4,73,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,469,"            Partial newPartial = new Partial(newTypes, newValues, iChronology);",4,0,0,0,2,1,0,2,1,5,67,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,470,"            iChronology.validate(newPartial, newValues);",0,0,0,0,2,0,4,0,0,2,44,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,471,            return newPartial;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,473,        if (value == getValue(index)) {,1,1,0,2,5,1,2,0,1,7,31,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,474,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,476,        int[] newValues = getValues();,1,0,0,1,4,1,1,0,1,6,30,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,477,"        newValues = getField(index).set(this, index, newValues, value);",1,0,0,1,4,1,6,0,2,6,63,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,478,"        return new Partial(this, newValues);",1,0,0,0,2,3,0,1,1,5,36,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,490,        int index = indexOf(fieldType);,1,0,0,1,2,1,2,0,1,6,31,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,491,        if (index != -1) {,1,1,0,1,3,1,0,0,1,6,18,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,492,            DateTimeFieldType[] newTypes = new DateTimeFieldType[size() - 1];,1,1,0,1,6,1,1,2,1,8,65,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,493,            int[] newValues = new int[size() - 1];,1,1,0,1,6,3,1,0,1,7,38,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,494,"            System.arraycopy(iTypes, 0, newTypes, 0, index);",0,0,0,0,2,0,5,0,0,2,48,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,495,"            System.arraycopy(iTypes, index + 1, newTypes, index, newTypes.length - index);",4,2,0,0,2,0,5,0,0,4,78,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,496,"            System.arraycopy(iValues, 0, newValues, 0, index);",0,0,0,0,2,0,5,0,0,2,50,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,497,"            System.arraycopy(iValues, index + 1, newValues, index, newValues.length - index);",4,2,0,0,2,0,5,0,0,4,81,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,498,"            Partial newPartial = new Partial(iChronology, newTypes, newValues);",4,0,0,0,2,1,0,2,1,5,67,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,499,"            iChronology.validate(newPartial, newValues);",0,0,0,0,2,0,4,0,0,2,44,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,500,            return newPartial;,1,0,0,0,0,1,0,0,0,2,18,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,502,        return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,521,        int index = indexOfSupported(fieldType);,1,0,0,1,2,1,2,0,1,6,40,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,522,        if (value == getValue(index)) {,1,1,0,2,5,1,2,0,1,7,31,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,523,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,525,        int[] newValues = getValues();,1,0,0,1,4,1,1,0,1,6,30,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,526,"        newValues = getField(index).set(this, index, newValues, value);",1,0,0,1,4,1,6,0,2,6,63,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,527,"        return new Partial(this, newValues);",1,0,0,0,2,3,0,1,1,5,36,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,545,        int index = indexOfSupported(fieldType);,1,0,0,1,2,1,2,0,1,6,40,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,546,        if (amount == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,547,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,549,        int[] newValues = getValues();,1,0,0,1,4,1,1,0,1,6,30,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,550,"        newValues = getField(index).add(this, index, newValues, amount);",1,0,0,1,4,1,6,0,2,6,64,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,551,"        return new Partial(this, newValues);",1,0,0,0,2,3,0,1,1,5,36,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,569,        int index = indexOfSupported(fieldType);,1,0,0,1,2,1,2,0,1,6,40,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,570,        if (amount == 0) {,1,1,0,1,3,1,0,0,0,5,18,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,571,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,573,        int[] newValues = getValues();,1,0,0,1,4,1,1,0,1,6,30,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,574,"        newValues = getField(index).addWrapPartial(this, index, newValues, amount);",1,0,0,1,4,1,6,0,2,6,75,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,575,"        return new Partial(this, newValues);",1,0,0,0,2,3,0,1,1,5,36,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,594,        if (period == null || scalar == 0) {,2,3,0,1,3,1,0,0,0,5,36,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,595,            return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,597,        int[] newValues = getValues();,1,0,0,1,4,1,1,0,1,6,30,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,598,        for (int i = 0; i < period.size(); i++) {,3,1,0,2,5,2,2,0,1,7,41,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,599,            DurationFieldType fieldType = period.getFieldType(i);,1,0,0,1,2,0,3,1,0,5,53,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,600,            int index = indexOf(fieldType);,1,0,0,1,2,1,2,0,1,6,31,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,601,            if (index >= 0) {,1,1,0,1,3,1,0,0,0,5,17,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,602,"                newValues = getField(index).add(this, index, newValues,",1,0,0,1,3,1,5,0,2,6,55,8,0.0,0,0
defect4j,time,org/joda/time/Partial,1,606,"        return new Partial(this, newValues);",1,0,0,0,2,3,0,1,1,5,36,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,619,"        return withPeriodAdded(period, 1);",0,0,0,0,2,1,2,0,1,4,34,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,632,"        return withPeriodAdded(period, -1);",0,0,0,0,2,1,2,0,2,4,35,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,647,"        return new Property(this, indexOfSupported(type));",0,0,0,1,4,3,2,1,2,6,50,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,661,        long millis = DateTimeUtils.getInstantMillis(instant);,1,0,0,1,2,1,3,0,0,5,54,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,662,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,1,0,0,1,2,0,3,1,0,5,64,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,663,        for (int i = 0; i < iTypes.length; i++) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,664,            int value = iTypes[i].getField(chrono).get(millis);,1,0,1,1,6,1,4,0,0,6,51,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,665,            if (value != iValues[i]) {,1,1,1,1,5,1,0,0,0,6,26,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,666,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,time,org/joda/time/Partial,1,669,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,685,        if (partial == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,686,"            throw new IllegalArgumentException(""The partial must not be null"");",0,0,0,1,2,2,0,1,2,5,67,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,688,        for (int i = 0; i < iTypes.length; i++) {,5,1,0,1,3,2,0,0,1,6,41,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,689,            int value = partial.get(iTypes[i]);,1,0,1,1,4,1,2,0,0,6,35,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,690,            if (value != iValues[i]) {,1,1,1,1,5,1,0,0,0,6,26,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,691,                return false;,0,0,0,0,0,1,0,0,1,2,13,8,0.0,0,0
defect4j,time,org/joda/time/Partial,1,694,        return true;,0,0,0,0,0,1,0,0,1,2,12,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,710,        DateTimeFormatter[] f = iFormatter;,2,0,0,0,2,0,0,1,0,3,35,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,711,        if (f == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,712,            if (size() == 0) {,0,1,0,2,5,1,1,0,1,6,18,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,713,                return null;,0,0,0,0,0,1,0,0,0,1,12,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,715,            f = new DateTimeFormatter[2];,1,0,0,0,2,1,0,1,1,5,29,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,717,                List<DateTimeFieldType> list = new ArrayList<DateTimeFieldType>(Arrays.asList(iTypes));,1,0,0,2,4,1,3,4,1,7,87,8,0.0,0,0
defect4j,time,org/joda/time/Partial,1,718,"                f[0] = ISODateTimeFormat.forFields(list, true, false);",0,0,1,0,4,0,3,0,3,4,54,8,0.0,0,0
defect4j,time,org/joda/time/Partial,1,719,                if (list.size() == 0) {,0,1,0,2,5,1,2,0,0,5,23,8,0.0,0,0
defect4j,time,org/joda/time/Partial,1,720,                    f[1] = f[0];,0,0,1,0,4,0,0,0,1,3,12,10,0.0,0,0
defect4j,time,org/joda/time/Partial,1,724,            },0,0,0,0,1,0,0,0,0,1,1,2,0.0,0,0
defect4j,time,org/joda/time/Partial,1,722,            } catch (IllegalArgumentException ex) {,1,0,0,1,4,1,0,1,0,5,39,8,0.0,0,0
defect4j,time,org/joda/time/Partial,1,725,            iFormatter = f;,2,0,0,0,0,0,0,0,1,2,15,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,727,        return f[0];,0,0,1,0,2,1,0,0,0,3,12,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,743,        DateTimeFormatter[] f = iFormatter;,2,0,0,0,2,0,0,1,0,3,35,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,744,        if (f == null) {,1,1,0,1,3,1,0,0,0,5,16,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,745,            getFormatter();,0,0,0,1,2,0,1,0,1,4,15,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,746,            f = iFormatter;,2,0,0,0,0,0,0,0,1,2,15,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,747,            if (f == null) {,1,1,0,1,3,1,0,0,0,5,16,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,748,                return toStringList();,0,0,0,1,2,1,1,0,1,5,22,8,0.0,0,0
defect4j,time,org/joda/time/Partial,1,751,        DateTimeFormatter f1 = f[1];,1,0,1,0,2,0,0,1,0,4,28,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,752,        if (f1 == null) {,1,1,0,1,3,1,0,0,0,5,17,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,753,            return toStringList();,0,0,0,1,2,1,1,0,1,5,22,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,755,        return f1.print(this);,0,0,0,1,2,2,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,768,        int size = size();,1,0,0,1,2,1,1,0,1,6,18,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,769,        StringBuilder buf = new StringBuilder(20 * size);,2,1,0,1,2,1,0,2,1,7,49,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,770,        buf.append('[');,0,0,0,1,3,0,2,0,1,4,16,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,771,        for (int i = 0; i < size; i++) {,4,1,0,1,3,2,0,0,1,6,32,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,772,            if (i > 0) {,1,1,0,1,3,1,0,0,0,5,12,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,773,"                buf.append(',').append(' ');",0,0,0,1,4,0,3,0,2,4,28,9,0.0,0,0
defect4j,time,org/joda/time/Partial,1,775,            buf.append(iTypes[i].getName());,0,0,1,2,6,0,3,0,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,776,            buf.append('=');,0,0,0,1,2,0,2,0,1,4,16,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,777,            buf.append(iValues[i]);,0,0,1,1,4,0,2,0,0,4,23,7,0.0,0,0
defect4j,time,org/joda/time/Partial,1,779,        buf.append(']');,0,0,0,1,3,0,2,0,1,4,16,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,780,        return buf.toString();,0,0,0,1,2,1,2,0,0,4,22,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,791,        if (pattern == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,792,            return toString();,0,0,0,1,2,1,1,0,1,5,18,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,794,        return DateTimeFormat.forPattern(pattern).print(this);,0,0,0,1,4,2,4,0,0,4,54,5,0.0,0,0
defect4j,time,org/joda/time/Partial,1,806,        if (pattern == null) {,1,1,0,1,3,1,0,0,0,5,22,4,0.0,0,0
defect4j,time,org/joda/time/Partial,1,807,            return toString();,0,0,0,1,2,1,1,0,1,5,18,6,0.0,0,0
defect4j,time,org/joda/time/Partial,1,809,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0,0,0,1,6,2,6,0,0,4,73,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,457,            return iRangeType;,1,0,0,0,0,1,0,0,0,2,18,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,463,            if (this == obj) {,1,1,0,1,3,2,0,0,0,5,18,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,464,                return true;,0,0,0,0,0,1,0,0,1,2,12,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,466,            if (obj instanceof StandardDateTimeFieldType) {,1,0,0,1,3,2,0,1,0,5,47,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,467,                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;,3,1,0,2,4,1,0,1,0,6,62,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,469,            return false;,0,0,0,0,0,1,0,0,1,2,13,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,475,            return (1 << iOrdinal);,1,1,0,1,2,1,0,0,0,5,23,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,486,                    return chronology.yearOfEra();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,488,                    return chronology.centuryOfEra();,0,0,0,1,2,1,2,0,0,4,33,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,490,                    return chronology.yearOfCentury();,0,0,0,1,2,1,2,0,0,4,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,494,                    return chronology.dayOfYear();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,498,                    return chronology.dayOfMonth();,0,0,0,1,2,1,2,0,0,4,31,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,500,                    return chronology.weekyearOfCentury();,0,0,0,1,2,1,2,0,0,4,38,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,502,                    return chronology.weekyear();,0,0,0,1,2,1,2,0,0,4,29,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,504,                    return chronology.weekOfWeekyear();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,506,                    return chronology.dayOfWeek();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,508,                    return chronology.halfdayOfDay();,0,0,0,1,2,1,2,0,0,4,33,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,510,                    return chronology.hourOfHalfday();,0,0,0,1,2,1,2,0,0,4,34,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,512,                    return chronology.clockhourOfHalfday();,0,0,0,1,2,1,2,0,0,4,39,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,514,                    return chronology.clockhourOfDay();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,516,                    return chronology.hourOfDay();,0,0,0,1,2,1,2,0,0,4,30,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,518,                    return chronology.minuteOfDay();,0,0,0,1,2,1,2,0,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,520,                    return chronology.minuteOfHour();,0,0,0,1,2,1,2,0,0,4,33,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,522,                    return chronology.secondOfDay();,0,0,0,1,2,1,2,0,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,524,                    return chronology.secondOfMinute();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,526,                    return chronology.millisOfDay();,0,0,0,1,2,1,2,0,0,4,32,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,528,                    return chronology.millisOfSecond();,0,0,0,1,2,1,2,0,0,4,35,7,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,531,                    throw new InternalError();,0,0,0,1,2,2,0,1,1,5,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,541,            switch (iOrdinal) {,1,0,0,1,3,1,0,0,0,4,19,5,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,543,                    return ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,16,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,545,                    return YEAR_OF_ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,547,                    return CENTURY_OF_ERA_TYPE;,1,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,549,                    return YEAR_OF_CENTURY_TYPE;,1,0,0,0,0,1,0,0,0,2,28,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,551,                    return YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,17,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,553,                    return DAY_OF_YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,555,                    return MONTH_OF_YEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,557,                    return DAY_OF_MONTH_TYPE;,1,0,0,0,0,1,0,0,0,2,25,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,559,                    return WEEKYEAR_OF_CENTURY_TYPE;,1,0,0,0,0,1,0,0,0,2,32,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,561,                    return WEEKYEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,21,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,563,                    return WEEK_OF_WEEKYEAR_TYPE;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,565,                    return DAY_OF_WEEK_TYPE;,1,0,0,0,0,1,0,0,0,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,567,                    return HALFDAY_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,569,                    return HOUR_OF_HALFDAY_TYPE;,1,0,0,0,0,1,0,0,0,2,28,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,571,                    return CLOCKHOUR_OF_HALFDAY_TYPE;,1,0,0,0,0,1,0,0,0,2,33,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,573,                    return CLOCKHOUR_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,575,                    return HOUR_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,24,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,577,                    return MINUTE_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,579,                    return MINUTE_OF_HOUR_TYPE;,1,0,0,0,0,1,0,0,0,2,27,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,581,                    return SECOND_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,583,                    return SECOND_OF_MINUTE_TYPE;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,585,                    return MILLIS_OF_DAY_TYPE;,1,0,0,0,0,1,0,0,0,2,26,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,587,                    return MILLIS_OF_SECOND_TYPE;,1,0,0,0,0,1,0,0,0,2,29,6,0.0,0,0
defect4j,time,org/joda/time/DateTimeFieldType,1,590,                    return this;,0,0,0,0,0,2,0,0,0,1,12,2,0.0,0,0
