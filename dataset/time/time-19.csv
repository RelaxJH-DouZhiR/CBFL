project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/joda/time/DateTime,19,331,"        super(year, monthOfYear, dayOfMonth,",0.06667,0,,0
org/joda/time/DateTime,19,333,    },0.06667,0,,0
org/joda/time/tz/CachedDateTimeZone,19,210,            return iNextInfo.getOffset(millis);,0.00877,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2116,                buf.append(iZeroOffsetPrintText);,0.008,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2117,                return;,0.008,0,,0
org/joda/time/base/AbstractInstant,19,424,        return ISODateTimeFormat.dateTime().print(this);,0.00446,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1924,                if (buf != null) {,0.00422,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1925,                    while (--minDigits >= 0) {,0.00422,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1926,                        buf.append('0');,0.00422,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1933,                return;,0.00422,0,,0
org/joda/time/chrono/BasicGJChronology,19,190,                    dayOfYear++;,0.00412,0,,0
org/joda/time/base/BaseDateTime,19,225,    },0.00341,0,,0
org/joda/time/base/BaseDateTime,19,223,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.00339,0,,0
org/joda/time/format/ISODateTimeFormat,19,953,        if (dt == null) {,0.00319,0,,0
org/joda/time/format/ISODateTimeFormat,19,954,            dt = new DateTimeFormatterBuilder(),0.00319,0,,0
org/joda/time/format/ISODateTimeFormat,19,959,        return dt;,0.00319,0,,0
org/joda/time/format/ISODateTimeFormat,19,916,        if (tt == null) {,0.0031,0,,0
org/joda/time/format/ISODateTimeFormat,19,917,            tt = new DateTimeFormatterBuilder(),0.0031,0,,0
org/joda/time/format/ISODateTimeFormat,19,922,        return tt;,0.0031,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1875,"                printTo(buf, null, instant, chrono);",0.00302,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1878,            },0.00302,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1879,        },0.00302,0,,0
org/joda/time/format/ISODateTimeFormat,19,879,        if (t == null) {,0.00302,0,,0
org/joda/time/format/ISODateTimeFormat,19,880,            t = new DateTimeFormatterBuilder(),0.00302,0,,0
org/joda/time/format/ISODateTimeFormat,19,885,        return t;,0.00302,0,,0
org/joda/time/format/ISODateTimeFormat,19,1482,        if (hmsf == null) {,0.00299,0,,0
org/joda/time/format/ISODateTimeFormat,19,1483,            hmsf = new DateTimeFormatterBuilder(),0.00299,0,,0
org/joda/time/format/ISODateTimeFormat,19,1490,        return hmsf;,0.00299,0,,0
org/joda/time/format/ISODateTimeFormat,19,1691,        if (fse == null) {,0.00299,0,,0
org/joda/time/format/ISODateTimeFormat,19,1692,            fse = new DateTimeFormatterBuilder(),0.00299,0,,0
org/joda/time/format/ISODateTimeFormat,19,1699,        return fse;,0.00299,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2112,            if (displayZone == null) {,0.00294,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2115,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,0.00294,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1908,            DateTimeField field = iFieldType.getField(chrono);,0.00289,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1909,            int minDigits = iMinDigits;,0.00289,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1913,                fraction = field.remainder(instant);,0.00289,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1921,            },0.00289,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1923,            if (fraction == 0) {,0.00289,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,127,            return instant % iUnitMillis;,0.00276,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,126,        if (instant >= 0) {,0.00274,0,,0
org/joda/time/format/ISODateTimeFormat,19,866,        return yearMonthDay();,0.00258,0,,0
org/joda/time/format/ISODateTimeFormat,19,1358,        if (ymd == null) {,0.00255,0,,0
org/joda/time/format/ISODateTimeFormat,19,1359,            ymd = new DateTimeFormatterBuilder(),0.00255,0,,0
org/joda/time/format/ISODateTimeFormat,19,1365,        return ymd;,0.00255,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2621,                locale = Locale.getDefault();,0.00253,0,,0
org/joda/time/format/FormatUtils,19,68,            for (; size > 2; size--) {,0.00244,0,,0
org/joda/time/format/FormatUtils,19,74,            int d = ((value + 1) * 13421772) >> 27;,0.00244,0,,0
org/joda/time/format/FormatUtils,19,75,            buf.append((char) (d + '0'));,0.00244,0,,0
org/joda/time/format/FormatUtils,19,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,0.00244,0,,0
org/joda/time/format/FormatUtils,19,78,        } else {,0.00244,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1180,            buf.append(iValue);,0.00243,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1181,        },0.00243,0,,0
org/joda/time/DateTimeFieldType,19,522,                    return chronology.secondOfDay();,0.00242,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2614,            DateTimePrinter[] elements = iPrinters;,0.00241,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2615,            if (elements == null) {,0.00241,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2619,            if (locale == null) {,0.00241,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2624,            int len = elements.length;,0.00241,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2625,            for (int i = 0; i < len; i++) {,0.00241,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2626,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0.00241,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2628,        },0.00241,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1437,                DateTimeField field = iFieldType.getField(chrono);,0.00241,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1438,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",0.00241,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1441,            },0.00241,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1442,        },0.00241,0,,0
org/joda/time/format/DateTimeFormatter,19,581,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0.00239,0,,0
org/joda/time/format/DateTimeFormatter,19,582,"        printTo(buf, instant);",0.00239,0,,0
org/joda/time/format/DateTimeFormatter,19,583,        return buf.toString();,0.00239,0,,0
org/joda/time/format/DateTimeFormatter,19,458,        long millis = DateTimeUtils.getInstantMillis(instant);,0.00239,0,,0
org/joda/time/format/DateTimeFormatter,19,459,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0.00239,0,,0
org/joda/time/format/DateTimeFormatter,19,460,"        printTo(buf, millis, chrono);",0.00239,0,,0
org/joda/time/format/DateTimeFormatter,19,461,    },0.00239,0,,0
org/joda/time/format/FormatUtils,19,83,                digits = 4;,0.00236,0,,0
org/joda/time/format/FormatUtils,19,82,            } else if (value < 10000) {,0.00236,0,,0
org/joda/time/format/DateTimeFormatter,19,617,        DateTimePrinter printer = requirePrinter();,0.00235,0,,0
org/joda/time/format/DateTimeFormatter,19,618,        chrono = selectChronology(chrono);,0.00235,0,,0
org/joda/time/format/DateTimeFormatter,19,621,        DateTimeZone zone = chrono.getZone();,0.00235,0,,0
org/joda/time/format/DateTimeFormatter,19,622,        int offset = zone.getOffset(instant);,0.00235,0,,0
org/joda/time/format/DateTimeFormatter,19,623,        long adjustedInstant = instant + offset;,0.00235,0,,0
org/joda/time/format/DateTimeFormatter,19,624,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,0.00235,0,,0
org/joda/time/format/DateTimeFormatter,19,630,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0.00235,0,,0
org/joda/time/format/DateTimeFormatter,19,631,    },0.00235,0,,0
org/joda/time/format/FormatUtils,19,80,            if (value < 1000) {,0.00233,0,,0
org/joda/time/format/FormatUtils,19,87,            for (; size > digits; size--) {,0.00233,0,,0
org/joda/time/format/FormatUtils,19,90,            buf.append(Integer.toString(value));,0.00233,0,,0
org/joda/time/format/ISODateTimeFormat,19,1653,        if (lte == null) {,0.00216,0,,0
org/joda/time/format/ISODateTimeFormat,19,1654,            lte = new DateTimeFormatterBuilder(),0.00216,0,,0
org/joda/time/format/ISODateTimeFormat,19,1658,        return lte;,0.00216,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2608,            return iPrintedLengthEstimate;,0.00199,0,,0
org/joda/time/format/ISODateTimeFormat,19,1703,        if (ze == null) {,0.00193,0,,0
org/joda/time/format/ISODateTimeFormat,19,1704,            ze = new DateTimeFormatterBuilder(),0.00193,0,,0
org/joda/time/format/ISODateTimeFormat,19,1708,        return ze;,0.00193,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2101,                est += iMinFields - 1;,0.00189,0,,0
org/joda/time/format/FormatUtils,19,67,        } else if (value < 100) {,0.00189,0,,0
org/joda/time/format/FormatUtils,19,64,                buf.append('0');,0.00188,0,,0
org/joda/time/format/FormatUtils,19,63,            for (; size > 1; size--) {,0.00187,0,,0
org/joda/time/format/FormatUtils,19,66,            buf.append((char)(value + '0'));,0.00187,0,,0
org/joda/time/format/DateTimeFormatter,19,656,        DateTimePrinter printer = iPrinter;,0.00185,0,,0
org/joda/time/format/DateTimeFormatter,19,657,        if (printer == null) {,0.00185,0,,0
org/joda/time/format/DateTimeFormatter,19,660,        return printer;,0.00185,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,532,        if (fieldType == null) {,0.00184,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,535,        if (maxDigits < minDigits) {,0.00184,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,538,        if (minDigits < 0 || maxDigits <= 0) {,0.00184,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,541,"        return append0(new Fraction(fieldType, minDigits, maxDigits));",0.00184,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,559,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);",0.00184,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1857,            super();,0.00184,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1858,            iFieldType = fieldType;,0.00184,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1860,            if (maxDigits > 18) {,0.00184,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1863,            iMinDigits = minDigits;,0.00184,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1864,            iMaxDigits = maxDigits;,0.00184,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1865,        },0.00184,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1868,            return iMaxDigits;,0.00184,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2026,            return iMaxDigits;,0.00184,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2099,            int est = 1 + iMinFields << 1;,0.00182,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2100,            if (iShowSeparators) {,0.00182,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2103,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,0.00182,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2106,            return est;,0.00182,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2236,            return estimatePrintedLength();,0.00182,0,,0
org/joda/time/DateTimeUtils,19,167,        Chronology chrono = instant.getChronology();,0.00178,0,,0
org/joda/time/DateTimeUtils,19,168,        if (chrono == null) {,0.00178,0,,0
org/joda/time/DateTimeUtils,19,171,        return chrono;,0.00178,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1053,        return append0(new TimeZoneOffset,0.00174,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2083,            super();,0.00173,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2084,            iZeroOffsetPrintText = zeroOffsetPrintText;,0.00173,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2085,            iZeroOffsetParseText = zeroOffsetParseText;,0.00173,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2086,            iShowSeparators = showSeparators;,0.00173,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2087,            if (minFields <= 0 || maxFields < minFields) {,0.00173,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2090,            if (minFields > 4) {,0.00173,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2094,            iMinFields = minFields;,0.00173,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2095,            iMaxFields = maxFields;,0.00173,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2096,        },0.00173,0,,0
org/joda/time/DateTimeUtils,19,164,        if (instant == null) {,0.0017,0,,0
org/joda/time/format/ISODateTimeFormat,19,1681,        if (sme == null) {,0.00169,0,,0
org/joda/time/format/ISODateTimeFormat,19,1682,            sme = new DateTimeFormatterBuilder(),0.00169,0,,0
org/joda/time/format/ISODateTimeFormat,19,1687,        return sme;,0.00169,0,,0
org/joda/time/format/ISODateTimeFormat,19,1671,        if (mhe == null) {,0.00169,0,,0
org/joda/time/format/ISODateTimeFormat,19,1672,            mhe = new DateTimeFormatterBuilder(),0.00169,0,,0
org/joda/time/format/ISODateTimeFormat,19,1677,        return mhe;,0.00169,0,,0
org/joda/time/format/ISODateTimeFormat,19,1662,        if (hde == null) {,0.00168,0,,0
org/joda/time/format/ISODateTimeFormat,19,1663,            hde = new DateTimeFormatterBuilder(),0.00168,0,,0
org/joda/time/format/ISODateTimeFormat,19,1667,        return hde;,0.00168,0,,0
org/joda/time/DateTimeUtils,19,149,        return instant.getMillis();,0.00166,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,647,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0.00162,0,,0
org/joda/time/format/FormatUtils,19,50,        if (value < 0) {,0.00159,0,,0
org/joda/time/format/FormatUtils,19,62,        if (value < 10) {,0.00159,0,,0
org/joda/time/format/FormatUtils,19,92,    },0.00159,0,,0
org/joda/time/DateTimeUtils,19,146,        if (instant == null) {,0.00158,0,,0
org/joda/time/chrono/ZonedChronology,19,147,        return instant;,0.00152,0,,0
org/joda/time/format/ISODateTimeFormat,19,1604,        if (dme == null) {,0.00151,0,,0
org/joda/time/format/ISODateTimeFormat,19,1605,            dme = new DateTimeFormatterBuilder(),0.00151,0,,0
org/joda/time/format/ISODateTimeFormat,19,1610,        return dme;,0.00151,0,,0
org/joda/time/chrono/ZonedChronology,19,139,        DateTimeZone zone = getZone();,0.00151,0,,0
org/joda/time/chrono/ZonedChronology,19,140,        int offset = zone.getOffsetFromLocal(instant);,0.00151,0,,0
org/joda/time/chrono/ZonedChronology,19,141,        instant -= offset;,0.00151,0,,0
org/joda/time/chrono/ZonedChronology,19,142,        if (offset != zone.getOffset(instant)) {,0.00151,0,,0
org/joda/time/chrono/ZonedChronology,19,119,        return localToUTC(getBase().getDateTimeMillis,0.00151,0,,0
org/joda/time/chrono/BasicGJChronology,19,188,                if (isLeapYear(year)) {,0.00151,0,,0
org/joda/time/format/ISODateTimeFormat,19,1594,        if (mye == null) {,0.0015,0,,0
org/joda/time/format/ISODateTimeFormat,19,1595,            mye = new DateTimeFormatterBuilder(),0.0015,0,,0
org/joda/time/format/ISODateTimeFormat,19,1600,        return mye;,0.0015,0,,0
org/joda/time/DateTimeFieldType,19,524,                    return chronology.secondOfMinute();,0.00149,0,,0
org/joda/time/tz/CachedDateTimeZone,19,170,            periodStart = next;,0.00149,0,,0
org/joda/time/tz/CachedDateTimeZone,19,171,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0.00149,0,,0
org/joda/time/tz/CachedDateTimeZone,19,172,        },0.00149,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,667,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",0.00147,0,,0
org/joda/time/format/ISODateTimeFormat,19,1585,        if (ye == null) {,0.00146,0,,0
org/joda/time/format/ISODateTimeFormat,19,1586,            ye = new DateTimeFormatterBuilder(),0.00146,0,,0
org/joda/time/format/ISODateTimeFormat,19,1590,        return ye;,0.00146,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,687,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",0.00143,0,,0
org/joda/time/format/DateTimeFormatter,19,935,        chrono = DateTimeUtils.getChronology(chrono);,0.0014,0,,0
org/joda/time/format/DateTimeFormatter,19,936,        if (iChrono != null) {,0.0014,0,,0
org/joda/time/format/DateTimeFormatter,19,939,        if (iZone != null) {,0.0014,0,,0
org/joda/time/format/DateTimeFormatter,19,942,        return chrono;,0.0014,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,779,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0.0014,0,,0
org/joda/time/DateTimeZone,19,900,        } else if (offsetLocal > 0) {,0.00139,1,,0
org/joda/time/DateTimeZone,19,910,        return offsetAdjusted;,0.00138,0,,0
org/joda/time/DateTimeFieldType,19,498,                    return chronology.dayOfMonth();,0.00137,0,,0
org/joda/time/DateTimeZone,19,882,        final int offsetLocal = getOffset(instantLocal);,0.00136,0,,0
org/joda/time/DateTimeZone,19,884,        final long instantAdjusted = instantLocal - offsetLocal;,0.00136,0,,0
org/joda/time/DateTimeZone,19,885,        final int offsetAdjusted = getOffset(instantAdjusted);,0.00136,0,,0
org/joda/time/DateTimeZone,19,887,        if (offsetLocal != offsetAdjusted) {,0.00136,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,737,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0.00136,0,,0
org/joda/time/chrono/BasicGJChronology,19,140,            return MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.00133,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,791,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0.00132,0,,0
org/joda/time/DateTimeFieldType,19,520,                    return chronology.minuteOfHour();,0.00132,0,,0
org/joda/time/chrono/BasicGJChronology,19,121,            return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.00129,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2718,"                        addArrayToList(printerList, ((Composite)element).iPrinters);",0.00129,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2727,"                        addArrayToList(parserList, ((Composite)element).iParsers);",0.00129,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2736,            if (array != null) {,0.00129,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2737,                for (int i=0; i<array.length; i++) {,0.00129,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2738,                    list.add(array[i]);,0.00129,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2741,        },0.00129,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,448,        if (fieldType == null) {,0.00128,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,451,        if (maxDigits < minDigits) {,0.00128,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,454,        if (minDigits < 0 || maxDigits <= 0) {,0.00128,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,457,        if (minDigits <= 1) {,0.00128,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,460,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",0.00128,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,551,            } else if (iMode == 's') {,0.00128,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,554,                offset = 0;,0.00128,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0.00128,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,710,"                instant = chrono.monthOfYear().add(instant, 1);",0.00128,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",0.00128,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,725,                    if (daysToAdd > 0) {,0.00128,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,726,                        daysToAdd -= 7;,0.00128,0,,0
org/joda/time/DateTimeFieldType,19,496,                    return chronology.monthOfYear();,0.00128,0,,0
org/joda/time/DateTimeFieldType,19,516,                    return chronology.hourOfDay();,0.00127,0,,0
org/joda/time/DateTimeFieldType,19,492,                    return chronology.year();,0.00127,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,209,        if (formatter == null) {,0.00126,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,212,"        return append0(formatter.getPrinter(), formatter.getParser());",0.00126,0,,0
org/joda/time/format/DateTimeFormatter,19,171,        return iParser;,0.00125,0,,0
org/joda/time/format/FormatUtils,19,31,    private static final double LOG_10 = Math.log(10);,0.00125,0,,0
org/joda/time/format/DateTimeFormatter,19,153,        return iPrinter;,0.00123,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,345,        iFormatter = null;,0.00123,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,346,        iElementPairs.add(printer);,0.00123,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,347,        iElementPairs.add(parser);,0.00123,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,348,        return this;,0.00123,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1543,            return iTailZone.getOffset(instant);,0.0012,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,0.0012,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1141,            return true;,0.0012,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1131,            return true;,0.0012,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1104,                Object printer = iElementPairs.get(0);,0.0012,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1105,                Object parser = iElementPairs.get(1);,0.0012,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1107,                if (printer != null) {,0.0012,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1108,                    if (printer == parser || parser == null) {,0.0012,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1109,                        f = printer;,0.0012,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1304,            int standardOffset = iStandardOffset;,0.00119,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1305,            Recurrence startRecurrence = iStartRecurrence;,0.00119,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1306,            Recurrence endRecurrence = iEndRecurrence;,0.00119,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1311,                start = startRecurrence.next,0.00119,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1319,            },0.00119,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1322,                end = endRecurrence.next,0.00119,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1330,            },0.00119,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1332,            return (start > end) ? startRecurrence : endRecurrence;,0.00119,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,114,            yearToUse = thisYear + (monthToUse / iMax);,0.00119,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,115,            monthToUse = (monthToUse % iMax) + 1;,0.00119,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,575,"                    next = chrono.year().add(next, 1);",0.00119,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0.00119,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,577,"                    next = setDayOfMonthNext(chrono, next);",0.00119,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,578,"                    next = setDayOfWeek(chrono, next);",0.00119,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,98,        long timePart = iChronology.getMillisOfDay(instant);,0.00118,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,103,        int thisYear = iChronology.getYear(instant);,0.00118,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,104,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.00118,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,112,        int monthToUse = thisMonth - 1 + months;,0.00118,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,113,        if (monthToUse >= 0) {,0.00118,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,136,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.00118,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,137,"        int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);",0.00118,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,138,        if (dayToUse > maxDay) {,0.00118,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,144,        long datePart =,0.00118,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,146,        return datePart + timePart;,0.00118,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,92,        if (months == 0) {,0.00118,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1579,            long end = transitions[transitions.length - 1];,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1580,            if (instant < end) {,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1583,            return iTailZone.nextTransition(instant);,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1199,            int standardOffset = iStandardOffset;,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1200,            Recurrence startRecurrence = iStartRecurrence;,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1201,            Recurrence endRecurrence = iEndRecurrence;,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1206,                start = startRecurrence.next,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1208,                if (instant > 0 && start < 0) {,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1218,            },0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1221,                end = endRecurrence.next,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1223,                if (instant > 0 && end < 0) {,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1233,            },0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1235,            return (start > end) ? end : start;,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,573,"                next = setDayOfWeek(chrono, next);",0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,574,                if (next <= instant) {,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,719,            if (daysToAdd != 0) {,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,720,                if (iAdvance) {,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,731,            return instant;,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,549,            if (iMode == 'w') {,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,558,            instant += offset;,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,560,            Chronology chrono = ISOChronology.getInstanceUTC();,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,563,"            next = chrono.millisOfDay().set(next, 0);",0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,565,"            next = setDayOfMonthNext(chrono, next);",0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,567,            if (iDayOfWeek == 0) {,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,583,            return next - offset;,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,672,"                next = setDayOfMonth(chrono, next);",0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,682,            },0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,683,            return next;,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,706,            if (iDayOfMonth >= 0) {,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,713,            return instant;,0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0.00116,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,776,            return iSaveMillis;,0.00116,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,61,        int thisYear = get(instant);,0.00112,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,62,"        int newYear = FieldUtils.safeAdd(thisYear, years);",0.00112,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,63,"        return set(instant, newYear);",0.00112,0,,0
org/joda/time/field/BaseDateTimeField,19,253,"        return getDurationField().add(instant, value);",0.00112,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,58,        if (years == 0) {,0.00112,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,408,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",0.0011,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,396,        if (fieldType == null) {,0.0011,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,399,        if (maxDigits < minDigits) {,0.0011,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,402,        if (minDigits < 0 || maxDigits <= 0) {,0.0011,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,405,        if (minDigits <= 1) {,0.0011,0,,0
org/joda/time/chrono/AssembledChronology,19,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.00109,0,,0
org/joda/time/chrono/BasicChronology,19,535,            daysSince19700101 = instant / DateTimeConstants.MILLIS_PER_DAY;,0.00108,0,,0
org/joda/time/chrono/BasicChronology,19,544,        return 1 + (int) ((daysSince19700101 + 3) % 7);,0.00108,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1174,            return 1;,0.00107,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1198,            return 1;,0.00107,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1288,            return iMaxParsedDigits;,0.00107,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,359,        return append0(new CharacterLiteral(c));,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1169,            super();,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1170,            iValue = value;,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1171,        },0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2580,                int size = printerList.size();,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2581,                iPrinters = new DateTimePrinter[size];,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2582,                int printEst = 0;,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2583,                for (int i=0; i<size; i++) {,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2584,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2585,                    printEst += printer.estimatePrintedLength();,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2586,                    iPrinters[i] = printer;,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2588,                iPrintedLengthEstimate = printEst;,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2595,                int size = parserList.size();,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2596,                iParsers = new DateTimeParser[size];,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2597,                int parseEst = 0;,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2598,                for (int i=0; i<size; i++) {,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2599,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2600,                    parseEst += parser.estimateParsedLength();,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2601,                    iParsers[i] = parser;,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2603,                iParsedLengthEstimate = parseEst;,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2715,                Object element = elementPairs.get(i);,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2716,                if (element instanceof DateTimePrinter) {,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2717,                    if (element instanceof Composite) {,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2720,                        printerList.add(element);,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2724,                element = elementPairs.get(i + 1);,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2725,                if (element instanceof DateTimeParser) {,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2726,                    if (element instanceof Composite) {,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2729,                        parserList.add(element);,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1430,            return iMaxParsedDigits;,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1425,"            super(fieldType, maxParsedDigits, signed);",0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1426,            iMinPrintedDigits = minPrintedDigits;,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1427,        },0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1281,            super();,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1282,            iFieldType = fieldType;,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1283,            iMaxParsedDigits = maxParsedDigits;,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1284,            iSigned = signed;,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1285,        },0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1129,                return ((Composite)f).isPrinter();,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1139,                return ((Composite)f).isParser();,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2701,            return iPrinters != null;,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2705,            return iParsers != null;,0.00106,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1117,                f = new Composite(iElementPairs);,0.00105,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2569,            super();,0.00105,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2571,            List<Object> printerList = new ArrayList<Object>();,0.00105,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2572,            List<Object> parserList = new ArrayList<Object>();,0.00105,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2574,"            decompose(elementPairs, printerList, parserList);",0.00105,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2576,            if (printerList.size() <= 0) {,0.00105,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2591,            if (parserList.size() <= 0) {,0.00105,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2605,        },0.00105,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2713,            int size = elementPairs.size();,0.00105,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2714,            for (int i=0; i<size; i+=2) {,0.00105,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2733,        },0.00105,0,,0
org/joda/time/field/MillisDurationField,19,117,"        return FieldUtils.safeAdd(instant, value);",0.00104,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,104,        Object f = getFormatter();,0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,105,        DateTimePrinter printer = null;,0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,106,        if (isPrinter(f)) {,0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,107,            printer = (DateTimePrinter) f;,0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,109,        DateTimeParser parser = null;,0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,110,        if (isParser(f)) {,0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,111,            parser = (DateTimeParser) f;,0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,113,        if (printer != null || parser != null) {,0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,114,"            return new DateTimeFormatter(printer, parser);",0.00102,0,,0
org/joda/time/format/DateTimeFormatter,19,107,        super();,0.00102,0,,0
org/joda/time/format/DateTimeFormatter,19,108,        iPrinter = printer;,0.00102,0,,0
org/joda/time/format/DateTimeFormatter,19,109,        iParser = parser;,0.00102,0,,0
org/joda/time/format/DateTimeFormatter,19,110,        iLocale = null;,0.00102,0,,0
org/joda/time/format/DateTimeFormatter,19,111,        iOffsetParsed = false;,0.00102,0,,0
org/joda/time/format/DateTimeFormatter,19,112,        iChrono = null;,0.00102,0,,0
org/joda/time/format/DateTimeFormatter,19,113,        iZone = null;,0.00102,0,,0
org/joda/time/format/DateTimeFormatter,19,114,        iPivotYear = null;,0.00102,0,,0
org/joda/time/format/DateTimeFormatter,19,115,        iDefaultYear = 2000;,0.00102,0,,0
org/joda/time/format/DateTimeFormatter,19,116,    },0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,336,        iFormatter = null;,0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,338,        iElementPairs.add(element);,0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,339,        iElementPairs.add(element);,0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,340,        return this;,0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1127,        if (f instanceof DateTimePrinter) {,0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1128,            if (f instanceof Composite) {,0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1137,        if (f instanceof DateTimeParser) {,0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1138,            if (f instanceof Composite) {,0.00102,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1100,        Object f = iFormatter;,0.00101,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1102,        if (f == null) {,0.00101,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1103,            if (iElementPairs.size() == 2) {,0.00101,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1116,            if (f == null) {,0.00101,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1120,            iFormatter = f;,0.00101,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1123,        return f;,0.00101,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,83,        super();,0.00101,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,84,        iElementPairs = new ArrayList<Object>();,0.00101,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,85,    },0.00101,0,,0
org/joda/time/field/FieldUtils,19,70,        return sum;,0.00101,0,,0
org/joda/time/field/FieldUtils,19,64,        int sum = val1 + val2;,0.001,0,,0
org/joda/time/field/FieldUtils,19,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.001,0,,0
org/joda/time/chrono/BasicGJChronology,19,180,            if (isLeapYear(thisYear)) {,0.00099,0,,0
org/joda/time/field/PreciseDurationField,19,104,        long addition = value * iUnitMillis;  // safe,0.00096,0,,0
org/joda/time/field/PreciseDurationField,19,105,"        return FieldUtils.safeAdd(instant, addition);",0.00096,0,,0
org/joda/time/base/BaseDateTime,19,304,        return iChronology;,0.00087,0,,0
org/joda/time/field/FieldUtils,19,82,        long sum = val1 + val2;,0.00085,0,,0
org/joda/time/field/FieldUtils,19,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.00085,0,,0
org/joda/time/field/FieldUtils,19,88,        return sum;,0.00085,0,,0
org/joda/time/DateTimeFieldType,19,480,            chronology = DateTimeUtils.getChronology(chronology);,0.00084,0,,0
org/joda/time/DateTimeFieldType,19,482,            switch (iOrdinal) {,0.00084,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1540,            if (iTailZone == null) {,0.0008,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1576,            if (iTailZone == null) {,0.00078,0,,0
org/joda/time/base/BaseDateTime,19,295,        return iMillis;,0.00072,0,,0
org/joda/time/field/PreciseDateTimeField,19,80,            return (int) ((instant / getUnitMillis()) % iRange);,0.0007,0,,0
org/joda/time/chrono/BasicChronology,19,435,"        return getMonthOfYear(millis, getYear(millis));",0.00066,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,72,        return iChronology.getMonthOfYear(instant);,0.00066,0,,0
org/joda/time/chrono/GregorianChronology,19,213,                leapYears--;,0.00064,0,,0
org/joda/time/chrono/AssembledChronology,19,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,0.00061,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,19,56,        return iChronology.getDayOfWeek(instant);,0.0006,0,,0
org/joda/time/chrono/BasicChronology,19,534,        if (instant >= 0) {,0.00059,0,,0
org/joda/time/chrono/BasicGJChronology,19,134,        return (value > 28 ? getDaysInMonthMax(instant) : 28);,0.00058,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,96,"        return iChronology.getDaysInMonthMaxForSet(instant, value);",0.00058,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,292,"        FieldUtils.verifyValueBounds(this, month, MIN, iMax);",0.00058,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,294,        int thisYear = iChronology.getYear(instant);,0.00058,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,296,"        int thisDom = iChronology.getDayOfMonth(instant, thisYear);",0.00058,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,297,"        int maxDom = iChronology.getDaysInYearMonth(thisYear, month);",0.00058,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,298,        if (thisDom > maxDom) {,0.00058,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,303,"        return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +",0.00058,0,,0
org/joda/time/chrono/BasicChronology,19,458,"        int month = getMonthOfYear(millis, year);",0.00058,0,,0
org/joda/time/chrono/BasicChronology,19,459,"        return getDayOfMonth(millis, year, month);",0.00058,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,82,        FieldUtils.verifyValueBounds,0.00058,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,84,"        return iChronology.setYear(instant, year);",0.00058,0,,0
org/joda/time/chrono/BasicChronology,19,167,        if ((base = getBase()) != null) {,0.00057,0,,0
org/joda/time/chrono/BasicChronology,19,172,"        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);",0.00057,0,,0
org/joda/time/chrono/BasicChronology,19,173,"        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);",0.00057,0,,0
org/joda/time/chrono/BasicChronology,19,174,"        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);",0.00057,0,,0
org/joda/time/chrono/BasicChronology,19,175,"        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);",0.00057,0,,0
org/joda/time/chrono/BasicChronology,19,177,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth)",0.00057,0,,0
org/joda/time/chrono/BasicChronology,19,552,            return (int) (instant % DateTimeConstants.MILLIS_PER_DAY);,0.00056,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,78,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(),",0.00056,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,80,        return instant + (value - get(instant)) * iUnitMillis;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,168,                break;,0.00056,0,,0
org/joda/time/field/PreciseDateTimeField,19,111,"        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());",0.00056,0,,0
org/joda/time/field/PreciseDateTimeField,19,112,        return instant + (value - get(instant)) * iUnitMillis;,0.00056,0,,0
org/joda/time/chrono/BasicGJChronology,19,175,        int thisYear = getYear(instant);,0.00056,0,,0
org/joda/time/chrono/BasicGJChronology,19,176,"        int dayOfYear = getDayOfYear(instant, thisYear);",0.00056,0,,0
org/joda/time/chrono/BasicGJChronology,19,177,        int millisOfDay = getMillisOfDay(instant);,0.00056,0,,0
org/joda/time/chrono/BasicGJChronology,19,179,        if (dayOfYear > (31 + 28)) { // after Feb 28,0.00056,0,,0
org/joda/time/chrono/BasicGJChronology,19,195,"        instant = getYearMonthDayMillis(year, 1, dayOfYear);",0.00056,0,,0
org/joda/time/chrono/BasicGJChronology,19,196,        instant += millisOfDay;,0.00056,0,,0
org/joda/time/chrono/BasicGJChronology,19,198,        return instant;,0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1533,            i = ~i;,0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1534,            if (i < transitions.length) {,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,204,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,205,                if (iOffset == Integer.MIN_VALUE) {,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,206,                    iOffset = iZoneRef.getOffset(iPeriodStart);,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,208,                return iOffset;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,111,        return getInfo(instant).getOffset(instant);,0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1528,            long[] transitions = iTransitions;,0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1529,"            int i = Arrays.binarySearch(transitions, instant);",0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1530,            if (i >= 0) {,0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1570,            long[] transitions = iTransitions;,0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1571,"            int i = Arrays.binarySearch(transitions, instant);",0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1572,            i = (i >= 0) ? (i + 1) : ~i;,0.00056,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1573,            if (i < transitions.length) {,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,188,"        Info(DateTimeZone zone, long periodStart) {",0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,185,        private int iOffset = Integer.MIN_VALUE;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,186,        private int iStandardOffset = Integer.MIN_VALUE;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,189,            iPeriodStart = periodStart;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,190,            iZoneRef = zone;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,191,        },0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,148,        int period = (int)(millis >> 32);,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,149,        Info[] cache = iInfoCache;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,150,        int index = period & cInfoCacheMask;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,151,        Info info = cache[index];,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,152,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,153,            info = createInfo(millis);,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,154,            cache[index] = info;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,156,        return info;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,160,        long periodStart = millis & (0xffffffffL << 32);,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,161,"        Info info = new Info(iZone, periodStart);",0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,163,        long end = periodStart | 0xffffffffL;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,164,        Info chain = info;,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,166,            long next = iZone.nextTransition(periodStart);,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,167,            if (next == periodStart || next > end) {,0.00056,0,,0
org/joda/time/tz/CachedDateTimeZone,19,174,        return info;,0.00056,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,55,        return 1;,0.00056,0,,0
org/joda/time/chrono/BasicChronology,19,485,        long yearStart = getYearMillis(year);,0.00056,0,,0
org/joda/time/chrono/BasicChronology,19,486,        return (int) ((instant - yearStart) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.00056,0,,0
org/joda/time/chrono/BasicChronology,19,551,        if (instant >= 0) {,0.00055,0,,0
org/joda/time/chrono/BasicGJChronology,19,123,            return MIN_DAYS_PER_MONTH_ARRAY[month - 1];,0.00051,0,,0
org/joda/time/base/BaseDateTime,19,256,"        iMillis = checkInstant(instant, iChronology);",0.00051,0,,0
org/joda/time/base/BaseDateTime,19,257,    },0.00051,0,,0
org/joda/time/base/BaseDateTime,19,252,        super();,0.00051,0,,0
org/joda/time/base/BaseDateTime,19,253,        iChronology = checkChronology(chronology);,0.00051,0,,0
org/joda/time/base/BaseDateTime,19,254,"        long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.00051,0,,0
org/joda/time/field/PreciseDateTimeField,19,131,        return iRange - 1;,0.00051,0,,0
org/joda/time/chrono/BasicChronology,19,448,        int year = getYear(millis);,0.00051,0,,0
org/joda/time/chrono/BasicChronology,19,449,"        int month = getMonthOfYear(millis, year);",0.00051,0,,0
org/joda/time/chrono/BasicChronology,19,450,"        return getDayOfMonth(millis, year, month);",0.00051,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,47,        return iChronology.getDayOfMonth(instant);,0.00051,0,,0
org/joda/time/field/FieldUtils,19,219,    },0.0005,0,,0
org/joda/time/field/FieldUtils,19,214,        if ((value < lowerBound) || (value > upperBound)) {,0.0005,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,54,        return iChronology.getYear(instant);,0.0005,0,,0
org/joda/time/chrono/BasicGJChronology,19,142,            return MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[month - 1];,0.0005,0,,0
org/joda/time/chrono/BasicChronology,19,468,        long dateMillis = getYearMillis(year);,0.0005,0,,0
org/joda/time/chrono/BasicChronology,19,469,"        dateMillis += getTotalMillisByYearMonth(year, month);",0.0005,0,,0
org/joda/time/chrono/BasicChronology,19,470,        return (int) ((millis - dateMillis) / DateTimeConstants.MILLIS_PER_DAY) + 1;,0.0005,0,,0
org/joda/time/chrono/AssembledChronology,19,107,        if ((base = iBase) != null) {,0.0005,0,,0
org/joda/time/chrono/AssembledChronology,19,108,            return base.getZone();,0.0005,0,,0
org/joda/time/chrono/BasicGJChronology,19,88,        int i = (int)((millis - getYearMillis(year)) >> 10);,0.0005,0,,0
org/joda/time/chrono/BasicGJChronology,19,93,        return,0.0005,0,,0
org/joda/time/chrono/BasicChronology,19,605,"        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, getDaysInYearMonth(year, monthOfYear));",0.0005,0,,0
org/joda/time/chrono/BasicChronology,19,606,"        return getYearMonthDayMillis(year, monthOfYear, dayOfMonth);",0.0005,0,,0
org/joda/time/field/PreciseDateTimeField,19,79,        if (instant >= 0) {,0.00049,0,,0
org/joda/time/chrono/BasicChronology,19,603,"        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());",0.00049,0,,0
org/joda/time/chrono/BasicChronology,19,604,"        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, getMaxMonth(year));",0.00049,0,,0
org/joda/time/chrono/BasicChronology,19,682,        return getMaxMonth();,0.00049,0,,0
org/joda/time/field/FieldUtils,19,237,    },0.00049,0,,0
org/joda/time/field/FieldUtils,19,232,        if ((value < lowerBound) || (value > upperBound)) {,0.00049,0,,0
org/joda/time/chrono/GregorianChronology,19,233,        return MILLIS_PER_YEAR / 2;,0.00049,0,,0
org/joda/time/chrono/GregorianChronology,19,241,        return (1970L * MILLIS_PER_YEAR) / 2;,0.00049,0,,0
org/joda/time/chrono/BasicGJChronology,19,120,        if (isLeapYear(year)) {,0.00049,0,,0
org/joda/time/chrono/BasicChronology,19,399,        long unitMillis = getAverageMillisPerYearDividedByTwo();,0.00049,0,,0
org/joda/time/chrono/BasicChronology,19,400,        long i2 = (instant >> 1) + getApproxMillisAtEpochDividedByTwo();,0.00049,0,,0
org/joda/time/chrono/BasicChronology,19,401,        if (i2 < 0) {,0.00049,0,,0
org/joda/time/chrono/BasicChronology,19,404,        int year = (int) (i2 / unitMillis);,0.00049,0,,0
org/joda/time/chrono/BasicChronology,19,406,        long yearStart = getYearMillis(year);,0.00049,0,,0
org/joda/time/chrono/BasicChronology,19,407,        long diff = instant - yearStart;,0.00049,0,,0
org/joda/time/chrono/BasicChronology,19,409,        if (diff < 0) {,0.00049,0,,0
org/joda/time/chrono/BasicChronology,19,411,        } else if (diff >= DateTimeConstants.MILLIS_PER_DAY * 365L) {,0.00049,0,,0
org/joda/time/chrono/BasicChronology,19,428,        return year;,0.00049,0,,0
org/joda/time/chrono/BasicGJChronology,19,139,        if (isLeapYear(year)) {,0.00049,0,,0
org/joda/time/chrono/ISOChronology,19,77,        return INSTANCE_UTC;,0.00048,0,,0
org/joda/time/chrono/GregorianChronology,19,221,        return MIN_YEAR;,0.00048,0,,0
org/joda/time/chrono/GregorianChronology,19,202,        int leapYears = year / 100;,0.00048,0,,0
org/joda/time/chrono/GregorianChronology,19,203,        if (year < 0) {,0.00048,0,,0
org/joda/time/chrono/GregorianChronology,19,211,            leapYears = (year >> 2) - leapYears + (leapYears >> 2);,0.00048,0,,0
org/joda/time/chrono/GregorianChronology,19,212,            if (isLeapYear(year)) {,0.00048,0,,0
org/joda/time/chrono/GregorianChronology,19,217,        return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;,0.00048,0,,0
org/joda/time/chrono/GregorianChronology,19,197,        return ((year & 3) == 0) && ((year % 100) != 0 || (year % 400) == 0);,0.00047,0,,0
org/joda/time/base/BaseDateTime,19,284,        return instant;,0.00045,0,,0
org/joda/time/chrono/BasicChronology,19,385,        long millis = getYearMillis(year);,0.00044,0,,0
org/joda/time/chrono/BasicChronology,19,386,"        millis += getTotalMillisByYearMonth(year, month);",0.00044,0,,0
org/joda/time/chrono/BasicChronology,19,387,        return millis + (dayOfMonth - 1) * (long)DateTimeConstants.MILLIS_PER_DAY;,0.00044,0,,0
org/joda/time/base/BaseDateTime,19,270,        return DateTimeUtils.getChronology(chronology);,0.00044,0,,0
org/joda/time/base/AbstractDateTime,19,51,        super();,0.00044,0,,0
org/joda/time/base/AbstractDateTime,19,52,    },0.00044,0,,0
org/joda/time/chrono/BasicChronology,19,360,        return getYearInfo(year).iFirstDayMillis;,0.00043,0,,0
org/joda/time/chrono/BasicChronology,19,738,        YearInfo info = iYearInfoCache[year & CACHE_MASK];,0.00043,0,,0
org/joda/time/chrono/BasicChronology,19,739,        if (info == null || info.iYear != year) {,0.00043,0,,0
org/joda/time/chrono/BasicChronology,19,740,"            info = new YearInfo(year, calculateFirstDayOfYearMillis(year));",0.00043,0,,0
org/joda/time/chrono/BasicChronology,19,741,            iYearInfoCache[year & CACHE_MASK] = info;,0.00043,0,,0
org/joda/time/chrono/BasicChronology,19,743,        return info;,0.00043,0,,0
org/joda/time/chrono/BasicChronology,19,770,"        YearInfo(int year, long firstDayMillis) {",0.00043,0,,0
org/joda/time/chrono/BasicChronology,19,771,            iYear = year;,0.00043,0,,0
org/joda/time/chrono/BasicChronology,19,772,            iFirstDayMillis = firstDayMillis;,0.00043,0,,0
org/joda/time/chrono/BasicChronology,19,773,        },0.00043,0,,0
org/joda/time/base/AbstractInstant,19,61,        super();,0.00042,0,,0
org/joda/time/base/AbstractInstant,19,62,    },0.00042,0,,0
org/joda/time/chrono/ISOChronology,19,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0.00039,0,,0
org/joda/time/chrono/ISOChronology,19,108,"                cCache.put(zone, chrono);",0.00039,0,,0
org/joda/time/chrono/ISOChronology,19,96,        if (zone == null) {,0.00037,0,,0
org/joda/time/chrono/ISOChronology,19,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,0.00037,0,,0
org/joda/time/chrono/ISOChronology,19,100,        ISOChronology chrono = cFastCache[index];,0.00037,0,,0
org/joda/time/chrono/ISOChronology,19,101,        if (chrono != null && chrono.getZone() == zone) {,0.00037,0,,0
org/joda/time/chrono/ISOChronology,19,104,        synchronized (cCache) {,0.00037,0,,0
org/joda/time/chrono/ISOChronology,19,105,            chrono = cCache.get(zone);,0.00037,0,,0
org/joda/time/chrono/ISOChronology,19,106,            if (chrono == null) {,0.00037,0,,0
org/joda/time/chrono/ISOChronology,19,110,        },0.00037,0,,0
org/joda/time/chrono/ISOChronology,19,111,        cFastCache[index] = chrono;,0.00037,0,,0
org/joda/time/chrono/ISOChronology,19,112,        return chrono;,0.00037,0,,0
org/joda/time/DateTimeUtils,19,255,        return chrono;,0.00037,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,127,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.00035,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,131,        return null;,0.00035,0,,0
org/joda/time/tz/CachedDateTimeZone,19,131,        return iZone.hashCode();,0.00034,0,,0
org/joda/time/chrono/ISOChronology,19,133,        return INSTANCE_UTC;,0.00034,0,,0
org/joda/time/DateTimeZone,19,1227,        return 57 + getID().hashCode();,0.00034,0,,0
org/joda/time/field/UnsupportedDurationField,19,218,        return 0;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,82,"        super(base, zone);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,83,    },0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,56,        if (base == null) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,59,        base = base.withUTC();,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,60,        if (base == null) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,63,        if (zone == null) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,66,"        return new ZonedChronology(base, zone);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,72,        return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,86,        return (DateTimeZone)getParam();,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,153,"        HashMap<Object, Object> converted = new HashMap<Object, Object>();",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,157,"        fields.eras = convertField(fields.eras, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,158,"        fields.centuries = convertField(fields.centuries, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,159,"        fields.years = convertField(fields.years, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,160,"        fields.months = convertField(fields.months, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,161,"        fields.weekyears = convertField(fields.weekyears, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,162,"        fields.weeks = convertField(fields.weeks, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,163,"        fields.days = convertField(fields.days, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,165,"        fields.halfdays = convertField(fields.halfdays, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,166,"        fields.hours = convertField(fields.hours, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,167,"        fields.minutes = convertField(fields.minutes, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,168,"        fields.seconds = convertField(fields.seconds, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,169,"        fields.millis = convertField(fields.millis, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,173,"        fields.year = convertField(fields.year, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,174,"        fields.yearOfEra = convertField(fields.yearOfEra, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,175,"        fields.yearOfCentury = convertField(fields.yearOfCentury, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,176,"        fields.centuryOfEra = convertField(fields.centuryOfEra, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,177,"        fields.era = convertField(fields.era, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,178,"        fields.dayOfWeek = convertField(fields.dayOfWeek, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,179,"        fields.dayOfMonth = convertField(fields.dayOfMonth, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,180,"        fields.dayOfYear = convertField(fields.dayOfYear, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,181,"        fields.monthOfYear = convertField(fields.monthOfYear, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,182,"        fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,183,"        fields.weekyear = convertField(fields.weekyear, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,184,"        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,186,"        fields.millisOfSecond = convertField(fields.millisOfSecond, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,187,"        fields.millisOfDay = convertField(fields.millisOfDay, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,188,"        fields.secondOfMinute = convertField(fields.secondOfMinute, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,189,"        fields.secondOfDay = convertField(fields.secondOfDay, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,190,"        fields.minuteOfHour = convertField(fields.minuteOfHour, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,191,"        fields.minuteOfDay = convertField(fields.minuteOfDay, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,192,"        fields.hourOfDay = convertField(fields.hourOfDay, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,193,"        fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,194,"        fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,195,"        fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,196,"        fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,197,    },0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,200,        if (field == null || !field.isSupported()) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,201,            return field;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,203,        if (converted.containsKey(field)) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,204,            return (DurationField)converted.get(field);,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,206,"        ZonedDurationField zonedField = new ZonedDurationField(field, getZone());",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,207,"        converted.put(field, zonedField);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,208,        return zonedField;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,212,        if (field == null || !field.isSupported()) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,215,        if (converted.containsKey(field)) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,218,        ZonedDateTimeField zonedField =,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,223,"        converted.put(field, zonedField);",0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,224,        return zonedField;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,389,            super(field.getType());,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,390,            if (!field.isSupported()) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,393,            iField = field;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,394,            iZone = zone;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,395,            iDurationField = durationField;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,396,            iTimeField = useTimeArithmetic(durationField);,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,397,            iRangeDurationField = rangeDurationField;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,398,            iLeapDurationField = leapDurationField;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,399,        },0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,284,            super(field.getType());,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,285,            if (!field.isSupported()) {,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,288,            iField = field;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,289,            iTimeField = useTimeArithmetic(field);,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,290,            iZone = zone;,0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,291,        },0.00034,0,,0
org/joda/time/chrono/ZonedChronology,19,298,            return iField.getUnitMillis();,0.00034,0,,0
org/joda/time/field/ScaledDurationField,19,109,        return getWrappedField().getUnitMillis() * iScalar;,0.00034,0,,0
org/joda/time/chrono/AssembledChronology,19,315,        return iParam;,0.00034,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,160,            return iUnitMillis;,0.00033,0,,0
org/joda/time/DateTimeUtils,19,252,        if (chrono == null) {,0.00033,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,328,        return iChronology.days();,0.00032,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,220,        return iChronology.weeks();,0.00032,0,,0
org/joda/time/field/PreciseDurationField,19,142,        long millis = iUnitMillis;,0.00032,0,,0
org/joda/time/field/PreciseDurationField,19,143,        int hash = (int) (millis ^ (millis >>> 32));,0.00032,0,,0
org/joda/time/field/PreciseDurationField,19,144,        hash += getType().hashCode();,0.00032,0,,0
org/joda/time/field/PreciseDurationField,19,145,        return hash;,0.00032,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,101,        return getWrappedField().getLeapDurationField();,0.00032,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,111,        return iChronology.days();,0.00032,0,,0
org/joda/time/field/ScaledDurationField,19,147,        long scalar = iScalar;,0.00032,0,,0
org/joda/time/field/ScaledDurationField,19,148,        int hash = (int) (scalar ^ (scalar >>> 32));,0.00032,0,,0
org/joda/time/field/ScaledDurationField,19,149,        hash += getType().hashCode();,0.00032,0,,0
org/joda/time/field/ScaledDurationField,19,150,        hash += getWrappedField().hashCode();,0.00032,0,,0
org/joda/time/field/ScaledDurationField,19,151,        return hash;,0.00032,0,,0
org/joda/time/field/MillisDurationField,19,155,        return (int) getUnitMillis();,0.00032,0,,0
org/joda/time/field/MillisDurationField,19,49,        return DurationFieldType.millis();,0.00032,0,,0
org/joda/time/field/BaseDateTimeField,19,726,        return null;,0.00032,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,19,94,        return iChronology.weeks();,0.00032,0,,0
org/joda/time/field/DecoratedDateTimeField,19,90,        return iField.getRangeDurationField();,0.00032,0,,0
org/joda/time/field/RemainderDateTimeField,19,139,        return iRangeField;,0.00032,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,208,        return null;,0.00032,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,56,        return iChronology.years();,0.00032,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,58,        return iChronology.weekyears();,0.00032,0,,0
org/joda/time/field/DecoratedDurationField,19,69,        return iField;,0.00032,0,,0
org/joda/time/field/BaseDurationField,19,55,        return iType;,0.00032,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,309,        return iChronology.years();,0.00032,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,51,        return iChronology.months();,0.00032,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,95,        return null;,0.00032,0,,0
org/joda/time/chrono/ISOChronology,19,122,"        super(base, null);",0.00032,0,,0
org/joda/time/chrono/ISOChronology,19,123,    },0.00032,0,,0
org/joda/time/chrono/ISOChronology,19,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",0.00032,0,,0
org/joda/time/chrono/ISOChronology,19,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,0.00032,0,,0
org/joda/time/chrono/ISOChronology,19,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,0.00032,0,,0
org/joda/time/chrono/ISOChronology,19,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",0.00032,0,,0
org/joda/time/chrono/ISOChronology,19,68,    },0.00032,0,,0
org/joda/time/chrono/ISOChronology,19,169,        if (getBase().getZone() == DateTimeZone.UTC) {,0.00032,0,,0
org/joda/time/chrono/ISOChronology,19,171,            fields.centuryOfEra = new DividedDateTimeField(,0.00032,0,,0
org/joda/time/chrono/ISOChronology,19,173,            fields.yearOfCentury = new RemainderDateTimeField(,0.00032,0,,0
org/joda/time/chrono/ISOChronology,19,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,0.00032,0,,0
org/joda/time/chrono/ISOChronology,19,178,            fields.centuries = fields.centuryOfEra.getDurationField();,0.00032,0,,0
org/joda/time/chrono/ISOChronology,19,180,    },0.00032,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,46,"        super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());",0.00032,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,47,    },0.00032,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,40,    static final DateTimeField INSTANCE = new ISOYearOfEraDateTimeField();,0.00032,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,87,        return 0;,0.00032,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,91,        return getWrappedField().getMaximumValue();,0.00032,0,,0
org/joda/time/field/PreciseDateTimeField,19,122,        return iRangeField;,0.00032,0,,0
org/joda/time/chrono/GregorianChronology,19,81,        return INSTANCE_UTC;,0.00032,0,,0
org/joda/time/chrono/BasicChronology,19,146,        return DateTimeZone.UTC;,0.00032,0,,0
org/joda/time/chrono/BasicChronology,19,143,        if ((base = getBase()) != null) {,0.00032,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,141,        return iUnitField;,0.00032,0,,0
org/joda/time/chrono/GregorianChronology,19,45,public final class GregorianChronology extends BasicGJChronology {,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,148,"        super(base, param, minDaysInFirstWeek);",0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,149,    },0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,68,"    private static final Map<DateTimeZone, GregorianChronology[]> cCache = new HashMap<DateTimeZone, GregorianChronology[]>();",0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,71,        INSTANCE_UTC = getInstance(DateTimeZone.UTC);,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,72,    },0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,100,"        return getInstance(zone, 4);",0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,111,        if (zone == null) {,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,115,        synchronized (cCache) {,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,116,            GregorianChronology[] chronos = cCache.get(zone);,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,117,            if (chronos == null) {,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,118,                chronos = new GregorianChronology[7];,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,119,"                cCache.put(zone, chronos);",0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,122,                chrono = chronos[minDaysInFirstWeek - 1];,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,126,            },0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,127,            if (chrono == null) {,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,128,                if (zone == DateTimeZone.UTC) {,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,129,"                    chrono = new GregorianChronology(null, null, minDaysInFirstWeek);",0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,135,                chronos[minDaysInFirstWeek - 1] = chrono;,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,137,        },0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,138,        return chrono;,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,191,        if (getBase() == null) {,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,192,            super.assemble(fields);,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,194,    },0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,225,        return MAX_YEAR;,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,229,        return MILLIS_PER_YEAR;,0.00031,0,,0
org/joda/time/chrono/GregorianChronology,19,237,        return MILLIS_PER_MONTH;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,691,        return 12;,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,19,75,"        super(base, param, minDaysInFirstWeek);",0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,19,76,    },0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,19,42,    private static final int[] MIN_DAYS_PER_MONTH_ARRAY = {,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,19,45,    private static final int[] MAX_DAYS_PER_MONTH_ARRAY = {,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,19,53,        MIN_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,19,54,        MAX_TOTAL_MILLIS_BY_MONTH_ARRAY = new long[12];,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,19,56,        long minSum = 0;,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,19,57,        long maxSum = 0;,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,19,58,        for (int i = 0; i < 11; i++) {,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,19,59,            long millis = MIN_DAYS_PER_MONTH_ARRAY[i],0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,19,61,            minSum += millis;,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,19,62,            MIN_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = minSum;,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,19,64,            millis = MAX_DAYS_PER_MONTH_ARRAY[i],0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,19,66,            maxSum += millis;,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,19,67,            MAX_TOTAL_MILLIS_BY_MONTH_ARRAY[i + 1] = maxSum;,0.00031,0,,0
org/joda/time/chrono/BasicGJChronology,19,69,    },0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,321,            fields.copyFieldsFrom(iBase);,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,372,            flags = ,0.00031,0,,0
org/joda/time/field/UnsupportedDurationField,19,92,        return false;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,156,        return iMillis;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,160,        return iMillisOfSecond;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,164,        return iMillisOfDay;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,168,        return iSeconds;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,172,        return iSecondOfMinute;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,176,        return iSecondOfDay;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,180,        return iMinutes;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,184,        return iMinuteOfHour;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,188,        return iMinuteOfDay;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,192,        return iHours;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,196,        return iHourOfDay;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,200,        return iClockhourOfDay;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,204,        return iHalfdays;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,208,        return iHourOfHalfday;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,212,        return iClockhourOfHalfday;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,216,        return iHalfdayOfDay;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,220,        return iDays;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,224,        return iDayOfWeek;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,228,        return iDayOfMonth;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,232,        return iDayOfYear;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,236,        return iWeeks;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,240,        return iWeekOfWeekyear;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,244,        return iWeekyears;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,248,        return iWeekyear;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,252,        return iWeekyearOfCentury;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,256,        return iMonths;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,260,        return iMonthOfYear;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,264,        return iYears;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,272,        return iYearOfEra;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,276,        return iYearOfCentury;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,280,        return iCenturies;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,284,        return iCenturyOfEra;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,288,        return iEras;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,292,        return iEra;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,445,                if (isSupported(f = chrono.millis())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,446,                    millis = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,448,                if (isSupported(f = chrono.seconds())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,449,                    seconds = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,451,                if (isSupported(f = chrono.minutes())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,452,                    minutes = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,454,                if (isSupported(f = chrono.hours())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,455,                    hours = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,457,                if (isSupported(f = chrono.halfdays())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,458,                    halfdays = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,460,                if (isSupported(f = chrono.days())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,461,                    days = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,463,                if (isSupported(f = chrono.weeks())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,464,                    weeks = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,466,                if (isSupported(f = chrono.weekyears())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,467,                    weekyears = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,469,                if (isSupported(f = chrono.months())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,470,                    months = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,472,                if (isSupported(f = chrono.years())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,473,                    years = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,475,                if (isSupported(f = chrono.centuries())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,476,                    centuries = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,478,                if (isSupported(f = chrono.eras())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,485,                if (isSupported(f = chrono.millisOfSecond())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,486,                    millisOfSecond = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,488,                if (isSupported(f = chrono.millisOfDay())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,489,                    millisOfDay = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,491,                if (isSupported(f = chrono.secondOfMinute())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,492,                    secondOfMinute = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,494,                if (isSupported(f = chrono.secondOfDay())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,495,                    secondOfDay = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,497,                if (isSupported(f = chrono.minuteOfHour())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,498,                    minuteOfHour = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,500,                if (isSupported(f = chrono.minuteOfDay())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,501,                    minuteOfDay = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,503,                if (isSupported(f = chrono.hourOfDay())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,504,                    hourOfDay = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,506,                if (isSupported(f = chrono.clockhourOfDay())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,507,                    clockhourOfDay = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,509,                if (isSupported(f = chrono.hourOfHalfday())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,510,                    hourOfHalfday = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,513,                    clockhourOfHalfday = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,515,                if (isSupported(f = chrono.halfdayOfDay())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,516,                    halfdayOfDay = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,518,                if (isSupported(f = chrono.dayOfWeek())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,519,                    dayOfWeek = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,521,                if (isSupported(f = chrono.dayOfMonth())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,522,                    dayOfMonth = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,524,                if (isSupported(f = chrono.dayOfYear())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,525,                    dayOfYear = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,528,                    weekOfWeekyear = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,530,                if (isSupported(f = chrono.weekyear())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,531,                    weekyear = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,534,                    weekyearOfCentury = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,536,                if (isSupported(f = chrono.monthOfYear())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,537,                    monthOfYear = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,539,                if (isSupported(f = chrono.year())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,540,                    year = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,542,                if (isSupported(f = chrono.yearOfEra())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,543,                    yearOfEra = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,545,                if (isSupported(f = chrono.yearOfCentury())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,546,                    yearOfCentury = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,548,                if (isSupported(f = chrono.centuryOfEra())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,549,                    centuryOfEra = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,551,                if (isSupported(f = chrono.era())) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,552,                    era = f;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,555,        },0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,558,            return field == null ? false : field.isSupported();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,562,            return field == null ? false : field.isSupported();,0.00031,0,,0
org/joda/time/field/UnsupportedDurationField,19,53,            field = cCache.get(type);,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,268,        return iYear;,0.00031,0,,0
org/joda/time/chrono/BaseChronology,19,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,164,        return MILLIS_OF_SECOND_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,173,        return MILLIS_OF_DAY_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,209,        return MINUTE_OF_DAY_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,218,        return HOUR_OF_DAY_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,236,        return HOUR_OF_HALFDAY_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,245,        return CLOCKHOUR_OF_HALFDAY_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,254,        return HALFDAY_OF_DAY_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,264,        return DAY_OF_WEEK_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,282,        return DAY_OF_YEAR_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,291,        return WEEK_OF_WEEKYEAR_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,300,        return WEEKYEAR_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,309,        return WEEKYEAR_OF_CENTURY_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,318,        return MONTH_OF_YEAR_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,336,        return YEAR_OF_ERA_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,345,        return YEAR_OF_CENTURY_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,354,        return CENTURY_OF_ERA_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,363,        return ERA_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,452,            return iUnitType;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,457,            return iRangeType;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,99,"    protected AssembledChronology(Chronology base, Object param) {",0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,100,        iBase = base;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,101,        iParam = param;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,102,        setFields();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,103,    },0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,308,        return iBase;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,319,        Fields fields = new Fields();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,320,        if (iBase != null) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,323,        assemble(fields);,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,332,            iDays      = (f = fields.days)      != null ? f : super.days();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,336,            iYears     = (f = fields.years)     != null ? f : super.years();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,361,            iYear               = (f = fields.year)               != null ? f : super.year();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,365,            iEra                = (f = fields.era)                != null ? f : super.era();,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,369,        if (iBase == null) {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,370,            flags = 0;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,385,        iBaseFlags = flags;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,386,    },0.00031,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,19,37,"        super(chronology, 2);",0.00031,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,19,38,    },0.00031,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,51,"        super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());",0.00031,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,52,        iChronology = chronology;,0.00031,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,53,        iMax = iChronology.getMaxMonth();,0.00031,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,54,        iLeapMonth = leapMonth;,0.00031,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,55,    },0.00031,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,55,        super(type);,0.00031,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,56,        iUnitMillis = unitMillis;,0.00031,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,57,        iDurationField = new LinkedDurationField(type.getDurationType());,0.00031,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,58,    },0.00031,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,137,        return iDurationField;,0.00031,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,151,        LinkedDurationField(DurationFieldType type) {,0.00031,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,152,            super(type);,0.00031,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,153,        },0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,131,"        super(base, param);",0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,126,    private transient final YearInfo[] iYearInfoCache = new YearInfo[CACHE_SIZE];,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,133,        if (minDaysInFirstWeek < 1 || minDaysInFirstWeek > 7) {,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,138,        iMinDaysInFirstWeek = minDaysInFirstWeek;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,139,    },0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,76,        cMillisField = MillisDurationField.INSTANCE;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,77,        cSecondsField = new PreciseDurationField,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,79,        cMinutesField = new PreciseDurationField,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,81,        cHoursField = new PreciseDurationField,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,83,        cHalfdaysField = new PreciseDurationField,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,85,        cDaysField = new PreciseDurationField,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,87,        cWeeksField = new PreciseDurationField,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,90,        cMillisOfSecondField = new PreciseDateTimeField,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,93,        cMillisOfDayField = new PreciseDateTimeField,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,96,        cSecondOfMinuteField = new PreciseDateTimeField,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,99,        cSecondOfDayField = new PreciseDateTimeField,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,102,        cMinuteOfHourField = new PreciseDateTimeField,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,105,        cMinuteOfDayField = new PreciseDateTimeField,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,108,        cHourOfDayField = new PreciseDateTimeField,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,111,        cHourOfHalfdayField = new PreciseDateTimeField,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,114,        cClockhourOfDayField = new ZeroIsMaxDateTimeField,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,117,        cClockhourOfHalfdayField = new ZeroIsMaxDateTimeField,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,120,        cHalfdayOfDayField = new HalfdayField();,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,121,    },0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,241,        fields.millis = cMillisField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,242,        fields.seconds = cSecondsField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,243,        fields.minutes = cMinutesField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,244,        fields.hours = cHoursField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,245,        fields.halfdays = cHalfdaysField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,246,        fields.days = cDaysField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,247,        fields.weeks = cWeeksField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,249,        fields.millisOfSecond = cMillisOfSecondField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,250,        fields.millisOfDay = cMillisOfDayField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,251,        fields.secondOfMinute = cSecondOfMinuteField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,252,        fields.secondOfDay = cSecondOfDayField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,253,        fields.minuteOfHour = cMinuteOfHourField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,254,        fields.minuteOfDay = cMinuteOfDayField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,255,        fields.hourOfDay = cHourOfDayField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,256,        fields.hourOfHalfday = cHourOfHalfdayField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,257,        fields.clockhourOfDay = cClockhourOfDayField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,258,        fields.clockhourOfHalfday = cClockhourOfHalfdayField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,259,        fields.halfdayOfDay = cHalfdayOfDayField;,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,264,        fields.year = new BasicYearDateTimeField(this);,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,265,"        fields.yearOfEra = new GJYearOfEraDateTimeField(fields.year, this);",0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,268,        DateTimeField field = new OffsetDateTimeField(,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,270,        fields.centuryOfEra = new DividedDateTimeField(,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,273,        field = new RemainderDateTimeField(,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,275,        fields.yearOfCentury = new OffsetDateTimeField(,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,278,        fields.era = new GJEraDateTimeField(this);,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,279,"        fields.dayOfWeek = new GJDayOfWeekDateTimeField(this, fields.days);",0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,280,"        fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);",0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,281,"        fields.dayOfYear = new BasicDayOfYearDateTimeField(this, fields.days);",0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,282,        fields.monthOfYear = new GJMonthOfYearDateTimeField(this);,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,283,        fields.weekyear = new BasicWeekyearDateTimeField(this);,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,284,"        fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);",0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,286,        field = new RemainderDateTimeField(,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,288,        fields.weekyearOfCentury = new OffsetDateTimeField(,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,294,        fields.years = fields.year.getDurationField();,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,295,        fields.centuries = fields.centuryOfEra.getDurationField();,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,296,        fields.months = fields.monthOfYear.getDurationField();,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,297,        fields.weekyears = fields.weekyear.getDurationField();,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,298,    },0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,50,abstract class BasicChronology extends AssembledChronology {,0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,750,"            super(DateTimeFieldType.halfdayOfDay(), cHalfdaysField, cDaysField);",0.00031,0,,0
org/joda/time/chrono/BasicChronology,19,751,        },0.00031,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,44,"        super(DateTimeFieldType.weekyear(), chronology.getAverageMillisPerYear());",0.00031,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,45,        iChronology = chronology;,0.00031,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,46,    },0.00031,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,19,45,"        super(DateTimeFieldType.dayOfWeek(), days);",0.00031,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,19,46,        iChronology = chronology;,0.00031,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,19,47,    },0.00031,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,40,"        super(yearField, DateTimeFieldType.yearOfEra());",0.00031,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,41,        iChronology = chronology;,0.00031,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,42,    },0.00031,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,93,        return 1;,0.00031,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,97,        return getWrappedField().getMaximumValue();,0.00031,0,,0
org/joda/time/field/DecoratedDateTimeField,19,54,        super(type);,0.00031,0,,0
org/joda/time/field/DecoratedDateTimeField,19,55,        if (field == null) {,0.00031,0,,0
org/joda/time/field/DecoratedDateTimeField,19,58,        if (!field.isSupported()) {,0.00031,0,,0
org/joda/time/field/DecoratedDateTimeField,19,61,        iField = field;,0.00031,0,,0
org/joda/time/field/DecoratedDateTimeField,19,62,    },0.00031,0,,0
org/joda/time/field/DecoratedDateTimeField,19,70,        return iField;,0.00031,0,,0
org/joda/time/field/DecoratedDateTimeField,19,86,        return iField.getDurationField();,0.00031,0,,0
org/joda/time/field/DividedDateTimeField,19,56,"        super(field, type);",0.00031,0,,0
org/joda/time/field/DividedDateTimeField,19,58,        if (divisor < 2) {,0.00031,0,,0
org/joda/time/field/DividedDateTimeField,19,62,        DurationField unitField = field.getDurationField();,0.00031,0,,0
org/joda/time/field/DividedDateTimeField,19,63,        if (unitField == null) {,0.00031,0,,0
org/joda/time/field/DividedDateTimeField,19,66,            iDurationField = new ScaledDurationField(,0.00031,0,,0
org/joda/time/field/DividedDateTimeField,19,70,        iDivisor = divisor;,0.00031,0,,0
org/joda/time/field/DividedDateTimeField,19,72,        int i = field.getMinimumValue();,0.00031,0,,0
org/joda/time/field/DividedDateTimeField,19,73,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.00031,0,,0
org/joda/time/field/DividedDateTimeField,19,75,        int j = field.getMaximumValue();,0.00031,0,,0
org/joda/time/field/DividedDateTimeField,19,76,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.00031,0,,0
org/joda/time/field/DividedDateTimeField,19,78,        iMin = min;,0.00031,0,,0
org/joda/time/field/DividedDateTimeField,19,79,        iMax = max;,0.00031,0,,0
org/joda/time/field/DividedDateTimeField,19,80,    },0.00031,0,,0
org/joda/time/field/DividedDateTimeField,19,182,        return iDurationField;,0.00031,0,,0
org/joda/time/field/RemainderDateTimeField,19,52,"        super(field, type);",0.00031,0,,0
org/joda/time/field/RemainderDateTimeField,19,54,        if (divisor < 2) {,0.00031,0,,0
org/joda/time/field/RemainderDateTimeField,19,58,        DurationField rangeField = field.getDurationField();,0.00031,0,,0
org/joda/time/field/RemainderDateTimeField,19,59,        if (rangeField == null) {,0.00031,0,,0
org/joda/time/field/RemainderDateTimeField,19,62,            iRangeField = new ScaledDurationField(,0.00031,0,,0
org/joda/time/field/RemainderDateTimeField,19,66,        iDivisor = divisor;,0.00031,0,,0
org/joda/time/field/RemainderDateTimeField,19,67,    },0.00031,0,,0
org/joda/time/field/RemainderDateTimeField,19,76,"        this(dividedField, dividedField.getType());",0.00031,0,,0
org/joda/time/field/RemainderDateTimeField,19,77,    },0.00031,0,,0
org/joda/time/field/RemainderDateTimeField,19,87,"        super(dividedField.getWrappedField(), type);",0.00031,0,,0
org/joda/time/field/RemainderDateTimeField,19,88,        iDivisor = dividedField.iDivisor;,0.00031,0,,0
org/joda/time/field/RemainderDateTimeField,19,89,        iRangeField = dividedField.iDurationField;,0.00031,0,,0
org/joda/time/field/RemainderDateTimeField,19,90,    },0.00031,0,,0
org/joda/time/field/RemainderDateTimeField,19,148,        return 0;,0.00031,0,,0
org/joda/time/field/RemainderDateTimeField,19,158,        return iDivisor - 1;,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,436,        Fields() {,0.00031,0,,0
org/joda/time/chrono/AssembledChronology,19,437,        },0.00031,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,45,"        super(field, type);",0.00031,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,46,        if (field.getMinimumValue() != 0) {,0.00031,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,49,    },0.00031,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,45,"        super(DateTimeFieldType.year(), chronology.getAverageMillisPerYear());",0.00031,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,46,        iChronology = chronology;,0.00031,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,47,    },0.00031,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,119,        return iChronology.getMaxYear();,0.00031,0,,0
org/joda/time/field/OffsetDateTimeField,19,46,"        this(field, (field == null ? null : field.getType()), offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.00031,0,,0
org/joda/time/field/OffsetDateTimeField,19,47,    },0.00031,0,,0
org/joda/time/field/OffsetDateTimeField,19,58,"        this(field, type, offset, Integer.MIN_VALUE, Integer.MAX_VALUE);",0.00031,0,,0
org/joda/time/field/OffsetDateTimeField,19,59,    },0.00031,0,,0
org/joda/time/field/OffsetDateTimeField,19,73,"        super(field, type);",0.00031,0,,0
org/joda/time/field/OffsetDateTimeField,19,75,        if (offset == 0) {,0.00031,0,,0
org/joda/time/field/OffsetDateTimeField,19,79,        iOffset = offset;,0.00031,0,,0
org/joda/time/field/OffsetDateTimeField,19,81,        if (minValue < (field.getMinimumValue() + offset)) {,0.00031,0,,0
org/joda/time/field/OffsetDateTimeField,19,82,            iMin = field.getMinimumValue() + offset;,0.00031,0,,0
org/joda/time/field/OffsetDateTimeField,19,86,        if (maxValue > (field.getMaximumValue() + offset)) {,0.00031,0,,0
org/joda/time/field/OffsetDateTimeField,19,87,            iMax = field.getMaximumValue() + offset;,0.00031,0,,0
org/joda/time/field/OffsetDateTimeField,19,91,    },0.00031,0,,0
org/joda/time/field/OffsetDateTimeField,19,174,        return iMin;,0.00031,0,,0
org/joda/time/field/OffsetDateTimeField,19,183,        return iMax;,0.00031,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,46,        super(DateTimeFieldType.era());,0.00031,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,47,        iChronology = chronology;,0.00031,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,48,    },0.00031,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,41,"        super(DateTimeFieldType.dayOfMonth(), days);",0.00031,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,42,        iChronology = chronology;,0.00031,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,43,    },0.00031,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,41,"        super(DateTimeFieldType.dayOfYear(), days);",0.00031,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,42,        iChronology = chronology;,0.00031,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,43,    },0.00031,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,42,"        super(DateTimeFieldType.weekOfWeekyear(), weeks);",0.00031,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,43,        iChronology = chronology;,0.00031,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,44,    },0.00031,0,,0
org/joda/time/field/UnsupportedDurationField,19,70,    private UnsupportedDurationField(DurationFieldType type) {,0.00031,0,,0
org/joda/time/field/UnsupportedDurationField,19,71,        iType = type;,0.00031,0,,0
org/joda/time/field/UnsupportedDurationField,19,72,    },0.00031,0,,0
org/joda/time/field/UnsupportedDurationField,19,49,        if (cCache == null) {,0.00031,0,,0
org/joda/time/field/UnsupportedDurationField,19,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",0.00031,0,,0
org/joda/time/field/UnsupportedDurationField,19,51,            field = null;,0.00031,0,,0
org/joda/time/field/UnsupportedDurationField,19,55,        if (field == null) {,0.00031,0,,0
org/joda/time/field/UnsupportedDurationField,19,56,            field = new UnsupportedDurationField(type);,0.00031,0,,0
org/joda/time/field/UnsupportedDurationField,19,57,"            cCache.put(type, field);",0.00031,0,,0
org/joda/time/field/UnsupportedDurationField,19,59,        return field;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,227,        return CLOCKHOUR_OF_DAY_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,273,        return DAY_OF_MONTH_TYPE;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,327,        return YEAR_TYPE;,0.00031,0,,0
org/joda/time/field/PreciseDurationField,19,54,        return true;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,200,        return MINUTE_OF_HOUR_TYPE;,0.00031,0,,0
org/joda/time/tz/FixedDateTimeZone,19,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,0.00031,0,,0
org/joda/time/field/BaseDurationField,19,66,        return true;,0.00031,0,,0
org/joda/time/field/MillisDurationField,19,71,        return true;,0.00031,0,,0
org/joda/time/field/BaseDateTimeField,19,69,        return true;,0.00031,0,,0
org/joda/time/field/MillisDurationField,19,80,        return 1;,0.00031,0,,0
org/joda/time/field/PreciseDurationField,19,63,        return iUnitMillis;,0.00031,0,,0
org/joda/time/DateTimeFieldType,19,191,        return SECOND_OF_DAY_TYPE;,0.00031,0,,0
org/joda/time/field/BaseDateTimeField,19,58,        return iType;,0.00031,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,150,        return 0;,0.0003,0,,0
org/joda/time/Chronology,19,63,public abstract class Chronology {,0.0003,0,,0
org/joda/time/chrono/BaseChronology,19,54,        super();,0.0003,0,,0
org/joda/time/chrono/BaseChronology,19,55,    },0.0003,0,,0
org/joda/time/field/MillisDurationField,19,62,        return true;,0.0003,0,,0
org/joda/time/field/PreciseDurationField,19,43,        super(type);,0.0003,0,,0
org/joda/time/field/PreciseDurationField,19,44,        iUnitMillis = unitMillis;,0.0003,0,,0
org/joda/time/field/PreciseDurationField,19,45,    },0.0003,0,,0
org/joda/time/field/ScaledDurationField,19,47,"        super(field, type);",0.0003,0,,0
org/joda/time/field/ScaledDurationField,19,48,        if (scalar == 0 || scalar == 1) {,0.0003,0,,0
org/joda/time/field/ScaledDurationField,19,51,        iScalar = scalar;,0.0003,0,,0
org/joda/time/field/ScaledDurationField,19,52,    },0.0003,0,,0
org/joda/time/field/DecoratedDurationField,19,52,        super(type);,0.0003,0,,0
org/joda/time/field/DecoratedDurationField,19,53,        if (field == null) {,0.0003,0,,0
org/joda/time/field/DecoratedDurationField,19,56,        if (!field.isSupported()) {,0.0003,0,,0
org/joda/time/field/DecoratedDurationField,19,59,        iField = field;,0.0003,0,,0
org/joda/time/field/DecoratedDurationField,19,60,    },0.0003,0,,0
org/joda/time/field/PreciseDateTimeField,19,57,"        super(type, unit);",0.0003,0,,0
org/joda/time/field/PreciseDateTimeField,19,59,        if (!range.isPrecise()) {,0.0003,0,,0
org/joda/time/field/PreciseDateTimeField,19,63,        long rangeMillis = range.getUnitMillis();,0.0003,0,,0
org/joda/time/field/PreciseDateTimeField,19,64,        iRange = (int)(rangeMillis / getUnitMillis());,0.0003,0,,0
org/joda/time/field/PreciseDateTimeField,19,65,        if (iRange < 2) {,0.0003,0,,0
org/joda/time/field/PreciseDateTimeField,19,69,        iRangeField = range;,0.0003,0,,0
org/joda/time/field/PreciseDateTimeField,19,70,    },0.0003,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,154,        return iUnitMillis;,0.0003,0,,0
org/joda/time/field/MillisDurationField,19,44,        super();,0.0003,0,,0
org/joda/time/field/MillisDurationField,19,45,    },0.0003,0,,0
org/joda/time/field/MillisDurationField,19,38,    public static final DurationField INSTANCE = new MillisDurationField();,0.0003,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,48,        super(type);,0.0003,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,50,        if (!unit.isPrecise()) {,0.0003,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,54,        iUnitMillis = unit.getUnitMillis();,0.0003,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,55,        if (iUnitMillis < 1) {,0.0003,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,59,        iUnitField = unit;,0.0003,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,60,    },0.0003,0,,0
org/joda/time/DateTimeUtils,19,35,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,0.0003,0,,0
org/joda/time/DateTimeUtils,19,37,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0003,0,,0
org/joda/time/DateTimeUtils,19,393,    static class SystemMillisProvider implements MillisProvider {,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,182,        return SECOND_OF_MINUTE_TYPE;,0.0003,0,,0
org/joda/time/field/BaseDateTimeField,19,50,        super();,0.0003,0,,0
org/joda/time/field/BaseDateTimeField,19,51,        if (type == null) {,0.0003,0,,0
org/joda/time/field/BaseDateTimeField,19,54,        iType = type;,0.0003,0,,0
org/joda/time/field/BaseDateTimeField,19,55,    },0.0003,0,,0
org/joda/time/DateTimeField,19,33,public abstract class DateTimeField {,0.0003,0,,0
org/joda/time/DurationFieldType,19,141,        return HALFDAYS_TYPE;,0.0003,0,,0
org/joda/time/DurationFieldType,19,169,        return WEEKYEARS_TYPE;,0.0003,0,,0
org/joda/time/DurationFieldType,19,205,        return ERAS_TYPE;,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,153,        super();,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,154,        iName = name;,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,155,    },0.0003,0,,0
org/joda/time/DateTimeFieldType,19,73,    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,76,    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,79,    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,82,    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,85,    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,88,    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,91,    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,94,    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,97,    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,100,    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,103,    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,106,    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,110,    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,113,    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,116,    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,119,    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,122,    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,125,    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,128,    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,131,    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,134,    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,137,    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,140,    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,444,            super(name);,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,445,            iOrdinal = ordinal;,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,446,            iUnitType = unitType;,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,447,            iRangeType = rangeType;,0.0003,0,,0
org/joda/time/DateTimeFieldType,19,448,        },0.0003,0,,0
org/joda/time/DurationFieldType,19,196,        return CENTURIES_TYPE;,0.0003,0,,0
org/joda/time/field/BaseDurationField,19,47,        super();,0.00029,0,,0
org/joda/time/field/BaseDurationField,19,48,        if (type == null) {,0.00029,0,,0
org/joda/time/field/BaseDurationField,19,51,        iType = type;,0.00029,0,,0
org/joda/time/field/BaseDurationField,19,52,    },0.00029,0,,0
org/joda/time/DurationField,19,30,public abstract class DurationField implements Comparable<DurationField> {,0.00029,0,,0
org/joda/time/DurationFieldType,19,105,        return MILLIS_TYPE;,0.00029,0,,0
org/joda/time/DurationFieldType,19,178,        return MONTHS_TYPE;,0.00029,0,,0
org/joda/time/DurationFieldType,19,187,        return YEARS_TYPE;,0.00029,0,,0
org/joda/time/DurationFieldType,19,160,        return WEEKS_TYPE;,0.00029,0,,0
org/joda/time/DurationFieldType,19,132,        return HOURS_TYPE;,0.00029,0,,0
org/joda/time/DurationFieldType,19,151,        return DAYS_TYPE;,0.00029,0,,0
org/joda/time/DurationFieldType,19,114,        return SECONDS_TYPE;,0.00029,0,,0
org/joda/time/DurationFieldType,19,123,        return MINUTES_TYPE;,0.00029,0,,0
org/joda/time/DateTimeZone,19,212,            return zone;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1500,            super(id);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1501,            iTransitions = transitions;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1502,            iWallOffsets = wallOffsets;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1503,            iStandardOffsets = standardOffsets;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1504,            iNameKeys = nameKeys;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1505,            iTailZone = tailZone;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1506,        },0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1341,            int poolSize = in.readUnsignedShort();,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1342,            String[] pool = new String[poolSize];,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1343,            for (int i=0; i<poolSize; i++) {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1344,                pool[i] = in.readUTF();,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1347,            int size = in.readInt();,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1348,            long[] transitions = new long[size];,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1349,            int[] wallOffsets = new int[size];,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1350,            int[] standardOffsets = new int[size];,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1351,            String[] nameKeys = new String[size];,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1353,            for (int i=0; i<size; i++) {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1354,                transitions[i] = readMillis(in);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1355,                wallOffsets[i] = (int)readMillis(in);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1356,                standardOffsets[i] = (int)readMillis(in);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1359,                    if (poolSize < 256) {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1360,                        index = in.readUnsignedByte();,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1364,                    nameKeys[i] = pool[index];,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1367,                },0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1370,            DSTZone tailZone = null;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1371,            if (in.readBoolean()) {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1372,"                tailZone = DSTZone.readFrom(in, id);",0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1375,            return new PrecalculatedZone,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,147,            return loadZoneData(id);,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,224,        InputStream in = null;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,226,            in = openResource(id);,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,229,            return tz;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,236,                if (in != null) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,237,                    in.close();,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,240,            },0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,504,        {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,509,            iMode = mode;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,510,            iMonthOfYear = monthOfYear;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,511,            iDayOfMonth = dayOfMonth;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,512,            iDayOfWeek = dayOfWeek;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,513,            iAdvance = advanceDayOfWeek;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,514,            iMillisOfDay = millisOfDay;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,515,        },0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,482,"            return new OfYear((char)in.readUnsignedByte(),",0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1176,            super(id);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1177,            iStandardOffset = standardOffset;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1178,            iStartRecurrence = startRecurrence;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1179,            iEndRecurrence = endRecurrence;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1180,        },0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1166,"            return new DSTZone(id, (int)readMillis(in), ",0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,19,87,        super(zone.getID());,0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,19,88,        iZone = zone;,0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,19,89,        iInfoCache = new Info[cInfoCacheMask + 1];,0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,19,90,    },0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,19,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,19,42,        },0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,19,45,        if (i == null) {,0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,19,48,            cacheSize = 512; // (1 << 9),0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,19,61,        cInfoCacheMask = cacheSize - 1;,0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,19,62,    },0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,19,68,        if (zone instanceof CachedDateTimeZone) {,0.00028,0,,0
org/joda/time/tz/CachedDateTimeZone,19,71,        return new CachedDateTimeZone(zone);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,95,        if (in instanceof DataInput) {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,98,"            return readFrom((DataInput)new DataInputStream(in), id);",0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,110,        switch (in.readUnsignedByte()) {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,183,        int v = in.readUnsignedByte();,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,184,        switch (v >> 6) {,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,187,            v = (v << (32 - 6)) >> (32 - 6);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,188,            return v * (30 * 60000L);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,192,            v = (v << (32 - 6)) >> (32 - 30);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,193,            v |= (in.readUnsignedByte()) << 16;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,194,            v |= (in.readUnsignedByte()) << 8;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,195,            v |= (in.readUnsignedByte());,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,196,            return v * 60000L;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,201,            w |= (in.readUnsignedByte()) << 24;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,202,            w |= (in.readUnsignedByte()) << 16;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,203,            w |= (in.readUnsignedByte()) << 8;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,204,            w |= (in.readUnsignedByte());,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,205,            return w * 1000L;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,209,            return in.readLong();,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,748,            iOfYear = ofYear;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,749,            iNameKey = nameKey;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,750,            iSaveMillis = saveMillis;,0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,751,        },0.00028,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0.00028,0,,0
org/joda/time/DateTimeZone,19,204,        if (id == null) {,0.00028,0,,0
org/joda/time/DateTimeZone,19,207,"        if (id.equals(""UTC"")) {",0.00028,0,,0
org/joda/time/DateTimeZone,19,210,        DateTimeZone zone = cProvider.getZone(id);,0.00028,0,,0
org/joda/time/DateTimeZone,19,211,        if (zone != null) {,0.00028,0,,0
org/joda/time/DateTimeZone,19,706,        return iID;,0.00028,0,,0
org/joda/time/DateTimeZone,19,689,    protected DateTimeZone(String id) {,0.00028,0,,0
org/joda/time/DateTimeZone,19,690,        if (id == null) {,0.00028,0,,0
org/joda/time/DateTimeZone,19,693,        iID = id;,0.00028,0,,0
org/joda/time/DateTimeZone,19,694,    },0.00028,0,,0
org/joda/time/DateTimeZone,19,95,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",0.00028,0,,0
org/joda/time/DateTimeZone,19,115,        setProvider0(null);,0.00028,0,,0
org/joda/time/DateTimeZone,19,116,        setNameProvider0(null);,0.00028,0,,0
org/joda/time/DateTimeZone,19,117,    },0.00028,0,,0
org/joda/time/DateTimeZone,19,415,        if (provider == null) {,0.00028,0,,0
org/joda/time/DateTimeZone,19,416,            provider = getDefaultProvider();,0.00028,0,,0
org/joda/time/DateTimeZone,19,418,        Set<String> ids = provider.getAvailableIDs();,0.00028,0,,0
org/joda/time/DateTimeZone,19,419,        if (ids == null || ids.size() == 0) {,0.00028,0,,0
org/joda/time/DateTimeZone,19,423,"        if (!ids.contains(""UTC"")) {",0.00028,0,,0
org/joda/time/DateTimeZone,19,426,"        if (!UTC.equals(provider.getZone(""UTC""))) {",0.00028,0,,0
org/joda/time/DateTimeZone,19,429,        cProvider = provider;,0.00028,0,,0
org/joda/time/DateTimeZone,19,430,        cAvailableIDs = ids;,0.00028,0,,0
org/joda/time/DateTimeZone,19,431,    },0.00028,0,,0
org/joda/time/DateTimeZone,19,443,        Provider provider = null;,0.00028,0,,0
org/joda/time/DateTimeZone,19,446,            String providerClass =,0.00028,0,,0
org/joda/time/DateTimeZone,19,448,            if (providerClass != null) {,0.00028,0,,0
org/joda/time/DateTimeZone,19,458,        },0.00028,0,,0
org/joda/time/DateTimeZone,19,460,        if (provider == null) {,0.00028,0,,0
org/joda/time/DateTimeZone,19,462,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");",0.00028,0,,0
org/joda/time/DateTimeZone,19,466,            },0.00028,0,,0
org/joda/time/DateTimeZone,19,469,        if (provider == null) {,0.00028,0,,0
org/joda/time/DateTimeZone,19,473,        return provider;,0.00028,0,,0
org/joda/time/DateTimeZone,19,514,        if (nameProvider == null) {,0.00028,0,,0
org/joda/time/DateTimeZone,19,515,            nameProvider = getDefaultNameProvider();,0.00028,0,,0
org/joda/time/DateTimeZone,19,517,        cNameProvider = nameProvider;,0.00028,0,,0
org/joda/time/DateTimeZone,19,518,    },0.00028,0,,0
org/joda/time/DateTimeZone,19,529,        NameProvider nameProvider = null;,0.00028,0,,0
org/joda/time/DateTimeZone,19,531,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");",0.00028,0,,0
org/joda/time/DateTimeZone,19,532,            if (providerClass != null) {,0.00028,0,,0
org/joda/time/DateTimeZone,19,542,        },0.00028,0,,0
org/joda/time/DateTimeZone,19,544,        if (nameProvider == null) {,0.00028,0,,0
org/joda/time/DateTimeZone,19,545,            nameProvider = new DefaultNameProvider();,0.00028,0,,0
org/joda/time/DateTimeZone,19,548,        return nameProvider;,0.00028,0,,0
org/joda/time/tz/FixedDateTimeZone,19,38,        super(id);,0.00028,0,,0
org/joda/time/tz/FixedDateTimeZone,19,39,        iNameKey = nameKey;,0.00028,0,,0
org/joda/time/tz/FixedDateTimeZone,19,40,        iWallOffset = wallOffset;,0.00028,0,,0
org/joda/time/tz/FixedDateTimeZone,19,41,        iStandardOffset = standardOffset;,0.00028,0,,0
org/joda/time/tz/FixedDateTimeZone,19,42,    },0.00028,0,,0
org/joda/time/tz/FixedDateTimeZone,19,88,        if (this == obj) {,0.00028,0,,0
org/joda/time/tz/FixedDateTimeZone,19,89,            return true;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,82,"        this(resourcePath, null, false);",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,83,    },0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,106,    {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,107,        if (resourcePath == null) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,110,"        if (!resourcePath.endsWith(""/"")) {",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,111,            resourcePath += '/';,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,114,        iFileDir = null;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,115,        iResourcePath = resourcePath;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,117,        if (loader == null && !favorSystemLoader) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,118,            loader = getClass().getClassLoader();,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,121,        iLoader = loader;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,124,    },0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,136,        if (id == null) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,140,        Object obj = iZoneInfoMap.get(id);,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,141,        if (obj == null) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,145,        if (id.equals(obj)) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,150,        if (obj instanceof SoftReference<?>) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,152,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,153,            DateTimeZone tz = ref.get();,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,154,            if (tz != null) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,155,                return tz;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,174,        return new TreeSet<String>(iZoneInfoMap.keySet());,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,196,        if (iFileDir != null) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,199,            String path = iResourcePath.concat(name);,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,200,            if (iLoader != null) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,201,                in = iLoader.getResourceAsStream(path);,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,205,            if (in == null) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,214,        return in;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,253,        DataInputStream din = new DataInputStream(in);,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,255,"            readZoneInfoMap(din, map);",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,258,                din.close();,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,260,            },0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,263,        return map;,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,274,        int size = din.readUnsignedShort();,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,275,        String[] pool = new String[size];,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,276,        for (int i=0; i<size; i++) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,277,            pool[i] = din.readUTF().intern();,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,281,        size = din.readUnsignedShort();,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,282,        for (int i=0; i<size; i++) {,0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,287,            },0.00028,0,,0
org/joda/time/tz/ZoneInfoProvider,19,289,    },0.00028,0,,0
org/joda/time/tz/DefaultNameProvider,19,39,    public DefaultNameProvider() {,0.00028,0,,0
org/joda/time/tz/DefaultNameProvider,19,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",0.00028,0,,0
org/joda/time/tz/DefaultNameProvider,19,40,    },0.00028,0,,0
org/joda/time/tz/DefaultNameProvider,19,99,        return new HashMap(7);,0.00028,0,,0
org/joda/time/DurationFieldType,19,259,            super(name);,0.00027,0,,0
org/joda/time/DurationFieldType,19,260,            iOrdinal = ordinal;,0.00027,0,,0
org/joda/time/DurationFieldType,19,261,        },0.00027,0,,0
org/joda/time/DurationFieldType,19,94,        super();,0.00027,0,,0
org/joda/time/DurationFieldType,19,95,        iName = name;,0.00027,0,,0
org/joda/time/DurationFieldType,19,96,    },0.00027,0,,0
org/joda/time/DurationFieldType,19,60,"    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(""eras"", ERAS);",0.00027,0,,0
org/joda/time/DurationFieldType,19,62,"    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(""centuries"", CENTURIES);",0.00027,0,,0
org/joda/time/DurationFieldType,19,64,"    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(""weekyears"", WEEKYEARS);",0.00027,0,,0
org/joda/time/DurationFieldType,19,66,"    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(""years"", YEARS);",0.00027,0,,0
org/joda/time/DurationFieldType,19,68,"    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(""months"", MONTHS);",0.00027,0,,0
org/joda/time/DurationFieldType,19,70,"    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(""weeks"", WEEKS);",0.00027,0,,0
org/joda/time/DurationFieldType,19,72,"    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(""days"", DAYS);",0.00027,0,,0
org/joda/time/DurationFieldType,19,74,"    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(""halfdays"", HALFDAYS);",0.00027,0,,0
org/joda/time/DurationFieldType,19,76,"    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(""hours"", HOURS);",0.00027,0,,0
org/joda/time/DurationFieldType,19,78,"    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(""minutes"", MINUTES);",0.00027,0,,0
org/joda/time/DurationFieldType,19,80,"    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(""seconds"", SECONDS);",0.00027,0,,0
org/joda/time/DurationFieldType,19,82,"    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(""millis"", MILLIS);",0.00027,0,,0
org/joda/time/DurationFieldType,19,264,            chronology = DateTimeUtils.getChronology(chronology);,0.0,0,,0
org/joda/time/DurationFieldType,19,266,            switch (iOrdinal) {,0.0,0,,0
org/joda/time/DurationFieldType,19,268,                    return chronology.eras();,0.0,0,,0
org/joda/time/DurationFieldType,19,270,                    return chronology.centuries();,0.0,0,,0
org/joda/time/DurationFieldType,19,272,                    return chronology.weekyears();,0.0,0,,0
org/joda/time/DurationFieldType,19,274,                    return chronology.years();,0.0,0,,0
org/joda/time/DurationFieldType,19,276,                    return chronology.months();,0.0,0,,0
org/joda/time/DurationFieldType,19,278,                    return chronology.weeks();,0.0,0,,0
org/joda/time/DurationFieldType,19,280,                    return chronology.days();,0.0,0,,0
org/joda/time/DurationFieldType,19,282,                    return chronology.halfdays();,0.0,0,,0
org/joda/time/DurationFieldType,19,284,                    return chronology.hours();,0.0,0,,0
org/joda/time/DurationFieldType,19,286,                    return chronology.minutes();,0.0,0,,0
org/joda/time/DurationFieldType,19,288,                    return chronology.seconds();,0.0,0,,0
org/joda/time/DurationFieldType,19,290,                    return chronology.millis();,0.0,0,,0
org/joda/time/DurationFieldType,19,293,                    throw new InternalError();,0.0,0,,0
org/joda/time/DurationFieldType,19,303,            switch (iOrdinal) {,0.0,0,,0
org/joda/time/DurationFieldType,19,305,                    return ERAS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,19,307,                    return CENTURIES_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,19,309,                    return WEEKYEARS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,19,311,                    return YEARS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,19,313,                    return MONTHS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,19,315,                    return WEEKS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,19,317,                    return DAYS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,19,319,                    return HALFDAYS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,19,321,                    return HOURS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,19,323,                    return MINUTES_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,19,325,                    return SECONDS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,19,327,                    return MILLIS_TYPE;,0.0,0,,0
org/joda/time/DurationFieldType,19,330,                    return this;,0.0,0,,0
org/joda/time/DurationFieldType,19,216,        return iName;,0.0,0,,0
org/joda/time/DurationFieldType,19,234,        return getField(chronology).isSupported();,0.0,0,,0
org/joda/time/DurationFieldType,19,243,        return getName();,0.0,0,,0
org/joda/time/DurationField,19,209,        if (value == Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/DurationField,19,210,"            return subtract(instant, (long) value);",0.0,0,,0
org/joda/time/DurationField,19,212,"        return add(instant, -value);",0.0,0,,0
org/joda/time/DurationField,19,224,        if (value == Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/DurationField,19,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0.0,0,,0
org/joda/time/DurationField,19,227,"        return add(instant, -value);",0.0,0,,0
org/joda/time/DateTimeUtils,19,438,        OffsetMillisProvider(long offsetMillis) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,439,            iMillis = offsetMillis;,0.0,0,,0
org/joda/time/DateTimeUtils,19,440,        },0.0,0,,0
org/joda/time/DateTimeUtils,19,447,            return System.currentTimeMillis() + iMillis;,0.0,0,,0
org/joda/time/DateTimeUtils,19,43,        super();,0.0,0,,0
org/joda/time/DateTimeUtils,19,44,    },0.0,0,,0
org/joda/time/DateTimeUtils,19,56,        return cMillisProvider.getMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,19,68,        checkPermission();,0.0,0,,0
org/joda/time/DateTimeUtils,19,69,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0,0,,0
org/joda/time/DateTimeUtils,19,70,    },0.0,0,,0
org/joda/time/DateTimeUtils,19,82,        checkPermission();,0.0,0,,0
org/joda/time/DateTimeUtils,19,83,        cMillisProvider = new FixedMillisProvider(fixedMillis);,0.0,0,,0
org/joda/time/DateTimeUtils,19,84,    },0.0,0,,0
org/joda/time/DateTimeUtils,19,97,        checkPermission();,0.0,0,,0
org/joda/time/DateTimeUtils,19,98,        if (offsetMillis == 0) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,99,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0,0,,0
org/joda/time/DateTimeUtils,19,101,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,0.0,0,,0
org/joda/time/DateTimeUtils,19,103,    },0.0,0,,0
org/joda/time/DateTimeUtils,19,116,        if (millisProvider == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,117,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0.0,0,,0
org/joda/time/DateTimeUtils,19,119,        checkPermission();,0.0,0,,0
org/joda/time/DateTimeUtils,19,120,        cMillisProvider = millisProvider;,0.0,0,,0
org/joda/time/DateTimeUtils,19,121,    },0.0,0,,0
org/joda/time/DateTimeUtils,19,129,        SecurityManager sm = System.getSecurityManager();,0.0,0,,0
org/joda/time/DateTimeUtils,19,130,        if (sm != null) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,131,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0.0,0,,0
org/joda/time/DateTimeUtils,19,133,    },0.0,0,,0
org/joda/time/DateTimeUtils,19,147,            return DateTimeUtils.currentTimeMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,19,165,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,19,169,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,19,187,        Chronology chrono = null;,0.0,0,,0
org/joda/time/DateTimeUtils,19,188,        if (start != null) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,189,            chrono = start.getChronology();,0.0,0,,0
org/joda/time/DateTimeUtils,19,190,        } else if (end != null) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,191,            chrono = end.getChronology();,0.0,0,,0
org/joda/time/DateTimeUtils,19,193,        if (chrono == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,194,            chrono = ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,19,196,        return chrono;,0.0,0,,0
org/joda/time/DateTimeUtils,19,211,        if (interval == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,212,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,19,214,        Chronology chrono = interval.getChronology();,0.0,0,,0
org/joda/time/DateTimeUtils,19,215,        if (chrono == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,216,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,19,218,        return chrono;,0.0,0,,0
org/joda/time/DateTimeUtils,19,234,        if (interval == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,235,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,19,236,"            interval = new Interval(now, now);",0.0,0,,0
org/joda/time/DateTimeUtils,19,238,        return interval;,0.0,0,,0
org/joda/time/DateTimeUtils,19,253,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,19,269,        if (zone == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,270,            return DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/DateTimeUtils,19,272,        return zone;,0.0,0,,0
org/joda/time/DateTimeUtils,19,286,        if (type == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,287,            return PeriodType.standard();,0.0,0,,0
org/joda/time/DateTimeUtils,19,289,        return type;,0.0,0,,0
org/joda/time/DateTimeUtils,19,303,        if (duration == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,304,            return 0L;,0.0,0,,0
org/joda/time/DateTimeUtils,19,306,        return duration.getMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,19,334,        if (partial == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,335,"            throw new IllegalArgumentException(""Partial must not be null"");",0.0,0,,0
org/joda/time/DateTimeUtils,19,337,        DurationFieldType lastType = null;,0.0,0,,0
org/joda/time/DateTimeUtils,19,338,        for (int i = 0; i < partial.size(); i++) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,339,            DateTimeField loopField = partial.getField(i);,0.0,0,,0
org/joda/time/DateTimeUtils,19,340,            if (i > 0) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,341,                if (loopField.getRangeDurationField().getType() != lastType) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,342,                    return false;,0.0,0,,0
org/joda/time/DateTimeUtils,19,345,            lastType = loopField.getDurationField().getType();,0.0,0,,0
org/joda/time/DateTimeUtils,19,347,        return true;,0.0,0,,0
org/joda/time/DateTimeUtils,19,365,"        	Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});        	",0.0,0,,0
org/joda/time/DateTimeUtils,19,366,"        	return (DateFormatSymbols) method.invoke(null, new Object[] {locale});        	",0.0,0,,0
org/joda/time/DateTimeUtils,19,367,        } catch (Exception ex) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,368,        	return new DateFormatSymbols(locale);,0.0,0,,0
org/joda/time/DateTimeZone,19,1261,        Stub(String id) {,0.0,0,,0
org/joda/time/DateTimeZone,19,1262,            iID = id;,0.0,0,,0
org/joda/time/DateTimeZone,19,1263,        },0.0,0,,0
org/joda/time/DateTimeZone,19,1266,            out.writeUTF(iID);,0.0,0,,0
org/joda/time/DateTimeZone,19,1267,        },0.0,0,,0
org/joda/time/DateTimeZone,19,1270,            iID = in.readUTF();,0.0,0,,0
org/joda/time/DateTimeZone,19,1271,        },0.0,0,,0
org/joda/time/DateTimeZone,19,1274,            return forID(iID);,0.0,0,,0
org/joda/time/DateTimeZone,19,604,        Chronology chrono = new BaseChronology() {,0.0,0,,0
org/joda/time/DateTimeZone,19,606,                return null;,0.0,0,,0
org/joda/time/DateTimeZone,19,609,                return this;,0.0,0,,0
org/joda/time/DateTimeZone,19,612,                return this;,0.0,0,,0
org/joda/time/DateTimeZone,19,615,                return getClass().getName();,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,102,"        long instant = year().set(0, year);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,103,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,105,"        return millisOfDay().set(instant, millisOfDay);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,132,"        long instant = year().set(0, year);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,133,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,135,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,138,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,163,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,166,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,183,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,184,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,185,            int value = values[i];,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,186,            DateTimeField field = partial.getField(i);,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,187,            if (value < field.getMinimumValue()) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,188,                throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,192,            if (value > field.getMaximumValue()) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,193,                throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,199,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,200,            int value = values[i];,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,201,            DateTimeField field = partial.getField(i);,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,202,"            if (value < field.getMinimumValue(partial, values)) {",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,203,                throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,207,"            if (value > field.getMaximumValue(partial, values)) {",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,208,                throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,213,    },0.0,0,,0
org/joda/time/chrono/BaseChronology,19,223,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,224,        int[] values = new int[size];,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,225,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,228,        return values;,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,242,        return instant;,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,255,        int size = period.size();,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,256,        int[] values = new int[size];,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,257,        if (startInstant != endInstant) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,258,            for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,259,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,260,"                int value = field.getDifference(endInstant, startInstant);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,261,"                startInstant = field.add(startInstant, value);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,262,                values[i] = value;,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,265,        return values;,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,276,        int size = period.size();,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,277,        int[] values = new int[size];,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,278,        if (duration != 0) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,279,            long current = 0;,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,280,            for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,281,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,282,                if (field.isPrecise()) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,283,"                    int value = field.getDifference(duration, current);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,284,"                    current = field.add(current, value);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,285,                    values[i] = value;,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,289,        return values;,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,301,        if (scalar != 0 && period != null) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),0.0,0,,0
org/joda/time/chrono/BaseChronology,19,304,                if (value != 0) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,309,        return instant;,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,322,        if (duration == 0 || scalar == 0) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,323,            return instant;,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,326,"        return FieldUtils.safeAdd(instant, add);",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0.0,0,,0
org/joda/time/chrono/BaseChronology,19,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0.0,0,,0
org/joda/time/chrono/BaseChronology,19,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0.0,0,,0
org/joda/time/DateTimeZone,19,691,"            throw new IllegalArgumentException(""Id must not be null"");",0.0,0,,0
org/joda/time/DateTimeZone,19,133,        DateTimeZone zone = cDefault;,0.0,0,,0
org/joda/time/DateTimeZone,19,134,        if (zone == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,135,            synchronized(DateTimeZone.class) {,0.0,0,,0
org/joda/time/DateTimeZone,19,136,                zone = cDefault;,0.0,0,,0
org/joda/time/DateTimeZone,19,137,                if (zone == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,138,                    DateTimeZone temp = null;,0.0,0,,0
org/joda/time/DateTimeZone,19,141,"                            String id = System.getProperty(""user.timezone"");",0.0,0,,0
org/joda/time/DateTimeZone,19,142,                            if (id != null) {  // null check avoids stack overflow,0.0,0,,0
org/joda/time/DateTimeZone,19,143,                                temp = forID(id);,0.0,0,,0
org/joda/time/DateTimeZone,19,147,                        },0.0,0,,0
org/joda/time/DateTimeZone,19,145,                        } catch (RuntimeException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,19,148,                        if (temp == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,149,                            temp = forTimeZone(TimeZone.getDefault());,0.0,0,,0
org/joda/time/DateTimeZone,19,153,                    },0.0,0,,0
org/joda/time/DateTimeZone,19,151,                    } catch (IllegalArgumentException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,19,154,                    if (temp == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,155,                        temp = UTC;,0.0,0,,0
org/joda/time/DateTimeZone,19,157,                    cDefault = zone = temp;,0.0,0,,0
org/joda/time/DateTimeZone,19,159,            },0.0,0,,0
org/joda/time/DateTimeZone,19,161,        return zone;,0.0,0,,0
org/joda/time/DateTimeZone,19,174,        SecurityManager sm = System.getSecurityManager();,0.0,0,,0
org/joda/time/DateTimeZone,19,175,        if (sm != null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,176,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0.0,0,,0
org/joda/time/DateTimeZone,19,178,        if (zone == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,179,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0.0,0,,0
org/joda/time/DateTimeZone,19,181,        synchronized(DateTimeZone.class) {,0.0,0,,0
org/joda/time/DateTimeZone,19,182,            cDefault = zone;,0.0,0,,0
org/joda/time/DateTimeZone,19,183,        },0.0,0,,0
org/joda/time/DateTimeZone,19,184,    },0.0,0,,0
org/joda/time/DateTimeZone,19,205,            return getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,19,208,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,19,214,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0.0,0,,0
org/joda/time/DateTimeZone,19,215,            int offset = parseOffset(id);,0.0,0,,0
org/joda/time/DateTimeZone,19,216,            if (offset == 0L) {,0.0,0,,0
org/joda/time/DateTimeZone,19,217,                return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,19,219,                id = printOffset(offset);,0.0,0,,0
org/joda/time/DateTimeZone,19,220,"                return fixedOffsetZone(id, offset);",0.0,0,,0
org/joda/time/DateTimeZone,19,223,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,,0
org/joda/time/DateTimeZone,19,237,"        return forOffsetHoursMinutes(hoursOffset, 0);",0.0,0,,0
org/joda/time/DateTimeZone,19,254,        if (hoursOffset == 0 && minutesOffset == 0) {,0.0,0,,0
org/joda/time/DateTimeZone,19,255,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,19,257,        if (minutesOffset < 0 || minutesOffset > 59) {,0.0,0,,0
org/joda/time/DateTimeZone,19,258,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",0.0,0,,0
org/joda/time/DateTimeZone,19,260,        int offset = 0;,0.0,0,,0
org/joda/time/DateTimeZone,19,262,"            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",0.0,0,,0
org/joda/time/DateTimeZone,19,263,            if (hoursInMinutes < 0) {,0.0,0,,0
org/joda/time/DateTimeZone,19,264,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",0.0,0,,0
org/joda/time/DateTimeZone,19,266,"                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",0.0,0,,0
org/joda/time/DateTimeZone,19,268,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",0.0,0,,0
org/joda/time/DateTimeZone,19,271,        },0.0,0,,0
org/joda/time/DateTimeZone,19,269,        } catch (ArithmeticException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,19,270,"            throw new IllegalArgumentException(""Offset is too large"");",0.0,0,,0
org/joda/time/DateTimeZone,19,272,        return forOffsetMillis(offset);,0.0,0,,0
org/joda/time/DateTimeZone,19,282,        String id = printOffset(millisOffset);,0.0,0,,0
org/joda/time/DateTimeZone,19,283,"        return fixedOffsetZone(id, millisOffset);",0.0,0,,0
org/joda/time/DateTimeZone,19,302,        if (zone == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,303,            return getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,19,305,        final String id = zone.getID();,0.0,0,,0
org/joda/time/DateTimeZone,19,306,"        if (id.equals(""UTC"")) {",0.0,0,,0
org/joda/time/DateTimeZone,19,307,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,19,311,        DateTimeZone dtz = null;,0.0,0,,0
org/joda/time/DateTimeZone,19,312,        String convId = getConvertedId(id);,0.0,0,,0
org/joda/time/DateTimeZone,19,313,        if (convId != null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,314,            dtz = cProvider.getZone(convId);,0.0,0,,0
org/joda/time/DateTimeZone,19,316,        if (dtz == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,317,            dtz = cProvider.getZone(id);,0.0,0,,0
org/joda/time/DateTimeZone,19,319,        if (dtz != null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,320,            return dtz;,0.0,0,,0
org/joda/time/DateTimeZone,19,324,        if (convId == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,325,            convId = zone.getDisplayName();,0.0,0,,0
org/joda/time/DateTimeZone,19,326,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0.0,0,,0
org/joda/time/DateTimeZone,19,327,                convId = convId.substring(3);,0.0,0,,0
org/joda/time/DateTimeZone,19,328,                int offset = parseOffset(convId);,0.0,0,,0
org/joda/time/DateTimeZone,19,329,                if (offset == 0L) {,0.0,0,,0
org/joda/time/DateTimeZone,19,330,                    return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,19,332,                    convId = printOffset(offset);,0.0,0,,0
org/joda/time/DateTimeZone,19,333,"                    return fixedOffsetZone(convId, offset);",0.0,0,,0
org/joda/time/DateTimeZone,19,337,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,,0
org/joda/time/DateTimeZone,19,349,        if (offset == 0) {,0.0,0,,0
org/joda/time/DateTimeZone,19,350,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,19,352,        if (iFixedOffsetCache == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,353,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0.0,0,,0
org/joda/time/DateTimeZone,19,356,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0.0,0,,0
org/joda/time/DateTimeZone,19,357,        if (ref != null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,358,            zone = ref.get();,0.0,0,,0
org/joda/time/DateTimeZone,19,359,            if (zone != null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,360,                return zone;,0.0,0,,0
org/joda/time/DateTimeZone,19,363,"        zone = new FixedDateTimeZone(id, null, offset, offset);",0.0,0,,0
org/joda/time/DateTimeZone,19,364,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",0.0,0,,0
org/joda/time/DateTimeZone,19,365,        return zone;,0.0,0,,0
org/joda/time/DateTimeZone,19,374,        return cAvailableIDs;,0.0,0,,0
org/joda/time/DateTimeZone,19,387,        return cProvider;,0.0,0,,0
org/joda/time/DateTimeZone,19,401,        SecurityManager sm = System.getSecurityManager();,0.0,0,,0
org/joda/time/DateTimeZone,19,402,        if (sm != null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,403,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0.0,0,,0
org/joda/time/DateTimeZone,19,405,        setProvider0(provider);,0.0,0,,0
org/joda/time/DateTimeZone,19,406,    },0.0,0,,0
org/joda/time/DateTimeZone,19,420,            throw new IllegalArgumentException,0.0,0,,0
org/joda/time/DateTimeZone,19,424,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0.0,0,,0
org/joda/time/DateTimeZone,19,427,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0.0,0,,0
org/joda/time/DateTimeZone,19,450,                    provider = (Provider) Class.forName(providerClass).newInstance();,0.0,0,,0
org/joda/time/DateTimeZone,19,454,                },0.0,0,,0
org/joda/time/DateTimeZone,19,451,                } catch (Exception ex) {,0.0,0,,0
org/joda/time/DateTimeZone,19,452,                    Thread thread = Thread.currentThread();,0.0,0,,0
org/joda/time/DateTimeZone,19,453,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,,0
org/joda/time/DateTimeZone,19,456,        } catch (SecurityException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,19,463,            } catch (Exception ex) {,0.0,0,,0
org/joda/time/DateTimeZone,19,464,                Thread thread = Thread.currentThread();,0.0,0,,0
org/joda/time/DateTimeZone,19,465,"                thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,,0
org/joda/time/DateTimeZone,19,470,            provider = new UTCProvider();,0.0,0,,0
org/joda/time/DateTimeZone,19,486,        return cNameProvider;,0.0,0,,0
org/joda/time/DateTimeZone,19,500,        SecurityManager sm = System.getSecurityManager();,0.0,0,,0
org/joda/time/DateTimeZone,19,501,        if (sm != null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,502,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0.0,0,,0
org/joda/time/DateTimeZone,19,504,        setNameProvider0(nameProvider);,0.0,0,,0
org/joda/time/DateTimeZone,19,505,    },0.0,0,,0
org/joda/time/DateTimeZone,19,534,                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();,0.0,0,,0
org/joda/time/DateTimeZone,19,538,                },0.0,0,,0
org/joda/time/DateTimeZone,19,535,                } catch (Exception ex) {,0.0,0,,0
org/joda/time/DateTimeZone,19,536,                    Thread thread = Thread.currentThread();,0.0,0,,0
org/joda/time/DateTimeZone,19,537,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,,0
org/joda/time/DateTimeZone,19,540,        } catch (SecurityException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,19,559,"        Map<String, String> map = cZoneIdConversion;",0.0,0,,0
org/joda/time/DateTimeZone,19,560,        if (map == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,562,"            map = new HashMap<String, String>();",0.0,0,,0
org/joda/time/DateTimeZone,19,563,"            map.put(""GMT"", ""UTC"");",0.0,0,,0
org/joda/time/DateTimeZone,19,564,"            map.put(""WET"", ""WET"");",0.0,0,,0
org/joda/time/DateTimeZone,19,565,"            map.put(""CET"", ""CET"");",0.0,0,,0
org/joda/time/DateTimeZone,19,566,"            map.put(""MET"", ""CET"");",0.0,0,,0
org/joda/time/DateTimeZone,19,567,"            map.put(""ECT"", ""CET"");",0.0,0,,0
org/joda/time/DateTimeZone,19,568,"            map.put(""EET"", ""EET"");",0.0,0,,0
org/joda/time/DateTimeZone,19,569,"            map.put(""MIT"", ""Pacific/Apia"");",0.0,0,,0
org/joda/time/DateTimeZone,19,570,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0.0,0,,0
org/joda/time/DateTimeZone,19,571,"            map.put(""AST"", ""America/Anchorage"");",0.0,0,,0
org/joda/time/DateTimeZone,19,572,"            map.put(""PST"", ""America/Los_Angeles"");",0.0,0,,0
org/joda/time/DateTimeZone,19,573,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",0.0,0,,0
org/joda/time/DateTimeZone,19,574,"            map.put(""PNT"", ""America/Phoenix"");",0.0,0,,0
org/joda/time/DateTimeZone,19,575,"            map.put(""CST"", ""America/Chicago"");",0.0,0,,0
org/joda/time/DateTimeZone,19,576,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0.0,0,,0
org/joda/time/DateTimeZone,19,577,"            map.put(""IET"", ""America/Indiana/Indianapolis"");",0.0,0,,0
org/joda/time/DateTimeZone,19,578,"            map.put(""PRT"", ""America/Puerto_Rico"");",0.0,0,,0
org/joda/time/DateTimeZone,19,579,"            map.put(""CNT"", ""America/St_Johns"");",0.0,0,,0
org/joda/time/DateTimeZone,19,580,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");",0.0,0,,0
org/joda/time/DateTimeZone,19,581,"            map.put(""BET"", ""America/Sao_Paulo"");",0.0,0,,0
org/joda/time/DateTimeZone,19,582,"            map.put(""ART"", ""Africa/Cairo"");",0.0,0,,0
org/joda/time/DateTimeZone,19,583,"            map.put(""CAT"", ""Africa/Harare"");",0.0,0,,0
org/joda/time/DateTimeZone,19,584,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0.0,0,,0
org/joda/time/DateTimeZone,19,585,"            map.put(""NET"", ""Asia/Yerevan"");",0.0,0,,0
org/joda/time/DateTimeZone,19,586,"            map.put(""PLT"", ""Asia/Karachi"");",0.0,0,,0
org/joda/time/DateTimeZone,19,587,"            map.put(""IST"", ""Asia/Kolkata"");",0.0,0,,0
org/joda/time/DateTimeZone,19,588,"            map.put(""BST"", ""Asia/Dhaka"");",0.0,0,,0
org/joda/time/DateTimeZone,19,589,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");",0.0,0,,0
org/joda/time/DateTimeZone,19,590,"            map.put(""CTT"", ""Asia/Shanghai"");",0.0,0,,0
org/joda/time/DateTimeZone,19,591,"            map.put(""JST"", ""Asia/Tokyo"");",0.0,0,,0
org/joda/time/DateTimeZone,19,592,"            map.put(""ACT"", ""Australia/Darwin"");",0.0,0,,0
org/joda/time/DateTimeZone,19,593,"            map.put(""AET"", ""Australia/Sydney"");",0.0,0,,0
org/joda/time/DateTimeZone,19,594,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0.0,0,,0
org/joda/time/DateTimeZone,19,595,"            map.put(""NST"", ""Pacific/Auckland"");",0.0,0,,0
org/joda/time/DateTimeZone,19,596,            cZoneIdConversion = map;,0.0,0,,0
org/joda/time/DateTimeZone,19,598,        return map.get(id);,0.0,0,,0
org/joda/time/DateTimeZone,19,604,        Chronology chrono = new BaseChronology() {,0.0,0,,0
org/joda/time/DateTimeZone,19,618,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,0.0,0,,0
org/joda/time/DateTimeZone,19,631,        StringBuffer buf = new StringBuffer();,0.0,0,,0
org/joda/time/DateTimeZone,19,632,        if (offset >= 0) {,0.0,0,,0
org/joda/time/DateTimeZone,19,633,            buf.append('+');,0.0,0,,0
org/joda/time/DateTimeZone,19,635,            buf.append('-');,0.0,0,,0
org/joda/time/DateTimeZone,19,636,            offset = -offset;,0.0,0,,0
org/joda/time/DateTimeZone,19,639,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/DateTimeZone,19,640,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0.0,0,,0
org/joda/time/DateTimeZone,19,641,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/DateTimeZone,19,643,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/DateTimeZone,19,644,        buf.append(':');,0.0,0,,0
org/joda/time/DateTimeZone,19,645,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.0,0,,0
org/joda/time/DateTimeZone,19,646,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/DateTimeZone,19,647,        if (offset == 0) {,0.0,0,,0
org/joda/time/DateTimeZone,19,648,            return buf.toString();,0.0,0,,0
org/joda/time/DateTimeZone,19,651,        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/DateTimeZone,19,652,        buf.append(':');,0.0,0,,0
org/joda/time/DateTimeZone,19,653,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,,0
org/joda/time/DateTimeZone,19,654,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/DateTimeZone,19,655,        if (offset == 0) {,0.0,0,,0
org/joda/time/DateTimeZone,19,656,            return buf.toString();,0.0,0,,0
org/joda/time/DateTimeZone,19,659,        buf.append('.');,0.0,0,,0
org/joda/time/DateTimeZone,19,660,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0.0,0,,0
org/joda/time/DateTimeZone,19,661,        return buf.toString();,0.0,0,,0
org/joda/time/DateTimeZone,19,670,        if (cOffsetFormatter == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,671,            cOffsetFormatter = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/DateTimeZone,19,675,        return cOffsetFormatter;,0.0,0,,0
org/joda/time/DateTimeZone,19,729,"        return getShortName(instant, null);",0.0,0,,0
org/joda/time/DateTimeZone,19,744,        if (locale == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,745,            locale = Locale.getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,19,747,        String nameKey = getNameKey(instant);,0.0,0,,0
org/joda/time/DateTimeZone,19,748,        if (nameKey == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,749,            return iID;,0.0,0,,0
org/joda/time/DateTimeZone,19,751,"        String name = cNameProvider.getShortName(locale, iID, nameKey);",0.0,0,,0
org/joda/time/DateTimeZone,19,752,        if (name != null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,753,            return name;,0.0,0,,0
org/joda/time/DateTimeZone,19,755,        return printOffset(getOffset(instant));,0.0,0,,0
org/joda/time/DateTimeZone,19,769,"        return getName(instant, null);",0.0,0,,0
org/joda/time/DateTimeZone,19,784,        if (locale == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,785,            locale = Locale.getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,19,787,        String nameKey = getNameKey(instant);,0.0,0,,0
org/joda/time/DateTimeZone,19,788,        if (nameKey == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,789,            return iID;,0.0,0,,0
org/joda/time/DateTimeZone,19,791,"        String name = cNameProvider.getName(locale, iID, nameKey);",0.0,0,,0
org/joda/time/DateTimeZone,19,792,        if (name != null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,793,            return name;,0.0,0,,0
org/joda/time/DateTimeZone,19,795,        return printOffset(getOffset(instant));,0.0,0,,0
org/joda/time/DateTimeZone,19,813,        if (instant == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,814,            return getOffset(DateTimeUtils.currentTimeMillis());,0.0,0,,0
org/joda/time/DateTimeZone,19,816,        return getOffset(instant.getMillis());,0.0,0,,0
org/joda/time/DateTimeZone,19,844,        return getOffset(instant) == getStandardOffset(instant);,0.0,0,,0
org/joda/time/DateTimeZone,19,890,            if ((offsetLocal - offsetAdjusted) < 0) {,0.0,0,,0
org/joda/time/DateTimeZone,19,894,                long nextLocal = nextTransition(instantAdjusted);,0.0,0,,0
org/joda/time/DateTimeZone,19,895,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,0.0,0,,0
org/joda/time/DateTimeZone,19,896,                if (nextLocal != nextAdjusted) {,0.0,0,,0
org/joda/time/DateTimeZone,19,897,                    return offsetLocal;,0.0,0,,0
org/joda/time/DateTimeZone,19,899,            },0.0,0,,0
org/joda/time/DateTimeZone,19,901,            long prev = previousTransition(instantAdjusted);,0.0,0,,0
org/joda/time/DateTimeZone,19,902,            if (prev < instantAdjusted) {,0.0,0,,0
org/joda/time/DateTimeZone,19,903,                int offsetPrev = getOffset(prev);,0.0,0,,0
org/joda/time/DateTimeZone,19,904,                int diff = offsetPrev - offsetLocal;,0.0,0,,0
org/joda/time/DateTimeZone,19,905,                if (instantAdjusted - prev <= diff) {,0.0,0,,0
org/joda/time/DateTimeZone,19,906,                    return offsetPrev;,0.0,0,,0
org/joda/time/DateTimeZone,19,924,        int offset = getOffset(instantUTC);,0.0,0,,0
org/joda/time/DateTimeZone,19,925,        long instantLocal = instantUTC + offset;,0.0,0,,0
org/joda/time/DateTimeZone,19,927,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,0.0,0,,0
org/joda/time/DateTimeZone,19,928,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,,0
org/joda/time/DateTimeZone,19,930,        return instantLocal;,0.0,0,,0
org/joda/time/DateTimeZone,19,951,        int offsetOriginal = getOffset(originalInstantUTC);,0.0,0,,0
org/joda/time/DateTimeZone,19,952,        long instantUTC = instantLocal - offsetOriginal;,0.0,0,,0
org/joda/time/DateTimeZone,19,953,        int offsetLocalFromOriginal = getOffset(instantUTC);,0.0,0,,0
org/joda/time/DateTimeZone,19,954,        if (offsetLocalFromOriginal == offsetOriginal) {,0.0,0,,0
org/joda/time/DateTimeZone,19,955,            return instantUTC;,0.0,0,,0
org/joda/time/DateTimeZone,19,957,"        return convertLocalToUTC(instantLocal, strict);",0.0,0,,0
org/joda/time/DateTimeZone,19,974,        int offsetLocal = getOffset(instantLocal);,0.0,0,,0
org/joda/time/DateTimeZone,19,976,        int offset = getOffset(instantLocal - offsetLocal);,0.0,0,,0
org/joda/time/DateTimeZone,19,978,        if (offsetLocal != offset) {,0.0,0,,0
org/joda/time/DateTimeZone,19,982,            if (strict || offsetLocal < 0) {,0.0,0,,0
org/joda/time/DateTimeZone,19,984,                long nextLocal = nextTransition(instantLocal - offsetLocal);,0.0,0,,0
org/joda/time/DateTimeZone,19,985,                if (nextLocal == (instantLocal - offsetLocal)) {,0.0,0,,0
org/joda/time/DateTimeZone,19,986,                    nextLocal = Long.MAX_VALUE;,0.0,0,,0
org/joda/time/DateTimeZone,19,988,                long nextAdjusted = nextTransition(instantLocal - offset);,0.0,0,,0
org/joda/time/DateTimeZone,19,989,                if (nextAdjusted == (instantLocal - offset)) {,0.0,0,,0
org/joda/time/DateTimeZone,19,990,                    nextAdjusted = Long.MAX_VALUE;,0.0,0,,0
org/joda/time/DateTimeZone,19,992,                if (nextLocal != nextAdjusted) {,0.0,0,,0
org/joda/time/DateTimeZone,19,994,                    if (strict) {,0.0,0,,0
org/joda/time/DateTimeZone,19,996,"                        throw new IllegalArgumentException(""Illegal instant due to time zone offset transition: "" +",0.0,0,,0
org/joda/time/DateTimeZone,19,1003,                        offset = offsetLocal;,0.0,0,,0
org/joda/time/DateTimeZone,19,1009,        long instantUTC = instantLocal - offset;,0.0,0,,0
org/joda/time/DateTimeZone,19,1011,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,0.0,0,,0
org/joda/time/DateTimeZone,19,1012,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,,0
org/joda/time/DateTimeZone,19,1014,        return instantUTC;,0.0,0,,0
org/joda/time/DateTimeZone,19,1028,        if (newZone == null) {,0.0,0,,0
org/joda/time/DateTimeZone,19,1029,            newZone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,19,1031,        if (newZone == this) {,0.0,0,,0
org/joda/time/DateTimeZone,19,1032,            return oldInstant;,0.0,0,,0
org/joda/time/DateTimeZone,19,1034,        long instantLocal = convertUTCToLocal(oldInstant);,0.0,0,,0
org/joda/time/DateTimeZone,19,1035,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",0.0,0,,0
org/joda/time/DateTimeZone,19,1145,        if (isFixed()) {,0.0,0,,0
org/joda/time/DateTimeZone,19,1146,            return false;,0.0,0,,0
org/joda/time/DateTimeZone,19,1149,            localDateTime.toDateTime(this);,0.0,0,,0
org/joda/time/DateTimeZone,19,1150,            return false;,0.0,0,,0
org/joda/time/DateTimeZone,19,1151,        } catch (IllegalArgumentException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,19,1152,            return true;,0.0,0,,0
org/joda/time/DateTimeZone,19,1164,        long before = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);,0.0,0,,0
org/joda/time/DateTimeZone,19,1165,        long after = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);,0.0,0,,0
org/joda/time/DateTimeZone,19,1166,        if (before == after) {,0.0,0,,0
org/joda/time/DateTimeZone,19,1167,            return instant;,0.0,0,,0
org/joda/time/DateTimeZone,19,1169,        long local = convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/DateTimeZone,19,1170,"        return convertLocalToUTC(local, false, earlierOrLater ? after : before);",0.0,0,,0
org/joda/time/DateTimeZone,19,1210,        return java.util.TimeZone.getTimeZone(iID);,0.0,0,,0
org/joda/time/DateTimeZone,19,1235,        return getID();,0.0,0,,0
org/joda/time/DateTimeZone,19,1245,        return new Stub(iID);,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,83,        if (type == null || durationField == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,84,            throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,86,        iType = type;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,87,        iDurationField = durationField;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,88,    },0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,55,        if (cCache == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,57,            field = null;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,59,            field = cCache.get(type);,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,60,            if (field != null && field.getDurationField() != durationField) {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,61,                field = null;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,64,        if (field == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,65,"            field = new UnsupportedDateTimeField(type, durationField);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,66,"            cCache.put(type, field);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,68,        return field;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,95,        return iType;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,99,        return iType.getName();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,108,        return false;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,117,        return false;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,126,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,135,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,144,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,153,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,162,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,171,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,180,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,189,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,198,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,207,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,216,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,225,"        return getDurationField().add(instant, value);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,234,"        return getDurationField().add(instant, value);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,243,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,252,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,261,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,270,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,297,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,306,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,315,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,324,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,333,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,343,        return iDurationField;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,352,        return null;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,361,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,370,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,379,        return null;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,388,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,397,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,406,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,415,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,424,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,433,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,442,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,451,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,460,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,469,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,478,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,487,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,496,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,505,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,514,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,523,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,533,"        return ""UnsupportedDateTimeField"";",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,540,"        return getInstance(iType, iDurationField);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,19,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,79,        return iType;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,83,        return iType.getName();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,101,        return true;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,110,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,119,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,128,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,137,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,146,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,155,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,164,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,173,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,182,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,191,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,200,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,209,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,227,        return 0;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,238,        if (this == obj) {,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,239,            return true;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,240,        } else if (obj instanceof UnsupportedDurationField) {,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,241,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,242,            if (other.getName() == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,243,                return (getName() == null);,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,245,            return (other.getName().equals(getName()));,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,247,        return false;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,256,        return getName().hashCode();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,265,"        return ""UnsupportedDurationField["" + getName() + ']';",0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,272,        return getInstance(iType);,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,,0
org/joda/time/field/UnsupportedDurationField,19,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,109,        iDateTimeFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,110,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,111,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,112,        iNumberValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,113,        iStringValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,114,        iLowerBound = lowerBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,115,        iUpperBound = upperBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,116,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,117,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,19,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,130,        iDateTimeFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,131,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,132,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,133,        iNumberValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,134,        iStringValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,135,        iLowerBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,136,        iUpperBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,137,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,138,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,19,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,151,        iDateTimeFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,152,        iDurationFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,153,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,154,        iNumberValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,155,        iStringValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,156,        iLowerBound = lowerBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,157,        iUpperBound = upperBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,158,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,159,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,19,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,172,        iDateTimeFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,173,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,174,        iFieldName = fieldName;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,175,        iNumberValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,176,        iStringValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,177,        iLowerBound = lowerBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,178,        iUpperBound = upperBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,179,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,180,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,19,189,"        super(createMessage(fieldType.getName(), value));",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,190,        iDateTimeFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,191,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,192,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,193,        iStringValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,194,        iNumberValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,195,        iLowerBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,196,        iUpperBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,197,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,198,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,19,207,"        super(createMessage(fieldType.getName(), value));",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,208,        iDateTimeFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,209,        iDurationFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,210,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,211,        iStringValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,212,        iNumberValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,213,        iLowerBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,214,        iUpperBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,215,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,216,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,19,225,"        super(createMessage(fieldName, value));",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,226,        iDateTimeFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,227,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,228,        iFieldName = fieldName;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,229,        iStringValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,230,        iNumberValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,231,        iLowerBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,232,        iUpperBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,233,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,234,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,19,41,        StringBuffer buf = new StringBuffer(),0.0,0,,0
org/joda/time/IllegalFieldValueException,19,44,        if (lowerBound == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,45,            if (upperBound == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,46,"                buf.append(""is not supported"");",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,48,"                buf.append(""must not be larger than "").append(upperBound);",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,50,        } else if (upperBound == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,53,"            buf.append(""must be in the range ["")",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,59,        if (explain != null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,60,"            buf.append("": "").append(explain);",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,63,        return buf.toString();,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,76,        if (value == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,77,"            buf.append(""null"");",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,79,"            buf.append('""');",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,80,            buf.append(value);,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,81,"            buf.append('""');",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,86,        return buf.toString();,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,243,        return iDateTimeFieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,252,        return iDurationFieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,261,        return iFieldName;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,270,        return iNumberValue;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,279,        return iStringValue;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,288,        String value = iStringValue;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,289,        if (value == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,290,            value = String.valueOf(iNumberValue);,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,292,        return value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,301,        return iLowerBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,310,        return iUpperBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,314,        return iMessage;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,323,        if (iMessage == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,324,            iMessage = message;,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,325,        } else if (message != null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,19,326,"            iMessage = message + "": "" + iMessage;",0.0,0,,0
org/joda/time/IllegalFieldValueException,19,328,    },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1232,            super();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1233,            iValue = value;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1234,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1237,            return iValue.length();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1243,            buf.append(iValue);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1244,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1249,            out.write(iValue);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1250,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1253,            buf.append(iValue);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1254,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1257,            out.write(iValue);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1258,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1261,            return iValue.length();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1265,"            if (text.regionMatches(true, position, iValue, 0, iValue.length())) {",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1266,                return position + iValue.length();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1268,            return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,116,"        throw new UnsupportedOperationException(""Both printing and parsing not supported"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,132,        Object f = getFormatter();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,133,        if (isPrinter(f)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,134,            return (DateTimePrinter) f;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,136,"        throw new UnsupportedOperationException(""Printing is not supported"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,152,        Object f = getFormatter();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,153,        if (isParser(f)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,154,            return (DateTimeParser) f;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,156,"        throw new UnsupportedOperationException(""Parsing is not supported"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,167,        return isFormatter(getFormatter());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,177,        return isPrinter(getFormatter());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,187,        return isParser(getFormatter());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,196,        iFormatter = null;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,197,        iElementPairs.clear();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,198,    },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,210,"            throw new IllegalArgumentException(""No formatter supplied"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,224,        checkPrinter(printer);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,225,"        return append0(printer, null);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,237,        checkParser(parser);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,238,"        return append0(null, parser);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,250,        checkPrinter(printer);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,251,        checkParser(parser);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,252,"        return append0(printer, parser);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,273,        if (printer != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,274,            checkPrinter(printer);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,276,        if (parsers == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,277,"            throw new IllegalArgumentException(""No parsers supplied"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,279,        int length = parsers.length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,280,        if (length == 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,281,            if (parsers[0] == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,282,"                throw new IllegalArgumentException(""No parser supplied"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,284,"            return append0(printer, parsers[0]);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,287,        DateTimeParser[] copyOfParsers = new DateTimeParser[length];,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,289,        for (i = 0; i < length - 1; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,290,            if ((copyOfParsers[i] = parsers[i]) == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,291,"                throw new IllegalArgumentException(""Incomplete parser array"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,294,        copyOfParsers[i] = parsers[i];,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,296,"        return append0(printer, new MatchingParser(copyOfParsers));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,307,        checkParser(parser);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,308,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,309,"        return append0(null, new MatchingParser(parsers));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,319,        if (parser == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,320,"            throw new IllegalArgumentException(""No parser supplied"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,322,    },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,330,        if (printer == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,331,"            throw new IllegalArgumentException(""No printer supplied"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,333,    },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,370,        if (text == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,371,"            throw new IllegalArgumentException(""Literal must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,373,        switch (text.length()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,375,                return this;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,377,                return append0(new CharacterLiteral(text.charAt(0)));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,379,                return append0(new StringLiteral(text));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,397,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,400,            maxDigits = minDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,403,            throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,406,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,426,        if (fieldType == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,427,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,429,        if (numDigits <= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,430,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,432,"        return append0(new FixedNumber(fieldType, numDigits, false));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,449,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,452,            maxDigits = minDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,455,            throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,458,"            return append0(new UnpaddedNumber(fieldType, maxDigits, true));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,478,        if (fieldType == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,479,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,481,        if (numDigits <= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,482,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,484,"        return append0(new FixedNumber(fieldType, numDigits, true));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,496,        if (fieldType == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,497,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,499,"        return append0(new TextField(fieldType, false));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,511,        if (fieldType == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,512,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,514,"        return append0(new TextField(fieldType, true));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,533,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,536,            maxDigits = minDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,539,            throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,576,"        return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,593,"        return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,610,"        return appendFraction(DateTimeFieldType.dayOfYear(), minDigits, maxDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,627,"        return appendDecimal(DateTimeFieldType.millisOfSecond(), minDigits, 3);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,637,"        return appendDecimal(DateTimeFieldType.millisOfDay(), minDigits, 8);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,657,"        return appendDecimal(DateTimeFieldType.secondOfDay(), minDigits, 5);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,677,"        return appendDecimal(DateTimeFieldType.minuteOfDay(), minDigits, 4);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,697,"        return appendDecimal(DateTimeFieldType.clockhourOfDay(), minDigits, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,707,"        return appendDecimal(DateTimeFieldType.hourOfHalfday(), minDigits, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,717,"        return appendDecimal(DateTimeFieldType.clockhourOfHalfday(), minDigits, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,727,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,747,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,757,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,769,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,813,"        return appendTwoDigitYear(pivot, false);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,831,"        return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot, lenientParse));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,853,"        return appendTwoDigitWeekyear(pivot, false);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,871,"        return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot, lenientParse));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,883,"        return appendDecimal(DateTimeFieldType.yearOfEra(), minDigits, maxDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,895,"        return appendDecimal(DateTimeFieldType.yearOfCentury(), minDigits, maxDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,907,"        return appendSignedDecimal(DateTimeFieldType.centuryOfEra(), minDigits, maxDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,917,        return appendText(DateTimeFieldType.halfdayOfDay());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,927,        return appendText(DateTimeFieldType.dayOfWeek());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,938,        return appendShortText(DateTimeFieldType.dayOfWeek());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,949,        return appendText(DateTimeFieldType.monthOfYear());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,959,        return appendShortText(DateTimeFieldType.monthOfYear());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,969,        return appendText(DateTimeFieldType.era());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,980,"        return append0(new TimeZoneName(TimeZoneName.LONG_NAME, null), null);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,993,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.LONG_NAME, parseLookup);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,994,"        return append0(pp, pp);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1005,"        return append0(new TimeZoneName(TimeZoneName.SHORT_NAME, null), null);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1019,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.SHORT_NAME, parseLookup);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1020,"        return append0(pp, pp);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1030,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1080,        return append0(new TimeZoneOffset,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1094,"        DateTimeFormat.appendPatternTo(this, pattern);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1095,        return this;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1112,                    f = parser;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1133,        return false;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1143,        return false;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1147,        return (isPrinter(f) || isParser(f));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1151,        for (int i = len; --i >= 0;) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1152,            buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1154,    },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1157,        for (int i = len; --i >= 0;) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1158,            out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1160,    },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2752,            super();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2753,            iParsers = parsers;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2754,            int est = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2755,            for (int i=parsers.length; --i>=0 ;) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2756,                DateTimeParser parser = parsers[i];,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2757,                if (parser != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2758,                    int len = parser.estimateParsedLength();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2759,                    if (len > est) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2760,                        est = len;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2763,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2764,            iParsedLengthEstimate = est;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2765,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2768,            return iParsedLengthEstimate;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2772,            DateTimeParser[] parsers = iParsers;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2773,            int length = parsers.length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2775,            final Object originalState = bucket.saveState();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2776,            boolean isOptional = false;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2778,            int bestValidPos = position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2779,            Object bestValidState = null;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2781,            int bestInvalidPos = position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2783,            for (int i=0; i<length; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2784,                DateTimeParser parser = parsers[i];,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2785,                if (parser == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2787,                    if (bestValidPos <= position) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2788,                        return position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2790,                    isOptional = true;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2791,                    break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2793,"                int parsePos = parser.parseInto(bucket, text, position);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2794,                if (parsePos >= position) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2795,                    if (parsePos > bestValidPos) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2796,                        if (parsePos >= text.length() ||,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2801,                            return parsePos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2803,                        bestValidPos = parsePos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2804,                        bestValidState = bucket.saveState();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2807,                    if (parsePos < 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2808,                        parsePos = ~parsePos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2809,                        if (parsePos > bestInvalidPos) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2810,                            bestInvalidPos = parsePos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2814,                bucket.restoreState(originalState);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2817,            if (bestValidPos > position || (bestValidPos == position && isOptional)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2819,                if (bestValidState != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2820,                    bucket.restoreState(bestValidState);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2822,                return bestValidPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2825,            return ~bestInvalidPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2577,                iPrinters = null;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2578,                iPrintedLengthEstimate = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2592,                iParsers = null;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2593,                iParsedLengthEstimate = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2616,                throw new UnsupportedOperationException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2633,            DateTimePrinter[] elements = iPrinters;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2634,            if (elements == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2635,                throw new UnsupportedOperationException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2638,            if (locale == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2640,                locale = Locale.getDefault();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2643,            int len = elements.length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2644,            for (int i = 0; i < len; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2645,"                elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2647,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2650,            DateTimePrinter[] elements = iPrinters;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2651,            if (elements == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2652,                throw new UnsupportedOperationException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2655,            if (locale == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2657,                locale = Locale.getDefault();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2660,            int len = elements.length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2661,            for (int i=0; i<len; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2662,"                elements[i].printTo(buf, partial, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2664,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2667,            DateTimePrinter[] elements = iPrinters;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2668,            if (elements == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2669,                throw new UnsupportedOperationException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2672,            if (locale == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2674,                locale = Locale.getDefault();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2677,            int len = elements.length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2678,            for (int i=0; i<len; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2679,"                elements[i].printTo(out, partial, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2681,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2684,            return iParsedLengthEstimate;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2688,            DateTimeParser[] elements = iParsers;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2689,            if (elements == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2690,                throw new UnsupportedOperationException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2693,            int len = elements.length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2694,            for (int i=0; i<len && position >= 0; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2695,"                position = elements[i].parseInto(bucket, text, position);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2697,            return position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2498,    static enum TimeZoneId,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2501,        INSTANCE;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2502,        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2505,            int max = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2506,            for (String id : ALL_IDS) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2507,"                max = Math.max(max, id.length());",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2508,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2509,            MAX_LENGTH = max;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2510,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2513,            return MAX_LENGTH;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2519,"            buf.append(displayZone != null ? displayZone.getID() : """");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2520,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2525,"            out.write(displayZone != null ? displayZone.getID() : """");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2526,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2530,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2534,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2537,            return MAX_LENGTH;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2541,            String str = text.substring(position);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2542,            String best = null;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2543,            for (String id : ALL_IDS) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2544,                if (str.startsWith(id)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2545,                	if (best == null || id.length() > best.length()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2546,                		best = id;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2549,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2550,            if (best != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2551,                bucket.setZone(DateTimeZone.forID(best));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2552,                return position + best.length();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2554,            return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2439,            super();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2440,            iType = type;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2441,            iParseLookup = parseLookup;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2442,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2445,            return (iType == SHORT_NAME ? 4 : 20);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2451,"            buf.append(print(instant - displayOffset, displayZone, locale));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2452,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2457,"            out.write(print(instant - displayOffset, displayZone, locale));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2458,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2461,            if (displayZone == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2462,"                return """";  // no zone",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2464,            switch (iType) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2466,"                    return displayZone.getName(instant, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2468,"                    return displayZone.getShortName(instant, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2470,"            return """";",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2475,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2479,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2482,            return (iType == SHORT_NAME ? 4 : 20);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2486,            String str = text.substring(position);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2487,            for (String name : iParseLookup.keySet()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2488,                if (str.startsWith(name)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2489,                    bucket.setZone(iParseLookup.get(name));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2490,                    return position + name.length();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2492,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2493,            return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2088,                throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2091,                minFields = 4;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2092,                maxFields = 4;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2104,                est = iZeroOffsetPrintText.length();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2113,                return;  // no zone,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2119,            if (displayOffset >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2120,                buf.append('+');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2122,                buf.append('-');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2123,                displayOffset = -displayOffset;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2126,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2127,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2128,            if (iMaxFields == 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2129,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2131,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2132,            if (displayOffset == 0 && iMinFields <= 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2133,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2136,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2137,            if (iShowSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2138,                buf.append(':');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2140,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2141,            if (iMaxFields == 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2142,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2144,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2145,            if (displayOffset == 0 && iMinFields <= 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2146,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2149,            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2150,            if (iShowSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2151,                buf.append(':');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2153,"            FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2154,            if (iMaxFields == 3) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2155,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2157,            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2158,            if (displayOffset == 0 && iMinFields <= 3) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2159,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2162,            if (iShowSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2163,                buf.append('.');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2165,"            FormatUtils.appendPaddedInteger(buf, displayOffset, 3);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2166,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2171,            if (displayZone == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2172,                return;  // no zone,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2174,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2175,                out.write(iZeroOffsetPrintText);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2176,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2178,            if (displayOffset >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2179,                out.write('+');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2181,                out.write('-');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2182,                displayOffset = -displayOffset;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2185,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2186,"            FormatUtils.writePaddedInteger(out, hours, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2187,            if (iMaxFields == 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2188,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2190,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2191,            if (displayOffset == 0 && iMinFields == 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2192,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2195,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2196,            if (iShowSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2197,                out.write(':');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2199,"            FormatUtils.writePaddedInteger(out, minutes, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2200,            if (iMaxFields == 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2201,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2203,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2204,            if (displayOffset == 0 && iMinFields == 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2205,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2208,            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2209,            if (iShowSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2210,                out.write(':');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2212,"            FormatUtils.writePaddedInteger(out, seconds, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2213,            if (iMaxFields == 3) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2214,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2216,            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2217,            if (displayOffset == 0 && iMinFields == 3) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2218,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2221,            if (iShowSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2222,                out.write('.');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2224,"            FormatUtils.writePaddedInteger(out, displayOffset, 3);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2225,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2229,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2233,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2240,            int limit = text.length() - position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2243,            if (iZeroOffsetParseText != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2244,                if (iZeroOffsetParseText.length() == 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2246,                    if (limit > 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2247,                        char c = text.charAt(position);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2248,                        if (c == '-' || c == '+') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2249,                            break zeroOffset;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2252,                    bucket.setOffset(Integer.valueOf(0));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2253,                    return position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2255,"                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2256,                    bucket.setOffset(Integer.valueOf(0));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2257,                    return position + iZeroOffsetParseText.length();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2263,            if (limit <= 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2264,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2268,            char c = text.charAt(position);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2269,            if (c == '-') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2270,                negative = true;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2271,            } else if (c == '+') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2272,                negative = false;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2274,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2277,            limit--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2278,            position++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2292,"            if (digitCount(text, position, 2) < 2) {",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2294,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2299,"            int hours = FormatUtils.parseTwoDigits(text, position);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2300,            if (hours > 23) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2301,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2303,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2304,            limit -= 2;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2305,            position += 2;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2311,                if (limit <= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2312,                    break parse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2316,                c = text.charAt(position);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2317,                if (c == ':') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2318,                    expectSeparators = true;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2319,                    limit--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2320,                    position++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2321,                } else if (c >= '0' && c <= '9') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2322,                    expectSeparators = false;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2329,"                int count = digitCount(text, position, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2330,                if (count == 0 && !expectSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2331,                    break parse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2332,                } else if (count < 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2334,                    return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2337,"                int minutes = FormatUtils.parseTwoDigits(text, position);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2338,                if (minutes > 59) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2339,                    return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2341,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2342,                limit -= 2;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2343,                position += 2;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2347,                if (limit <= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2348,                    break parse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2351,                if (expectSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2352,                    if (text.charAt(position) != ':') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2353,                        break parse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2355,                    limit--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2356,                    position++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2359,"                count = digitCount(text, position, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2360,                if (count == 0 && !expectSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2361,                    break parse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2362,                } else if (count < 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2364,                    return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2367,"                int seconds = FormatUtils.parseTwoDigits(text, position);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2368,                if (seconds > 59) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2369,                    return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2371,                offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2372,                limit -= 2;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2373,                position += 2;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2377,                if (limit <= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2378,                    break parse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2381,                if (expectSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2382,"                    if (text.charAt(position) != '.' && text.charAt(position) != ',') {",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2383,                        break parse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2385,                    limit--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2386,                    position++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2389,"                count = digitCount(text, position, 3);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2390,                if (count == 0 && !expectSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2391,                    break parse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2392,                } else if (count < 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2394,                    return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2397,                offset += (text.charAt(position++) - '0') * 100;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2398,                if (count > 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2399,                    offset += (text.charAt(position++) - '0') * 10;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2400,                    if (count > 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2401,                        offset += text.charAt(position++) - '0';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2406,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2407,            return position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2415,"            int limit = Math.min(text.length() - position, amount);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2416,            amount = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2417,            for (; limit > 0; limit--) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2418,                char c = text.charAt(position + amount);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2419,                if (c < '0' || c > '9') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2420,                    break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2422,                amount++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2424,            return amount;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1861,                maxDigits = 18;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1876,            } catch (IOException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1884,"            printTo(null, out, instant, chrono);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1885,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1890,"            long millis = partial.getChronology().set(partial, 0L);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1892,"                printTo(buf, null, millis, partial.getChronology());",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1895,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1893,            } catch (IOException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1896,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1901,"            long millis = partial.getChronology().set(partial, 0L);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1902,"            printTo(null, out, millis, partial.getChronology());",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1903,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1914,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1915,                if (buf != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1916,"                    appendUnknownString(buf, minDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1918,"                    printUnknownString(out, minDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1920,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1929,                    while (--minDigits >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1930,                        out.write('0');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1937,"            long[] fractionData = getFractionData(fraction, field);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1938,            long scaled = fractionData[0];,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1939,            int maxDigits = (int) fractionData[1];,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1941,            if ((scaled & 0x7fffffff) == scaled) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1942,                str = Integer.toString((int) scaled);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1944,                str = Long.toString(scaled);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1947,            int length = str.length();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1948,            int digits = maxDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1949,            while (length < digits) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1950,                if (buf != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1951,                    buf.append('0');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1953,                    out.write('0');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1955,                minDigits--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1956,                digits--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1959,            if (minDigits < digits) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1961,                while (minDigits < digits) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1962,                    if (length <= 1 || str.charAt(length - 1) != '0') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1963,                        break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1965,                    digits--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1966,                    length--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1968,                if (length < str.length()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1969,                    if (buf != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1970,                        for (int i=0; i<length; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1971,                            buf.append(str.charAt(i));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1974,                        for (int i=0; i<length; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1975,                            out.write(str.charAt(i));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1978,                    return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1982,            if (buf != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1983,                buf.append(str);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1985,                out.write(str);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1987,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1990,            long rangeMillis = field.getDurationField().getUnitMillis();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1992,            int maxDigits = iMaxDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1994,                switch (maxDigits) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1995,                default: scalar = 1L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1996,                case 1:  scalar = 10L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1997,                case 2:  scalar = 100L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1998,                case 3:  scalar = 1000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1999,                case 4:  scalar = 10000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2000,                case 5:  scalar = 100000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2001,                case 6:  scalar = 1000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2002,                case 7:  scalar = 10000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2003,                case 8:  scalar = 100000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2004,                case 9:  scalar = 1000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2005,                case 10: scalar = 10000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2006,                case 11: scalar = 100000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2007,                case 12: scalar = 1000000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2008,                case 13: scalar = 10000000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2009,                case 14: scalar = 100000000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2010,                case 15: scalar = 1000000000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2011,                case 16: scalar = 10000000000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2012,                case 17: scalar = 100000000000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2013,                case 18: scalar = 1000000000000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2015,                if (((rangeMillis * scalar) / scalar) == rangeMillis) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2016,                    break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2019,                maxDigits--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2022,"            return new long[] {fraction * scalar / rangeMillis, maxDigits};",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2030,            DateTimeField field = iFieldType.getField(bucket.getChronology());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2032,"            int limit = Math.min(iMaxDigits, text.length() - position);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2034,            long value = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2035,            long n = field.getDurationField().getUnitMillis() * 10;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2036,            int length = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2037,            while (length < limit) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2038,                char c = text.charAt(position + length);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2039,                if (c < '0' || c > '9') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2040,                    break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2042,                length++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2043,                long nn = n / 10;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2044,                value += (c - '0') * nn;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2045,                n = nn;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2046,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2048,            value /= 10;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2050,            if (length == 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2051,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2054,            if (value > Integer.MAX_VALUE) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2055,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2058,            DateTimeField parseField = new PreciseDateTimeField(,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2063,"            bucket.saveField(parseField, (int) value);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,2065,            return position + length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1716,            super();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1717,            iFieldType = fieldType;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1718,            iShort = isShort;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1719,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1710,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1722,            return iShort ? 6 : 20;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1729,"                buf.append(print(instant, chrono, locale));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1732,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1730,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1731,                buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1733,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1739,"                out.write(print(instant, chrono, locale));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1742,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1740,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1741,                out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1743,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1747,"                buf.append(print(partial, locale));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1750,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1748,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1749,                buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1751,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1755,"                out.write(print(partial, locale));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1758,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1756,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1757,                out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1759,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1762,            DateTimeField field = iFieldType.getField(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1763,            if (iShort) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1764,"                return field.getAsShortText(instant, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1766,"                return field.getAsText(instant, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1771,            if (partial.isSupported(iFieldType)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1772,                DateTimeField field = iFieldType.getField(partial.getChronology());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1773,                if (iShort) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1774,"                    return field.getAsShortText(partial, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1776,"                    return field.getAsText(partial, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1779,"                return ""\ufffd"";",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1784,            return estimatePrintedLength();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1789,            Locale locale = bucket.getLocale();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1792,            Set<String> validValues = null;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1793,            int maxLength = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1794,            synchronized (cParseCache) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1795,"                Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1796,                if (innerMap == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1797,"                    innerMap = new HashMap<DateTimeFieldType, Object[]>();",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1798,"                    cParseCache.put(locale, innerMap);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1800,                Object[] array = innerMap.get(iFieldType);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1801,                if (array == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1802,                    validValues = new HashSet<String>(32);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1803,"                    MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1804,                    Property property = dt.property(iFieldType);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1805,                    int min = property.getMinimumValueOverall();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1806,                    int max = property.getMaximumValueOverall();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1807,                    if (max - min > 32) {  // protect against invalid fields,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1808,                        return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1810,                    maxLength = property.getMaximumTextLength(locale);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1811,                    for (int i = min; i <= max; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1812,                        property.set(i);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1813,                        validValues.add(property.getAsShortText(locale));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1814,                        validValues.add(property.getAsShortText(locale).toLowerCase(locale));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1815,                        validValues.add(property.getAsShortText(locale).toUpperCase(locale));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1816,                        validValues.add(property.getAsText(locale));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1817,                        validValues.add(property.getAsText(locale).toLowerCase(locale));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1818,                        validValues.add(property.getAsText(locale).toUpperCase(locale));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1820,"                    if (""en"".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era()) {",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1822,"                        validValues.add(""BCE"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1823,"                        validValues.add(""bce"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1824,"                        validValues.add(""CE"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1825,"                        validValues.add(""ce"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1826,                        maxLength = 3;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1828,"                    array = new Object[] {validValues, Integer.valueOf(maxLength)};",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1829,"                    innerMap.put(iFieldType, array);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1830,                } else {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1831,                    validValues = (Set<String>) array[0];,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1832,                    maxLength = ((Integer) array[1]).intValue();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1834,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1836,"            int limit = Math.min(text.length(), position + maxLength);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1837,            for (int i = limit; i > position; i--) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1838,"                String match = text.substring(position, i);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1839,                if (validValues.contains(match)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1840,"                    bucket.saveField(iFieldType, match, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1841,                    return i;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1844,            return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1523,            super();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1524,            iType = type;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1525,            iPivot = pivot;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1526,            iLenientParse = lenientParse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1527,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1530,            return iLenientParse ? 4 : 2;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1534,            int limit = text.length() - position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1536,            if (!iLenientParse) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1537,"                limit = Math.min(2, limit);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1538,                if (limit < 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1539,                    return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1542,                boolean hasSignChar = false;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1543,                boolean negative = false;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1544,                int length = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1545,                while (length < limit) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1546,                    char c = text.charAt(position + length);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1547,                    if (length == 0 && (c == '-' || c == '+')) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1548,                        hasSignChar = true;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1549,                        negative = c == '-';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1550,                        if (negative) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1551,                            length++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1554,                            position++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1555,                            limit--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1557,                        continue;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1559,                    if (c < '0' || c > '9') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1560,                        break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1562,                    length++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1563,                },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1565,                if (length == 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1566,                    return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1569,                if (hasSignChar || length != 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1571,                    if (length >= 9) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1574,"                        value = Integer.parseInt(text.substring(position, position += length));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1576,                        int i = position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1577,                        if (negative) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1578,                            i++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1581,                            value = text.charAt(i++) - '0';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1584,                        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1582,                        } catch (StringIndexOutOfBoundsException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1583,                            return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1585,                        position += length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1586,                        while (i < position) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1587,                            value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1589,                        if (negative) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1590,                            value = -value;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1594,"                    bucket.saveField(iType, value);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1595,                    return position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1600,            char c = text.charAt(position);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1601,            if (c < '0' || c > '9') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1602,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1604,            year = c - '0';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1605,            c = text.charAt(position + 1);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1606,            if (c < '0' || c > '9') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1607,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1609,            year = ((year << 3) + (year << 1)) + c - '0';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1611,            int pivot = iPivot;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1613,            if (bucket.getPivotYear() != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1614,                pivot = bucket.getPivotYear().intValue();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1617,            int low = pivot - 50;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1620,            if (low >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1621,                t = low % 100;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1623,                t = 99 + ((low + 1) % 100);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1626,            year += low + ((year < t) ? 100 : 0) - t;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1628,"            bucket.saveField(iType, year);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1629,            return position + 2;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1633,            return 2;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1639,"            int year = getTwoDigitYear(instant, chrono);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1640,            if (year < 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1641,                buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1642,                buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1644,"                FormatUtils.appendPaddedInteger(buf, year, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1646,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1651,"            int year = getTwoDigitYear(instant, chrono);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1652,            if (year < 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1653,                out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1654,                out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1656,"                FormatUtils.writePaddedInteger(out, year, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1658,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1662,                int year = iType.getField(chrono).get(instant);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1663,                if (year < 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1664,                    year = -year;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1666,                return year % 100;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1667,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1668,                return -1;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1673,            int year = getTwoDigitYear(partial);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1674,            if (year < 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1675,                buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1676,                buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1678,"                FormatUtils.appendPaddedInteger(buf, year, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1680,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1683,            int year = getTwoDigitYear(partial);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1684,            if (year < 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1685,                out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1686,                out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1688,"                FormatUtils.writePaddedInteger(out, year, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1690,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1693,            if (partial.isSupported(iType)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1695,                    int year = partial.get(iType);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1696,                    if (year < 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1697,                        year = -year;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1699,                    return year % 100;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1700,                } catch (RuntimeException e) {},0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1702,            return -1;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1484,"            super(fieldType, numDigits, signed, numDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1485,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1488,"            int newPos = super.parseInto(bucket, text, position);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1489,            if (newPos < 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1490,                return newPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1492,            int expectedPos = position + iMaxParsedDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1493,            if (newPos != expectedPos) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1494,                if (iSigned) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1495,                    char c = text.charAt(position);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1496,                    if (c == '-' || c == '+') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1497,                        expectedPos++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1500,                if (newPos > expectedPos) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1502,                    return ~(expectedPos + 1);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1503,                } else if (newPos < expectedPos) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1505,                    return ~newPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1508,            return newPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1439,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1440,"                appendUnknownString(buf, iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1448,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1449,"                FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1452,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1450,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1451,"                printUnknownString(out, iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1453,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1456,            if (partial.isSupported(iFieldType)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1458,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1461,                },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1459,                } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1460,"                    appendUnknownString(buf, iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1463,"                appendUnknownString(buf, iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1465,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1468,            if (partial.isSupported(iFieldType)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1470,"                    FormatUtils.writePaddedInteger(out, partial.get(iFieldType), iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1473,                },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1471,                } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1472,"                    printUnknownString(out, iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1475,"                printUnknownString(out, iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1477,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1292,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1294,            boolean negative = false;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1295,            int length = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1296,            while (length < limit) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1297,                char c = text.charAt(position + length);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1298,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1299,                    negative = c == '-';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1302,                    if (length + 1 >= limit || ,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1305,                        break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1308,                    if (negative) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1309,                        length++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1312,                        position++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1315,"                    limit = Math.min(limit + 1, text.length() - position);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1316,                    continue;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1318,                if (c < '0' || c > '9') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1319,                    break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1321,                length++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1322,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1324,            if (length == 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1325,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1329,            if (length >= 9) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1332,"                value = Integer.parseInt(text.substring(position, position += length));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1334,                int i = position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1335,                if (negative) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1336,                    i++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1339,                    value = text.charAt(i++) - '0';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1342,                },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1340,                } catch (StringIndexOutOfBoundsException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1341,                    return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1343,                position += length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1344,                while (i < position) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1345,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1347,                if (negative) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1348,                    value = -value;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1352,"            bucket.saveField(iFieldType, value);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1353,            return position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1363,"            super(fieldType, maxParsedDigits, signed);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1364,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1367,            return iMaxParsedDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1374,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1375,"                FormatUtils.appendUnpaddedInteger(buf, field.get(instant));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1378,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1376,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1377,                buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1379,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1385,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1386,"                FormatUtils.writeUnpaddedInteger(out, field.get(instant));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1389,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1387,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1388,                out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1390,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1393,            if (partial.isSupported(iFieldType)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1395,"                    FormatUtils.appendUnpaddedInteger(buf, partial.get(iFieldType));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1398,                },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1396,                } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1397,                    buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1400,                buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1402,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1405,            if (partial.isSupported(iFieldType)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1407,"                    FormatUtils.writeUnpaddedInteger(out, partial.get(iFieldType));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1410,                },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1408,                } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1409,                    out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1412,                out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1414,        },0.0,0,,0
org/joda/time/DateTimeFieldType,19,378,        return iName;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,410,        return getField(chronology).isSupported();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,419,        return getName();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,41,public abstract class DateTimeFieldType implements Serializable {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,145,        super();,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,146,    },0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,230,        if (fields == null || fields.size() == 0) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,231,"            throw new IllegalArgumentException(""The fields must not be null or empty"");",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,233,        Set<DateTimeFieldType> workingFields = new HashSet<DateTimeFieldType>(fields);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,234,        int inputSize = workingFields.size();,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,235,        boolean reducedPrec = false;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,236,        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,238,        if (workingFields.contains(DateTimeFieldType.monthOfYear())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,239,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,240,        } else if (workingFields.contains(DateTimeFieldType.dayOfYear())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,241,"            reducedPrec = dateByOrdinal(bld, workingFields, extended, strictISO);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,242,        } else if (workingFields.contains(DateTimeFieldType.weekOfWeekyear())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,243,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,244,        } else if (workingFields.contains(DateTimeFieldType.dayOfMonth())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,245,"            reducedPrec = dateByMonth(bld, workingFields, extended, strictISO);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,246,        } else if (workingFields.contains(DateTimeFieldType.dayOfWeek())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,247,"            reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,248,        } else if (workingFields.remove(DateTimeFieldType.year())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,249,            bld.append(yearElement());,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,250,            reducedPrec = true;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,251,        } else if (workingFields.remove(DateTimeFieldType.weekyear())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,252,            bld.append(weekyearElement());,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,253,            reducedPrec = true;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,255,        boolean datePresent = (workingFields.size() < inputSize);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,258,"        time(bld, workingFields, extended, strictISO, reducedPrec, datePresent);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,261,        if (bld.canBuildFormatter() == false) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,262,"            throw new IllegalArgumentException(""No valid format for fields: "" + fields);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,268,            fields.retainAll(workingFields);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,271,        },0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,269,        } catch (UnsupportedOperationException ex) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,272,        return bld.toFormatter();,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,293,        boolean reducedPrec = false;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,294,        if (fields.remove(DateTimeFieldType.year())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,295,            bld.append(yearElement());,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,296,            if (fields.remove(DateTimeFieldType.monthOfYear())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,297,                if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,299,"                    appendSeparator(bld, extended);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,300,                    bld.appendMonthOfYear(2);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,301,"                    appendSeparator(bld, extended);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,302,                    bld.appendDayOfMonth(2);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,305,                    bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,306,                    bld.appendMonthOfYear(2);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,307,                    reducedPrec = true;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,310,                if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,312,"                    checkNotStrictISO(fields, strictISO);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,313,                    bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,314,                    bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,315,                    bld.appendDayOfMonth(2);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,318,                    reducedPrec = true;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,322,        } else if (fields.remove(DateTimeFieldType.monthOfYear())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,323,            bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,324,            bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,325,            bld.appendMonthOfYear(2);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,326,            if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,328,"                appendSeparator(bld, extended);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,329,                bld.appendDayOfMonth(2);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,332,                reducedPrec = true;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,334,        } else if (fields.remove(DateTimeFieldType.dayOfMonth())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,336,            bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,337,            bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,338,            bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,339,            bld.appendDayOfMonth(2);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,341,        return reducedPrec;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,361,        boolean reducedPrec = false;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,362,        if (fields.remove(DateTimeFieldType.year())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,363,            bld.append(yearElement());,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,364,            if (fields.remove(DateTimeFieldType.dayOfYear())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,366,"                appendSeparator(bld, extended);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,367,                bld.appendDayOfYear(3);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,370,                reducedPrec = true;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,373,        } else if (fields.remove(DateTimeFieldType.dayOfYear())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,375,            bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,376,            bld.appendDayOfYear(3);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,378,        return reducedPrec;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,398,        boolean reducedPrec = false;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,399,        if (fields.remove(DateTimeFieldType.weekyear())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,400,            bld.append(weekyearElement());,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,401,            if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,402,"                appendSeparator(bld, extended);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,403,                bld.appendLiteral('W');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,404,                bld.appendWeekOfWeekyear(2);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,405,                if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,407,"                    appendSeparator(bld, extended);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,408,                    bld.appendDayOfWeek(1);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,411,                    reducedPrec = true;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,414,                if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,416,"                    checkNotStrictISO(fields, strictISO);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,417,"                    appendSeparator(bld, extended);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,418,                    bld.appendLiteral('W');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,419,                    bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,420,                    bld.appendDayOfWeek(1);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,423,                    reducedPrec = true;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,427,        } else if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,428,            bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,429,            bld.appendLiteral('W');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,430,            bld.appendWeekOfWeekyear(2);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,431,            if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,433,"                appendSeparator(bld, extended);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,434,                bld.appendDayOfWeek(1);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,437,                reducedPrec = true;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,439,        } else if (fields.remove(DateTimeFieldType.dayOfWeek())) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,441,            bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,442,            bld.appendLiteral('W');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,443,            bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,444,            bld.appendDayOfWeek(1);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,446,        return reducedPrec;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,470,        boolean hour = fields.remove(DateTimeFieldType.hourOfDay());,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,471,        boolean minute = fields.remove(DateTimeFieldType.minuteOfHour());,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,472,        boolean second = fields.remove(DateTimeFieldType.secondOfMinute());,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,473,        boolean milli = fields.remove(DateTimeFieldType.millisOfSecond());,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,474,        if (!hour && !minute && !second && !milli) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,475,            return;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,477,        if (hour || minute || second || milli) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,478,            if (strictISO && reducedPrec) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,479,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Date was reduced precision: "" + fields);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,481,            if (datePresent) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,482,                bld.appendLiteral('T');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,485,        if (hour && minute && second || (hour && !second && !milli)) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,488,            if (strictISO && datePresent) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,489,"                throw new IllegalArgumentException(""No valid ISO8601 format for fields because Time was truncated: "" + fields);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,491,            if (!hour && (minute && second || (minute && !milli) || second)) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,494,                if (strictISO) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,495,"                    throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,499,        if (hour) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,500,            bld.appendHourOfDay(2);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,501,        } else if (minute || second || milli) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,502,            bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,504,        if (extended && hour && minute) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,505,            bld.appendLiteral(':');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,507,        if (minute) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,508,            bld.appendMinuteOfHour(2);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,509,        } else if (second || milli) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,510,            bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,512,        if (extended && minute && second) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,513,            bld.appendLiteral(':');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,515,        if (second) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,516,            bld.appendSecondOfMinute(2);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,517,        } else if (milli) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,518,            bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,520,        if (milli) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,521,            bld.appendLiteral('.');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,522,            bld.appendMillisOfSecond(3);,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,524,    },0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,535,        if (strictISO) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,536,"            throw new IllegalArgumentException(""No valid ISO8601 format for fields: "" + fields);",0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,538,    },0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,549,        if (extended) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,550,            bld.appendLiteral('-');,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,552,    },0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,569,        if (dp == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,570,            DateTimeParser tOffset = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,573,            dp = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,578,        return dp;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,595,        if (ldp == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,596,            ldp = dateElementParser().withZoneUTC();,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,598,        return ldp;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,613,        if (dpe == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,614,            dpe = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,636,        return dpe;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,654,        if (tp == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,655,            tp = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,661,        return tp;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,680,        if (ltp == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,681,            ltp = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,686,        return ltp;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,702,        if (tpe == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,704,            DateTimeParser decimalPoint = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,715,            tpe = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,751,        return tpe;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,775,        if (dtp == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,778,            DateTimeParser time = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,783,            dtp = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,787,        return dtp;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,810,        if (dotp == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,811,            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,816,            dotp = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,821,        return dotp;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,845,        if (ldotp == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,846,            DateTimeParser time = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,850,            ldotp = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,855,        return ldotp;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,897,        if (tx == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,898,            tx = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,903,        return tx;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,935,        if (ttx == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,936,            ttx = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,941,        return ttx;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,971,        if (dtx == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,972,            dtx = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,977,        return dtx;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,988,        if (od == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,989,            od = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,994,        return od;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1007,        if (odt == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1008,            odt = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1013,        return odt;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1026,        if (odtx == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1027,            odtx = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1032,        return odtx;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1042,        return weekyearWeekDay();,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1054,        if (wdt == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1055,            wdt = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1060,        return wdt;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1072,        if (wdtx == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1073,            wdtx = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1078,        return wdtx;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1089,        if (bd == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1090,            bd = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1096,        return bd;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1109,        if (bt == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1110,            bt = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1119,        return bt;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1131,        if (btx == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1132,            btx = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1139,        return btx;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1152,        if (btt == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1153,            btt = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1158,        return btt;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1171,        if (bttx == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1172,            bttx = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1177,        return bttx;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1189,        if (bdt == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1190,            bdt = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1195,        return bdt;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1207,        if (bdtx == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1208,            bdtx = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1213,        return bdtx;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1224,        if (bod == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1225,            bod = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1230,        return bod;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1243,        if (bodt == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1244,            bodt = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1249,        return bodt;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1262,        if (bodtx == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1263,            bodtx = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1268,        return bodtx;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1278,        if (bwd == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1279,            bwd = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1286,        return bwd;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1298,        if (bwdt == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1299,            bwdt = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1304,        return bwdt;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1316,        if (bwdtx == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1317,            bwdtx = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1322,        return bwdtx;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1332,        return yearElement();,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1342,        if (ym == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1343,            ym = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1348,        return ym;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1374,        return weekyearElement();,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1384,        if (ww == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1385,            ww = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1390,        return ww;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1400,        if (wwd == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1401,            wwd = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1407,        return wwd;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1416,        return hourElement();,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1426,        if (hm == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1427,            hm = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1432,        return hm;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1442,        if (hms == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1443,            hms = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1449,        return hms;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1461,        if (hmsl == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1462,            hmsl = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1470,        return hmsl;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1500,        if (dh == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1501,            dh = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1507,        return dh;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1517,        if (dhm == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1518,            dhm = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1524,        return dhm;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1535,        if (dhms == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1536,            dhms = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1542,        return dhms;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1554,        if (dhmsl == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1555,            dhmsl = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1561,        return dhmsl;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1573,        if (dhmsf == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1574,            dhmsf = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1580,        return dhmsf;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1614,        if (we == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1615,            we = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1619,        return we;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1623,        if (wwe == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1624,            wwe = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1629,        return wwe;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1633,        if (dwe == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1634,            dwe = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1639,        return dwe;,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1643,        if (dye == null) {,0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1644,            dye = new DateTimeFormatterBuilder(),0.0,0,,0
org/joda/time/format/ISODateTimeFormat,19,1649,        return dye;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,126,        super();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,127,        iPrinter = printer;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,128,        iParser = parser;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,129,        iLocale = locale;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,130,        iOffsetParsed = offsetParsed;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,131,        iChrono = chrono;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,132,        iZone = zone;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,133,        iPivotYear = pivotYear;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,134,        iDefaultYear = defaultYear;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,135,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,144,        return (iPrinter != null);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,162,        return (iParser != null);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,187,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,188,            return this;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,190,"        return new DateTimeFormatter(iPrinter, iParser, locale,",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,201,        return iLocale;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,220,        if (iOffsetParsed == true) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,221,            return this;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,223,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,234,        return iOffsetParsed;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,255,        if (iChrono == chrono) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,256,            return this;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,258,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,268,        return iChrono;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,279,        return iChrono;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,299,        return withZone(DateTimeZone.UTC);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,319,        if (iZone == zone) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,320,            return this;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,322,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,332,        return iZone;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,366,        if (iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear))) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,367,            return this;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,369,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,403,        return withPivotYear(Integer.valueOf(pivotYear));,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,413,      return iPivotYear;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,436,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,447,      return iDefaultYear;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,470,        long millis = DateTimeUtils.getInstantMillis(instant);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,471,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,472,"        printTo(out, millis, chrono);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,473,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,483,        appendable.append(print(instant));,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,484,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,495,"        printTo(buf, instant, null);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,496,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,506,"        printTo(out, instant, null);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,507,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,518,        appendable.append(print(instant));,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,519,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,532,        DateTimePrinter printer = requirePrinter();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,533,        if (partial == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,534,"            throw new IllegalArgumentException(""The partial must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,536,"        printer.printTo(buf, partial, iLocale);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,537,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,549,        DateTimePrinter printer = requirePrinter();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,550,        if (partial == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,551,"            throw new IllegalArgumentException(""The partial must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,553,"        printer.printTo(out, partial, iLocale);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,554,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,567,        appendable.append(print(partial));,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,568,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,596,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,597,"        printTo(buf, instant);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,598,        return buf.toString();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,611,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,612,"        printTo(buf, partial);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,613,        return buf.toString();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,626,            zone = DateTimeZone.UTC;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,627,            offset = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,628,            adjustedInstant = instant;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,634,        DateTimePrinter printer = requirePrinter();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,635,        chrono = selectChronology(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,638,        DateTimeZone zone = chrono.getZone();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,639,        int offset = zone.getOffset(instant);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,640,        long adjustedInstant = instant + offset;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,641,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,643,            zone = DateTimeZone.UTC;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,644,            offset = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,645,            adjustedInstant = instant;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,647,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,648,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,658,"            throw new UnsupportedOperationException(""Printing not supported"");",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,694,        DateTimeParser parser = requireParser();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,695,        if (instant == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,696,"            throw new IllegalArgumentException(""Instant must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,699,        long instantMillis = instant.getMillis();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,700,        Chronology chrono = instant.getChronology();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,701,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,702,        chrono = selectChronology(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,704,        DateTimeParserBucket bucket = new DateTimeParserBucket(,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,706,"        int newPos = parser.parseInto(bucket, text, position);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,707,"        instant.setMillis(bucket.computeMillis(false, text));",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,708,        if (iOffsetParsed && bucket.getOffsetInteger() != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,709,            int parsedOffset = bucket.getOffsetInteger();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,710,            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,711,            chrono = chrono.withZone(parsedZone);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,712,        } else if (bucket.getZone() != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,713,            chrono = chrono.withZone(bucket.getZone());,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,715,        instant.setChronology(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,716,        if (iZone != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,717,            instant.setZone(iZone);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,719,        return newPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,735,        DateTimeParser parser = requireParser();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,737,        Chronology chrono = selectChronology(iChrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,738,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,739,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,740,        if (newPos >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,741,            if (newPos >= text.length()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,742,"                return bucket.computeMillis(true, text);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,745,            newPos = ~newPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,747,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,765,        return parseLocalDateTime(text).toLocalDate();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,783,        return parseLocalDateTime(text).toLocalTime();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,801,        DateTimeParser parser = requireParser();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,803,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,804,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,805,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,806,        if (newPos >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,807,            if (newPos >= text.length()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,808,"                long millis = bucket.computeMillis(true, text);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,809,                if (bucket.getOffsetInteger() != null) {  // treat withOffsetParsed() as being true,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,810,                    int parsedOffset = bucket.getOffsetInteger();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,811,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,812,                    chrono = chrono.withZone(parsedZone);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,813,                } else if (bucket.getZone() != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,814,                    chrono = chrono.withZone(bucket.getZone());,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,816,"                return new LocalDateTime(millis, chrono);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,819,            newPos = ~newPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,821,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,842,        DateTimeParser parser = requireParser();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,844,        Chronology chrono = selectChronology(null);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,845,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,846,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,847,        if (newPos >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,848,            if (newPos >= text.length()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,849,"                long millis = bucket.computeMillis(true, text);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,850,                if (iOffsetParsed && bucket.getOffsetInteger() != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,851,                    int parsedOffset = bucket.getOffsetInteger();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,852,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,853,                    chrono = chrono.withZone(parsedZone);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,854,                } else if (bucket.getZone() != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,855,                    chrono = chrono.withZone(bucket.getZone());,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,857,"                DateTime dt = new DateTime(millis, chrono);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,858,                if (iZone != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,859,                    dt = dt.withZone(iZone);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,861,                return dt;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,864,            newPos = ~newPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,866,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,887,        DateTimeParser parser = requireParser();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,889,        Chronology chrono = selectChronology(null);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,890,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,891,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,892,        if (newPos >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,893,            if (newPos >= text.length()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,894,"                long millis = bucket.computeMillis(true, text);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,895,                if (iOffsetParsed && bucket.getOffsetInteger() != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,896,                    int parsedOffset = bucket.getOffsetInteger();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,897,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,898,                    chrono = chrono.withZone(parsedZone);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,899,                } else if (bucket.getZone() != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,900,                    chrono = chrono.withZone(bucket.getZone());,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,902,"                MutableDateTime dt = new MutableDateTime(millis, chrono);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,903,                if (iZone != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,904,                    dt.setZone(iZone);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,906,                return dt;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,909,            newPos = ~newPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,911,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,920,        DateTimeParser parser = iParser;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,921,        if (parser == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,922,"            throw new UnsupportedOperationException(""Parsing not supported"");",0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,924,        return parser;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,937,            chrono = iChrono;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,19,940,            chrono = chrono.withZone(iZone);,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,19,60,"            throw new IllegalArgumentException(""Range duration field must be precise"");",0.0,0,,0
org/joda/time/field/PreciseDateTimeField,19,66,"            throw new IllegalArgumentException(""The effective range must be at least 2"");",0.0,0,,0
org/joda/time/field/PreciseDateTimeField,19,82,            return iRange - 1 + (int) (((instant + 1) / getUnitMillis()) % iRange);,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,19,95,        int thisValue = get(instant);,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,19,96,        int wrappedValue = FieldUtils.getWrappedValue,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,19,99,        return instant + (wrappedValue - thisValue) * getUnitMillis();,0.0,0,,0
org/joda/time/field/PreciseDateTimeField,19,143,        return iRange;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,51,"            throw new IllegalArgumentException(""Unit duration field must be precise"");",0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,56,"            throw new IllegalArgumentException(""The unit milliseconds must be at least 1"");",0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,66,        return false;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,92,        if (instant >= 0) {,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,93,            return instant - instant % iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,95,            instant += 1;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,96,            return instant - instant % iUnitMillis - iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,109,        if (instant > 0) {,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,110,            instant -= 1;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,111,            return instant - instant % iUnitMillis + iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,113,            return instant - instant % iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,129,            return (instant + 1) % iUnitMillis + iUnitMillis - 1;,0.0,0,,0
org/joda/time/field/PreciseDurationDateTimeField,19,163,        return getMaximumValue(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,52,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,62,        return iType.getName();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,94,"        return getAsText(get(instant), locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,106,"        return getAsText(instant, null);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,121,"        return getAsText(fieldValue, locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,136,"        return getAsText(partial, partial.get(getType()), locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,153,        return Integer.toString(fieldValue);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,168,"        return getAsShortText(get(instant), locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,180,"        return getAsShortText(instant, null);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,195,"        return getAsShortText(fieldValue, locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,210,"        return getAsShortText(partial, partial.get(getType()), locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,227,"        return getAsText(fieldValue, locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,267,"        return getDurationField().add(instant, value);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,298,        if (valueToAdd == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,299,            return values;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,304,        DateTimeField nextField = null;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,306,        while (valueToAdd > 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,307,"            int max = getMaximumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,308,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,309,            if (proposed <= max) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,310,                values[fieldIndex] = (int) proposed;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,311,                break;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,313,            if (nextField == null) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,314,                if (fieldIndex == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,315,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,317,                nextField = instant.getField(fieldIndex - 1);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,319,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,320,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,323,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,324,"            values = nextField.add(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,325,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,326,        },0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,327,        while (valueToAdd < 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,328,"            int min = getMinimumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,329,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,330,            if (proposed >= min) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,331,                values[fieldIndex] = (int) proposed;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,332,                break;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,334,            if (nextField == null) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,335,                if (fieldIndex == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,336,"                    throw new IllegalArgumentException(""Maximum value exceeded for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,338,                nextField = instant.getField(fieldIndex - 1);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,339,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,340,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,343,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,344,"            values = nextField.add(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,345,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,346,        },0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,348,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,379,        if (valueToAdd == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,380,            return values;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,385,        DateTimeField nextField = null;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,387,        while (valueToAdd > 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,388,"            int max = getMaximumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,389,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,390,            if (proposed <= max) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,391,                values[fieldIndex] = (int) proposed;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,392,                break;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,394,            if (nextField == null) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,395,                if (fieldIndex == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,396,                    valueToAdd -= (max + 1) - values[fieldIndex];,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,397,"                    values[fieldIndex] = getMinimumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,398,                    continue;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,400,                nextField = instant.getField(fieldIndex - 1);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,402,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,403,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,406,            valueToAdd -= (max + 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,407,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, 1);  // add 1 to next bigger field",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,408,"            values[fieldIndex] = getMinimumValue(instant, values);  // reset this field to zero",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,409,        },0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,410,        while (valueToAdd < 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,411,"            int min = getMinimumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,412,            long proposed = values[fieldIndex] + valueToAdd;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,413,            if (proposed >= min) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,414,                values[fieldIndex] = (int) proposed;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,415,                break;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,417,            if (nextField == null) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,418,                if (fieldIndex == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,419,                    valueToAdd -= (min - 1) - values[fieldIndex];,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,420,"                    values[fieldIndex] = getMaximumValue(instant, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,421,                    continue;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,423,                nextField = instant.getField(fieldIndex - 1);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,424,                if (getRangeDurationField().getType() != nextField.getDurationField().getType()) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,425,"                    throw new IllegalArgumentException(""Fields invalid for add"");",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,428,            valueToAdd -= (min - 1) - values[fieldIndex];  // reduce the amount to add,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,429,"            values = nextField.addWrapPartial(instant, fieldIndex - 1, values, -1);  // subtract 1 from next bigger field",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,430,"            values[fieldIndex] = getMaximumValue(instant, values);  // reset this field to max value",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,431,        },0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,433,"        return set(instant, fieldIndex, values, values[fieldIndex]);  // adjusts smaller fields",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,461,        int current = get(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,462,        int wrapped = FieldUtils.getWrappedValue,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,464,"        return set(instant, wrapped);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,495,        int current = values[fieldIndex];,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,496,        int wrapped = FieldUtils.getWrappedValue,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,498,"        return set(instant, fieldIndex, values, wrapped);  // adjusts smaller fields",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,522,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,545,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,585,"        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(partial, values), getMaximumValue(partial, values));",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,586,        values[fieldIndex] = newValue;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,589,        for (int i = fieldIndex + 1; i < partial.size(); i++) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,590,            DateTimeField field = partial.getField(i);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,591,"            if (values[i] > field.getMaximumValue(partial, values)) {",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,592,"                values[i] = field.getMaximumValue(partial, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,594,"            if (values[i] < field.getMinimumValue(partial, values)) {",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,595,"                values[i] = field.getMinimumValue(partial, values);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,598,        return values;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,618,"        int value = convertText(text, locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,619,"        return set(instant, value);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,635,"        return set(instant, text, null);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,654,"        int value = convertText(text, locale);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,655,"        return set(instant, fieldIndex, values, value);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,668,            return Integer.parseInt(text);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,669,        } catch (NumberFormatException ex) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,670,"            throw new IllegalFieldValueException(getType(), text);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,704,        return false;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,716,        return 0;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,746,        return getMinimumValue();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,758,        return getMinimumValue();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,772,        return getMinimumValue(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,792,        return getMaximumValue();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,804,        return getMaximumValue();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,818,        return getMaximumValue(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,829,        int max = getMaximumValue();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,830,        if (max >= 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,831,            if (max < 10) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,832,                return 1;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,833,            } else if (max < 100) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,834,                return 2;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,835,            } else if (max < 1000) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,836,                return 3;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,839,        return Integer.toString(max).length();,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,850,        return getMaximumTextLength(locale);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,886,        long newInstant = roundFloor(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,887,        if (newInstant != instant) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,888,"            instant = add(newInstant, 1);",0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,890,        return instant;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,903,        long floor = roundFloor(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,904,        long ceiling = roundCeiling(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,906,        long diffFromFloor = instant - floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,907,        long diffToCeiling = ceiling - instant;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,909,        if (diffFromFloor <= diffToCeiling) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,911,            return floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,913,            return ceiling;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,927,        long floor = roundFloor(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,928,        long ceiling = roundCeiling(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,930,        long diffFromFloor = instant - floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,931,        long diffToCeiling = ceiling - instant;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,933,        if (diffToCeiling <= diffFromFloor) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,935,            return ceiling;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,937,            return floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,955,        long floor = roundFloor(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,956,        long ceiling = roundCeiling(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,958,        long diffFromFloor = instant - floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,959,        long diffToCeiling = ceiling - instant;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,961,        if (diffFromFloor < diffToCeiling) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,963,            return floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,964,        } else if (diffToCeiling < diffFromFloor) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,966,            return ceiling;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,970,            if ((get(ceiling) & 1) == 0) {,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,971,                return ceiling;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,973,            return floor;,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,994,        return instant - roundFloor(instant);,0.0,0,,0
org/joda/time/field/BaseDateTimeField,19,1003,"        return ""DateTimeField["" + getName() + ']';",0.0,0,,0
org/joda/time/format/FormatUtils,19,36,    private FormatUtils() {,0.0,0,,0
org/joda/time/format/FormatUtils,19,37,    },0.0,0,,0
org/joda/time/format/FormatUtils,19,51,            buf.append('-');,0.0,0,,0
org/joda/time/format/FormatUtils,19,52,            if (value != Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,53,                value = -value;,0.0,0,,0
org/joda/time/format/FormatUtils,19,55,                for (; size > 10; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,56,                    buf.append('0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,58,"                buf.append("""" + -(long)Integer.MIN_VALUE);",0.0,0,,0
org/joda/time/format/FormatUtils,19,59,                return;,0.0,0,,0
org/joda/time/format/FormatUtils,19,69,                buf.append('0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,81,                digits = 3;,0.0,0,,0
org/joda/time/format/FormatUtils,19,85,                digits = (int)(Math.log(value) / LOG_10) + 1;,0.0,0,,0
org/joda/time/format/FormatUtils,19,88,                buf.append('0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,105,        int intValue = (int)value;,0.0,0,,0
org/joda/time/format/FormatUtils,19,106,        if (intValue == value) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,107,"            appendPaddedInteger(buf, intValue, size);",0.0,0,,0
org/joda/time/format/FormatUtils,19,108,        } else if (size <= 19) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,109,            buf.append(Long.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,19,111,            if (value < 0) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,112,                buf.append('-');,0.0,0,,0
org/joda/time/format/FormatUtils,19,113,                if (value != Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,114,                    value = -value;,0.0,0,,0
org/joda/time/format/FormatUtils,19,116,                    for (; size > 19; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,117,                        buf.append('0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,119,"                    buf.append(""9223372036854775808"");",0.0,0,,0
org/joda/time/format/FormatUtils,19,120,                    return;,0.0,0,,0
org/joda/time/format/FormatUtils,19,123,            int digits = (int)(Math.log(value) / LOG_10) + 1;,0.0,0,,0
org/joda/time/format/FormatUtils,19,124,            for (; size > digits; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,125,                buf.append('0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,127,            buf.append(Long.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,19,129,    },0.0,0,,0
org/joda/time/format/FormatUtils,19,144,        if (value < 0) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,145,            out.write('-');,0.0,0,,0
org/joda/time/format/FormatUtils,19,146,            if (value != Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,147,                value = -value;,0.0,0,,0
org/joda/time/format/FormatUtils,19,149,                for (; size > 10; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,150,                    out.write('0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,152,"                out.write("""" + -(long)Integer.MIN_VALUE);",0.0,0,,0
org/joda/time/format/FormatUtils,19,153,                return;,0.0,0,,0
org/joda/time/format/FormatUtils,19,156,        if (value < 10) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,157,            for (; size > 1; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,158,                out.write('0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,160,            out.write(value + '0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,161,        } else if (value < 100) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,162,            for (; size > 2; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,163,                out.write('0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,168,            int d = ((value + 1) * 13421772) >> 27;,0.0,0,,0
org/joda/time/format/FormatUtils,19,169,            out.write(d + '0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,171,            out.write(value - (d << 3) - (d << 1) + '0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,172,        } else {,0.0,0,,0
org/joda/time/format/FormatUtils,19,174,            if (value < 1000) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,175,                digits = 3;,0.0,0,,0
org/joda/time/format/FormatUtils,19,176,            } else if (value < 10000) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,177,                digits = 4;,0.0,0,,0
org/joda/time/format/FormatUtils,19,179,                digits = (int)(Math.log(value) / LOG_10) + 1;,0.0,0,,0
org/joda/time/format/FormatUtils,19,181,            for (; size > digits; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,182,                out.write('0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,184,            out.write(Integer.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,19,186,    },0.0,0,,0
org/joda/time/format/FormatUtils,19,201,        int intValue = (int)value;,0.0,0,,0
org/joda/time/format/FormatUtils,19,202,        if (intValue == value) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,203,"            writePaddedInteger(out, intValue, size);",0.0,0,,0
org/joda/time/format/FormatUtils,19,204,        } else if (size <= 19) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,205,            out.write(Long.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,19,207,            if (value < 0) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,208,                out.write('-');,0.0,0,,0
org/joda/time/format/FormatUtils,19,209,                if (value != Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,210,                    value = -value;,0.0,0,,0
org/joda/time/format/FormatUtils,19,212,                    for (; size > 19; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,213,                        out.write('0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,215,"                    out.write(""9223372036854775808"");",0.0,0,,0
org/joda/time/format/FormatUtils,19,216,                    return;,0.0,0,,0
org/joda/time/format/FormatUtils,19,219,            int digits = (int)(Math.log(value) / LOG_10) + 1;,0.0,0,,0
org/joda/time/format/FormatUtils,19,220,            for (; size > digits; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,221,                out.write('0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,223,            out.write(Long.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,19,225,    },0.0,0,,0
org/joda/time/format/FormatUtils,19,236,        if (value < 0) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,237,            buf.append('-');,0.0,0,,0
org/joda/time/format/FormatUtils,19,238,            if (value != Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,239,                value = -value;,0.0,0,,0
org/joda/time/format/FormatUtils,19,241,"                buf.append("""" + -(long)Integer.MIN_VALUE);",0.0,0,,0
org/joda/time/format/FormatUtils,19,242,                return;,0.0,0,,0
org/joda/time/format/FormatUtils,19,245,        if (value < 10) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,246,            buf.append((char)(value + '0'));,0.0,0,,0
org/joda/time/format/FormatUtils,19,247,        } else if (value < 100) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,251,            int d = ((value + 1) * 13421772) >> 27;,0.0,0,,0
org/joda/time/format/FormatUtils,19,252,            buf.append((char) (d + '0'));,0.0,0,,0
org/joda/time/format/FormatUtils,19,254,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,0.0,0,,0
org/joda/time/format/FormatUtils,19,255,        } else {,0.0,0,,0
org/joda/time/format/FormatUtils,19,256,            buf.append(Integer.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,19,258,    },0.0,0,,0
org/joda/time/format/FormatUtils,19,269,        int intValue = (int)value;,0.0,0,,0
org/joda/time/format/FormatUtils,19,270,        if (intValue == value) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,271,"            appendUnpaddedInteger(buf, intValue);",0.0,0,,0
org/joda/time/format/FormatUtils,19,273,            buf.append(Long.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,19,275,    },0.0,0,,0
org/joda/time/format/FormatUtils,19,288,        if (value < 0) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,289,            out.write('-');,0.0,0,,0
org/joda/time/format/FormatUtils,19,290,            if (value != Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,291,                value = -value;,0.0,0,,0
org/joda/time/format/FormatUtils,19,293,"                out.write("""" + -(long)Integer.MIN_VALUE);",0.0,0,,0
org/joda/time/format/FormatUtils,19,294,                return;,0.0,0,,0
org/joda/time/format/FormatUtils,19,297,        if (value < 10) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,298,            out.write(value + '0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,299,        } else if (value < 100) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,303,            int d = ((value + 1) * 13421772) >> 27;,0.0,0,,0
org/joda/time/format/FormatUtils,19,304,            out.write(d + '0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,306,            out.write(value - (d << 3) - (d << 1) + '0');,0.0,0,,0
org/joda/time/format/FormatUtils,19,307,        } else {,0.0,0,,0
org/joda/time/format/FormatUtils,19,308,            out.write(Integer.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,19,310,    },0.0,0,,0
org/joda/time/format/FormatUtils,19,323,        int intValue = (int)value;,0.0,0,,0
org/joda/time/format/FormatUtils,19,324,        if (intValue == value) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,325,"            writeUnpaddedInteger(out, intValue);",0.0,0,,0
org/joda/time/format/FormatUtils,19,327,            out.write(Long.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,19,329,    },0.0,0,,0
org/joda/time/format/FormatUtils,19,336,        if (value < 0) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,337,            if (value != Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,338,                return calculateDigitCount(-value) + 1;,0.0,0,,0
org/joda/time/format/FormatUtils,19,340,                return 20;,0.0,0,,0
org/joda/time/format/FormatUtils,19,343,        return ,0.0,0,,0
org/joda/time/format/FormatUtils,19,352,        int value = text.charAt(position) - '0';,0.0,0,,0
org/joda/time/format/FormatUtils,19,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,0.0,0,,0
org/joda/time/format/FormatUtils,19,357,        int sampleLen = errorPos + 32;,0.0,0,,0
org/joda/time/format/FormatUtils,19,359,        if (text.length() <= sampleLen + 3) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,360,            sampleText = text;,0.0,0,,0
org/joda/time/format/FormatUtils,19,362,"            sampleText = text.substring(0, sampleLen).concat(""..."");",0.0,0,,0
org/joda/time/format/FormatUtils,19,365,        if (errorPos <= 0) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,366,"            return ""Invalid format: \"""" + sampleText + '""';",0.0,0,,0
org/joda/time/format/FormatUtils,19,369,        if (errorPos >= text.length()) {,0.0,0,,0
org/joda/time/format/FormatUtils,19,370,"            return ""Invalid format: \"""" + sampleText + ""\"" is too short"";",0.0,0,,0
org/joda/time/format/FormatUtils,19,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1186,            out.write(iValue);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1187,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1190,            buf.append(iValue);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1191,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1194,            out.write(iValue);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1195,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1202,            if (position >= text.length()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1203,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1206,            char a = text.charAt(position);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1207,            char b = iValue;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1209,            if (a != b) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1210,                a = Character.toUpperCase(a);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1211,                b = Character.toUpperCase(b);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1212,                if (a != b) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1213,                    a = Character.toLowerCase(a);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1214,                    b = Character.toLowerCase(b);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1215,                    if (a != b) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1216,                        return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,19,1221,            return position + 1;,0.0,0,,0
org/joda/time/base/BaseDateTime,19,61,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());",0.0,0,,0
org/joda/time/base/BaseDateTime,19,62,    },0.0,0,,0
org/joda/time/base/BaseDateTime,19,73,"        this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));",0.0,0,,0
org/joda/time/base/BaseDateTime,19,74,    },0.0,0,,0
org/joda/time/base/BaseDateTime,19,86,"        this(DateTimeUtils.currentTimeMillis(), chronology);",0.0,0,,0
org/joda/time/base/BaseDateTime,19,87,    },0.0,0,,0
org/joda/time/base/BaseDateTime,19,97,"        this(instant, ISOChronology.getInstance());",0.0,0,,0
org/joda/time/base/BaseDateTime,19,98,    },0.0,0,,0
org/joda/time/base/BaseDateTime,19,110,"        this(instant, ISOChronology.getInstance(zone));",0.0,0,,0
org/joda/time/base/BaseDateTime,19,111,    },0.0,0,,0
org/joda/time/base/BaseDateTime,19,124,        super();,0.0,0,,0
org/joda/time/base/BaseDateTime,19,125,        iChronology = checkChronology(chronology);,0.0,0,,0
org/joda/time/base/BaseDateTime,19,126,"        iMillis = checkInstant(instant, iChronology);",0.0,0,,0
org/joda/time/base/BaseDateTime,19,127,    },0.0,0,,0
org/joda/time/base/BaseDateTime,19,146,        super();,0.0,0,,0
org/joda/time/base/BaseDateTime,19,147,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,,0
org/joda/time/base/BaseDateTime,19,148,"        Chronology chrono = checkChronology(converter.getChronology(instant, zone));",0.0,0,,0
org/joda/time/base/BaseDateTime,19,149,        iChronology = chrono;,0.0,0,,0
org/joda/time/base/BaseDateTime,19,150,"        iMillis = checkInstant(converter.getInstantMillis(instant, chrono), chrono);",0.0,0,,0
org/joda/time/base/BaseDateTime,19,151,    },0.0,0,,0
org/joda/time/base/BaseDateTime,19,168,        super();,0.0,0,,0
org/joda/time/base/BaseDateTime,19,169,        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);,0.0,0,,0
org/joda/time/base/BaseDateTime,19,170,"        iChronology = checkChronology(converter.getChronology(instant, chronology));",0.0,0,,0
org/joda/time/base/BaseDateTime,19,171,"        iMillis = checkInstant(converter.getInstantMillis(instant, chronology), iChronology);",0.0,0,,0
org/joda/time/base/BaseDateTime,19,172,    },0.0,0,,0
org/joda/time/base/BaseDateTime,19,195,"        this(year, monthOfYear, dayOfMonth, hourOfDay,",0.0,0,,0
org/joda/time/base/BaseDateTime,19,197,    },0.0,0,,0
org/joda/time/base/BaseDateTime,19,317,"        iMillis = checkInstant(instant, iChronology);",0.0,0,,0
org/joda/time/base/BaseDateTime,19,318,    },0.0,0,,0
org/joda/time/base/BaseDateTime,19,329,        iChronology = checkChronology(chronology);,0.0,0,,0
org/joda/time/base/BaseDateTime,19,330,    },0.0,0,,0
org/joda/time/base/AbstractDateTime,19,66,        if (type == null) {,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,67,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,,0
org/joda/time/base/AbstractDateTime,19,69,        return type.getField(getChronology()).get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,79,        return getChronology().era().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,88,        return getChronology().centuryOfEra().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,97,        return getChronology().yearOfEra().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,106,        return getChronology().yearOfCentury().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,115,        return getChronology().year().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,130,        return getChronology().weekyear().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,139,        return getChronology().monthOfYear().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,153,        return getChronology().weekOfWeekyear().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,162,        return getChronology().dayOfYear().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,173,        return getChronology().dayOfMonth().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,184,        return getChronology().dayOfWeek().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,194,        return getChronology().hourOfDay().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,203,        return getChronology().minuteOfDay().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,212,        return getChronology().minuteOfHour().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,221,        return getChronology().secondOfDay().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,230,        return getChronology().secondOfMinute().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,239,        return getChronology().millisOfDay().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,248,        return getChronology().millisOfSecond().get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,270,        if (locale == null) {,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,271,            locale = Locale.getDefault();,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,273,        DateTimeZone zone = getZone();,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,274,"        Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);",0.0,0,,0
org/joda/time/base/AbstractDateTime,19,275,        cal.setTime(toDate());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,276,        return cal;,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,294,        DateTimeZone zone = getZone();,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,295,        GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,296,        cal.setTime(toDate());,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,297,        return cal;,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,308,        if (pattern == null) {,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,309,            return toString();,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,311,        return DateTimeFormat.forPattern(pattern).print(this);,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,322,        if (pattern == null) {,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,323,            return toString();,0.0,0,,0
org/joda/time/base/AbstractDateTime,19,325,        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);,0.0,0,,0
org/joda/time/base/AbstractInstant,19,71,        return getChronology().getZone();,0.0,0,,0
org/joda/time/base/AbstractInstant,19,89,        if (type == null) {,0.0,0,,0
org/joda/time/base/AbstractInstant,19,90,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,,0
org/joda/time/base/AbstractInstant,19,92,        return type.getField(getChronology()).get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractInstant,19,103,        if (type == null) {,0.0,0,,0
org/joda/time/base/AbstractInstant,19,104,            return false;,0.0,0,,0
org/joda/time/base/AbstractInstant,19,106,        return type.getField(getChronology()).isSupported();,0.0,0,,0
org/joda/time/base/AbstractInstant,19,124,        if (field == null) {,0.0,0,,0
org/joda/time/base/AbstractInstant,19,125,"            throw new IllegalArgumentException(""The DateTimeField must not be null"");",0.0,0,,0
org/joda/time/base/AbstractInstant,19,127,        return field.get(getMillis());,0.0,0,,0
org/joda/time/base/AbstractInstant,19,137,        return new Instant(getMillis());,0.0,0,,0
org/joda/time/base/AbstractInstant,19,146,"        return new DateTime(getMillis(), getZone());",0.0,0,,0
org/joda/time/base/AbstractInstant,19,155,"        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,,0
org/joda/time/base/AbstractInstant,19,165,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,,0
org/joda/time/base/AbstractInstant,19,166,        chrono = chrono.withZone(zone);,0.0,0,,0
org/joda/time/base/AbstractInstant,19,167,"        return new DateTime(getMillis(), chrono);",0.0,0,,0
org/joda/time/base/AbstractInstant,19,177,"        return new DateTime(getMillis(), chronology);",0.0,0,,0
org/joda/time/base/AbstractInstant,19,191,"        return new MutableDateTime(getMillis(), getZone());",0.0,0,,0
org/joda/time/base/AbstractInstant,19,200,"        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));",0.0,0,,0
org/joda/time/base/AbstractInstant,19,210,        Chronology chrono = DateTimeUtils.getChronology(getChronology());,0.0,0,,0
org/joda/time/base/AbstractInstant,19,211,        chrono = chrono.withZone(zone);,0.0,0,,0
org/joda/time/base/AbstractInstant,19,212,"        return new MutableDateTime(getMillis(), chrono);",0.0,0,,0
org/joda/time/base/AbstractInstant,19,222,"        return new MutableDateTime(getMillis(), chronology);",0.0,0,,0
org/joda/time/base/AbstractInstant,19,235,        return new Date(getMillis());,0.0,0,,0
org/joda/time/base/AbstractInstant,19,259,        if (this == readableInstant) {,0.0,0,,0
org/joda/time/base/AbstractInstant,19,260,            return true;,0.0,0,,0
org/joda/time/base/AbstractInstant,19,262,        if (readableInstant instanceof ReadableInstant == false) {,0.0,0,,0
org/joda/time/base/AbstractInstant,19,263,            return false;,0.0,0,,0
org/joda/time/base/AbstractInstant,19,265,        ReadableInstant otherInstant = (ReadableInstant) readableInstant;,0.0,0,,0
org/joda/time/base/AbstractInstant,19,266,        return,0.0,0,,0
org/joda/time/base/AbstractInstant,19,278,        return,0.0,0,,0
org/joda/time/base/AbstractInstant,19,296,        if (this == other) {,0.0,0,,0
org/joda/time/base/AbstractInstant,19,297,            return 0;,0.0,0,,0
org/joda/time/base/AbstractInstant,19,300,        long otherMillis = other.getMillis();,0.0,0,,0
org/joda/time/base/AbstractInstant,19,301,        long thisMillis = getMillis();,0.0,0,,0
org/joda/time/base/AbstractInstant,19,304,        if (thisMillis == otherMillis) {,0.0,0,,0
org/joda/time/base/AbstractInstant,19,305,            return 0;,0.0,0,,0
org/joda/time/base/AbstractInstant,19,307,        if (thisMillis < otherMillis) {,0.0,0,,0
org/joda/time/base/AbstractInstant,19,308,            return -1;,0.0,0,,0
org/joda/time/base/AbstractInstant,19,310,            return 1;,0.0,0,,0
org/joda/time/base/AbstractInstant,19,323,        return (getMillis() > instant);,0.0,0,,0
org/joda/time/base/AbstractInstant,19,333,        return isAfter(DateTimeUtils.currentTimeMillis());,0.0,0,,0
org/joda/time/base/AbstractInstant,19,344,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,,0
org/joda/time/base/AbstractInstant,19,345,        return isAfter(instantMillis);,0.0,0,,0
org/joda/time/base/AbstractInstant,19,357,        return (getMillis() < instant);,0.0,0,,0
org/joda/time/base/AbstractInstant,19,367,        return isBefore(DateTimeUtils.currentTimeMillis());,0.0,0,,0
org/joda/time/base/AbstractInstant,19,378,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,,0
org/joda/time/base/AbstractInstant,19,379,        return isBefore(instantMillis);,0.0,0,,0
org/joda/time/base/AbstractInstant,19,391,        return (getMillis() == instant);,0.0,0,,0
org/joda/time/base/AbstractInstant,19,401,        return isEqual(DateTimeUtils.currentTimeMillis());,0.0,0,,0
org/joda/time/base/AbstractInstant,19,412,        long instantMillis = DateTimeUtils.getInstantMillis(instant);,0.0,0,,0
org/joda/time/base/AbstractInstant,19,413,        return isEqual(instantMillis);,0.0,0,,0
org/joda/time/base/AbstractInstant,19,436,        if (formatter == null) {,0.0,0,,0
org/joda/time/base/AbstractInstant,19,437,            return toString();,0.0,0,,0
org/joda/time/base/AbstractInstant,19,439,        return formatter.print(this);,0.0,0,,0
org/joda/time/base/AbstractInstant,19,55,public abstract class AbstractInstant implements ReadableInstant {,0.0,0,,0
org/joda/time/DateTime,19,155,        super();,0.0,0,,0
org/joda/time/DateTime,19,156,    },0.0,0,,0
org/joda/time/DateTime,19,168,        super(zone);,0.0,0,,0
org/joda/time/DateTime,19,169,    },0.0,0,,0
org/joda/time/DateTime,19,182,        super(chronology);,0.0,0,,0
org/joda/time/DateTime,19,183,    },0.0,0,,0
org/joda/time/DateTime,19,193,        super(instant);,0.0,0,,0
org/joda/time/DateTime,19,194,    },0.0,0,,0
org/joda/time/DateTime,19,206,"        super(instant, zone);",0.0,0,,0
org/joda/time/DateTime,19,207,    },0.0,0,,0
org/joda/time/DateTime,19,220,"        super(instant, chronology);",0.0,0,,0
org/joda/time/DateTime,19,221,    },0.0,0,,0
org/joda/time/DateTime,19,241,"        super(instant, (Chronology) null);",0.0,0,,0
org/joda/time/DateTime,19,242,    },0.0,0,,0
org/joda/time/DateTime,19,265,"        super(instant, zone);",0.0,0,,0
org/joda/time/DateTime,19,266,    },0.0,0,,0
org/joda/time/DateTime,19,286,"        super(instant, DateTimeUtils.getChronology(chronology));",0.0,0,,0
org/joda/time/DateTime,19,287,    },0.0,0,,0
org/joda/time/DateTime,19,307,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0);",0.0,0,,0
org/joda/time/DateTime,19,308,    },0.0,0,,0
org/joda/time/DateTime,19,357,"        super(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/DateTime,19,359,    },0.0,0,,0
org/joda/time/DateTime,19,381,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0);",0.0,0,,0
org/joda/time/DateTime,19,382,    },0.0,0,,0
org/joda/time/DateTime,19,407,"        super(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/DateTime,19,409,    },0.0,0,,0
org/joda/time/DateTime,19,435,"        super(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/DateTime,19,437,    },0.0,0,,0
org/joda/time/DateTime,19,460,"        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);",0.0,0,,0
org/joda/time/DateTime,19,461,    },0.0,0,,0
org/joda/time/DateTime,19,487,"        super(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/DateTime,19,489,    },0.0,0,,0
org/joda/time/DateTime,19,516,"        super(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/DateTime,19,518,    },0.0,0,,0
org/joda/time/DateTime,19,89,        return new DateTime();,0.0,0,,0
org/joda/time/DateTime,19,101,        if (zone == null) {,0.0,0,,0
org/joda/time/DateTime,19,102,"            throw new NullPointerException(""Zone must not be null"");",0.0,0,,0
org/joda/time/DateTime,19,104,        return new DateTime(zone);,0.0,0,,0
org/joda/time/DateTime,19,116,        if (chronology == null) {,0.0,0,,0
org/joda/time/DateTime,19,117,"            throw new NullPointerException(""Chronology must not be null"");",0.0,0,,0
org/joda/time/DateTime,19,119,        return new DateTime(chronology);,0.0,0,,0
org/joda/time/DateTime,19,133,"        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());",0.0,0,,0
org/joda/time/DateTime,19,144,        return formatter.parseDateTime(str);,0.0,0,,0
org/joda/time/DateTime,19,527,        return this;,0.0,0,,0
org/joda/time/DateTime,19,537,        if (getChronology() == ISOChronology.getInstance()) {,0.0,0,,0
org/joda/time/DateTime,19,538,            return this;,0.0,0,,0
org/joda/time/DateTime,19,540,        return super.toDateTimeISO();,0.0,0,,0
org/joda/time/DateTime,19,550,        zone = DateTimeUtils.getZone(zone);,0.0,0,,0
org/joda/time/DateTime,19,551,        if (getZone() == zone) {,0.0,0,,0
org/joda/time/DateTime,19,552,            return this;,0.0,0,,0
org/joda/time/DateTime,19,554,        return super.toDateTime(zone);,0.0,0,,0
org/joda/time/DateTime,19,564,        chronology = DateTimeUtils.getChronology(chronology);,0.0,0,,0
org/joda/time/DateTime,19,565,        if (getChronology() == chronology) {,0.0,0,,0
org/joda/time/DateTime,19,566,            return this;,0.0,0,,0
org/joda/time/DateTime,19,568,        return super.toDateTime(chronology);,0.0,0,,0
org/joda/time/DateTime,19,582,"        return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));",0.0,0,,0
org/joda/time/DateTime,19,595,        newChronology = DateTimeUtils.getChronology(newChronology);,0.0,0,,0
org/joda/time/DateTime,19,596,"        return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));",0.0,0,,0
org/joda/time/DateTime,19,618,        return withChronology(getChronology().withZone(newZone));,0.0,0,,0
org/joda/time/DateTime,19,639,        newZone = DateTimeUtils.getZone(newZone);,0.0,0,,0
org/joda/time/DateTime,19,640,        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());,0.0,0,,0
org/joda/time/DateTime,19,641,        if (newZone == originalZone) {,0.0,0,,0
org/joda/time/DateTime,19,642,            return this;,0.0,0,,0
org/joda/time/DateTime,19,645,"        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());",0.0,0,,0
org/joda/time/DateTime,19,646,"        return new DateTime(millis, getChronology().withZone(newZone));",0.0,0,,0
org/joda/time/DateTime,19,665,"        long newMillis = getZone().adjustOffset(getMillis(), false);",0.0,0,,0
org/joda/time/DateTime,19,666,        return withMillis(newMillis);,0.0,0,,0
org/joda/time/DateTime,19,685,"        long newMillis = getZone().adjustOffset(getMillis(), true);",0.0,0,,0
org/joda/time/DateTime,19,686,        return withMillis(newMillis);,0.0,0,,0
org/joda/time/DateTime,19,709,        Chronology chrono = getChronology();,0.0,0,,0
org/joda/time/DateTime,19,710,        long instant = getMillis();,0.0,0,,0
org/joda/time/DateTime,19,711,"        instant = chrono.year().set(instant, year);",0.0,0,,0
org/joda/time/DateTime,19,712,"        instant = chrono.monthOfYear().set(instant, monthOfYear);",0.0,0,,0
org/joda/time/DateTime,19,713,"        instant = chrono.dayOfMonth().set(instant, dayOfMonth);",0.0,0,,0
org/joda/time/DateTime,19,714,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,737,        Chronology chrono = getChronology();,0.0,0,,0
org/joda/time/DateTime,19,738,        long instant = getMillis();,0.0,0,,0
org/joda/time/DateTime,19,739,"        instant = chrono.hourOfDay().set(instant, hourOfDay);",0.0,0,,0
org/joda/time/DateTime,19,740,"        instant = chrono.minuteOfHour().set(instant, minuteOfHour);",0.0,0,,0
org/joda/time/DateTime,19,741,"        instant = chrono.secondOfMinute().set(instant, secondOfMinute);",0.0,0,,0
org/joda/time/DateTime,19,742,"        instant = chrono.millisOfSecond().set(instant, millisOfSecond);",0.0,0,,0
org/joda/time/DateTime,19,743,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,759,        return toLocalDate().toDateTimeAtStartOfDay(getZone());,0.0,0,,0
org/joda/time/DateTime,19,776,        if (partial == null) {,0.0,0,,0
org/joda/time/DateTime,19,777,            return this;,0.0,0,,0
org/joda/time/DateTime,19,779,"        return withMillis(getChronology().set(partial, getMillis()));",0.0,0,,0
org/joda/time/DateTime,19,802,        if (fieldType == null) {,0.0,0,,0
org/joda/time/DateTime,19,803,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,,0
org/joda/time/DateTime,19,805,"        long instant = fieldType.getField(getChronology()).set(getMillis(), value);",0.0,0,,0
org/joda/time/DateTime,19,806,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,828,        if (fieldType == null) {,0.0,0,,0
org/joda/time/DateTime,19,829,"            throw new IllegalArgumentException(""Field must not be null"");",0.0,0,,0
org/joda/time/DateTime,19,831,        if (amount == 0) {,0.0,0,,0
org/joda/time/DateTime,19,832,            return this;,0.0,0,,0
org/joda/time/DateTime,19,834,"        long instant = fieldType.getField(getChronology()).add(getMillis(), amount);",0.0,0,,0
org/joda/time/DateTime,19,835,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,850,        if (durationToAdd == 0 || scalar == 0) {,0.0,0,,0
org/joda/time/DateTime,19,851,            return this;,0.0,0,,0
org/joda/time/DateTime,19,853,"        long instant = getChronology().add(getMillis(), durationToAdd, scalar);",0.0,0,,0
org/joda/time/DateTime,19,854,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,868,        if (durationToAdd == null || scalar == 0) {,0.0,0,,0
org/joda/time/DateTime,19,869,            return this;,0.0,0,,0
org/joda/time/DateTime,19,871,"        return withDurationAdded(durationToAdd.getMillis(), scalar);",0.0,0,,0
org/joda/time/DateTime,19,890,        if (period == null || scalar == 0) {,0.0,0,,0
org/joda/time/DateTime,19,891,            return this;,0.0,0,,0
org/joda/time/DateTime,19,893,"        long instant = getChronology().add(period, getMillis(), scalar);",0.0,0,,0
org/joda/time/DateTime,19,894,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,909,"        return withDurationAdded(duration, 1);",0.0,0,,0
org/joda/time/DateTime,19,923,"        return withDurationAdded(duration, 1);",0.0,0,,0
org/joda/time/DateTime,19,949,"        return withPeriodAdded(period, 1);",0.0,0,,0
org/joda/time/DateTime,19,976,        if (years == 0) {,0.0,0,,0
org/joda/time/DateTime,19,977,            return this;,0.0,0,,0
org/joda/time/DateTime,19,979,"        long instant = getChronology().years().add(getMillis(), years);",0.0,0,,0
org/joda/time/DateTime,19,980,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,1006,        if (months == 0) {,0.0,0,,0
org/joda/time/DateTime,19,1007,            return this;,0.0,0,,0
org/joda/time/DateTime,19,1009,"        long instant = getChronology().months().add(getMillis(), months);",0.0,0,,0
org/joda/time/DateTime,19,1010,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,1032,        if (weeks == 0) {,0.0,0,,0
org/joda/time/DateTime,19,1033,            return this;,0.0,0,,0
org/joda/time/DateTime,19,1035,"        long instant = getChronology().weeks().add(getMillis(), weeks);",0.0,0,,0
org/joda/time/DateTime,19,1036,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,1067,        if (days == 0) {,0.0,0,,0
org/joda/time/DateTime,19,1068,            return this;,0.0,0,,0
org/joda/time/DateTime,19,1070,"        long instant = getChronology().days().add(getMillis(), days);",0.0,0,,0
org/joda/time/DateTime,19,1071,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,1098,        if (hours == 0) {,0.0,0,,0
org/joda/time/DateTime,19,1099,            return this;,0.0,0,,0
org/joda/time/DateTime,19,1101,"        long instant = getChronology().hours().add(getMillis(), hours);",0.0,0,,0
org/joda/time/DateTime,19,1102,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,1125,        if (minutes == 0) {,0.0,0,,0
org/joda/time/DateTime,19,1126,            return this;,0.0,0,,0
org/joda/time/DateTime,19,1128,"        long instant = getChronology().minutes().add(getMillis(), minutes);",0.0,0,,0
org/joda/time/DateTime,19,1129,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,1152,        if (seconds == 0) {,0.0,0,,0
org/joda/time/DateTime,19,1153,            return this;,0.0,0,,0
org/joda/time/DateTime,19,1155,"        long instant = getChronology().seconds().add(getMillis(), seconds);",0.0,0,,0
org/joda/time/DateTime,19,1156,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,1178,        if (millis == 0) {,0.0,0,,0
org/joda/time/DateTime,19,1179,            return this;,0.0,0,,0
org/joda/time/DateTime,19,1181,"        long instant = getChronology().millis().add(getMillis(), millis);",0.0,0,,0
org/joda/time/DateTime,19,1182,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,1197,"        return withDurationAdded(duration, -1);",0.0,0,,0
org/joda/time/DateTime,19,1211,"        return withDurationAdded(duration, -1);",0.0,0,,0
org/joda/time/DateTime,19,1238,"        return withPeriodAdded(period, -1);",0.0,0,,0
org/joda/time/DateTime,19,1265,        if (years == 0) {,0.0,0,,0
org/joda/time/DateTime,19,1266,            return this;,0.0,0,,0
org/joda/time/DateTime,19,1268,"        long instant = getChronology().years().subtract(getMillis(), years);",0.0,0,,0
org/joda/time/DateTime,19,1269,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,1295,        if (months == 0) {,0.0,0,,0
org/joda/time/DateTime,19,1296,            return this;,0.0,0,,0
org/joda/time/DateTime,19,1298,"        long instant = getChronology().months().subtract(getMillis(), months);",0.0,0,,0
org/joda/time/DateTime,19,1299,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,1321,        if (weeks == 0) {,0.0,0,,0
org/joda/time/DateTime,19,1322,            return this;,0.0,0,,0
org/joda/time/DateTime,19,1324,"        long instant = getChronology().weeks().subtract(getMillis(), weeks);",0.0,0,,0
org/joda/time/DateTime,19,1325,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,1356,        if (days == 0) {,0.0,0,,0
org/joda/time/DateTime,19,1357,            return this;,0.0,0,,0
org/joda/time/DateTime,19,1359,"        long instant = getChronology().days().subtract(getMillis(), days);",0.0,0,,0
org/joda/time/DateTime,19,1360,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,1388,        if (hours == 0) {,0.0,0,,0
org/joda/time/DateTime,19,1389,            return this;,0.0,0,,0
org/joda/time/DateTime,19,1391,"        long instant = getChronology().hours().subtract(getMillis(), hours);",0.0,0,,0
org/joda/time/DateTime,19,1392,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,1415,        if (minutes == 0) {,0.0,0,,0
org/joda/time/DateTime,19,1416,            return this;,0.0,0,,0
org/joda/time/DateTime,19,1418,"        long instant = getChronology().minutes().subtract(getMillis(), minutes);",0.0,0,,0
org/joda/time/DateTime,19,1419,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,1442,        if (seconds == 0) {,0.0,0,,0
org/joda/time/DateTime,19,1443,            return this;,0.0,0,,0
org/joda/time/DateTime,19,1445,"        long instant = getChronology().seconds().subtract(getMillis(), seconds);",0.0,0,,0
org/joda/time/DateTime,19,1446,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,1469,        if (millis == 0) {,0.0,0,,0
org/joda/time/DateTime,19,1470,            return this;,0.0,0,,0
org/joda/time/DateTime,19,1472,"        long instant = getChronology().millis().subtract(getMillis(), millis);",0.0,0,,0
org/joda/time/DateTime,19,1473,        return withMillis(instant);,0.0,0,,0
org/joda/time/DateTime,19,1485,        if (type == null) {,0.0,0,,0
org/joda/time/DateTime,19,1486,"            throw new IllegalArgumentException(""The DateTimeFieldType must not be null"");",0.0,0,,0
org/joda/time/DateTime,19,1488,        DateTimeField field = type.getField(getChronology());,0.0,0,,0
org/joda/time/DateTime,19,1489,        if (field.isSupported() == false) {,0.0,0,,0
org/joda/time/DateTime,19,1490,"            throw new IllegalArgumentException(""Field '"" + type + ""' is not supported"");",0.0,0,,0
org/joda/time/DateTime,19,1492,"        return new Property(this, field);",0.0,0,,0
org/joda/time/DateTime,19,1503,"        return new DateMidnight(getMillis(), getChronology());",0.0,0,,0
org/joda/time/DateTime,19,1515,"        return new YearMonthDay(getMillis(), getChronology());",0.0,0,,0
org/joda/time/DateTime,19,1527,"        return new TimeOfDay(getMillis(), getChronology());",0.0,0,,0
org/joda/time/DateTime,19,1538,"        return new LocalDateTime(getMillis(), getChronology());",0.0,0,,0
org/joda/time/DateTime,19,1549,"        return new LocalDate(getMillis(), getChronology());",0.0,0,,0
org/joda/time/DateTime,19,1560,"        return new LocalTime(getMillis(), getChronology());",0.0,0,,0
org/joda/time/DateTime,19,1577,"        return withMillis(getChronology().era().set(getMillis(), era));",0.0,0,,0
org/joda/time/DateTime,19,1593,"        return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));",0.0,0,,0
org/joda/time/DateTime,19,1609,"        return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));",0.0,0,,0
org/joda/time/DateTime,19,1625,"        return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));",0.0,0,,0
org/joda/time/DateTime,19,1641,"        return withMillis(getChronology().year().set(getMillis(), year));",0.0,0,,0
org/joda/time/DateTime,19,1663,"        return withMillis(getChronology().weekyear().set(getMillis(), weekyear));",0.0,0,,0
org/joda/time/DateTime,19,1679,"        return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));",0.0,0,,0
org/joda/time/DateTime,19,1700,"        return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));",0.0,0,,0
org/joda/time/DateTime,19,1716,"        return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));",0.0,0,,0
org/joda/time/DateTime,19,1732,"        return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));",0.0,0,,0
org/joda/time/DateTime,19,1748,"        return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));",0.0,0,,0
org/joda/time/DateTime,19,1765,"        return withMillis(getChronology().hourOfDay().set(getMillis(), hour));",0.0,0,,0
org/joda/time/DateTime,19,1781,"        return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));",0.0,0,,0
org/joda/time/DateTime,19,1797,"        return withMillis(getChronology().secondOfMinute().set(getMillis(), second));",0.0,0,,0
org/joda/time/DateTime,19,1813,"        return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));",0.0,0,,0
org/joda/time/DateTime,19,1829,"        return withMillis(getChronology().millisOfDay().set(getMillis(), millis));",0.0,0,,0
org/joda/time/DateTime,19,1840,"        return new Property(this, getChronology().era());",0.0,0,,0
org/joda/time/DateTime,19,1849,"        return new Property(this, getChronology().centuryOfEra());",0.0,0,,0
org/joda/time/DateTime,19,1858,"        return new Property(this, getChronology().yearOfCentury());",0.0,0,,0
org/joda/time/DateTime,19,1867,"        return new Property(this, getChronology().yearOfEra());",0.0,0,,0
org/joda/time/DateTime,19,1876,"        return new Property(this, getChronology().year());",0.0,0,,0
org/joda/time/DateTime,19,1885,"        return new Property(this, getChronology().weekyear());",0.0,0,,0
org/joda/time/DateTime,19,1894,"        return new Property(this, getChronology().monthOfYear());",0.0,0,,0
org/joda/time/DateTime,19,1903,"        return new Property(this, getChronology().weekOfWeekyear());",0.0,0,,0
org/joda/time/DateTime,19,1912,"        return new Property(this, getChronology().dayOfYear());",0.0,0,,0
org/joda/time/DateTime,19,1921,"        return new Property(this, getChronology().dayOfMonth());",0.0,0,,0
org/joda/time/DateTime,19,1930,"        return new Property(this, getChronology().dayOfWeek());",0.0,0,,0
org/joda/time/DateTime,19,1941,"        return new Property(this, getChronology().hourOfDay());",0.0,0,,0
org/joda/time/DateTime,19,1950,"        return new Property(this, getChronology().minuteOfDay());",0.0,0,,0
org/joda/time/DateTime,19,1959,"        return new Property(this, getChronology().minuteOfHour());",0.0,0,,0
org/joda/time/DateTime,19,1968,"        return new Property(this, getChronology().secondOfDay());",0.0,0,,0
org/joda/time/DateTime,19,1977,"        return new Property(this, getChronology().secondOfMinute());",0.0,0,,0
org/joda/time/DateTime,19,1986,"        return new Property(this, getChronology().millisOfDay());",0.0,0,,0
org/joda/time/DateTime,19,1995,"        return new Property(this, getChronology().millisOfSecond());",0.0,0,,0
org/joda/time/DateTimeFieldType,19,463,            if (this == obj) {,0.0,0,,0
org/joda/time/DateTimeFieldType,19,464,                return true;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,466,            if (obj instanceof StandardDateTimeFieldType) {,0.0,0,,0
org/joda/time/DateTimeFieldType,19,467,                return iOrdinal == ((StandardDateTimeFieldType) obj).iOrdinal;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,469,            return false;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,475,            return iOrdinal;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,484,                    return chronology.era();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,486,                    return chronology.yearOfEra();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,488,                    return chronology.centuryOfEra();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,490,                    return chronology.yearOfCentury();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,494,                    return chronology.dayOfYear();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,500,                    return chronology.weekyearOfCentury();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,502,                    return chronology.weekyear();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,504,                    return chronology.weekOfWeekyear();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,506,                    return chronology.dayOfWeek();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,508,                    return chronology.halfdayOfDay();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,510,                    return chronology.hourOfHalfday();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,512,                    return chronology.clockhourOfHalfday();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,514,                    return chronology.clockhourOfDay();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,518,                    return chronology.minuteOfDay();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,526,                    return chronology.millisOfDay();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,528,                    return chronology.millisOfSecond();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,531,                    throw new InternalError();,0.0,0,,0
org/joda/time/DateTimeFieldType,19,541,            switch (iOrdinal) {,0.0,0,,0
org/joda/time/DateTimeFieldType,19,543,                    return ERA_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,545,                    return YEAR_OF_ERA_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,547,                    return CENTURY_OF_ERA_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,549,                    return YEAR_OF_CENTURY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,551,                    return YEAR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,553,                    return DAY_OF_YEAR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,555,                    return MONTH_OF_YEAR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,557,                    return DAY_OF_MONTH_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,559,                    return WEEKYEAR_OF_CENTURY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,561,                    return WEEKYEAR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,563,                    return WEEK_OF_WEEKYEAR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,565,                    return DAY_OF_WEEK_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,567,                    return HALFDAY_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,569,                    return HOUR_OF_HALFDAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,571,                    return CLOCKHOUR_OF_HALFDAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,573,                    return CLOCKHOUR_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,575,                    return HOUR_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,577,                    return MINUTE_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,579,                    return MINUTE_OF_HOUR_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,581,                    return SECOND_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,583,                    return SECOND_OF_MINUTE_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,585,                    return MILLIS_OF_DAY_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,587,                    return MILLIS_OF_SECOND_TYPE;,0.0,0,,0
org/joda/time/DateTimeFieldType,19,590,                    return this;,0.0,0,,0
org/joda/time/DateTime,19,2045,            super();,0.0,0,,0
org/joda/time/DateTime,19,2046,            iInstant = instant;,0.0,0,,0
org/joda/time/DateTime,19,2047,            iField = field;,0.0,0,,0
org/joda/time/DateTime,19,2048,        },0.0,0,,0
org/joda/time/DateTime,19,2054,            oos.writeObject(iInstant);,0.0,0,,0
org/joda/time/DateTime,19,2055,            oos.writeObject(iField.getType());,0.0,0,,0
org/joda/time/DateTime,19,2056,        },0.0,0,,0
org/joda/time/DateTime,19,2062,            iInstant = (DateTime) oos.readObject();,0.0,0,,0
org/joda/time/DateTime,19,2063,            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();,0.0,0,,0
org/joda/time/DateTime,19,2064,            iField = type.getField(iInstant.getChronology());,0.0,0,,0
org/joda/time/DateTime,19,2065,        },0.0,0,,0
org/joda/time/DateTime,19,2074,            return iField;,0.0,0,,0
org/joda/time/DateTime,19,2083,            return iInstant.getMillis();,0.0,0,,0
org/joda/time/DateTime,19,2093,            return iInstant.getChronology();,0.0,0,,0
org/joda/time/DateTime,19,2102,            return iInstant;,0.0,0,,0
org/joda/time/DateTime,19,2119,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0.0,0,,0
org/joda/time/DateTime,19,2135,"            return iInstant.withMillis(iField.add(iInstant.getMillis(), value));",0.0,0,,0
org/joda/time/DateTime,19,2153,"            return iInstant.withMillis(iField.addWrapField(iInstant.getMillis(), value));",0.0,0,,0
org/joda/time/DateTime,19,2170,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), value));",0.0,0,,0
org/joda/time/DateTime,19,2187,"            return iInstant.withMillis(iField.set(iInstant.getMillis(), text, locale));",0.0,0,,0
org/joda/time/DateTime,19,2203,"            return setCopy(text, null);",0.0,0,,0
org/joda/time/DateTime,19,2227,            return setCopy(getMaximumValue());,0.0,0,,0
org/joda/time/DateTime,19,2244,            return setCopy(getMinimumValue());,0.0,0,,0
org/joda/time/DateTime,19,2254,            return iInstant.withMillis(iField.roundFloor(iInstant.getMillis()));,0.0,0,,0
org/joda/time/DateTime,19,2263,            return iInstant.withMillis(iField.roundCeiling(iInstant.getMillis()));,0.0,0,,0
org/joda/time/DateTime,19,2273,            return iInstant.withMillis(iField.roundHalfFloor(iInstant.getMillis()));,0.0,0,,0
org/joda/time/DateTime,19,2283,            return iInstant.withMillis(iField.roundHalfCeiling(iInstant.getMillis()));,0.0,0,,0
org/joda/time/DateTime,19,2294,            return iInstant.withMillis(iField.roundHalfEven(iInstant.getMillis()));,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,86,        return getInstance(DateTimeZone.getDefault());,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,97,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,102,            return chrono;,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,143,        if (zone == null) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,144,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,146,        if (zone == getZone()) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,147,            return this;,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,149,        return getInstance(zone);,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,160,"        String str = ""ISOChronology"";",0.0,0,,0
org/joda/time/chrono/ISOChronology,19,161,        DateTimeZone zone = getZone();,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,162,        if (zone != null) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,163,            str = str + '[' + zone.getID() + ']';,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,165,        return str;,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,190,        return super.equals(obj);,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0.0,0,,0
org/joda/time/chrono/ISOChronology,19,208,        return new Stub(getZone());,0.0,0,,0
org/joda/time/chrono/AssembledChronology,19,110,        return null;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,19,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,19,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,,0
org/joda/time/chrono/AssembledChronology,19,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,,0
org/joda/time/chrono/AssembledChronology,19,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/chrono/AssembledChronology,19,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,19,148,            return base.getDateTimeMillis,0.0,0,,0
org/joda/time/chrono/AssembledChronology,19,151,        return super.getDateTimeMillis,0.0,0,,0
org/joda/time/chrono/AssembledChronology,19,389,        in.defaultReadObject();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,19,390,        setFields();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,19,391,    },0.0,0,,0
org/joda/time/DateTimeUtils,19,414,        FixedMillisProvider(long fixedMillis) {,0.0,0,,0
org/joda/time/DateTimeUtils,19,415,            iMillis = fixedMillis;,0.0,0,,0
org/joda/time/DateTimeUtils,19,416,        },0.0,0,,0
org/joda/time/DateTimeUtils,19,423,            return iMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1362,                        index = in.readUnsignedShort();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1365,                } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1366,"                    throw new IOException(""Invalid encoding"");",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1389,            int size = transitions.size();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1390,            if (size == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1391,                throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1394,            long[] trans = new long[size];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1395,            int[] wallOffsets = new int[size];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1396,            int[] standardOffsets = new int[size];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1397,            String[] nameKeys = new String[size];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1399,            Transition last = null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1400,            for (int i=0; i<size; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1401,                Transition tr = transitions.get(i);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1403,                if (!tr.isTransitionFrom(last)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1404,                    throw new IllegalArgumentException(id);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1407,                trans[i] = tr.getMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1408,                wallOffsets[i] = tr.getWallOffset();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1409,                standardOffsets[i] = tr.getStandardOffset();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1410,                nameKeys[i] = tr.getNameKey();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1412,                last = tr;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1417,            String[] zoneNameData = new String[5];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1418,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1419,            for (int j = 0; j < zoneStrings.length; j++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1420,                String[] set = zoneStrings[j];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1422,                    zoneNameData = set;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1426,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1429,                String curNameKey = nameKeys[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1430,                String nextNameKey = nameKeys[i + 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1431,                long curOffset = wallOffsets[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1432,                long nextOffset = wallOffsets[i + 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1433,                long curStdOffset = standardOffsets[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1434,                long nextStdOffset = standardOffsets[i + 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1436,                if (curOffset != nextOffset &&,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1443,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1448,                    if (curOffset > nextOffset) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1450,                    } else if (curOffset < nextOffset) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1452,                        i++;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1457,            if (tailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1458,                if (tailZone.iStartRecurrence.getNameKey(),0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1460,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1464,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1465,                        tailZone = new DSTZone(,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1471,                        tailZone = new DSTZone(,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1480,            return new PrecalculatedZone,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1509,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1510,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1511,            if (i >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1512,                return iNameKeys[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1514,            i = ~i;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1515,            if (i < transitions.length) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1516,                if (i > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1517,                    return iNameKeys[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1519,"                return ""UTC"";",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1521,            if (iTailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1522,                return iNameKeys[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1524,            return iTailZone.getNameKey(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1531,                return iWallOffsets[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1535,                if (i > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1536,                    return iWallOffsets[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1538,                return 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1541,                return iWallOffsets[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1547,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1548,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1549,            if (i >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1550,                return iStandardOffsets[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1552,            i = ~i;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1553,            if (i < transitions.length) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1554,                if (i > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1555,                    return iStandardOffsets[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1557,                return 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1559,            if (iTailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1560,                return iStandardOffsets[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1562,            return iTailZone.getStandardOffset(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1566,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1574,                return transitions[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1577,                return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1581,                instant = end;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1587,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1588,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1589,            if (i >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1590,                if (instant > Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1591,                    return instant - 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1593,                return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1595,            i = ~i;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1596,            if (i < transitions.length) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1597,                if (i > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1598,                    long prev = transitions[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1599,                    if (prev > Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1600,                        return prev - 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1603,                return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1605,            if (iTailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1606,                long prev = iTailZone.previousTransition(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1607,                if (prev < instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1608,                    return prev;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1611,            long prev = transitions[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1612,            if (prev > Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1613,                return prev - 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1615,            return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1619,            if (this == obj) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1620,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1622,            if (obj instanceof PrecalculatedZone) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1623,                PrecalculatedZone other = (PrecalculatedZone)obj;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1624,                return,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1634,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1638,            int size = iTransitions.length;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1641,            Set<String> poolSet = new HashSet<String>();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1642,            for (int i=0; i<size; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1643,                poolSet.add(iNameKeys[i]);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1646,            int poolSize = poolSet.size();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1647,            if (poolSize > 65535) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1648,"                throw new UnsupportedOperationException(""String pool is too large"");",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1650,            String[] pool = new String[poolSize];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1651,            Iterator<String> it = poolSet.iterator();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1652,            for (int i=0; it.hasNext(); i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1653,                pool[i] = it.next();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1657,            out.writeShort(poolSize);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1658,            for (int i=0; i<poolSize; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1659,                out.writeUTF(pool[i]);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1662,            out.writeInt(size);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1664,            for (int i=0; i<size; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1665,"                writeMillis(out, iTransitions[i]);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1666,"                writeMillis(out, iWallOffsets[i]);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1667,"                writeMillis(out, iStandardOffsets[i]);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1670,                String nameKey = iNameKeys[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1671,                for (int j=0; j<poolSize; j++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1672,                    if (pool[j].equals(nameKey)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1673,                        if (poolSize < 256) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1674,                            out.writeByte(j);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1676,                            out.writeShort(j);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1678,                        break;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1683,            out.writeBoolean(iTailZone != null);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1684,            if (iTailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1685,                iTailZone.writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1687,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1690,            if (iTailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1691,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1693,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1694,            if (transitions.length <= 1) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1695,                return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1700,            double distances = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1701,            int count = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1703,            for (int i=1; i<transitions.length; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1704,                long diff = transitions[i] - transitions[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1705,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1706,                    distances += (double)diff;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1707,                    count++;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1711,            if (count > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1712,                double avg = distances / count;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1713,                avg /= 24 * 60 * 60 * 1000;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1714,                if (avg >= 25) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1721,                    return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1725,            return false;,0.0,0,,0
org/joda/time/JodaTimePermission,19,57,        super(name);,0.0,0,,0
org/joda/time/JodaTimePermission,19,58,    },0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,19,45,        return iNameKey;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,19,49,        return iWallOffset;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,19,53,        return iStandardOffset;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,19,57,        return iWallOffset;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,19,61,        return true;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,19,65,        return instant;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,19,69,        return instant;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,19,77,        String id = getID();,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,19,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,19,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,19,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,19,91,        if (obj instanceof FixedDateTimeZone) {,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,19,92,            FixedDateTimeZone other = (FixedDateTimeZone)obj;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,19,93,            return,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,19,98,        return false;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,56,    public ZoneInfoProvider(File fileDir) throws IOException {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,57,        if (fileDir == null) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,58,"            throw new IllegalArgumentException(""No file directory provided"");",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,60,        if (!fileDir.exists()) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,63,        if (!fileDir.isDirectory()) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,67,        iFileDir = fileDir;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,68,        iResourcePath = null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,69,        iLoader = null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,72,    },0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,96,"        this(resourcePath, loader, true);",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,97,    },0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,108,"            throw new IllegalArgumentException(""No resource path provided"");",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,137,            return null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,142,            return null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,158,            return loadZoneData(id);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,162,        return getZone((String)obj);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,183,        Thread t = Thread.currentThread();,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,184,"        t.getThreadGroup().uncaughtException(t, ex);",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,185,    },0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,197,"            in = new FileInputStream(new File(iFileDir, name));",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,203,                in = ClassLoader.getSystemResourceAsStream(path);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,206,                StringBuffer buf = new StringBuffer(40),0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,211,                throw new IOException(buf.toString());,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,239,            } catch (IOException e) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,230,        } catch (IOException e) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,231,            uncaughtException(e);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,232,            iZoneInfoMap.remove(id);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,233,            return null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,235,            try {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,259,            } catch (IOException e) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,261,        },0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,257,            try {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,285,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,19,286,"                throw new IOException(""Corrupt zone info map"");",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,522,            if (iMode == 'w') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,523,                offset = standardOffset + saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,524,            } else if (iMode == 's') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,525,                offset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,527,                offset = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,530,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,531,"            long millis = chrono.year().set(0, year);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,534,"            millis = setDayOfMonth(chrono, millis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,536,            if (iDayOfWeek != 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,537,"                millis = setDayOfWeek(chrono, millis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,541,            return millis - offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,550,                offset = standardOffset + saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,552,                offset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,568,                if (next <= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,569,"                    next = chrono.year().add(next, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,570,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,591,            if (iMode == 'w') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,592,                offset = standardOffset + saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,593,            } else if (iMode == 's') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,594,                offset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,596,                offset = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,600,            instant += offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,602,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,605,"            prev = chrono.millisOfDay().set(prev, 0);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,607,"            prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,609,            if (iDayOfWeek == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,610,                if (prev >= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,611,"                    prev = chrono.year().add(prev, -1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,615,"                prev = setDayOfWeek(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,616,                if (prev >= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,617,"                    prev = chrono.year().add(prev, -1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,620,"                    prev = setDayOfWeek(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,625,            return prev - offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,629,            if (this == obj) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,630,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,632,            if (obj instanceof OfYear) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,633,                OfYear other = (OfYear)obj;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,634,                return,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,642,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,659,            out.writeByte(iMode);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,660,            out.writeByte(iMonthOfYear);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,661,            out.writeByte(iDayOfMonth);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,662,            out.writeByte(iDayOfWeek);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,663,            out.writeBoolean(iAdvance);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,664,"            writeMillis(out, iMillisOfDay);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,665,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,673,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,675,                    while (chrono.year().isLeap(next) == false) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,676,"                        next = chrono.year().add(next, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,678,"                    next = setDayOfMonth(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,680,                    throw e;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,691,"                prev = setDayOfMonth(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,701,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,692,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,694,                    while (chrono.year().isLeap(prev) == false) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,695,"                        prev = chrono.year().add(prev, -1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,697,"                    prev = setDayOfMonth(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,699,                    throw e;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,702,            return prev;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,721,                    if (daysToAdd < 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,722,                        daysToAdd += 7;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1183,            return findMatchingRecurrence(instant).getNameKey();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1191,            return iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1195,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1210,                    start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1212,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1214,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1215,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1217,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1225,                    end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1227,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1229,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1230,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1232,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1241,            instant++;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1243,            int standardOffset = iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1244,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1245,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1250,                start = startRecurrence.previous,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1252,                if (instant < 0 && start > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1254,                    start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1262,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1256,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1258,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1259,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1261,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1265,                end = endRecurrence.previous,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1267,                if (instant < 0 && end > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1269,                    end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1277,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1271,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1273,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1274,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1276,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1279,            return ((start > end) ? start : end) - 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1283,            if (this == obj) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1284,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1286,            if (obj instanceof DSTZone) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1287,                DSTZone other = (DSTZone)obj;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1288,                return,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1294,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1298,"            writeMillis(out, iStandardOffset);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1299,            iStartRecurrence.writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1300,            iEndRecurrence.writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1301,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1313,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1315,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1316,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1318,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1324,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1326,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1327,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1329,                end = instant;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,194,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,195,                if (iNameKey == null) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,196,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,198,                return iNameKey;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,200,            return iNextInfo.getNameKey(millis);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,214,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,215,                if (iStandardOffset == Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,216,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,218,                return iStandardOffset;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,220,            return iNextInfo.getStandardOffset(millis);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,40,        } catch (SecurityException e) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,41,            i = null;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,50,            cacheSize = i.intValue();,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,52,            cacheSize--;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,53,            int shift = 0;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,54,            while (cacheSize > 0) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,55,                shift++;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,56,                cacheSize >>= 1;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,58,            cacheSize = 1 << shift;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,69,            return (CachedDateTimeZone)zone;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,95,        in.defaultReadObject();,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,96,        iInfoCache = new Info[cInfoCacheMask + 1];,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,97,    },0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,103,        return iZone;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,107,        return getInfo(instant).getNameKey(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,115,        return getInfo(instant).getStandardOffset(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,119,        return iZone.isFixed();,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,123,        return iZone.nextTransition(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,127,        return iZone.previousTransition(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,135,        if (this == obj) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,136,            return true;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,138,        if (obj instanceof CachedDateTimeZone) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,139,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,19,141,        return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,883,"        Transition(long millis, Transition tr) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,884,            iMillis = millis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,885,            iNameKey = tr.iNameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,886,            iWallOffset = tr.iWallOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,887,            iStandardOffset = tr.iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,888,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,890,"        Transition(long millis, Rule rule, int standardOffset) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,891,            iMillis = millis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,892,            iNameKey = rule.getNameKey();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,893,            iWallOffset = standardOffset + rule.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,894,            iStandardOffset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,895,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,898,"                   int wallOffset, int standardOffset) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,899,            iMillis = millis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,900,            iNameKey = nameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,901,            iWallOffset = wallOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,902,            iStandardOffset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,903,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,906,            return iMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,910,            return iNameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,914,            return iWallOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,918,            return iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,922,            return iWallOffset - iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,929,            if (other == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,930,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,932,            return iMillis > other.iMillis &&,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,225,    public DateTimeZoneBuilder() {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,226,        iRuleSets = new ArrayList<RuleSet>(10);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,227,    },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,96,"            return readFrom((DataInput)in, id);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,112,            DateTimeZone fixed = new FixedDateTimeZone,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,114,            if (fixed.equals(DateTimeZone.UTC)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,115,                fixed = DateTimeZone.UTC;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,117,            return fixed;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,121,"            return PrecalculatedZone.readFrom(in, id);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,123,"            throw new IOException(""Invalid encoding"");",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,140,        if (millis % (30 * 60000L) == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,142,            long units = millis / (30 * 60000L);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,145,                out.writeByte((int)(units & 0x3f));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,146,                return;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,150,        if (millis % 60000L == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,152,            long minutes = millis / 60000L;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,156,                return;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,160,        if (millis % 1000L == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,162,            long seconds = millis / 1000L;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,166,                out.writeInt((int)(seconds & 0xffffffff));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,167,                return;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,176,        out.writeLong(millis);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,177,    },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,217,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,252,        if (iRuleSets.size() > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,253,            OfYear ofYear = new OfYear,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,258,        iRuleSets.add(new RuleSet());,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,259,        return this;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,268,        getLastRuleSet().setStandardOffset(standardOffset);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,269,        return this;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,277,        return this;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,309,        if (fromYear <= toYear) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,310,            OfYear ofYear = new OfYear,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,314,            getLastRuleSet().addRule(rule);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,316,        return this;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,320,        if (iRuleSets.size() == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,323,        return iRuleSets.get(iRuleSets.size() - 1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,333,        if (id == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,334,            throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,343,        DSTZone tailZone = null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,345,        long millis = Long.MIN_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,346,        int saveMillis = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,348,        int ruleSetCount = iRuleSets.size();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,349,        for (int i=0; i<ruleSetCount; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,350,            RuleSet rs = iRuleSets.get(i);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,351,            Transition next = rs.firstTransition(millis);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,352,            if (next == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,353,                continue;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,355,"            addTransition(transitions, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,356,            millis = next.getMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,357,            saveMillis = next.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,360,            rs = new RuleSet(rs);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,363,"                if (addTransition(transitions, next)) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,364,                    if (tailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,366,                        break;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,369,                millis = next.getMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,370,                saveMillis = next.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,371,                if (tailZone == null && i == ruleSetCount - 1) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,372,                    tailZone = rs.buildTailZone(id);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,379,            millis = rs.getUpperLimit(saveMillis);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,383,        if (transitions.size() == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,384,            if (tailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,386,                return tailZone;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,390,        if (transitions.size() == 1 && tailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,391,            Transition tr = transitions.get(0);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,392,"            return buildFixedZone(id, tr.getNameKey(),",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,397,        if (zone.isCachable()) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,398,            return CachedDateTimeZone.forZone(zone);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,400,        return zone;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,404,        int size = transitions.size();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,405,        if (size == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,406,            transitions.add(tr);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,407,            return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,410,        Transition last = transitions.get(size - 1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,411,        if (!tr.isTransitionFrom(last)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,412,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,417,        int offsetForLast = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,418,        if (size >= 2) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,421,        int offsetForNew = last.getWallOffset();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,423,        long lastLocal = last.getMillis() + offsetForLast;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,424,        long newLocal = tr.getMillis() + offsetForNew;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,426,        if (newLocal != lastLocal) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,427,            transitions.add(tr);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,428,            return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,431,        transitions.remove(size - 1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,432,"        return addTransition(transitions, tr);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,443,        if (out instanceof DataOutput) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,444,"            writeTo(zoneID, (DataOutput)out);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,448,    },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,461,        if (zone instanceof FixedDateTimeZone) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,462,            out.writeByte('F'); // 'F' for fixed,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,463,            out.writeUTF(zone.getNameKey(0));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,464,"            writeMillis(out, zone.getOffset(0));",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,465,"            writeMillis(out, zone.getStandardOffset(0));",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,467,            if (zone instanceof CachedDateTimeZone) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,473,            ((PrecalculatedZone)zone).writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,475,    },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,963,        RuleSet() {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,964,            iRules = new ArrayList<Rule>(10);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,965,            iUpperYear = Integer.MAX_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,966,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,971,        RuleSet(RuleSet rs) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,972,            iStandardOffset = rs.iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,973,            iRules = new ArrayList<Rule>(rs.iRules);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,974,            iInitialNameKey = rs.iInitialNameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,976,            iUpperYear = rs.iUpperYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,977,            iUpperOfYear = rs.iUpperOfYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,978,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,948,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,950,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,981,            return iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,985,            iStandardOffset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,986,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,989,            iInitialNameKey = nameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,990,            iInitialSaveMillis = saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,991,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,994,            if (!iRules.contains(rule)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,995,                iRules.add(rule);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,997,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1000,            iUpperYear = year;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1001,            iUpperOfYear = ofYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1002,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1011,            if (iInitialNameKey != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1013,"                return new Transition(firstMillis, iInitialNameKey,",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1024,            long millis = Long.MIN_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1025,            int saveMillis = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1026,            Transition first = null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1030,                millis = next.getMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1032,                if (millis == firstMillis) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1033,"                    first = new Transition(firstMillis, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1034,                    break;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1037,                if (millis > firstMillis) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1038,                    if (first == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1042,                        for (Rule rule : copy) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1043,                            if (rule.getSaveMillis() == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1045,                                break;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1047,                        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1049,                    if (first == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1053,"                        first = new Transition(firstMillis, next.getNameKey(),",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1061,"                first = new Transition(firstMillis, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1063,                saveMillis = next.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1066,            iRules = copy;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1067,            return first;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1085,            Rule nextRule = null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1086,            long nextMillis = Long.MAX_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1088,            Iterator<Rule> it = iRules.iterator();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1089,            while (it.hasNext()) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1090,                Rule rule = it.next();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1092,                if (next <= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1093,                    it.remove();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1094,                    continue;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1098,                if (next <= nextMillis) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1100,                    nextRule = rule;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1101,                    nextMillis = next;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1103,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1105,            if (nextRule == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1106,                return null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1111,                return null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1115,            if (iUpperYear < Integer.MAX_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1116,                long upperMillis =,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1118,                if (nextMillis >= upperMillis) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1120,                    return null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1131,            if (iUpperYear == Integer.MAX_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1132,                return Long.MAX_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1141,            if (iRules.size() == 2) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1142,                Rule startRule = iRules.get(0);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1143,                Rule endRule = iRules.get(1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1154,"                    return new DSTZone(id, iStandardOffset,",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,1158,            return null;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,44,        return nameSet == null ? null : nameSet[0];,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,49,        return nameSet == null ? null : nameSet[1];,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,53,        if (locale == null || id == null || nameKey == null) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,54,            return null;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,58,        if (byIdCache == null) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,63,        if (byNameKeyCache == null) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,64,"            byIdCache.put(id, byNameKeyCache = createCache());",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,66,            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,67,            String[] setEn = null;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,68,            for (String[] strings : zoneStringsEn) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,69,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,70,                setEn = strings;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,71,                break;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,74,            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,75,            String[] setLoc = null;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,76,            for (String[] strings : zoneStringsLoc) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,77,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,78,                setLoc = strings;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,79,                break;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,83,            if (setEn != null && setLoc != null) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,88,              if (setEn[2].equals(setEn[4])) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,19,95,        return (String[]) byNameKeyCache.get(nameKey);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,817,            iRecurrence = recurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,818,            iFromYear = fromYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,819,            iToYear = toYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,820,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,823,            return iFromYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,827,            return iToYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,831,            return iRecurrence.getOfYear();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,835,            return iRecurrence.getNameKey();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,839,            return iRecurrence.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,843,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,845,            final int wallOffset = standardOffset + saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,846,            long testInstant = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,849,            if (instant == Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,850,                year = Integer.MIN_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,852,                year = chrono.year().get(instant + wallOffset);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,855,            if (year < iFromYear) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,860,                testInstant -= 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,865,            if (next > instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,866,                year = chrono.year().get(next + wallOffset);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,867,                if (year > iToYear) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,869,                    next = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,873,            return next;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,754,            return iOfYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,772,            return iNameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,780,            if (this == obj) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,781,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,783,            if (obj instanceof Recurrence) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,784,                Recurrence other = (Recurrence)obj;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,785,                return,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,790,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,794,            iOfYear.writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,795,            out.writeUTF(iNameKey);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,796,"            writeMillis(out, iSaveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,797,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,19,804,            return rename((iNameKey + appendNameKey).intern());,0.0,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,19,42,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToText(fieldValue);,0.0,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,19,47,        return GJLocaleSymbols.forLocale(locale).monthOfYearValueToShortText(fieldValue);,0.0,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,19,52,        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);,0.0,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,19,57,        return GJLocaleSymbols.forLocale(locale).getMonthMaxTextLength();,0.0,0,,0
org/joda/time/chrono/GJMonthOfYearDateTimeField,19,62,        return GJLocaleSymbols.forLocale(locale).getMonthMaxShortTextLength();,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,59,        return false;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,93,            return instant; // the easy case,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,117,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,118,            monthToUse = Math.abs(monthToUse);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,119,            int remMonthToUse = monthToUse % iMax;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,121,            if (remMonthToUse == 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,122,                remMonthToUse = iMax;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,124,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,126,            if (monthToUse == 1) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,127,                yearToUse += 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,139,            dayToUse = maxDay;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,151,        int i_months = (int)months;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,152,        if (i_months == months) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,153,"            return add(instant, i_months);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,158,        long timePart = iChronology.getMillisOfDay(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,160,        int thisYear = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,161,"        int thisMonth = iChronology.getMonthOfYear(instant, thisYear);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,164,        long monthToUse = thisMonth - 1 + months;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,165,        if (monthToUse >= 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,166,            yearToUse = thisYear + (monthToUse / iMax);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,167,            monthToUse = (monthToUse % iMax) + 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,169,            yearToUse = thisYear + (monthToUse / iMax) - 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,170,            monthToUse = Math.abs(monthToUse);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,171,            int remMonthToUse = (int)(monthToUse % iMax);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,172,            if (remMonthToUse == 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,173,                remMonthToUse = iMax;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,175,            monthToUse = iMax - remMonthToUse + 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,176,            if (monthToUse == 1) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,177,                yearToUse += 1;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,181,        if (yearToUse < iChronology.getMinYear() ||,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,184,            throw new IllegalArgumentException,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,188,        int i_yearToUse = (int)yearToUse;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,189,        int i_monthToUse = (int)monthToUse;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,191,"        int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,192,"        int maxDay = iChronology.getDaysInYearMonth(i_yearToUse, i_monthToUse);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,193,        if (dayToUse > maxDay) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,194,            dayToUse = maxDay;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,197,        long datePart =,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,199,        return datePart + timePart;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,206,        if (valueToAdd == 0) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,207,            return values;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,209,        if (DateTimeUtils.isContiguous(partial)) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,210,            long instant = 0L;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,211,"            for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,212,"                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,214,"            instant = add(instant, valueToAdd);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,215,"            return iChronology.get(partial, instant);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,217,"            return super.add(partial, fieldIndex, values, valueToAdd);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,232,"        return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, iMax));",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,237,        if (minuendInstant < subtrahendInstant) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,238,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,241,        int minuendYear = iChronology.getYear(minuendInstant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,242,"        int minuendMonth = iChronology.getMonthOfYear(minuendInstant, minuendYear);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,243,        int subtrahendYear = iChronology.getYear(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,244,"        int subtrahendMonth = iChronology.getMonthOfYear(subtrahendInstant, subtrahendYear);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,246,        long difference = (minuendYear - subtrahendYear) * ((long) iMax) + minuendMonth - subtrahendMonth;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,250,        int minuendDom = iChronology.getDayOfMonth,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,252,"        if (minuendDom == iChronology.getDaysInYearMonth(minuendYear, minuendMonth)) {",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,254,            int subtrahendDom = iChronology.getDayOfMonth,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,256,            if (subtrahendDom > minuendDom) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,260,"                subtrahendInstant = iChronology.dayOfMonth().set(subtrahendInstant, minuendDom);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,265,        long minuendRem = minuendInstant,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,267,        long subtrahendRem = subtrahendInstant,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,270,        if (minuendRem < subtrahendRem) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,271,            difference--;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,274,        return difference;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,300,            thisDom = maxDom;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,314,        int thisYear = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,315,        if (iChronology.isLeapYear(thisYear)) {,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,316,"            return (iChronology.getMonthOfYear(instant, thisYear) == iLeapMonth);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,318,        return false;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,323,        return isLeap(instant) ? 1 : 0;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,333,        return MIN;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,338,        return iMax;,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,343,        int year = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,344,"        int month = iChronology.getMonthOfYear(instant, year);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,345,"        return iChronology.getYearMonthMillis(year, month);",0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,350,        return instant - roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/BasicMonthOfYearDateTimeField,19,358,        return iChronology.monthOfYear();,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,91,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,118,        if (minuendInstant < subtrahendInstant) {,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,119,"            return -getDifferenceAsLong(subtrahendInstant, minuendInstant);",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,122,        long difference = (minuendInstant - subtrahendInstant) / iUnitMillis;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,123,"        if (add(subtrahendInstant, difference) < minuendInstant) {",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,125,                difference++;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,126,"            } while (add(subtrahendInstant, difference) <= minuendInstant);",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,127,            difference--;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,128,"        } else if (add(subtrahendInstant, difference) > minuendInstant) {",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,130,                difference--;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,131,"            } while (add(subtrahendInstant, difference) > minuendInstant);",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,133,        return difference;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,145,        return iUnitMillis;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,156,            return false;,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,164,            return ImpreciseDateTimeField.this,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,169,            return ImpreciseDateTimeField.this,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,174,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,178,"            return ImpreciseDateTimeField.this.add(instant, value) - instant;",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,182,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,186,"            return ImpreciseDateTimeField.this.add(instant, value);",0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,190,            return ImpreciseDateTimeField.this,0.0,0,,0
org/joda/time/field/ImpreciseDateTimeField,19,195,            return ImpreciseDateTimeField.this,0.0,0,,0
org/joda/time/field/BaseDurationField,19,49,"            throw new IllegalArgumentException(""The type must not be null"");",0.0,0,,0
org/joda/time/field/BaseDurationField,19,59,        return iType.getName();,0.0,0,,0
org/joda/time/field/BaseDurationField,19,79,        return FieldUtils.safeToInt(getValueAsLong(duration));,0.0,0,,0
org/joda/time/field/BaseDurationField,19,91,        return duration / getUnitMillis();,0.0,0,,0
org/joda/time/field/BaseDurationField,19,111,"        return FieldUtils.safeToInt(getValueAsLong(duration, instant));",0.0,0,,0
org/joda/time/field/BaseDurationField,19,123,        return value * getUnitMillis();  // safe,0.0,0,,0
org/joda/time/field/BaseDurationField,19,135,"        return FieldUtils.safeMultiply(value, getUnitMillis());",0.0,0,,0
org/joda/time/field/BaseDurationField,19,141,"        return FieldUtils.safeToInt(getDifferenceAsLong(minuendInstant, subtrahendInstant));",0.0,0,,0
org/joda/time/field/BaseDurationField,19,146,        long otherMillis = otherField.getUnitMillis();,0.0,0,,0
org/joda/time/field/BaseDurationField,19,147,        long thisMillis = getUnitMillis();,0.0,0,,0
org/joda/time/field/BaseDurationField,19,149,        if (thisMillis == otherMillis) {,0.0,0,,0
org/joda/time/field/BaseDurationField,19,150,            return 0;,0.0,0,,0
org/joda/time/field/BaseDurationField,19,152,        if (thisMillis < otherMillis) {,0.0,0,,0
org/joda/time/field/BaseDurationField,19,153,            return -1;,0.0,0,,0
org/joda/time/field/BaseDurationField,19,155,            return 1;,0.0,0,,0
org/joda/time/field/BaseDurationField,19,165,"        return ""DurationField["" + getName() + ']';",0.0,0,,0
org/joda/time/field/BaseDurationField,19,38,public abstract class BaseDurationField extends DurationField implements Serializable {,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,134,            throw new IllegalArgumentException,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,144,            return base.getZone();,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,153,        if ((base = getBase()) != null) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,154,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,,0
org/joda/time/chrono/BasicChronology,19,157,        FieldUtils.verifyValueBounds,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,159,"        return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;",0.0,0,,0
org/joda/time/chrono/BasicChronology,19,168,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/chrono/BasicChronology,19,185,        return iMinDaysInFirstWeek;,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,196,        return super.equals(obj);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,206,        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,217,        StringBuffer sb = new StringBuffer(60);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,218,        String name = getClass().getName();,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,219,        int index = name.lastIndexOf('.');,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,220,        if (index >= 0) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,221,            name = name.substring(index + 1);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,223,        sb.append(name);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,224,        sb.append('[');,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,225,        DateTimeZone zone = getZone();,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,226,        if (zone != null) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,227,            sb.append(zone.getID());,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,229,        if (getMinimumDaysInFirstWeek() != 4) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,230,"            sb.append("",mdfw="");",0.0,0,,0
org/joda/time/chrono/BasicChronology,19,231,            sb.append(getMinimumDaysInFirstWeek());,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,233,        sb.append(']');,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,234,        return sb.toString();,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,307,        return 366;,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,317,        return isLeapYear(year) ? 366 : 365;,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,327,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,328,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,329,        return (int) ((firstWeekMillis2 - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,339,        long jan1millis = getYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,340,        int jan1dayOfWeek = getDayOfWeek(jan1millis);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,342,        if (jan1dayOfWeek > (8 - iMinDaysInFirstWeek)) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,344,            return jan1millis + (8 - jan1dayOfWeek),0.0,0,,0
org/joda/time/chrono/BasicChronology,19,348,            return jan1millis - (jan1dayOfWeek - 1),0.0,0,,0
org/joda/time/chrono/BasicChronology,19,371,        long millis = getYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,372,"        millis += getTotalMillisByYearMonth(year, month);",0.0,0,,0
org/joda/time/chrono/BasicChronology,19,373,        return millis;,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,402,            i2 = i2 - unitMillis + 1;,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,410,            year--;,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,414,            if (isLeapYear(year)) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,415,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 366L;,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,417,                oneYear = DateTimeConstants.MILLIS_PER_DAY * 365L;,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,420,            yearStart += oneYear;,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,422,            if (yearStart <= instant) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,424,                year++;,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,477,"        return getDayOfYear(instant, getYear(instant));",0.0,0,,0
org/joda/time/chrono/BasicChronology,19,493,        int year = getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,494,"        int week = getWeekOfWeekyear(instant, year);",0.0,0,,0
org/joda/time/chrono/BasicChronology,19,495,        if (week == 1) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,496,            return getYear(instant + DateTimeConstants.MILLIS_PER_WEEK);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,497,        } else if (week > 51) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,498,            return getYear(instant - (2 * DateTimeConstants.MILLIS_PER_WEEK));,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,500,            return year;,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,508,"        return getWeekOfWeekyear(instant, getYear(instant));",0.0,0,,0
org/joda/time/chrono/BasicChronology,19,516,        long firstWeekMillis1 = getFirstWeekOfYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,517,        if (instant < firstWeekMillis1) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,518,            return getWeeksInYear(year - 1);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,520,        long firstWeekMillis2 = getFirstWeekOfYearMillis(year + 1);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,521,        if (instant >= firstWeekMillis2) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,522,            return 1;,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,524,        return (int) ((instant - firstWeekMillis1) / DateTimeConstants.MILLIS_PER_WEEK) + 1;,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,537,            daysSince19700101 = (instant - (DateTimeConstants.MILLIS_PER_DAY - 1)),0.0,0,,0
org/joda/time/chrono/BasicChronology,19,539,            if (daysSince19700101 < -3) {,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,540,                return 7 + (int) ((daysSince19700101 + 4) % 7);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,554,            return (DateTimeConstants.MILLIS_PER_DAY - 1),0.0,0,,0
org/joda/time/chrono/BasicChronology,19,565,        return 31;,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,575,        int thisYear = getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,576,"        int thisMonth = getMonthOfYear(instant, thisYear);",0.0,0,,0
org/joda/time/chrono/BasicChronology,19,577,"        return getDaysInYearMonth(thisYear, thisMonth);",0.0,0,,0
org/joda/time/chrono/BasicChronology,19,590,        return getDaysInMonthMax(instant);,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,216,        Stub(DateTimeZone zone) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,217,            iZone = zone;,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,218,        },0.0,0,,0
org/joda/time/chrono/ISOChronology,19,221,            return ISOChronology.getInstance(iZone);,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,225,            out.writeObject(iZone);,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,226,        },0.0,0,,0
org/joda/time/chrono/ISOChronology,19,231,            iZone = (DateTimeZone)in.readObject();,0.0,0,,0
org/joda/time/chrono/ISOChronology,19,232,        },0.0,0,,0
org/joda/time/chrono/BasicChronology,19,754,            return GJLocaleSymbols.forLocale(locale).halfdayValueToText(fieldValue);,0.0,0,,0
org/joda/time/chrono/BasicChronology,19,758,"            return set(millis, GJLocaleSymbols.forLocale(locale).halfdayTextToValue(text));",0.0,0,,0
org/joda/time/chrono/BasicChronology,19,762,            return GJLocaleSymbols.forLocale(locale).getHalfdayMaxTextLength();,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,49,        return false;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,60,        return iChronology.getWeekyear(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,72,        if (years == 0) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,73,            return instant;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,75,"        return set(instant, get(instant) + years);",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,79,"        return add(instant, FieldUtils.safeToInt(value));",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,92,"        return add(instant, years);",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,96,        if (minuendInstant < subtrahendInstant) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,97,"            return -getDifference(subtrahendInstant, minuendInstant);",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,100,        int minuendWeekyear = get(minuendInstant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,101,        int subtrahendWeekyear = get(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,103,        long minuendRem = remainder(minuendInstant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,104,        long subtrahendRem = remainder(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,107,        if (subtrahendRem >= WEEK_53 && iChronology.getWeeksInYear(minuendWeekyear) <= 52) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,108,            subtrahendRem -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,111,        int difference = minuendWeekyear - subtrahendWeekyear;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,112,        if (minuendRem < subtrahendRem) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,113,            difference--;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,115,        return difference;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,128,"        FieldUtils.verifyValueBounds(this, Math.abs(year),",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,133,        int thisWeekyear = get( instant );,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,134,        if ( thisWeekyear == year ) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,135,            return instant;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,140,        int thisDow = iChronology.getDayOfWeek(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,144,        int weeksInFromYear = iChronology.getWeeksInYear( thisWeekyear );,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,145,        int weeksInToYear = iChronology.getWeeksInYear( year );,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,146,        int maxOutWeeks = (weeksInToYear < weeksInFromYear) ?,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,154,        int setToWeek = iChronology.getWeekOfWeekyear(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,155,        if ( setToWeek > maxOutWeeks ) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,156,            setToWeek = maxOutWeeks;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,162,        long workInstant = instant; // Get a copy,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,168,"        workInstant = iChronology.setYear( workInstant, year );",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,173,        int workWoyYear = get( workInstant );,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,179,        if ( workWoyYear < year ) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,180,            workInstant += DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,181,        } else if ( workWoyYear > year ) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,182,            workInstant -= DateTimeConstants.MILLIS_PER_WEEK;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,189,        int currentWoyWeek = iChronology.getWeekOfWeekyear(workInstant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,191,        workInstant = workInstant + (setToWeek - currentWoyWeek),0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,200,"        workInstant = iChronology.dayOfWeek().set( workInstant, thisDow );",0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,204,        return workInstant;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,212,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) > 52;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,216,        return iChronology.getWeeksInYear(iChronology.getWeekyear(instant)) - 52;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,224,        return iChronology.getMinYear();,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,228,        return iChronology.getMaxYear();,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,234,        instant = iChronology.weekOfWeekyear().roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,235,        int wow = iChronology.getWeekOfWeekyear(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,236,        if (wow > 1) {,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,237,            instant -= ((long) DateTimeConstants.MILLIS_PER_WEEK) * (wow - 1);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,239,        return instant;,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,243,        return instant - roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekyearDateTimeField,19,250,        return iChronology.weekyear();,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,19,67,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(fieldValue);,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,19,78,        return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(fieldValue);,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,19,90,        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,19,103,        return DateTimeConstants.MONDAY;,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,19,112,        return DateTimeConstants.SUNDAY;,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,19,122,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,19,132,        return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();,0.0,0,,0
org/joda/time/chrono/GJDayOfWeekDateTimeField,19,139,        return iChronology.dayOfWeek();,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,45,        int year = getWrappedField().get(instant);,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,46,        if (year <= 0) {,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,47,            year = 1 - year;,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,49,        return year;,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,53,"        return getWrappedField().add(instant, years);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,57,"        return getWrappedField().add(instant, years);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,61,"        return getWrappedField().addWrapField(instant, years);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,65,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,69,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,73,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,85,"        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,86,        if (iChronology.getYear(instant) <= 0) {,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,87,            year = 1 - year;,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,89,"        return super.set(instant, year);",0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,101,        return getWrappedField().roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,105,        return getWrappedField().roundCeiling(instant);,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,109,        return getWrappedField().remainder(instant);,0.0,0,,0
org/joda/time/chrono/GJYearOfEraDateTimeField,19,116,        return iChronology.yearOfEra();,0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,19,56,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,19,59,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,19,74,        return iField.isLenient();,0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,19,78,        return iField.get(instant);,0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,19,82,"        return iField.set(instant, value);",0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,19,94,        return iField.getMinimumValue();,0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,19,98,        return iField.getMaximumValue();,0.0,0,,0
org/joda/time/field/DecoratedDateTimeField,19,102,        return iField.roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,57,"            throw new IllegalArgumentException(""Must supply a chronology"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,61,"            throw new IllegalArgumentException(""UTC chronology must not be null"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,64,"            throw new IllegalArgumentException(""DateTimeZone must not be null"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,90,        return getBase();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,94,        if (zone == null) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,95,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,97,        if (zone == getParam()) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,98,            return this;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,100,        if (zone == DateTimeZone.UTC) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,101,            return getBase();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,103,"        return new ZonedChronology(getBase(), zone);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,110,        return localToUTC(getBase().getDateTimeMillis,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,129,        return localToUTC(getBase().getDateTimeMillis,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,143,            throw new IllegalArgumentException,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,213,            return field;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,216,            return (DateTimeField)converted.get(field);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,237,        if (this == obj) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,238,            return true;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,240,        if (obj instanceof ZonedChronology == false) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,241,            return false;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,243,        ZonedChronology chrono = (ZonedChronology) obj;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,244,        return,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,256,        return 326565 + getZone().hashCode() * 11 + getBase().hashCode() * 7;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,265,"        return ""ZonedChronology["" + getBase() + "", "" + getZone().getID() + ']';",0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,90,"        return getInstance(DateTimeZone.getDefault(), 4);",0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,112,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,123,            } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,124,                throw new IllegalArgumentException,0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,131,"                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);",0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,132,                    chrono = new GregorianChronology,0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,155,        Chronology base = getBase();,0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,156,        int minDays = getMinimumDaysInFirstWeek();,0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,157,        minDays = (minDays == 0 ? 4 : minDays);  // handle rename of BaseGJChronology,0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,158,        return base == null ?,0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,171,        return INSTANCE_UTC;,0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,181,        if (zone == null) {,0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,182,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,184,        if (zone == getZone()) {,0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,185,            return this;,0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,187,        return getInstance(zone);,0.0,0,,0
org/joda/time/chrono/GregorianChronology,19,209,            leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,129,        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,148,        int minuendYear = getYear(minuendInstant);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,149,        int subtrahendYear = getYear(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,152,        long minuendRem = minuendInstant - getYearMillis(minuendYear);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,153,        long subtrahendRem = subtrahendInstant - getYearMillis(subtrahendYear);,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,156,        if (subtrahendRem >= FEB_29) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,157,            if (isLeapYear(subtrahendYear)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,158,                if (!isLeapYear(minuendYear)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,159,                    subtrahendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,161,            } else if (minuendRem >= FEB_29 && isLeapYear(minuendYear)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,162,                minuendRem -= DateTimeConstants.MILLIS_PER_DAY;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,166,        int difference = minuendYear - subtrahendYear;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,167,        if (minuendRem < subtrahendRem) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,168,            difference--;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,170,        return difference;,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,182,                if (!isLeapYear(year)) {,0.0,0,,0
org/joda/time/chrono/BasicGJChronology,19,184,                    dayOfYear--;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,59,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,64,            iDurationField = null;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,90,"        super(remainderField.getWrappedField(), type);",0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,91,        int divisor = iDivisor = remainderField.iDivisor;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,92,        iDurationField = remainderField.iRangeField;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,94,        DateTimeField field = getWrappedField();,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,95,        int i = field.getMinimumValue();,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,96,        int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,98,        int j = field.getMaximumValue();,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,99,        int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,101,        iMin = min;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,102,        iMax = max;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,103,    },0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,112,        int value = getWrappedField().get(instant);,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,113,        if (value >= 0) {,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,114,            return value / iDivisor;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,116,            return ((value + 1) / iDivisor) - 1;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,129,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,141,"        return getWrappedField().add(instant, amount * iDivisor);",0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,153,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,157,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,161,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;",0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,173,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,174,        int remainder = getRemainder(getWrappedField().get(instant));,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,175,"        return getWrappedField().set(instant, value * iDivisor + remainder);",0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,191,        return iMin;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,200,        return iMax;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,204,        DateTimeField field = getWrappedField();,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,205,"        return field.roundFloor(field.set(instant, get(instant) * iDivisor));",0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,209,"        return set(instant, get(getWrappedField().remainder(instant)));",0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,218,        return iDivisor;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,222,        if (value >= 0) {,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,223,            return value % iDivisor;,0.0,0,,0
org/joda/time/field/DividedDateTimeField,19,225,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,55,"            throw new IllegalArgumentException(""The divisor must be at least 2"");",0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,60,            iRangeField = null;,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,100,        int value = getWrappedField().get(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,101,        if (value >= 0) {,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,102,            return value % iDivisor;,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,104,            return (iDivisor - 1) + ((value + 1) % iDivisor);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,118,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));",0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,130,"        FieldUtils.verifyValueBounds(this, value, 0, iDivisor - 1);",0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,131,        int divided = getDivided(getWrappedField().get(instant));,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,132,"        return getWrappedField().set(instant, divided * iDivisor + value);",0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,162,        return getWrappedField().roundFloor(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,166,        return getWrappedField().roundCeiling(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,170,        return getWrappedField().roundHalfFloor(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,174,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,178,        return getWrappedField().roundHalfEven(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,182,        return getWrappedField().remainder(instant);,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,191,        return iDivisor;,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,195,        if (value >= 0) {,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,196,            return value / iDivisor;,0.0,0,,0
org/joda/time/field/RemainderDateTimeField,19,198,            return ((value + 1) / iDivisor) - 1;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,19,479,                    eras = f;,0.0,0,,0
org/joda/time/field/PreciseDurationField,19,76,        return duration / iUnitMillis;  // safe,0.0,0,,0
org/joda/time/field/PreciseDurationField,19,88,        return value * iUnitMillis;  // safe,0.0,0,,0
org/joda/time/field/PreciseDurationField,19,100,"        return FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,,0
org/joda/time/field/PreciseDurationField,19,109,"        long addition = FieldUtils.safeMultiply(value, iUnitMillis);",0.0,0,,0
org/joda/time/field/PreciseDurationField,19,110,"        return FieldUtils.safeAdd(instant, addition);",0.0,0,,0
org/joda/time/field/PreciseDurationField,19,114,"        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/PreciseDurationField,19,115,        return difference / iUnitMillis;,0.0,0,,0
org/joda/time/field/PreciseDurationField,19,127,        if (this == obj) {,0.0,0,,0
org/joda/time/field/PreciseDurationField,19,128,            return true;,0.0,0,,0
org/joda/time/field/PreciseDurationField,19,129,        } else if (obj instanceof PreciseDurationField) {,0.0,0,,0
org/joda/time/field/PreciseDurationField,19,130,            PreciseDurationField other = (PreciseDurationField) obj;,0.0,0,,0
org/joda/time/field/PreciseDurationField,19,131,            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);,0.0,0,,0
org/joda/time/field/PreciseDurationField,19,133,        return false;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,47,"            throw new IllegalArgumentException(""Wrapped field's minumum value must be zero"");",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,52,        int value = getWrappedField().get(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,53,        if (value == 0) {,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,54,            value = getMaximumValue();,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,56,        return value;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,60,"        return getWrappedField().add(instant, value);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,64,"        return getWrappedField().add(instant, value);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,68,"        return getWrappedField().addWrapField(instant, value);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,72,"        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,76,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,80,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,84,        int max = getMaximumValue();,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,85,"        FieldUtils.verifyValueBounds(this, value, 1, max);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,86,        if (value == max) {,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,87,            value = 0;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,89,"        return getWrappedField().set(instant, value);",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,93,        return getWrappedField().isLeap(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,97,        return getWrappedField().getLeapAmount(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,110,        return 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,119,        return 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,128,        return 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,137,        return 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,147,        return getWrappedField().getMaximumValue() + 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,157,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,167,        return getWrappedField().getMaximumValue(instant) + 1;,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,177,"        return getWrappedField().getMaximumValue(instant, values) + 1;",0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,181,        return getWrappedField().roundFloor(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,185,        return getWrappedField().roundCeiling(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,189,        return getWrappedField().roundHalfFloor(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,193,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,197,        return getWrappedField().roundHalfEven(instant);,0.0,0,,0
org/joda/time/field/ZeroIsMaxDateTimeField,19,201,        return getWrappedField().remainder(instant);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,50,        return false;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,59,            return instant;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,67,"        return add(instant, FieldUtils.safeToInt(years));",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,71,        if (years == 0) {,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,72,            return instant;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,75,        int thisYear = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,76,        int wrappedYear = FieldUtils.getWrappedValue,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,78,"        return set(instant, wrappedYear);",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,88,        if (minuendInstant < subtrahendInstant) {,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,89,"            return -iChronology.getYearDifference(subtrahendInstant, minuendInstant);",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,91,"        return iChronology.getYearDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,99,        return iChronology.isLeapYear(get(instant));,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,103,        if (iChronology.isLeapYear(get(instant))) {,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,104,            return 1;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,106,            return 0;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,115,        return iChronology.getMinYear();,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,123,        return iChronology.getYearMillis(get(instant));,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,127,        int year = get(instant);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,128,        long yearStartMillis = iChronology.getYearMillis(year);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,129,        if (instant != yearStartMillis) {,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,131,            instant = iChronology.getYearMillis(year + 1);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,133,        return instant;,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,137,        return instant - roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/BasicYearDateTimeField,19,144,        return iChronology.year();,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,76,"            throw new IllegalArgumentException(""The offset cannot be zero"");",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,84,            iMin = minValue;,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,89,            iMax = maxValue;,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,100,        return super.get(instant) + iOffset;,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,112,"        instant = super.add(instant, amount);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,113,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,114,        return instant;,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,126,"        instant = super.add(instant, amount);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,127,"        FieldUtils.verifyValueBounds(this, get(instant), iMin, iMax);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,128,        return instant;,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,140,"        return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,152,"        FieldUtils.verifyValueBounds(this, value, iMin, iMax);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,153,"        return super.set(instant, value - iOffset);",0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,157,        return getWrappedField().isLeap(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,161,        return getWrappedField().getLeapAmount(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,165,        return getWrappedField().getLeapDurationField();,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,187,        return getWrappedField().roundFloor(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,191,        return getWrappedField().roundCeiling(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,195,        return getWrappedField().roundHalfFloor(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,199,        return getWrappedField().roundHalfCeiling(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,203,        return getWrappedField().roundHalfEven(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,207,        return getWrappedField().remainder(instant);,0.0,0,,0
org/joda/time/field/OffsetDateTimeField,19,216,        return iOffset;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,51,        return false;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,60,        if (iChronology.getYear(instant) <= 0) {,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,61,            return DateTimeConstants.BCE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,63,            return DateTimeConstants.CE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,68,        return GJLocaleSymbols.forLocale(locale).eraValueToText(fieldValue);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,80,"        FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);",0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,82,        int oldEra = get(instant);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,83,        if (oldEra != era) {,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,84,            int year = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,85,"            return iChronology.setYear(instant, -year);",0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,87,            return instant;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,92,"        return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));",0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,96,        if (get(instant) == DateTimeConstants.CE) {,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,97,"            return iChronology.setYear(0, 1);",0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,99,            return Long.MIN_VALUE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,104,        if (get(instant) == DateTimeConstants.BCE) {,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,105,"            return iChronology.setYear(0, 1);",0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,107,            return Long.MAX_VALUE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,113,        return roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,118,        return roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,123,        return roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,135,        return DateTimeConstants.BCE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,139,        return DateTimeConstants.CE;,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,143,        return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();,0.0,0,,0
org/joda/time/chrono/GJEraDateTimeField,19,150,        return iChronology.era();,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,59,        return iChronology.getDaysInMonthMax();,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,63,        return iChronology.getDaysInMonthMax(instant);,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,67,        if (partial.isSupported(DateTimeFieldType.monthOfYear())) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,68,            int month = partial.get(DateTimeFieldType.monthOfYear());,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,69,            if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,70,                int year = partial.get(DateTimeFieldType.year());,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,71,"                return iChronology.getDaysInYearMonth(year, month);",0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,73,            return iChronology.getDaysInMonthMax(month);,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,75,        return getMaximumValue();,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,79,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,80,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,81,            if (partial.getFieldType(i) == DateTimeFieldType.monthOfYear()) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,82,                int month = values[i];,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,83,                for (int j = 0; j < size; j++) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,84,                    if (partial.getFieldType(j) == DateTimeFieldType.year()) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,85,                        int year = values[j];,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,86,"                        return iChronology.getDaysInYearMonth(year, month);",0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,89,                return iChronology.getDaysInMonthMax(month);,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,92,        return getMaximumValue();,0.0,0,,0
org/joda/time/chrono/BasicDayOfMonthDateTimeField,19,103,        return iChronology.dayOfMonth();,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,52,        return iChronology.getDayOfYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,60,        return 1;,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,64,        return iChronology.getDaysInYearMax();,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,68,        int year = iChronology.getYear(instant);,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,69,        return iChronology.getDaysInYear(year);,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,73,        if (partial.isSupported(DateTimeFieldType.year())) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,74,            int year = partial.get(DateTimeFieldType.year());,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,75,            return iChronology.getDaysInYear(year);,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,77,        return iChronology.getDaysInYearMax();,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,81,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,82,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,83,            if (partial.getFieldType(i) == DateTimeFieldType.year()) {,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,84,                int year = values[i];,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,85,                return iChronology.getDaysInYear(year);,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,88,        return iChronology.getDaysInYearMax();,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,92,        int maxLessOne = iChronology.getDaysInYearMax() - 1;,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,93,        return (value > maxLessOne || value < 1) ? getMaximumValue(instant) : maxLessOne;,0.0,0,,0
org/joda/time/chrono/BasicDayOfYearDateTimeField,19,100,        return iChronology.dayOfYear();,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,54,        return iChronology.getWeekOfWeekyear(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,65,        return super.roundFloor(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,70,        return super.roundCeiling(instant + 3 * DateTimeConstants.MILLIS_PER_DAY),0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,75,        return super.remainder(instant + 3 * DateTimeConstants.MILLIS_PER_DAY);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,79,        return 1;,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,83,        return 53;,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,87,        int weekyear = iChronology.getWeekyear(instant);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,88,        return iChronology.getWeeksInYear(weekyear);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,92,        if (partial.isSupported(DateTimeFieldType.weekyear())) {,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,93,            int weekyear = partial.get(DateTimeFieldType.weekyear());,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,94,            return iChronology.getWeeksInYear(weekyear);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,96,        return 53;,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,100,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,101,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,102,            if (partial.getFieldType(i) == DateTimeFieldType.weekyear()) {,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,103,                int weekyear = values[i];,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,104,                return iChronology.getWeeksInYear(weekyear);,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,107,        return 53;,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,111,        return value > 52 ? getMaximumValue(instant) : 52;,0.0,0,,0
org/joda/time/chrono/BasicWeekOfWeekyearDateTimeField,19,118,        return iChronology.weekOfWeekyear();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,391,                throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,402,            return iField.isLenient();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,406,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,407,            return iField.get(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,411,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,412,"            return iField.getAsText(localInstant, locale);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,416,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,417,"            return iField.getAsShortText(localInstant, locale);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,421,"            return iField.getAsText(fieldValue, locale);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,425,"            return iField.getAsShortText(fieldValue, locale);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,429,            if (iTimeField) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,430,                int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,431,"                long localInstant = iField.add(instant + offset, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,432,                return localInstant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,434,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,435,"               localInstant = iField.add(localInstant, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,436,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,441,            if (iTimeField) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,442,                int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,443,"                long localInstant = iField.add(instant + offset, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,444,                return localInstant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,446,               long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,447,"               localInstant = iField.add(localInstant, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,448,"               return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,453,            if (iTimeField) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,454,                int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,455,"                long localInstant = iField.addWrapField(instant + offset, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,456,                return localInstant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,458,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,459,"                localInstant = iField.addWrapField(localInstant, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,460,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,465,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,466,"            localInstant = iField.set(localInstant, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,467,"            long result = iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,468,            if (get(result) != value) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,469,"                throw new IllegalFieldValueException(iField.getType(), Integer.valueOf(value),",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,474,            return result;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,479,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,480,"            localInstant = iField.set(localInstant, text, locale);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,481,"            return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,485,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,486,            return iField.getDifference,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,492,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,493,            return iField.getDifferenceAsLong,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,499,            return iDurationField;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,503,            return iRangeDurationField;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,507,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,508,            return iField.isLeap(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,512,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,513,            return iField.getLeapAmount(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,517,            return iLeapDurationField;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,521,            if (iTimeField) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,522,                int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,523,                instant = iField.roundFloor(instant + offset);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,524,                return instant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,526,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,527,                localInstant = iField.roundFloor(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,528,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,533,            if (iTimeField) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,534,                int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,535,                instant = iField.roundCeiling(instant + offset);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,536,                return instant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,538,                long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,539,                localInstant = iField.roundCeiling(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,540,"                return iZone.convertLocalToUTC(localInstant, false, instant);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,545,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,546,            return iField.remainder(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,550,            return iField.getMinimumValue();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,554,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,555,            return iField.getMinimumValue(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,559,            return iField.getMinimumValue(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,563,"            return iField.getMinimumValue(instant, values);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,567,            return iField.getMaximumValue();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,571,            long localInstant = iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,572,            return iField.getMaximumValue(localInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,576,            return iField.getMaximumValue(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,580,"            return iField.getMaximumValue(instant, values);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,584,            return iField.getMaximumTextLength(locale);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,588,            return iField.getMaximumShortTextLength(locale);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,592,            int offset = this.iZone.getOffset(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,593,            long sum = instant + offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,595,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,596,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,598,            return offset;,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,50,        int year = getWrappedField().get(instant);,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,51,        return year < 0 ? -year : year;,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,55,"        return getWrappedField().add(instant, years);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,59,"        return getWrappedField().add(instant, years);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,63,"        return getWrappedField().addWrapField(instant, years);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,67,"        return getWrappedField().addWrapField(instant, fieldIndex, values, years);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,71,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,75,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,79,"        FieldUtils.verifyValueBounds(this, year, 0, getMaximumValue());",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,80,        if (getWrappedField().get(instant) < 0) {,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,81,            year = -year;,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,83,"        return super.set(instant, year);",0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,95,        return getWrappedField().roundFloor(instant);,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,99,        return getWrappedField().roundCeiling(instant);,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,103,        return getWrappedField().remainder(instant);,0.0,0,,0
org/joda/time/chrono/ISOYearOfEraDateTimeField,19,110,        return INSTANCE;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,286,                throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,294,            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,302,"            return iField.getValue(duration, addOffset(instant));",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,306,"            return iField.getValueAsLong(duration, addOffset(instant));",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,310,"            return iField.getMillis(value, addOffset(instant));",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,314,"            return iField.getMillis(value, addOffset(instant));",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,318,            int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,319,"            instant = iField.add(instant + offset, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,320,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,324,            int offset = getOffsetToAdd(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,325,"            instant = iField.add(instant + offset, value);",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,326,            return instant - (iTimeField ? offset : getOffsetFromLocalToSubtract(instant));,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,330,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,331,            return iField.getDifference,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,337,            int offset = getOffsetToAdd(subtrahendInstant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,338,            return iField.getDifferenceAsLong,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,344,            int offset = this.iZone.getOffset(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,345,            long sum = instant + offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,347,            if ((instant ^ sum) < 0 && (instant ^ offset) >= 0) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,348,"                throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,350,            return offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,354,            int offset = this.iZone.getOffsetFromLocal(instant);,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,355,            long diff = instant - offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,357,            if ((instant ^ diff) < 0 && (instant ^ offset) < 0) {,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,358,"                throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,360,            return offset;,0.0,0,,0
org/joda/time/chrono/ZonedChronology,19,364,            return iZone.convertUTCToLocal(instant);,0.0,0,,0
org/joda/time/DateTimeUtils,19,399,            return System.currentTimeMillis();,0.0,0,,0
org/joda/time/field/ScaledDurationField,19,49,"            throw new IllegalArgumentException(""The scalar must not be 0 or 1"");",0.0,0,,0
org/joda/time/field/ScaledDurationField,19,55,        return getWrappedField().getValue(duration) / iScalar;,0.0,0,,0
org/joda/time/field/ScaledDurationField,19,59,        return getWrappedField().getValueAsLong(duration) / iScalar;,0.0,0,,0
org/joda/time/field/ScaledDurationField,19,63,"        return getWrappedField().getValue(duration, instant) / iScalar;",0.0,0,,0
org/joda/time/field/ScaledDurationField,19,67,"        return getWrappedField().getValueAsLong(duration, instant) / iScalar;",0.0,0,,0
org/joda/time/field/ScaledDurationField,19,71,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,,0
org/joda/time/field/ScaledDurationField,19,72,        return getWrappedField().getMillis(scaled);,0.0,0,,0
org/joda/time/field/ScaledDurationField,19,76,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,,0
org/joda/time/field/ScaledDurationField,19,77,        return getWrappedField().getMillis(scaled);,0.0,0,,0
org/joda/time/field/ScaledDurationField,19,81,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,,0
org/joda/time/field/ScaledDurationField,19,82,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,,0
org/joda/time/field/ScaledDurationField,19,86,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,,0
org/joda/time/field/ScaledDurationField,19,87,"        return getWrappedField().getMillis(scaled, instant);",0.0,0,,0
org/joda/time/field/ScaledDurationField,19,91,        long scaled = ((long) value) * ((long) iScalar);,0.0,0,,0
org/joda/time/field/ScaledDurationField,19,92,"        return getWrappedField().add(instant, scaled);",0.0,0,,0
org/joda/time/field/ScaledDurationField,19,96,"        long scaled = FieldUtils.safeMultiply(value, iScalar);",0.0,0,,0
org/joda/time/field/ScaledDurationField,19,97,"        return getWrappedField().add(instant, scaled);",0.0,0,,0
org/joda/time/field/ScaledDurationField,19,101,"        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,,0
org/joda/time/field/ScaledDurationField,19,105,"        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;",0.0,0,,0
org/joda/time/field/ScaledDurationField,19,119,        return iScalar;,0.0,0,,0
org/joda/time/field/ScaledDurationField,19,130,        if (this == obj) {,0.0,0,,0
org/joda/time/field/ScaledDurationField,19,131,            return true;,0.0,0,,0
org/joda/time/field/ScaledDurationField,19,132,        } else if (obj instanceof ScaledDurationField) {,0.0,0,,0
org/joda/time/field/ScaledDurationField,19,133,            ScaledDurationField other = (ScaledDurationField) obj;,0.0,0,,0
org/joda/time/field/ScaledDurationField,19,134,            return (getWrappedField().equals(other.getWrappedField())) &&,0.0,0,,0
org/joda/time/field/ScaledDurationField,19,138,        return false;,0.0,0,,0
org/joda/time/field/DecoratedDurationField,19,54,"            throw new IllegalArgumentException(""The field must not be null"");",0.0,0,,0
org/joda/time/field/DecoratedDurationField,19,57,"            throw new IllegalArgumentException(""The field must be supported"");",0.0,0,,0
org/joda/time/field/DecoratedDurationField,19,73,        return iField.isPrecise();,0.0,0,,0
org/joda/time/field/DecoratedDurationField,19,77,"        return iField.getValueAsLong(duration, instant);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,19,81,"        return iField.getMillis(value, instant);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,19,85,"        return iField.getMillis(value, instant);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,19,89,"        return iField.add(instant, value);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,19,93,"        return iField.add(instant, value);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,19,97,"        return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/DecoratedDurationField,19,101,        return iField.getUnitMillis();,0.0,0,,0
org/joda/time/field/FieldUtils,19,36,        super();,0.0,0,,0
org/joda/time/field/FieldUtils,19,37,    },0.0,0,,0
org/joda/time/field/FieldUtils,19,49,        if (value == Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/field/FieldUtils,19,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");",0.0,0,,0
org/joda/time/field/FieldUtils,19,52,        return -value;,0.0,0,,0
org/joda/time/field/FieldUtils,19,67,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,19,85,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,19,100,        long diff = val1 - val2;,0.0,0,,0
org/joda/time/field/FieldUtils,19,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,19,103,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,19,106,        return diff;,0.0,0,,0
org/joda/time/field/FieldUtils,19,119,        long total = (long) val1 * (long) val2;,0.0,0,,0
org/joda/time/field/FieldUtils,19,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0.0,0,,0
org/joda/time/field/FieldUtils,19,121,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,19,124,        return (int) total;,0.0,0,,0
org/joda/time/field/FieldUtils,19,137,        switch (scalar) {,0.0,0,,0
org/joda/time/field/FieldUtils,19,139,            return -val1;,0.0,0,,0
org/joda/time/field/FieldUtils,19,141,            return 0L;,0.0,0,,0
org/joda/time/field/FieldUtils,19,143,            return val1;,0.0,0,,0
org/joda/time/field/FieldUtils,19,145,        long total = val1 * scalar;,0.0,0,,0
org/joda/time/field/FieldUtils,19,146,        if (total / scalar != val1) {,0.0,0,,0
org/joda/time/field/FieldUtils,19,147,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,19,150,        return total;,0.0,0,,0
org/joda/time/field/FieldUtils,19,162,        if (val2 == 1) {,0.0,0,,0
org/joda/time/field/FieldUtils,19,163,            return val1;,0.0,0,,0
org/joda/time/field/FieldUtils,19,165,        if (val2 == 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,19,166,            return 0;,0.0,0,,0
org/joda/time/field/FieldUtils,19,168,        long total = val1 * val2;,0.0,0,,0
org/joda/time/field/FieldUtils,19,169,        if (total / val2 != val1) {,0.0,0,,0
org/joda/time/field/FieldUtils,19,170,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,19,173,        return total;,0.0,0,,0
org/joda/time/field/FieldUtils,19,184,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,0.0,0,,0
org/joda/time/field/FieldUtils,19,185,            return (int) value;,0.0,0,,0
org/joda/time/field/FieldUtils,19,187,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);",0.0,0,,0
org/joda/time/field/FieldUtils,19,199,"        long val = FieldUtils.safeMultiply(val1, val2);",0.0,0,,0
org/joda/time/field/FieldUtils,19,200,        return FieldUtils.safeToInt(val);,0.0,0,,0
org/joda/time/field/FieldUtils,19,215,            throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/field/FieldUtils,19,233,            throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/field/FieldUtils,19,249,        if ((value < lowerBound) || (value > upperBound)) {,0.0,0,,0
org/joda/time/field/FieldUtils,19,250,            throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/field/FieldUtils,19,254,    },0.0,0,,0
org/joda/time/field/FieldUtils,19,273,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",0.0,0,,0
org/joda/time/field/FieldUtils,19,289,        if (minValue >= maxValue) {,0.0,0,,0
org/joda/time/field/FieldUtils,19,290,"            throw new IllegalArgumentException(""MIN > MAX"");",0.0,0,,0
org/joda/time/field/FieldUtils,19,293,        int wrapRange = maxValue - minValue + 1;,0.0,0,,0
org/joda/time/field/FieldUtils,19,294,        value -= minValue;,0.0,0,,0
org/joda/time/field/FieldUtils,19,296,        if (value >= 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,19,297,            return (value % wrapRange) + minValue;,0.0,0,,0
org/joda/time/field/FieldUtils,19,300,        int remByRange = (-value) % wrapRange;,0.0,0,,0
org/joda/time/field/FieldUtils,19,302,        if (remByRange == 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,19,303,            return 0 + minValue;,0.0,0,,0
org/joda/time/field/FieldUtils,19,305,        return (wrapRange - remByRange) + minValue;,0.0,0,,0
org/joda/time/field/FieldUtils,19,318,        if (object1 == object2) {,0.0,0,,0
org/joda/time/field/FieldUtils,19,319,            return true;,0.0,0,,0
org/joda/time/field/FieldUtils,19,321,        if (object1 == null || object2 == null) {,0.0,0,,0
org/joda/time/field/FieldUtils,19,322,            return false;,0.0,0,,0
org/joda/time/field/FieldUtils,19,324,        return object1.equals(object2);,0.0,0,,0
org/joda/time/field/MillisDurationField,19,53,"        return ""millis"";",0.0,0,,0
org/joda/time/field/MillisDurationField,19,85,        return FieldUtils.safeToInt(duration);,0.0,0,,0
org/joda/time/field/MillisDurationField,19,89,        return duration;,0.0,0,,0
org/joda/time/field/MillisDurationField,19,93,        return FieldUtils.safeToInt(duration);,0.0,0,,0
org/joda/time/field/MillisDurationField,19,97,        return duration;,0.0,0,,0
org/joda/time/field/MillisDurationField,19,101,        return value;,0.0,0,,0
org/joda/time/field/MillisDurationField,19,105,        return value;,0.0,0,,0
org/joda/time/field/MillisDurationField,19,109,        return value;,0.0,0,,0
org/joda/time/field/MillisDurationField,19,113,        return value;,0.0,0,,0
org/joda/time/field/MillisDurationField,19,121,"        return FieldUtils.safeAdd(instant, value);",0.0,0,,0
org/joda/time/field/MillisDurationField,19,125,"        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));",0.0,0,,0
org/joda/time/field/MillisDurationField,19,129,"        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/MillisDurationField,19,134,        long otherMillis = otherField.getUnitMillis();,0.0,0,,0
org/joda/time/field/MillisDurationField,19,135,        long thisMillis = getUnitMillis();,0.0,0,,0
org/joda/time/field/MillisDurationField,19,137,        if (thisMillis == otherMillis) {,0.0,0,,0
org/joda/time/field/MillisDurationField,19,138,            return 0;,0.0,0,,0
org/joda/time/field/MillisDurationField,19,140,        if (thisMillis < otherMillis) {,0.0,0,,0
org/joda/time/field/MillisDurationField,19,141,            return -1;,0.0,0,,0
org/joda/time/field/MillisDurationField,19,143,            return 1;,0.0,0,,0
org/joda/time/field/MillisDurationField,19,148,        if (obj instanceof MillisDurationField) {,0.0,0,,0
org/joda/time/field/MillisDurationField,19,149,            return getUnitMillis() == ((MillisDurationField) obj).getUnitMillis();,0.0,0,,0
org/joda/time/field/MillisDurationField,19,151,        return false;,0.0,0,,0
org/joda/time/field/MillisDurationField,19,164,"        return ""DurationField[millis]"";",0.0,0,,0
org/joda/time/field/MillisDurationField,19,171,        return INSTANCE;,0.0,0,,0
org/joda/time/field/MillisDurationField,19,32,public final class MillisDurationField extends DurationField implements Serializable {,0.0,0,,0
