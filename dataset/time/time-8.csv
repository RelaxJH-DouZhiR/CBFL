project_path,version,lines,statement,suspicious,faulty,predict,miss_line
org/joda/time/DateTimeZone,8,218,                return DateTimeZone.UTC;,1.0,0,,0
org/joda/time/DateTimeZone,8,274,            return DateTimeZone.UTC;,1.0,0,,0
org/joda/time/DateTimeZone,8,660,            buf.append('-');,0.08333,1,,1
org/joda/time/DateTimeZone,8,661,            offset = -offset;,0.08333,0,,0
org/joda/time/DateTimeZone,8,383,            zone = ref.get();,0.05263,0,,0
org/joda/time/DateTimeZone,8,384,            if (zone != null) {,0.05263,0,,0
org/joda/time/DateTimeZone,8,385,                return zone;,0.05263,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2308,                negative = true;,0.05,0,,0
org/joda/time/DateTimeZone,8,216,            int offset = parseOffset(id);,0.03571,0,,0
org/joda/time/DateTimeZone,8,217,            if (offset == 0L) {,0.03571,0,,0
org/joda/time/DateTimeZone,8,220,                id = printOffset(offset);,0.03571,0,,0
org/joda/time/DateTimeZone,8,221,"                return fixedOffsetZone(id, offset);",0.03571,0,,0
org/joda/time/DateTimeZone,8,215,"        if (id.startsWith(""+"") || id.startsWith(""-"")) {",0.03448,0,,0
org/joda/time/DateTimeZone,8,629,        Chronology chrono = new BaseChronology() {,0.03333,0,,0
org/joda/time/DateTimeZone,8,631,                return null;,0.03333,0,,0
org/joda/time/DateTimeZone,8,634,                return this;,0.03333,0,,0
org/joda/time/DateTimeZone,8,629,        Chronology chrono = new BaseChronology() {,0.03333,0,,0
org/joda/time/DateTimeZone,8,643,        return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);,0.03333,0,,0
org/joda/time/DateTimeZone,8,695,        if (cOffsetFormatter == null) {,0.03333,0,,0
org/joda/time/DateTimeZone,8,696,            cOffsetFormatter = new DateTimeFormatterBuilder(),0.03333,0,,0
org/joda/time/DateTimeZone,8,700,        return cOffsetFormatter;,0.03333,0,,0
org/joda/time/tz/ZoneInfoProvider,8,142,            return null;,0.03125,0,,0
org/joda/time/DateTimeZone,8,288,                minutesOffset = hoursInMinutes + minutesOffset;,0.01754,0,,0
org/joda/time/DateTimeZone,8,273,        if (hoursOffset == 0 && minutesOffset == 0) {,0.01639,0,,0
org/joda/time/DateTimeZone,8,276,        if (hoursOffset < -23 || hoursOffset > 23) {,0.01639,0,,0
org/joda/time/DateTimeZone,8,279,        if (minutesOffset < 0 || minutesOffset > 59) {,0.01639,1,,0
org/joda/time/DateTimeZone,8,282,        int offset = 0;,0.01639,0,,0
org/joda/time/DateTimeZone,8,284,            int hoursInMinutes = hoursOffset * 60;,0.01639,0,,0
org/joda/time/DateTimeZone,8,285,            if (hoursInMinutes < 0) {,0.01639,0,,0
org/joda/time/DateTimeZone,8,290,"            offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",0.01639,0,,0
org/joda/time/DateTimeZone,8,293,        },0.01639,0,,0
org/joda/time/DateTimeZone,8,294,        return forOffsetMillis(offset);,0.01639,0,,0
org/joda/time/DateTimeZone,8,304,        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {,0.01408,0,,0
org/joda/time/DateTimeZone,8,307,        String id = printOffset(millisOffset);,0.01408,0,,0
org/joda/time/DateTimeZone,8,308,"        return fixedOffsetZone(id, millisOffset);",0.01408,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2310,                negative = false;,0.01282,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2309,            } else if (c == '+') {,0.01205,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2386,                    break parse;,0.01149,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2356,                    expectSeparators = true;,0.01111,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2357,                    limit--;,0.01111,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2358,                    position++;,0.01111,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2315,            limit--;,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2316,            position++;,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2330,"            if (digitCount(text, position, 2) < 2) {",0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2337,"            int hours = FormatUtils.parseTwoDigits(text, position);",0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2338,            if (hours > 23) {,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2341,            offset = hours * DateTimeConstants.MILLIS_PER_HOUR;,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2342,            limit -= 2;,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2343,            position += 2;,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2349,                if (limit <= 0) {,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2354,                c = text.charAt(position);,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2355,                if (c == ':') {,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2367,"                int count = digitCount(text, position, 2);",0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2368,                if (count == 0 && !expectSeparators) {,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2370,                } else if (count < 2) {,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2375,"                int minutes = FormatUtils.parseTwoDigits(text, position);",0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2376,                if (minutes > 59) {,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2379,                offset += minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2380,                limit -= 2;,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2381,                position += 2;,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2385,                if (limit <= 0) {,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2444,            bucket.setOffset(Integer.valueOf(negative ? -offset : offset));,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2445,            return position;,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2453,"            int limit = Math.min(text.length() - position, amount);",0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2454,            amount = 0;,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2455,            for (; limit > 0; limit--) {,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2456,                char c = text.charAt(position + amount);,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2457,                if (c < '0' || c > '9') {,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2460,                amount++;,0.01099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2462,            return amount;,0.01099,0,,0
org/joda/time/format/FormatUtils,8,352,        int value = text.charAt(position) - '0';,0.01099,0,,0
org/joda/time/format/FormatUtils,8,353,        return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';,0.01099,0,,0
org/joda/time/DateTimeZone,8,658,            buf.append('+');,0.01053,0,,0
org/joda/time/DateTimeZone,8,374,        if (offset == 0) {,0.01042,0,,0
org/joda/time/DateTimeZone,8,377,        if (iFixedOffsetCache == null) {,0.01042,0,,0
org/joda/time/DateTimeZone,8,378,"            iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",0.01042,0,,0
org/joda/time/DateTimeZone,8,381,        Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);,0.01042,0,,0
org/joda/time/DateTimeZone,8,382,        if (ref != null) {,0.01042,0,,0
org/joda/time/DateTimeZone,8,388,"        zone = new FixedDateTimeZone(id, null, offset, offset);",0.01042,0,,0
org/joda/time/DateTimeZone,8,389,"        iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",0.01042,0,,0
org/joda/time/DateTimeZone,8,390,        return zone;,0.01042,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2306,            char c = text.charAt(position);,0.01042,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2307,            if (c == '-') {,0.01042,0,,0
org/joda/time/DateTimeZone,8,656,        StringBuffer buf = new StringBuffer();,0.01031,0,,0
org/joda/time/DateTimeZone,8,657,        if (offset >= 0) {,0.01031,0,,0
org/joda/time/DateTimeZone,8,664,        int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;,0.01031,0,,0
org/joda/time/DateTimeZone,8,665,"        FormatUtils.appendPaddedInteger(buf, hours, 2);",0.01031,0,,0
org/joda/time/DateTimeZone,8,666,        offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;,0.01031,0,,0
org/joda/time/DateTimeZone,8,668,        int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;,0.01031,0,,0
org/joda/time/DateTimeZone,8,669,        buf.append(':');,0.01031,0,,0
org/joda/time/DateTimeZone,8,670,"        FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.01031,0,,0
org/joda/time/DateTimeZone,8,671,        offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.01031,0,,0
org/joda/time/DateTimeZone,8,672,        if (offset == 0) {,0.01031,0,,0
org/joda/time/DateTimeZone,8,673,            return buf.toString();,0.01031,0,,0
org/joda/time/field/FieldUtils,8,119,        long total = (long) val1 * (long) val2;,0.01031,0,,0
org/joda/time/field/FieldUtils,8,120,        if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {,0.01031,0,,0
org/joda/time/field/FieldUtils,8,123,        return (int) total;,0.01031,0,,0
org/joda/time/format/DateTimeParserBucket,8,195,        iSavedState = null;,0.00781,0,,0
org/joda/time/format/DateTimeParserBucket,8,196,        iOffset = offset;,0.00781,0,,0
org/joda/time/format/DateTimeParserBucket,8,197,    },0.00781,0,,0
org/joda/time/format/DateTimeParserBucket,8,381,            millis -= iOffset;,0.00781,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2301,            if (limit <= 1) {,0.00725,0,,0
org/joda/time/format/DateTimeFormatter,8,747,"                return bucket.computeMillis(true, text);",0.00649,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2278,            int limit = text.length() - position;,0.00571,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2281,            if (iZeroOffsetParseText != null) {,0.00571,0,,0
org/joda/time/format/DateTimeFormatter,8,746,            if (newPos >= text.length()) {,0.00543,0,,0
org/joda/time/format/DateTimeFormatter,8,942,            chrono = iChrono;,0.00498,0,,0
org/joda/time/format/DateTimeFormatter,8,260,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.00495,0,,0
org/joda/time/format/DateTimeFormatter,8,740,        DateTimeParser parser = requireParser();,0.0045,0,,0
org/joda/time/format/DateTimeFormatter,8,742,        Chronology chrono = selectChronology(iChrono);,0.0045,0,,0
org/joda/time/format/DateTimeFormatter,8,743,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0045,0,,0
org/joda/time/format/DateTimeFormatter,8,744,"        int newPos = parser.parseInto(bucket, text, 0);",0.0045,0,,0
org/joda/time/format/DateTimeFormatter,8,745,        if (newPos >= 0) {,0.0045,0,,0
org/joda/time/format/DateTimeFormatter,8,257,        if (iChrono == chrono) {,0.00433,0,,0
org/joda/time/format/DateTimeParserBucket,8,369,                for (int i = 0; i < count; i++) {,0.00336,0,,0
org/joda/time/format/DateTimeParserBucket,8,394,        return millis;,0.00323,0,,0
org/joda/time/format/DateTimeParserBucket,8,345,        SavedField[] savedFields = iSavedFields;,0.00321,0,,0
org/joda/time/format/DateTimeParserBucket,8,346,        int count = iSavedFieldsCount;,0.00321,0,,0
org/joda/time/format/DateTimeParserBucket,8,347,        if (iSavedFieldsShared) {,0.00321,0,,0
org/joda/time/format/DateTimeParserBucket,8,351,"        sort(savedFields, count);",0.00321,0,,0
org/joda/time/format/DateTimeParserBucket,8,352,        if (count > 0) {,0.00321,0,,0
org/joda/time/format/DateTimeParserBucket,8,363,        long millis = iMillis;,0.00321,0,,0
org/joda/time/format/DateTimeParserBucket,8,365,            for (int i = 0; i < count; i++) {,0.00321,0,,0
org/joda/time/format/DateTimeParserBucket,8,368,            if (resetFields) {,0.00321,0,,0
org/joda/time/format/DateTimeParserBucket,8,378,        },0.00321,0,,0
org/joda/time/format/DateTimeParserBucket,8,380,        if (iOffset != null) {,0.00321,0,,0
org/joda/time/format/DateTimeParserBucket,8,416,        if (high > 10) {,0.00321,0,,0
org/joda/time/format/DateTimeParserBucket,8,419,            for (int i=0; i<high; i++) {,0.00321,0,,0
org/joda/time/format/DateTimeParserBucket,8,427,    },0.00321,0,,0
org/joda/time/format/DateTimeFormatter,8,929,        return parser;,0.00283,0,,0
org/joda/time/format/DateTimeParserBucket,8,120,        super();,0.00283,0,,0
org/joda/time/format/DateTimeParserBucket,8,73,    private SavedField[] iSavedFields = new SavedField[8];,0.00283,0,,0
org/joda/time/format/DateTimeParserBucket,8,121,        chrono = DateTimeUtils.getChronology(chrono);,0.00283,0,,0
org/joda/time/format/DateTimeParserBucket,8,122,        iMillis = instantLocal;,0.00283,0,,0
org/joda/time/format/DateTimeParserBucket,8,123,        iZone = chrono.getZone();,0.00283,0,,0
org/joda/time/format/DateTimeParserBucket,8,124,        iChrono = chrono.withUTC();,0.00283,0,,0
org/joda/time/format/DateTimeParserBucket,8,125,        iLocale = (locale == null ? Locale.getDefault() : locale);,0.00283,0,,0
org/joda/time/format/DateTimeParserBucket,8,126,        iPivotYear = pivotYear;,0.00283,0,,0
org/joda/time/format/DateTimeParserBucket,8,127,        iDefaultYear = defaultYear;,0.00283,0,,0
org/joda/time/format/DateTimeParserBucket,8,128,    },0.00283,0,,0
org/joda/time/format/DateTimeFormatter,8,925,        DateTimeParser parser = iParser;,0.00282,0,,0
org/joda/time/format/DateTimeFormatter,8,926,        if (parser == null) {,0.00282,0,,0
org/joda/time/format/FormatUtils,8,68,            for (; size > 2; size--) {,0.00242,0,,0
org/joda/time/format/FormatUtils,8,74,            int d = ((value + 1) * 13421772) >> 27;,0.00242,0,,0
org/joda/time/format/FormatUtils,8,75,            buf.append((char) (d + '0'));,0.00242,0,,0
org/joda/time/format/FormatUtils,8,77,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,0.00242,0,,0
org/joda/time/format/FormatUtils,8,78,        } else {,0.00242,0,,0
org/joda/time/format/DateTimeFormatter,8,128,        super();,0.00203,0,,0
org/joda/time/format/DateTimeFormatter,8,129,        iPrinter = printer;,0.00203,0,,0
org/joda/time/format/DateTimeFormatter,8,130,        iParser = parser;,0.00203,0,,0
org/joda/time/format/DateTimeFormatter,8,131,        iLocale = locale;,0.00203,0,,0
org/joda/time/format/DateTimeFormatter,8,132,        iOffsetParsed = offsetParsed;,0.00203,0,,0
org/joda/time/format/DateTimeFormatter,8,133,        iChrono = chrono;,0.00203,0,,0
org/joda/time/format/DateTimeFormatter,8,134,        iZone = zone;,0.00203,0,,0
org/joda/time/format/DateTimeFormatter,8,135,        iPivotYear = pivotYear;,0.00203,0,,0
org/joda/time/format/DateTimeFormatter,8,136,        iDefaultYear = defaultYear;,0.00203,0,,0
org/joda/time/format/DateTimeFormatter,8,137,    },0.00203,0,,0
org/joda/time/format/FormatUtils,8,67,        } else if (value < 100) {,0.00187,0,,0
org/joda/time/format/FormatUtils,8,64,                buf.append('0');,0.00186,0,,0
org/joda/time/format/FormatUtils,8,63,            for (; size > 1; size--) {,0.00186,0,,0
org/joda/time/format/FormatUtils,8,66,            buf.append((char)(value + '0'));,0.00186,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1091,        return append0(new TimeZoneOffset,0.00172,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2121,            super();,0.0017,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2122,            iZeroOffsetPrintText = zeroOffsetPrintText;,0.0017,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2123,            iZeroOffsetParseText = zeroOffsetParseText;,0.0017,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2124,            iShowSeparators = showSeparators;,0.0017,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2125,            if (minFields <= 0 || maxFields < minFields) {,0.0017,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2128,            if (minFields > 4) {,0.0017,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2132,            iMinFields = minFields;,0.0017,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2133,            iMaxFields = maxFields;,0.0017,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2134,        },0.0017,0,,0
org/joda/time/format/FormatUtils,8,50,        if (value < 0) {,0.00158,0,,0
org/joda/time/format/FormatUtils,8,62,        if (value < 10) {,0.00158,0,,0
org/joda/time/format/FormatUtils,8,92,    },0.00158,0,,0
org/joda/time/format/DateTimeFormatter,8,940,        chrono = DateTimeUtils.getChronology(chrono);,0.00137,0,,0
org/joda/time/format/DateTimeFormatter,8,941,        if (iChrono != null) {,0.00137,0,,0
org/joda/time/format/DateTimeFormatter,8,944,        if (iZone != null) {,0.00137,0,,0
org/joda/time/format/DateTimeFormatter,8,947,        return chrono;,0.00137,0,,0
org/joda/time/format/FormatUtils,8,31,    private static final double LOG_10 = Math.log(10);,0.00122,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1169,            return true;,0.00116,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1179,            return true;,0.00116,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1142,                Object printer = iElementPairs.get(0);,0.00116,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1143,                Object parser = iElementPairs.get(1);,0.00116,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1145,                if (printer != null) {,0.00116,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1146,                    if (printer == parser || parser == null) {,0.00116,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1147,                        f = printer;,0.00116,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,112,            parser = (DateTimeParser) f;,0.00099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,108,            printer = (DateTimePrinter) f;,0.00099,0,,0
org/joda/time/format/DateTimeFormatter,8,109,        super();,0.00099,0,,0
org/joda/time/format/DateTimeFormatter,8,110,        iPrinter = printer;,0.00099,0,,0
org/joda/time/format/DateTimeFormatter,8,111,        iParser = parser;,0.00099,0,,0
org/joda/time/format/DateTimeFormatter,8,112,        iLocale = null;,0.00099,0,,0
org/joda/time/format/DateTimeFormatter,8,113,        iOffsetParsed = false;,0.00099,0,,0
org/joda/time/format/DateTimeFormatter,8,114,        iChrono = null;,0.00099,0,,0
org/joda/time/format/DateTimeFormatter,8,115,        iZone = null;,0.00099,0,,0
org/joda/time/format/DateTimeFormatter,8,116,        iPivotYear = null;,0.00099,0,,0
org/joda/time/format/DateTimeFormatter,8,117,        iDefaultYear = 2000;,0.00099,0,,0
org/joda/time/format/DateTimeFormatter,8,118,    },0.00099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,105,        Object f = getFormatter();,0.00099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,106,        DateTimePrinter printer = null;,0.00099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,107,        if (isPrinter(f)) {,0.00099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,110,        DateTimeParser parser = null;,0.00099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,111,        if (isParser(f)) {,0.00099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,114,        if (printer != null || parser != null) {,0.00099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,115,"            return new DateTimeFormatter(printer, parser);",0.00099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1165,        if (f instanceof DateTimePrinter) {,0.00099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1166,            if (f instanceof Composite) {,0.00099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1175,        if (f instanceof DateTimeParser) {,0.00099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1176,            if (f instanceof Composite) {,0.00099,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,374,        iFormatter = null;,0.00098,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,376,        iElementPairs.add(element);,0.00098,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,377,        iElementPairs.add(element);,0.00098,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,378,        return this;,0.00098,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1138,        Object f = iFormatter;,0.00098,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1140,        if (f == null) {,0.00098,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1141,            if (iElementPairs.size() == 2) {,0.00098,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1154,            if (f == null) {,0.00098,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1158,            iFormatter = f;,0.00098,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1161,        return f;,0.00098,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,84,        super();,0.00098,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,85,        iElementPairs = new ArrayList<Object>();,0.00098,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,86,    },0.00098,0,,0
org/joda/time/DateTimeUtils,8,285,        return chrono;,0.00036,0,,0
org/joda/time/DateTimeZone,8,175,        SecurityManager sm = System.getSecurityManager();,0.00034,0,,0
org/joda/time/DateTimeZone,8,176,        if (sm != null) {,0.00034,0,,0
org/joda/time/DateTimeZone,8,179,        if (zone == null) {,0.00034,0,,0
org/joda/time/DateTimeZone,8,182,        synchronized(DateTimeZone.class) {,0.00034,0,,0
org/joda/time/DateTimeZone,8,183,            cDefault = zone;,0.00034,0,,0
org/joda/time/DateTimeZone,8,184,        },0.00034,0,,0
org/joda/time/DateTimeZone,8,185,    },0.00034,0,,0
org/joda/time/DateTimeUtils,8,282,        if (chrono == null) {,0.00032,0,,0
org/joda/time/DateTimeZone,8,148,                        },0.0003,0,,0
org/joda/time/DateTimeZone,8,134,        DateTimeZone zone = cDefault;,0.0003,0,,0
org/joda/time/DateTimeZone,8,135,        if (zone == null) {,0.0003,0,,0
org/joda/time/DateTimeZone,8,136,            synchronized(DateTimeZone.class) {,0.0003,0,,0
org/joda/time/DateTimeZone,8,137,                zone = cDefault;,0.0003,0,,0
org/joda/time/DateTimeZone,8,138,                if (zone == null) {,0.0003,0,,0
org/joda/time/DateTimeZone,8,139,                    DateTimeZone temp = null;,0.0003,0,,0
org/joda/time/DateTimeZone,8,142,"                            String id = System.getProperty(""user.timezone"");",0.0003,0,,0
org/joda/time/DateTimeZone,8,143,                            if (id != null) {  // null check avoids stack overflow,0.0003,0,,0
org/joda/time/DateTimeZone,8,144,                                temp = forID(id);,0.0003,0,,0
org/joda/time/DateTimeZone,8,149,                        if (temp == null) {,0.0003,0,,0
org/joda/time/DateTimeZone,8,154,                    },0.0003,0,,0
org/joda/time/DateTimeZone,8,155,                    if (temp == null) {,0.0003,0,,0
org/joda/time/DateTimeZone,8,158,                    cDefault = zone = temp;,0.0003,0,,0
org/joda/time/DateTimeZone,8,160,            },0.0003,0,,0
org/joda/time/DateTimeZone,8,162,        return zone;,0.0003,0,,0
org/joda/time/Chronology,8,63,public abstract class Chronology {,0.0003,0,,0
org/joda/time/chrono/BaseChronology,8,54,        super();,0.0003,0,,0
org/joda/time/chrono/BaseChronology,8,55,    },0.0003,0,,0
org/joda/time/DateTimeUtils,8,39,    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();,0.00029,0,,0
org/joda/time/DateTimeUtils,8,41,    private static volatile MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.00029,0,,0
org/joda/time/DateTimeUtils,8,47,"        Map<String, DateTimeZone> map = new LinkedHashMap<String, DateTimeZone>();",0.00029,0,,0
org/joda/time/DateTimeUtils,8,48,"        map.put(""UT"", DateTimeZone.UTC);",0.00029,0,,0
org/joda/time/DateTimeUtils,8,49,"        map.put(""UTC"", DateTimeZone.UTC);",0.00029,0,,0
org/joda/time/DateTimeUtils,8,50,"        map.put(""GMT"", DateTimeZone.UTC);",0.00029,0,,0
org/joda/time/DateTimeUtils,8,51,"        put(map, ""EST"", ""America/New_York"");",0.00029,0,,0
org/joda/time/DateTimeUtils,8,52,"        put(map, ""EDT"", ""America/New_York"");",0.00029,0,,0
org/joda/time/DateTimeUtils,8,53,"        put(map, ""CST"", ""America/Chicago"");",0.00029,0,,0
org/joda/time/DateTimeUtils,8,54,"        put(map, ""CDT"", ""America/Chicago"");",0.00029,0,,0
org/joda/time/DateTimeUtils,8,55,"        put(map, ""MST"", ""America/Denver"");",0.00029,0,,0
org/joda/time/DateTimeUtils,8,56,"        put(map, ""MDT"", ""America/Denver"");",0.00029,0,,0
org/joda/time/DateTimeUtils,8,57,"        put(map, ""PST"", ""America/Los_Angeles"");",0.00029,0,,0
org/joda/time/DateTimeUtils,8,58,"        put(map, ""PDT"", ""America/Los_Angeles"");",0.00029,0,,0
org/joda/time/DateTimeUtils,8,59,        cZoneNames = Collections.unmodifiableMap(map);,0.00029,0,,0
org/joda/time/DateTimeUtils,8,60,    },0.00029,0,,0
org/joda/time/DateTimeUtils,8,63,"            map.put(name, DateTimeZone.forID(id));",0.00029,0,,0
org/joda/time/DateTimeUtils,8,66,        },0.00029,0,,0
org/joda/time/DateTimeUtils,8,67,    },0.00029,0,,0
org/joda/time/DateTimeUtils,8,524,    static class SystemMillisProvider implements MillisProvider {,0.00029,0,,0
org/joda/time/DateTimeZone,8,205,        if (id == null) {,0.00027,0,,0
org/joda/time/DateTimeZone,8,208,"        if (id.equals(""UTC"")) {",0.00027,0,,0
org/joda/time/DateTimeZone,8,211,        DateTimeZone zone = cProvider.getZone(id);,0.00027,0,,0
org/joda/time/DateTimeZone,8,212,        if (zone != null) {,0.00027,0,,0
org/joda/time/DateTimeZone,8,213,            return zone;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,504,        {,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,505,            if (mode != 'u' && mode != 'w' && mode != 's') {,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,509,            iMode = mode;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,510,            iMonthOfYear = monthOfYear;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,511,            iDayOfMonth = dayOfMonth;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,512,            iDayOfWeek = dayOfWeek;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,513,            iAdvance = advanceDayOfWeek;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,514,            iMillisOfDay = millisOfDay;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,515,        },0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,482,"            return new OfYear((char)in.readUnsignedByte(),",0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,147,            return loadZoneData(id);,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,224,        InputStream in = null;,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,226,            in = openResource(id);,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,227,"            DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);",0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,228,"            iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));",0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,229,            return tz;,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,236,                if (in != null) {,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,237,                    in.close();,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,240,            },0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1176,            super(id);,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1177,            iStandardOffset = standardOffset;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1178,            iStartRecurrence = startRecurrence;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1179,            iEndRecurrence = endRecurrence;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1180,        },0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1166,"            return new DSTZone(id, (int)readMillis(in), ",0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,95,        if (in instanceof DataInput) {,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,98,"            return readFrom((DataInput)new DataInputStream(in), id);",0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,110,        switch (in.readUnsignedByte()) {,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,119,"            return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in, id));",0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,183,        int v = in.readUnsignedByte();,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,184,        switch (v >> 6) {,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,187,            v = (v << (32 - 6)) >> (32 - 6);,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,188,            return v * (30 * 60000L);,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,192,            v = (v << (32 - 6)) >> (32 - 30);,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,193,            v |= (in.readUnsignedByte()) << 16;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,194,            v |= (in.readUnsignedByte()) << 8;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,195,            v |= (in.readUnsignedByte());,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,196,            return v * 60000L;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,200,            long w = (((long)v) << (64 - 6)) >> (64 - 38);,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,201,            w |= (in.readUnsignedByte()) << 24;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,202,            w |= (in.readUnsignedByte()) << 16;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,203,            w |= (in.readUnsignedByte()) << 8;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,204,            w |= (in.readUnsignedByte());,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,205,            return w * 1000L;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,209,            return in.readLong();,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1500,            super(id);,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1501,            iTransitions = transitions;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1502,            iWallOffsets = wallOffsets;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1503,            iStandardOffsets = standardOffsets;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1504,            iNameKeys = nameKeys;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1505,            iTailZone = tailZone;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1506,        },0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1341,            int poolSize = in.readUnsignedShort();,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1342,            String[] pool = new String[poolSize];,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1343,            for (int i=0; i<poolSize; i++) {,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1344,                pool[i] = in.readUTF();,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1347,            int size = in.readInt();,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1348,            long[] transitions = new long[size];,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1349,            int[] wallOffsets = new int[size];,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1350,            int[] standardOffsets = new int[size];,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1351,            String[] nameKeys = new String[size];,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1353,            for (int i=0; i<size; i++) {,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1354,                transitions[i] = readMillis(in);,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1355,                wallOffsets[i] = (int)readMillis(in);,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1356,                standardOffsets[i] = (int)readMillis(in);,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1359,                    if (poolSize < 256) {,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1360,                        index = in.readUnsignedByte();,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1364,                    nameKeys[i] = pool[index];,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1367,                },0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1370,            DSTZone tailZone = null;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1371,            if (in.readBoolean()) {,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1372,"                tailZone = DSTZone.readFrom(in, id);",0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1375,            return new PrecalculatedZone,0.00027,0,,0
org/joda/time/tz/CachedDateTimeZone,8,87,        super(zone.getID());,0.00027,0,,0
org/joda/time/tz/CachedDateTimeZone,8,84,    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];,0.00027,0,,0
org/joda/time/tz/CachedDateTimeZone,8,88,        iZone = zone;,0.00027,0,,0
org/joda/time/tz/CachedDateTimeZone,8,89,    },0.00027,0,,0
org/joda/time/tz/CachedDateTimeZone,8,39,"            i = Integer.getInteger(""org.joda.time.tz.CachedDateTimeZone.size"");",0.00027,0,,0
org/joda/time/tz/CachedDateTimeZone,8,42,        },0.00027,0,,0
org/joda/time/tz/CachedDateTimeZone,8,45,        if (i == null) {,0.00027,0,,0
org/joda/time/tz/CachedDateTimeZone,8,48,            cacheSize = 512; // (1 << 9),0.00027,0,,0
org/joda/time/tz/CachedDateTimeZone,8,61,        cInfoCacheMask = cacheSize - 1;,0.00027,0,,0
org/joda/time/tz/CachedDateTimeZone,8,62,    },0.00027,0,,0
org/joda/time/tz/CachedDateTimeZone,8,68,        if (zone instanceof CachedDateTimeZone) {,0.00027,0,,0
org/joda/time/tz/CachedDateTimeZone,8,71,        return new CachedDateTimeZone(zone);,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,747,"        Recurrence(OfYear ofYear, String nameKey, int saveMillis) {",0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,748,            iOfYear = ofYear;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,749,            iNameKey = nameKey;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,750,            iSaveMillis = saveMillis;,0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,751,        },0.00027,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,740,"            return new Recurrence(OfYear.readFrom(in), in.readUTF(), (int)readMillis(in));",0.00027,0,,0
org/joda/time/DateTimeZone,8,731,        return iID;,0.00027,0,,0
org/joda/time/DateTimeZone,8,714,    protected DateTimeZone(String id) {,0.00027,0,,0
org/joda/time/DateTimeZone,8,715,        if (id == null) {,0.00027,0,,0
org/joda/time/DateTimeZone,8,718,        iID = id;,0.00027,0,,0
org/joda/time/DateTimeZone,8,719,    },0.00027,0,,0
org/joda/time/DateTimeZone,8,94,"    public static final DateTimeZone UTC = new FixedDateTimeZone(""UTC"", ""UTC"", 0, 0);",0.00027,0,,0
org/joda/time/DateTimeZone,8,116,        setProvider0(null);,0.00027,0,,0
org/joda/time/DateTimeZone,8,117,        setNameProvider0(null);,0.00027,0,,0
org/joda/time/DateTimeZone,8,118,    },0.00027,0,,0
org/joda/time/DateTimeZone,8,440,        if (provider == null) {,0.00027,0,,0
org/joda/time/DateTimeZone,8,441,            provider = getDefaultProvider();,0.00027,0,,0
org/joda/time/DateTimeZone,8,443,        Set<String> ids = provider.getAvailableIDs();,0.00027,0,,0
org/joda/time/DateTimeZone,8,444,        if (ids == null || ids.size() == 0) {,0.00027,0,,0
org/joda/time/DateTimeZone,8,448,"        if (!ids.contains(""UTC"")) {",0.00027,0,,0
org/joda/time/DateTimeZone,8,451,"        if (!UTC.equals(provider.getZone(""UTC""))) {",0.00027,0,,0
org/joda/time/DateTimeZone,8,454,        cProvider = provider;,0.00027,0,,0
org/joda/time/DateTimeZone,8,455,        cAvailableIDs = ids;,0.00027,0,,0
org/joda/time/DateTimeZone,8,456,    },0.00027,0,,0
org/joda/time/DateTimeZone,8,468,        Provider provider = null;,0.00027,0,,0
org/joda/time/DateTimeZone,8,471,            String providerClass =,0.00027,0,,0
org/joda/time/DateTimeZone,8,473,            if (providerClass != null) {,0.00027,0,,0
org/joda/time/DateTimeZone,8,483,        },0.00027,0,,0
org/joda/time/DateTimeZone,8,485,        if (provider == null) {,0.00027,0,,0
org/joda/time/DateTimeZone,8,487,"                provider = new ZoneInfoProvider(""org/joda/time/tz/data"");",0.00027,0,,0
org/joda/time/DateTimeZone,8,491,            },0.00027,0,,0
org/joda/time/DateTimeZone,8,494,        if (provider == null) {,0.00027,0,,0
org/joda/time/DateTimeZone,8,498,        return provider;,0.00027,0,,0
org/joda/time/DateTimeZone,8,539,        if (nameProvider == null) {,0.00027,0,,0
org/joda/time/DateTimeZone,8,540,            nameProvider = getDefaultNameProvider();,0.00027,0,,0
org/joda/time/DateTimeZone,8,542,        cNameProvider = nameProvider;,0.00027,0,,0
org/joda/time/DateTimeZone,8,543,    },0.00027,0,,0
org/joda/time/DateTimeZone,8,554,        NameProvider nameProvider = null;,0.00027,0,,0
org/joda/time/DateTimeZone,8,556,"            String providerClass = System.getProperty(""org.joda.time.DateTimeZone.NameProvider"");",0.00027,0,,0
org/joda/time/DateTimeZone,8,557,            if (providerClass != null) {,0.00027,0,,0
org/joda/time/DateTimeZone,8,567,        },0.00027,0,,0
org/joda/time/DateTimeZone,8,569,        if (nameProvider == null) {,0.00027,0,,0
org/joda/time/DateTimeZone,8,570,            nameProvider = new DefaultNameProvider();,0.00027,0,,0
org/joda/time/DateTimeZone,8,573,        return nameProvider;,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,82,"        this(resourcePath, null, false);",0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,83,    },0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,106,    {,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,107,        if (resourcePath == null) {,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,110,"        if (!resourcePath.endsWith(""/"")) {",0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,111,            resourcePath += '/';,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,114,        iFileDir = null;,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,115,        iResourcePath = resourcePath;,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,117,        if (loader == null && !favorSystemLoader) {,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,118,            loader = getClass().getClassLoader();,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,121,        iLoader = loader;,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,123,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,124,    },0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,136,        if (id == null) {,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,140,        Object obj = iZoneInfoMap.get(id);,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,141,        if (obj == null) {,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,145,        if (id.equals(obj)) {,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,150,        if (obj instanceof SoftReference<?>) {,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,152,            SoftReference<DateTimeZone> ref = (SoftReference<DateTimeZone>) obj;,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,153,            DateTimeZone tz = ref.get();,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,154,            if (tz != null) {,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,155,                return tz;,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,174,        return new TreeSet<String>(iZoneInfoMap.keySet());,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,196,        if (iFileDir != null) {,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,199,            String path = iResourcePath.concat(name);,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,200,            if (iLoader != null) {,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,201,                in = iLoader.getResourceAsStream(path);,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,205,            if (in == null) {,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,214,        return in;,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,252,"        Map<String, Object> map = new ConcurrentHashMap<String, Object>();",0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,253,        DataInputStream din = new DataInputStream(in);,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,255,"            readZoneInfoMap(din, map);",0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,258,                din.close();,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,260,            },0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,262,"        map.put(""UTC"", new SoftReference<DateTimeZone>(DateTimeZone.UTC));",0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,263,        return map;,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,274,        int size = din.readUnsignedShort();,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,275,        String[] pool = new String[size];,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,276,        for (int i=0; i<size; i++) {,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,277,            pool[i] = din.readUTF().intern();,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,281,        size = din.readUnsignedShort();,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,282,        for (int i=0; i<size; i++) {,0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,284,"                zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);",0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,287,            },0.00027,0,,0
org/joda/time/tz/ZoneInfoProvider,8,289,    },0.00027,0,,0
org/joda/time/tz/FixedDateTimeZone,8,38,        super(id);,0.00027,0,,0
org/joda/time/tz/FixedDateTimeZone,8,39,        iNameKey = nameKey;,0.00027,0,,0
org/joda/time/tz/FixedDateTimeZone,8,40,        iWallOffset = wallOffset;,0.00027,0,,0
org/joda/time/tz/FixedDateTimeZone,8,41,        iStandardOffset = standardOffset;,0.00027,0,,0
org/joda/time/tz/FixedDateTimeZone,8,42,    },0.00027,0,,0
org/joda/time/tz/FixedDateTimeZone,8,88,        if (this == obj) {,0.00027,0,,0
org/joda/time/tz/FixedDateTimeZone,8,89,            return true;,0.00027,0,,0
org/joda/time/tz/DefaultNameProvider,8,39,    public DefaultNameProvider() {,0.00027,0,,0
org/joda/time/tz/DefaultNameProvider,8,37,"    private HashMap<Locale, Map<String, Map<String, Object>>> iByLocaleCache = createCache();",0.00027,0,,0
org/joda/time/tz/DefaultNameProvider,8,40,    },0.00027,0,,0
org/joda/time/tz/DefaultNameProvider,8,99,        return new HashMap(7);,0.00027,0,,0
org/joda/time/DateTimeUtils,8,569,        OffsetMillisProvider(long offsetMillis) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,570,            iMillis = offsetMillis;,0.0,0,,0
org/joda/time/DateTimeUtils,8,571,        },0.0,0,,0
org/joda/time/DateTimeUtils,8,578,            return System.currentTimeMillis() + iMillis;,0.0,0,,0
org/joda/time/DateTimeUtils,8,73,        super();,0.0,0,,0
org/joda/time/DateTimeUtils,8,74,    },0.0,0,,0
org/joda/time/DateTimeUtils,8,64,        } catch (RuntimeException ex) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,86,        return cMillisProvider.getMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,8,98,        checkPermission();,0.0,0,,0
org/joda/time/DateTimeUtils,8,99,        cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0,0,,0
org/joda/time/DateTimeUtils,8,100,    },0.0,0,,0
org/joda/time/DateTimeUtils,8,112,        checkPermission();,0.0,0,,0
org/joda/time/DateTimeUtils,8,113,        cMillisProvider = new FixedMillisProvider(fixedMillis);,0.0,0,,0
org/joda/time/DateTimeUtils,8,114,    },0.0,0,,0
org/joda/time/DateTimeUtils,8,127,        checkPermission();,0.0,0,,0
org/joda/time/DateTimeUtils,8,128,        if (offsetMillis == 0) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,129,            cMillisProvider = SYSTEM_MILLIS_PROVIDER;,0.0,0,,0
org/joda/time/DateTimeUtils,8,131,            cMillisProvider = new OffsetMillisProvider(offsetMillis);,0.0,0,,0
org/joda/time/DateTimeUtils,8,133,    },0.0,0,,0
org/joda/time/DateTimeUtils,8,146,        if (millisProvider == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,147,"            throw new IllegalArgumentException(""The MillisProvider must not be null"");",0.0,0,,0
org/joda/time/DateTimeUtils,8,149,        checkPermission();,0.0,0,,0
org/joda/time/DateTimeUtils,8,150,        cMillisProvider = millisProvider;,0.0,0,,0
org/joda/time/DateTimeUtils,8,151,    },0.0,0,,0
org/joda/time/DateTimeUtils,8,159,        SecurityManager sm = System.getSecurityManager();,0.0,0,,0
org/joda/time/DateTimeUtils,8,160,        if (sm != null) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,161,"            sm.checkPermission(new JodaTimePermission(""CurrentTime.setProvider""));",0.0,0,,0
org/joda/time/DateTimeUtils,8,163,    },0.0,0,,0
org/joda/time/DateTimeUtils,8,176,        if (instant == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,177,            return DateTimeUtils.currentTimeMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,8,179,        return instant.getMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,8,194,        if (instant == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,195,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,8,197,        Chronology chrono = instant.getChronology();,0.0,0,,0
org/joda/time/DateTimeUtils,8,198,        if (chrono == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,199,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,8,201,        return chrono;,0.0,0,,0
org/joda/time/DateTimeUtils,8,217,        Chronology chrono = null;,0.0,0,,0
org/joda/time/DateTimeUtils,8,218,        if (start != null) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,219,            chrono = start.getChronology();,0.0,0,,0
org/joda/time/DateTimeUtils,8,220,        } else if (end != null) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,221,            chrono = end.getChronology();,0.0,0,,0
org/joda/time/DateTimeUtils,8,223,        if (chrono == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,224,            chrono = ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,8,226,        return chrono;,0.0,0,,0
org/joda/time/DateTimeUtils,8,241,        if (interval == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,242,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,8,244,        Chronology chrono = interval.getChronology();,0.0,0,,0
org/joda/time/DateTimeUtils,8,245,        if (chrono == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,246,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,8,248,        return chrono;,0.0,0,,0
org/joda/time/DateTimeUtils,8,264,        if (interval == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,265,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,8,266,"            interval = new Interval(now, now);",0.0,0,,0
org/joda/time/DateTimeUtils,8,268,        return interval;,0.0,0,,0
org/joda/time/DateTimeUtils,8,283,            return ISOChronology.getInstance();,0.0,0,,0
org/joda/time/DateTimeUtils,8,299,        if (zone == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,300,            return DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/DateTimeUtils,8,302,        return zone;,0.0,0,,0
org/joda/time/DateTimeUtils,8,316,        if (type == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,317,            return PeriodType.standard();,0.0,0,,0
org/joda/time/DateTimeUtils,8,319,        return type;,0.0,0,,0
org/joda/time/DateTimeUtils,8,333,        if (duration == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,334,            return 0L;,0.0,0,,0
org/joda/time/DateTimeUtils,8,336,        return duration.getMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,8,364,        if (partial == null) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,365,"            throw new IllegalArgumentException(""Partial must not be null"");",0.0,0,,0
org/joda/time/DateTimeUtils,8,367,        DurationFieldType lastType = null;,0.0,0,,0
org/joda/time/DateTimeUtils,8,368,        for (int i = 0; i < partial.size(); i++) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,369,            DateTimeField loopField = partial.getField(i);,0.0,0,,0
org/joda/time/DateTimeUtils,8,370,            if (i > 0) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,371,                if (loopField.getRangeDurationField().getType() != lastType) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,372,                    return false;,0.0,0,,0
org/joda/time/DateTimeUtils,8,375,            lastType = loopField.getDurationField().getType();,0.0,0,,0
org/joda/time/DateTimeUtils,8,377,        return true;,0.0,0,,0
org/joda/time/DateTimeUtils,8,395,"            Method method = DateFormatSymbols.class.getMethod(""getInstance"", new Class[] {Locale.class});",0.0,0,,0
org/joda/time/DateTimeUtils,8,396,"            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});",0.0,0,,0
org/joda/time/DateTimeUtils,8,397,        } catch (Exception ex) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,398,            return new DateFormatSymbols(locale);,0.0,0,,0
org/joda/time/DateTimeUtils,8,427,        return cZoneNames;,0.0,0,,0
org/joda/time/DateTimeUtils,8,439,"        cZoneNames = Collections.unmodifiableMap(new HashMap<String, DateTimeZone>(names));",0.0,0,,0
org/joda/time/DateTimeUtils,8,440,    },0.0,0,,0
org/joda/time/DateTimeUtils,8,466,        double epochDay = epochMillis / 86400000d;,0.0,0,,0
org/joda/time/DateTimeUtils,8,467,        return epochDay + 2440587.5d;,0.0,0,,0
org/joda/time/DateTimeUtils,8,486,        return (long) Math.floor(toJulianDay(epochMillis) + 0.5d);,0.0,0,,0
org/joda/time/DateTimeUtils,8,499,        double epochDay = julianDay - 2440587.5d;,0.0,0,,0
org/joda/time/DateTimeUtils,8,500,        return (long) (epochDay * 86400000d);,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,108,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,109,        iDateTimeFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,110,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,111,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,112,        iNumberValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,113,        iStringValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,114,        iLowerBound = lowerBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,115,        iUpperBound = upperBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,116,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,117,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,8,129,"        super(createMessage(fieldType.getName(), value, null, null, explain));",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,130,        iDateTimeFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,131,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,132,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,133,        iNumberValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,134,        iStringValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,135,        iLowerBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,136,        iUpperBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,137,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,138,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,8,150,"        super(createMessage(fieldType.getName(), value, lowerBound, upperBound, null));",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,151,        iDateTimeFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,152,        iDurationFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,153,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,154,        iNumberValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,155,        iStringValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,156,        iLowerBound = lowerBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,157,        iUpperBound = upperBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,158,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,159,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,8,171,"        super(createMessage(fieldName, value, lowerBound, upperBound, null));",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,172,        iDateTimeFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,173,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,174,        iFieldName = fieldName;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,175,        iNumberValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,176,        iStringValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,177,        iLowerBound = lowerBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,178,        iUpperBound = upperBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,179,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,180,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,8,189,"        super(createMessage(fieldType.getName(), value));",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,190,        iDateTimeFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,191,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,192,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,193,        iStringValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,194,        iNumberValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,195,        iLowerBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,196,        iUpperBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,197,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,198,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,8,207,"        super(createMessage(fieldType.getName(), value));",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,208,        iDateTimeFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,209,        iDurationFieldType = fieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,210,        iFieldName = fieldType.getName();,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,211,        iStringValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,212,        iNumberValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,213,        iLowerBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,214,        iUpperBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,215,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,216,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,8,225,"        super(createMessage(fieldName, value));",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,226,        iDateTimeFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,227,        iDurationFieldType = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,228,        iFieldName = fieldName;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,229,        iStringValue = value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,230,        iNumberValue = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,231,        iLowerBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,232,        iUpperBound = null;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,233,        iMessage = super.getMessage();,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,234,    },0.0,0,,0
org/joda/time/IllegalFieldValueException,8,41,        StringBuilder buf = new StringBuilder(),0.0,0,,0
org/joda/time/IllegalFieldValueException,8,44,        if (lowerBound == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,45,            if (upperBound == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,46,"                buf.append(""is not supported"");",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,48,"                buf.append(""must not be larger than "").append(upperBound);",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,50,        } else if (upperBound == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,51,"            buf.append(""must not be smaller than "").append(lowerBound);",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,53,"            buf.append(""must be in the range ["")",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,59,        if (explain != null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,60,"            buf.append("": "").append(explain);",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,63,        return buf.toString();,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,74,"        StringBuffer buf = new StringBuffer().append(""Value "");",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,76,        if (value == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,77,"            buf.append(""null"");",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,79,"            buf.append('""');",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,80,            buf.append(value);,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,81,"            buf.append('""');",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,84,"        buf.append("" for "").append(fieldName).append(' ').append(""is not supported"");",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,86,        return buf.toString();,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,243,        return iDateTimeFieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,252,        return iDurationFieldType;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,261,        return iFieldName;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,270,        return iNumberValue;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,279,        return iStringValue;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,288,        String value = iStringValue;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,289,        if (value == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,290,            value = String.valueOf(iNumberValue);,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,292,        return value;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,301,        return iLowerBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,310,        return iUpperBound;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,314,        return iMessage;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,323,        if (iMessage == null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,324,            iMessage = message;,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,325,        } else if (message != null) {,0.0,0,,0
org/joda/time/IllegalFieldValueException,8,326,"            iMessage = message + "": "" + iMessage;",0.0,0,,0
org/joda/time/IllegalFieldValueException,8,328,    },0.0,0,,0
org/joda/time/DateTimeZone,8,637,                return this;,0.0,0,,0
org/joda/time/DateTimeZone,8,640,                return getClass().getName();,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,102,"        long instant = year().set(0, year);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,103,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,104,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,105,"        return millisOfDay().set(instant, millisOfDay);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,132,"        long instant = year().set(0, year);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,133,"        instant = monthOfYear().set(instant, monthOfYear);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,134,"        instant = dayOfMonth().set(instant, dayOfMonth);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,135,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,136,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,137,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,138,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,163,"        instant = hourOfDay().set(instant, hourOfDay);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,164,"        instant = minuteOfHour().set(instant, minuteOfHour);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,165,"        instant = secondOfMinute().set(instant, secondOfMinute);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,166,"        return millisOfSecond().set(instant, millisOfSecond);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,183,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,184,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,185,            int value = values[i];,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,186,            DateTimeField field = partial.getField(i);,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,187,            if (value < field.getMinimumValue()) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,188,                throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,192,            if (value > field.getMaximumValue()) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,193,                throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,199,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,200,            int value = values[i];,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,201,            DateTimeField field = partial.getField(i);,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,202,"            if (value < field.getMinimumValue(partial, values)) {",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,203,                throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,207,"            if (value > field.getMaximumValue(partial, values)) {",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,208,                throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,213,    },0.0,0,,0
org/joda/time/chrono/BaseChronology,8,223,        int size = partial.size();,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,224,        int[] values = new int[size];,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,225,        for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,226,            values[i] = partial.getFieldType(i).getField(this).get(instant);,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,228,        return values;,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,239,"        for (int i = 0, isize = partial.size(); i < isize; i++) {",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,240,"            instant = partial.getFieldType(i).getField(this).set(instant, partial.getValue(i));",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,242,        return instant;,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,255,        int size = period.size();,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,256,        int[] values = new int[size];,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,257,        if (startInstant != endInstant) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,258,            for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,259,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,260,"                int value = field.getDifference(endInstant, startInstant);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,261,"                startInstant = field.add(startInstant, value);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,262,                values[i] = value;,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,265,        return values;,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,276,        int size = period.size();,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,277,        int[] values = new int[size];,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,278,        if (duration != 0) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,279,            long current = 0;,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,280,            for (int i = 0; i < size; i++) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,281,                DurationField field = period.getFieldType(i).getField(this);,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,282,                if (field.isPrecise()) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,283,"                    int value = field.getDifference(duration, current);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,284,"                    current = field.add(current, value);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,285,                    values[i] = value;,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,289,        return values;,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,301,        if (scalar != 0 && period != null) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,302,"            for (int i = 0, isize = period.size(); i < isize; i++) {",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,303,                long value = period.getValue(i); // use long to allow for multiplication (fits OK),0.0,0,,0
org/joda/time/chrono/BaseChronology,8,304,                if (value != 0) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,305,"                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,309,        return instant;,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,322,        if (duration == 0 || scalar == 0) {,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,323,            return instant;,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,325,"        long add = FieldUtils.safeMultiply(duration, scalar);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,326,"        return FieldUtils.safeAdd(instant, add);",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,337,        return UnsupportedDurationField.getInstance(DurationFieldType.millis());,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,346,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfSecond(), millis());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,355,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.millisOfDay(), millis());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,366,        return UnsupportedDurationField.getInstance(DurationFieldType.seconds());,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,375,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfMinute(), seconds());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,384,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.secondOfDay(), seconds());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,395,        return UnsupportedDurationField.getInstance(DurationFieldType.minutes());,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,404,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfHour(), minutes());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,413,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.minuteOfDay(), minutes());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,424,        return UnsupportedDurationField.getInstance(DurationFieldType.hours());,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,433,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfDay(), hours());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,442,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,453,        return UnsupportedDurationField.getInstance(DurationFieldType.halfdays());,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,462,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.hourOfHalfday(), hours());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,471,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfHalfday(), hours());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,480,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.halfdayOfDay(), halfdays());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,491,        return UnsupportedDurationField.getInstance(DurationFieldType.days());,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,504,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfWeek(), days());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,513,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfMonth(), days());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,522,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.dayOfYear(), days());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,533,        return UnsupportedDurationField.getInstance(DurationFieldType.weeks());,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,542,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,553,        return UnsupportedDurationField.getInstance(DurationFieldType.weekyears());,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,562,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,571,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,582,        return UnsupportedDurationField.getInstance(DurationFieldType.months());,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,591,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.monthOfYear(), months());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,602,        return UnsupportedDurationField.getInstance(DurationFieldType.years());,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,611,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.year(), years());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,620,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfEra(), years());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,629,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,640,        return UnsupportedDurationField.getInstance(DurationFieldType.centuries());,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,649,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());",0.0,0,,0
org/joda/time/chrono/BaseChronology,8,660,        return UnsupportedDurationField.getInstance(DurationFieldType.eras());,0.0,0,,0
org/joda/time/chrono/BaseChronology,8,669,"        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());",0.0,0,,0
org/joda/time/DateTimeZone,8,716,"            throw new IllegalArgumentException(""Id must not be null"");",0.0,0,,0
org/joda/time/DateTimeZone,8,146,                        } catch (RuntimeException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,8,150,                            temp = forTimeZone(TimeZone.getDefault());,0.0,0,,0
org/joda/time/DateTimeZone,8,152,                    } catch (IllegalArgumentException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,8,156,                        temp = UTC;,0.0,0,,0
org/joda/time/DateTimeZone,8,177,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setDefault""));",0.0,0,,0
org/joda/time/DateTimeZone,8,180,"            throw new IllegalArgumentException(""The datetime zone must not be null"");",0.0,0,,0
org/joda/time/DateTimeZone,8,206,            return getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,8,209,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,8,224,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,,0
org/joda/time/DateTimeZone,8,238,"        return forOffsetHoursMinutes(hoursOffset, 0);",0.0,0,,0
org/joda/time/DateTimeZone,8,277,"            throw new IllegalArgumentException(""Hours out of range: "" + hoursOffset);",0.0,0,,0
org/joda/time/DateTimeZone,8,280,"            throw new IllegalArgumentException(""Minutes out of range: "" + minutesOffset);",0.0,0,,0
org/joda/time/DateTimeZone,8,286,                minutesOffset = hoursInMinutes - minutesOffset;,0.0,1,,0
org/joda/time/DateTimeZone,8,291,        } catch (ArithmeticException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,8,292,"            throw new IllegalArgumentException(""Offset is too large"");",0.0,0,,0
org/joda/time/DateTimeZone,8,305,"            throw new IllegalArgumentException(""Millis out of range: "" + millisOffset);",0.0,0,,0
org/joda/time/DateTimeZone,8,327,        if (zone == null) {,0.0,0,,0
org/joda/time/DateTimeZone,8,328,            return getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,8,330,        final String id = zone.getID();,0.0,0,,0
org/joda/time/DateTimeZone,8,331,"        if (id.equals(""UTC"")) {",0.0,0,,0
org/joda/time/DateTimeZone,8,332,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,8,336,        DateTimeZone dtz = null;,0.0,0,,0
org/joda/time/DateTimeZone,8,337,        String convId = getConvertedId(id);,0.0,0,,0
org/joda/time/DateTimeZone,8,338,        if (convId != null) {,0.0,0,,0
org/joda/time/DateTimeZone,8,339,            dtz = cProvider.getZone(convId);,0.0,0,,0
org/joda/time/DateTimeZone,8,341,        if (dtz == null) {,0.0,0,,0
org/joda/time/DateTimeZone,8,342,            dtz = cProvider.getZone(id);,0.0,0,,0
org/joda/time/DateTimeZone,8,344,        if (dtz != null) {,0.0,0,,0
org/joda/time/DateTimeZone,8,345,            return dtz;,0.0,0,,0
org/joda/time/DateTimeZone,8,349,        if (convId == null) {,0.0,0,,0
org/joda/time/DateTimeZone,8,350,            convId = zone.getID();,0.0,0,,0
org/joda/time/DateTimeZone,8,351,"            if (convId.startsWith(""GMT+"") || convId.startsWith(""GMT-"")) {",0.0,0,,0
org/joda/time/DateTimeZone,8,352,                convId = convId.substring(3);,0.0,0,,0
org/joda/time/DateTimeZone,8,353,                int offset = parseOffset(convId);,0.0,0,,0
org/joda/time/DateTimeZone,8,354,                if (offset == 0L) {,0.0,0,,0
org/joda/time/DateTimeZone,8,355,                    return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,8,357,                    convId = printOffset(offset);,0.0,0,,0
org/joda/time/DateTimeZone,8,358,"                    return fixedOffsetZone(convId, offset);",0.0,0,,0
org/joda/time/DateTimeZone,8,362,"        throw new IllegalArgumentException(""The datetime zone id '"" + id + ""' is not recognised"");",0.0,0,,0
org/joda/time/DateTimeZone,8,375,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/DateTimeZone,8,399,        return cAvailableIDs;,0.0,0,,0
org/joda/time/DateTimeZone,8,412,        return cProvider;,0.0,0,,0
org/joda/time/DateTimeZone,8,426,        SecurityManager sm = System.getSecurityManager();,0.0,0,,0
org/joda/time/DateTimeZone,8,427,        if (sm != null) {,0.0,0,,0
org/joda/time/DateTimeZone,8,428,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setProvider""));",0.0,0,,0
org/joda/time/DateTimeZone,8,430,        setProvider0(provider);,0.0,0,,0
org/joda/time/DateTimeZone,8,431,    },0.0,0,,0
org/joda/time/DateTimeZone,8,445,            throw new IllegalArgumentException,0.0,0,,0
org/joda/time/DateTimeZone,8,449,"            throw new IllegalArgumentException(""The provider doesn't support UTC"");",0.0,0,,0
org/joda/time/DateTimeZone,8,452,"            throw new IllegalArgumentException(""Invalid UTC zone provided"");",0.0,0,,0
org/joda/time/DateTimeZone,8,475,                    provider = (Provider) Class.forName(providerClass).newInstance();,0.0,0,,0
org/joda/time/DateTimeZone,8,479,                },0.0,0,,0
org/joda/time/DateTimeZone,8,476,                } catch (Exception ex) {,0.0,0,,0
org/joda/time/DateTimeZone,8,477,                    Thread thread = Thread.currentThread();,0.0,0,,0
org/joda/time/DateTimeZone,8,478,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,,0
org/joda/time/DateTimeZone,8,481,        } catch (SecurityException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,8,488,            } catch (Exception ex) {,0.0,0,,0
org/joda/time/DateTimeZone,8,489,                Thread thread = Thread.currentThread();,0.0,0,,0
org/joda/time/DateTimeZone,8,490,"                thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,,0
org/joda/time/DateTimeZone,8,495,            provider = new UTCProvider();,0.0,0,,0
org/joda/time/DateTimeZone,8,511,        return cNameProvider;,0.0,0,,0
org/joda/time/DateTimeZone,8,525,        SecurityManager sm = System.getSecurityManager();,0.0,0,,0
org/joda/time/DateTimeZone,8,526,        if (sm != null) {,0.0,0,,0
org/joda/time/DateTimeZone,8,527,"            sm.checkPermission(new JodaTimePermission(""DateTimeZone.setNameProvider""));",0.0,0,,0
org/joda/time/DateTimeZone,8,529,        setNameProvider0(nameProvider);,0.0,0,,0
org/joda/time/DateTimeZone,8,530,    },0.0,0,,0
org/joda/time/DateTimeZone,8,559,                    nameProvider = (NameProvider) Class.forName(providerClass).newInstance();,0.0,0,,0
org/joda/time/DateTimeZone,8,563,                },0.0,0,,0
org/joda/time/DateTimeZone,8,560,                } catch (Exception ex) {,0.0,0,,0
org/joda/time/DateTimeZone,8,561,                    Thread thread = Thread.currentThread();,0.0,0,,0
org/joda/time/DateTimeZone,8,562,"                    thread.getThreadGroup().uncaughtException(thread, ex);",0.0,0,,0
org/joda/time/DateTimeZone,8,565,        } catch (SecurityException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,8,584,"        Map<String, String> map = cZoneIdConversion;",0.0,0,,0
org/joda/time/DateTimeZone,8,585,        if (map == null) {,0.0,0,,0
org/joda/time/DateTimeZone,8,587,"            map = new HashMap<String, String>();",0.0,0,,0
org/joda/time/DateTimeZone,8,588,"            map.put(""GMT"", ""UTC"");",0.0,0,,0
org/joda/time/DateTimeZone,8,589,"            map.put(""WET"", ""WET"");",0.0,0,,0
org/joda/time/DateTimeZone,8,590,"            map.put(""CET"", ""CET"");",0.0,0,,0
org/joda/time/DateTimeZone,8,591,"            map.put(""MET"", ""CET"");",0.0,0,,0
org/joda/time/DateTimeZone,8,592,"            map.put(""ECT"", ""CET"");",0.0,0,,0
org/joda/time/DateTimeZone,8,593,"            map.put(""EET"", ""EET"");",0.0,0,,0
org/joda/time/DateTimeZone,8,594,"            map.put(""MIT"", ""Pacific/Apia"");",0.0,0,,0
org/joda/time/DateTimeZone,8,595,"            map.put(""HST"", ""Pacific/Honolulu"");  // JDK 1.1 compatible",0.0,0,,0
org/joda/time/DateTimeZone,8,596,"            map.put(""AST"", ""America/Anchorage"");",0.0,0,,0
org/joda/time/DateTimeZone,8,597,"            map.put(""PST"", ""America/Los_Angeles"");",0.0,0,,0
org/joda/time/DateTimeZone,8,598,"            map.put(""MST"", ""America/Denver"");  // JDK 1.1 compatible",0.0,0,,0
org/joda/time/DateTimeZone,8,599,"            map.put(""PNT"", ""America/Phoenix"");",0.0,0,,0
org/joda/time/DateTimeZone,8,600,"            map.put(""CST"", ""America/Chicago"");",0.0,0,,0
org/joda/time/DateTimeZone,8,601,"            map.put(""EST"", ""America/New_York"");  // JDK 1.1 compatible",0.0,0,,0
org/joda/time/DateTimeZone,8,602,"            map.put(""IET"", ""America/Indiana/Indianapolis"");",0.0,0,,0
org/joda/time/DateTimeZone,8,603,"            map.put(""PRT"", ""America/Puerto_Rico"");",0.0,0,,0
org/joda/time/DateTimeZone,8,604,"            map.put(""CNT"", ""America/St_Johns"");",0.0,0,,0
org/joda/time/DateTimeZone,8,605,"            map.put(""AGT"", ""America/Argentina/Buenos_Aires"");",0.0,0,,0
org/joda/time/DateTimeZone,8,606,"            map.put(""BET"", ""America/Sao_Paulo"");",0.0,0,,0
org/joda/time/DateTimeZone,8,607,"            map.put(""ART"", ""Africa/Cairo"");",0.0,0,,0
org/joda/time/DateTimeZone,8,608,"            map.put(""CAT"", ""Africa/Harare"");",0.0,0,,0
org/joda/time/DateTimeZone,8,609,"            map.put(""EAT"", ""Africa/Addis_Ababa"");",0.0,0,,0
org/joda/time/DateTimeZone,8,610,"            map.put(""NET"", ""Asia/Yerevan"");",0.0,0,,0
org/joda/time/DateTimeZone,8,611,"            map.put(""PLT"", ""Asia/Karachi"");",0.0,0,,0
org/joda/time/DateTimeZone,8,612,"            map.put(""IST"", ""Asia/Kolkata"");",0.0,0,,0
org/joda/time/DateTimeZone,8,613,"            map.put(""BST"", ""Asia/Dhaka"");",0.0,0,,0
org/joda/time/DateTimeZone,8,614,"            map.put(""VST"", ""Asia/Ho_Chi_Minh"");",0.0,0,,0
org/joda/time/DateTimeZone,8,615,"            map.put(""CTT"", ""Asia/Shanghai"");",0.0,0,,0
org/joda/time/DateTimeZone,8,616,"            map.put(""JST"", ""Asia/Tokyo"");",0.0,0,,0
org/joda/time/DateTimeZone,8,617,"            map.put(""ACT"", ""Australia/Darwin"");",0.0,0,,0
org/joda/time/DateTimeZone,8,618,"            map.put(""AET"", ""Australia/Sydney"");",0.0,0,,0
org/joda/time/DateTimeZone,8,619,"            map.put(""SST"", ""Pacific/Guadalcanal"");",0.0,0,,0
org/joda/time/DateTimeZone,8,620,"            map.put(""NST"", ""Pacific/Auckland"");",0.0,0,,0
org/joda/time/DateTimeZone,8,621,            cZoneIdConversion = map;,0.0,0,,0
org/joda/time/DateTimeZone,8,623,        return map.get(id);,0.0,0,,0
org/joda/time/DateTimeZone,8,676,        int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/DateTimeZone,8,677,        buf.append(':');,0.0,0,,0
org/joda/time/DateTimeZone,8,678,"        FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,,0
org/joda/time/DateTimeZone,8,679,        offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/DateTimeZone,8,680,        if (offset == 0) {,0.0,0,,0
org/joda/time/DateTimeZone,8,681,            return buf.toString();,0.0,0,,0
org/joda/time/DateTimeZone,8,684,        buf.append('.');,0.0,0,,0
org/joda/time/DateTimeZone,8,685,"        FormatUtils.appendPaddedInteger(buf, offset, 3);",0.0,0,,0
org/joda/time/DateTimeZone,8,686,        return buf.toString();,0.0,0,,0
org/joda/time/DateTimeZone,8,754,"        return getShortName(instant, null);",0.0,0,,0
org/joda/time/DateTimeZone,8,769,        if (locale == null) {,0.0,0,,0
org/joda/time/DateTimeZone,8,770,            locale = Locale.getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,8,772,        String nameKey = getNameKey(instant);,0.0,0,,0
org/joda/time/DateTimeZone,8,773,        if (nameKey == null) {,0.0,0,,0
org/joda/time/DateTimeZone,8,774,            return iID;,0.0,0,,0
org/joda/time/DateTimeZone,8,776,"        String name = cNameProvider.getShortName(locale, iID, nameKey);",0.0,0,,0
org/joda/time/DateTimeZone,8,777,        if (name != null) {,0.0,0,,0
org/joda/time/DateTimeZone,8,778,            return name;,0.0,0,,0
org/joda/time/DateTimeZone,8,780,        return printOffset(getOffset(instant));,0.0,0,,0
org/joda/time/DateTimeZone,8,794,"        return getName(instant, null);",0.0,0,,0
org/joda/time/DateTimeZone,8,809,        if (locale == null) {,0.0,0,,0
org/joda/time/DateTimeZone,8,810,            locale = Locale.getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,8,812,        String nameKey = getNameKey(instant);,0.0,0,,0
org/joda/time/DateTimeZone,8,813,        if (nameKey == null) {,0.0,0,,0
org/joda/time/DateTimeZone,8,814,            return iID;,0.0,0,,0
org/joda/time/DateTimeZone,8,816,"        String name = cNameProvider.getName(locale, iID, nameKey);",0.0,0,,0
org/joda/time/DateTimeZone,8,817,        if (name != null) {,0.0,0,,0
org/joda/time/DateTimeZone,8,818,            return name;,0.0,0,,0
org/joda/time/DateTimeZone,8,820,        return printOffset(getOffset(instant));,0.0,0,,0
org/joda/time/DateTimeZone,8,838,        if (instant == null) {,0.0,0,,0
org/joda/time/DateTimeZone,8,839,            return getOffset(DateTimeUtils.currentTimeMillis());,0.0,0,,0
org/joda/time/DateTimeZone,8,841,        return getOffset(instant.getMillis());,0.0,0,,0
org/joda/time/DateTimeZone,8,869,        return getOffset(instant) == getStandardOffset(instant);,0.0,0,,0
org/joda/time/DateTimeZone,8,907,        final int offsetLocal = getOffset(instantLocal);,0.0,0,,0
org/joda/time/DateTimeZone,8,909,        final long instantAdjusted = instantLocal - offsetLocal;,0.0,0,,0
org/joda/time/DateTimeZone,8,910,        final int offsetAdjusted = getOffset(instantAdjusted);,0.0,0,,0
org/joda/time/DateTimeZone,8,912,        if (offsetLocal != offsetAdjusted) {,0.0,0,,0
org/joda/time/DateTimeZone,8,915,            if ((offsetLocal - offsetAdjusted) < 0) {,0.0,0,,0
org/joda/time/DateTimeZone,8,919,                long nextLocal = nextTransition(instantAdjusted);,0.0,0,,0
org/joda/time/DateTimeZone,8,920,                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);,0.0,0,,0
org/joda/time/DateTimeZone,8,921,                if (nextLocal != nextAdjusted) {,0.0,0,,0
org/joda/time/DateTimeZone,8,922,                    return offsetLocal;,0.0,0,,0
org/joda/time/DateTimeZone,8,924,            },0.0,0,,0
org/joda/time/DateTimeZone,8,925,        } else if (offsetLocal >= 0) {,0.0,0,,0
org/joda/time/DateTimeZone,8,926,            long prev = previousTransition(instantAdjusted);,0.0,0,,0
org/joda/time/DateTimeZone,8,927,            if (prev < instantAdjusted) {,0.0,0,,0
org/joda/time/DateTimeZone,8,928,                int offsetPrev = getOffset(prev);,0.0,0,,0
org/joda/time/DateTimeZone,8,929,                int diff = offsetPrev - offsetLocal;,0.0,0,,0
org/joda/time/DateTimeZone,8,930,                if (instantAdjusted - prev <= diff) {,0.0,0,,0
org/joda/time/DateTimeZone,8,931,                    return offsetPrev;,0.0,0,,0
org/joda/time/DateTimeZone,8,935,        return offsetAdjusted;,0.0,0,,0
org/joda/time/DateTimeZone,8,949,        int offset = getOffset(instantUTC);,0.0,0,,0
org/joda/time/DateTimeZone,8,950,        long instantLocal = instantUTC + offset;,0.0,0,,0
org/joda/time/DateTimeZone,8,952,        if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {,0.0,0,,0
org/joda/time/DateTimeZone,8,953,"            throw new ArithmeticException(""Adding time zone offset caused overflow"");",0.0,0,,0
org/joda/time/DateTimeZone,8,955,        return instantLocal;,0.0,0,,0
org/joda/time/DateTimeZone,8,976,        int offsetOriginal = getOffset(originalInstantUTC);,0.0,0,,0
org/joda/time/DateTimeZone,8,977,        long instantUTC = instantLocal - offsetOriginal;,0.0,0,,0
org/joda/time/DateTimeZone,8,978,        int offsetLocalFromOriginal = getOffset(instantUTC);,0.0,0,,0
org/joda/time/DateTimeZone,8,979,        if (offsetLocalFromOriginal == offsetOriginal) {,0.0,0,,0
org/joda/time/DateTimeZone,8,980,            return instantUTC;,0.0,0,,0
org/joda/time/DateTimeZone,8,982,"        return convertLocalToUTC(instantLocal, strict);",0.0,0,,0
org/joda/time/DateTimeZone,8,999,        int offsetLocal = getOffset(instantLocal);,0.0,0,,0
org/joda/time/DateTimeZone,8,1001,        int offset = getOffset(instantLocal - offsetLocal);,0.0,0,,0
org/joda/time/DateTimeZone,8,1003,        if (offsetLocal != offset) {,0.0,0,,0
org/joda/time/DateTimeZone,8,1007,            if (strict || offsetLocal < 0) {,0.0,0,,0
org/joda/time/DateTimeZone,8,1009,                long nextLocal = nextTransition(instantLocal - offsetLocal);,0.0,0,,0
org/joda/time/DateTimeZone,8,1010,                if (nextLocal == (instantLocal - offsetLocal)) {,0.0,0,,0
org/joda/time/DateTimeZone,8,1011,                    nextLocal = Long.MAX_VALUE;,0.0,0,,0
org/joda/time/DateTimeZone,8,1013,                long nextAdjusted = nextTransition(instantLocal - offset);,0.0,0,,0
org/joda/time/DateTimeZone,8,1014,                if (nextAdjusted == (instantLocal - offset)) {,0.0,0,,0
org/joda/time/DateTimeZone,8,1015,                    nextAdjusted = Long.MAX_VALUE;,0.0,0,,0
org/joda/time/DateTimeZone,8,1017,                if (nextLocal != nextAdjusted) {,0.0,0,,0
org/joda/time/DateTimeZone,8,1019,                    if (strict) {,0.0,0,,0
org/joda/time/DateTimeZone,8,1021,"                        throw new IllegalInstantException(instantLocal, getID());",0.0,0,,0
org/joda/time/DateTimeZone,8,1026,                        offset = offsetLocal;,0.0,0,,0
org/joda/time/DateTimeZone,8,1032,        long instantUTC = instantLocal - offset;,0.0,0,,0
org/joda/time/DateTimeZone,8,1034,        if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {,0.0,0,,0
org/joda/time/DateTimeZone,8,1035,"            throw new ArithmeticException(""Subtracting time zone offset caused overflow"");",0.0,0,,0
org/joda/time/DateTimeZone,8,1037,        return instantUTC;,0.0,0,,0
org/joda/time/DateTimeZone,8,1051,        if (newZone == null) {,0.0,0,,0
org/joda/time/DateTimeZone,8,1052,            newZone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/DateTimeZone,8,1054,        if (newZone == this) {,0.0,0,,0
org/joda/time/DateTimeZone,8,1055,            return oldInstant;,0.0,0,,0
org/joda/time/DateTimeZone,8,1057,        long instantLocal = convertUTCToLocal(oldInstant);,0.0,0,,0
org/joda/time/DateTimeZone,8,1058,"        return newZone.convertLocalToUTC(instantLocal, false, oldInstant);",0.0,0,,0
org/joda/time/DateTimeZone,8,1168,        if (isFixed()) {,0.0,0,,0
org/joda/time/DateTimeZone,8,1169,            return false;,0.0,0,,0
org/joda/time/DateTimeZone,8,1172,            localDateTime.toDateTime(this);,0.0,0,,0
org/joda/time/DateTimeZone,8,1173,            return false;,0.0,0,,0
org/joda/time/DateTimeZone,8,1174,        } catch (IllegalInstantException ex) {,0.0,0,,0
org/joda/time/DateTimeZone,8,1175,            return true;,0.0,0,,0
org/joda/time/DateTimeZone,8,1190,        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/DateTimeZone,8,1191,        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/DateTimeZone,8,1192,        long offsetBefore = getOffset(instantBefore);,0.0,0,,0
org/joda/time/DateTimeZone,8,1193,        long offsetAfter = getOffset(instantAfter);,0.0,0,,0
org/joda/time/DateTimeZone,8,1194,        if (offsetBefore <= offsetAfter) {,0.0,0,,0
org/joda/time/DateTimeZone,8,1195,"            return instant;  // not an overlap (less than is a gap, equal is normal case)",0.0,0,,0
org/joda/time/DateTimeZone,8,1199,        long diff = offsetBefore - offsetAfter;,0.0,0,,0
org/joda/time/DateTimeZone,8,1200,        long transition = nextTransition(instantBefore);,0.0,0,,0
org/joda/time/DateTimeZone,8,1201,        long overlapStart = transition - diff;,0.0,0,,0
org/joda/time/DateTimeZone,8,1202,        long overlapEnd = transition + diff;,0.0,0,,0
org/joda/time/DateTimeZone,8,1203,        if (instant < overlapStart || instant >= overlapEnd) {,0.0,0,,0
org/joda/time/DateTimeZone,8,1204,          return instant;  // not an overlap,0.0,0,,0
org/joda/time/DateTimeZone,8,1208,        long afterStart = instant - overlapStart;,0.0,0,,0
org/joda/time/DateTimeZone,8,1209,        if (afterStart >= diff) {,0.0,0,,0
org/joda/time/DateTimeZone,8,1211,          return earlierOrLater ? instant : instant - diff;,0.0,0,,0
org/joda/time/DateTimeZone,8,1214,          return earlierOrLater ? instant + diff : instant;,0.0,0,,0
org/joda/time/DateTimeZone,8,1256,        return java.util.TimeZone.getTimeZone(iID);,0.0,0,,0
org/joda/time/DateTimeZone,8,1273,        return 57 + getID().hashCode();,0.0,0,,0
org/joda/time/DateTimeZone,8,1281,        return getID();,0.0,0,,0
org/joda/time/DateTimeZone,8,1291,        return new Stub(iID);,0.0,0,,0
org/joda/time/DurationField,8,30,public abstract class DurationField implements Comparable<DurationField> {,0.0,0,,0
org/joda/time/DurationField,8,209,        if (value == Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/DurationField,8,210,"            return subtract(instant, (long) value);",0.0,0,,0
org/joda/time/DurationField,8,212,"        return add(instant, -value);",0.0,0,,0
org/joda/time/DurationField,8,224,        if (value == Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/DurationField,8,225,"            throw new ArithmeticException(""Long.MIN_VALUE cannot be negated"");",0.0,0,,0
org/joda/time/DurationField,8,227,"        return add(instant, -value);",0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,70,    private UnsupportedDurationField(DurationFieldType type) {,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,71,        iType = type;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,72,    },0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,49,        if (cCache == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,50,"            cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);",0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,51,            field = null;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,53,            field = cCache.get(type);,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,55,        if (field == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,56,            field = new UnsupportedDurationField(type);,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,57,"            cCache.put(type, field);",0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,59,        return field;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,79,        return iType;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,83,        return iType.getName();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,92,        return false;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,101,        return true;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,110,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,119,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,128,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,137,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,146,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,155,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,164,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,173,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,182,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,191,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,200,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,209,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,218,        return 0;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,227,        return 0;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,238,        if (this == obj) {,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,239,            return true;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,240,        } else if (obj instanceof UnsupportedDurationField) {,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,241,            UnsupportedDurationField other = (UnsupportedDurationField) obj;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,242,            if (other.getName() == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,243,                return (getName() == null);,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,245,            return (other.getName().equals(getName()));,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,247,        return false;,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,256,        return getName().hashCode();,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,265,"        return ""UnsupportedDurationField["" + getName() + ']';",0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,272,        return getInstance(iType);,0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,276,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,,0
org/joda/time/field/UnsupportedDurationField,8,32,public final class UnsupportedDurationField extends DurationField implements Serializable {,0.0,0,,0
org/joda/time/DateTimeField,8,33,public abstract class DateTimeField {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,82,"    private UnsupportedDateTimeField(DateTimeFieldType type, DurationField durationField) {",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,83,        if (type == null || durationField == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,84,            throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,86,        iType = type;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,87,        iDurationField = durationField;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,88,    },0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,55,        if (cCache == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,56,"            cCache = new HashMap<DateTimeFieldType, UnsupportedDateTimeField>(7);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,57,            field = null;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,59,            field = cCache.get(type);,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,60,            if (field != null && field.getDurationField() != durationField) {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,61,                field = null;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,64,        if (field == null) {,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,65,"            field = new UnsupportedDateTimeField(type, durationField);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,66,"            cCache.put(type, field);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,68,        return field;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,95,        return iType;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,99,        return iType.getName();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,108,        return false;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,117,        return false;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,126,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,135,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,144,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,153,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,162,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,171,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,180,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,189,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,198,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,207,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,216,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,225,"        return getDurationField().add(instant, value);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,234,"        return getDurationField().add(instant, value);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,243,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,252,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,261,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,270,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,279,"        return getDurationField().getDifference(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,288,"        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,297,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,306,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,315,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,324,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,333,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,343,        return iDurationField;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,352,        return null;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,361,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,370,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,379,        return null;,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,388,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,397,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,406,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,415,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,424,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,433,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,442,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,451,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,460,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,469,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,478,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,487,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,496,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,505,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,514,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,523,        throw unsupported();,0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,533,"        return ""UnsupportedDateTimeField"";",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,540,"        return getInstance(iType, iDurationField);",0.0,0,,0
org/joda/time/field/UnsupportedDateTimeField,8,544,"        return new UnsupportedOperationException(iType + "" field is unsupported"");",0.0,0,,0
org/joda/time/IllegalInstantException,8,53,        super(message);,0.0,0,,0
org/joda/time/IllegalInstantException,8,54,    },0.0,0,,0
org/joda/time/IllegalInstantException,8,63,"        super(createMessage(instantLocal, zoneId));",0.0,0,,0
org/joda/time/IllegalInstantException,8,64,    },0.0,0,,0
org/joda/time/IllegalInstantException,8,67,"        String localDateTime = DateTimeFormat.forPattern(""yyyy-MM-dd'T'HH:mm:ss.SSS"").print(new Instant(instantLocal));",0.0,0,,0
org/joda/time/IllegalInstantException,8,68,"        String zone = (zoneId != null ? "" ("" + zoneId + "")"" : """");",0.0,0,,0
org/joda/time/IllegalInstantException,8,69,"        return ""Illegal instant due to time zone offset transition (daylight savings time 'gap'): "" + localDateTime + zone;",0.0,0,,0
org/joda/time/IllegalInstantException,8,80,        if (ex instanceof IllegalInstantException) {,0.0,0,,0
org/joda/time/IllegalInstantException,8,81,            return true;,0.0,0,,0
org/joda/time/IllegalInstantException,8,83,        while (ex.getCause() != null && ex.getCause() != ex) {,0.0,0,,0
org/joda/time/IllegalInstantException,8,84,            return isIllegalInstant(ex.getCause());,0.0,0,,0
org/joda/time/IllegalInstantException,8,86,        return false;,0.0,0,,0
org/joda/time/field/FieldUtils,8,36,        super();,0.0,0,,0
org/joda/time/field/FieldUtils,8,37,    },0.0,0,,0
org/joda/time/field/FieldUtils,8,49,        if (value == Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,50,"            throw new ArithmeticException(""Integer.MIN_VALUE cannot be negated"");",0.0,0,,0
org/joda/time/field/FieldUtils,8,52,        return -value;,0.0,0,,0
org/joda/time/field/FieldUtils,8,64,        int sum = val1 + val2;,0.0,0,,0
org/joda/time/field/FieldUtils,8,66,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,67,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,8,70,        return sum;,0.0,0,,0
org/joda/time/field/FieldUtils,8,82,        long sum = val1 + val2;,0.0,0,,0
org/joda/time/field/FieldUtils,8,84,        if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,85,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,8,88,        return sum;,0.0,0,,0
org/joda/time/field/FieldUtils,8,100,        long diff = val1 - val2;,0.0,0,,0
org/joda/time/field/FieldUtils,8,102,        if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,103,            throw new ArithmeticException,0.0,0,,0
org/joda/time/field/FieldUtils,8,106,        return diff;,0.0,0,,0
org/joda/time/field/FieldUtils,8,121,"          throw new ArithmeticException(""Multiplication overflows an int: "" + val1 + "" * "" + val2);",0.0,0,,0
org/joda/time/field/FieldUtils,8,136,        switch (val2) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,138,                if (val1 == Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,139,"                    throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,,0
org/joda/time/field/FieldUtils,8,141,                return -val1;,0.0,0,,0
org/joda/time/field/FieldUtils,8,143,                return 0L;,0.0,0,,0
org/joda/time/field/FieldUtils,8,145,                return val1;,0.0,0,,0
org/joda/time/field/FieldUtils,8,147,        long total = val1 * val2;,0.0,0,,0
org/joda/time/field/FieldUtils,8,148,        if (total / val2 != val1) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,149,"          throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,,0
org/joda/time/field/FieldUtils,8,151,        return total;,0.0,0,,0
org/joda/time/field/FieldUtils,8,163,        if (val2 == 1) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,164,            return val1;,0.0,0,,0
org/joda/time/field/FieldUtils,8,166,        if (val1 == 1) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,167,            return val2;,0.0,0,,0
org/joda/time/field/FieldUtils,8,169,        if (val1 == 0 || val2 == 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,170,            return 0;,0.0,0,,0
org/joda/time/field/FieldUtils,8,172,        long total = val1 * val2;,0.0,0,,0
org/joda/time/field/FieldUtils,8,173,        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,174,"            throw new ArithmeticException(""Multiplication overflows a long: "" + val1 + "" * "" + val2);",0.0,0,,0
org/joda/time/field/FieldUtils,8,176,        return total;,0.0,0,,0
org/joda/time/field/FieldUtils,8,187,        if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,188,            return (int) value;,0.0,0,,0
org/joda/time/field/FieldUtils,8,190,"        throw new ArithmeticException(""Value cannot fit in an int: "" + value);",0.0,0,,0
org/joda/time/field/FieldUtils,8,202,"        long val = FieldUtils.safeMultiply(val1, val2);",0.0,0,,0
org/joda/time/field/FieldUtils,8,203,        return FieldUtils.safeToInt(val);,0.0,0,,0
org/joda/time/field/FieldUtils,8,217,        if ((value < lowerBound) || (value > upperBound)) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,218,            throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/field/FieldUtils,8,222,    },0.0,0,,0
org/joda/time/field/FieldUtils,8,235,        if ((value < lowerBound) || (value > upperBound)) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,236,            throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/field/FieldUtils,8,240,    },0.0,0,,0
org/joda/time/field/FieldUtils,8,252,        if ((value < lowerBound) || (value > upperBound)) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,253,            throw new IllegalFieldValueException,0.0,0,,0
org/joda/time/field/FieldUtils,8,257,    },0.0,0,,0
org/joda/time/field/FieldUtils,8,276,"        return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",0.0,0,,0
org/joda/time/field/FieldUtils,8,292,        if (minValue >= maxValue) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,293,"            throw new IllegalArgumentException(""MIN > MAX"");",0.0,0,,0
org/joda/time/field/FieldUtils,8,296,        int wrapRange = maxValue - minValue + 1;,0.0,0,,0
org/joda/time/field/FieldUtils,8,297,        value -= minValue;,0.0,0,,0
org/joda/time/field/FieldUtils,8,299,        if (value >= 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,300,            return (value % wrapRange) + minValue;,0.0,0,,0
org/joda/time/field/FieldUtils,8,303,        int remByRange = (-value) % wrapRange;,0.0,0,,0
org/joda/time/field/FieldUtils,8,305,        if (remByRange == 0) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,306,            return 0 + minValue;,0.0,0,,0
org/joda/time/field/FieldUtils,8,308,        return (wrapRange - remByRange) + minValue;,0.0,0,,0
org/joda/time/field/FieldUtils,8,321,        if (object1 == object2) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,322,            return true;,0.0,0,,0
org/joda/time/field/FieldUtils,8,324,        if (object1 == null || object2 == null) {,0.0,0,,0
org/joda/time/field/FieldUtils,8,325,            return false;,0.0,0,,0
org/joda/time/field/FieldUtils,8,327,        return object1.equals(object2);,0.0,0,,0
org/joda/time/DateTimeUtils,8,530,            return System.currentTimeMillis();,0.0,0,,0
org/joda/time/DateTimeUtils,8,545,        FixedMillisProvider(long fixedMillis) {,0.0,0,,0
org/joda/time/DateTimeUtils,8,546,            iMillis = fixedMillis;,0.0,0,,0
org/joda/time/DateTimeUtils,8,547,        },0.0,0,,0
org/joda/time/DateTimeUtils,8,554,            return iMillis;,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,216,        Stub(DateTimeZone zone) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,217,            iZone = zone;,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,218,        },0.0,0,,0
org/joda/time/chrono/ISOChronology,8,221,            return ISOChronology.getInstance(iZone);,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,225,            out.writeObject(iZone);,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,226,        },0.0,0,,0
org/joda/time/chrono/ISOChronology,8,231,            iZone = (DateTimeZone)in.readObject();,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,232,        },0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,436,        Fields() {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,437,        },0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,445,                if (isSupported(f = chrono.millis())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,446,                    millis = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,448,                if (isSupported(f = chrono.seconds())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,449,                    seconds = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,451,                if (isSupported(f = chrono.minutes())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,452,                    minutes = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,454,                if (isSupported(f = chrono.hours())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,455,                    hours = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,457,                if (isSupported(f = chrono.halfdays())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,458,                    halfdays = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,460,                if (isSupported(f = chrono.days())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,461,                    days = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,463,                if (isSupported(f = chrono.weeks())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,464,                    weeks = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,466,                if (isSupported(f = chrono.weekyears())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,467,                    weekyears = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,469,                if (isSupported(f = chrono.months())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,470,                    months = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,472,                if (isSupported(f = chrono.years())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,473,                    years = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,475,                if (isSupported(f = chrono.centuries())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,476,                    centuries = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,478,                if (isSupported(f = chrono.eras())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,479,                    eras = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,485,                if (isSupported(f = chrono.millisOfSecond())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,486,                    millisOfSecond = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,488,                if (isSupported(f = chrono.millisOfDay())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,489,                    millisOfDay = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,491,                if (isSupported(f = chrono.secondOfMinute())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,492,                    secondOfMinute = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,494,                if (isSupported(f = chrono.secondOfDay())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,495,                    secondOfDay = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,497,                if (isSupported(f = chrono.minuteOfHour())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,498,                    minuteOfHour = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,500,                if (isSupported(f = chrono.minuteOfDay())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,501,                    minuteOfDay = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,503,                if (isSupported(f = chrono.hourOfDay())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,504,                    hourOfDay = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,506,                if (isSupported(f = chrono.clockhourOfDay())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,507,                    clockhourOfDay = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,509,                if (isSupported(f = chrono.hourOfHalfday())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,510,                    hourOfHalfday = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,512,                if (isSupported(f = chrono.clockhourOfHalfday())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,513,                    clockhourOfHalfday = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,515,                if (isSupported(f = chrono.halfdayOfDay())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,516,                    halfdayOfDay = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,518,                if (isSupported(f = chrono.dayOfWeek())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,519,                    dayOfWeek = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,521,                if (isSupported(f = chrono.dayOfMonth())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,522,                    dayOfMonth = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,524,                if (isSupported(f = chrono.dayOfYear())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,525,                    dayOfYear = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,527,                if (isSupported(f = chrono.weekOfWeekyear())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,528,                    weekOfWeekyear = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,530,                if (isSupported(f = chrono.weekyear())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,531,                    weekyear = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,533,                if (isSupported(f = chrono.weekyearOfCentury())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,534,                    weekyearOfCentury = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,536,                if (isSupported(f = chrono.monthOfYear())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,537,                    monthOfYear = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,539,                if (isSupported(f = chrono.year())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,540,                    year = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,542,                if (isSupported(f = chrono.yearOfEra())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,543,                    yearOfEra = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,545,                if (isSupported(f = chrono.yearOfCentury())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,546,                    yearOfCentury = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,548,                if (isSupported(f = chrono.centuryOfEra())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,549,                    centuryOfEra = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,551,                if (isSupported(f = chrono.era())) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,552,                    era = f;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,555,        },0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,558,            return field == null ? false : field.isSupported();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,562,            return field == null ? false : field.isSupported();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,99,"    protected AssembledChronology(Chronology base, Object param) {",0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,100,        iBase = base;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,101,        iParam = param;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,102,        setFields();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,103,    },0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,107,        if ((base = iBase) != null) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,108,            return base.getZone();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,110,        return null;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,118,        if ((base = iBase) != null && (iBaseFlags & 6) == 6) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,120,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,122,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);",0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,131,        if ((base = iBase) != null && (iBaseFlags & 5) == 5) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,133,"            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,136,"        return super.getDateTimeMillis(year, monthOfYear, dayOfMonth,",0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,146,        if ((base = iBase) != null && (iBaseFlags & 1) == 1) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,148,            return base.getDateTimeMillis,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,151,        return super.getDateTimeMillis,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,156,        return iMillis;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,160,        return iMillisOfSecond;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,164,        return iMillisOfDay;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,168,        return iSeconds;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,172,        return iSecondOfMinute;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,176,        return iSecondOfDay;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,180,        return iMinutes;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,184,        return iMinuteOfHour;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,188,        return iMinuteOfDay;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,192,        return iHours;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,196,        return iHourOfDay;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,200,        return iClockhourOfDay;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,204,        return iHalfdays;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,208,        return iHourOfHalfday;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,212,        return iClockhourOfHalfday;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,216,        return iHalfdayOfDay;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,220,        return iDays;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,224,        return iDayOfWeek;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,228,        return iDayOfMonth;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,232,        return iDayOfYear;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,236,        return iWeeks;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,240,        return iWeekOfWeekyear;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,244,        return iWeekyears;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,248,        return iWeekyear;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,252,        return iWeekyearOfCentury;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,256,        return iMonths;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,260,        return iMonthOfYear;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,264,        return iYears;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,268,        return iYear;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,272,        return iYearOfEra;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,276,        return iYearOfCentury;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,280,        return iCenturies;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,284,        return iCenturyOfEra;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,288,        return iEras;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,292,        return iEra;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,308,        return iBase;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,315,        return iParam;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,319,        Fields fields = new Fields();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,320,        if (iBase != null) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,321,            fields.copyFieldsFrom(iBase);,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,323,        assemble(fields);,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,327,            iMillis    = (f = fields.millis)    != null ? f : super.millis();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,328,            iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,329,            iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,330,            iHours     = (f = fields.hours)     != null ? f : super.hours();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,331,            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,332,            iDays      = (f = fields.days)      != null ? f : super.days();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,333,            iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,334,            iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,335,            iMonths    = (f = fields.months)    != null ? f : super.months();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,336,            iYears     = (f = fields.years)     != null ? f : super.years();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,337,            iCenturies = (f = fields.centuries) != null ? f : super.centuries();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,338,            iEras      = (f = fields.eras)      != null ? f : super.eras();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,343,            iMillisOfSecond     = (f = fields.millisOfSecond)     != null ? f : super.millisOfSecond();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,344,            iMillisOfDay        = (f = fields.millisOfDay)        != null ? f : super.millisOfDay();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,345,            iSecondOfMinute     = (f = fields.secondOfMinute)     != null ? f : super.secondOfMinute();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,346,            iSecondOfDay        = (f = fields.secondOfDay)        != null ? f : super.secondOfDay();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,347,            iMinuteOfHour       = (f = fields.minuteOfHour)       != null ? f : super.minuteOfHour();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,348,            iMinuteOfDay        = (f = fields.minuteOfDay)        != null ? f : super.minuteOfDay();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,349,            iHourOfDay          = (f = fields.hourOfDay)          != null ? f : super.hourOfDay();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,350,            iClockhourOfDay     = (f = fields.clockhourOfDay)     != null ? f : super.clockhourOfDay();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,351,            iHourOfHalfday      = (f = fields.hourOfHalfday)      != null ? f : super.hourOfHalfday();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,352,            iClockhourOfHalfday = (f = fields.clockhourOfHalfday) != null ? f : super.clockhourOfHalfday();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,353,            iHalfdayOfDay       = (f = fields.halfdayOfDay)       != null ? f : super.halfdayOfDay();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,354,            iDayOfWeek          = (f = fields.dayOfWeek)          != null ? f : super.dayOfWeek();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,355,            iDayOfMonth         = (f = fields.dayOfMonth)         != null ? f : super.dayOfMonth();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,356,            iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,357,            iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,358,            iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,359,            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,360,            iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,361,            iYear               = (f = fields.year)               != null ? f : super.year();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,362,            iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,363,            iYearOfCentury      = (f = fields.yearOfCentury)      != null ? f : super.yearOfCentury();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,364,            iCenturyOfEra       = (f = fields.centuryOfEra)       != null ? f : super.centuryOfEra();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,365,            iEra                = (f = fields.era)                != null ? f : super.era();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,369,        if (iBase == null) {,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,370,            flags = 0;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,372,            flags = ,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,385,        iBaseFlags = flags;,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,386,    },0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,389,        in.defaultReadObject();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,390,        setFields();,0.0,0,,0
org/joda/time/chrono/AssembledChronology,8,391,    },0.0,0,,0
org/joda/time/chrono/ISOChronology,8,122,"        super(base, null);",0.0,0,,0
org/joda/time/chrono/ISOChronology,8,123,    },0.0,0,,0
org/joda/time/chrono/ISOChronology,8,63,"    private static final Map<DateTimeZone, ISOChronology> cCache = new HashMap<DateTimeZone, ISOChronology>();",0.0,0,,0
org/joda/time/chrono/ISOChronology,8,65,        cFastCache = new ISOChronology[FAST_CACHE_SIZE];,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,66,        INSTANCE_UTC = new ISOChronology(GregorianChronology.getInstanceUTC());,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,67,"        cCache.put(DateTimeZone.UTC, INSTANCE_UTC);",0.0,0,,0
org/joda/time/chrono/ISOChronology,8,68,    },0.0,0,,0
org/joda/time/chrono/ISOChronology,8,77,        return INSTANCE_UTC;,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,86,        return getInstance(DateTimeZone.getDefault());,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,96,        if (zone == null) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,97,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,99,        int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,100,        ISOChronology chrono = cFastCache[index];,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,101,        if (chrono != null && chrono.getZone() == zone) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,102,            return chrono;,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,104,        synchronized (cCache) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,105,            chrono = cCache.get(zone);,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,106,            if (chrono == null) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,107,"                chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));",0.0,0,,0
org/joda/time/chrono/ISOChronology,8,108,"                cCache.put(zone, chrono);",0.0,0,,0
org/joda/time/chrono/ISOChronology,8,110,        },0.0,0,,0
org/joda/time/chrono/ISOChronology,8,111,        cFastCache[index] = chrono;,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,112,        return chrono;,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,133,        return INSTANCE_UTC;,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,143,        if (zone == null) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,144,            zone = DateTimeZone.getDefault();,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,146,        if (zone == getZone()) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,147,            return this;,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,149,        return getInstance(zone);,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,160,"        String str = ""ISOChronology"";",0.0,0,,0
org/joda/time/chrono/ISOChronology,8,161,        DateTimeZone zone = getZone();,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,162,        if (zone != null) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,163,            str = str + '[' + zone.getID() + ']';,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,165,        return str;,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,169,        if (getBase().getZone() == DateTimeZone.UTC) {,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,171,            fields.centuryOfEra = new DividedDateTimeField(,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,173,            fields.yearOfCentury = new RemainderDateTimeField(,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,175,            fields.weekyearOfCentury = new RemainderDateTimeField(,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,178,            fields.centuries = fields.centuryOfEra.getDurationField();,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,180,    },0.0,0,,0
org/joda/time/chrono/ISOChronology,8,190,        return super.equals(obj);,0.0,0,,0
org/joda/time/chrono/ISOChronology,8,200,"        return ""ISO"".hashCode() * 11 + getZone().hashCode();",0.0,0,,0
org/joda/time/chrono/ISOChronology,8,208,        return new Stub(getZone());,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,883,"        Transition(long millis, Transition tr) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,884,            iMillis = millis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,885,            iNameKey = tr.iNameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,886,            iWallOffset = tr.iWallOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,887,            iStandardOffset = tr.iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,888,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,890,"        Transition(long millis, Rule rule, int standardOffset) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,891,            iMillis = millis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,892,            iNameKey = rule.getNameKey();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,893,            iWallOffset = standardOffset + rule.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,894,            iStandardOffset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,895,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,898,"                   int wallOffset, int standardOffset) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,899,            iMillis = millis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,900,            iNameKey = nameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,901,            iWallOffset = wallOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,902,            iStandardOffset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,903,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,906,            return iMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,910,            return iNameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,914,            return iWallOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,918,            return iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,922,            return iWallOffset - iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,929,            if (other == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,930,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,932,            return iMillis > other.iMillis &&,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,506,"                throw new IllegalArgumentException(""Unknown mode: "" + mode);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,522,            if (iMode == 'w') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,523,                offset = standardOffset + saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,524,            } else if (iMode == 's') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,525,                offset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,527,                offset = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,530,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,531,"            long millis = chrono.year().set(0, year);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,532,"            millis = chrono.monthOfYear().set(millis, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,533,"            millis = chrono.millisOfDay().set(millis, iMillisOfDay);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,534,"            millis = setDayOfMonth(chrono, millis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,536,            if (iDayOfWeek != 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,537,"                millis = setDayOfWeek(chrono, millis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,541,            return millis - offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,549,            if (iMode == 'w') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,550,                offset = standardOffset + saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,551,            } else if (iMode == 's') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,552,                offset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,554,                offset = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,558,            instant += offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,560,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,561,"            long next = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,563,"            next = chrono.millisOfDay().set(next, 0);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,564,"            next = chrono.millisOfDay().add(next, iMillisOfDay);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,565,"            next = setDayOfMonthNext(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,567,            if (iDayOfWeek == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,568,                if (next <= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,569,"                    next = chrono.year().add(next, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,570,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,573,"                next = setDayOfWeek(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,574,                if (next <= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,575,"                    next = chrono.year().add(next, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,576,"                    next = chrono.monthOfYear().set(next, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,577,"                    next = setDayOfMonthNext(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,578,"                    next = setDayOfWeek(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,583,            return next - offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,591,            if (iMode == 'w') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,592,                offset = standardOffset + saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,593,            } else if (iMode == 's') {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,594,                offset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,596,                offset = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,600,            instant += offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,602,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,603,"            long prev = chrono.monthOfYear().set(instant, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,605,"            prev = chrono.millisOfDay().set(prev, 0);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,606,"            prev = chrono.millisOfDay().add(prev, iMillisOfDay);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,607,"            prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,609,            if (iDayOfWeek == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,610,                if (prev >= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,611,"                    prev = chrono.year().add(prev, -1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,612,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,615,"                prev = setDayOfWeek(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,616,                if (prev >= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,617,"                    prev = chrono.year().add(prev, -1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,618,"                    prev = chrono.monthOfYear().set(prev, iMonthOfYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,619,"                    prev = setDayOfMonthPrevious(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,620,"                    prev = setDayOfWeek(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,625,            return prev - offset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,629,            if (this == obj) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,630,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,632,            if (obj instanceof OfYear) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,633,                OfYear other = (OfYear)obj;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,634,                return,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,642,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,659,            out.writeByte(iMode);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,660,            out.writeByte(iMonthOfYear);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,661,            out.writeByte(iDayOfMonth);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,662,            out.writeByte(iDayOfWeek);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,663,            out.writeBoolean(iAdvance);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,664,"            writeMillis(out, iMillisOfDay);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,665,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,672,"                next = setDayOfMonth(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,682,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,673,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,674,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,675,                    while (chrono.year().isLeap(next) == false) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,676,"                        next = chrono.year().add(next, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,678,"                    next = setDayOfMonth(chrono, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,680,                    throw e;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,683,            return next;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,691,"                prev = setDayOfMonth(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,701,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,692,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,693,                if (iMonthOfYear == 2 && iDayOfMonth == 29) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,694,                    while (chrono.year().isLeap(prev) == false) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,695,"                        prev = chrono.year().add(prev, -1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,697,"                    prev = setDayOfMonth(chrono, prev);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,699,                    throw e;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,702,            return prev;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,706,            if (iDayOfMonth >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,707,"                instant = chrono.dayOfMonth().set(instant, iDayOfMonth);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,709,"                instant = chrono.dayOfMonth().set(instant, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,710,"                instant = chrono.monthOfYear().add(instant, 1);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,711,"                instant = chrono.dayOfMonth().add(instant, iDayOfMonth);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,713,            return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,717,            int dayOfWeek = chrono.dayOfWeek().get(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,718,            int daysToAdd = iDayOfWeek - dayOfWeek;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,719,            if (daysToAdd != 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,720,                if (iAdvance) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,721,                    if (daysToAdd < 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,722,                        daysToAdd += 7;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,725,                    if (daysToAdd > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,726,                        daysToAdd -= 7;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,729,"                instant = chrono.dayOfWeek().add(instant, daysToAdd);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,731,            return instant;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,56,    public ZoneInfoProvider(File fileDir) throws IOException {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,57,        if (fileDir == null) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,58,"            throw new IllegalArgumentException(""No file directory provided"");",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,60,        if (!fileDir.exists()) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,61,"            throw new IOException(""File directory doesn't exist: "" + fileDir);",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,63,        if (!fileDir.isDirectory()) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,64,"            throw new IOException(""File doesn't refer to a directory: "" + fileDir);",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,67,        iFileDir = fileDir;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,68,        iResourcePath = null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,69,        iLoader = null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,71,"        iZoneInfoMap = loadZoneInfoMap(openResource(""ZoneInfoMap""));",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,72,    },0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,96,"        this(resourcePath, loader, true);",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,97,    },0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,108,"            throw new IllegalArgumentException(""No resource path provided"");",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,137,            return null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,158,            return loadZoneData(id);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,162,        return getZone((String)obj);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,183,        Thread t = Thread.currentThread();,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,184,"        t.getThreadGroup().uncaughtException(t, ex);",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,185,    },0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,197,"            in = new FileInputStream(new File(iFileDir, name));",0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,203,                in = ClassLoader.getSystemResourceAsStream(path);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,206,                StringBuilder buf = new StringBuilder(40),0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,211,                throw new IOException(buf.toString());,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,239,            } catch (IOException ex) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,230,        } catch (IOException ex) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,231,            uncaughtException(ex);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,232,            iZoneInfoMap.remove(id);,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,233,            return null;,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,235,            try {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,259,            } catch (IOException ex) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,261,        },0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,257,            try {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,285,            } catch (ArrayIndexOutOfBoundsException ex) {,0.0,0,,0
org/joda/time/tz/ZoneInfoProvider,8,286,"                throw new IOException(""Corrupt zone info map"");",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1183,            return findMatchingRecurrence(instant).getNameKey();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1187,            return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1191,            return iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1195,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1199,            int standardOffset = iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1200,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1201,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1206,                start = startRecurrence.next,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1208,                if (instant > 0 && start < 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1210,                    start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1218,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1212,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1214,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1215,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1217,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1221,                end = endRecurrence.next,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1223,                if (instant > 0 && end < 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1225,                    end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1233,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1227,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1229,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1230,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1232,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1235,            return (start > end) ? end : start;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1241,            instant++;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1243,            int standardOffset = iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1244,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1245,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1250,                start = startRecurrence.previous,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1252,                if (instant < 0 && start > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1254,                    start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1262,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1256,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1258,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1259,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1261,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1265,                end = endRecurrence.previous,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1267,                if (instant < 0 && end > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1269,                    end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1277,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1271,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1273,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1274,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1276,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1279,            return ((start > end) ? start : end) - 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1283,            if (this == obj) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1284,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1286,            if (obj instanceof DSTZone) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1287,                DSTZone other = (DSTZone)obj;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1288,                return,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1294,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1298,"            writeMillis(out, iStandardOffset);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1299,            iStartRecurrence.writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1300,            iEndRecurrence.writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1301,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1304,            int standardOffset = iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1305,            Recurrence startRecurrence = iStartRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1306,            Recurrence endRecurrence = iEndRecurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1311,                start = startRecurrence.next,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1319,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1313,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1315,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1316,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1318,                start = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1322,                end = endRecurrence.next,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1330,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1324,            } catch (IllegalArgumentException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1326,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1327,            } catch (ArithmeticException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1329,                end = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1332,            return (start > end) ? startRecurrence : endRecurrence;,0.0,0,,0
org/joda/time/JodaTimePermission,8,57,        super(name);,0.0,0,,0
org/joda/time/JodaTimePermission,8,58,    },0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,8,45,        return iNameKey;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,8,49,        return iWallOffset;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,8,53,        return iStandardOffset;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,8,57,        return iWallOffset;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,8,61,        return true;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,8,65,        return instant;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,8,69,        return instant;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,8,77,        String id = getID();,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,8,78,"        if (id.length() == 6 && (id.startsWith(""+"") || id.startsWith(""-""))) {",0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,8,81,"            return java.util.TimeZone.getTimeZone(""GMT"" + getID());",0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,8,84,"        return new java.util.SimpleTimeZone(iWallOffset, getID());",0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,8,91,        if (obj instanceof FixedDateTimeZone) {,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,8,92,            FixedDateTimeZone other = (FixedDateTimeZone) obj;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,8,93,            return,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,8,98,        return false;,0.0,0,,0
org/joda/time/tz/FixedDateTimeZone,8,102,        return getID().hashCode() + 37 * iStandardOffset + 31 * iWallOffset;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,43,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,44,        return nameSet == null ? null : nameSet[0];,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,48,"        String[] nameSet = getNameSet(locale, id, nameKey);",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,49,        return nameSet == null ? null : nameSet[1];,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,53,        if (locale == null || id == null || nameKey == null) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,54,            return null;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,57,"        Map<String, Map<String, Object>> byIdCache = iByLocaleCache.get(locale);",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,58,        if (byIdCache == null) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,59,"            iByLocaleCache.put(locale, byIdCache = createCache());",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,62,"        Map<String, Object> byNameKeyCache = byIdCache.get(id);",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,63,        if (byNameKeyCache == null) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,64,"            byIdCache.put(id, byNameKeyCache = createCache());",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,66,            String[][] zoneStringsEn = DateTimeUtils.getDateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,67,            String[] setEn = null;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,68,            for (String[] strings : zoneStringsEn) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,69,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,70,                setEn = strings;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,71,                break;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,74,            String[][] zoneStringsLoc = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,75,            String[] setLoc = null;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,76,            for (String[] strings : zoneStringsLoc) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,77,              if (strings != null && strings.length == 5 && id.equals(strings[0])) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,78,                setLoc = strings;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,79,                break;,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,83,            if (setEn != null && setLoc != null) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,84,"              byNameKeyCache.put(setEn[2], new String[] {setLoc[2], setLoc[1]});",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,88,              if (setEn[2].equals(setEn[4])) {,0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,89,"                  byNameKeyCache.put(setEn[4] + ""-Summer"", new String[] {setLoc[4], setLoc[3]});",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,91,"                  byNameKeyCache.put(setEn[4], new String[] {setLoc[4], setLoc[3]});",0.0,0,,0
org/joda/time/tz/DefaultNameProvider,8,95,        return (String[]) byNameKeyCache.get(nameKey);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,225,    public DateTimeZoneBuilder() {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,226,        iRuleSets = new ArrayList<RuleSet>(10);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,227,    },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,96,"            return readFrom((DataInput)in, id);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,112,            DateTimeZone fixed = new FixedDateTimeZone,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,114,            if (fixed.equals(DateTimeZone.UTC)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,115,                fixed = DateTimeZone.UTC;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,117,            return fixed;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,121,"            return PrecalculatedZone.readFrom(in, id);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,123,"            throw new IOException(""Invalid encoding"");",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,140,        if (millis % (30 * 60000L) == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,142,            long units = millis / (30 * 60000L);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,143,            if (((units << (64 - 6)) >> (64 - 6)) == units) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,145,                out.writeByte((int)(units & 0x3f));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,146,                return;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,150,        if (millis % 60000L == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,152,            long minutes = millis / 60000L;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,153,            if (((minutes << (64 - 30)) >> (64 - 30)) == minutes) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,155,                out.writeInt(0x40000000 | (int)(minutes & 0x3fffffff));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,156,                return;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,160,        if (millis % 1000L == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,162,            long seconds = millis / 1000L;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,163,            if (((seconds << (64 - 38)) >> (64 - 38)) == seconds) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,165,                out.writeByte(0x80 | (int)((seconds >> 32) & 0x3f));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,166,                out.writeInt((int)(seconds & 0xffffffff));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,167,                return;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,175,        out.writeByte(millis < 0 ? 0xff : 0xc0);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,176,        out.writeLong(millis);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,177,    },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,215,"        if (""UTC"".equals(id) && id.equals(nameKey) &&",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,217,            return DateTimeZone.UTC;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,219,"        return new FixedDateTimeZone(id, nameKey, wallOffset, standardOffset);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,252,        if (iRuleSets.size() > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,253,            OfYear ofYear = new OfYear,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,255,            RuleSet lastRuleSet = iRuleSets.get(iRuleSets.size() - 1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,256,"            lastRuleSet.setUpperLimit(year, ofYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,258,        iRuleSets.add(new RuleSet());,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,259,        return this;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,268,        getLastRuleSet().setStandardOffset(standardOffset);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,269,        return this;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,276,"        getLastRuleSet().setFixedSavings(nameKey, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,277,        return this;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,309,        if (fromYear <= toYear) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,310,            OfYear ofYear = new OfYear,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,312,"            Recurrence recurrence = new Recurrence(ofYear, nameKey, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,313,"            Rule rule = new Rule(recurrence, fromYear, toYear);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,314,            getLastRuleSet().addRule(rule);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,316,        return this;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,320,        if (iRuleSets.size() == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,321,"            addCutover(Integer.MIN_VALUE, 'w', 1, 1, 0, false, 0);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,323,        return iRuleSets.get(iRuleSets.size() - 1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,333,        if (id == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,334,            throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,339,        ArrayList<Transition> transitions = new ArrayList<Transition>();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,343,        DSTZone tailZone = null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,345,        long millis = Long.MIN_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,346,        int saveMillis = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,348,        int ruleSetCount = iRuleSets.size();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,349,        for (int i=0; i<ruleSetCount; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,350,            RuleSet rs = iRuleSets.get(i);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,351,            Transition next = rs.firstTransition(millis);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,352,            if (next == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,353,                continue;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,355,"            addTransition(transitions, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,356,            millis = next.getMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,357,            saveMillis = next.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,360,            rs = new RuleSet(rs);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,362,"            while ((next = rs.nextTransition(millis, saveMillis)) != null) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,363,"                if (addTransition(transitions, next)) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,364,                    if (tailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,366,                        break;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,369,                millis = next.getMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,370,                saveMillis = next.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,371,                if (tailZone == null && i == ruleSetCount - 1) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,372,                    tailZone = rs.buildTailZone(id);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,379,            millis = rs.getUpperLimit(saveMillis);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,383,        if (transitions.size() == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,384,            if (tailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,386,                return tailZone;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,388,"            return buildFixedZone(id, ""UTC"", 0, 0);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,390,        if (transitions.size() == 1 && tailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,391,            Transition tr = transitions.get(0);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,392,"            return buildFixedZone(id, tr.getNameKey(),",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,396,"        PrecalculatedZone zone = PrecalculatedZone.create(id, outputID, transitions, tailZone);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,397,        if (zone.isCachable()) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,398,            return CachedDateTimeZone.forZone(zone);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,400,        return zone;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,404,        int size = transitions.size();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,405,        if (size == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,406,            transitions.add(tr);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,407,            return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,410,        Transition last = transitions.get(size - 1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,411,        if (!tr.isTransitionFrom(last)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,412,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,417,        int offsetForLast = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,418,        if (size >= 2) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,419,            offsetForLast = transitions.get(size - 2).getWallOffset();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,421,        int offsetForNew = last.getWallOffset();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,423,        long lastLocal = last.getMillis() + offsetForLast;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,424,        long newLocal = tr.getMillis() + offsetForNew;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,426,        if (newLocal != lastLocal) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,427,            transitions.add(tr);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,428,            return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,431,        transitions.remove(size - 1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,432,"        return addTransition(transitions, tr);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,443,        if (out instanceof DataOutput) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,444,"            writeTo(zoneID, (DataOutput)out);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,446,"            writeTo(zoneID, (DataOutput)new DataOutputStream(out));",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,448,    },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,459,"        DateTimeZone zone = toDateTimeZone(zoneID, false);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,461,        if (zone instanceof FixedDateTimeZone) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,462,            out.writeByte('F'); // 'F' for fixed,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,463,            out.writeUTF(zone.getNameKey(0));,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,464,"            writeMillis(out, zone.getOffset(0));",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,465,"            writeMillis(out, zone.getStandardOffset(0));",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,467,            if (zone instanceof CachedDateTimeZone) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,468,"                out.writeByte('C'); // 'C' for cached, precalculated",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,469,                zone = ((CachedDateTimeZone)zone).getUncachedZone();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,471,"                out.writeByte('P'); // 'P' for precalculated, uncached",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,473,            ((PrecalculatedZone)zone).writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,475,    },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1362,                        index = in.readUnsignedShort();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1365,                } catch (ArrayIndexOutOfBoundsException e) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1366,"                    throw new IOException(""Invalid encoding"");",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1389,            int size = transitions.size();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1390,            if (size == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1391,                throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1394,            long[] trans = new long[size];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1395,            int[] wallOffsets = new int[size];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1396,            int[] standardOffsets = new int[size];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1397,            String[] nameKeys = new String[size];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1399,            Transition last = null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1400,            for (int i=0; i<size; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1401,                Transition tr = transitions.get(i);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1403,                if (!tr.isTransitionFrom(last)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1404,                    throw new IllegalArgumentException(id);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1407,                trans[i] = tr.getMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1408,                wallOffsets[i] = tr.getWallOffset();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1409,                standardOffsets[i] = tr.getStandardOffset();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1410,                nameKeys[i] = tr.getNameKey();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1412,                last = tr;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1417,            String[] zoneNameData = new String[5];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1418,            String[][] zoneStrings = new DateFormatSymbols(Locale.ENGLISH).getZoneStrings();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1419,            for (int j = 0; j < zoneStrings.length; j++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1420,                String[] set = zoneStrings[j];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1421,                if (set != null && set.length == 5 && id.equals(set[0])) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1422,                    zoneNameData = set;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1426,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1428,            for (int i = 0; i < nameKeys.length - 1; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1429,                String curNameKey = nameKeys[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1430,                String nextNameKey = nameKeys[i + 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1431,                long curOffset = wallOffsets[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1432,                long nextOffset = wallOffsets[i + 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1433,                long curStdOffset = standardOffsets[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1434,                long nextStdOffset = standardOffsets[i + 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1435,"                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1436,                if (curOffset != nextOffset &&,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1443,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1444,"                        System.out.println(""Fixing duplicate name key - "" + nextNameKey);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1445,"                        System.out.println(""     - "" + new DateTime(trans[i], chrono) +",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1448,                    if (curOffset > nextOffset) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1449,"                        nameKeys[i] = (curNameKey + ""-Summer"").intern();",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1450,                    } else if (curOffset < nextOffset) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1451,"                        nameKeys[i + 1] = (nextNameKey + ""-Summer"").intern();",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1452,                        i++;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1457,            if (tailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1458,                if (tailZone.iStartRecurrence.getNameKey(),0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1460,                    if (ZoneInfoCompiler.verbose()) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1461,"                        System.out.println(""Fixing duplicate recurrent name key - "" +",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1464,                    if (tailZone.iStartRecurrence.getSaveMillis() > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1465,                        tailZone = new DSTZone(,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1471,                        tailZone = new DSTZone(,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1480,            return new PrecalculatedZone,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1509,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1510,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1511,            if (i >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1512,                return iNameKeys[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1514,            i = ~i;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1515,            if (i < transitions.length) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1516,                if (i > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1517,                    return iNameKeys[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1519,"                return ""UTC"";",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1521,            if (iTailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1522,                return iNameKeys[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1524,            return iTailZone.getNameKey(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1528,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1529,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1530,            if (i >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1531,                return iWallOffsets[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1533,            i = ~i;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1534,            if (i < transitions.length) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1535,                if (i > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1536,                    return iWallOffsets[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1538,                return 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1540,            if (iTailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1541,                return iWallOffsets[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1543,            return iTailZone.getOffset(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1547,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1548,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1549,            if (i >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1550,                return iStandardOffsets[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1552,            i = ~i;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1553,            if (i < transitions.length) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1554,                if (i > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1555,                    return iStandardOffsets[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1557,                return 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1559,            if (iTailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1560,                return iStandardOffsets[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1562,            return iTailZone.getStandardOffset(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1566,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1570,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1571,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1572,            i = (i >= 0) ? (i + 1) : ~i;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1573,            if (i < transitions.length) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1574,                return transitions[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1576,            if (iTailZone == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1577,                return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1579,            long end = transitions[transitions.length - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1580,            if (instant < end) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1581,                instant = end;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1583,            return iTailZone.nextTransition(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1587,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1588,"            int i = Arrays.binarySearch(transitions, instant);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1589,            if (i >= 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1590,                if (instant > Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1591,                    return instant - 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1593,                return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1595,            i = ~i;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1596,            if (i < transitions.length) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1597,                if (i > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1598,                    long prev = transitions[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1599,                    if (prev > Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1600,                        return prev - 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1603,                return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1605,            if (iTailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1606,                long prev = iTailZone.previousTransition(instant);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1607,                if (prev < instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1608,                    return prev;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1611,            long prev = transitions[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1612,            if (prev > Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1613,                return prev - 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1615,            return instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1619,            if (this == obj) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1620,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1622,            if (obj instanceof PrecalculatedZone) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1623,                PrecalculatedZone other = (PrecalculatedZone)obj;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1624,                return,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1634,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1638,            int size = iTransitions.length;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1641,            Set<String> poolSet = new HashSet<String>();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1642,            for (int i=0; i<size; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1643,                poolSet.add(iNameKeys[i]);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1646,            int poolSize = poolSet.size();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1647,            if (poolSize > 65535) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1648,"                throw new UnsupportedOperationException(""String pool is too large"");",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1650,            String[] pool = new String[poolSize];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1651,            Iterator<String> it = poolSet.iterator();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1652,            for (int i=0; it.hasNext(); i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1653,                pool[i] = it.next();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1657,            out.writeShort(poolSize);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1658,            for (int i=0; i<poolSize; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1659,                out.writeUTF(pool[i]);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1662,            out.writeInt(size);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1664,            for (int i=0; i<size; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1665,"                writeMillis(out, iTransitions[i]);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1666,"                writeMillis(out, iWallOffsets[i]);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1667,"                writeMillis(out, iStandardOffsets[i]);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1670,                String nameKey = iNameKeys[i];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1671,                for (int j=0; j<poolSize; j++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1672,                    if (pool[j].equals(nameKey)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1673,                        if (poolSize < 256) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1674,                            out.writeByte(j);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1676,                            out.writeShort(j);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1678,                        break;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1683,            out.writeBoolean(iTailZone != null);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1684,            if (iTailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1685,                iTailZone.writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1687,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1690,            if (iTailZone != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1691,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1693,            long[] transitions = iTransitions;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1694,            if (transitions.length <= 1) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1695,                return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1700,            double distances = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1701,            int count = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1703,            for (int i=1; i<transitions.length; i++) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1704,                long diff = transitions[i] - transitions[i - 1];,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1705,                if (diff < ((366L + 365) * 24 * 60 * 60 * 1000)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1706,                    distances += (double)diff;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1707,                    count++;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1711,            if (count > 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1712,                double avg = distances / count;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1713,                avg /= 24 * 60 * 60 * 1000;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1714,                if (avg >= 25) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1721,                    return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1725,            return false;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,40,        } catch (SecurityException e) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,41,            i = null;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,50,            cacheSize = i.intValue();,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,52,            cacheSize--;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,53,            int shift = 0;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,54,            while (cacheSize > 0) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,55,                shift++;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,56,                cacheSize >>= 1;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,58,            cacheSize = 1 << shift;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,69,            return (CachedDateTimeZone)zone;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,95,        return iZone;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,99,        return getInfo(instant).getNameKey(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,103,        return getInfo(instant).getOffset(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,107,        return getInfo(instant).getStandardOffset(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,111,        return iZone.isFixed();,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,115,        return iZone.nextTransition(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,119,        return iZone.previousTransition(instant);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,123,        return iZone.hashCode();,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,127,        if (this == obj) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,128,            return true;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,130,        if (obj instanceof CachedDateTimeZone) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,131,            return iZone.equals(((CachedDateTimeZone)obj).iZone);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,133,        return false;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,140,        int period = (int)(millis >> 32);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,141,        Info[] cache = iInfoCache;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,142,        int index = period & cInfoCacheMask;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,143,        Info info = cache[index];,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,144,        if (info == null || (int)((info.iPeriodStart >> 32)) != period) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,145,            info = createInfo(millis);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,146,            cache[index] = info;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,148,        return info;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,152,        long periodStart = millis & (0xffffffffL << 32);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,153,"        Info info = new Info(iZone, periodStart);",0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,155,        long end = periodStart | 0xffffffffL;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,156,        Info chain = info;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,158,            long next = iZone.nextTransition(periodStart);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,159,            if (next == periodStart || next > end) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,160,                break;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,162,            periodStart = next;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,163,"            chain = (chain.iNextInfo = new Info(iZone, periodStart));",0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,164,        },0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,166,        return info;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,963,        RuleSet() {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,964,            iRules = new ArrayList<Rule>(10);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,965,            iUpperYear = Integer.MAX_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,966,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,971,        RuleSet(RuleSet rs) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,972,            iStandardOffset = rs.iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,973,            iRules = new ArrayList<Rule>(rs.iRules);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,974,            iInitialNameKey = rs.iInitialNameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,975,            iInitialSaveMillis = rs.iInitialSaveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,976,            iUpperYear = rs.iUpperYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,977,            iUpperOfYear = rs.iUpperOfYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,978,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,948,            long now = DateTimeUtils.currentTimeMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,949,            YEAR_LIMIT = ISOChronology.getInstanceUTC().year().get(now) + 100;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,950,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,981,            return iStandardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,985,            iStandardOffset = standardOffset;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,986,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,989,            iInitialNameKey = nameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,990,            iInitialSaveMillis = saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,991,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,994,            if (!iRules.contains(rule)) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,995,                iRules.add(rule);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,997,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1000,            iUpperYear = year;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1001,            iUpperOfYear = ofYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1002,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1011,            if (iInitialNameKey != null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1013,"                return new Transition(firstMillis, iInitialNameKey,",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1018,            ArrayList<Rule> copy = new ArrayList<Rule>(iRules);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1024,            long millis = Long.MIN_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1025,            int saveMillis = 0;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1026,            Transition first = null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1029,"            while ((next = nextTransition(millis, saveMillis)) != null) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1030,                millis = next.getMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1032,                if (millis == firstMillis) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1033,"                    first = new Transition(firstMillis, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1034,                    break;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1037,                if (millis > firstMillis) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1038,                    if (first == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1042,                        for (Rule rule : copy) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1043,                            if (rule.getSaveMillis() == 0) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1044,"                                first = new Transition(firstMillis, rule, iStandardOffset);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1045,                                break;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1047,                        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1049,                    if (first == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1053,"                        first = new Transition(firstMillis, next.getNameKey(),",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1061,"                first = new Transition(firstMillis, next);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1063,                saveMillis = next.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1066,            iRules = copy;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1067,            return first;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1082,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1085,            Rule nextRule = null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1086,            long nextMillis = Long.MAX_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1088,            Iterator<Rule> it = iRules.iterator();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1089,            while (it.hasNext()) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1090,                Rule rule = it.next();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1091,"                long next = rule.next(instant, iStandardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1092,                if (next <= instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1093,                    it.remove();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1094,                    continue;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1098,                if (next <= nextMillis) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1100,                    nextRule = rule;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1101,                    nextMillis = next;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1103,            },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1105,            if (nextRule == null) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1106,                return null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1110,            if (chrono.year().get(nextMillis) >= YEAR_LIMIT) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1111,                return null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1115,            if (iUpperYear < Integer.MAX_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1116,                long upperMillis =,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1118,                if (nextMillis >= upperMillis) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1120,                    return null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1124,"            return new Transition(nextMillis, nextRule, iStandardOffset);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1131,            if (iUpperYear == Integer.MAX_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1132,                return Long.MAX_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1134,"            return iUpperOfYear.setInstant(iUpperYear, iStandardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1141,            if (iRules.size() == 2) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1142,                Rule startRule = iRules.get(0);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1143,                Rule endRule = iRules.get(1);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1144,                if (startRule.getToYear() == Integer.MAX_VALUE &&,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1154,"                    return new DSTZone(id, iStandardOffset,",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,1158,            return null;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,816,"        Rule(Recurrence recurrence, int fromYear, int toYear) {",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,817,            iRecurrence = recurrence;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,818,            iFromYear = fromYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,819,            iToYear = toYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,820,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,823,            return iFromYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,827,            return iToYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,831,            return iRecurrence.getOfYear();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,835,            return iRecurrence.getNameKey();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,839,            return iRecurrence.getSaveMillis();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,843,            Chronology chrono = ISOChronology.getInstanceUTC();,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,845,            final int wallOffset = standardOffset + saveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,846,            long testInstant = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,849,            if (instant == Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,850,                year = Integer.MIN_VALUE;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,852,                year = chrono.year().get(instant + wallOffset);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,855,            if (year < iFromYear) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,857,"                testInstant = chrono.year().set(0, iFromYear) - wallOffset;",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,860,                testInstant -= 1;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,863,"            long next = iRecurrence.next(testInstant, standardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,865,            if (next > instant) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,866,                year = chrono.year().get(next + wallOffset);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,867,                if (year > iToYear) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,869,                    next = instant;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,873,            return next;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,146,        return (iPrinter != null);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,155,        return iPrinter;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,164,        return (iParser != null);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,173,        return iParser;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,189,        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,190,            return this;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,192,"        return new DateTimeFormatter(iPrinter, iParser, locale,",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,203,        return iLocale;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,222,        if (iOffsetParsed == true) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,223,            return this;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,225,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,236,        return iOffsetParsed;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,258,            return this;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,270,        return iChrono;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,281,        return iChrono;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,301,        return withZone(DateTimeZone.UTC);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,321,        if (iZone == zone) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,322,            return this;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,324,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,334,        return iZone;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,368,        if (iPivotYear == pivotYear || (iPivotYear != null && iPivotYear.equals(pivotYear))) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,369,            return this;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,371,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,405,        return withPivotYear(Integer.valueOf(pivotYear));,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,415,      return iPivotYear;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,438,"        return new DateTimeFormatter(iPrinter, iParser, iLocale,",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,449,      return iDefaultYear;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,460,        long millis = DateTimeUtils.getInstantMillis(instant);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,461,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,462,"        printTo(buf, millis, chrono);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,463,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,472,        long millis = DateTimeUtils.getInstantMillis(instant);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,473,        Chronology chrono = DateTimeUtils.getInstantChronology(instant);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,474,"        printTo(out, millis, chrono);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,475,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,485,        appendable.append(print(instant));,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,486,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,497,"        printTo(buf, instant, null);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,498,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,508,"        printTo(out, instant, null);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,509,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,520,        appendable.append(print(instant));,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,521,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,534,        DateTimePrinter printer = requirePrinter();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,535,        if (partial == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,536,"            throw new IllegalArgumentException(""The partial must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,538,"        printer.printTo(buf, partial, iLocale);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,539,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,551,        DateTimePrinter printer = requirePrinter();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,552,        if (partial == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,553,"            throw new IllegalArgumentException(""The partial must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,555,"        printer.printTo(out, partial, iLocale);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,556,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,569,        appendable.append(print(partial));,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,570,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,583,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,584,"        printTo(buf, instant);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,585,        return buf.toString();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,598,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,599,"        printTo(buf, instant);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,600,        return buf.toString();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,613,        StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,614,"        printTo(buf, partial);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,615,        return buf.toString();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,619,        DateTimePrinter printer = requirePrinter();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,620,        chrono = selectChronology(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,623,        DateTimeZone zone = chrono.getZone();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,624,        int offset = zone.getOffset(instant);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,625,        long adjustedInstant = instant + offset;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,626,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,628,            zone = DateTimeZone.UTC;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,629,            offset = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,630,            adjustedInstant = instant;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,632,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,633,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,636,        DateTimePrinter printer = requirePrinter();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,637,        chrono = selectChronology(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,640,        DateTimeZone zone = chrono.getZone();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,641,        int offset = zone.getOffset(instant);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,642,        long adjustedInstant = instant + offset;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,643,        if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,645,            zone = DateTimeZone.UTC;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,646,            offset = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,647,            adjustedInstant = instant;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,649,"        printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,650,    },0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,658,        DateTimePrinter printer = iPrinter;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,659,        if (printer == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,660,"            throw new UnsupportedOperationException(""Printing not supported"");",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,662,        return printer;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,699,        DateTimeParser parser = requireParser();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,700,        if (instant == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,701,"            throw new IllegalArgumentException(""Instant must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,704,        long instantMillis = instant.getMillis();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,705,        Chronology chrono = instant.getChronology();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,706,        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,707,        chrono = selectChronology(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,709,        DateTimeParserBucket bucket = new DateTimeParserBucket(,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,711,"        int newPos = parser.parseInto(bucket, text, position);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,712,"        instant.setMillis(bucket.computeMillis(false, text));",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,713,        if (iOffsetParsed && bucket.getOffsetInteger() != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,714,            int parsedOffset = bucket.getOffsetInteger();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,715,            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,716,            chrono = chrono.withZone(parsedZone);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,717,        } else if (bucket.getZone() != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,718,            chrono = chrono.withZone(bucket.getZone());,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,720,        instant.setChronology(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,721,        if (iZone != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,722,            instant.setZone(iZone);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,724,        return newPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,750,            newPos = ~newPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,752,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,770,        return parseLocalDateTime(text).toLocalDate();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,788,        return parseLocalDateTime(text).toLocalTime();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,806,        DateTimeParser parser = requireParser();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,808,"        Chronology chrono = selectChronology(null).withUTC();  // always use UTC, avoiding DST gaps",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,809,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,810,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,811,        if (newPos >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,812,            if (newPos >= text.length()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,813,"                long millis = bucket.computeMillis(true, text);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,814,                if (bucket.getOffsetInteger() != null) {  // treat withOffsetParsed() as being true,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,815,                    int parsedOffset = bucket.getOffsetInteger();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,816,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,817,                    chrono = chrono.withZone(parsedZone);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,818,                } else if (bucket.getZone() != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,819,                    chrono = chrono.withZone(bucket.getZone());,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,821,"                return new LocalDateTime(millis, chrono);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,824,            newPos = ~newPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,826,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,847,        DateTimeParser parser = requireParser();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,849,        Chronology chrono = selectChronology(null);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,850,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,851,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,852,        if (newPos >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,853,            if (newPos >= text.length()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,854,"                long millis = bucket.computeMillis(true, text);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,855,                if (iOffsetParsed && bucket.getOffsetInteger() != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,856,                    int parsedOffset = bucket.getOffsetInteger();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,857,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,858,                    chrono = chrono.withZone(parsedZone);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,859,                } else if (bucket.getZone() != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,860,                    chrono = chrono.withZone(bucket.getZone());,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,862,"                DateTime dt = new DateTime(millis, chrono);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,863,                if (iZone != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,864,                    dt = dt.withZone(iZone);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,866,                return dt;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,869,            newPos = ~newPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,871,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,892,        DateTimeParser parser = requireParser();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,894,        Chronology chrono = selectChronology(null);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,895,"        DateTimeParserBucket bucket = new DateTimeParserBucket(0, chrono, iLocale, iPivotYear, iDefaultYear);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,896,"        int newPos = parser.parseInto(bucket, text, 0);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,897,        if (newPos >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,898,            if (newPos >= text.length()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,899,"                long millis = bucket.computeMillis(true, text);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,900,                if (iOffsetParsed && bucket.getOffsetInteger() != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,901,                    int parsedOffset = bucket.getOffsetInteger();,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,902,                    DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,903,                    chrono = chrono.withZone(parsedZone);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,904,                } else if (bucket.getZone() != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,905,                    chrono = chrono.withZone(bucket.getZone());,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,907,"                MutableDateTime dt = new MutableDateTime(millis, chrono);",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,908,                if (iZone != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,909,                    dt.setZone(iZone);,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,911,                return dt;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,914,            newPos = ~newPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,916,"        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,927,"            throw new UnsupportedOperationException(""Parsing not supported"");",0.0,0,,0
org/joda/time/format/DateTimeFormatter,8,945,            chrono = chrono.withZone(iZone);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,754,            return iOfYear;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,761,"            return iOfYear.next(instant, standardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,768,"            return iOfYear.previous(instant, standardOffset, saveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,772,            return iNameKey;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,776,            return iSaveMillis;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,780,            if (this == obj) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,781,                return true;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,783,            if (obj instanceof Recurrence) {,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,784,                Recurrence other = (Recurrence)obj;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,785,                return,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,790,            return false;,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,794,            iOfYear.writeTo(out);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,795,            out.writeUTF(iNameKey);,0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,796,"            writeMillis(out, iSaveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,797,        },0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,800,"            return new Recurrence(iOfYear, nameKey, iSaveMillis);",0.0,0,,0
org/joda/time/tz/DateTimeZoneBuilder,8,804,            return rename((iNameKey + appendNameKey).intern());,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,180,"        Info(DateTimeZone zone, long periodStart) {",0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,177,        private int iOffset = Integer.MIN_VALUE;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,178,        private int iStandardOffset = Integer.MIN_VALUE;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,181,            iPeriodStart = periodStart;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,182,            iZoneRef = zone;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,183,        },0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,186,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,187,                if (iNameKey == null) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,188,                    iNameKey = iZoneRef.getNameKey(iPeriodStart);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,190,                return iNameKey;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,192,            return iNextInfo.getNameKey(millis);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,196,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,197,                if (iOffset == Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,198,                    iOffset = iZoneRef.getOffset(iPeriodStart);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,200,                return iOffset;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,202,            return iNextInfo.getOffset(millis);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,206,            if (iNextInfo == null || millis < iNextInfo.iPeriodStart) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,207,                if (iStandardOffset == Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,208,                    iStandardOffset = iZoneRef.getStandardOffset(iPeriodStart);,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,210,                return iStandardOffset;,0.0,0,,0
org/joda/time/tz/CachedDateTimeZone,8,212,            return iNextInfo.getStandardOffset(millis);,0.0,0,,0
org/joda/time/DateTimeZone,8,1307,        Stub(String id) {,0.0,0,,0
org/joda/time/DateTimeZone,8,1308,            iID = id;,0.0,0,,0
org/joda/time/DateTimeZone,8,1309,        },0.0,0,,0
org/joda/time/DateTimeZone,8,1312,            out.writeUTF(iID);,0.0,0,,0
org/joda/time/DateTimeZone,8,1313,        },0.0,0,,0
org/joda/time/DateTimeZone,8,1316,            iID = in.readUTF();,0.0,0,,0
org/joda/time/DateTimeZone,8,1317,        },0.0,0,,0
org/joda/time/DateTimeZone,8,1320,            return forID(iID);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1463,"            super(fieldType, maxParsedDigits, signed);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1464,            iMinPrintedDigits = minPrintedDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1465,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1468,            return iMaxParsedDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1475,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1476,"                FormatUtils.appendPaddedInteger(buf, field.get(instant), iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1479,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1477,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1478,"                appendUnknownString(buf, iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1480,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1486,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1487,"                FormatUtils.writePaddedInteger(out, field.get(instant), iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1490,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1488,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1489,"                printUnknownString(out, iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1491,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1494,            if (partial.isSupported(iFieldType)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1496,"                    FormatUtils.appendPaddedInteger(buf, partial.get(iFieldType), iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1499,                },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1497,                } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1498,"                    appendUnknownString(buf, iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1501,"                appendUnknownString(buf, iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1503,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1506,            if (partial.isSupported(iFieldType)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1508,"                    FormatUtils.writePaddedInteger(out, partial.get(iFieldType), iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1511,                },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1509,                } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1510,"                    printUnknownString(out, iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1513,"                printUnknownString(out, iMinPrintedDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1515,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1319,            super();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1320,            iFieldType = fieldType;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1321,            iMaxParsedDigits = maxParsedDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1322,            iSigned = signed;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1323,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1326,            return iMaxParsedDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1330,"            int limit = Math.min(iMaxParsedDigits, text.length() - position);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1332,            boolean negative = false;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1333,            int length = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1334,            while (length < limit) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1335,                char c = text.charAt(position + length);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1336,                if (length == 0 && (c == '-' || c == '+') && iSigned) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1337,                    negative = c == '-';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1340,                    if (length + 1 >= limit || ,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1343,                        break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1346,                    if (negative) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1347,                        length++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1350,                        position++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1353,"                    limit = Math.min(limit + 1, text.length() - position);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1354,                    continue;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1356,                if (c < '0' || c > '9') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1357,                    break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1359,                length++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1360,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1362,            if (length == 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1363,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1367,            if (length >= 9) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1370,"                value = Integer.parseInt(text.substring(position, position += length));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1372,                int i = position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1373,                if (negative) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1374,                    i++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1377,                    value = text.charAt(i++) - '0';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1380,                },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1378,                } catch (StringIndexOutOfBoundsException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1379,                    return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1381,                position += length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1382,                while (i < position) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1383,                    value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1385,                if (negative) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1386,                    value = -value;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1390,"            bucket.saveField(iFieldType, value);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1391,            return position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,117,"        throw new UnsupportedOperationException(""Both printing and parsing not supported"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,133,        Object f = getFormatter();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,134,        if (isPrinter(f)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,135,            return (DateTimePrinter) f;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,137,"        throw new UnsupportedOperationException(""Printing is not supported"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,153,        Object f = getFormatter();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,154,        if (isParser(f)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,155,            return (DateTimeParser) f;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,157,"        throw new UnsupportedOperationException(""Parsing is not supported"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,168,        return isFormatter(getFormatter());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,178,        return isPrinter(getFormatter());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,188,        return isParser(getFormatter());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,197,        iFormatter = null;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,198,        iElementPairs.clear();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,199,    },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,217,        if (formatter == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,218,"            throw new IllegalArgumentException(""No formatter supplied"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,220,"        return append0(formatter.getPrinter(), formatter.getParser());",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,238,        checkPrinter(printer);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,239,"        return append0(printer, null);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,257,        checkParser(parser);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,258,"        return append0(null, parser);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,276,        checkPrinter(printer);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,277,        checkParser(parser);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,278,"        return append0(printer, parser);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,305,        if (printer != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,306,            checkPrinter(printer);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,308,        if (parsers == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,309,"            throw new IllegalArgumentException(""No parsers supplied"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,311,        int length = parsers.length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,312,        if (length == 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,313,            if (parsers[0] == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,314,"                throw new IllegalArgumentException(""No parser supplied"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,316,"            return append0(printer, parsers[0]);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,319,        DateTimeParser[] copyOfParsers = new DateTimeParser[length];,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,321,        for (i = 0; i < length - 1; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,322,            if ((copyOfParsers[i] = parsers[i]) == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,323,"                throw new IllegalArgumentException(""Incomplete parser array"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,326,        copyOfParsers[i] = parsers[i];,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,328,"        return append0(printer, new MatchingParser(copyOfParsers));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,345,        checkParser(parser);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,346,"        DateTimeParser[] parsers = new DateTimeParser[] {parser, null};",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,347,"        return append0(null, new MatchingParser(parsers));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,357,        if (parser == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,358,"            throw new IllegalArgumentException(""No parser supplied"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,360,    },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,368,        if (printer == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,369,"            throw new IllegalArgumentException(""No printer supplied"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,371,    },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,383,        iFormatter = null;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,384,        iElementPairs.add(printer);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,385,        iElementPairs.add(parser);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,386,        return this;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,397,        return append0(new CharacterLiteral(c));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,408,        if (text == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,409,"            throw new IllegalArgumentException(""Literal must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,411,        switch (text.length()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,413,                return this;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,415,                return append0(new CharacterLiteral(text.charAt(0)));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,417,                return append0(new StringLiteral(text));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,434,        if (fieldType == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,435,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,437,        if (maxDigits < minDigits) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,438,            maxDigits = minDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,440,        if (minDigits < 0 || maxDigits <= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,441,            throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,443,        if (minDigits <= 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,444,"            return append0(new UnpaddedNumber(fieldType, maxDigits, false));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,446,"            return append0(new PaddedNumber(fieldType, maxDigits, false, minDigits));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,464,        if (fieldType == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,465,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,467,        if (numDigits <= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,468,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,470,"        return append0(new FixedNumber(fieldType, numDigits, false));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,486,        if (fieldType == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,487,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,489,        if (maxDigits < minDigits) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,490,            maxDigits = minDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,492,        if (minDigits < 0 || maxDigits <= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,493,            throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,495,        if (minDigits <= 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,496,"            return append0(new UnpaddedNumber(fieldType, maxDigits, true));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,498,"            return append0(new PaddedNumber(fieldType, maxDigits, true, minDigits));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,516,        if (fieldType == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,517,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,519,        if (numDigits <= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,520,"            throw new IllegalArgumentException(""Illegal number of digits: "" + numDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,522,"        return append0(new FixedNumber(fieldType, numDigits, true));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,534,        if (fieldType == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,535,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,537,"        return append0(new TextField(fieldType, false));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,549,        if (fieldType == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,550,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,552,"        return append0(new TextField(fieldType, true));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,570,        if (fieldType == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,571,"            throw new IllegalArgumentException(""Field type must not be null"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,573,        if (maxDigits < minDigits) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,574,            maxDigits = minDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,576,        if (minDigits < 0 || maxDigits <= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,577,            throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,579,"        return append0(new Fraction(fieldType, minDigits, maxDigits));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,597,"        return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,614,"        return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,631,"        return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,648,"        return appendFraction(DateTimeFieldType.dayOfYear(), minDigits, maxDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,665,"        return appendDecimal(DateTimeFieldType.millisOfSecond(), minDigits, 3);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,675,"        return appendDecimal(DateTimeFieldType.millisOfDay(), minDigits, 8);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,685,"        return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,695,"        return appendDecimal(DateTimeFieldType.secondOfDay(), minDigits, 5);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,705,"        return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,715,"        return appendDecimal(DateTimeFieldType.minuteOfDay(), minDigits, 4);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,725,"        return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,735,"        return appendDecimal(DateTimeFieldType.clockhourOfDay(), minDigits, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,745,"        return appendDecimal(DateTimeFieldType.hourOfHalfday(), minDigits, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,755,"        return appendDecimal(DateTimeFieldType.clockhourOfHalfday(), minDigits, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,765,"        return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,775,"        return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,785,"        return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,795,"        return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,807,"        return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,817,"        return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,829,"        return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,851,"        return appendTwoDigitYear(pivot, false);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,869,"        return append0(new TwoDigitYear(DateTimeFieldType.year(), pivot, lenientParse));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,891,"        return appendTwoDigitWeekyear(pivot, false);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,909,"        return append0(new TwoDigitYear(DateTimeFieldType.weekyear(), pivot, lenientParse));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,921,"        return appendDecimal(DateTimeFieldType.yearOfEra(), minDigits, maxDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,933,"        return appendDecimal(DateTimeFieldType.yearOfCentury(), minDigits, maxDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,945,"        return appendSignedDecimal(DateTimeFieldType.centuryOfEra(), minDigits, maxDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,955,        return appendText(DateTimeFieldType.halfdayOfDay());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,965,        return appendText(DateTimeFieldType.dayOfWeek());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,976,        return appendShortText(DateTimeFieldType.dayOfWeek());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,987,        return appendText(DateTimeFieldType.monthOfYear());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,997,        return appendShortText(DateTimeFieldType.monthOfYear());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1007,        return appendText(DateTimeFieldType.era());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1018,"        return append0(new TimeZoneName(TimeZoneName.LONG_NAME, null), null);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1031,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.LONG_NAME, parseLookup);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1032,"        return append0(pp, pp);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1043,"        return append0(new TimeZoneName(TimeZoneName.SHORT_NAME, null), null);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1057,"        TimeZoneName pp = new TimeZoneName(TimeZoneName.SHORT_NAME, parseLookup);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1058,"        return append0(pp, pp);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1068,"        return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1118,        return append0(new TimeZoneOffset,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1132,"        DateTimeFormat.appendPatternTo(this, pattern);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1133,        return this;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1150,                    f = parser;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1155,                f = new Composite(iElementPairs);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1167,                return ((Composite)f).isPrinter();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1171,        return false;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1177,                return ((Composite)f).isParser();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1181,        return false;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1185,        return (isPrinter(f) || isParser(f));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1189,        for (int i = len; --i >= 0;) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1190,            buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1192,    },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1195,        for (int i = len; --i >= 0;) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1196,            out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1198,    },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2794,            super();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2795,            iParsers = parsers;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2796,            int est = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2797,            for (int i=parsers.length; --i>=0 ;) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2798,                DateTimeParser parser = parsers[i];,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2799,                if (parser != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2800,                    int len = parser.estimateParsedLength();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2801,                    if (len > est) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2802,                        est = len;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2805,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2806,            iParsedLengthEstimate = est;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2807,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2810,            return iParsedLengthEstimate;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2814,            DateTimeParser[] parsers = iParsers;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2815,            int length = parsers.length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2817,            final Object originalState = bucket.saveState();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2818,            boolean isOptional = false;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2820,            int bestValidPos = position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2821,            Object bestValidState = null;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2823,            int bestInvalidPos = position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2825,            for (int i=0; i<length; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2826,                DateTimeParser parser = parsers[i];,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2827,                if (parser == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2829,                    if (bestValidPos <= position) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2830,                        return position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2832,                    isOptional = true;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2833,                    break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2835,"                int parsePos = parser.parseInto(bucket, text, position);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2836,                if (parsePos >= position) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2837,                    if (parsePos > bestValidPos) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2838,                        if (parsePos >= text.length() ||,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2843,                            return parsePos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2845,                        bestValidPos = parsePos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2846,                        bestValidState = bucket.saveState();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2849,                    if (parsePos < 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2850,                        parsePos = ~parsePos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2851,                        if (parsePos > bestInvalidPos) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2852,                            bestInvalidPos = parsePos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2856,                bucket.restoreState(originalState);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2859,            if (bestValidPos > position || (bestValidPos == position && isOptional)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2861,                if (bestValidState != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2862,                    bucket.restoreState(bestValidState);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2864,                return bestValidPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2867,            return ~bestInvalidPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2615,            super();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2617,            List<Object> printerList = new ArrayList<Object>();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2618,            List<Object> parserList = new ArrayList<Object>();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2620,"            decompose(elementPairs, printerList, parserList);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2622,            if (printerList.contains(null) || printerList.isEmpty()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2623,                iPrinters = null;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2624,                iPrintedLengthEstimate = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2626,                int size = printerList.size();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2627,                iPrinters = new DateTimePrinter[size];,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2628,                int printEst = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2629,                for (int i=0; i<size; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2630,                    DateTimePrinter printer = (DateTimePrinter) printerList.get(i);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2631,                    printEst += printer.estimatePrintedLength();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2632,                    iPrinters[i] = printer;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2634,                iPrintedLengthEstimate = printEst;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2637,            if (parserList.contains(null) || parserList.isEmpty()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2638,                iParsers = null;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2639,                iParsedLengthEstimate = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2641,                int size = parserList.size();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2642,                iParsers = new DateTimeParser[size];,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2643,                int parseEst = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2644,                for (int i=0; i<size; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2645,                    DateTimeParser parser = (DateTimeParser) parserList.get(i);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2646,                    parseEst += parser.estimateParsedLength();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2647,                    iParsers[i] = parser;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2649,                iParsedLengthEstimate = parseEst;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2651,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2654,            return iPrintedLengthEstimate;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2660,            DateTimePrinter[] elements = iPrinters;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2661,            if (elements == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2662,                throw new UnsupportedOperationException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2665,            if (locale == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2667,                locale = Locale.getDefault();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2670,            int len = elements.length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2671,            for (int i = 0; i < len; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2672,"                elements[i].printTo(buf, instant, chrono, displayOffset, displayZone, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2674,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2679,            DateTimePrinter[] elements = iPrinters;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2680,            if (elements == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2681,                throw new UnsupportedOperationException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2684,            if (locale == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2686,                locale = Locale.getDefault();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2689,            int len = elements.length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2690,            for (int i = 0; i < len; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2691,"                elements[i].printTo(out, instant, chrono, displayOffset, displayZone, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2693,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2696,            DateTimePrinter[] elements = iPrinters;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2697,            if (elements == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2698,                throw new UnsupportedOperationException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2701,            if (locale == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2703,                locale = Locale.getDefault();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2706,            int len = elements.length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2707,            for (int i=0; i<len; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2708,"                elements[i].printTo(buf, partial, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2710,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2713,            DateTimePrinter[] elements = iPrinters;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2714,            if (elements == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2715,                throw new UnsupportedOperationException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2718,            if (locale == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2720,                locale = Locale.getDefault();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2723,            int len = elements.length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2724,            for (int i=0; i<len; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2725,"                elements[i].printTo(out, partial, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2727,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2730,            return iParsedLengthEstimate;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2734,            DateTimeParser[] elements = iParsers;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2735,            if (elements == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2736,                throw new UnsupportedOperationException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2739,            int len = elements.length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2740,            for (int i=0; i<len && position >= 0; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2741,"                position = elements[i].parseInto(bucket, text, position);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2743,            return position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2747,            return iPrinters != null;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2751,            return iParsers != null;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2759,            int size = elementPairs.size();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2760,            for (int i=0; i<size; i+=2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2761,                Object element = elementPairs.get(i);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2762,                if (element instanceof Composite) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2763,"                    addArrayToList(printerList, ((Composite)element).iPrinters);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2765,                    printerList.add(element);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2768,                element = elementPairs.get(i + 1);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2769,                if (element instanceof Composite) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2770,"                    addArrayToList(parserList, ((Composite)element).iParsers);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2772,                    parserList.add(element);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2775,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2778,            if (array != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2779,                for (int i=0; i<array.length; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2780,                    list.add(array[i]);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2783,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2544,    static enum TimeZoneId,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2547,        INSTANCE;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2548,        static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2551,            int max = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2552,            for (String id : ALL_IDS) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2553,"                max = Math.max(max, id.length());",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2554,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2555,            MAX_LENGTH = max;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2556,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2559,            return MAX_LENGTH;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2565,"            buf.append(displayZone != null ? displayZone.getID() : """");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2566,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2571,"            out.write(displayZone != null ? displayZone.getID() : """");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2572,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2576,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2580,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2583,            return MAX_LENGTH;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2587,            String str = text.substring(position);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2588,            String best = null;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2589,            for (String id : ALL_IDS) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2590,                if (str.startsWith(id)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2591,                    if (best == null || id.length() > best.length()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2592,                        best = id;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2595,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2596,            if (best != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2597,                bucket.setZone(DateTimeZone.forID(best));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2598,                return position + best.length();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2600,            return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2477,            super();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2478,            iType = type;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2479,            iParseLookup = parseLookup;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2480,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2483,            return (iType == SHORT_NAME ? 4 : 20);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2489,"            buf.append(print(instant - displayOffset, displayZone, locale));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2490,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2495,"            out.write(print(instant - displayOffset, displayZone, locale));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2496,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2499,            if (displayZone == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2500,"                return """";  // no zone",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2502,            switch (iType) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2504,"                    return displayZone.getName(instant, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2506,"                    return displayZone.getShortName(instant, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2508,"            return """";",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2513,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2517,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2520,            return (iType == SHORT_NAME ? 4 : 20);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2524,"            Map<String, DateTimeZone> parseLookup = iParseLookup;",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2525,            parseLookup = (parseLookup != null ? parseLookup : DateTimeUtils.getDefaultTimeZoneNames());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2526,            String str = text.substring(position);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2527,            String matched = null;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2528,            for (String name : parseLookup.keySet()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2529,                if (str.startsWith(name)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2530,                    if (matched == null || name.length() > matched.length()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2531,                        matched = name;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2534,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2535,            if (matched != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2536,                bucket.setZone(parseLookup.get(matched));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2537,                return position + matched.length();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2539,            return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2126,                throw new IllegalArgumentException();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2129,                minFields = 4;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2130,                maxFields = 4;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2137,            int est = 1 + iMinFields << 1;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2138,            if (iShowSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2139,                est += iMinFields - 1;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2141,            if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2142,                est = iZeroOffsetPrintText.length();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2144,            return est;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2150,            if (displayZone == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2151,                return;  // no zone,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2153,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2154,                buf.append(iZeroOffsetPrintText);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2155,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2157,            if (displayOffset >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2158,                buf.append('+');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2160,                buf.append('-');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2161,                displayOffset = -displayOffset;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2164,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2165,"            FormatUtils.appendPaddedInteger(buf, hours, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2166,            if (iMaxFields == 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2167,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2169,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2170,            if (displayOffset == 0 && iMinFields <= 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2171,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2174,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2175,            if (iShowSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2176,                buf.append(':');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2178,"            FormatUtils.appendPaddedInteger(buf, minutes, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2179,            if (iMaxFields == 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2180,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2182,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2183,            if (displayOffset == 0 && iMinFields <= 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2184,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2187,            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2188,            if (iShowSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2189,                buf.append(':');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2191,"            FormatUtils.appendPaddedInteger(buf, seconds, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2192,            if (iMaxFields == 3) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2193,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2195,            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2196,            if (displayOffset == 0 && iMinFields <= 3) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2197,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2200,            if (iShowSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2201,                buf.append('.');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2203,"            FormatUtils.appendPaddedInteger(buf, displayOffset, 3);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2204,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2209,            if (displayZone == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2210,                return;  // no zone,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2212,            if (displayOffset == 0 && iZeroOffsetPrintText != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2213,                out.write(iZeroOffsetPrintText);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2214,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2216,            if (displayOffset >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2217,                out.write('+');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2219,                out.write('-');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2220,                displayOffset = -displayOffset;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2223,            int hours = displayOffset / DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2224,"            FormatUtils.writePaddedInteger(out, hours, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2225,            if (iMaxFields == 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2226,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2228,            displayOffset -= hours * (int)DateTimeConstants.MILLIS_PER_HOUR;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2229,            if (displayOffset == 0 && iMinFields == 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2230,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2233,            int minutes = displayOffset / DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2234,            if (iShowSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2235,                out.write(':');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2237,"            FormatUtils.writePaddedInteger(out, minutes, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2238,            if (iMaxFields == 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2239,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2241,            displayOffset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2242,            if (displayOffset == 0 && iMinFields == 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2243,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2246,            int seconds = displayOffset / DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2247,            if (iShowSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2248,                out.write(':');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2250,"            FormatUtils.writePaddedInteger(out, seconds, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2251,            if (iMaxFields == 3) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2252,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2254,            displayOffset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2255,            if (displayOffset == 0 && iMinFields == 3) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2256,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2259,            if (iShowSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2260,                out.write('.');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2262,"            FormatUtils.writePaddedInteger(out, displayOffset, 3);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2263,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2267,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2271,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2274,            return estimatePrintedLength();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2282,                if (iZeroOffsetParseText.length() == 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2284,                    if (limit > 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2285,                        char c = text.charAt(position);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2286,                        if (c == '-' || c == '+') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2287,                            break zeroOffset;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2290,                    bucket.setOffset(Integer.valueOf(0));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2291,                    return position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2293,"                if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2294,                    bucket.setOffset(Integer.valueOf(0));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2295,                    return position + iZeroOffsetParseText.length();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2302,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2312,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2332,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2339,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2350,                    break parse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2359,                } else if (c >= '0' && c <= '9') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2360,                    expectSeparators = false;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2369,                    break parse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2372,                    return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2377,                    return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2389,                if (expectSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2390,                    if (text.charAt(position) != ':') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2391,                        break parse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2393,                    limit--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2394,                    position++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2397,"                count = digitCount(text, position, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2398,                if (count == 0 && !expectSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2399,                    break parse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2400,                } else if (count < 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2402,                    return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2405,"                int seconds = FormatUtils.parseTwoDigits(text, position);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2406,                if (seconds > 59) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2407,                    return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2409,                offset += seconds * DateTimeConstants.MILLIS_PER_SECOND;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2410,                limit -= 2;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2411,                position += 2;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2415,                if (limit <= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2416,                    break parse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2419,                if (expectSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2420,"                    if (text.charAt(position) != '.' && text.charAt(position) != ',') {",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2421,                        break parse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2423,                    limit--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2424,                    position++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2427,"                count = digitCount(text, position, 3);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2428,                if (count == 0 && !expectSeparators) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2429,                    break parse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2430,                } else if (count < 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2432,                    return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2435,                offset += (text.charAt(position++) - '0') * 100;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2436,                if (count > 1) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2437,                    offset += (text.charAt(position++) - '0') * 10;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2438,                    if (count > 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2439,                        offset += text.charAt(position++) - '0';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2458,                    break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1895,            super();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1896,            iFieldType = fieldType;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1898,            if (maxDigits > 18) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1899,                maxDigits = 18;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1901,            iMinDigits = minDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1902,            iMaxDigits = maxDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1903,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1906,            return iMaxDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1913,"                printTo(buf, null, instant, chrono);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1916,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1914,            } catch (IOException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1917,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1922,"            printTo(null, out, instant, chrono);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1923,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1928,"            long millis = partial.getChronology().set(partial, 0L);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1930,"                printTo(buf, null, millis, partial.getChronology());",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1933,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1931,            } catch (IOException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1934,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1939,"            long millis = partial.getChronology().set(partial, 0L);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1940,"            printTo(null, out, millis, partial.getChronology());",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1941,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1946,            DateTimeField field = iFieldType.getField(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1947,            int minDigits = iMinDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1951,                fraction = field.remainder(instant);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1959,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1952,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1953,                if (buf != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1954,"                    appendUnknownString(buf, minDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1956,"                    printUnknownString(out, minDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1958,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1961,            if (fraction == 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1962,                if (buf != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1963,                    while (--minDigits >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1964,                        buf.append('0');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1967,                    while (--minDigits >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1968,                        out.write('0');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1971,                return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1975,"            long[] fractionData = getFractionData(fraction, field);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1976,            long scaled = fractionData[0];,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1977,            int maxDigits = (int) fractionData[1];,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1979,            if ((scaled & 0x7fffffff) == scaled) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1980,                str = Integer.toString((int) scaled);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1982,                str = Long.toString(scaled);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1985,            int length = str.length();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1986,            int digits = maxDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1987,            while (length < digits) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1988,                if (buf != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1989,                    buf.append('0');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1991,                    out.write('0');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1993,                minDigits--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1994,                digits--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1997,            if (minDigits < digits) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1999,                while (minDigits < digits) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2000,                    if (length <= 1 || str.charAt(length - 1) != '0') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2001,                        break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2003,                    digits--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2004,                    length--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2006,                if (length < str.length()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2007,                    if (buf != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2008,                        for (int i=0; i<length; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2009,                            buf.append(str.charAt(i));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2012,                        for (int i=0; i<length; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2013,                            out.write(str.charAt(i));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2016,                    return;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2020,            if (buf != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2021,                buf.append(str);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2023,                out.write(str);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2025,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2028,            long rangeMillis = field.getDurationField().getUnitMillis();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2030,            int maxDigits = iMaxDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2032,                switch (maxDigits) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2033,                default: scalar = 1L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2034,                case 1:  scalar = 10L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2035,                case 2:  scalar = 100L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2036,                case 3:  scalar = 1000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2037,                case 4:  scalar = 10000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2038,                case 5:  scalar = 100000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2039,                case 6:  scalar = 1000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2040,                case 7:  scalar = 10000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2041,                case 8:  scalar = 100000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2042,                case 9:  scalar = 1000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2043,                case 10: scalar = 10000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2044,                case 11: scalar = 100000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2045,                case 12: scalar = 1000000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2046,                case 13: scalar = 10000000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2047,                case 14: scalar = 100000000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2048,                case 15: scalar = 1000000000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2049,                case 16: scalar = 10000000000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2050,                case 17: scalar = 100000000000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2051,                case 18: scalar = 1000000000000000000L; break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2053,                if (((rangeMillis * scalar) / scalar) == rangeMillis) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2054,                    break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2057,                maxDigits--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2060,"            return new long[] {fraction * scalar / rangeMillis, maxDigits};",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2064,            return iMaxDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2068,            DateTimeField field = iFieldType.getField(bucket.getChronology());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2070,"            int limit = Math.min(iMaxDigits, text.length() - position);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2072,            long value = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2073,            long n = field.getDurationField().getUnitMillis() * 10;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2074,            int length = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2075,            while (length < limit) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2076,                char c = text.charAt(position + length);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2077,                if (c < '0' || c > '9') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2078,                    break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2080,                length++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2081,                long nn = n / 10;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2082,                value += (c - '0') * nn;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2083,                n = nn;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2084,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2086,            value /= 10;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2088,            if (length == 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2089,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2092,            if (value > Integer.MAX_VALUE) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2093,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2096,            DateTimeField parseField = new PreciseDateTimeField(,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2101,"            bucket.saveField(parseField, (int) value);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,2103,            return position + length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1754,            super();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1755,            iFieldType = fieldType;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1756,            iShort = isShort;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1757,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1748,"        private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1760,            return iShort ? 6 : 20;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1767,"                buf.append(print(instant, chrono, locale));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1770,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1768,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1769,                buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1771,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1777,"                out.write(print(instant, chrono, locale));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1780,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1778,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1779,                out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1781,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1785,"                buf.append(print(partial, locale));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1788,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1786,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1787,                buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1789,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1793,"                out.write(print(partial, locale));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1796,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1794,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1795,                out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1797,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1800,            DateTimeField field = iFieldType.getField(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1801,            if (iShort) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1802,"                return field.getAsShortText(instant, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1804,"                return field.getAsText(instant, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1809,            if (partial.isSupported(iFieldType)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1810,                DateTimeField field = iFieldType.getField(partial.getChronology());,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1811,                if (iShort) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1812,"                    return field.getAsShortText(partial, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1814,"                    return field.getAsText(partial, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1817,"                return ""\ufffd"";",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1822,            return estimatePrintedLength();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1827,            Locale locale = bucket.getLocale();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1830,            Set<String> validValues = null;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1831,            int maxLength = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1832,            synchronized (cParseCache) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1833,"                Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1834,                if (innerMap == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1835,"                    innerMap = new HashMap<DateTimeFieldType, Object[]>();",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1836,"                    cParseCache.put(locale, innerMap);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1838,                Object[] array = innerMap.get(iFieldType);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1839,                if (array == null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1840,                    validValues = new HashSet<String>(32);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1841,"                    MutableDateTime dt = new MutableDateTime(0L, DateTimeZone.UTC);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1842,                    Property property = dt.property(iFieldType);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1843,                    int min = property.getMinimumValueOverall();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1844,                    int max = property.getMaximumValueOverall();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1845,                    if (max - min > 32) {  // protect against invalid fields,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1846,                        return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1848,                    maxLength = property.getMaximumTextLength(locale);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1849,                    for (int i = min; i <= max; i++) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1850,                        property.set(i);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1851,                        validValues.add(property.getAsShortText(locale));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1852,                        validValues.add(property.getAsShortText(locale).toLowerCase(locale));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1853,                        validValues.add(property.getAsShortText(locale).toUpperCase(locale));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1854,                        validValues.add(property.getAsText(locale));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1855,                        validValues.add(property.getAsText(locale).toLowerCase(locale));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1856,                        validValues.add(property.getAsText(locale).toUpperCase(locale));,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1858,"                    if (""en"".equals(locale.getLanguage()) && iFieldType == DateTimeFieldType.era()) {",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1860,"                        validValues.add(""BCE"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1861,"                        validValues.add(""bce"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1862,"                        validValues.add(""CE"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1863,"                        validValues.add(""ce"");",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1864,                        maxLength = 3;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1866,"                    array = new Object[] {validValues, Integer.valueOf(maxLength)};",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1867,"                    innerMap.put(iFieldType, array);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1868,                } else {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1869,                    validValues = (Set<String>) array[0];,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1870,                    maxLength = ((Integer) array[1]).intValue();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1872,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1874,"            int limit = Math.min(text.length(), position + maxLength);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1875,            for (int i = limit; i > position; i--) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1876,"                String match = text.substring(position, i);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1877,                if (validValues.contains(match)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1878,"                    bucket.saveField(iFieldType, match, locale);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1879,                    return i;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1882,            return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1561,            super();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1562,            iType = type;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1563,            iPivot = pivot;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1564,            iLenientParse = lenientParse;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1565,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1568,            return iLenientParse ? 4 : 2;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1572,            int limit = text.length() - position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1574,            if (!iLenientParse) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1575,"                limit = Math.min(2, limit);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1576,                if (limit < 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1577,                    return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1580,                boolean hasSignChar = false;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1581,                boolean negative = false;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1582,                int length = 0;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1583,                while (length < limit) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1584,                    char c = text.charAt(position + length);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1585,                    if (length == 0 && (c == '-' || c == '+')) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1586,                        hasSignChar = true;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1587,                        negative = c == '-';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1588,                        if (negative) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1589,                            length++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1592,                            position++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1593,                            limit--;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1595,                        continue;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1597,                    if (c < '0' || c > '9') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1598,                        break;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1600,                    length++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1601,                },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1603,                if (length == 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1604,                    return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1607,                if (hasSignChar || length != 2) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1609,                    if (length >= 9) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1612,"                        value = Integer.parseInt(text.substring(position, position += length));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1614,                        int i = position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1615,                        if (negative) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1616,                            i++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1619,                            value = text.charAt(i++) - '0';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1622,                        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1620,                        } catch (StringIndexOutOfBoundsException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1621,                            return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1623,                        position += length;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1624,                        while (i < position) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1625,                            value = ((value << 3) + (value << 1)) + text.charAt(i++) - '0';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1627,                        if (negative) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1628,                            value = -value;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1632,"                    bucket.saveField(iType, value);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1633,                    return position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1638,            char c = text.charAt(position);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1639,            if (c < '0' || c > '9') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1640,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1642,            year = c - '0';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1643,            c = text.charAt(position + 1);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1644,            if (c < '0' || c > '9') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1645,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1647,            year = ((year << 3) + (year << 1)) + c - '0';,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1649,            int pivot = iPivot;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1651,            if (bucket.getPivotYear() != null) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1652,                pivot = bucket.getPivotYear().intValue();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1655,            int low = pivot - 50;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1658,            if (low >= 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1659,                t = low % 100;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1661,                t = 99 + ((low + 1) % 100);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1664,            year += low + ((year < t) ? 100 : 0) - t;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1666,"            bucket.saveField(iType, year);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1667,            return position + 2;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1671,            return 2;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1677,"            int year = getTwoDigitYear(instant, chrono);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1678,            if (year < 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1679,                buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1680,                buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1682,"                FormatUtils.appendPaddedInteger(buf, year, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1684,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1689,"            int year = getTwoDigitYear(instant, chrono);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1690,            if (year < 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1691,                out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1692,                out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1694,"                FormatUtils.writePaddedInteger(out, year, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1696,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1700,                int year = iType.getField(chrono).get(instant);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1701,                if (year < 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1702,                    year = -year;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1704,                return year % 100;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1705,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1706,                return -1;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1711,            int year = getTwoDigitYear(partial);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1712,            if (year < 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1713,                buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1714,                buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1716,"                FormatUtils.appendPaddedInteger(buf, year, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1718,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1721,            int year = getTwoDigitYear(partial);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1722,            if (year < 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1723,                out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1724,                out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1726,"                FormatUtils.writePaddedInteger(out, year, 2);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1728,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1731,            if (partial.isSupported(iType)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1733,                    int year = partial.get(iType);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1734,                    if (year < 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1735,                        year = -year;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1737,                    return year % 100;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1738,                } catch (RuntimeException e) {},0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1740,            return -1;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1522,"            super(fieldType, numDigits, signed, numDigits);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1523,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1526,"            int newPos = super.parseInto(bucket, text, position);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1527,            if (newPos < 0) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1528,                return newPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1530,            int expectedPos = position + iMaxParsedDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1531,            if (newPos != expectedPos) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1532,                if (iSigned) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1533,                    char c = text.charAt(position);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1534,                    if (c == '-' || c == '+') {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1535,                        expectedPos++;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1538,                if (newPos > expectedPos) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1540,                    return ~(expectedPos + 1);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1541,                } else if (newPos < expectedPos) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1543,                    return ~newPos;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1546,            return newPos;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,89,"        this(instantLocal, chrono, locale, null, 2000);",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,90,    },0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,105,"        this(instantLocal, chrono, locale, pivotYear, 2000);",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,106,    },0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,135,        return iChrono;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,145,        return iLocale;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,153,        return iZone;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,160,        iSavedState = null;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,161,        iZone = zone;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,162,    },0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,171,        return (iOffset != null ? iOffset : 0);,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,178,        return iOffset;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,187,        iSavedState = null;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,188,        iOffset = offset;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,189,    },0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,213,        return iPivotYear;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,226,        iPivotYear = pivotYear;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,227,    },0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,237,"        saveField(new SavedField(field, value));",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,238,    },0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,247,"        saveField(new SavedField(fieldType.getField(iChrono), value));",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,248,    },0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,258,"        saveField(new SavedField(fieldType.getField(iChrono), text, locale));",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,259,    },0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,262,        SavedField[] savedFields = iSavedFields;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,263,        int savedFieldsCount = iSavedFieldsCount;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,265,        if (savedFieldsCount == savedFields.length || iSavedFieldsShared) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,267,            SavedField[] newArray = new SavedField,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,269,"            System.arraycopy(savedFields, 0, newArray, 0, savedFieldsCount);",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,270,            iSavedFields = savedFields = newArray;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,271,            iSavedFieldsShared = false;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,274,        iSavedState = null;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,275,        savedFields[savedFieldsCount] = field;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,276,        iSavedFieldsCount = savedFieldsCount + 1;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,277,    },0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,287,        if (iSavedState == null) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,288,            iSavedState = new SavedState();,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,290,        return iSavedState;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,302,        if (savedState instanceof SavedState) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,303,            if (((SavedState) savedState).restoreState(this)) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,304,                iSavedState = savedState;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,305,                return true;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,308,        return false;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,319,"        return computeMillis(false, null);",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,331,"        return computeMillis(resetFields, null);",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,348,            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,349,            iSavedFieldsShared = false;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,354,            DurationField months = DurationFieldType.months().getField(iChrono);,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,355,            DurationField days = DurationFieldType.days().getField(iChrono);,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,356,            DurationField first = savedFields[0].iField.getDurationField();,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,357,"            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,358,"                saveField(DateTimeFieldType.year(), iDefaultYear);",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,359,"                return computeMillis(resetFields, text);",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,366,"                millis = savedFields[i].set(millis, resetFields);",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,370,"                    millis = savedFields[i].set(millis, i == (count - 1));",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,373,        } catch (IllegalFieldValueException e) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,374,            if (text != null) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,375,"                e.prependMessage(""Cannot parse \"""" + text + '""');",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,377,            throw e;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,382,        } else if (iZone != null) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,383,            int offset = iZone.getOffsetFromLocal(millis);,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,384,            millis -= offset;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,385,            if (offset != iZone.getOffset(millis)) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,386,"                String message = ""Illegal instant due to time zone offset transition ("" + iZone + ')';",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,387,                if (text != null) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,388,"                    message = ""Cannot parse \"""" + text + ""\"": "" + message;",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,390,                throw new IllegalInstantException(message);,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,417,"            Arrays.sort(array, 0, high);",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,420,                for (int j=i; j>0 && (array[j-1]).compareTo(array[j])>0; j--) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,421,                    SavedField t = array[j];,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,422,                    array[j] = array[j-1];,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,423,                    array[j-1] = t;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,511,        if (a == null || !a.isSupported()) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,512,            if (b == null || !b.isSupported()) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,513,                return 0;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,515,            return -1;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,517,        if (b == null || !b.isSupported()) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,518,            return 1;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,520,        return -a.compareTo(b);,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,56,public class DateTimeParserBucket {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1401,"            super(fieldType, maxParsedDigits, signed);",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1402,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1405,            return iMaxParsedDigits;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1412,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1413,"                FormatUtils.appendUnpaddedInteger(buf, field.get(instant));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1416,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1414,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1415,                buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1417,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1423,                DateTimeField field = iFieldType.getField(chrono);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1424,"                FormatUtils.writeUnpaddedInteger(out, field.get(instant));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1427,            },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1425,            } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1426,                out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1428,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1431,            if (partial.isSupported(iFieldType)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1433,"                    FormatUtils.appendUnpaddedInteger(buf, partial.get(iFieldType));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1436,                },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1434,                } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1435,                    buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1438,                buf.append('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1440,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1443,            if (partial.isSupported(iFieldType)) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1445,"                    FormatUtils.writeUnpaddedInteger(out, partial.get(iFieldType));",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1448,                },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1446,                } catch (RuntimeException e) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1447,                    out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1450,                out.write('\ufffd');,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1452,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1270,            super();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1271,            iValue = value;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1272,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1275,            return iValue.length();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1281,            buf.append(iValue);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1282,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1287,            out.write(iValue);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1288,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1291,            buf.append(iValue);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1292,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1295,            out.write(iValue);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1296,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1299,            return iValue.length();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1303,"            if (text.regionMatches(true, position, iValue, 0, iValue.length())) {",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1304,                return position + iValue.length();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1306,            return ~position;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,435,        SavedState() {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,436,            this.iZone = DateTimeParserBucket.this.iZone;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,437,            this.iOffset = DateTimeParserBucket.this.iOffset;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,438,            this.iSavedFields = DateTimeParserBucket.this.iSavedFields;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,439,            this.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,440,        },0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,443,            if (enclosing != DateTimeParserBucket.this) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,444,                return false;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,446,            enclosing.iZone = this.iZone;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,447,            enclosing.iOffset = this.iOffset;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,448,            enclosing.iSavedFields = this.iSavedFields;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,449,            if (this.iSavedFieldsCount < enclosing.iSavedFieldsCount) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,454,                enclosing.iSavedFieldsShared = true;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,456,            enclosing.iSavedFieldsCount = this.iSavedFieldsCount;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,457,            return true;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,467,"        SavedField(DateTimeField field, int value) {",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,468,            iField = field;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,469,            iValue = value;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,470,            iText = null;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,471,            iLocale = null;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,472,        },0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,474,"        SavedField(DateTimeField field, String text, Locale locale) {",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,475,            iField = field;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,476,            iValue = 0;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,477,            iText = text;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,478,            iLocale = locale;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,479,        },0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,482,            if (iText == null) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,483,"                millis = iField.set(millis, iValue);",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,485,"                millis = iField.set(millis, iText, iLocale);",0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,487,            if (reset) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,488,                millis = iField.roundFloor(millis);,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,490,            return millis;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,499,            DateTimeField other = obj.iField;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,500,            int result = compareReverse,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,502,            if (result != 0) {,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,503,                return result;,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,505,            return compareReverse,0.0,0,,0
org/joda/time/format/DateTimeParserBucket,8,461,    static class SavedField implements Comparable<SavedField> {,0.0,0,,0
org/joda/time/format/FormatUtils,8,36,    private FormatUtils() {,0.0,0,,0
org/joda/time/format/FormatUtils,8,37,    },0.0,0,,0
org/joda/time/format/FormatUtils,8,51,            buf.append('-');,0.0,0,,0
org/joda/time/format/FormatUtils,8,52,            if (value != Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,53,                value = -value;,0.0,0,,0
org/joda/time/format/FormatUtils,8,55,                for (; size > 10; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,56,                    buf.append('0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,58,"                buf.append("""" + -(long)Integer.MIN_VALUE);",0.0,0,,0
org/joda/time/format/FormatUtils,8,59,                return;,0.0,0,,0
org/joda/time/format/FormatUtils,8,69,                buf.append('0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,80,            if (value < 1000) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,81,                digits = 3;,0.0,0,,0
org/joda/time/format/FormatUtils,8,82,            } else if (value < 10000) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,83,                digits = 4;,0.0,0,,0
org/joda/time/format/FormatUtils,8,85,                digits = (int)(Math.log(value) / LOG_10) + 1;,0.0,0,,0
org/joda/time/format/FormatUtils,8,87,            for (; size > digits; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,88,                buf.append('0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,90,            buf.append(Integer.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,8,105,        int intValue = (int)value;,0.0,0,,0
org/joda/time/format/FormatUtils,8,106,        if (intValue == value) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,107,"            appendPaddedInteger(buf, intValue, size);",0.0,0,,0
org/joda/time/format/FormatUtils,8,108,        } else if (size <= 19) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,109,            buf.append(Long.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,8,111,            if (value < 0) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,112,                buf.append('-');,0.0,0,,0
org/joda/time/format/FormatUtils,8,113,                if (value != Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,114,                    value = -value;,0.0,0,,0
org/joda/time/format/FormatUtils,8,116,                    for (; size > 19; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,117,                        buf.append('0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,119,"                    buf.append(""9223372036854775808"");",0.0,0,,0
org/joda/time/format/FormatUtils,8,120,                    return;,0.0,0,,0
org/joda/time/format/FormatUtils,8,123,            int digits = (int)(Math.log(value) / LOG_10) + 1;,0.0,0,,0
org/joda/time/format/FormatUtils,8,124,            for (; size > digits; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,125,                buf.append('0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,127,            buf.append(Long.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,8,129,    },0.0,0,,0
org/joda/time/format/FormatUtils,8,144,        if (value < 0) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,145,            out.write('-');,0.0,0,,0
org/joda/time/format/FormatUtils,8,146,            if (value != Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,147,                value = -value;,0.0,0,,0
org/joda/time/format/FormatUtils,8,149,                for (; size > 10; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,150,                    out.write('0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,152,"                out.write("""" + -(long)Integer.MIN_VALUE);",0.0,0,,0
org/joda/time/format/FormatUtils,8,153,                return;,0.0,0,,0
org/joda/time/format/FormatUtils,8,156,        if (value < 10) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,157,            for (; size > 1; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,158,                out.write('0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,160,            out.write(value + '0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,161,        } else if (value < 100) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,162,            for (; size > 2; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,163,                out.write('0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,168,            int d = ((value + 1) * 13421772) >> 27;,0.0,0,,0
org/joda/time/format/FormatUtils,8,169,            out.write(d + '0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,171,            out.write(value - (d << 3) - (d << 1) + '0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,172,        } else {,0.0,0,,0
org/joda/time/format/FormatUtils,8,174,            if (value < 1000) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,175,                digits = 3;,0.0,0,,0
org/joda/time/format/FormatUtils,8,176,            } else if (value < 10000) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,177,                digits = 4;,0.0,0,,0
org/joda/time/format/FormatUtils,8,179,                digits = (int)(Math.log(value) / LOG_10) + 1;,0.0,0,,0
org/joda/time/format/FormatUtils,8,181,            for (; size > digits; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,182,                out.write('0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,184,            out.write(Integer.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,8,186,    },0.0,0,,0
org/joda/time/format/FormatUtils,8,201,        int intValue = (int)value;,0.0,0,,0
org/joda/time/format/FormatUtils,8,202,        if (intValue == value) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,203,"            writePaddedInteger(out, intValue, size);",0.0,0,,0
org/joda/time/format/FormatUtils,8,204,        } else if (size <= 19) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,205,            out.write(Long.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,8,207,            if (value < 0) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,208,                out.write('-');,0.0,0,,0
org/joda/time/format/FormatUtils,8,209,                if (value != Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,210,                    value = -value;,0.0,0,,0
org/joda/time/format/FormatUtils,8,212,                    for (; size > 19; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,213,                        out.write('0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,215,"                    out.write(""9223372036854775808"");",0.0,0,,0
org/joda/time/format/FormatUtils,8,216,                    return;,0.0,0,,0
org/joda/time/format/FormatUtils,8,219,            int digits = (int)(Math.log(value) / LOG_10) + 1;,0.0,0,,0
org/joda/time/format/FormatUtils,8,220,            for (; size > digits; size--) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,221,                out.write('0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,223,            out.write(Long.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,8,225,    },0.0,0,,0
org/joda/time/format/FormatUtils,8,236,        if (value < 0) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,237,            buf.append('-');,0.0,0,,0
org/joda/time/format/FormatUtils,8,238,            if (value != Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,239,                value = -value;,0.0,0,,0
org/joda/time/format/FormatUtils,8,241,"                buf.append("""" + -(long)Integer.MIN_VALUE);",0.0,0,,0
org/joda/time/format/FormatUtils,8,242,                return;,0.0,0,,0
org/joda/time/format/FormatUtils,8,245,        if (value < 10) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,246,            buf.append((char)(value + '0'));,0.0,0,,0
org/joda/time/format/FormatUtils,8,247,        } else if (value < 100) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,251,            int d = ((value + 1) * 13421772) >> 27;,0.0,0,,0
org/joda/time/format/FormatUtils,8,252,            buf.append((char) (d + '0'));,0.0,0,,0
org/joda/time/format/FormatUtils,8,254,            buf.append((char) (value - (d << 3) - (d << 1) + '0'));,0.0,0,,0
org/joda/time/format/FormatUtils,8,255,        } else {,0.0,0,,0
org/joda/time/format/FormatUtils,8,256,            buf.append(Integer.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,8,258,    },0.0,0,,0
org/joda/time/format/FormatUtils,8,269,        int intValue = (int)value;,0.0,0,,0
org/joda/time/format/FormatUtils,8,270,        if (intValue == value) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,271,"            appendUnpaddedInteger(buf, intValue);",0.0,0,,0
org/joda/time/format/FormatUtils,8,273,            buf.append(Long.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,8,275,    },0.0,0,,0
org/joda/time/format/FormatUtils,8,288,        if (value < 0) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,289,            out.write('-');,0.0,0,,0
org/joda/time/format/FormatUtils,8,290,            if (value != Integer.MIN_VALUE) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,291,                value = -value;,0.0,0,,0
org/joda/time/format/FormatUtils,8,293,"                out.write("""" + -(long)Integer.MIN_VALUE);",0.0,0,,0
org/joda/time/format/FormatUtils,8,294,                return;,0.0,0,,0
org/joda/time/format/FormatUtils,8,297,        if (value < 10) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,298,            out.write(value + '0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,299,        } else if (value < 100) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,303,            int d = ((value + 1) * 13421772) >> 27;,0.0,0,,0
org/joda/time/format/FormatUtils,8,304,            out.write(d + '0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,306,            out.write(value - (d << 3) - (d << 1) + '0');,0.0,0,,0
org/joda/time/format/FormatUtils,8,307,        } else {,0.0,0,,0
org/joda/time/format/FormatUtils,8,308,            out.write(Integer.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,8,310,    },0.0,0,,0
org/joda/time/format/FormatUtils,8,323,        int intValue = (int)value;,0.0,0,,0
org/joda/time/format/FormatUtils,8,324,        if (intValue == value) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,325,"            writeUnpaddedInteger(out, intValue);",0.0,0,,0
org/joda/time/format/FormatUtils,8,327,            out.write(Long.toString(value));,0.0,0,,0
org/joda/time/format/FormatUtils,8,329,    },0.0,0,,0
org/joda/time/format/FormatUtils,8,336,        if (value < 0) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,337,            if (value != Long.MIN_VALUE) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,338,                return calculateDigitCount(-value) + 1;,0.0,0,,0
org/joda/time/format/FormatUtils,8,340,                return 20;,0.0,0,,0
org/joda/time/format/FormatUtils,8,343,        return ,0.0,0,,0
org/joda/time/format/FormatUtils,8,357,        int sampleLen = errorPos + 32;,0.0,0,,0
org/joda/time/format/FormatUtils,8,359,        if (text.length() <= sampleLen + 3) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,360,            sampleText = text;,0.0,0,,0
org/joda/time/format/FormatUtils,8,362,"            sampleText = text.substring(0, sampleLen).concat(""..."");",0.0,0,,0
org/joda/time/format/FormatUtils,8,365,        if (errorPos <= 0) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,366,"            return ""Invalid format: \"""" + sampleText + '""';",0.0,0,,0
org/joda/time/format/FormatUtils,8,369,        if (errorPos >= text.length()) {,0.0,0,,0
org/joda/time/format/FormatUtils,8,370,"            return ""Invalid format: \"""" + sampleText + ""\"" is too short"";",0.0,0,,0
org/joda/time/format/FormatUtils,8,373,"        return ""Invalid format: \"""" + sampleText + ""\"" is malformed at \"""" +",0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1207,            super();,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1208,            iValue = value;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1209,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1212,            return 1;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1218,            buf.append(iValue);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1219,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1224,            out.write(iValue);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1225,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1228,            buf.append(iValue);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1229,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1232,            out.write(iValue);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1233,        },0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1236,            return 1;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1240,            if (position >= text.length()) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1241,                return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1244,            char a = text.charAt(position);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1245,            char b = iValue;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1247,            if (a != b) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1248,                a = Character.toUpperCase(a);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1249,                b = Character.toUpperCase(b);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1250,                if (a != b) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1251,                    a = Character.toLowerCase(a);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1252,                    b = Character.toLowerCase(b);,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1253,                    if (a != b) {,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1254,                        return ~position;,0.0,0,,0
org/joda/time/format/DateTimeFormatterBuilder,8,1259,            return position + 1;,0.0,0,,0
