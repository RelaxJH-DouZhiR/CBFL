dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,"                            break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,13,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,"                    repaired[i] = 1.0;
",0,0,1,1,2,0,0,0,0,5,18,10,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,911,"                res[i] = (x[i] - boundaries[0][i]) / diff;
",2,2,1,5,10,0,0,0,0,17,42,7,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,"                res[i] = diff * x[i] + boundaries[0][i];
",2,2,1,4,8,0,0,0,0,17,40,7,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,948,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,"                value = CMAESOptimizer.this
",4,0,0,0,0,0,0,0,0,5,27,7,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,"            double[] repaired = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,41,6,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,"                if (x[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,15,7,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,"                } else if (x[i] > 1.0) {
",0,1,1,2,6,0,0,0,0,5,24,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,"            double penalty = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1011,"                double diff = Math.abs(x[i] - repaired[i]);
",2,1,1,3,6,0,4,0,0,15,43,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1012,"                penalty += diff * valueRange;
",6,1,0,0,0,0,0,0,0,8,29,7,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,"            return isMinimize ? penalty : -penalty;
",6,0,0,0,0,1,0,0,0,7,39,6,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,529,"                boundaries = new double[2][];
",2,0,0,2,4,0,0,0,0,3,29,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,530,"                boundaries[0] = lB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,"                boundaries[1] = uB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,508,"                hasFiniteBounds = true;
",2,0,0,0,0,0,0,0,0,4,23,8,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,509,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,515,"            for (int i = 0; i < lB.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,516,"                if (Double.isInfinite(lB[i]) ||
",0,1,1,2,5,0,4,0,0,9,31,8,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,523,"            if (hasInfiniteBounds) {
",2,0,0,1,3,0,0,0,0,2,24,6,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,128,"            lowerBound = lower.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,136,"            upperBound = upper.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,109,"            if (upper.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,112,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,113,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,114,"                final double hi = upper[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,115,"                if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,100,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,101,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,102,"                final double lo = lower[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,103,"                if (v < lo) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,97,"            if (lower.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,378,"                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))
",2,0,0,2,5,0,14,0,0,17,52,13,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,407,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);
",0,0,0,1,2,0,12,0,0,12,52,10,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,696,"        double negccov = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,697,"        if (ccov1 + ccovmu > 0) {
",4,2,0,1,3,0,0,0,0,6,25,4,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,698,"            RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))
",2,0,0,2,4,0,10,2,0,14,56,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,700,"            RealMatrix roneu = pc.multiply(pc.transpose())
",2,0,0,2,4,0,8,2,0,12,46,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,703,"            double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);
",10,2,0,1,2,0,0,0,0,12,50,7,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,704,"            oldFac += 1. - ccov1 - ccovmu;
",6,1,0,0,0,0,0,0,0,8,30,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,705,"            if (isActiveCMA) {
",2,0,0,1,3,0,0,0,0,2,18,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,707,"                negccov = (1. - ccovmu) * 0.25 * mueff /
",6,3,0,1,2,0,0,0,0,10,40,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,709,"                double negminresidualvariance = 0.66;
",2,0,0,0,0,0,0,0,0,2,37,9,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,712,"                double negalphaold = 0.5; // where to make up for the variance
",2,0,0,0,0,0,0,0,0,2,62,9,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,715,"                int[] arReverseIndex = reverse(arindex);
",2,0,0,2,4,0,4,0,0,6,40,9,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,716,"                RealMatrix arzneg
",2,0,0,0,0,0,0,2,0,4,17,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,718,"                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));
",2,0,0,3,6,0,8,2,0,12,51,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,719,"                int[] idxnorms = sortedIndices(arnorms.getRow(0));
",2,0,0,3,6,0,6,0,0,8,50,9,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,720,"                RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);
",2,0,0,1,2,0,6,2,0,10,60,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,721,"                int[] idxReverse = reverse(idxnorms);
",2,0,0,2,4,0,4,0,0,6,37,9,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,722,"                RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);
",2,0,0,1,2,0,6,2,0,10,63,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,723,"                arnorms = divide(arnormsReverse, arnormsSorted);
",2,0,0,1,2,0,6,0,0,9,48,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,724,"                int[] idxInv = inverse(idxnorms);
",2,0,0,2,4,0,4,0,0,6,33,9,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,725,"                RealMatrix arnormsInv = selectColumns(arnorms, idxInv);
",2,0,0,1,2,0,6,2,0,10,55,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,727,"                double negcovMax = (1. - negminresidualvariance) /
",4,2,0,1,2,0,0,0,0,6,50,9,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,729,"                if (negccov > negcovMax) {
",4,1,0,1,3,0,0,0,0,5,26,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,732,"                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));
",2,0,0,2,4,0,10,0,0,13,57,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,733,"                RealMatrix artmp = BD.multiply(arzneg);
",2,0,0,1,2,0,6,2,0,10,39,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,734,"                RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(
",2,0,0,2,5,0,10,2,0,14,57,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,736,"                oldFac += negalphaold * negccov;
",6,1,0,0,0,0,0,0,0,8,32,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,737,"                C = C.scalarMultiply(oldFac)
",2,0,0,1,2,0,6,0,0,9,28,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,748,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,759,"        updateBD(negccov);
",0,0,0,1,2,0,4,0,0,4,18,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,760,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,768,"        if (ccov1 + ccovmu + negccov > 0 &&
",6,3,0,0,1,0,0,0,0,9,35,4,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,771,"            C = triu(C, 0).add(triu(C, 1).transpose());
",2,0,0,4,8,0,12,0,0,15,43,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,773,"            EigenDecomposition eig = new EigenDecomposition(C);
",4,0,0,1,2,0,0,4,0,8,51,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,774,"            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors
",2,0,0,1,2,0,4,0,0,7,66,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,775,"            D = eig.getD();
",2,0,0,1,2,0,4,0,0,7,15,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,776,"            diagD = diag(D);
",2,0,0,1,2,0,4,0,0,7,16,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,777,"            if (min(diagD) <= 0) {
",0,1,0,2,5,0,4,0,0,5,22,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,787,"            if (max(diagD) > 1e14 * min(diagD)) {
",0,2,0,3,7,0,8,0,0,10,37,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,792,"            diagC = diag(C);
",2,0,0,1,2,0,4,0,0,7,16,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,793,"            diagD = sqrt(diagD); // D contains standard deviations now
",2,0,0,1,2,0,4,0,0,7,58,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,794,"            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)
",2,0,0,4,8,0,12,0,0,15,65,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,796,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1085,"        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
",2,0,0,6,12,0,8,0,0,10,71,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1086,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1087,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1088,"                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);
",0,1,1,4,8,0,16,0,0,24,46,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1091,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1115,"        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
",2,0,0,6,12,0,8,0,0,10,71,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1116,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1117,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1118,"                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;
",6,2,1,3,6,0,8,0,0,23,44,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1121,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1129,"        double[][] d = new double[1][m.getColumnDimension()];
",2,0,0,5,10,0,4,0,0,6,53,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1130,"        for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,4,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1131,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1132,"            for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1133,"                sum += m.getEntry(r, c);
",2,0,0,1,2,0,8,0,0,11,24,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1135,"            d[0][c] = sum;
",2,0,1,2,4,0,0,0,0,7,14,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1137,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1314,"        int[] inverse = new int[indices.length];
",6,0,0,2,4,0,0,0,0,6,40,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1315,"        for (int i = 0; i < indices.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1316,"            inverse[indices[i]] = i;
",2,0,1,2,4,0,0,0,0,9,24,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1318,"        return inverse;
",2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1326,"        int[] reverse = new int[indices.length];
",6,0,0,2,4,0,0,0,0,6,40,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1327,"        for (int i = 0; i < indices.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1328,"            reverse[i] = indices[indices.length - i - 1];
",6,1,1,2,4,0,0,0,0,14,45,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1330,"        return reverse;
",2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,521,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.07143,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,522,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,523,"        if (vector.getDimension() != nRows) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,527,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,528,"            setEntry(i, column, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,40,7,0.07143,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,530,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,534,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.07143,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,535,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,536,"        final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,537,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,538,"            out[i] = getEntry(row, i);
",0,0,1,2,4,0,6,0,0,11,26,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,541,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,616,"        return getColumnDimension() == getRowDimension();
",0,1,0,2,4,1,4,0,0,5,49,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,60,"public abstract class RealVector {
",2,0,0,0,1,2,0,0,0,4,34,1,0.07143,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1141,"    protected class SparseEntryIterator implements Iterator<Entry> {
",2,0,0,0,1,1,0,4,0,7,64,2,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,62,"    public TriDiagonalTransformer(RealMatrix matrix) {
",4,0,0,1,3,1,0,2,0,7,50,2,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,63,"        if (!matrix.isSquare()) {
",0,0,0,2,5,0,4,0,0,5,25,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,68,"        final int m = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,39,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,69,"        householderVectors = matrix.getData();
",2,0,0,1,2,0,4,0,0,7,38,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,70,"        main      = new double[m];
",2,0,1,1,2,0,0,0,0,5,26,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,71,"        secondary = new double[m - 1];
",4,1,0,1,2,0,0,0,0,6,30,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,72,"        cachedQ   = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,73,"        cachedQt  = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,74,"        cachedT   = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,77,"        transform();
",0,0,0,1,2,0,2,0,0,2,12,5,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,86,"        if (cachedQ == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,87,"            cachedQ = getQT().transpose();
",2,0,0,2,4,0,4,0,0,7,30,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,89,"        return cachedQ;
",2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,98,"        if (cachedQt == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,99,"            final int m = householderVectors.length;
",6,0,0,0,0,1,0,0,0,7,40,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,100,"            double[][] qta = new double[m][m];
",2,0,1,4,8,0,0,0,0,6,34,7,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,103,"            for (int k = m - 1; k >= 1; --k) {
",8,2,0,1,3,0,0,0,0,11,34,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,126,"            qta[0][0] = 1;
",0,0,1,2,4,0,0,0,0,3,14,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,127,"            cachedQt = MatrixUtils.createRealMatrix(qta);
",2,0,0,1,2,0,6,0,0,9,45,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,131,"        return cachedQt;
",2,0,0,0,0,1,0,0,0,2,16,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,175,"        return main;
",2,0,0,0,0,1,0,0,0,2,12,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,185,"        return secondary;
",2,0,0,0,0,1,0,0,0,2,17,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,193,"        final int m = householderVectors.length;
",6,0,0,0,0,1,0,0,0,7,40,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,194,"        final double[] z = new double[m];
",2,0,1,2,4,1,0,0,0,5,33,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,195,"        for (int k = 0; k < m - 1; k++) {
",8,2,0,1,3,0,0,0,0,11,33,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,252,"        main[m - 1] = householderVectors[m - 1][m - 1];
",6,3,1,3,6,0,0,0,0,14,47,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,253,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,85,"    public ArrayRealVector(double[] d) {
",4,0,0,2,5,1,0,0,0,5,36,2,0.07143,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,86,"        data = d.clone();
",2,0,0,1,2,0,4,0,0,7,17,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,87,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,43,"    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();
",2,0,0,1,2,3,4,2,0,11,86,2,0.07143,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,600,"            return data[index];
",0,0,1,1,2,1,0,0,0,4,19,7,0.07143,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,610,"        return data.length;
",4,0,0,0,0,1,0,0,0,4,19,5,0.07143,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,130,"        if (data == null ||
",2,2,0,0,1,0,0,0,0,4,19,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,134,"        return (data.length * data[0].length <= 4096) ?
",6,2,1,2,4,1,0,0,0,10,47,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,216,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);
",10,0,0,1,2,1,2,2,0,15,72,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,217,"        for (int i = 0; i < diagonal.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,218,"            m.setEntry(i, i, diagonal[i]);
",0,0,1,2,4,0,8,0,0,12,30,7,0.07143,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,220,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {
",6,0,0,0,1,0,0,0,0,6,75,2,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,80,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,252,"        return copyOut();
",0,0,0,1,2,1,2,0,0,2,17,5,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,270,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,271,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,274,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,277,"            MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,7,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,278,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,279,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,283,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,284,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,287,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,288,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,289,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,292,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,294,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,298,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,524,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,525,"        final double[][] out = new double[nRows][this.getColumnDimension()];
",2,0,1,5,10,1,2,0,0,7,68,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,527,"        for (int i = 0; i < nRows; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,528,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);
",2,0,1,4,8,0,4,0,0,18,56,7,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,530,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,543,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,0.07143,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,544,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,115,"        throws MathArithmeticException {
",2,0,0,0,1,0,0,0,0,2,32,2,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,81,"    private byte maxIter = 30;
",2,0,0,0,0,1,0,0,0,3,26,2,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,116,"        if (isSymmetric(matrix, false)) {
",0,0,0,2,5,0,4,0,0,5,33,5,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,117,"            transformToTridiagonal(matrix);
",0,0,0,1,2,0,4,0,0,4,31,7,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,118,"            findEigenVectors(transformer.getQ().getData());
",0,0,0,3,6,0,8,0,0,8,47,7,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,123,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,192,"        final int rows = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,42,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,193,"        final int columns = matrix.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,48,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,194,"        final double eps = 10 * rows * columns * Precision.EPSILON;
",10,1,0,0,0,1,0,0,0,12,59,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,195,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,196,"            for (int j = i + 1; j < columns; ++j) {
",10,2,0,1,3,0,0,0,0,13,39,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,208,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,223,"        if (cachedV == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,224,"            final int m = eigenvectors.length;
",6,0,0,0,0,1,0,0,0,7,34,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,225,"            cachedV = MatrixUtils.createRealMatrix(m, m);
",2,0,0,1,2,0,8,0,0,11,45,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,226,"            for (int k = 0; k < m; ++k) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,227,"                cachedV.setColumnVector(k, eigenvectors[k]);
",0,0,1,2,4,0,6,0,0,10,44,9,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,231,"        return cachedV;
",2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,247,"        if (cachedD == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,249,"            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);
",2,0,0,1,2,0,6,0,0,9,64,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,251,"            for (int i = 0; i < imagEigenvalues.length; i++) {
",10,1,0,1,3,0,0,0,0,12,50,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,252,"                if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0) {
",0,1,1,3,7,0,6,0,0,11,64,8,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,254,"                } else if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0) {
",0,1,1,3,8,0,6,0,0,11,71,9,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,259,"        return cachedD;
",2,0,0,0,0,1,0,0,0,2,15,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,555,"        transformer = new TriDiagonalTransformer(matrix);
",4,0,0,1,2,0,0,2,0,7,49,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,556,"        main = transformer.getMainDiagonalRef();
",2,0,0,1,2,0,4,0,0,7,40,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,557,"        secondary = transformer.getSecondaryDiagonalRef();
",2,0,0,1,2,0,4,0,0,7,50,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,558,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,567,"        final double[][]z = householderMatrix.clone();
",2,0,0,3,6,1,4,0,0,7,46,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,568,"        final int n = main.length;
",6,0,0,0,0,1,0,0,0,7,26,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,569,"        realEigenvalues = new double[n];
",2,0,1,1,2,0,0,0,0,5,32,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,570,"        imagEigenvalues = new double[n];
",2,0,1,1,2,0,0,0,0,5,32,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,571,"        final double[] e = new double[n];
",2,0,1,2,4,1,0,0,0,5,33,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,572,"        for (int i = 0; i < n - 1; i++) {
",8,2,0,1,3,0,0,0,0,11,33,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,576,"        realEigenvalues[n - 1] = main[n - 1];
",4,2,1,2,4,0,0,0,0,11,37,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,577,"        e[n - 1] = 0;
",2,1,1,1,2,0,0,0,0,6,13,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,580,"        double maxAbsoluteValue = 0;
",2,0,0,0,0,0,0,0,0,2,28,5,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,581,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,582,"            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {
",2,1,1,3,7,0,4,0,0,11,58,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,583,"                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);
",2,0,1,2,4,0,4,0,0,11,52,8,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,585,"            if (FastMath.abs(e[i]) > maxAbsoluteValue) {
",2,1,1,3,7,0,4,0,0,11,44,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,590,"        if (maxAbsoluteValue != 0) {
",2,1,0,1,3,0,0,0,0,3,28,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,591,"            for (int i=0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,27,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,592,"                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {
",6,2,1,3,7,0,4,0,0,16,79,8,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,595,"                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {
",6,2,1,3,7,0,4,0,0,16,65,8,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,596,"                    e[i]=0;
",0,0,1,1,2,0,0,0,0,5,7,10,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,601,"        for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,602,"            int its = 0;
",2,0,0,0,0,0,0,0,0,2,12,7,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,605,"                for (m = j; m < n - 1; m++) {
",10,2,0,1,3,0,0,0,0,14,29,8,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,612,"                if (m != j) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,668,"            } while (m != j);
",4,1,0,1,3,0,0,0,0,5,17,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,672,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,673,"            int k = i;
",4,0,0,0,0,0,0,0,0,4,10,7,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,674,"            double p = realEigenvalues[i];
",2,0,1,1,2,0,0,0,0,6,30,7,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,675,"            for (int j = i + 1; j < n; j++) {
",10,2,0,1,3,0,0,0,0,13,33,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,681,"            if (k != i) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,693,"        maxAbsoluteValue = 0;
",2,0,0,0,0,0,0,0,0,3,21,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,694,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,695,"            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {
",2,1,1,3,7,0,4,0,0,11,58,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,696,"                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);
",2,0,1,2,4,0,4,0,0,11,50,8,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,700,"        if (maxAbsoluteValue != 0.0) {
",2,1,0,1,3,0,0,0,0,3,30,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,701,"            for (int i=0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,27,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,702,"                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {
",6,2,1,3,7,0,4,0,0,16,78,8,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,707,"        eigenvectors = new ArrayRealVector[n];
",2,0,1,1,2,0,0,2,0,7,38,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,708,"        final double[] tmp = new double[n];
",2,0,1,2,4,1,0,0,0,5,35,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,709,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,710,"            for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,711,"                tmp[j] = z[j][i];
",0,0,1,3,6,0,0,0,0,11,17,8,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,713,"            eigenvectors[i] = new ArrayRealVector(tmp);
",2,0,1,2,4,0,0,2,0,9,43,6,0.07143,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,715,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);
",8,0,0,1,2,0,0,0,0,8,64,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,106,"                            final String separator, final NumberFormat format) {
",4,0,0,0,2,2,0,4,0,10,52,3,0.07143,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,107,"        this.prefix      = prefix;
",4,0,0,0,0,0,0,0,0,5,26,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,108,"        this.suffix      = suffix;
",4,0,0,0,0,0,0,0,0,5,26,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,109,"        this.separator   = separator;
",4,0,0,0,0,0,0,0,0,5,29,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,110,"        trimmedPrefix    = prefix.trim();
",2,0,0,1,2,0,4,0,0,7,33,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,111,"        trimmedSuffix    = suffix.trim();
",2,0,0,1,2,0,4,0,0,7,33,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,112,"        trimmedSeparator = separator.trim();
",2,0,0,1,2,0,4,0,0,7,36,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,113,"        this.format      = format;
",4,0,0,0,0,0,0,0,0,5,26,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,114,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,162,"        return getInstance(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,40,5,0.07143,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,171,"        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));
",0,0,0,2,4,1,6,2,0,8,76,5,0.07143,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2974,"        return (x < 0l) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,25,5,0.07143,0
defect4j,math,org/apache/commons/math3/util/Precision,20,96,"        if (equals(x, y, eps)) {
",0,0,0,2,5,0,8,0,0,8,24,5,0.07143,0
defect4j,math,org/apache/commons/math3/util/Precision,20,97,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.07143,0
defect4j,math,org/apache/commons/math3/util/Precision,20,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;
",6,3,0,2,4,1,10,0,0,19,53,4,0.07143,0
defect4j,math,org/apache/commons/math3/util/Precision,20,330,"        long xInt = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.07143,0
defect4j,math,org/apache/commons/math3/util/Precision,20,331,"        long yInt = Double.doubleToLongBits(y);
",2,0,0,1,2,0,6,0,0,8,39,5,0.07143,0
defect4j,math,org/apache/commons/math3/util/Precision,20,334,"        if (xInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.07143,0
defect4j,math,org/apache/commons/math3/util/Precision,20,337,"        if (yInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.07143,0
defect4j,math,org/apache/commons/math3/util/Precision,20,341,"        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
",8,2,0,1,2,1,4,0,0,15,61,4,0.07143,0
defect4j,math,org/apache/commons/math3/util/Precision,20,343,"        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);
",2,1,0,2,4,1,12,0,0,17,55,4,0.07143,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,264,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.07143,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,267,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,352,"        isMinimize = getGoalType().equals(GoalType.MINIMIZE);
",6,0,0,2,4,0,4,0,0,11,53,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,353,"        final FitnessFunction fitfun = new FitnessFunction();
",2,0,0,1,2,1,0,4,0,7,53,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,354,"        final double[] guess = fitfun.encode(getStartPoint());
",2,0,0,3,6,1,6,0,0,9,54,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,356,"        dimension = guess.length;
",6,0,0,0,0,0,0,0,0,7,25,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,357,"        initializeCMA(guess);
",0,0,0,1,2,0,4,0,0,4,21,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,358,"        iterations = 0;
",2,0,0,0,0,0,0,0,0,3,15,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,359,"        double bestValue = fitfun.value(guess);
",2,0,0,1,2,0,6,0,0,8,39,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,360,"        push(fitnessHistory, bestValue);
",0,0,0,1,2,0,6,0,0,6,32,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,361,"        PointValuePair optimum = new PointValuePair(getStartPoint(),
",2,0,0,1,3,0,2,4,0,8,60,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,363,"        PointValuePair lastResult = null;
",2,0,0,0,0,0,0,2,0,4,33,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,368,"            for (iterations = 1; iterations <= maxIterations; iterations++) {
",8,1,0,1,3,0,0,0,0,11,65,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,370,"                RealMatrix arz = randn1(dimension, lambda);
",2,0,0,1,2,0,6,2,0,10,43,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,371,"                RealMatrix arx = zeros(dimension, lambda);
",2,0,0,1,2,0,6,2,0,10,42,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,372,"                double[] fitness = new double[lambda];
",2,0,1,2,4,0,0,0,0,4,38,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,374,"                for (int k = 0; k < lambda; k++) {
",8,1,0,1,3,0,0,0,0,10,34,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,375,"                    RealMatrix arxk = null;
",2,0,0,0,0,0,0,2,0,4,23,9,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,376,"                    for (int i = 0; i < checkFeasableCount+1; i++) {
",8,2,0,1,3,0,0,0,0,11,48,9,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,377,"                        if (diagonalOnly <= 0) {
",2,1,0,1,3,0,0,0,0,3,24,11,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,384,"                        if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) {
",4,2,0,3,7,0,8,0,0,14,70,11,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,390,"                    copyColumn(arxk, 0, arx, k);
",0,0,0,1,2,0,8,0,0,8,28,10,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,392,"                        fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness
",0,0,1,3,6,0,10,0,0,15,63,11,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,395,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,398,"                int[] arindex = sortedIndices(fitness);
",2,0,0,2,4,0,4,0,0,6,39,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,400,"                RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)
",4,0,0,2,4,0,0,2,0,6,59,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,401,"                RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));
",2,0,0,2,4,0,12,2,0,16,72,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,402,"                xmean = bestArx.multiply(weights);
",2,0,0,1,2,0,6,0,0,9,34,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,403,"                RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));
",2,0,0,2,4,0,12,2,0,16,72,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,404,"                RealMatrix zmean = bestArz.multiply(weights);
",2,0,0,1,2,0,6,2,0,10,45,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,405,"                boolean hsig = updateEvolutionPaths(zmean, xold);
",2,0,0,1,2,0,6,0,0,8,49,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,406,"                if (diagonalOnly <= 0) {
",2,1,0,1,3,0,0,0,0,3,24,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,412,"                sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));
",10,4,0,3,6,0,8,0,0,23,61,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,413,"                double bestFitness = fitness[arindex[0]];
",2,0,1,2,4,0,0,0,0,6,41,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,414,"                double worstFitness = fitness[arindex[arindex.length-1]];
",6,1,1,2,4,0,0,0,0,11,57,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,415,"                if (bestValue > bestFitness) {
",4,1,0,1,3,0,0,0,0,5,30,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,416,"                    bestValue = bestFitness;
",4,0,0,0,0,0,0,0,0,5,24,9,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,417,"                    lastResult = optimum;
",4,0,0,0,0,0,0,0,0,5,21,9,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,418,"                    optimum = new PointValuePair(
",2,0,0,0,1,0,0,2,0,5,29,9,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,421,"                    if (getConvergenceChecker() != null && lastResult != null) {
",2,3,0,2,5,0,2,0,0,8,60,9,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,422,"                        if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {
",0,0,0,3,7,0,10,0,0,10,73,12,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,429,"                if (stopFitness != 0) { // only if stopFitness is defined
",2,1,0,1,3,0,0,0,0,3,57,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,434,"                double[] sqrtDiagC = sqrt(diagC).getColumn(0);
",2,0,0,3,6,0,6,0,0,8,46,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,435,"                double[] pcCol = pc.getColumn(0);
",2,0,0,2,4,0,4,0,0,6,33,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,436,"                for (int i = 0; i < dimension; i++) {
",8,1,0,1,3,0,0,0,0,10,37,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,437,"                    if (sigma*(Math.max(Math.abs(pcCol[i]), sqrtDiagC[i])) > stopTolX) {
",4,2,1,6,13,0,8,0,0,22,68,9,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,438,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,444,"                for (int i = 0; i < dimension; i++) {
",8,1,0,1,3,0,0,0,0,10,37,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,445,"                    if (sigma*sqrtDiagC[i] > stopTolUpX) {
",4,2,1,2,5,0,0,0,0,10,38,9,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,449,"                double historyBest = min(fitnessHistory);
",2,0,0,1,2,0,4,0,0,6,41,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,450,"                double historyWorst = max(fitnessHistory);
",2,0,0,1,2,0,4,0,0,6,42,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,451,"                if (iterations > 2 && Math.max(historyWorst, worstFitness) -
",2,3,0,1,3,0,8,0,0,13,60,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,455,"                if (iterations > fitnessHistory.length &&
",6,2,0,0,1,0,0,0,0,8,41,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,460,"                if (max(diagD)/min(diagD) > 1e7) {
",0,2,0,3,7,0,8,0,0,10,34,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,464,"                if (getConvergenceChecker() != null) {
",0,1,0,2,5,0,2,0,0,4,38,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,465,"                    PointValuePair current =
",2,0,0,0,0,0,0,2,0,4,24,9,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,468,"                    if (lastResult != null &&
",2,2,0,0,1,0,0,0,0,4,25,9,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,472,"                    lastResult = current;
",4,0,0,0,0,0,0,0,0,5,21,9,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,475,"                if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {
",4,3,1,5,11,0,0,0,0,11,58,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,478,"                if (iterations > 2 && Math.max(historyWorst, bestFitness) -
",2,3,0,1,3,0,8,0,0,13,59,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,483,"                push(fitnessHistory,bestFitness);
",0,0,0,1,2,0,6,0,0,6,33,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,484,"                fitfun.setValueRange(worstFitness-bestFitness);
",4,1,0,1,2,0,4,0,0,9,47,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,485,"                if (generateStatistics) {
",2,0,0,1,3,0,0,0,0,2,25,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,492,"        return optimum;
",2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,553,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,561,"        if (lambda <= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,565,"        double[][] sigmaArray = new double[guess.length][1];
",6,0,0,4,8,0,0,0,0,6,52,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,566,"        for (int i = 0; i < guess.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,567,"            final double range =  (boundaries == null) ? 1.0 : boundaries[1][i] - boundaries[0][i];
",4,2,1,5,10,1,0,0,0,15,87,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,568,"            sigmaArray[i][0]   = ((inputSigma == null) ? 0.3 : inputSigma[i]) / range;
",4,2,1,5,10,0,0,0,0,15,74,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,570,"        RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);
",4,0,0,1,2,0,0,4,0,9,65,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,571,"        sigma = max(insigma); // overall standard deviation
",2,0,0,1,2,0,4,0,0,7,51,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,574,"        stopTolUpX = 1e3 * max(insigma);
",2,1,0,1,2,0,4,0,0,8,32,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,575,"        stopTolX = 1e-11 * max(insigma);
",2,1,0,1,2,0,4,0,0,8,32,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,576,"        stopTolFun = 1e-12;
",2,0,0,0,0,0,0,0,0,3,19,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,577,"        stopTolHistFun = 1e-13;
",2,0,0,0,0,0,0,0,0,3,23,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,580,"        mu = lambda / 2; // number of parents/points for recombination
",4,1,0,0,0,0,0,0,0,6,62,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,581,"        logMu2 = Math.log(mu + 0.5);
",4,1,0,1,2,0,4,0,0,10,28,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,582,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1.).scalarAdd(logMu2);
",2,0,0,4,8,0,12,0,0,16,72,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,583,"        double sumw = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,584,"        double sumwq = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,585,"        for (int i = 0; i < mu; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,586,"            double w = weights.getEntry(i, 0);
",2,0,0,1,2,0,6,0,0,8,34,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,587,"            sumw += w;
",4,0,0,0,0,0,0,0,0,5,10,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,588,"            sumwq += w * w;
",6,1,0,0,0,0,0,0,0,8,15,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,590,"        weights = weights.scalarMultiply(1. / sumw);
",4,1,0,1,2,0,4,0,0,10,44,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,591,"        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i
",8,2,0,0,0,0,0,0,0,11,69,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,594,"        cc = (4. + mueff / dimension) /
",6,3,0,1,2,0,0,0,0,10,31,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,596,"        cs = (mueff + 2.) / (dimension + mueff + 3.);
",8,3,0,2,4,0,0,0,0,12,45,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,597,"        damps = (1. + 2. * Math.max(0, Math.sqrt((mueff - 1.) /
",4,7,0,1,5,0,8,0,0,20,55,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,602,"        ccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);
",8,5,0,3,6,0,0,0,0,14,61,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,603,"        ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff) /
",8,6,0,1,3,0,4,0,0,19,61,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,605,"        ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3.);
",6,3,0,2,4,0,4,0,0,14,55,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,606,"        ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3.);
",8,4,0,2,4,0,4,0,0,17,65,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,607,"        chiN = Math.sqrt(dimension) *
",2,1,0,1,2,0,6,0,0,10,29,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,610,"        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective
",2,0,0,1,2,0,6,0,0,9,63,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,612,"        diagD = insigma.scalarMultiply(1. / sigma);
",4,1,0,1,2,0,4,0,0,10,43,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,613,"        diagC = square(diagD);
",2,0,0,1,2,0,4,0,0,7,22,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,614,"        pc = zeros(dimension, 1); // evolution paths for C and sigma
",2,0,0,1,2,0,4,0,0,7,60,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,615,"        ps = zeros(dimension, 1); // B defines the coordinate system
",2,0,0,1,2,0,4,0,0,7,60,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,616,"        normps = ps.getFrobeniusNorm();
",2,0,0,1,2,0,4,0,0,7,31,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,618,"        B = eye(dimension, dimension);
",2,0,0,1,2,0,6,0,0,9,30,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,619,"        D = ones(dimension, 1); // diagonal D defines the scaling
",2,0,0,1,2,0,4,0,0,7,57,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,620,"        BD = times(B, repmat(diagD.transpose(), dimension, 1));
",2,0,0,3,6,0,12,0,0,15,55,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,621,"        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance
",2,0,0,5,10,0,16,0,0,19,70,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,622,"        historySize = 10 + (int) (3. * 10. * dimension / lambda);
",6,3,0,2,4,0,0,0,0,10,57,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,623,"        fitnessHistory = new double[historySize]; // history of fitness values
",2,0,1,1,2,0,0,0,0,5,70,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,624,"        for (int i = 0; i < historySize; i++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,625,"            fitnessHistory[i] = Double.MAX_VALUE;
",4,0,1,1,2,0,0,0,0,9,37,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,627,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,638,"        ps = ps.scalarMultiply(1. - cs).add(
",4,1,0,1,3,0,6,0,0,12,36,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,641,"        normps = ps.getFrobeniusNorm();
",2,0,0,1,2,0,4,0,0,7,31,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,642,"        boolean hsig = normps /
",4,1,0,0,0,0,0,0,0,5,23,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,645,"        pc = pc.scalarMultiply(1. - cc);
",4,1,0,1,2,0,4,0,0,10,32,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,646,"        if (hsig) {
",2,0,0,1,3,0,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,647,"            pc = pc.add(xmean.subtract(xold).scalarMultiply(
",2,0,0,1,4,0,12,0,0,15,48,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,650,"        return hsig;
",2,0,0,0,0,1,0,0,0,2,12,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,805,"        for (int i = vals.length-1; i > 0; i--) {
",10,2,0,1,3,0,0,0,0,13,41,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,806,"            vals[i] = vals[i-1];
",2,1,1,2,4,0,0,0,0,10,20,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,808,"        vals[0] = val;
",2,0,1,1,2,0,0,0,0,5,14,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,809,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,818,"        DoubleIndex[] dis = new DoubleIndex[doubles.length];
",6,0,0,2,4,0,0,4,0,10,52,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,819,"        for (int i = 0; i < doubles.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,820,"            dis[i] = new DoubleIndex(doubles[i], i);
",2,0,1,3,6,0,0,2,0,13,40,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,822,"        Arrays.sort(dis);
",0,0,0,1,2,0,6,0,0,6,17,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,823,"        int[] indices = new int[doubles.length];
",6,0,0,2,4,0,0,0,0,6,40,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,824,"        for (int i = 0; i < doubles.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,825,"            indices[i] = dis[i].index;
",2,0,1,2,4,0,0,0,0,11,26,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,827,"        return indices;
",2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1025,"        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
",2,0,0,6,12,0,8,0,0,10,71,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1026,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1027,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1028,"                d[r][c] = Math.log(m.getEntry(r, c));
",0,0,1,4,8,0,12,0,0,19,37,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1031,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1040,"        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
",2,0,0,6,12,0,8,0,0,10,71,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1041,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1042,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1043,"                d[r][c] = Math.sqrt(m.getEntry(r, c));
",0,0,1,4,8,0,12,0,0,19,38,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1046,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1054,"        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
",2,0,0,6,12,0,8,0,0,10,71,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1055,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1056,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1057,"                double e = m.getEntry(r, c);
",2,0,0,1,2,0,8,0,0,10,28,9,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1058,"                d[r][c] = e * e;
",4,1,1,2,4,0,0,0,0,12,16,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1061,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1070,"        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
",2,0,0,6,12,0,8,0,0,10,71,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1071,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1072,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1073,"                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);
",0,1,1,4,8,0,16,0,0,24,46,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1076,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1100,"        double[][] d = new double[m.getRowDimension()][cols.length];
",6,0,0,5,10,0,4,0,0,10,60,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1101,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1102,"            for (int c = 0; c < cols.length; c++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1103,"                d[r][c] = m.getEntry(r, cols[c]);
",0,0,1,4,8,0,6,0,0,17,33,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1106,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1146,"        if (m.getColumnDimension() == 1) {
",0,1,0,2,5,0,4,0,0,5,34,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1147,"            double[][] d = new double[m.getRowDimension()][m.getRowDimension()];
",2,0,0,6,12,0,8,0,0,10,68,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1148,"            for (int i = 0; i < m.getRowDimension(); i++) {
",6,1,0,2,5,0,4,0,0,12,47,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1149,"                d[i][i] = m.getEntry(i, 0);
",0,0,1,3,6,0,6,0,0,13,27,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1151,"            return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1170,"        for (int i = 0; i < m1.getRowDimension(); i++) {
",6,1,0,2,5,0,4,0,0,12,48,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1171,"            m2.setEntry(i, col2, m1.getEntry(i, col1));
",0,0,0,2,4,0,16,0,0,16,43,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1173,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1181,"        double[][] d = new double[n][m];
",2,0,1,4,8,0,0,0,0,6,32,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1182,"        for (int r = 0; r < n; r++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1183,"            Arrays.fill(d[r], 1.0);
",0,0,1,2,4,0,4,0,0,8,23,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1185,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1194,"        double[][] d = new double[n][m];
",2,0,1,4,8,0,0,0,0,6,32,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1195,"        for (int r = 0; r < n; r++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1196,"            if (r < m) {
",4,1,0,1,3,0,0,0,0,5,12,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1197,"                d[r][r] = 1;
",0,0,1,2,4,0,0,0,0,7,12,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1200,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1209,"        return new Array2DRowRealMatrix(n, m);
",4,0,0,1,2,1,0,2,0,6,38,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1219,"        int rd = mat.getRowDimension();
",2,0,0,1,2,0,4,0,0,6,31,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1220,"        int cd = mat.getColumnDimension();
",2,0,0,1,2,0,4,0,0,6,34,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1221,"        double[][] d = new double[n * rd][m * cd];
",10,2,0,4,8,0,0,0,0,12,42,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1222,"        for (int r = 0; r < n * rd; r++) {
",10,2,0,1,3,0,0,0,0,13,34,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1223,"            for (int c = 0; c < m * cd; c++) {
",10,2,0,1,3,0,0,0,0,13,34,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1224,"                d[r][c] = mat.getEntry(r % rd, c % cd);
",8,2,1,3,6,0,4,0,0,21,39,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1227,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1237,"        int size = (int) ((end - start) / step + 1);
",8,3,0,3,6,0,0,0,0,11,44,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1238,"        double[][] d = new double[size][1];
",2,0,1,4,8,0,0,0,0,4,35,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1239,"        double value = start;
",4,0,0,0,0,0,0,0,0,4,21,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1240,"        for (int r = 0; r < size; r++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1241,"            d[r][0] = value;
",2,0,1,2,4,0,0,0,0,7,16,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1242,"            value += step;
",4,0,0,0,0,0,0,0,0,5,14,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1244,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1252,"        double max = -Double.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,31,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1253,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1254,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1255,"                double e = m.getEntry(r, c);
",2,0,0,1,2,0,8,0,0,10,28,9,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1256,"                if (max < e) {
",4,1,0,1,3,0,0,0,0,5,14,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1257,"                    max = e;
",4,0,0,0,0,0,0,0,0,5,8,10,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1261,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1269,"        double min = Double.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,30,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1270,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1271,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1272,"                double e = m.getEntry(r, c);
",2,0,0,1,2,0,8,0,0,10,28,9,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1273,"                if (min > e) {
",4,1,0,1,3,0,0,0,0,5,14,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1274,"                    min = e;
",4,0,0,0,0,0,0,0,0,5,8,10,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1278,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1286,"        double max = -Double.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,31,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1287,"        for (int r = 0; r < m.length; r++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1288,"            if (max < m[r]) {
",2,1,1,2,5,0,0,0,0,7,17,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1289,"                max = m[r];
",2,0,1,1,2,0,0,0,0,7,11,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1292,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1300,"        double min = Double.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,30,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1301,"        for (int r = 0; r < m.length; r++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1302,"            if (min > m[r]) {
",2,1,1,2,5,0,0,0,0,7,17,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1303,"                min = m[r];
",2,0,1,1,2,0,0,0,0,7,11,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1306,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1351,"        double[][] d = new double[size][popSize];
",2,0,1,4,8,0,0,0,0,6,41,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1352,"        for (int r = 0; r < size; r++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1353,"            for (int c = 0; c < popSize; c++) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1354,"                d[r][c] = random.nextGaussian();
",0,0,1,3,6,0,4,0,0,11,32,8,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1357,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,85,"public class CMAESOptimizer
",2,0,0,0,0,1,0,0,0,3,27,1,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,72,"        return evaluations.getMaximalCount();
",0,0,0,1,2,1,4,0,0,4,37,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,82,"        return checker;
",2,0,0,0,0,1,0,0,0,2,15,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,95,"            evaluations.incrementCount();
",0,0,0,1,2,0,4,0,0,4,29,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,98,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,99,"        return function.value(point);
",0,0,0,1,2,1,6,0,0,6,29,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,155,"        return goal;
",2,0,0,0,0,1,0,0,0,2,12,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,73,"        final double[] p = getKey();
",2,0,0,2,4,1,2,0,0,5,28,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,74,"        return p == null ? null : p.clone();
",2,1,0,1,2,1,4,0,0,7,36,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/Pair,20,65,"        return key;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/Pair,20,74,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,844,"        DoubleIndex(double value, int index) {
",6,0,0,1,3,0,0,0,0,6,38,3,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,845,"            this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,846,"            this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,847,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,851,"            return Double.compare(value, o.value);
",4,0,0,1,2,1,6,0,0,10,38,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,834,"    private static class DoubleIndex implements Comparable<DoubleIndex> {
",2,0,0,0,1,2,0,4,0,8,69,2,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,895,"        public FitnessFunction() {
",2,0,0,1,3,1,0,0,0,3,26,3,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,896,"            valueRange = 1.0;
",2,0,0,0,0,0,0,0,0,3,17,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,897,"            isRepairMode = true;
",2,0,0,0,0,0,0,0,0,4,20,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,898,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,905,"            if (boundaries == null) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,921,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.06667,1
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,930,"            if (boundaries == null) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,947,"            if (boundaries != null && isRepairMode) {
",4,2,0,1,3,0,0,0,0,6,41,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,956,"            return isMinimize ? value : -value;
",6,0,0,0,0,1,0,0,0,7,35,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,982,"            this.valueRange = valueRange;
",4,0,0,0,0,0,0,0,0,5,29,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,983,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/AbstractConvergenceChecker,20,85,"        return relativeThreshold;
",2,0,0,0,0,1,0,0,0,2,25,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/AbstractConvergenceChecker,20,92,"        return absoluteThreshold;
",2,0,0,0,0,1,0,0,0,2,25,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,77,"        final double p = previous.getValue();
",2,0,0,1,2,1,4,0,0,7,37,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,78,"        final double c = current.getValue();
",2,0,0,1,2,1,4,0,0,7,36,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,79,"        final double difference = FastMath.abs(p - c);
",6,1,0,1,2,1,4,0,0,12,46,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,80,"        final double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));
",2,0,0,3,6,1,16,0,0,19,67,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,81,"        return difference <= size * getRelativeThreshold() ||
",4,3,0,1,2,1,2,0,0,9,53,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,34,"public class SimpleValueChecker
",2,0,0,0,0,1,0,0,0,3,31,1,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,280,"        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,63,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,289,"                sum = 0;
",2,0,0,0,0,0,0,0,0,3,8,10,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,290,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,294,"                sum += value * value;
",6,1,0,0,0,0,0,0,0,8,21,10,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,295,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,299,"                return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,11,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,56,"    protected AbstractRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,33,2,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,67,"        throws NotStrictlyPositiveException {
",2,0,0,0,1,0,0,0,0,2,37,2,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,68,"        if (rowDimension < 1) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,71,"        if (columnDimension < 1) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,74,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,47,"    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);
",6,0,0,1,2,3,4,2,0,15,95,2,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,50,"        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);
",0,0,0,2,4,0,6,0,0,6,55,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,79,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,81,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,82,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,84,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,85,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));
",0,1,0,3,6,0,22,0,0,23,66,9,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,90,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,96,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,98,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,99,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,101,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,102,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));
",0,1,0,3,6,0,22,0,0,23,66,9,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,107,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,112,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,113,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,115,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,116,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,117,"                out.setEntry(row, col, getEntry(row, col) + d);
",2,1,0,2,4,0,14,0,0,17,47,9,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,121,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,126,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,127,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,128,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,129,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,130,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,131,"                out.setEntry(row, col, getEntry(row, col) * d);
",2,1,0,2,4,0,14,0,0,17,47,9,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,135,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,143,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,144,"        final int nCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,145,"        final int nSum  = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,146,"        final RealMatrix out = createMatrix(nRows, nCols);
",2,0,0,1,2,1,6,2,0,11,50,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,147,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,148,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,149,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,150,"                for (int i = 0; i < nSum; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);
",2,1,0,2,4,0,14,0,0,18,45,10,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,153,"                out.setEntry(row, col, sum);
",0,0,0,1,2,0,10,0,0,10,28,9,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,157,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,280,"        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,63,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,466,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,467,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,468,"        final RealMatrix out = createMatrix(nRows, 1);
",2,0,0,1,2,1,4,2,0,9,46,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,469,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,470,"            out.setEntry(i, 0, getEntry(i, column));
",0,0,0,2,4,0,12,0,0,12,40,7,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,473,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,559,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,560,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,561,"        final double[] out = new double[nRows];
",2,0,1,2,4,1,0,0,0,5,39,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,562,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,563,"            out[i] = getEntry(i, column);
",0,0,1,2,4,0,6,0,0,11,29,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,566,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,598,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,599,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,600,"        final RealMatrix out = createMatrix(nCols, nRows);
",2,0,0,1,2,1,6,2,0,11,50,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,601,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,611,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,873,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,20,53,"public abstract class RealLinearOperator {
",2,0,0,0,1,2,0,0,0,4,42,1,0.06667,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,20,30,"public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {
",2,0,0,0,1,1,0,2,0,5,88,1,0.06667,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,20,34,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,20,41,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,
",8,0,0,0,1,0,0,0,0,8,76,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,101,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,
",12,0,0,0,1,0,0,0,0,12,73,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,133,"                            final NumberFormat format) {
",2,0,0,0,2,1,0,2,0,5,28,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,134,"        this.prefix            = prefix;
",4,0,0,0,0,0,0,0,0,5,32,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,135,"        this.suffix            = suffix;
",4,0,0,0,0,0,0,0,0,5,32,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,136,"        this.rowPrefix         = rowPrefix;
",4,0,0,0,0,0,0,0,0,5,35,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,137,"        this.rowSuffix         = rowSuffix;
",4,0,0,0,0,0,0,0,0,5,35,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,138,"        this.rowSeparator      = rowSeparator;
",4,0,0,0,0,0,0,0,0,5,38,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,139,"        this.columnSeparator   = columnSeparator;
",4,0,0,0,0,0,0,0,0,5,41,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,140,"        this.format            = format;
",4,0,0,0,0,0,0,0,0,5,32,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,142,"        this.format.setGroupingUsed(false);
",2,0,0,1,2,0,2,0,0,5,35,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,143,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,207,"        return format;
",2,0,0,0,0,1,0,0,0,2,14,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,215,"        return getInstance(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,40,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,224,"        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));
",0,0,0,2,4,1,6,2,0,8,76,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,52,"    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();
",2,0,0,1,2,3,4,2,0,11,85,2,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");
",2,0,0,2,4,3,0,4,0,15,104,2,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,81,"        return (rows * columns <= 4096) ?
",4,2,0,1,2,1,0,0,0,6,33,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,339,"        if (columnData == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,342,"        final int nRows = columnData.length;
",6,0,0,0,0,1,0,0,0,7,36,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,343,"        final RealMatrix m = createRealMatrix(nRows, 1);
",2,0,0,1,2,1,4,2,0,9,48,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,344,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,345,"            m.setEntry(i, 0, columnData[i]);
",0,0,1,2,4,0,6,0,0,10,32,7,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,347,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,389,"        checkRowIndex(m, row);
",0,0,0,1,2,0,6,0,0,6,22,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,390,"        checkColumnIndex(m, column);
",0,0,0,1,2,0,6,0,0,6,28,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,391,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,402,"        if (row < 0 ||
",2,2,0,0,1,0,0,0,0,4,14,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,407,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,418,"        if (column < 0 || column >= m.getColumnDimension()) {
",4,3,0,2,5,0,4,0,0,11,53,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,422,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,506,"        if ((left.getRowDimension()    != right.getRowDimension()) ||
",0,2,0,3,7,0,8,0,0,10,61,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,511,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,523,"        if ((left.getRowDimension()    != right.getRowDimension()) ||
",0,2,0,3,7,0,8,0,0,10,61,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,528,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,541,"        if (left.getColumnDimension() != right.getRowDimension()) {
",0,1,0,3,7,0,8,0,0,9,59,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,545,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,61,"        super(rowDimension, columnDimension);
",4,0,0,1,2,0,0,0,0,4,37,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,62,"        data = new double[rowDimension][columnDimension];
",2,0,1,2,4,0,0,0,0,7,49,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,63,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,101,"        NullArgumentException {
",2,0,0,0,1,0,0,0,0,2,23,2,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,102,"        if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,105,"            if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,108,"            final int nRows = d.length;
",6,0,0,0,0,1,0,0,0,7,27,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,109,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,112,"            final int nCols = d[0].length;
",4,0,1,1,2,1,0,0,0,7,30,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,113,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,116,"            for (int r = 1; r < nRows; r++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,117,"                if (d[r].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,27,8,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,121,"            data = d;
",4,0,0,0,0,0,0,0,0,5,9,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,123,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,144,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);
",4,0,0,1,2,1,0,2,0,6,63,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,303,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,304,"        return data[row][column];
",0,0,1,2,4,1,0,0,0,6,25,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,310,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,311,"        data[row][column] = value;
",2,0,1,2,4,0,0,0,0,9,26,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,312,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,335,"        return (data == null) ? 0 : data.length;
",6,1,0,1,2,1,0,0,0,7,40,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,341,"        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;
",4,3,1,5,10,1,0,0,0,11,66,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,406,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,407,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,408,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,409,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,410,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,411,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,412,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,415,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,601,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,606,"                out.setEntry(column, row, value);
",0,0,0,1,2,0,10,0,0,10,33,11,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,607,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,375,"        return Math.sqrt(a);
",0,0,0,1,2,1,6,0,0,6,20,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1096,"        return log(x, null);
",0,0,0,1,2,1,4,0,0,5,20,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1106,"        if (x==0) { // Handle special case of +0/-0
",2,1,0,1,3,0,0,0,0,3,43,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1109,"        long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1112,"        if ((bits & 0x8000000000000000L) != 0 || x != x) {
",6,4,0,2,5,0,0,0,0,10,50,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1123,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1132,"        int exp = (int)(bits >> 52)-1023;
",4,2,0,2,4,0,0,0,0,6,33,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1134,"        if ((bits & 0x7ff0000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,40,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1154,"        if (exp == -1 || exp == 0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1155,"            if (x < 1.01 && x > 0.99 && hiPrec == null) {
",6,5,0,1,3,0,0,0,0,11,45,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1204,"        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];
",8,2,0,5,10,1,0,0,0,11,79,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1215,"        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));
",8,4,0,3,6,1,0,0,0,13,95,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1217,"        double lnza = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1218,"        double lnzb = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1220,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1273,"            lnza = -0.16624882440418567;
",2,0,0,0,0,0,0,0,0,4,28,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1274,"            lnza = lnza * epsilon + 0.19999954120254515;
",6,2,0,0,0,0,0,0,0,9,44,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1275,"            lnza = lnza * epsilon + -0.2499999997677497;
",6,2,0,0,0,0,0,0,0,10,44,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1276,"            lnza = lnza * epsilon + 0.3333333333332802;
",6,2,0,0,0,0,0,0,0,9,43,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1277,"            lnza = lnza * epsilon + -0.5;
",6,2,0,0,0,0,0,0,0,10,29,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1278,"            lnza = lnza * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,28,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1279,"            lnza = lnza * epsilon;
",6,1,0,0,0,0,0,0,0,8,22,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1296,"        double a = LN_2_A*exp;
",6,1,0,0,0,0,0,0,0,7,22,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1297,"        double b = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1298,"        double c = a+lnm[0];
",4,1,1,1,2,0,0,0,0,7,20,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1299,"        double d = -(c-a-lnm[0]);
",6,1,1,2,4,0,0,0,0,10,25,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1300,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1301,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1303,"        c = a + lnza;
",6,1,0,0,0,0,0,0,0,8,13,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1304,"        d = -(c - a - lnza);
",8,1,0,1,2,0,0,0,0,11,20,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1305,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1306,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1308,"        c = a + LN_2_B*exp;
",8,2,0,0,0,0,0,0,0,11,19,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1309,"        d = -(c - a - LN_2_B*exp);
",10,2,0,1,2,0,0,0,0,14,26,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1310,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1311,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1313,"        c = a + lnm[1];
",4,1,1,1,2,0,0,0,0,8,15,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1314,"        d = -(c - a - lnm[1]);
",6,1,1,2,4,0,0,0,0,11,22,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1315,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1316,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1318,"        c = a + lnzb;
",6,1,0,0,0,0,0,0,0,8,13,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1319,"        d = -(c - a - lnzb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1320,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1321,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1323,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1328,"        return a + b;
",4,1,0,0,0,1,0,0,0,5,13,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1653,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1655,"        double p = 2.7553817452272217E-6;
",2,0,0,0,0,0,0,0,0,2,33,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1656,"        p = p * x2 + -1.9841269659586505E-4;
",6,2,0,0,0,0,0,0,0,10,36,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1657,"        p = p * x2 + 0.008333333333329196;
",6,2,0,0,0,0,0,0,0,9,34,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1658,"        p = p * x2 + -0.16666666666666666;
",6,2,0,0,0,0,0,0,0,10,34,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1661,"        p = p * x2 * x;
",8,1,0,0,0,0,0,0,0,10,15,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1663,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1673,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1675,"        double p = 2.479773539153719E-5;
",2,0,0,0,0,0,0,0,0,2,32,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1676,"        p = p * x2 + -0.0013888888689039883;
",6,2,0,0,0,0,0,0,0,10,36,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1677,"        p = p * x2 + 0.041666666666621166;
",6,2,0,0,0,0,0,0,0,9,34,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1678,"        p = p * x2 + -0.49999999999999994;
",6,2,0,0,0,0,0,0,0,10,34,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1679,"        p *= x2;
",4,0,0,0,0,0,0,0,0,5,8,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1681,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1692,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1693,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1696,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1697,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1698,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1699,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1702,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1703,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1704,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1705,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1708,"        final double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,1,0,0,0,8,43,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1709,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1710,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1711,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1737,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1738,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1740,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1741,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1742,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1743,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1744,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1746,"        t = costA * sinEpsA;
",6,1,0,0,0,0,0,0,0,8,20,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1747,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1748,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1749,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1750,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1752,"        b = b + sintA * cosEpsB + costA * sinEpsB;
",12,4,0,0,0,0,0,0,0,17,42,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1767,"        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;
",18,6,0,0,0,0,0,0,0,25,68,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1794,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1795,"            t = ((costA + costB) * (cosEpsA + cosEpsB) -
",10,5,0,2,5,0,0,0,0,16,44,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1797,"            c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1798,"            d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1799,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1800,"            b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1803,"        result = a + b;
",6,1,0,0,0,0,0,0,0,8,15,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1805,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1816,"        final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1817,"        final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1819,"        final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1820,"        double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1821,"        b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1823,"        return sinQ(a, b);
",0,0,0,1,2,1,6,0,0,6,18,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2201,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2202,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2204,"        double xb = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2207,"        xa = x;
",4,0,0,0,0,0,0,0,0,5,7,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2208,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2214,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2222,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2227,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2237,"            final CodyWaite cw = new CodyWaite(xa, xb);
",6,0,0,1,2,1,0,4,0,11,43,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2238,"            quadrant = cw.getK() & 3;
",2,1,0,1,2,0,4,0,0,8,25,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2239,"            xa = cw.getRemA();
",2,0,0,1,2,0,4,0,0,7,18,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2240,"            xb = cw.getRemB();
",2,0,0,1,2,0,4,0,0,7,18,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2243,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2247,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2249,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2251,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2253,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2255,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2268,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2271,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2272,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2276,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2281,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2282,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2292,"            final CodyWaite cw = new CodyWaite(xa, xb);
",6,0,0,1,2,1,0,4,0,11,43,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2293,"            quadrant = cw.getK() & 3;
",2,1,0,1,2,0,4,0,0,8,25,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2294,"            xa = cw.getRemA();
",2,0,0,1,2,0,4,0,0,7,18,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2295,"            xb = cw.getRemB();
",2,0,0,1,2,0,4,0,0,7,18,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2301,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2303,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2305,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2307,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2309,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2992,"        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,61,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3396,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3507,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3508,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3510,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3511,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,105,"        return maximalCount;
",2,0,0,0,0,1,0,0,0,2,20,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,155,"        if (++count > maximalCount) {
",4,1,0,1,3,0,0,0,0,6,29,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,158,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,547,"         final int[] output = new int[len];
",2,0,1,2,4,1,0,0,0,5,34,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,548,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,549,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,43,"        return getDefaultNumberFormat(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,51,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,54,"        final NumberFormat nf = NumberFormat.getInstance(locale);
",2,0,0,1,2,1,6,2,0,11,57,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,55,"        nf.setMaximumFractionDigits(10);
",0,0,0,1,2,0,4,0,0,4,32,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,56,"        return nf;
",2,0,0,0,0,1,0,0,0,2,10,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3785,"                  double xb) {
",2,0,0,0,2,0,0,0,0,2,12,4,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3788,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3794,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,8,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3795,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3796,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3798,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3799,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,8,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3800,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3801,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3803,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3804,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3805,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3806,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3808,"                if (remA > 0) {
",2,1,0,1,3,0,0,0,0,3,15,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3809,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3818,"            this.finalK = k;
",4,0,0,0,0,0,0,0,0,5,16,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3819,"            this.finalRemA = remA;
",4,0,0,0,0,0,0,0,0,5,22,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3820,"            this.finalRemB = remB;
",4,0,0,0,0,0,0,0,0,5,22,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3821,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3827,"            return finalK;
",2,0,0,0,0,1,0,0,0,2,14,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3833,"            return finalRemA;
",2,0,0,0,0,1,0,0,0,2,17,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3839,"            return finalRemB;
",2,0,0,0,0,1,0,0,0,2,17,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3752,"    private static class lnMant {
",2,0,0,0,1,2,0,0,0,4,29,2,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3766,"                LN_MANT = FastMathLiteralArrays.loadLnMant();
",2,0,0,1,2,0,4,0,0,7,45,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3768,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,20,29,"    private static final double[] EXP_INT_A = new double[] {
",2,0,0,2,5,3,0,0,0,5,56,2,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,20,1535,"    private static final double[] EXP_INT_B = new double[] {
",2,0,0,2,5,3,0,0,0,5,56,2,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,20,3043,"    private static final double[] EXP_FRAC_A = new double[] {
",2,0,0,2,5,3,0,0,0,5,57,2,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,20,4074,"    private static final double[] EXP_FRAC_B = new double[] {
",2,0,0,2,5,3,0,0,0,5,57,2,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,20,5103,"    private static final double[][] LN_MANT = new double[][] {
",2,0,0,4,9,3,0,0,0,5,58,2,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,20,6174,"        return LN_MANT.clone();
",0,0,0,1,2,1,4,0,0,4,23,5,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,233,"        if (mti >= N) { // generate N words at one time
",4,1,0,1,3,0,0,0,0,5,47,4,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,234,"            int mtNext = mt[0];
",2,0,1,1,2,0,0,0,0,4,19,7,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,235,"            for (int k = 0; k < N - M; ++k) {
",10,2,0,1,3,0,0,0,0,13,33,6,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,236,"                int mtCurr = mtNext;
",4,0,0,0,0,0,0,0,0,4,20,9,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,237,"                mtNext = mt[k + 1];
",4,1,1,1,2,0,0,0,0,8,19,8,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,238,"                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);
",6,3,0,2,4,0,0,0,0,10,50,8,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,239,"                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];
",8,4,1,4,8,0,0,0,0,21,47,8,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,241,"            for (int k = N - M; k < N - 1; ++k) {
",12,3,0,1,3,0,0,0,0,16,37,6,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,242,"                int mtCurr = mtNext;
",4,0,0,0,0,0,0,0,0,4,20,9,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,243,"                mtNext = mt[k + 1];
",4,1,1,1,2,0,0,0,0,8,19,8,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,244,"                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);
",6,3,0,2,4,0,0,0,0,10,50,8,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,245,"                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];
",10,5,1,5,10,0,0,0,0,24,53,8,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,247,"            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);
",4,3,1,3,6,0,0,0,0,10,49,6,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,248,"            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];
",8,5,1,4,8,0,0,0,0,20,51,6,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,250,"            mti = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,253,"        y = mt[mti++];
",4,0,1,1,2,0,0,0,0,8,14,4,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,256,"        y ^=  y >>> 11;
",4,1,0,0,0,0,0,0,0,6,15,4,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,257,"        y ^= (y <<   7) & 0x9d2c5680;
",4,2,0,1,2,0,0,0,0,7,29,4,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,258,"        y ^= (y <<  15) & 0xefc60000;
",4,2,0,1,2,0,0,0,0,7,29,4,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,259,"        y ^=  y >>> 18;
",4,1,0,0,0,0,0,0,0,6,15,4,0.06667,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,261,"        return y >>> (32 - bits);
",4,2,0,1,2,1,0,0,0,6,25,4,0.06667,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,85,"        final long high = ((long) next(26)) << 26;
",2,1,0,3,6,1,2,0,0,6,42,4,0.06667,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,86,"        final int  low  = next(26);
",2,0,0,1,2,1,2,0,0,5,27,4,0.06667,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,87,"        return (high | low) * 0x1.0p-52d;
",4,2,0,1,2,1,0,0,0,6,33,4,0.06667,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,99,"        if (Double.isNaN(nextGaussian)) {
",0,0,0,2,5,0,6,0,0,6,33,5,0.06667,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,101,"            final double x = nextDouble();
",2,0,0,1,2,1,2,0,0,5,30,6,0.06667,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,102,"            final double y = nextDouble();
",2,0,0,1,2,1,2,0,0,5,30,6,0.06667,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,103,"            final double alpha = 2 * FastMath.PI * x;
",8,1,0,0,0,1,0,0,0,10,41,6,0.06667,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,104,"            final double r      = FastMath.sqrt(-2 * FastMath.log(y));
",2,1,0,2,4,1,10,0,0,15,58,6,0.06667,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,105,"            random       = r * FastMath.cos(alpha);
",4,1,0,1,2,0,6,0,0,12,39,6,0.06667,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,106,"            nextGaussian = r * FastMath.sin(alpha);
",4,1,0,1,2,0,6,0,0,12,39,6,0.06667,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,107,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.06667,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,109,"            random = nextGaussian;
",4,0,0,0,0,0,0,0,0,5,22,6,0.06667,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,110,"            nextGaussian = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,26,6,0.06667,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,113,"        return random;
",2,0,0,0,0,1,0,0,0,2,14,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,538,"        if (inputSigma != null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,350,"        checkParameters();
",0,0,0,1,2,0,2,0,0,2,18,5,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,499,"        final double[] init = getStartPoint();
",2,0,0,2,4,1,2,0,0,5,38,4,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,500,"        final double[] lB = getLowerBound();
",2,0,0,2,4,1,2,0,0,5,36,4,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,501,"        final double[] uB = getUpperBound();
",2,0,0,2,4,1,2,0,0,5,36,4,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,504,"        boolean hasFiniteBounds = false;
",2,0,0,0,0,0,0,0,0,3,32,5,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,505,"        for (int i = 0; i < lB.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,506,"            if (!Double.isInfinite(lB[i]) ||
",0,1,1,2,5,0,4,0,0,10,32,6,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,513,"        boolean hasInfiniteBounds = false;
",2,0,0,0,0,0,0,0,0,3,34,5,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,514,"        if (hasFiniteBounds) {
",2,0,0,1,3,0,0,0,0,2,22,4,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,73,"        return lowerBound.clone();
",0,0,0,1,2,1,4,0,0,4,26,5,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,80,"        return upperBound.clone();
",0,0,0,1,2,1,4,0,0,4,26,5,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,122,"        if (lower == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,130,"        if (upper == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,140,"        return super.optimize(maxEval, f, goalType, startPoint);
",10,0,0,1,2,1,0,0,0,10,56,5,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,105,"        return optimizeInternal(maxEval, f, goalType, startPoint);
",0,0,0,1,2,1,10,0,0,10,58,5,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,128,"        if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,131,"        if (goalType == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,134,"        if (startPoint == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,139,"        evaluations.setMaximalCount(maxEval);
",0,0,0,1,2,0,6,0,0,6,37,5,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,140,"        evaluations.resetCount();
",0,0,0,1,2,0,4,0,0,4,25,5,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,143,"        function = f;
",4,0,0,0,0,0,0,0,0,5,13,4,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,144,"        goal = goalType;
",4,0,0,0,0,0,0,0,0,5,16,4,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,145,"        start = startPoint.clone();
",2,0,0,1,2,0,4,0,0,7,27,4,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,148,"        return doOptimize();
",0,0,0,1,2,1,2,0,0,2,20,5,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,162,"        return start.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,0.05000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,96,"        maximalCount = max;
",4,0,0,0,0,0,0,0,0,5,19,4,0.05000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,164,"        count = 0;
",2,0,0,0,0,0,0,0,0,3,10,4,0.05000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,165,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,108,"        if (upper != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.04762,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,282,"        this(lambda, inputSigma, maxIterations, stopFitness, isActiveCMA,
",10,0,0,0,1,0,0,0,0,10,65,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,285,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,307,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,145,"    private int diagonalOnly = 0;
",2,0,0,0,0,1,0,0,0,3,29,2,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,147,"    private boolean isMinimize = true;
",2,0,0,0,0,1,0,0,0,4,34,2,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,149,"    private boolean generateStatistics = false;
",2,0,0,0,0,1,0,0,0,4,43,2,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,228,"    private List<Double> statisticsSigmaHistory = new ArrayList<Double>();
",2,0,0,1,2,1,0,8,0,11,70,2,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,230,"    private List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();
",2,0,0,1,2,1,0,8,0,11,77,2,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,232,"    private List<Double> statisticsFitnessHistory = new ArrayList<Double>();
",2,0,0,1,2,1,0,8,0,11,72,2,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,234,"    private List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();
",2,0,0,1,2,1,0,8,0,11,74,2,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,308,"        this.lambda = lambda;
",4,0,0,0,0,0,0,0,0,5,21,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,309,"        this.inputSigma = inputSigma == null ? null : (double[]) inputSigma.clone();
",4,1,0,3,6,0,4,0,0,10,76,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,310,"        this.maxIterations = maxIterations;
",4,0,0,0,0,0,0,0,0,5,35,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,311,"        this.stopFitness = stopFitness;
",4,0,0,0,0,0,0,0,0,5,31,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,312,"        this.isActiveCMA = isActiveCMA;
",4,0,0,0,0,0,0,0,0,5,31,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,313,"        this.diagonalOnly = diagonalOnly;
",4,0,0,0,0,0,0,0,0,5,33,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,314,"        this.checkFeasableCount = checkFeasableCount;
",4,0,0,0,0,0,0,0,0,5,45,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,315,"        this.random = random;
",4,0,0,0,0,0,0,0,0,5,21,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,316,"        this.generateStatistics = generateStatistics;
",4,0,0,0,0,0,0,0,0,5,45,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,317,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,99,"    public static final RandomGenerator DEFAULT_RANDOMGENERATOR = new MersenneTwister();
",2,0,0,1,2,3,0,4,0,9,84,2,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,66,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,95,"        final int dim = startPoint.length;
",6,0,0,0,0,1,0,0,0,7,34,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,96,"        if (lower != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,66,"    protected BaseAbstractMultivariateOptimizer(ConvergenceChecker<PointValuePair> checker) {
",4,0,0,1,3,1,0,4,0,9,89,2,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,44,"    protected final Incrementor evaluations = new Incrementor();
",2,0,0,1,2,2,0,4,0,8,60,2,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,67,"        this.checker = checker;
",4,0,0,0,0,0,0,0,0,5,23,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/GoalType,20,28,"public enum GoalType implements Serializable {
",2,0,0,0,1,1,0,2,0,5,46,1,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/GoalType,20,31,"    MAXIMIZE,
",2,0,0,0,0,0,0,0,0,2,9,2,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/GoalType,20,34,"    MINIMIZE
",2,0,0,0,0,0,0,0,0,2,8,2,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,47,"        this(point, value, true);
",4,0,0,1,2,0,0,0,0,5,25,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,61,"        super(copyArray ? ((point == null) ? null :
",4,1,0,1,4,0,0,0,0,6,43,3,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,65,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/util/Pair,20,45,"    public Pair(K k, V v) {
",6,0,0,1,3,1,0,4,0,11,23,2,0.04348,0
defect4j,math,org/apache/commons/math3/util/Pair,20,46,"        key = k;
",4,0,0,0,0,0,0,0,0,5,8,4,0.04348,0
defect4j,math,org/apache/commons/math3/util/Pair,20,47,"        value = v;
",4,0,0,0,0,0,0,0,0,5,10,4,0.04348,0
defect4j,math,org/apache/commons/math3/util/Pair,20,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/AbstractConvergenceChecker,20,64,"    public AbstractConvergenceChecker() {
",2,0,0,1,3,1,0,0,0,3,37,2,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/AbstractConvergenceChecker,20,65,"        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;
",4,0,0,0,0,0,0,0,0,5,52,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/AbstractConvergenceChecker,20,66,"        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;
",4,0,0,0,0,0,0,0,0,5,52,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/AbstractConvergenceChecker,20,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/AbstractConvergenceChecker,20,38,"    private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * Precision.EPSILON;
",6,1,0,0,0,3,0,0,0,10,81,2,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/AbstractConvergenceChecker,20,45,"    private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * Precision.SAFE_MIN;
",6,1,0,0,0,3,0,0,0,10,82,2,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,41,"    public SimpleValueChecker() {}
",2,0,0,2,4,1,0,0,0,3,30,2,0.04348,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,113,"    private static final double LN_QUICK_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,0.04348,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,126,"    private static final double LN_HI_PREC_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,51,2,0.04348,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,139,"    private static final double SINE_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,44,2,0.04348,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,158,"    private static final double SINE_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,44,2,0.04348,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,177,"    private static final double COSINE_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,46,2,0.04348,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,196,"    private static final double COSINE_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,46,2,0.04348,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,216,"    private static final double TANGENT_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,47,2,0.04348,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,235,"    private static final double TANGENT_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,47,2,0.04348,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,254,"    private static final long RECIP_2PI[] = new long[] {
",2,0,0,2,5,3,0,0,0,5,52,2,0.04348,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,275,"    private static final long PI_O_4_BITS[] = new long[] {
",2,0,0,2,5,3,0,0,0,5,54,2,0.04348,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};
",2,0,0,2,4,3,0,0,0,5,126,2,0.04348,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,
",2,0,0,1,3,3,0,0,0,5,61,2,0.04348,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3464,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.04348,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,63,"             new MaxCountExceededCallback() {
",0,0,0,1,3,0,0,2,0,2,32,6,0.04348,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,53,"        this(0);
",0,0,0,1,2,0,0,0,0,0,8,3,0.04348,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,62,"        this(max,
",2,0,0,0,1,0,0,0,0,2,9,4,0.04348,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,80,"                       MaxCountExceededCallback cb) {
",2,0,0,0,2,0,0,2,0,4,30,3,0.04348,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,41,"    private int count = 0;
",2,0,0,0,0,1,0,0,0,3,22,2,0.04348,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,81,"        if (cb == null){
",2,1,0,1,3,0,0,0,0,3,16,4,0.04348,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,84,"        maximalCount = max;
",4,0,0,0,0,0,0,0,0,5,19,4,0.04348,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,85,"        maxCountCallback = cb;
",4,0,0,0,0,0,0,0,0,5,22,4,0.04348,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,86,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/util/Precision,20,70,"        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);
",4,2,0,2,4,0,4,0,0,11,65,4,0.04348,0
defect4j,math,org/apache/commons/math3/util/Precision,20,77,"        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);
",4,2,0,2,4,0,4,0,0,11,68,4,0.04348,0
defect4j,math,org/apache/commons/math3/util/Precision,20,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,106,"    public MersenneTwister() {
",2,0,0,1,3,1,0,0,0,3,26,2,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,107,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,108,"        setSeed(System.currentTimeMillis() + System.identityHashCode(this));
",0,1,0,3,6,0,10,0,0,11,68,5,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,109,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };
",2,0,0,2,4,3,0,0,0,5,55,2,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,144,"        long longMT = seed;
",4,0,0,0,0,0,0,0,0,4,19,5,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,146,"        mt[0]= (int) longMT;
",2,0,1,2,4,0,0,0,0,5,20,4,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,147,"        for (mti = 1; mti < N; ++mti) {
",8,1,0,1,3,0,0,0,0,11,31,4,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,150,"            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;
",8,5,0,3,6,0,0,0,0,14,71,6,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,151,"            mt[mti]= (int) longMT;
",2,0,1,2,4,0,0,0,0,7,22,6,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,154,"        clear(); // Clear normal deviate cache
",0,0,0,1,2,0,2,0,0,2,38,5,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,167,"        if (seed == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,172,"        setSeed(19650218);
",0,0,0,1,2,0,2,0,0,2,18,5,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,173,"        int i = 1;
",2,0,0,0,0,0,0,0,0,2,10,5,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,174,"        int j = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {
",10,1,0,2,5,0,6,0,0,18,57,4,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,177,"            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
",2,3,1,5,10,0,0,0,0,13,73,7,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,178,"            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
",6,5,1,5,10,0,0,0,0,15,73,7,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,179,"            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear
",10,5,1,5,10,0,0,0,0,19,76,7,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,180,"            mt[i]   = (int) (l & 0xffffffffl);
",2,1,1,3,6,0,0,0,0,8,34,6,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,181,"            i++; j++;
",4,0,0,0,0,0,0,0,0,6,9,6,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,182,"            if (i >= N) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,183,"                mt[0] = mt[N - 1];
",2,1,1,2,4,0,0,0,0,8,18,8,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,184,"                i = 1;
",2,0,0,0,0,0,0,0,0,3,6,8,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,186,"            if (j >= seed.length) {
",6,1,0,1,3,0,0,0,0,7,23,6,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,187,"                j = 0;
",2,0,0,0,0,0,0,0,0,3,6,8,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,191,"        for (int k = N - 1; k != 0; k--) {
",8,2,0,1,3,0,0,0,0,11,34,4,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,192,"            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
",2,3,1,5,10,0,0,0,0,13,73,7,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,193,"            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
",6,5,1,5,10,0,0,0,0,15,73,7,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,194,"            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear
",10,5,0,4,8,0,0,0,0,15,69,7,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,195,"            mt[i]   = (int) (l & 0xffffffffL);
",2,1,1,3,6,0,0,0,0,8,34,6,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,196,"            i++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,197,"            if (i >= N) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,198,"                mt[0] = mt[N - 1];
",2,1,1,2,4,0,0,0,0,8,18,8,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,199,"                i = 1;
",2,0,0,0,0,0,0,0,0,3,6,8,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,203,"        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array
",0,0,1,1,2,0,0,0,0,3,64,4,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,205,"        clear(); // Clear normal deviate cache
",0,0,0,1,2,0,2,0,0,2,38,5,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,207,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });
",4,2,0,7,14,0,2,0,0,8,71,5,0.04348,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,217,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,35,"    public BitsStreamGenerator() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.04348,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,36,"        nextGaussian = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,26,4,0.04348,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,165,"        nextGaussian = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,26,4,0.04348,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,166,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,240,"        this(0);
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,241,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,247,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,
",6,0,0,0,1,0,0,0,0,6,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,250,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,257,"        this(lambda, inputSigma, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,
",8,0,0,0,1,0,0,0,0,8,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,260,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,323,"        return statisticsSigmaHistory;
",2,0,0,0,0,1,0,0,0,2,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,330,"        return statisticsMeanHistory;
",2,0,0,0,0,1,0,0,0,2,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,337,"        return statisticsFitnessHistory;
",2,0,0,0,0,1,0,0,0,2,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,344,"        return statisticsDHistory;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,381,"                            arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))
",2,0,0,2,5,0,14,0,0,17,52,13,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,385,"                            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,388,"                        arz.setColumn(k, randn(dimension));
",0,0,0,2,4,0,10,0,0,10,35,12,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,393,"                    } catch (TooManyEvaluationsException e) {
",2,0,0,1,4,0,0,2,0,4,41,11,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,394,"                        break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,12,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,409,"                    updateCovarianceDiagonalOnly(hsig, bestArz, xold);
",0,0,0,1,2,0,8,0,0,8,50,10,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,430,"                    if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {
",8,1,0,2,5,0,0,0,0,10,62,9,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,431,"                        break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,11,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,440,"                    if (i >= dimension-1) {
",4,2,0,1,3,0,0,0,0,6,23,9,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,441,"                        break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,11,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,446,"                        break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,11,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,453,"                    break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,9,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,457,"                    break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,9,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,461,"                    break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,9,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,470,"                        break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,11,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,476,"                    sigma = sigma * Math.exp(0.2+cs/damps);
",8,3,0,1,2,0,4,0,0,16,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,480,"                    sigma = sigma * Math.exp(0.2+cs/damps);
",8,3,0,1,2,0,4,0,0,16,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,486,"                    statisticsSigmaHistory.add(sigma);
",0,0,0,1,2,0,6,0,0,6,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,487,"                    statisticsFitnessHistory.add(bestFitness);
",0,0,0,1,2,0,6,0,0,6,42,10,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,488,"                    statisticsMeanHistory.add(xmean.transpose());
",0,0,0,2,4,0,8,0,0,8,45,10,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,489,"                    statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));
",0,0,0,3,6,0,10,0,0,10,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,518,"                    hasInfiniteBounds = true;
",2,0,0,0,0,0,0,0,0,4,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,519,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,526,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,10,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,535,"            boundaries = null;
",2,0,0,0,0,0,0,0,0,3,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,539,"            if (inputSigma.length != init.length) {
",8,1,0,1,3,0,0,0,0,9,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,540,"                throw new DimensionMismatchException(inputSigma.length, init.length);
",8,0,0,1,2,0,0,2,0,10,69,9,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,542,"            for (int i = 0; i < init.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,543,"                if (inputSigma[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,544,"                    throw new NotPositiveException(inputSigma[i]);
",0,0,1,2,4,0,0,2,0,6,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,546,"                if (boundaries != null) {
",2,1,0,1,3,0,0,0,0,3,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,547,"                    if (inputSigma[i] > boundaries[1][i] - boundaries[0][i]) {
",0,2,1,6,13,0,0,0,0,14,58,10,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,548,"                        throw new OutOfRangeException(inputSigma[i], 0, boundaries[1][i] - boundaries[0][i]);
",0,1,1,6,12,0,0,2,0,15,85,13,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,562,"            lambda = 4 + (int) (3. * Math.log(dimension));
",2,2,0,3,6,0,6,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,665,"        double oldFac = hsig ? 0 : ccov1Sep * cc * (2. - cc);
",10,2,0,1,2,0,0,0,0,12,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,666,"        oldFac += 1. - ccov1Sep - ccovmuSep;
",6,1,0,0,0,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,667,"        diagC = diagC.scalarMultiply(oldFac) // regard old matrix
",2,0,0,1,2,0,6,0,0,9,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,673,"        diagD = sqrt(diagC); // replaces eig(C)
",2,0,0,2,4,0,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,674,"        if (diagonalOnly > 1 && iterations > diagonalOnly) {
",6,3,0,1,3,0,0,0,0,9,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,676,"            diagonalOnly = 0;
",2,0,0,0,0,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,677,"            B = eye(dimension, dimension);
",2,0,0,1,2,0,6,0,0,9,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,678,"            BD = diag(diagD);
",2,0,0,1,2,0,4,0,0,7,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,679,"            C = diag(diagC);
",2,0,0,1,2,0,4,0,0,7,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,681,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,730,"                    negccov = negcovMax;
",4,0,0,0,0,0,0,0,0,5,20,10,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,750,"                C = C.scalarMultiply(oldFac) // regard old matrix
",2,0,0,1,2,0,6,0,0,9,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,778,"                for (int i = 0; i < dimension; i++) {
",8,1,0,1,3,0,0,0,0,10,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,779,"                    if (diagD.getEntry(i, 0) < 0) {
",0,1,0,2,5,0,6,0,0,7,31,10,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,780,"                        diagD.setEntry(i, 0, 0.);
",0,0,0,1,2,0,6,0,0,6,25,13,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,783,"                double tfac = max(diagD) / 1e14;
",2,1,0,1,2,0,4,0,0,7,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,784,"                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));
",2,0,0,3,6,0,14,0,0,17,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,785,"                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));
",2,0,0,3,6,0,12,0,0,15,59,8,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,788,"                double tfac = max(diagD) / 1e14 - min(diagD);
",2,2,0,2,4,0,8,0,0,12,45,9,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,789,"                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));
",2,0,0,3,6,0,14,0,0,17,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,790,"                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));
",2,0,0,3,6,0,12,0,0,15,59,8,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1153,"            double[][] d = new double[m.getRowDimension()][1];
",2,0,0,5,10,0,4,0,0,6,50,7,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1154,"            for (int i = 0; i < m.getColumnDimension(); i++) {
",6,1,0,2,5,0,4,0,0,12,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1155,"                d[i][0] = m.getEntry(i, i);
",0,0,1,3,6,0,8,0,0,13,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1157,"            return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1338,"        double[] randn = new double[size];
",2,0,1,2,4,0,0,0,0,4,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1339,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1340,"            randn[i] = random.nextGaussian();
",0,0,1,2,4,0,4,0,0,9,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1342,"        return randn;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,60,"    protected BaseAbstractMultivariateSimpleBoundsOptimizer() {}
",2,0,0,2,4,1,0,0,0,3,60,2,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,87,"        return optimize(maxEval, f, goalType, startPoint, null, null);
",0,0,0,1,2,1,10,0,0,11,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,98,"                throw new DimensionMismatchException(lower.length, dim);
",6,0,0,1,2,0,0,2,0,8,56,9,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,104,"                    throw new NumberIsTooSmallException(v, lo, true);
",4,0,0,1,2,0,0,2,0,7,49,11,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,110,"                throw new DimensionMismatchException(upper.length, dim);
",6,0,0,1,2,0,0,2,0,8,56,9,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,116,"                    throw new NumberIsTooLargeException(v, hi, true);
",4,0,0,1,2,0,0,2,0,7,49,11,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,123,"            lowerBound = new double[dim];
",2,0,1,1,2,0,0,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,124,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,125,"                lowerBound[i] = Double.NEGATIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,9,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,131,"            upperBound = new double[dim];
",2,0,1,1,2,0,0,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,132,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,133,"                upperBound[i] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,9,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,61,"        this(new SimpleValueChecker());
",0,0,0,2,4,0,0,2,0,2,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,77,"        return evaluations.getCount();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,96,"        } catch (MaxCountExceededException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,97,"            throw new TooManyEvaluationsException(e.getMax());
",0,0,0,2,4,0,4,2,0,6,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,129,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,132,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateOptimizer,20,135,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,20,41,"        this(LocalizedFormats.NULL_NOT_ALLOWED);
",4,0,0,1,2,0,0,0,0,4,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,20,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,20,50,"        super(pattern, arguments);
",4,0,0,1,2,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,20,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,20,44,"                                        Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,20,45,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,20,46,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,20,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,20,51,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,20,57,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,20,63,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,20,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);
",6,0,0,1,2,0,0,0,0,6,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,20,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,20,53,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,20,54,"        getContext().addMessage(specific, max, args);
",0,0,0,2,4,0,10,0,0,10,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,20,55,"        this.max = max;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,20,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,20,62,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,20,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,20,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,20,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,20,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,20,60,"        super(cause);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,20,61,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,20,62,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,20,63,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,20,69,"        this(LocalizedFormats.ILLEGAL_STATE);
",4,0,0,1,2,0,0,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,20,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,20,74,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,20,80,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,20,86,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/TooManyEvaluationsException,20,37,"        super(max);
",2,0,0,1,2,0,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/TooManyEvaluationsException,20,38,"        getContext().addMessage(LocalizedFormats.EVALUATIONS);
",4,0,0,2,4,0,4,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/TooManyEvaluationsException,20,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,20,44,"        super(specific, wrong, expected);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,20,45,"        dimension = expected;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,20,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,20,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);
",8,0,0,1,2,0,0,0,0,8,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,20,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,20,63,"        return dimension;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,20,46,"        super(pattern, wrong, arguments);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,20,47,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,20,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,20,54,"        return argument;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,20,50,"        this(boundIsAllowed ?
",2,0,0,0,1,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,20,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,20,68,"        super(specific, wrong, min);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,20,70,"        this.min = min;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,20,71,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,20,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,20,78,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,20,85,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,20,50,"        this(boundIsAllowed ?
",2,0,0,0,1,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,20,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,20,67,"        super(specific, wrong, max);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,20,69,"        this.max = max;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,20,70,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,20,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,20,77,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,20,84,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,20,44,"        this(LocalizedFormats.UNSUPPORTED_OPERATION);
",4,0,0,1,2,0,0,0,0,4,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,20,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,20,52,"                                             Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,20,53,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,20,54,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,20,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,20,59,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,20,65,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,20,71,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,20,37,"        super(value, 0, true);
",2,0,0,1,2,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,20,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,20,47,"        super(specific, value, 0, true);
",4,0,0,1,2,0,0,0,0,5,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,20,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,20,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);
",10,0,0,1,2,0,0,0,0,10,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,20,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,20,62,"        super(specific, wrong, lo, hi);
",8,0,0,1,2,0,0,0,0,8,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,20,63,"        this.lo = lo;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,20,64,"        this.hi = hi;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,20,65,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,20,71,"        return lo;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,20,77,"        return hi;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,83,"        return getKey();
",0,0,0,1,2,1,2,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,91,"        return new DataTransferObject(getKey(), getValue());
",0,0,0,3,6,1,4,2,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,20,56,"        this(entry.getKey(), entry.getValue());
",0,0,0,3,6,0,8,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,20,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,20,83,"        return key;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,20,92,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,20,104,"        if (this == o) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,20,105,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,20,107,"        if (!(o instanceof Pair)) {
",2,0,0,2,5,0,0,2,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,20,108,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,20,110,"            Pair<?, ?> oP = (Pair<?, ?>) o;
",4,0,0,1,2,0,0,4,0,8,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,20,111,"            return (key == null ?
",2,1,0,0,1,1,0,0,0,3,21,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,20,127,"        int result = key == null ? 0 : key.hashCode();
",4,1,0,1,2,0,4,0,0,9,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,20,129,"        final int h = value == null ? 0 : value.hashCode();
",4,1,0,1,2,1,4,0,0,10,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,20,130,"        result = 37 * result + h ^ (h >>> 16);
",8,4,0,1,2,0,0,0,0,13,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,20,132,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,858,"            if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,859,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,862,"            if (other instanceof DoubleIndex) {
",2,0,0,1,3,0,0,2,0,4,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,863,"                return Double.compare(value, ((DoubleIndex) other).value) == 0;
",4,1,0,3,6,1,6,2,0,13,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,866,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,873,"            long bits = Double.doubleToLongBits(value);
",2,0,0,1,2,0,6,0,0,8,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,874,"            return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);
",4,3,0,4,8,1,0,0,0,7,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,906,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,7,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,931,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,7,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,953,"                value = CMAESOptimizer.this
",4,0,0,0,0,0,0,0,0,5,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,964,"            if (boundaries == null) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,965,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,967,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,968,"                if (x[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,969,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,9,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,971,"                if (x[i] > 1.0) {
",0,1,1,2,5,0,0,0,0,5,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,972,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,9,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,975,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,993,"                    repaired[i] = 0;
",0,0,1,1,2,0,0,0,0,5,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/AbstractConvergenceChecker,20,76,"                                      final double absoluteThreshold) {
",2,0,0,0,2,1,0,0,0,3,33,3,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/AbstractConvergenceChecker,20,77,"        this.relativeThreshold = relativeThreshold;
",4,0,0,0,0,0,0,0,0,5,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/AbstractConvergenceChecker,20,78,"        this.absoluteThreshold = absoluteThreshold;
",4,0,0,0,0,0,0,0,0,5,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/AbstractConvergenceChecker,20,79,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,54,"        super(relativeThreshold, absoluteThreshold);
",4,0,0,1,2,0,0,0,0,4,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/SimpleValueChecker,20,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,113,"        public DataTransferObject(final double[] point, final double value) {
",6,0,0,2,5,3,0,0,0,9,69,3,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,114,"            this.point = point.clone();
",2,0,0,1,2,0,4,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,115,"            this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,116,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,20,122,"            return new PointValuePair(point, value, false);
",4,0,0,1,2,1,0,2,0,7,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,53,"    protected AbstractFieldMatrix() {
",2,0,0,1,3,1,0,0,0,3,33,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,54,"        field = null;
",2,0,0,0,0,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,61,"    protected AbstractFieldMatrix(final Field<T> field) {
",4,0,0,1,3,2,0,4,0,10,53,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,62,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,63,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,77,"        throws NotStrictlyPositiveException {
",2,0,0,0,1,0,0,0,0,2,37,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,78,"        if (rowDimension <= 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,79,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,
",4,0,0,0,1,0,0,2,0,6,66,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,82,"        if (columnDimension <= 0) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,83,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,
",4,0,0,0,1,0,0,2,0,6,66,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,86,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,87,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,100,"        if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,101,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,103,"        if (d.length == 0) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,104,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,106,"        if (d[0].length == 0) {
",2,1,1,2,5,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,107,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,109,"        return d[0][0].getField();
",0,0,1,3,6,1,2,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,122,"        if (d.length == 0) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,123,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,125,"        return d[0].getField();
",0,0,1,2,4,1,2,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,143,"        if (columns < 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,144,"            T[] dummyRow = (T[]) Array.newInstance(field.getRuntimeClass(), 0);
",2,0,0,5,10,0,8,4,0,14,67,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,145,"            return (T[][]) Array.newInstance(dummyRow.getClass(), rows);
",0,0,0,5,10,1,10,2,0,12,60,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,147,"        T[][] array =
",2,0,0,2,4,0,0,2,0,4,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,149,"        for (int i = 0; i < array.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,150,"            Arrays.fill(array[i], field.getZero());
",0,0,1,3,6,0,8,0,0,12,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,152,"        return array;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,167,"        T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);
",2,0,0,5,10,0,10,4,0,16,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,168,"        Arrays.fill(array, field.getZero());
",0,0,0,2,4,0,10,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,169,"        return array;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,174,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,187,"        checkAdditionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,189,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,190,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,191,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,4,0,13,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,192,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,193,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,194,"                out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));
",0,0,0,4,8,0,24,0,0,24,69,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,198,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,205,"        checkSubtractionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,207,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,208,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,209,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,4,0,13,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,210,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,211,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,212,"                out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));
",0,0,0,4,8,0,24,0,0,24,74,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,216,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,222,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,223,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,224,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,4,0,13,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,225,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,226,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,227,"                out.setEntry(row, col, getEntry(row, col).add(d));
",0,0,0,3,6,0,18,0,0,18,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,231,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,236,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,237,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,238,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,4,0,13,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,239,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,240,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,241,"                out.setEntry(row, col, getEntry(row, col).multiply(d));
",0,0,0,3,6,0,18,0,0,18,55,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,245,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,252,"        checkMultiplicationCompatible(m);
",0,0,0,1,2,0,4,0,0,4,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,254,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,255,"        final int nCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,256,"        final int nSum  = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,257,"        final FieldMatrix<T> out = createMatrix(nRows, nCols);
",2,0,0,1,2,1,6,4,0,13,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,258,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,259,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,260,"                T sum = field.getZero();
",2,0,0,1,2,0,4,2,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,261,"                for (int i = 0; i < nSum; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,262,"                    sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));
",2,0,0,4,8,0,20,0,0,23,61,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,264,"                out.setEntry(row, col, sum);
",0,0,0,1,2,0,10,0,0,10,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,268,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,274,"        return m.multiply(this);
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,280,"        if (p < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,281,"            throw new NotPositiveException(p);
",2,0,0,1,2,0,0,2,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,284,"        if (!isSquare()) {
",0,0,0,2,5,0,2,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,285,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());
",0,0,0,3,6,0,4,2,0,6,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,288,"        if (p == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,289,"            return MatrixUtils.createFieldIdentityMatrix(this.getField(), this.getRowDimension());
",0,0,0,3,6,1,8,0,0,8,86,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,292,"        if (p == 1) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,293,"            return this.copy();
",0,0,0,1,2,1,2,0,0,2,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,296,"        final int power = p - 1;
",4,1,0,0,0,1,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,305,"        final char[] binaryRepresentation = Integer.toBinaryString(power)
",2,0,0,2,4,1,6,0,0,9,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,307,"        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();
",2,0,0,1,2,1,0,8,0,11,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,309,"        for (int i = 0; i < binaryRepresentation.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,310,"            if (binaryRepresentation[i] == '1') {
",0,1,1,2,5,0,0,0,0,6,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,311,"                final int pos = binaryRepresentation.length - i - 1;
",8,1,0,0,0,1,0,0,0,10,52,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,312,"                nonZeroPositions.add(pos);
",0,0,0,1,2,0,6,0,0,6,26,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,316,"        ArrayList<FieldMatrix<T>> results = new ArrayList<FieldMatrix<T>>(
",2,0,0,0,1,0,0,12,0,14,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,319,"        results.add(0, this.copy());
",0,0,0,2,4,0,6,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,321,"        for (int i = 1; i < binaryRepresentation.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,322,"            final FieldMatrix<T> s = results.get(i - 1);
",4,1,0,1,2,1,4,4,0,14,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,323,"            final FieldMatrix<T> r = s.multiply(s);
",2,0,0,1,2,1,6,4,0,13,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,324,"            results.add(i, r);
",0,0,0,1,2,0,8,0,0,8,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,327,"        FieldMatrix<T> result = this.copy();
",2,0,0,1,2,0,2,4,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,329,"        for (Integer i : nonZeroPositions) {
",4,0,0,1,3,0,0,2,0,6,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,330,"            result = result.multiply(results.get(i));
",2,0,0,2,4,0,10,0,0,13,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,331,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,333,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,338,"        final T[][] data = buildArray(field, getRowDimension(), getColumnDimension());
",2,0,0,5,10,1,8,2,0,13,78,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,340,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,341,"            final T[] dataI = data[i];
",2,0,1,2,4,1,0,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,342,"            for (int j = 0; j < dataI.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,343,"                dataI[j] = getEntry(i, j);
",0,0,1,2,4,0,6,0,0,11,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,347,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,354,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,356,"        final FieldMatrix<T> subMatrix =
",2,0,0,0,0,1,0,4,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,358,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,359,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,360,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));
",8,2,0,2,4,0,10,0,0,20,66,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,364,"        return subMatrix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,374,"        checkSubMatrixIndex(selectedRows, selectedColumns);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,377,"        final FieldMatrix<T> subMatrix =
",2,0,0,0,0,1,0,4,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,379,"        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,8,4,0,12,90,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,389,"        return subMatrix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,400,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,401,"        final int rowsCount    = endRow + 1 - startRow;
",6,2,0,0,0,1,0,0,0,9,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,402,"        final int columnsCount = endColumn + 1 - startColumn;
",6,2,0,0,0,1,0,0,0,9,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,403,"        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {
",10,3,1,4,9,0,0,0,0,15,81,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,404,"            throw new MatrixDimensionMismatchException(destination.length,
",4,0,0,0,1,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,411,"        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,6,4,0,10,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,436,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,443,"        checkSubMatrixIndex(selectedRows, selectedColumns);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,444,"        if ((destination.length < selectedRows.length) ||
",8,2,0,1,3,0,0,0,0,10,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,446,"            throw new MatrixDimensionMismatchException(destination.length,
",4,0,0,0,1,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,453,"        for (int i = 0; i < selectedRows.length; i++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,454,"            final T[] destinationI = destination[i];
",2,0,1,2,4,1,0,2,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,455,"            for (int j = 0; j < selectedColumns.length; j++) {
",10,1,0,1,3,0,0,0,0,12,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,456,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);
",0,0,1,4,8,0,2,0,0,15,64,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,460,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,469,"        if (subMatrix == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,470,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,472,"        final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,473,"        if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,474,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,477,"        final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,478,"        if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,479,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,482,"        for (int r = 1; r < nRows; ++r) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,483,"            if (subMatrix[r].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,484,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);
",4,0,1,2,4,0,0,2,0,10,65,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,488,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,489,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,490,"        checkRowIndex(nRows + row - 1);
",4,2,0,1,2,0,2,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,491,"        checkColumnIndex(nCols + column - 1);
",4,2,0,1,2,0,2,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,493,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,494,"            for (int j = 0; j < nCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,495,"                setEntry(row + i, column + j, subMatrix[i][j]);
",8,2,1,3,6,0,2,0,0,18,47,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,498,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,502,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,503,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,504,"        final FieldMatrix<T> out = createMatrix(1, nCols);
",2,0,0,1,2,1,4,4,0,11,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,505,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,506,"            out.setEntry(0, i, getEntry(row, i));
",0,0,0,2,4,0,12,0,0,12,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,509,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,516,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,517,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,518,"        if ((matrix.getRowDimension() != 1) ||
",0,2,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,520,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,524,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,525,"            setEntry(row, i, matrix.getEntry(0, i));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,528,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,534,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,535,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,536,"        final FieldMatrix<T> out = createMatrix(nRows, 1);
",2,0,0,1,2,1,4,4,0,11,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,537,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,538,"            out.setEntry(i, 0, getEntry(i, column));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,541,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,548,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,549,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,550,"        if ((matrix.getRowDimension() != nRows) ||
",2,2,0,2,5,0,4,0,0,8,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,552,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,556,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,557,"            setEntry(i, column, matrix.getEntry(i, 0));
",0,0,0,2,4,0,12,0,0,12,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,560,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,564,"        return new ArrayFieldVector<T>(field, getRow(row), false);
",2,0,0,2,4,1,4,4,0,11,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,570,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,571,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,572,"        if (vector.getDimension() != nCols) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,573,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,576,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,577,"            setEntry(row, i, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,580,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,584,"        return new ArrayFieldVector<T>(field, getColumn(column), false);
",2,0,0,2,4,1,4,4,0,11,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,591,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,592,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,593,"        if (vector.getDimension() != nRows) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,594,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,597,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,598,"            setEntry(i, column, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,601,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,605,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,606,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,607,"        final T[] out = buildArray(field, nCols);
",2,0,0,2,4,1,6,2,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,608,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,609,"            out[i] = getEntry(row, i);
",0,0,1,2,4,0,6,0,0,11,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,612,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,618,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,619,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,620,"        if (array.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,621,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,623,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,624,"            setEntry(row, i, array[i]);
",0,0,1,2,4,0,6,0,0,10,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,627,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,631,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,632,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,633,"        final T[] out = buildArray(field, nRows);
",2,0,0,2,4,1,6,2,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,634,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,635,"            out[i] = getEntry(i, column);
",0,0,1,2,4,0,6,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,638,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,645,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,646,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,647,"        if (array.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,648,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,650,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,651,"            setEntry(i, column, array[i]);
",0,0,1,2,4,0,6,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,653,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,669,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,670,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,671,"        final FieldMatrix<T> out = createMatrix(nCols, nRows);
",2,0,0,1,2,1,6,4,0,13,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,672,"        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,6,4,0,10,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,680,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,685,"        return getColumnDimension() == getRowDimension();
",0,1,0,2,4,1,4,0,0,5,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,696,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,697,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,698,"        if (nRows != nCols) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,699,"            throw new NonSquareMatrixException(nRows, nCols);
",4,0,0,1,2,0,0,2,0,6,49,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,701,"        T trace = field.getZero();
",2,0,0,1,2,0,4,2,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,702,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,703,"            trace = trace.add(getEntry(i, i));
",2,0,0,2,4,0,10,0,0,13,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,705,"        return trace;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,711,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,712,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,713,"        if (v.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,714,"            throw new DimensionMismatchException(v.length, nCols);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,717,"        final T[] out = buildArray(field, nRows);
",2,0,0,2,4,1,6,2,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,718,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,719,"            T sum = field.getZero();
",2,0,0,1,2,0,4,2,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,720,"            for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,721,"                sum = sum.add(getEntry(row, i).multiply(v[i]));
",2,0,1,4,8,0,12,0,0,19,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,723,"            out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,726,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,733,"            return new ArrayFieldVector<T>(field, operate(((ArrayFieldVector<T>) v).getDataRef()), false);
",4,0,0,5,10,1,4,8,0,17,94,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,734,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,735,"            final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,736,"            final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,737,"            if (v.getDimension() != nCols) {
",2,1,0,2,5,0,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,738,"                throw new DimensionMismatchException(v.getDimension(), nCols);
",2,0,0,2,4,0,4,2,0,8,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,741,"            final T[] out = buildArray(field, nRows);
",2,0,0,2,4,1,6,2,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,742,"            for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,743,"                T sum = field.getZero();
",2,0,0,1,2,0,4,2,0,8,24,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,744,"                for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,745,"                    sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));
",2,0,0,4,8,0,18,0,0,21,56,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,747,"                out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,750,"            return new ArrayFieldVector<T>(field, out, false);
",4,0,0,1,2,1,0,4,0,9,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,757,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,758,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,759,"        if (v.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,760,"            throw new DimensionMismatchException(v.length, nRows);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,763,"        final T[] out = buildArray(field, nCols);
",2,0,0,2,4,1,6,2,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,764,"        for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,765,"            T sum = field.getZero();
",2,0,0,1,2,0,4,2,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,766,"            for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,767,"                sum = sum.add(getEntry(i, col).multiply(v[i]));
",2,0,1,4,8,0,12,0,0,19,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,769,"            out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,772,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,779,"            return new ArrayFieldVector<T>(field, preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);
",4,0,0,5,10,1,4,8,0,17,98,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,780,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,781,"            final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,782,"            final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,783,"            if (v.getDimension() != nRows) {
",2,1,0,2,5,0,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,784,"                throw new DimensionMismatchException(v.getDimension(), nRows);
",2,0,0,2,4,0,4,2,0,8,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,787,"            final T[] out = buildArray(field, nCols);
",2,0,0,2,4,1,6,2,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,788,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,789,"                T sum = field.getZero();
",2,0,0,1,2,0,4,2,0,8,24,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,790,"                for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,791,"                    sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));
",2,0,0,4,8,0,18,0,0,21,56,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,793,"                out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,796,"            return new ArrayFieldVector<T>(field, out, false);
",4,0,0,1,2,1,0,4,0,9,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,802,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,803,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,804,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,805,"        for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,806,"            for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,807,"                final T oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,2,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,808,"                final T newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,2,0,15,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,809,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,812,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,817,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,818,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,819,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,820,"        for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,821,"            for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,822,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,825,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,832,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,833,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,835,"        for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,836,"            for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,837,"                final T oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,2,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,838,"                final T newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,2,0,15,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,839,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,842,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,849,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,850,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,852,"        for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,853,"            for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,854,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,857,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,862,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,863,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,864,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,865,"        for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,866,"            for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,867,"                final T oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,2,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,868,"                final T newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,2,0,15,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,869,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,872,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,877,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,878,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,879,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,880,"        for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,881,"            for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,882,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,885,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,893,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,894,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,896,"        for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,897,"            for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,898,"                final T oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,2,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,899,"                final T newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,2,0,15,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,900,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,903,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,911,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,912,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,914,"        for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,915,"            for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,916,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,919,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,924,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,929,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,936,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,943,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,952,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,953,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,954,"        final StringBuffer res = new StringBuffer();
",2,0,0,1,2,1,0,4,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,955,"        String fullClassName = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,956,"        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);
",2,1,0,2,4,0,8,2,0,14,84,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,957,"        res.append(shortClassName).append(""{"");
",0,0,0,2,5,0,8,0,0,9,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,959,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,960,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,961,"                res.append("","");
",0,0,0,1,2,0,4,0,0,5,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,963,"            res.append(""{"");
",0,0,0,1,3,0,4,0,0,5,16,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,964,"            for (int j = 0; j < nCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,965,"                if (j > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,966,"                    res.append("","");
",0,0,0,1,2,0,4,0,0,5,16,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,968,"                res.append(getEntry(i, j));
",0,0,0,2,4,0,10,0,0,10,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,970,"            res.append(""}"");
",0,0,0,1,3,0,4,0,0,5,16,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,973,"        res.append(""}"");
",0,0,0,1,3,0,4,0,0,5,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,974,"        return res.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,987,"        if (object == this ) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,988,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,990,"        if (object instanceof FieldMatrix<?> == false) {
",2,1,0,1,3,0,0,2,0,6,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,991,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,993,"        FieldMatrix<?> m = (FieldMatrix<?>) object;
",4,0,0,1,2,0,0,4,0,8,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,994,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,995,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,996,"        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
",4,3,0,3,7,0,8,0,0,15,70,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,997,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,999,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1000,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1001,"                if (!getEntry(row, col).equals(m.getEntry(row, col))) {
",0,0,0,4,9,0,16,0,0,17,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1002,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1006,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1016,"        int ret = 322562;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1017,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1018,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1019,"        ret = ret * 31 + nRows;
",6,2,0,0,0,0,0,0,0,9,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1020,"        ret = ret * 31 + nCols;
",6,2,0,0,0,0,0,0,0,9,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1021,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1022,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1023,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();
",8,8,0,5,10,0,8,0,0,25,79,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1026,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1036,"        if (row < 0 || row >= getRowDimension()) {
",4,3,0,2,5,0,2,0,0,9,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1037,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,
",4,0,0,0,1,0,0,2,0,6,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1040,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1050,"        if (column < 0 || column >= getColumnDimension()) {
",4,3,0,2,5,0,2,0,0,9,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1051,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,
",4,0,0,0,1,0,0,2,0,6,60,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1054,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1071,"        checkRowIndex(startRow);
",0,0,0,1,2,0,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1072,"        checkRowIndex(endRow);
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1073,"        if (endRow < startRow) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1074,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,
",4,0,0,0,1,0,0,2,0,6,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1078,"        checkColumnIndex(startColumn);
",0,0,0,1,2,0,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1079,"        checkColumnIndex(endColumn);
",0,0,0,1,2,0,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1080,"        if (endColumn < startColumn) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1081,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,
",4,0,0,0,1,0,0,2,0,6,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1084,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1098,"        if (selectedRows == null ||
",2,2,0,0,1,0,0,0,0,4,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1100,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1102,"        if (selectedRows.length == 0 ||
",4,2,0,0,1,0,0,0,0,6,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1104,"            throw new NoDataException();
",0,0,0,1,2,0,0,2,0,2,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1107,"        for (final int row : selectedRows) {
",4,0,0,1,3,1,0,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1108,"            checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1110,"        for (final int column : selectedColumns) {
",4,0,0,1,3,1,0,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1111,"            checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1113,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1124,"        if ((getRowDimension() != m.getRowDimension()) ||
",0,2,0,3,7,0,6,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1126,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),
",0,0,0,2,5,0,8,2,0,10,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1129,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1140,"        if ((getRowDimension() != m.getRowDimension()) ||
",0,2,0,3,7,0,6,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1142,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),
",0,0,0,2,5,0,8,2,0,10,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1145,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1156,"        if (getColumnDimension() != m.getRowDimension()) {
",0,1,0,3,7,0,6,0,0,7,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1157,"            throw new DimensionMismatchException(m.getRowDimension(), getColumnDimension());
",0,0,0,3,6,0,6,2,0,8,80,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,1159,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,69,"            throw new NotStrictlyPositiveException(rowDimension);
",2,0,0,1,2,0,0,2,0,4,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,72,"            throw new NotStrictlyPositiveException(columnDimension);
",2,0,0,1,2,0,0,2,0,4,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,163,"        return m.multiply(this);
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,169,"        if (p < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,170,"            throw new NotPositiveException(LocalizedFormats.NOT_POSITIVE_EXPONENT, p);
",6,0,0,1,2,0,0,2,0,8,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,173,"        if (!isSquare()) {
",0,0,0,2,5,0,2,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,174,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());
",0,0,0,3,6,0,4,2,0,6,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,177,"        if (p == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,178,"            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());
",0,0,0,2,4,1,6,0,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,181,"        if (p == 1) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,182,"            return this.copy();
",0,0,0,1,2,1,2,0,0,2,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,185,"        final int power = p - 1;
",4,1,0,0,0,1,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,194,"        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();
",2,0,0,3,6,1,8,0,0,11,80,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,195,"        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();
",2,0,0,1,2,1,0,8,0,11,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,196,"        int maxI = -1;
",2,0,0,0,0,0,0,0,0,3,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,198,"        for (int i = 0; i < binaryRepresentation.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,199,"            if (binaryRepresentation[i] == '1') {
",0,1,1,2,5,0,0,0,0,6,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,200,"                final int pos = binaryRepresentation.length - i - 1;
",8,1,0,0,0,1,0,0,0,10,52,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,201,"                nonZeroPositions.add(pos);
",0,0,0,1,2,0,6,0,0,6,26,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,204,"                if (maxI == -1) {
",2,1,0,1,3,0,0,0,0,4,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,205,"                    maxI = pos;
",4,0,0,0,0,0,0,0,0,5,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,210,"        RealMatrix[] results = new RealMatrix[maxI + 1];
",4,1,0,2,4,0,0,4,0,9,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,211,"        results[0] = this.copy();
",0,0,1,2,4,0,2,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,213,"        for (int i = 1; i <= maxI; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,214,"            results[i] = results[i-1].multiply(results[i-1]);
",4,2,1,4,8,0,2,0,0,17,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,217,"        RealMatrix result = this.copy();
",2,0,0,1,2,0,2,2,0,6,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,219,"        for (Integer i : nonZeroPositions) {
",4,0,0,1,3,0,0,2,0,6,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,220,"            result = result.multiply(results[i]);
",2,0,1,2,4,0,4,0,0,11,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,221,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,223,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,228,"        final double[][] data = new double[getRowDimension()][getColumnDimension()];
",2,0,0,6,12,1,4,0,0,7,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,230,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,231,"            final double[] dataI = data[i];
",2,0,1,2,4,1,0,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,232,"            for (int j = 0; j < dataI.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,233,"                dataI[j] = getEntry(i, j);
",0,0,1,2,4,0,6,0,0,11,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,237,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,242,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,308,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,310,"        final RealMatrix subMatrix =
",2,0,0,0,0,1,0,2,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,312,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,313,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,314,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));
",8,2,0,2,4,0,10,0,0,20,66,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,318,"        return subMatrix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,325,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);
",0,0,0,1,2,0,8,0,0,8,69,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,327,"        final RealMatrix subMatrix =
",2,0,0,0,0,1,0,2,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,329,"        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {
",0,0,0,1,4,0,4,2,0,6,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,339,"        return subMatrix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,348,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,349,"        final int rowsCount    = endRow + 1 - startRow;
",6,2,0,0,0,1,0,0,0,9,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,350,"        final int columnsCount = endColumn + 1 - startColumn;
",6,2,0,0,0,1,0,0,0,9,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,351,"        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {
",10,3,1,4,9,0,0,0,0,15,81,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,352,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,
",6,0,1,1,3,0,0,2,0,10,85,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,356,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,380,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,387,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);
",0,0,0,1,2,0,8,0,0,8,69,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,388,"        if ((destination.length < selectedRows.length) ||
",8,2,0,1,3,0,0,0,0,10,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,390,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,
",6,0,1,1,3,0,0,2,0,10,85,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,394,"        for (int i = 0; i < selectedRows.length; i++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,395,"            final double[] destinationI = destination[i];
",2,0,1,2,4,1,0,0,0,7,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,396,"            for (int j = 0; j < selectedColumns.length; j++) {
",10,1,0,1,3,0,0,0,0,12,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,397,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);
",0,0,1,4,8,0,2,0,0,15,64,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,400,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,406,"        MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,407,"        final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,408,"        if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,409,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,412,"        final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,413,"        if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,414,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,417,"        for (int r = 1; r < nRows; ++r) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,418,"            if (subMatrix[r].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,419,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);
",4,0,1,2,4,0,0,2,0,10,65,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,423,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,424,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,425,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);
",4,2,0,1,2,0,4,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,426,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);
",4,2,0,1,2,0,4,0,0,10,55,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,428,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,429,"            for (int j = 0; j < nCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,430,"                setEntry(row + i, column + j, subMatrix[i][j]);
",8,2,1,3,6,0,2,0,0,18,47,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,433,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,437,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,438,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,439,"        final RealMatrix out = createMatrix(1, nCols);
",2,0,0,1,2,1,4,2,0,9,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,440,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,441,"            out.setEntry(0, i, getEntry(row, i));
",0,0,0,2,4,0,12,0,0,12,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,444,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,450,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,451,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,452,"        if ((matrix.getRowDimension() != 1) ||
",0,2,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,454,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,458,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,459,"            setEntry(row, i, matrix.getEntry(0, i));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,461,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,479,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,480,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,481,"        if ((matrix.getRowDimension() != nRows) ||
",2,2,0,2,5,0,4,0,0,8,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,483,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,487,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,488,"            setEntry(i, column, matrix.getEntry(i, 0));
",0,0,0,2,4,0,12,0,0,12,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,490,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,495,"        return new ArrayRealVector(getRow(row), false);
",0,0,0,2,4,1,4,2,0,7,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,501,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,502,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,503,"        if (vector.getDimension() != nCols) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,504,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,507,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,508,"            setEntry(row, i, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,510,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,515,"        return new ArrayRealVector(getColumn(column), false);
",0,0,0,2,4,1,4,2,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,524,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,547,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,548,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,549,"        if (array.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,550,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,552,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,553,"            setEntry(row, i, array[i]);
",0,0,1,2,4,0,6,0,0,10,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,555,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,572,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,573,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,574,"        if (array.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,575,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,577,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,578,"            setEntry(i, column, array[i]);
",0,0,1,2,4,0,6,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,580,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,585,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,586,"        setEntry(row, column, getEntry(row, column) + increment);
",2,1,0,2,4,0,12,0,0,15,57,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,587,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,592,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,593,"        setEntry(row, column, getEntry(row, column) * factor);
",2,1,0,2,4,0,12,0,0,15,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,594,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,637,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,638,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,639,"        if (nRows != nCols) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,640,"            throw new NonSquareMatrixException(nRows, nCols);
",4,0,0,1,2,0,0,2,0,6,49,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,642,"        double trace = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,643,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,644,"            trace += getEntry(i, i);
",2,0,0,1,2,0,6,0,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,646,"        return trace;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,652,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,653,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,654,"        if (v.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,655,"            throw new DimensionMismatchException(v.length, nCols);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,658,"        final double[] out = new double[nRows];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,659,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,660,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,661,"            for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,662,"                sum += getEntry(row, i) * v[i];
",2,1,1,2,4,0,6,0,0,14,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,664,"            out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,667,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,675,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);
",2,0,0,5,10,1,4,4,0,11,79,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,676,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,677,"            final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,678,"            final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,679,"            if (v.getDimension() != nCols) {
",2,1,0,2,5,0,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,680,"                throw new DimensionMismatchException(v.getDimension(), nCols);
",2,0,0,2,4,0,4,2,0,8,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,683,"            final double[] out = new double[nRows];
",2,0,1,2,4,1,0,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,684,"            for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,685,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,686,"                for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,687,"                    sum += getEntry(row, i) * v.getEntry(i);
",2,1,0,2,4,0,12,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,689,"                out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,692,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,699,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,700,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,701,"        if (v.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,702,"            throw new DimensionMismatchException(v.length, nRows);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,705,"        final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,706,"        for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,707,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,708,"            for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,709,"                sum += getEntry(i, col) * v[i];
",2,1,1,2,4,0,6,0,0,14,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,711,"            out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,714,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,720,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);
",2,0,0,5,10,1,4,4,0,11,83,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,721,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,723,"            final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,724,"            final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,725,"            if (v.getDimension() != nRows) {
",2,1,0,2,5,0,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,726,"                throw new DimensionMismatchException(v.getDimension(), nRows);
",2,0,0,2,4,0,4,2,0,8,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,729,"            final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,730,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,731,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,732,"                for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,733,"                    sum += getEntry(i, col) * v.getEntry(i);
",2,1,0,2,4,0,12,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,735,"                out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,738,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,744,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,745,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,746,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,747,"        for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,748,"            for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,749,"                final double oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,0,0,9,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,750,"                final double newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,751,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,754,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,759,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,760,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,761,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,762,"        for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,763,"            for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,764,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,767,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,775,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,776,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,778,"        for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,779,"            for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,780,"                final double oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,0,0,9,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,781,"                final double newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,782,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,785,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,793,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,794,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,796,"        for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,797,"            for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,798,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,801,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,806,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,807,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,808,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,809,"        for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,810,"            for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,811,"                final double oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,0,0,9,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,812,"                final double newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,813,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,816,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,821,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,822,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,823,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,824,"        for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,825,"            for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,826,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,829,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,837,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,838,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,840,"        for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,841,"            for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,842,"                final double oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,0,0,9,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,843,"                final double newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,844,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,847,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,855,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,856,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,858,"        for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,859,"            for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,860,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,863,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,868,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,882,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,891,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,900,"        final StringBuilder res = new StringBuilder();
",2,0,0,1,2,1,0,4,0,7,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,901,"        String fullClassName = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,902,"        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);
",2,1,0,2,4,0,8,2,0,14,84,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,903,"        res.append(shortClassName);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,904,"        res.append(DEFAULT_FORMAT.format(this));
",0,0,0,2,4,0,8,0,0,8,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,905,"        return res.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,918,"        if (object == this ) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,919,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,921,"        if (object instanceof RealMatrix == false) {
",2,1,0,1,3,0,0,2,0,6,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,922,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,924,"        RealMatrix m = (RealMatrix) object;
",4,0,0,1,2,0,0,4,0,8,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,925,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,926,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,927,"        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
",4,3,0,3,7,0,8,0,0,15,70,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,928,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,930,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,931,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,932,"                if (getEntry(row, col) != m.getEntry(row, col)) {
",0,1,0,3,7,0,14,0,0,15,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,933,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,937,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,947,"        int ret = 7;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,948,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,949,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,950,"        ret = ret * 31 + nRows;
",6,2,0,0,0,0,0,0,0,9,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,951,"        ret = ret * 31 + nCols;
",6,2,0,0,0,0,0,0,0,9,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,952,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,953,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,954,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *
",8,8,0,3,6,0,0,0,0,17,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,958,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,20,95,"        throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,20,108,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,20,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,
",4,0,0,0,1,0,0,0,0,4,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,20,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,20,54,"        return getWrongDimension(0);
",0,0,0,1,2,1,2,0,0,2,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,20,60,"        return getExpectedDimension(0);
",0,0,0,1,2,1,2,0,0,2,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,20,66,"        return getWrongDimension(1);
",0,0,0,1,2,1,2,0,0,2,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,20,72,"        return getExpectedDimension(1);
",0,0,0,1,2,1,2,0,0,2,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,20,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);
",8,0,0,1,2,0,0,0,0,8,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,20,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,20,59,"        super(specific, wrong, expected);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,20,60,"        this.wrong = wrong.clone();
",2,0,0,1,2,0,4,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,20,61,"        this.expected = expected.clone();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,20,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,20,68,"        return wrong.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,20,74,"        return expected.clone();
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,20,82,"        return wrong[index];
",0,0,1,1,2,1,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,20,89,"        return expected[index];
",0,0,1,1,2,1,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,99,"        setEntry(index, getEntry(index) + increment);
",2,1,0,2,4,0,8,0,0,11,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,100,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,165,"        checkVectorDimensions(v.getDimension());
",0,0,0,2,4,0,6,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,166,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,177,"        int d = getDimension();
",2,0,0,1,2,0,2,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,178,"        if (d != n) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,179,"            throw new DimensionMismatchException(d, n);
",4,0,0,1,2,0,0,2,0,6,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,181,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,190,"        if (index < 0 ||
",2,2,0,0,1,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,192,"            throw new OutOfRangeException(LocalizedFormats.INDEX,
",4,0,0,0,1,0,0,2,0,6,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,195,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,207,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,208,"        if ((start < 0) || (start >= dim)) {
",6,3,0,3,7,0,0,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,209,"            throw new OutOfRangeException(LocalizedFormats.INDEX, start, 0,
",6,0,0,0,1,0,0,2,0,8,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,212,"        if ((end < 0) || (end >= dim)) {
",6,3,0,3,7,0,0,0,0,9,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,213,"            throw new OutOfRangeException(LocalizedFormats.INDEX, end, 0,
",6,0,0,0,1,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,216,"        if (end < start) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,218,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,
",4,0,0,0,1,0,0,2,0,6,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,221,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,233,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,234,"        RealVector result = v.copy();
",2,0,0,1,2,0,4,2,0,8,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,235,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,236,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,237,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,238,"            final int index = e.getIndex();
",2,0,0,1,2,1,4,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,239,"            result.setEntry(index, e.getValue() + result.getEntry(index));
",0,1,0,3,6,0,16,0,0,17,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,240,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,241,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,254,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,255,"        RealVector result = v.mapMultiply(-1d);
",2,0,0,1,2,0,4,2,0,9,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,256,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,257,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,258,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,259,"            final int index = e.getIndex();
",2,0,0,1,2,1,4,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,260,"            result.setEntry(index, e.getValue() + result.getEntry(index));
",0,1,0,3,6,0,16,0,0,17,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,261,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,262,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,273,"        return copy().mapAddToSelf(d);
",0,0,0,2,4,1,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,284,"        if (d != 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,285,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));
",0,0,0,3,6,1,8,2,0,10,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,287,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,306,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,307,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,308,"        final int n = getDimension();
",2,0,0,1,2,1,2,0,0,5,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,309,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,310,"            d += getEntry(i) * v.getEntry(i);
",2,1,0,2,4,0,10,0,0,14,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,312,"        return d;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,328,"        final double norm = getNorm();
",2,0,0,1,2,1,2,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,329,"        final double vNorm = v.getNorm();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,331,"        if (norm == 0 ||
",2,2,0,0,1,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,333,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,335,"        return dotProduct(v) / (norm * vNorm);
",4,2,0,2,4,1,4,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,395,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,396,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,397,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,398,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,399,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,400,"            final double diff = e.getValue() - v.getEntry(e.getIndex());
",2,1,0,3,6,1,12,0,0,16,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,401,"            d += diff * diff;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,402,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,403,"        return FastMath.sqrt(d);
",0,0,0,1,2,1,6,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,417,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,418,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,419,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,420,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,421,"            final double value = e.getValue();
",2,0,0,1,2,1,4,0,0,7,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,422,"            sum += value * value;
",6,1,0,0,0,0,0,0,0,8,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,423,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,424,"        return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,438,"        double norm = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,439,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,440,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,441,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,442,"            norm += FastMath.abs(e.getValue());
",2,0,0,2,4,0,8,0,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,443,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,444,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,458,"        double norm = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,459,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,460,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,461,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,462,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));
",2,0,0,3,6,0,14,0,0,17,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,463,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,464,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,480,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,481,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,482,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,483,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,484,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,485,"            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));
",2,1,0,4,8,0,16,0,0,20,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,486,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,487,"        return d;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,506,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,507,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,508,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,509,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,510,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,511,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);
",2,1,0,5,10,0,22,0,0,26,75,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,512,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,513,"        return d;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,523,"        int minIndex    = -1;
",2,0,0,0,0,0,0,0,0,3,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,524,"        double minValue = Double.POSITIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,525,"        Iterator<Entry> iterator = iterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,526,"        while (iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,527,"            final Entry entry = iterator.next();
",2,0,0,1,2,1,4,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,528,"            if (entry.getValue() <= minValue) {
",2,1,0,2,5,0,4,0,0,7,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,529,"                minIndex = entry.getIndex();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,530,"                minValue = entry.getValue();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,532,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,533,"        return minIndex;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,543,"        final int minIndex = getMinIndex();
",2,0,0,1,2,1,2,0,0,5,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,544,"        return minIndex < 0 ? Double.NaN : getEntry(minIndex);
",6,1,0,1,2,1,4,0,0,11,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,554,"        int maxIndex    = -1;
",2,0,0,0,0,0,0,0,0,3,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,555,"        double maxValue = Double.NEGATIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,556,"        Iterator<Entry> iterator = iterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,557,"        while (iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,558,"            final Entry entry = iterator.next();
",2,0,0,1,2,1,4,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,559,"            if (entry.getValue() >= maxValue) {
",2,1,0,2,5,0,4,0,0,7,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,560,"                maxIndex = entry.getIndex();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,561,"                maxValue = entry.getValue();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,563,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,564,"        return maxIndex;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,574,"        final int maxIndex = getMaxIndex();
",2,0,0,1,2,1,2,0,0,5,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,575,"        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);
",6,1,0,1,2,1,4,0,0,11,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,587,"        return copy().mapMultiplyToSelf(d);
",0,0,0,2,4,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,598,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));
",0,0,0,3,6,1,8,2,0,10,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,609,"        return copy().mapSubtractToSelf(d);
",0,0,0,2,4,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,620,"        return mapAddToSelf(-d);
",2,0,0,1,2,1,2,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,631,"        return copy().mapDivideToSelf(d);
",0,0,0,2,4,1,6,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,642,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));
",0,0,0,3,6,1,8,2,0,10,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,652,"        final int m = this.getDimension();
",2,0,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,653,"        final int n = v.getDimension();
",2,0,0,1,2,1,4,0,0,7,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,655,"        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {
",2,1,0,1,3,0,0,4,0,7,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,656,"            product = new OpenMapRealMatrix(m, n);
",6,0,0,1,2,0,0,2,0,9,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,658,"            product = new Array2DRowRealMatrix(m, n);
",6,0,0,1,2,0,0,2,0,9,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,660,"        for (int i = 0; i < m; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,661,"            for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,662,"                product.setEntry(i, j, this.getEntry(i) * v.getEntry(j));
",0,1,0,3,6,0,18,0,0,19,57,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,665,"        return product;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,680,"        final double norm2 = v.dotProduct(v);
",2,0,0,1,2,1,6,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,681,"        if (norm2 == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,682,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,684,"        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));
",0,1,0,3,6,1,14,0,0,15,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,693,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,694,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,695,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,696,"            e.setValue(value);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,697,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,698,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,708,"        int dim = getDimension();
",2,0,0,1,2,0,2,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,709,"        double[] values = new double[dim];
",2,0,1,2,4,0,0,0,0,4,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,710,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,711,"            values[i] = getEntry(i);
",0,0,1,2,4,0,4,0,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,713,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,724,"        final double norm = getNorm();
",2,0,0,1,2,1,2,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,725,"        if (norm == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,726,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,728,"        return mapDivide(norm);
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,738,"        final double norm = getNorm();
",2,0,0,1,2,1,2,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,739,"        if (norm == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,740,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,742,"        mapDivideToSelf(getNorm());
",0,0,0,2,4,0,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,743,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,761,"        return new SparseEntryIterator();
",0,0,0,1,2,1,0,2,0,2,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,775,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,776,"        return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,821,"        return copy().mapToSelf(function);
",0,0,0,2,4,1,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,838,"        Iterator<Entry> it = (function.value(0) == 0) ? sparseIterator() : iterator();
",2,1,0,4,8,0,8,4,0,15,78,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,839,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,840,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,841,"            e.setValue(function.value(e.getValue()));
",0,0,0,3,6,0,12,0,0,12,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,842,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,843,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,861,"        return copy().combineToSelf(a, b, y);
",0,0,0,2,4,1,10,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,878,"        checkVectorDimensions(y);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,879,"        for (int i = 0; i < getDimension(); i++) {
",6,1,0,2,5,0,2,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,880,"            final double xi = getEntry(i);
",2,0,0,1,2,1,4,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,881,"            final double yi = y.getEntry(i);
",2,0,0,1,2,1,6,0,0,9,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,882,"            setEntry(i, a * xi + b * yi);
",8,3,0,1,2,0,4,0,0,15,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,884,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,898,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,899,"        visitor.start(dim, 0, dim - 1);
",2,1,0,1,2,0,6,0,0,9,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,900,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,901,"            visitor.visit(i, getEntry(i));
",0,0,0,2,4,0,10,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,903,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,921,"        checkIndices(start, end);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,922,"        visitor.start(getDimension(), start, end);
",0,0,0,2,4,0,10,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,923,"        for (int i = start; i <= end; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,924,"            visitor.visit(i, getEntry(i));
",0,0,0,2,4,0,10,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,926,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,941,"        return walkInDefaultOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,961,"        return walkInDefaultOrder(visitor, start, end);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,974,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,975,"        visitor.start(dim, 0, dim - 1);
",2,1,0,1,2,0,6,0,0,9,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,976,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,977,"            setEntry(i, visitor.visit(i, getEntry(i)));
",0,0,0,3,6,0,14,0,0,14,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,979,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,997,"        checkIndices(start, end);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,998,"        visitor.start(getDimension(), start, end);
",0,0,0,2,4,0,10,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,999,"        for (int i = start; i <= end; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1000,"            setEntry(i, visitor.visit(i, getEntry(i)));
",0,0,0,3,6,0,14,0,0,14,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1002,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1017,"        return walkInDefaultOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1037,"        return walkInDefaultOrder(visitor, start, end);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1112,"        throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1125,"        throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1230,"        return new RealVector() {
",0,0,0,1,3,1,0,2,0,2,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,64,"            throw new NonSquareMatrixException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,60,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,104,"                final double[] hK = householderVectors[k - 1];
",4,1,1,2,4,1,0,0,0,8,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,105,"                qta[k][k] = 1;
",0,0,1,2,4,0,0,0,0,7,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,106,"                if (hK[k] != 0.0) {
",0,1,1,2,5,0,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,107,"                    final double inv = 1.0 / (secondary[k - 1] * hK[k]);
",4,3,1,3,6,1,0,0,0,14,52,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,108,"                    double beta = 1.0 / secondary[k - 1];
",4,2,1,1,2,0,0,0,0,8,37,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,109,"                    qta[k][k] = 1 + beta * hK[k];
",2,2,1,3,6,0,0,0,0,15,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,110,"                    for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,111,"                        qta[k][i] = beta * hK[i];
",2,1,1,3,6,0,0,0,0,14,25,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,113,"                    for (int j = k + 1; j < m; ++j) {
",10,2,0,1,3,0,0,0,0,13,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,114,"                        beta = 0;
",2,0,0,0,0,0,0,0,0,3,9,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,115,"                        for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,116,"                            beta += qta[j][i] * hK[i];
",2,1,1,3,6,0,0,0,0,14,26,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,118,"                        beta *= inv;
",4,0,0,0,0,0,0,0,0,5,12,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,119,"                        qta[j][k] = beta * hK[k];
",2,1,1,3,6,0,0,0,0,14,25,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,120,"                        for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,121,"                            qta[j][i] += beta * hK[i];
",2,1,1,3,6,0,0,0,0,14,26,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,139,"        if (cachedT == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,140,"            final int m = main.length;
",6,0,0,0,0,1,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,141,"            double[][] ta = new double[m][m];
",2,0,1,4,8,0,0,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,142,"            for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,143,"                ta[i][i] = main[i];
",0,0,1,3,6,0,0,0,0,11,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,144,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,145,"                    ta[i][i - 1] = secondary[i - 1];
",4,2,1,3,6,0,0,0,0,13,32,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,147,"                if (i < main.length - 1) {
",6,2,0,1,3,0,0,0,0,8,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,148,"                    ta[i][i + 1] = secondary[i];
",2,1,1,3,6,0,0,0,0,12,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,151,"            cachedT = MatrixUtils.createRealMatrix(ta);
",2,0,0,1,2,0,6,0,0,9,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,155,"        return cachedT;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,165,"        return householderVectors;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,198,"            final double[] hK = householderVectors[k];
",2,0,1,2,4,1,0,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,199,"            main[k] = hK[k];
",0,0,1,2,4,0,0,0,0,9,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,200,"            double xNormSqr = 0;
",2,0,0,0,0,0,0,0,0,2,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,201,"            for (int j = k + 1; j < m; ++j) {
",10,2,0,1,3,0,0,0,0,13,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,202,"                final double c = hK[j];
",2,0,1,1,2,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,203,"                xNormSqr += c * c;
",6,1,0,0,0,0,0,0,0,8,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,205,"            final double a = (hK[k + 1] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);
",4,2,1,4,8,1,12,0,0,22,86,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,206,"            secondary[k] = a;
",2,0,1,1,2,0,0,0,0,7,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,207,"            if (a != 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,210,"                hK[k + 1] -= a;
",4,1,1,1,2,0,0,0,0,8,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,211,"                final double beta = -1 / (a * hK[k + 1]);
",6,3,1,2,4,1,0,0,0,13,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,217,"                Arrays.fill(z, k + 1, m, 0);
",2,1,0,1,2,0,8,0,0,11,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,218,"                for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,219,"                    final double[] hI = householderVectors[i];
",2,0,1,2,4,1,0,0,0,7,42,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,220,"                    final double hKI = hK[i];
",2,0,1,1,2,1,0,0,0,7,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,221,"                    double zI = hI[i] * hKI;
",4,1,1,1,2,0,0,0,0,9,24,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,222,"                    for (int j = i + 1; j < m; ++j) {
",10,2,0,1,3,0,0,0,0,13,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,223,"                        final double hIJ = hI[j];
",2,0,1,1,2,1,0,0,0,7,25,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,224,"                        zI   += hIJ * hK[j];
",4,1,1,1,2,0,0,0,0,10,20,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,225,"                        z[j] += hIJ * hKI;
",4,1,1,1,2,0,0,0,0,10,18,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,227,"                    z[i] = beta * (z[i] + zI);
",4,2,1,3,6,0,0,0,0,15,26,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,231,"                double gamma = 0;
",2,0,0,0,0,0,0,0,0,2,17,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,232,"                for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,233,"                    gamma += z[i] * hK[i];
",2,1,1,2,4,0,0,0,0,12,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,235,"                gamma *= beta / 2;
",4,1,0,0,0,0,0,0,0,6,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,238,"                for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,239,"                    z[i] -= gamma * hK[i];
",2,1,1,2,4,0,0,0,0,12,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,244,"                for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,245,"                    final double[] hI = householderVectors[i];
",2,0,1,2,4,1,0,0,0,7,42,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,246,"                    for (int j = i; j < m; ++j) {
",10,1,0,1,3,0,0,0,0,12,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,20,247,"                        hI[j] -= hK[i] * z[j] + z[i] * hK[j];
",0,3,1,5,10,0,0,0,0,24,37,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSquareMatrixException,20,40,"        super(LocalizedFormats.NON_SQUARE_MATRIX, wrong, expected);
",8,0,0,1,2,0,0,0,0,8,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSquareMatrixException,20,41,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,20,37,"    public void visit(int row, int column, double value) {}
",8,0,0,2,4,1,0,0,0,9,55,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1611,"            class UnmodifiableEntry extends Entry {
",2,0,0,0,1,0,0,2,0,4,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1615,"                    return v.getEntry(getIndex());
",0,0,0,2,4,1,6,0,0,6,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1627,"                    throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1046,"        public Entry() {
",2,0,0,1,3,1,0,0,0,3,16,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1047,"            setIndex(0);
",0,0,0,1,2,0,2,0,0,2,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1048,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1056,"            return getEntry(getIndex());
",0,0,0,2,4,1,4,0,0,4,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1065,"            setEntry(getIndex(), value);
",0,0,0,2,4,0,6,0,0,6,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1066,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1074,"            return index;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1083,"            this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1084,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1230,"        return new RealVector() {
",0,0,0,1,3,1,0,2,0,2,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1611,"            class UnmodifiableEntry extends Entry {
",2,0,0,0,1,0,0,2,0,4,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1239,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1245,"                return v.map(function);
",0,0,0,1,2,1,6,0,0,6,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1251,"                final Iterator<Entry> i = v.iterator();
",2,0,0,1,2,1,4,4,0,11,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1252,"                return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1282,"                final Iterator<Entry> i = v.sparseIterator();
",2,0,0,1,2,1,4,4,0,11,45,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1284,"                return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1315,"                return v.copy();
",0,0,0,1,2,1,4,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1322,"                return v.add(w);
",0,0,0,1,2,1,6,0,0,6,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1329,"                return v.subtract(w);
",0,0,0,1,2,1,6,0,0,6,21,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1335,"                return v.mapAdd(d);
",0,0,0,1,2,1,6,0,0,6,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1347,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1353,"                return v.mapSubtract(d);
",0,0,0,1,2,1,6,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1365,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1371,"                return v.mapMultiply(d);
",0,0,0,1,2,1,6,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1383,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1389,"                return v.mapDivide(d);
",0,0,0,1,2,1,6,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1401,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1408,"                return v.ebeMultiply(w);
",0,0,0,1,2,1,6,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1415,"                return v.ebeDivide(w);
",0,0,0,1,2,1,6,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1422,"                return v.dotProduct(w);
",0,0,0,1,2,1,6,0,0,6,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1429,"                return v.cosine(w);
",0,0,0,1,2,1,6,0,0,6,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1435,"                return v.getNorm();
",0,0,0,1,2,1,4,0,0,4,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1441,"                return v.getL1Norm();
",0,0,0,1,2,1,4,0,0,4,21,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1447,"                return v.getLInfNorm();
",0,0,0,1,2,1,4,0,0,4,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1454,"                return v.getDistance(w);
",0,0,0,1,2,1,6,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1461,"                return v.getL1Distance(w);
",0,0,0,1,2,1,6,0,0,6,26,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1468,"                return v.getLInfDistance(w);
",0,0,0,1,2,1,6,0,0,6,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1474,"                return v.unitVector();
",0,0,0,1,2,1,4,0,0,4,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1485,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1491,"                return v.outerProduct(w);
",0,0,0,1,2,1,6,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1497,"                return v.getEntry(index);
",0,0,0,1,2,1,6,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1509,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1521,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1527,"                return v.getDimension();
",0,0,0,1,2,1,4,0,0,4,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1533,"                return v.append(w);
",0,0,0,1,2,1,6,0,0,6,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1539,"                return v.append(d);
",0,0,0,1,2,1,6,0,0,6,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1546,"                return v.getSubVector(index, n);
",0,0,0,1,2,1,8,0,0,8,32,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1558,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1570,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1576,"                return v.toArray();
",0,0,0,1,2,1,4,0,0,4,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1582,"                return v.isNaN();
",0,0,0,1,2,1,4,0,0,4,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1588,"                return v.isInfinite();
",0,0,0,1,2,1,4,0,0,4,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1595,"                return v.combine(a, b, y);
",0,0,0,1,2,1,10,0,0,10,26,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1607,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,55,"        super(field);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,70,"        super(field, rowDimension, columnDimension);
",6,0,0,1,2,0,0,0,0,6,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,71,"        data = buildArray(field, rowDimension, columnDimension);
",2,0,0,1,2,0,8,0,0,11,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,89,"        this(extractField(d), d);
",2,0,0,2,4,0,4,0,0,6,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,90,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,108,"        super(field);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,109,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,110,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,129,"        this(extractField(d), d, copyArray);
",4,0,0,2,4,0,4,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,130,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,150,"        super(field);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,151,"        if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,152,"            copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,154,"            MathUtils.checkNotNull(d);
",0,0,0,1,2,0,6,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,155,"            final int nRows = d.length;
",6,0,0,0,0,1,0,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,156,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,157,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,159,"            final int nCols = d[0].length;
",4,0,1,1,2,1,0,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,160,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,161,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,163,"            for (int r = 1; r < nRows; r++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,164,"                if (d[r].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,165,"                    throw new DimensionMismatchException(nCols, d[r].length);
",4,0,1,2,4,0,0,2,0,10,57,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,168,"            data = d;
",4,0,0,0,0,0,0,0,0,5,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,170,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,180,"        this(extractField(v), v);
",2,0,0,2,4,0,4,0,0,6,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,181,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,192,"        super(field);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,193,"        final int nRows = v.length;
",6,0,0,0,0,1,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,194,"        data = buildArray(getField(), nRows, 1);
",2,0,0,2,4,0,6,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,195,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,196,"            data[row][0] = v[row];
",0,0,1,3,6,0,0,0,0,9,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,198,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,203,"        return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);
",4,0,0,2,4,1,2,4,0,10,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,209,"        return new Array2DRowFieldMatrix<T>(getField(), copyOut(), false);
",0,0,0,3,6,1,4,4,0,9,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,222,"        checkAdditionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,224,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,225,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,226,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);
",2,0,0,4,8,1,8,2,0,13,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,227,"        for (int row = 0; row < rowCount; row++) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,228,"            final T[] dataRow    = data[row];
",2,0,1,2,4,1,0,2,0,9,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,229,"            final T[] mRow       = m.data[row];
",6,0,1,2,4,1,0,2,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,230,"            final T[] outDataRow = outData[row];
",2,0,1,2,4,1,0,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,231,"            for (int col = 0; col < columnCount; col++) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,232,"                outDataRow[col] = dataRow[col].add(mRow[col]);
",0,0,1,4,8,0,2,0,0,15,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,236,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);
",2,0,0,2,4,1,2,4,0,9,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,249,"        checkSubtractionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,251,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,252,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,253,"        final T[][] outData = buildArray(getField(), rowCount, columnCount);
",2,0,0,4,8,1,8,2,0,13,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,254,"        for (int row = 0; row < rowCount; row++) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,255,"            final T[] dataRow    = data[row];
",2,0,1,2,4,1,0,2,0,9,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,256,"            final T[] mRow       = m.data[row];
",6,0,1,2,4,1,0,2,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,257,"            final T[] outDataRow = outData[row];
",2,0,1,2,4,1,0,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,258,"            for (int col = 0; col < columnCount; col++) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,259,"                outDataRow[col] = dataRow[col].subtract(mRow[col]);
",0,0,1,4,8,0,2,0,0,15,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,263,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);
",2,0,0,2,4,1,2,4,0,9,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,277,"        checkMultiplicationCompatible(m);
",0,0,0,1,2,0,4,0,0,4,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,279,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,280,"        final int nCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,281,"        final int nSum = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,282,"        final T[][] outData = buildArray(getField(), nRows, nCols);
",2,0,0,4,8,1,8,2,0,13,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,283,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,284,"            final T[] dataRow    = data[row];
",2,0,1,2,4,1,0,2,0,9,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,285,"            final T[] outDataRow = outData[row];
",2,0,1,2,4,1,0,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,286,"            for (int col = 0; col < nCols; col++) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,287,"                T sum = getField().getZero();
",2,0,0,2,4,0,4,2,0,8,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,288,"                for (int i = 0; i < nSum; i++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,289,"                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));
",6,0,1,5,10,0,6,0,0,21,51,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,291,"                outDataRow[col] = sum;
",2,0,1,1,2,0,0,0,0,7,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,295,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);
",2,0,0,2,4,1,2,4,0,9,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,302,"        return copyOut();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,312,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,318,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,319,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,320,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);
",6,0,0,1,2,0,0,2,0,8,90,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,322,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,323,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);
",6,0,0,1,2,0,0,2,0,8,96,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,325,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,326,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,327,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,330,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,331,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,332,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,334,"            data = buildArray(getField(), subMatrix.length, nCols);
",6,0,0,2,4,0,6,0,0,13,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,335,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,336,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,337,"                    throw new DimensionMismatchException(nCols, subMatrix[i].length);
",4,0,1,2,4,0,0,2,0,10,65,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,339,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,341,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,342,"            super.setSubMatrix(subMatrix, row, column);
",8,0,0,1,2,0,0,0,0,8,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,345,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,350,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,351,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,353,"        return data[row][column];
",0,0,1,2,4,1,0,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,359,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,360,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,362,"        data[row][column] = value;
",2,0,1,2,4,0,0,0,0,9,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,363,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,368,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,369,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,371,"        data[row][column] = data[row][column].add(increment);
",0,0,1,5,10,0,4,0,0,17,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,372,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,377,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,378,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,380,"        data[row][column] = data[row][column].multiply(factor);
",0,0,1,5,10,0,4,0,0,17,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,381,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,386,"        return (data == null) ? 0 : data.length;
",6,1,0,1,2,1,0,0,0,7,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,392,"        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;
",4,3,1,5,10,1,0,0,0,11,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,398,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,399,"        final int nCols = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,400,"        if (v.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,401,"            throw new DimensionMismatchException(v.length, nCols);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,403,"        final T[] out = buildArray(getField(), nRows);
",2,0,0,3,6,1,6,2,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,404,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,405,"            final T[] dataRow = data[row];
",2,0,1,2,4,1,0,2,0,9,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,406,"            T sum = getField().getZero();
",2,0,0,2,4,0,4,2,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,407,"            for (int i = 0; i < nCols; i++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,408,"                sum = sum.add(dataRow[i].multiply(v[i]));
",2,0,1,4,8,0,6,0,0,17,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,410,"            out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,412,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,418,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,419,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,420,"        if (v.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,421,"            throw new DimensionMismatchException(v.length, nRows);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,424,"        final T[] out = buildArray(getField(), nCols);
",2,0,0,3,6,1,6,2,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,425,"        for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,426,"            T sum = getField().getZero();
",2,0,0,2,4,0,4,2,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,427,"            for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,428,"                sum = sum.add(data[i][col].multiply(v[i]));
",2,0,1,5,10,0,6,0,0,19,43,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,430,"            out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,433,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,439,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,440,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,441,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,442,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,443,"            final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,444,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,445,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,448,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,454,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,455,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,456,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,457,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,458,"            final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,459,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,460,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,463,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,471,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,472,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,474,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,475,"            final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,476,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,477,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,480,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,488,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,489,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,491,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,492,"            final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,493,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,494,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,497,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,503,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,504,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,505,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,506,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,507,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,508,"                final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,509,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,512,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,518,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,519,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,520,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,521,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,522,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,523,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,526,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,534,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,535,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,537,"        for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,538,"            for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,539,"                final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,540,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,543,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,551,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,552,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,554,"        for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,555,"            for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,556,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,559,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,568,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,569,"        final T[][] out = buildArray(getField(), nRows, getColumnDimension());
",2,0,0,5,10,1,8,2,0,13,70,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,571,"        for (int i = 0; i < nRows; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,572,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);
",2,0,1,4,8,0,4,0,0,18,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,574,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,587,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,20,588,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,20,38,"        super(value, 0, false);
",2,0,0,1,2,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,20,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,20,48,"        super(specific, value, 0, false);
",4,0,0,1,2,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,20,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,20,37,"        this(LocalizedFormats.NO_DATA);
",4,0,0,1,2,0,0,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,20,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,20,45,"        super(specific);
",2,0,0,1,2,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,20,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,20,37,"        this(LocalizedFormats.ZERO_NOT_ALLOWED);
",4,0,0,1,2,0,0,0,0,4,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,20,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,20,47,"        super(specific, 0, arguments);
",4,0,0,1,2,0,0,0,0,4,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,20,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,424,"                final ArrayRealVector[] eigenvectors) {
",2,0,0,1,4,1,0,2,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,425,"            this.realEigenvalues = realEigenvalues;
",4,0,0,0,0,0,0,0,0,5,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,426,"            this.imagEigenvalues = imagEigenvalues;
",4,0,0,0,0,0,0,0,0,5,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,427,"            this.eigenvectors = eigenvectors;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,428,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,407,"    private static class Solver implements DecompositionSolver {
",2,0,0,0,1,2,0,2,0,6,60,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,444,"            if (!isNonSingular()) {
",0,0,0,2,5,0,2,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,445,"                throw new SingularMatrixException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,448,"            final int m = realEigenvalues.length;
",6,0,0,0,0,1,0,0,0,7,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,449,"            if (b.getDimension() != m) {
",2,1,0,2,5,0,4,0,0,7,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,450,"                throw new DimensionMismatchException(b.getDimension(), m);
",2,0,0,2,4,0,4,2,0,8,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,453,"            final double[] bp = new double[m];
",2,0,1,2,4,1,0,0,0,5,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,454,"            for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,455,"                final ArrayRealVector v = eigenvectors[i];
",2,0,1,1,2,1,0,2,0,9,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,456,"                final double[] vData = v.getDataRef();
",2,0,0,2,4,1,4,0,0,7,38,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,457,"                final double s = v.dotProduct(b) / realEigenvalues[i];
",2,1,1,2,4,1,6,0,0,14,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,458,"                for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,459,"                    bp[j] += s * vData[j];
",2,1,1,2,4,0,0,0,0,12,22,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,463,"            return new ArrayRealVector(bp, false);
",2,0,0,1,2,1,0,2,0,5,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,469,"            if (!isNonSingular()) {
",0,0,0,2,5,0,2,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,470,"                throw new SingularMatrixException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,473,"            final int m = realEigenvalues.length;
",6,0,0,0,0,1,0,0,0,7,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,474,"            if (b.getRowDimension() != m) {
",2,1,0,2,5,0,4,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,475,"                throw new DimensionMismatchException(b.getRowDimension(), m);
",2,0,0,2,4,0,4,2,0,8,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,478,"            final int nColB = b.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,479,"            final double[][] bp = new double[m][nColB];
",2,0,1,4,8,1,0,0,0,7,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,480,"            final double[] tmpCol = new double[m];
",2,0,1,2,4,1,0,0,0,5,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,481,"            for (int k = 0; k < nColB; ++k) {
",8,1,0,1,3,0,0,0,0,10,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,482,"                for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,483,"                    tmpCol[i] = b.getEntry(i, k);
",0,0,1,2,4,0,8,0,0,13,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,484,"                    bp[i][k]  = 0;
",0,0,1,2,4,0,0,0,0,7,14,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,486,"                for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,487,"                    final ArrayRealVector v = eigenvectors[i];
",2,0,1,1,2,1,0,2,0,9,42,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,488,"                    final double[] vData = v.getDataRef();
",2,0,0,2,4,1,4,0,0,7,38,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,489,"                    double s = 0;
",2,0,0,0,0,0,0,0,0,2,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,490,"                    for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,491,"                        s += v.getEntry(j) * tmpCol[j];
",2,1,1,2,4,0,6,0,0,14,31,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,493,"                    s /= realEigenvalues[i];
",2,0,1,1,2,0,0,0,0,7,24,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,494,"                    for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,495,"                        bp[j][k] += s * vData[j];
",2,1,1,3,6,0,0,0,0,14,25,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,500,"            return new Array2DRowRealMatrix(bp, false);
",2,0,0,1,2,1,0,2,0,5,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,510,"            for (int i = 0; i < realEigenvalues.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,511,"                if (realEigenvalues[i] == 0 &&
",0,2,1,1,3,0,0,0,0,6,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,513,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,516,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,526,"            if (!isNonSingular()) {
",0,0,0,2,5,0,2,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,527,"                throw new SingularMatrixException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,530,"            final int m = realEigenvalues.length;
",6,0,0,0,0,1,0,0,0,7,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,531,"            final double[][] invData = new double[m][m];
",2,0,1,4,8,1,0,0,0,7,44,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,533,"            for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,534,"                final double[] invI = invData[i];
",2,0,1,2,4,1,0,0,0,7,33,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,535,"                for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,536,"                    double invIJ = 0;
",2,0,0,0,0,0,0,0,0,2,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,537,"                    for (int k = 0; k < m; ++k) {
",8,1,0,1,3,0,0,0,0,10,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,538,"                        final double[] vK = eigenvectors[k].getDataRef();
",2,0,1,3,6,1,2,0,0,9,49,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,539,"                        invIJ += vK[i] * vK[j] / realEigenvalues[k];
",2,2,1,3,6,0,0,0,0,17,44,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,541,"                    invI[j] = invIJ;
",2,0,1,1,2,0,0,0,0,7,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,544,"            return MatrixUtils.createRealMatrix(invData);
",0,0,0,1,2,1,6,0,0,6,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,56,"    public ArrayRealVector() {
",2,0,0,1,3,1,0,0,0,3,26,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,57,"        data = new double[0];
",2,0,0,1,2,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,65,"    public ArrayRealVector(int size) {
",4,0,0,1,3,1,0,0,0,5,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,66,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,75,"    public ArrayRealVector(int size, double preset) {
",6,0,0,1,3,1,0,0,0,7,49,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,76,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,77,"        Arrays.fill(data, preset);
",0,0,0,1,2,0,8,0,0,8,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,104,"        throws NullArgumentException {
",2,0,0,0,1,0,0,0,0,2,30,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,105,"        if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,106,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,108,"        data = copyArray ? d.clone() :  d;
",6,0,0,1,2,0,4,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,109,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,122,"        throws NullArgumentException, NumberIsTooLargeException {
",4,0,0,0,1,0,0,0,0,4,57,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,123,"        if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,124,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,126,"        if (d.length < pos + size) {
",8,2,0,1,3,0,0,0,0,10,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,127,"            throw new NumberIsTooLargeException(pos + size, d.length, true);
",8,1,0,1,2,0,0,2,0,12,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,129,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,130,"        System.arraycopy(d, pos, data, 0, size);
",0,0,0,1,2,0,12,0,0,12,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,131,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,138,"    public ArrayRealVector(Double[] d) {
",4,0,0,2,5,1,0,2,0,7,36,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,139,"        data = new double[d.length];
",6,0,0,1,2,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,140,"        for (int i = 0; i < d.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,141,"            data[i] = d[i].doubleValue();
",0,0,1,3,6,0,2,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,143,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,156,"        throws NullArgumentException, NumberIsTooLargeException {
",4,0,0,0,1,0,0,0,0,4,57,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,157,"        if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,158,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,160,"        if (d.length < pos + size) {
",8,2,0,1,3,0,0,0,0,10,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,161,"            throw new NumberIsTooLargeException(pos + size, d.length, true);
",8,1,0,1,2,0,0,2,0,12,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,163,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,164,"        for (int i = pos; i < pos + size; i++) {
",12,2,0,1,3,0,0,0,0,15,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,165,"            data[i - pos] = d[i].doubleValue();
",4,1,1,3,6,0,2,0,0,14,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,167,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,175,"    public ArrayRealVector(RealVector v) throws NullArgumentException {
",6,0,0,1,3,1,0,2,0,9,67,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,176,"        if (v == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,177,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,179,"        data = new double[v.getDimension()];
",2,0,0,2,4,0,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,180,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,181,"            data[i] = v.getEntry(i);
",0,0,1,2,4,0,6,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,183,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,192,"        this(v, true);
",2,0,0,1,2,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,193,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,202,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {
",6,0,0,1,3,1,0,2,0,9,57,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,203,"        data = deep ? v.data.clone() : v.data;
",12,0,0,1,2,0,2,0,0,15,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,204,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,211,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {
",6,0,0,1,3,1,0,4,0,11,64,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,212,"        data = new double[v1.data.length + v2.data.length];
",14,1,0,1,2,0,0,0,0,16,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,213,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);
",10,0,0,1,2,0,6,0,0,16,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,214,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
",16,0,0,1,2,0,6,0,0,22,67,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,215,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,222,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {
",6,0,0,1,3,1,0,4,0,11,59,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,223,"        final int l1 = v1.data.length;
",8,0,0,0,0,1,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,224,"        final int l2 = v2.getDimension();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,225,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,226,"        System.arraycopy(v1.data, 0, data, 0, l1);
",4,0,0,1,2,0,8,0,0,12,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,227,"        for (int i = 0; i < l2; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,228,"            data[l1 + i] = v2.getEntry(i);
",4,1,1,2,4,0,6,0,0,14,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,230,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,237,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {
",6,0,0,1,3,1,0,4,0,11,59,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,238,"        final int l1 = v1.getDimension();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,239,"        final int l2 = v2.data.length;
",8,0,0,0,0,1,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,240,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,241,"        for (int i = 0; i < l1; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,242,"            data[i] = v1.getEntry(i);
",0,0,1,2,4,0,6,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,244,"        System.arraycopy(v2.data, 0, data, l1, l2);
",4,0,0,1,2,0,10,0,0,14,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,245,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,252,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {
",6,0,0,2,5,1,0,2,0,9,57,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,253,"        final int l1 = v1.getDimension();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,254,"        final int l2 = v2.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,255,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,256,"        System.arraycopy(v1.data, 0, data, 0, l1);
",4,0,0,1,2,0,8,0,0,12,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,257,"        System.arraycopy(v2, 0, data, l1, l2);
",0,0,0,1,2,0,12,0,0,12,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,258,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,265,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {
",6,0,0,2,5,1,0,2,0,9,57,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,266,"        final int l1 = v1.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,267,"        final int l2 = v2.getDimension();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,268,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,269,"        System.arraycopy(v1, 0, data, 0, l1);
",0,0,0,1,2,0,10,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,270,"        System.arraycopy(v2.data, 0, data, l1, l2);
",4,0,0,1,2,0,10,0,0,14,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,271,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,278,"    public ArrayRealVector(double[] v1, double[] v2) {
",6,0,0,3,7,1,0,0,0,7,50,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,279,"        final int l1 = v1.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,280,"        final int l2 = v2.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,281,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,282,"        System.arraycopy(v1, 0, data, 0, l1);
",0,0,0,1,2,0,10,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,283,"        System.arraycopy(v2, 0, data, l1, l2);
",0,0,0,1,2,0,12,0,0,12,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,284,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,289,"        return new ArrayRealVector(this, true);
",0,0,0,1,2,1,0,2,0,3,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,296,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,297,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,298,"            final int dim = vData.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,299,"            checkVectorDimensions(dim);
",0,0,0,1,2,0,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,300,"            ArrayRealVector result = new ArrayRealVector(dim);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,301,"            double[] resultData = result.data;
",6,0,0,1,2,0,0,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,302,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,303,"                resultData[i] = data[i] + vData[i];
",0,1,1,3,6,0,0,0,0,14,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,305,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,307,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,308,"            double[] out = data.clone();
",2,0,0,2,4,0,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,309,"            Iterator<Entry> it = v.sparseIterator();
",2,0,0,1,2,0,4,4,0,10,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,310,"            while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,311,"                final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,312,"                out[e.getIndex()] += e.getValue();
",0,0,1,3,6,0,8,0,0,11,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,313,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,314,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,322,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,323,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,324,"            final int dim = vData.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,325,"            checkVectorDimensions(dim);
",0,0,0,1,2,0,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,326,"            ArrayRealVector result = new ArrayRealVector(dim);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,327,"            double[] resultData = result.data;
",6,0,0,1,2,0,0,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,328,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,329,"                resultData[i] = data[i] - vData[i];
",0,1,1,3,6,0,0,0,0,14,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,331,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,333,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,334,"            double[] out = data.clone();
",2,0,0,2,4,0,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,335,"            Iterator<Entry> it = v.sparseIterator();
",2,0,0,1,2,0,4,4,0,10,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,336,"            while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,337,"                final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,338,"                out[e.getIndex()] -= e.getValue();
",0,0,1,3,6,0,8,0,0,11,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,339,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,340,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,347,"        return copy().mapToSelf(function);
",0,0,0,2,4,1,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,353,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,354,"            data[i] = function.value(data[i]);
",0,0,1,3,6,0,4,0,0,13,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,356,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,362,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,363,"            data[i] = data[i] + d;
",2,1,1,2,4,0,0,0,0,12,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,365,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,371,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,372,"            data[i] = data[i] - d;
",2,1,1,2,4,0,0,0,0,12,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,374,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,380,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,381,"            data[i] = data[i] * d;
",2,1,1,2,4,0,0,0,0,12,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,383,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,389,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,390,"            data[i] = data[i] / d;
",2,1,1,2,4,0,0,0,0,12,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,392,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,399,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,400,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,401,"            final int dim = vData.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,402,"            checkVectorDimensions(dim);
",0,0,0,1,2,0,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,403,"            ArrayRealVector result = new ArrayRealVector(dim);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,404,"            double[] resultData = result.data;
",6,0,0,1,2,0,0,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,405,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,406,"                resultData[i] = data[i] * vData[i];
",0,1,1,3,6,0,0,0,0,14,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,408,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,410,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,411,"            double[] out = data.clone();
",2,0,0,2,4,0,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,412,"            for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,413,"                out[i] *= v.getEntry(i);
",0,0,1,2,4,0,6,0,0,11,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,415,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,423,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,424,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,425,"            final int dim = vData.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,426,"            checkVectorDimensions(dim);
",0,0,0,1,2,0,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,427,"            ArrayRealVector result = new ArrayRealVector(dim);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,428,"            double[] resultData = result.data;
",6,0,0,1,2,0,0,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,429,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,430,"                resultData[i] = data[i] / vData[i];
",0,1,1,3,6,0,0,0,0,14,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,432,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,434,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,435,"            double[] out = data.clone();
",2,0,0,2,4,0,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,436,"            for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,437,"                out[i] /= v.getEntry(i);
",0,0,1,2,4,0,6,0,0,11,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,439,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,450,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,456,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,457,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,458,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,459,"            double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,460,"            for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,461,"                dot += data[i] * vData[i];
",2,1,1,2,4,0,0,0,0,12,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,463,"            return dot;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,465,"        return super.dotProduct(v);
",4,0,0,1,2,1,0,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,471,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,472,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,473,"            sum += a * a;
",6,1,0,0,0,0,0,0,0,8,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,475,"        return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,481,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,482,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,483,"            sum += FastMath.abs(a);
",2,0,0,1,2,0,6,0,0,9,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,485,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,491,"        double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,492,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,493,"            max = FastMath.max(max, FastMath.abs(a));
",2,0,0,2,4,0,12,0,0,15,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,495,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,501,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,502,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,503,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,504,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,505,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,506,"                final double delta = data[i] - vData[i];
",2,1,1,2,4,1,0,0,0,12,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,507,"                sum += delta * delta;
",6,1,0,0,0,0,0,0,0,8,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,509,"            return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,511,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,512,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,513,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,514,"                final double delta = data[i] - v.getEntry(i);
",2,1,1,2,4,1,6,0,0,14,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,515,"                sum += delta * delta;
",6,1,0,0,0,0,0,0,0,8,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,517,"            return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,525,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,526,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,527,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,528,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,529,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,530,"                final double delta = data[i] - vData[i];
",2,1,1,2,4,1,0,0,0,12,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,531,"                sum += FastMath.abs(delta);
",2,0,0,1,2,0,6,0,0,9,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,533,"            return sum;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,535,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,536,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,537,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,538,"                final double delta = data[i] - v.getEntry(i);
",2,1,1,2,4,1,6,0,0,14,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,539,"                sum += FastMath.abs(delta);
",2,0,0,1,2,0,6,0,0,9,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,541,"            return sum;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,549,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,550,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,551,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,552,"            double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,553,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,554,"                final double delta = data[i] - vData[i];
",2,1,1,2,4,1,0,0,0,12,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,555,"                max = FastMath.max(max, FastMath.abs(delta));
",2,0,0,2,4,0,12,0,0,15,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,557,"            return max;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,559,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,560,"            double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,561,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,562,"                final double delta = data[i] - v.getEntry(i);
",2,1,1,2,4,1,6,0,0,14,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,563,"                max = FastMath.max(max, FastMath.abs(delta));
",2,0,0,2,4,0,12,0,0,15,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,565,"            return max;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,572,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,573,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,574,"            final int m = data.length;
",6,0,0,0,0,1,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,575,"            final int n = vData.length;
",6,0,0,0,0,1,0,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,576,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);
",2,0,0,1,2,1,8,2,0,13,58,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,577,"            for (int i = 0; i < m; i++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,578,"                for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,579,"                    out.setEntry(i, j, data[i] * vData[j]);
",0,1,1,3,6,0,8,0,0,17,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,582,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,584,"            final int m = data.length;
",6,0,0,0,0,1,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,585,"            final int n = v.getDimension();
",2,0,0,1,2,1,4,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,586,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);
",2,0,0,1,2,1,8,2,0,13,58,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,587,"            for (int i = 0; i < m; i++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,588,"                for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,589,"                    out.setEntry(i, j, data[i] * v.getEntry(j));
",0,1,1,3,6,0,14,0,0,19,44,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,592,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,601,"        } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,602,"            throw new OutOfRangeException(LocalizedFormats.INDEX, index, 0,
",6,0,0,0,1,0,0,2,0,8,63,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,617,"            return new ArrayRealVector(this, (ArrayRealVector) v);
",2,0,0,2,4,1,0,4,0,6,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,618,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,619,"            return new ArrayRealVector(this, v);
",2,0,0,1,2,1,0,2,0,4,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,630,"        return new ArrayRealVector(this, v);
",2,0,0,1,2,1,0,2,0,4,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,636,"        final double[] out = new double[data.length + 1];
",6,1,0,2,4,1,0,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,637,"        System.arraycopy(data, 0, out, 0, data.length);
",4,0,0,1,2,0,8,0,0,12,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,638,"        out[data.length] = in;
",6,0,1,1,2,0,0,0,0,9,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,639,"        return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,646,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,647,"            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n);
",6,0,0,1,2,0,0,2,0,8,90,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,649,"        ArrayRealVector out = new ArrayRealVector(n);
",4,0,0,1,2,0,0,4,0,8,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,651,"            System.arraycopy(data, index, out.data, 0, n);
",4,0,0,1,2,0,10,0,0,14,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,655,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,652,"        } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,653,"            checkIndex(index);
",0,0,0,1,2,0,4,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,654,"            checkIndex(index + n - 1);
",4,2,0,1,2,0,2,0,0,8,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,656,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,663,"            data[index] = value;
",2,0,1,1,2,0,0,0,0,7,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,666,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,664,"        } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,665,"            checkIndex(index);
",0,0,0,1,2,0,4,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,667,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,674,"        data[index] += increment;
",2,0,1,1,2,0,0,0,0,7,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,678,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,675,"        } catch(IndexOutOfBoundsException e){
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,676,"            throw new OutOfRangeException(LocalizedFormats.INDEX,
",4,0,0,0,1,0,0,2,0,6,53,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,679,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,685,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,686,"            setSubVector(index, ((ArrayRealVector) v).data);
",4,0,0,3,6,0,4,2,0,10,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,689,"                for (int i = index; i < index + v.getDimension(); ++i) {
",10,2,0,2,5,0,4,0,0,17,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,690,"                    data[i] = v.getEntry(i - index);
",4,1,1,2,4,0,4,0,0,14,32,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,695,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,692,"            } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,693,"                checkIndex(index);
",0,0,0,1,2,0,4,0,0,4,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,694,"                checkIndex(index + v.getDimension() - 1);
",2,2,0,2,4,0,6,0,0,10,41,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,697,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,710,"            System.arraycopy(v, 0, data, index, v.length);
",4,0,0,1,2,0,10,0,0,14,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,714,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,711,"        } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,712,"            checkIndex(index);
",0,0,0,1,2,0,4,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,713,"            checkIndex(index + v.length - 1);
",6,2,0,1,2,0,2,0,0,10,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,715,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,720,"        Arrays.fill(data, value);
",0,0,0,1,2,0,8,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,721,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,726,"        return data.clone();
",0,0,0,1,2,1,4,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,732,"        return DEFAULT_FORMAT.format(this);
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,745,"        checkVectorDimensions(v.getDimension());
",0,0,0,2,4,0,6,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,746,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,758,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,759,"            throw new DimensionMismatchException(data.length, n);
",6,0,0,1,2,0,0,2,0,8,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,761,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,771,"        for (double v : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,772,"            if (Double.isNaN(v)) {
",0,0,0,2,5,0,6,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,773,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,776,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,788,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,789,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,792,"        for (double v : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,793,"            if (Double.isInfinite(v)) {
",0,0,0,2,5,0,6,0,0,6,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,794,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,798,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,804,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,805,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,808,"        if (!(other instanceof RealVector)) {
",2,0,0,2,5,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,809,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,812,"        RealVector rhs = (RealVector) other;
",4,0,0,1,2,0,0,4,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,813,"        if (data.length != rhs.getDimension()) {
",4,1,0,2,5,0,4,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,814,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,817,"        if (rhs.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,818,"            return this.isNaN();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,821,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,822,"            if (data[i] != rhs.getEntry(i)) {
",0,1,1,3,7,0,6,0,0,11,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,823,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,826,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,834,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,835,"            return 9;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,837,"        return MathUtils.hash(data);
",0,0,0,1,2,1,6,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,844,"        return copy().combineToSelf(a, b, y);
",0,0,0,2,4,1,10,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,851,"        if (y instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,852,"            final double[] yData = ((ArrayRealVector) y).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,853,"            checkVectorDimensions(yData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,854,"            for (int i = 0; i < this.data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,855,"                data[i] = a * data[i] + b * yData[i];
",4,3,1,3,6,0,0,0,0,20,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,857,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,858,"            checkVectorDimensions(y);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,859,"            for (int i = 0; i < this.data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,860,"                data[i] = a * data[i] + b * y.getEntry(i);
",4,3,1,3,6,0,6,0,0,22,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,863,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,869,"        visitor.start(data.length, 0, data.length - 1);
",8,1,0,1,2,0,4,0,0,13,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,870,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,871,"            visitor.visit(i, data[i]);
",0,0,1,2,4,0,6,0,0,10,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,873,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,881,"        checkIndices(start, end);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,882,"        visitor.start(data.length, start, end);
",4,0,0,1,2,0,8,0,0,12,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,883,"        for (int i = start; i <= end; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,884,"            visitor.visit(i, data[i]);
",0,0,1,2,4,0,6,0,0,10,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,886,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,896,"        return walkInDefaultOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,908,"        return walkInDefaultOrder(visitor, start, end);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,914,"        visitor.start(data.length, 0, data.length - 1);
",8,1,0,1,2,0,4,0,0,13,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,915,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,916,"            data[i] = visitor.visit(i, data[i]);
",0,0,1,3,6,0,6,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,918,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,926,"        checkIndices(start, end);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,927,"        visitor.start(data.length, start, end);
",4,0,0,1,2,0,8,0,0,12,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,928,"        for (int i = start; i <= end; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,929,"            data[i] = visitor.visit(i, data[i]);
",0,0,1,3,6,0,6,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,931,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,941,"        return walkInDefaultOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,953,"        return walkInDefaultOrder(visitor, start, end);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,20,39,"public class ArrayRealVector extends RealVector implements Serializable {
",2,0,0,0,1,1,0,4,0,7,73,1,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,242,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,257,"                this.endRow = endRow;
",4,0,0,0,0,0,0,0,0,5,21,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,258,"                columnSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,259,"                maxColSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,260,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,264,"                columnSum += FastMath.abs(value);
",2,0,0,1,2,0,6,0,0,9,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,265,"                if (row == endRow) {
",4,1,0,1,3,0,0,0,0,5,20,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,266,"                    maxColSum = FastMath.max(maxColSum, columnSum);
",2,0,0,1,2,0,8,0,0,11,47,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,267,"                    columnSum = 0;
",2,0,0,0,0,0,0,0,0,3,14,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,269,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,273,"                return maxColSum;
",2,0,0,0,0,1,0,0,0,2,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1252,"                return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1254,"                    private final UnmodifiableEntry e = new UnmodifiableEntry();
",2,0,0,1,2,2,0,4,0,8,60,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1258,"                        return i.hasNext();
",0,0,0,1,2,1,4,0,0,4,19,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1263,"                        e.setIndex(i.next().getIndex());
",0,0,0,3,6,0,10,0,0,10,32,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1264,"                        return e;
",2,0,0,0,0,1,0,0,0,2,9,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1274,"                        throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1284,"                return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1286,"                    private final UnmodifiableEntry e = new UnmodifiableEntry();
",2,0,0,1,2,2,0,4,0,8,60,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1290,"                        return i.hasNext();
",0,0,0,1,2,1,4,0,0,4,19,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1295,"                        e.setIndex(i.next().getIndex());
",0,0,0,3,6,0,10,0,0,10,32,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1296,"                        return e;
",2,0,0,0,0,1,0,0,0,2,9,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1307,"                        throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,564,"            super(Fraction.ZERO);
",4,0,0,1,2,0,0,0,0,4,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,565,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,571,"            data = new double[rows][columns];
",2,0,1,2,4,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,572,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,577,"            data[row][column] = value.doubleValue();
",0,0,1,3,6,0,4,0,0,11,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,578,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,586,"            return new Array2DRowRealMatrix(data, false);
",2,0,0,1,2,1,0,2,0,5,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,559,"    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {
",2,0,0,0,1,2,0,4,0,8,100,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,672,"        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,6,4,0,10,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,676,"                out.setEntry(column, row, value);
",0,0,0,1,2,0,10,0,0,10,33,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,677,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,90,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,
",8,0,0,0,1,0,0,0,0,8,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,92,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,151,"        return NumberFormat.getAvailableLocales();
",0,0,0,1,2,1,4,0,0,4,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,159,"        return prefix;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,167,"        return suffix;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,175,"        return rowPrefix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,183,"        return rowSuffix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,191,"        return rowSeparator;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,199,"        return columnSeparator;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,234,"        return format(m, new StringBuffer(), new FieldPosition(0)).toString();
",0,0,0,4,8,1,6,4,0,10,70,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,248,"        pos.setBeginIndex(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,249,"        pos.setEndIndex(0);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,252,"        toAppendTo.append(prefix);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,255,"        final int rows = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,256,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,257,"            toAppendTo.append(rowPrefix);
",0,0,0,1,2,0,6,0,0,6,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,258,"            for (int j = 0; j < matrix.getColumnDimension(); ++j) {
",6,1,0,2,5,0,4,0,0,12,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,259,"                if (j > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,260,"                    toAppendTo.append(columnSeparator);
",0,0,0,1,2,0,6,0,0,6,35,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,262,"                CompositeFormat.formatDouble(matrix.getEntry(i, j), format, toAppendTo, pos);
",0,0,0,2,4,0,18,0,0,18,77,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,264,"            toAppendTo.append(rowSuffix);
",0,0,0,1,2,0,6,0,0,6,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,265,"            if (i < rows - 1) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,266,"                toAppendTo.append(rowSeparator);
",0,0,0,1,2,0,6,0,0,6,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,271,"        toAppendTo.append(suffix);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,273,"        return toAppendTo;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,285,"        final ParsePosition parsePosition = new ParsePosition(0);
",2,0,0,1,2,1,0,4,0,7,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,286,"        final RealMatrix result = parse(source, parsePosition);
",2,0,0,1,2,1,6,2,0,11,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,287,"        if (parsePosition.getIndex() == 0) {
",0,1,0,2,5,0,4,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,288,"            throw new MathParseException(source,
",2,0,0,0,1,0,0,2,0,4,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,292,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,303,"        int initialIndex = pos.getIndex();
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,305,"        final String trimmedPrefix = prefix.trim();
",2,0,0,1,2,1,4,2,0,9,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,306,"        final String trimmedSuffix = suffix.trim();
",2,0,0,1,2,1,4,2,0,9,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,307,"        final String trimmedRowPrefix = rowPrefix.trim();
",2,0,0,1,2,1,4,2,0,9,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,308,"        final String trimmedRowSuffix = rowSuffix.trim();
",2,0,0,1,2,1,4,2,0,9,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,309,"        final String trimmedColumnSeparator = columnSeparator.trim();
",2,0,0,1,2,1,4,2,0,9,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,310,"        final String trimmedRowSeparator = rowSeparator.trim();
",2,0,0,1,2,1,4,2,0,9,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,313,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,314,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {
",0,0,0,2,5,0,10,0,0,11,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,315,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,319,"        List<List<Number>> matrix = new ArrayList<List<Number>>();
",2,0,0,1,2,0,0,12,0,14,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,320,"        List<Number> rowComponents = new ArrayList<Number>();
",2,0,0,1,2,0,0,8,0,10,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,321,"        for (boolean loop = true; loop;){
",4,0,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,323,"            if (!rowComponents.isEmpty()) {
",0,0,0,2,5,0,4,0,0,5,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,324,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,325,"                if (!CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, pos)) {
",0,0,0,2,5,0,10,0,0,11,77,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,326,"                    if (trimmedRowSuffix.length() != 0 &&
",0,2,0,1,3,0,4,0,0,6,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,328,"                        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,330,"                        CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,331,"                        if (CompositeFormat.parseFixedstring(source, trimmedRowSeparator, pos)) {
",0,0,0,2,5,0,10,0,0,10,73,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,332,"                            matrix.add(rowComponents);
",0,0,0,1,2,0,6,0,0,6,26,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,333,"                            rowComponents = new ArrayList<Number>();
",2,0,0,1,2,0,0,4,0,7,40,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,334,"                            continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,336,"                            loop = false;
",2,0,0,0,0,0,0,0,0,4,13,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,341,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,342,"                if (trimmedRowPrefix.length() != 0 &&
",0,2,0,1,3,0,4,0,0,6,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,344,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,348,"            if (loop) {
",2,0,0,1,3,0,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,349,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,350,"                Number component = CompositeFormat.parseNumber(source, format, pos);
",2,0,0,1,2,0,10,2,0,14,68,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,351,"                if (component != null) {
",2,1,0,1,3,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,352,"                    rowComponents.add(component);
",0,0,0,1,2,0,6,0,0,6,29,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,354,"                    if (rowComponents.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,355,"                        loop = false;
",2,0,0,0,0,0,0,0,0,4,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,359,"                        pos.setIndex(initialIndex);
",0,0,0,1,2,0,6,0,0,6,27,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,360,"                        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,363,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,367,"        if (!rowComponents.isEmpty()) {
",0,0,0,2,5,0,4,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,368,"            matrix.add(rowComponents);
",0,0,0,1,2,0,6,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,372,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,373,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {
",0,0,0,2,5,0,10,0,0,11,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,374,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,378,"        if (matrix.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,379,"            pos.setIndex(initialIndex);
",0,0,0,1,2,0,6,0,0,6,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,380,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,384,"        double[][] data = new double[matrix.size()][];
",2,0,0,5,10,0,4,0,0,6,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,385,"        int row = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,386,"        for (List<Number> rowList : matrix) {
",4,0,0,1,3,0,0,4,0,8,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,387,"            data[row] = new double[rowList.size()];
",0,0,1,3,6,0,4,0,0,9,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,388,"            for (int i = 0; i < rowList.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,389,"                data[row][i] = rowList.get(i).doubleValue();
",0,0,1,4,8,0,8,0,0,15,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,391,"            row++;
",2,0,0,0,0,0,0,0,0,3,6,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,392,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,20,393,"        return MatrixUtils.createRealMatrix(data);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,20,42,"                              Class<?> type) {
",2,0,0,0,2,0,0,2,0,4,16,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,20,43,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,
",4,0,0,1,3,0,4,0,0,8,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,20,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,20,53,"                              int position) {
",2,0,0,0,2,0,0,0,0,2,15,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,20,54,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE,
",4,0,0,1,3,0,4,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,20,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,64,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,65,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,103,"        return (rows * columns <= 4096) ?
",4,2,0,1,2,1,0,0,0,6,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,132,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,159,"        if (data == null ||
",2,2,0,0,1,0,0,0,0,4,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,161,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,163,"        return (data.length * data[0].length <= 4096) ?
",6,2,1,2,4,1,0,0,0,10,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,176,"        final RealMatrix m = createRealMatrix(dimension, dimension);
",2,0,0,1,2,1,6,2,0,11,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,177,"        for (int i = 0; i < dimension; ++i) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,178,"            m.setEntry(i, i, 1.0);
",0,0,0,1,2,0,8,0,0,8,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,180,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,195,"        final T zero = field.getZero();
",2,0,0,1,2,1,4,2,0,9,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,196,"        final T one  = field.getOne();
",2,0,0,1,2,1,4,2,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,198,"        final T[][] d = (T[][]) Array.newInstance(field.getRuntimeClass(), new int[] { dimension, dimension });
",6,0,0,9,18,1,8,4,0,19,103,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,199,"        for (int row = 0; row < dimension; row++) {
",8,1,0,1,3,0,0,0,0,10,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,200,"            final T[] dRow = d[row];
",2,0,1,2,4,1,0,2,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,201,"            Arrays.fill(dRow, zero);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,202,"            dRow[row] = one;
",2,0,1,1,2,0,0,0,0,7,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,204,"        return new Array2DRowFieldMatrix<T>(field, d, false);
",4,0,0,1,2,1,0,4,0,9,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,234,"        final FieldMatrix<T> m =
",2,0,0,0,0,1,0,4,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,236,"        for (int i = 0; i < diagonal.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,237,"            m.setEntry(i, i, diagonal[i]);
",0,0,1,2,4,0,8,0,0,12,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,239,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,252,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,253,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,255,"        return new ArrayRealVector(data, true);
",2,0,0,1,2,1,0,2,0,5,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,270,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,271,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,273,"        if (data.length == 0) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,274,"            throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
",4,0,0,1,2,0,0,2,0,6,80,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,276,"        return new ArrayFieldVector<T>(data[0].getField(), data, true);
",2,0,1,3,6,1,2,4,0,11,63,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,290,"        if (rowData == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,291,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,293,"        final int nCols = rowData.length;
",6,0,0,0,0,1,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,294,"        final RealMatrix m = createRealMatrix(1, nCols);
",2,0,0,1,2,1,4,2,0,9,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,295,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,296,"            m.setEntry(0, i, rowData[i]);
",0,0,1,2,4,0,6,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,298,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,314,"        if (rowData == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,315,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,317,"        final int nCols = rowData.length;
",6,0,0,0,0,1,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,318,"        if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,319,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,321,"        final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);
",2,0,1,3,6,1,6,4,0,15,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,322,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,323,"            m.setEntry(0, i, rowData[i]);
",0,0,1,2,4,0,6,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,325,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,340,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,363,"        if (columnData == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,364,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,366,"        final int nRows = columnData.length;
",6,0,0,0,0,1,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,367,"        if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,368,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,370,"        final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);
",2,0,1,3,6,1,6,4,0,15,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,371,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,372,"            m.setEntry(i, 0, columnData[i]);
",0,0,1,2,4,0,6,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,374,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,404,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,
",4,0,0,0,1,0,0,2,0,6,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,419,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,
",4,0,0,0,1,0,0,2,0,6,60,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,441,"        checkRowIndex(m, startRow);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,442,"        checkRowIndex(m, endRow);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,443,"        if (endRow < startRow) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,444,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,
",4,0,0,0,1,0,0,2,0,6,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,448,"        checkColumnIndex(m, startColumn);
",0,0,0,1,2,0,6,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,449,"        checkColumnIndex(m, endColumn);
",0,0,0,1,2,0,6,0,0,6,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,450,"        if (endColumn < startColumn) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,451,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,
",4,0,0,0,1,0,0,2,0,6,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,456,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,475,"        if (selectedRows == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,476,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,478,"        if (selectedColumns == null) {
",2,1,0,1,3,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,479,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,481,"        if (selectedRows.length == 0) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,482,"            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);
",4,0,0,1,2,0,0,2,0,6,75,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,484,"        if (selectedColumns.length == 0) {
",4,1,0,1,3,0,0,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,485,"            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);
",4,0,0,1,2,0,0,2,0,6,78,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,488,"        for (final int row : selectedRows) {
",4,0,0,1,3,1,0,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,489,"            checkRowIndex(m, row);
",0,0,0,1,2,0,6,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,491,"        for (final int column : selectedColumns) {
",4,0,0,1,3,1,0,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,492,"            checkColumnIndex(m, column);
",0,0,0,1,2,0,6,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,494,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,508,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),
",0,0,0,2,5,0,8,2,0,10,93,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,525,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),
",0,0,0,2,5,0,8,2,0,10,93,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,542,"            throw new DimensionMismatchException(left.getColumnDimension(),
",0,0,0,1,3,0,4,2,0,6,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,553,"        final FractionMatrixConverter converter = new FractionMatrixConverter();
",2,0,0,1,2,1,0,4,0,7,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,554,"        m.walkInOptimizedOrder(converter);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,555,"        return converter.getConvertedMatrix();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,598,"        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();
",2,0,0,1,2,1,0,4,0,7,78,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,599,"        m.walkInOptimizedOrder(converter);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,600,"        return converter.getConvertedMatrix();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,678,"        final int n = vector.getDimension();
",2,0,0,1,2,1,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,679,"        oos.writeInt(n);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,680,"        for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,681,"            oos.writeDouble(vector.getEntry(i));
",0,0,0,2,4,0,10,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,683,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,709,"            final int n = ois.readInt();
",2,0,0,1,2,1,4,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,710,"            final double[] data = new double[n];
",2,0,1,2,4,1,0,0,0,5,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,711,"            for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,712,"                data[i] = ois.readDouble();
",0,0,1,2,4,0,4,0,0,9,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,716,"            final RealVector vector = new ArrayRealVector(data, false);
",4,0,0,1,2,1,0,4,0,10,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,719,"            final java.lang.reflect.Field f =
",10,0,0,0,0,1,0,0,0,11,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,721,"            f.setAccessible(true);
",0,0,0,1,2,0,4,0,0,5,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,722,"            f.set(instance, vector);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,732,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,724,"        } catch (NoSuchFieldException nsfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,725,"            IOException ioe = new IOException();
",2,0,0,1,2,0,0,4,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,726,"            ioe.initCause(nsfe);
",0,0,0,1,2,0,6,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,727,"            throw ioe;
",2,0,0,0,0,0,0,0,0,2,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,728,"        } catch (IllegalAccessException iae) {
",2,0,0,1,4,0,0,2,0,4,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,729,"            IOException ioe = new IOException();
",2,0,0,1,2,0,0,4,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,730,"            ioe.initCause(iae);
",0,0,0,1,2,0,6,0,0,6,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,731,"            throw ioe;
",2,0,0,0,0,0,0,0,0,2,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,734,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,779,"        final int n = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,780,"        final int m = matrix.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,781,"        oos.writeInt(n);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,782,"        oos.writeInt(m);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,783,"        for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,784,"            for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,785,"                oos.writeDouble(matrix.getEntry(i, j));
",0,0,0,2,4,0,12,0,0,12,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,788,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,814,"            final int n = ois.readInt();
",2,0,0,1,2,1,4,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,815,"            final int m = ois.readInt();
",2,0,0,1,2,1,4,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,816,"            final double[][] data = new double[n][m];
",2,0,1,4,8,1,0,0,0,7,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,817,"            for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,818,"                final double[] dataI = data[i];
",2,0,1,2,4,1,0,0,0,7,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,819,"                for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,820,"                    dataI[j] = ois.readDouble();
",0,0,1,2,4,0,4,0,0,9,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,825,"            final RealMatrix matrix = new Array2DRowRealMatrix(data, false);
",4,0,0,1,2,1,0,4,0,10,64,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,828,"            final java.lang.reflect.Field f =
",10,0,0,0,0,1,0,0,0,11,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,830,"            f.setAccessible(true);
",0,0,0,1,2,0,4,0,0,5,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,831,"            f.set(instance, matrix);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,841,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,833,"        } catch (NoSuchFieldException nsfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,834,"            IOException ioe = new IOException();
",2,0,0,1,2,0,0,4,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,835,"            ioe.initCause(nsfe);
",0,0,0,1,2,0,6,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,836,"            throw ioe;
",2,0,0,0,0,0,0,0,0,2,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,837,"        } catch (IllegalAccessException iae) {
",2,0,0,1,4,0,0,2,0,4,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,838,"            IOException ioe = new IOException();
",2,0,0,1,2,0,0,4,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,839,"            ioe.initCause(iae);
",0,0,0,1,2,0,6,0,0,6,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,840,"            throw ioe;
",2,0,0,0,0,0,0,0,0,2,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,842,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,865,"        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {
",4,4,0,6,13,0,8,0,0,16,81,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,866,"            throw new DimensionMismatchException(
",0,0,0,0,1,0,0,2,0,2,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,870,"        if( rm.getColumnDimension() != rm.getRowDimension() ){
",0,1,0,3,7,0,8,0,0,9,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,871,"            throw new NonSquareMatrixException(rm.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,874,"        int rows = rm.getRowDimension();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,875,"        for( int i = 0 ; i < rows ; i++ ){
",8,1,0,1,3,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,876,"            double diag = rm.getEntry(i, i);
",2,0,0,1,2,0,8,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,877,"            if( FastMath.abs(diag) < Precision.SAFE_MIN ){
",4,1,0,2,5,0,6,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,878,"                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
",4,0,0,1,2,0,0,2,0,6,69,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,880,"            double bi = b.getEntry(i)/diag;
",4,1,0,1,2,0,6,0,0,11,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,881,"            b.setEntry(i,  bi );
",0,0,0,1,2,0,8,0,0,8,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,882,"            for( int j = i+1; j< rows; j++ ){
",10,2,0,1,3,0,0,0,0,13,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,883,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );
",2,2,0,3,6,0,20,0,0,24,51,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,886,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,910,"        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {
",4,4,0,6,13,0,8,0,0,16,81,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,911,"            throw new DimensionMismatchException(
",0,0,0,0,1,0,0,2,0,2,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,915,"        if( rm.getColumnDimension() != rm.getRowDimension() ){
",0,1,0,3,7,0,8,0,0,9,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,916,"            throw new NonSquareMatrixException(rm.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,919,"        int rows = rm.getRowDimension();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,920,"        for( int i = rows-1 ; i >-1 ; i-- ){
",8,2,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,921,"            double diag = rm.getEntry(i, i);
",2,0,0,1,2,0,8,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,922,"            if( FastMath.abs(diag) < Precision.SAFE_MIN ){
",4,1,0,2,5,0,6,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,923,"                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
",4,0,0,1,2,0,0,2,0,6,69,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,925,"            double bi = b.getEntry(i)/diag;
",4,1,0,1,2,0,6,0,0,11,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,926,"            b.setEntry(i,  bi );
",0,0,0,1,2,0,8,0,0,8,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,927,"            for( int j = i-1; j>-1; j-- ){
",8,2,0,1,3,0,0,0,0,12,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,928,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );
",2,2,0,3,6,0,20,0,0,24,51,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,931,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,96,"        super(field, rows, columns);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,97,"        this.rows    = rows;
",4,0,0,0,0,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,98,"        this.columns = columns;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,101,"        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,102,"        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,105,"        blocks = createBlocksLayout(field, rows, columns);
",2,0,0,1,2,0,8,0,0,11,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,106,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,122,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);
",6,0,1,3,6,0,4,0,0,13,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,123,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,142,"        super(extractField(blockData), rows, columns);
",4,0,0,2,4,0,4,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,143,"        this.rows    = rows;
",4,0,0,0,0,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,144,"        this.columns = columns;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,147,"        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,148,"        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,150,"        if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,152,"            blocks = buildArray(getField(), blockRows * blockColumns, -1);
",6,1,0,2,4,0,4,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,155,"            blocks = blockData;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,158,"        int index = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,159,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,160,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,161,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {
",10,1,0,1,3,0,0,0,0,13,64,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,162,"                if (blockData[index].length != iHeight * blockWidth(jBlock)) {
",4,2,1,3,7,0,4,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,163,"                    throw new DimensionMismatchException(blockData[index].length,
",2,0,1,1,3,0,0,2,0,8,61,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,166,"                if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,167,"                    blocks[index] = blockData[index].clone();
",0,0,1,3,6,0,2,0,0,11,41,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,171,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,199,"        final int rows         = rawData.length;
",6,0,0,0,0,1,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,200,"        final int columns      = rawData[0].length;
",4,0,1,1,2,1,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,201,"        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,202,"        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,205,"        for (int i = 0; i < rawData.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,206,"            final int length = rawData[i].length;
",4,0,1,1,2,1,0,0,0,9,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,207,"            if (length != columns) {
",4,1,0,1,3,0,0,0,0,5,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,208,"                throw new DimensionMismatchException(columns, length);
",4,0,0,1,2,0,0,2,0,6,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,213,"        final Field<T> field = extractField(rawData);
",2,0,0,1,2,1,4,4,0,11,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,214,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);
",6,1,0,3,6,1,4,2,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,215,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,216,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,217,"            final int pStart  = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,218,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,219,"            final int iHeight = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,220,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,221,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,222,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,223,"                final int jWidth = qEnd - qStart;
",6,1,0,0,0,1,0,0,0,8,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,226,"                final T[] block = buildArray(field, iHeight * jWidth);
",6,1,0,2,4,1,4,2,0,14,54,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,227,"                blocks[blockIndex] = block;
",2,0,1,1,2,0,0,0,0,7,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,230,"                int index = 0;
",2,0,0,0,0,0,0,0,0,2,14,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,231,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,232,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);
",0,0,1,2,4,0,12,0,0,16,59,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,233,"                    index += jWidth;
",4,0,0,0,0,0,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,236,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,240,"        return blocks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,260,"        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,261,"        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,263,"        final T[][] blocks = buildArray(field, blockRows * blockColumns, -1);
",6,1,0,3,6,1,4,2,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,264,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,265,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,266,"            final int pStart  = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,267,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,268,"            final int iHeight = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,269,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,270,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,271,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,272,"                final int jWidth = qEnd - qStart;
",6,1,0,0,0,1,0,0,0,8,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,273,"                blocks[blockIndex] = buildArray(field, iHeight * jWidth);
",4,1,1,2,4,0,4,0,0,14,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,274,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,278,"        return blocks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,284,"        return new BlockFieldMatrix<T>(getField(), rowDimension, columnDimension);
",4,0,0,2,4,1,2,4,0,10,74,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,292,"        BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,0,2,8,0,16,80,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,295,"        for (int i = 0; i < blocks.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,296,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);
",6,0,1,4,8,0,4,0,0,20,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,299,"        return copied;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,306,"            return add((BlockFieldMatrix<T>) m);
",2,0,0,2,4,1,2,4,0,8,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,307,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,310,"            checkAdditionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,312,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,315,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,316,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,317,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,320,"                    final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,321,"                    final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,322,"                    final int      pStart   = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,323,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,66,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,324,"                    final int      qStart   = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,325,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,69,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,326,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,327,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,328,"                        for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,329,"                            outBlock[k] = tBlock[k].add(m.getEntry(p, q));
",0,0,1,4,8,0,10,0,0,19,46,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,330,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,335,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,340,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,354,"        checkAdditionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,356,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,359,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,360,"            final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,361,"            final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,362,"            final T[] mBlock   = m.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,363,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,364,"                outBlock[k] = tBlock[k].add(mBlock[k]);
",0,0,1,4,8,0,2,0,0,15,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,368,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,375,"            return subtract((BlockFieldMatrix<T>) m);
",2,0,0,2,4,1,2,4,0,8,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,376,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,379,"            checkSubtractionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,381,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,384,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,385,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,386,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,389,"                    final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,390,"                    final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,391,"                    final int      pStart   = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,392,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,66,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,393,"                    final int      qStart   = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,394,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,69,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,395,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,396,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,397,"                        for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,398,"                            outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));
",0,0,1,4,8,0,10,0,0,19,51,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,399,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,404,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,409,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,422,"        checkSubtractionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,424,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,427,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,428,"            final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,429,"            final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,430,"            final T[] mBlock   = m.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,431,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,432,"                outBlock[k] = tBlock[k].subtract(mBlock[k]);
",0,0,1,4,8,0,2,0,0,15,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,436,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,442,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,445,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,446,"            final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,447,"            final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,448,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,449,"                outBlock[k] = tBlock[k].add(d);
",0,0,1,3,6,0,4,0,0,13,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,453,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,460,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,463,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,464,"            final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,465,"            final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,466,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,467,"                outBlock[k] = tBlock[k].multiply(d);
",0,0,1,3,6,0,4,0,0,13,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,471,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,478,"            return multiply((BlockFieldMatrix<T>) m);
",2,0,0,2,4,1,2,4,0,8,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,479,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,482,"            checkMultiplicationCompatible(m);
",0,0,0,1,2,0,4,0,0,4,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,484,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());
",4,0,0,3,6,1,6,8,0,19,98,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,485,"            final T zero = getField().getZero();
",2,0,0,2,4,1,4,2,0,9,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,488,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,489,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,491,"                final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,492,"                final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,494,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,496,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,497,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());
",6,1,0,2,4,1,8,0,0,16,77,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,500,"                    final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,503,"                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {
",8,1,0,1,3,0,0,0,0,10,55,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,504,"                        final int kWidth      = blockWidth(kBlock);
",2,0,0,1,2,1,4,0,0,7,43,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,505,"                        final T[] tBlock = blocks[iBlock * blockColumns + kBlock];
",8,2,1,2,4,1,0,2,0,15,58,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,506,"                        final int rStart      = kBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,507,"                        int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,508,"                        for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,509,"                            final int lStart = (p - pStart) * kWidth;
",8,2,0,1,2,1,0,0,0,11,41,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,510,"                            final int lEnd   = lStart + kWidth;
",6,1,0,0,0,1,0,0,0,8,35,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,511,"                            for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,512,"                                T sum = zero;
",4,0,0,0,0,0,0,2,0,6,13,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,513,"                                int r = rStart;
",4,0,0,0,0,0,0,0,0,4,15,18,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,514,"                                for (int l = lStart; l < lEnd; ++l) {
",10,1,0,1,3,0,0,0,0,12,37,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,515,"                                    sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));
",2,0,1,4,8,0,14,0,0,21,52,19,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,516,"                                    ++r;
",2,0,0,0,0,0,0,0,0,3,4,19,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,518,"                                outBlock[k] = outBlock[k].add(sum);
",0,0,1,3,6,0,4,0,0,13,35,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,519,"                                ++k;
",2,0,0,0,0,0,0,0,0,3,4,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,525,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,530,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,545,"        checkMultiplicationCompatible(m);
",0,0,0,1,2,0,4,0,0,4,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,547,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);
",8,0,0,2,4,1,2,8,0,19,85,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,548,"        final T zero = getField().getZero();
",2,0,0,2,4,1,4,2,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,551,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,552,"        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,554,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,555,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,557,"            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,558,"                final int jWidth = out.blockWidth(jBlock);
",2,0,0,1,2,1,6,0,0,9,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,559,"                final int jWidth2 = jWidth  + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,560,"                final int jWidth3 = jWidth2 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,561,"                final int jWidth4 = jWidth3 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,564,"                final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,567,"                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,568,"                    final int kWidth = blockWidth(kBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,569,"                    final T[] tBlock = blocks[iBlock * blockColumns + kBlock];
",8,2,1,2,4,1,0,2,0,15,58,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,570,"                    final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];
",14,2,0,2,4,1,0,2,0,19,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,571,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,572,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,573,"                        final int lStart = (p - pStart) * kWidth;
",8,2,0,1,2,1,0,0,0,11,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,574,"                        final int lEnd   = lStart + kWidth;
",6,1,0,0,0,1,0,0,0,8,35,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,575,"                        for (int nStart = 0; nStart < jWidth; ++nStart) {
",8,1,0,1,3,0,0,0,0,10,49,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,576,"                            T sum = zero;
",4,0,0,0,0,0,0,2,0,6,13,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,577,"                            int l = lStart;
",4,0,0,0,0,0,0,0,0,4,15,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,578,"                            int n = nStart;
",4,0,0,0,0,0,0,0,0,4,15,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,579,"                            while (l < lEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,580,"                                sum = sum.
",2,0,0,0,0,0,2,0,0,5,10,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,585,"                                l += 4;
",2,0,0,0,0,0,0,0,0,3,7,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,586,"                                n += jWidth4;
",4,0,0,0,0,0,0,0,0,5,13,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,588,"                            while (l < lEnd) {
",4,1,0,1,3,0,0,0,0,5,18,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,589,"                                sum = sum.add(tBlock[l++].multiply(mBlock[n]));
",4,0,1,4,8,0,6,0,0,18,47,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,590,"                                n += jWidth;
",4,0,0,0,0,0,0,0,0,5,12,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,592,"                            outBlock[k] = outBlock[k].add(sum);
",0,0,1,3,6,0,4,0,0,13,35,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,593,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,599,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,603,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,610,"        final T[][] data = buildArray(getField(), getRowDimension(), getColumnDimension());
",2,0,0,6,12,1,8,2,0,13,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,611,"        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,613,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,614,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,615,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,616,"            int regularPos   = 0;
",2,0,0,0,0,0,0,0,0,2,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,617,"            int lastPos      = 0;
",2,0,0,0,0,0,0,0,0,2,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,618,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,619,"                final T[] dataP = data[p];
",2,0,1,2,4,1,0,2,0,9,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,620,"                int blockIndex = iBlock * blockColumns;
",6,1,0,0,0,0,0,0,0,7,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,621,"                int dataPos    = 0;
",2,0,0,0,0,0,0,0,0,2,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,622,"                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {
",8,2,0,1,3,0,0,0,0,11,59,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,623,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);
",2,0,1,2,4,0,12,0,0,17,79,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,624,"                    dataPos += BLOCK_SIZE;
",4,0,0,0,0,0,0,0,0,5,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,626,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);
",0,0,1,2,4,0,12,0,0,16,75,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,627,"                regularPos += BLOCK_SIZE;
",4,0,0,0,0,0,0,0,0,5,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,628,"                lastPos    += lastColumns;
",4,0,0,0,0,0,0,0,0,5,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,632,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,640,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,643,"        final BlockFieldMatrix<T> out =
",2,0,0,0,0,1,0,4,0,7,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,647,"        final int blockStartRow    = startRow    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,648,"        final int rowsShift        = startRow    % BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,649,"        final int blockStartColumn = startColumn / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,650,"        final int columnsShift     = startColumn % BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,653,"        int pBlock = blockStartRow;
",4,0,0,0,0,0,0,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,654,"        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,655,"            final int iHeight = out.blockHeight(iBlock);
",2,0,0,1,2,1,6,0,0,9,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,656,"            int qBlock = blockStartColumn;
",4,0,0,0,0,0,0,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,657,"            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,658,"                final int jWidth = out.blockWidth(jBlock);
",2,0,0,1,2,1,6,0,0,9,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,661,"                final int      outIndex = iBlock * out.blockColumns + jBlock;
",10,2,0,0,0,1,0,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,662,"                final T[] outBlock = out.blocks[outIndex];
",6,0,1,2,4,1,0,2,0,11,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,663,"                final int      index    = pBlock * blockColumns + qBlock;
",8,2,0,0,0,1,0,0,0,11,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,664,"                final int      width    = blockWidth(qBlock);
",2,0,0,1,2,1,4,0,0,7,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,666,"                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,667,"                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,668,"                if (heightExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,670,"                    if (widthExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,672,"                        final int width2 = blockWidth(qBlock + 1);
",4,1,0,1,2,1,2,0,0,8,42,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,673,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,677,"                        copyBlockPart(blocks[index + 1], width2,
",2,1,1,1,3,0,4,0,0,9,40,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,681,"                        copyBlockPart(blocks[index + blockColumns], width,
",4,1,1,1,3,0,4,0,0,11,50,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,685,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,
",4,1,1,1,3,0,4,0,0,11,55,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,689,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,691,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,695,"                        copyBlockPart(blocks[index + blockColumns], width,
",4,1,1,1,3,0,4,0,0,11,50,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,702,"                    if (widthExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,704,"                        final int width2 = blockWidth(qBlock + 1);
",4,1,0,1,2,1,2,0,0,8,42,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,705,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,709,"                        copyBlockPart(blocks[index + 1], width2,
",2,1,1,1,3,0,4,0,0,9,40,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,713,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,715,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,721,"                ++qBlock;
",2,0,0,0,0,0,0,0,0,3,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,723,"            ++pBlock;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,726,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,749,"        final int length = srcEndColumn - srcStartColumn;
",6,1,0,0,0,1,0,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,750,"        int srcPos = srcStartRow * srcWidth + srcStartColumn;
",8,2,0,0,0,0,0,0,0,10,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,751,"        int dstPos = dstStartRow * dstWidth + dstStartColumn;
",8,2,0,0,0,0,0,0,0,10,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,752,"        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {
",10,1,0,1,3,0,0,0,0,12,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,753,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);
",0,0,0,1,2,0,14,0,0,14,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,754,"            srcPos += srcWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,755,"            dstPos += dstWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,757,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,763,"        MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,764,"        final int refLength = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,765,"        if (refLength == 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,766,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,768,"        final int endRow    = row + subMatrix.length - 1;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,769,"        final int endColumn = column + refLength - 1;
",6,2,0,0,0,1,0,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,770,"        checkSubMatrixIndex(row, endRow, column, endColumn);
",0,0,0,1,2,0,10,0,0,10,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,771,"        for (final T[] subRow : subMatrix) {
",4,0,0,2,5,1,0,2,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,772,"            if (subRow.length != refLength) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,773,"                throw new DimensionMismatchException(refLength, subRow.length);
",6,0,0,1,2,0,0,2,0,8,63,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,778,"        final int blockStartRow    = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,779,"        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;
",8,2,0,1,2,1,0,0,0,11,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,780,"        final int blockStartColumn = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,781,"        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;
",8,2,0,1,2,1,0,0,0,11,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,784,"        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,785,"            final int iHeight  = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,786,"            final int firstRow = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,787,"            final int iStart   = FastMath.max(row,    firstRow);
",2,0,0,1,2,1,8,0,0,11,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,788,"            final int iEnd     = FastMath.min(endRow + 1, firstRow + iHeight);
",8,2,0,1,2,1,4,0,0,15,66,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,790,"            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,791,"                final int jWidth      = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,43,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,792,"                final int firstColumn = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,793,"                final int jStart      = FastMath.max(column,    firstColumn);
",2,0,0,1,2,1,8,0,0,11,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,794,"                final int jEnd        = FastMath.min(endColumn + 1, firstColumn + jWidth);
",8,2,0,1,2,1,4,0,0,15,74,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,795,"                final int jLength     = jEnd - jStart;
",6,1,0,0,0,1,0,0,0,8,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,798,"                final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,799,"                for (int i = iStart; i < iEnd; ++i) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,800,"                    System.arraycopy(subMatrix[i - row], jStart - column,
",8,2,1,1,3,0,4,0,0,16,53,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,807,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,812,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,813,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);
",4,0,0,2,4,1,2,8,0,15,80,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,816,"        final int iBlock  = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,817,"        final int iRow    = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,818,"        int outBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,819,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,820,"        T[] outBlock = out.blocks[outBlockIndex];
",6,0,1,2,4,0,0,2,0,10,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,821,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,822,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,823,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,824,"            final int available  = outBlock.length - outIndex;
",8,1,0,0,0,1,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,825,"            if (jWidth > available) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,826,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);
",4,1,0,1,2,0,12,0,0,17,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,827,"                outBlock = out.blocks[++outBlockIndex];
",8,0,0,1,2,0,0,0,0,10,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,828,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);
",8,2,0,1,2,0,8,0,0,18,72,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,829,"                outIndex = jWidth - available;
",6,1,0,0,0,0,0,0,0,8,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,831,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,67,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,832,"                outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,836,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,843,"            setRowMatrix(row, (BlockFieldMatrix<T>) matrix);
",2,0,0,2,4,0,4,4,0,10,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,846,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,844,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,845,"            super.setRowMatrix(row, matrix);
",6,0,0,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,847,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,862,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,863,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,864,"        if ((matrix.getRowDimension() != 1) ||
",0,2,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,866,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,872,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,873,"        final int iRow   = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,874,"        int mBlockIndex  = 0;
",2,0,0,0,0,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,875,"        int mIndex       = 0;
",2,0,0,0,0,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,876,"        T[] mBlock  = matrix.blocks[mBlockIndex];
",6,0,1,2,4,0,0,2,0,10,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,877,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,878,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,879,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,880,"            final int available  = mBlock.length - mIndex;
",8,1,0,0,0,1,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,881,"            if (jWidth > available) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,882,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);
",4,1,0,1,2,0,12,0,0,17,66,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,883,"                mBlock = matrix.blocks[++mBlockIndex];
",8,0,0,1,2,0,0,0,0,10,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,884,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);
",8,2,0,1,2,0,8,0,0,18,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,885,"                mIndex = jWidth - available;
",6,1,0,0,0,0,0,0,0,8,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,887,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);
",4,1,0,1,2,0,12,0,0,17,63,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,888,"                mIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,891,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,896,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,897,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);
",4,0,0,2,4,1,2,8,0,15,77,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,900,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,901,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,902,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,903,"        int outBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,904,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,905,"        T[] outBlock = out.blocks[outBlockIndex];
",6,0,1,2,4,0,0,2,0,10,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,906,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,907,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,908,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,909,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,910,"                if (outIndex >= outBlock.length) {
",6,1,0,1,3,0,0,0,0,7,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,911,"                    outBlock = out.blocks[++outBlockIndex];
",8,0,0,1,2,0,0,0,0,10,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,912,"                    outIndex = 0;
",2,0,0,0,0,0,0,0,0,3,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,914,"                outBlock[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,918,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,925,"            setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);
",2,0,0,2,4,0,4,4,0,10,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,928,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,926,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,927,"            super.setColumnMatrix(column, matrix);
",6,0,0,1,2,0,0,0,0,6,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,929,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,944,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,945,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,946,"        if ((matrix.getRowDimension() != nRows) ||
",2,2,0,2,5,0,4,0,0,8,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,948,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,954,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,955,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,956,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,957,"        int mBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,958,"        int mIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,959,"        T[] mBlock = matrix.blocks[mBlockIndex];
",6,0,1,2,4,0,0,2,0,10,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,960,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,961,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,962,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,963,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,964,"                if (mIndex >= mBlock.length) {
",6,1,0,1,3,0,0,0,0,7,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,965,"                    mBlock = matrix.blocks[++mBlockIndex];
",8,0,0,1,2,0,0,0,0,10,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,966,"                    mIndex = 0;
",2,0,0,0,0,0,0,0,0,3,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,968,"                block[i * jWidth + jColumn] = mBlock[mIndex++];
",8,2,1,2,4,0,0,0,0,16,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,971,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,976,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,977,"        final T[] outData = buildArray(getField(), columns);
",2,0,0,3,6,1,6,2,0,11,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,980,"        final int iBlock  = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,981,"        final int iRow    = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,982,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,983,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,984,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,985,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,986,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,66,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,987,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,990,"        return new ArrayFieldVector<T>(getField(), outData, false);
",2,0,0,2,4,1,2,4,0,9,59,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,997,"            setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());
",2,0,0,4,8,0,6,4,0,12,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1000,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,998,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,999,"            super.setRowVector(row, vector);
",6,0,0,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1001,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1006,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1007,"        final T[] outData = buildArray(getField(), rows);
",2,0,0,3,6,1,6,2,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1010,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1011,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1012,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1013,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1014,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1015,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1016,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1017,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1018,"                outData[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1022,"        return new ArrayFieldVector<T>(getField(), outData, false);
",2,0,0,2,4,1,2,4,0,9,59,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1029,"            setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());
",2,0,0,4,8,0,6,4,0,12,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1032,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1030,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1031,"            super.setColumnVector(column, vector);
",6,0,0,1,2,0,0,0,0,6,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1033,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1038,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1039,"        final T[] out = buildArray(getField(), columns);
",2,0,0,3,6,1,6,2,0,11,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1042,"        final int iBlock  = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1043,"        final int iRow    = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1044,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1045,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1046,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1047,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1048,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1049,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1052,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1058,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1059,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1060,"        if (array.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1061,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1065,"        final int iBlock  = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1066,"        final int iRow    = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1067,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1068,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1069,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1070,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1071,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);
",4,1,0,1,2,0,12,0,0,17,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1072,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1074,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1079,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1080,"        final T[] out = buildArray(getField(), rows);
",2,0,0,3,6,1,6,2,0,11,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1083,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1084,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1085,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1086,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1087,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1088,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1089,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1090,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1091,"                out[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1095,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1101,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1102,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1103,"        if (array.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1104,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1108,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1109,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1110,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1111,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1112,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1113,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1114,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1115,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1116,"                block[i * jWidth + jColumn] = array[outIndex++];
",8,2,1,2,4,0,0,0,0,16,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1119,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1124,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1125,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1127,"        final int iBlock = row    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1128,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1129,"        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1132,"        return blocks[iBlock * blockColumns + jBlock][k];
",6,2,1,2,4,1,0,0,0,12,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1138,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1139,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1141,"        final int iBlock = row    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1142,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1143,"        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1146,"        blocks[iBlock * blockColumns + jBlock][k] = value;
",8,2,1,2,4,0,0,0,0,15,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1147,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1152,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1153,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1155,"        final int iBlock = row    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1156,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1157,"        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1159,"        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1161,"        blockIJ[k] = blockIJ[k].add(increment);
",0,0,1,3,6,0,4,0,0,13,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1162,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1167,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1168,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1170,"        final int iBlock = row    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1171,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1172,"        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1174,"        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1176,"        blockIJ[k] = blockIJ[k].multiply(factor);
",0,0,1,3,6,0,4,0,0,13,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1177,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1182,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1183,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1184,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);
",6,0,0,2,4,1,2,8,0,17,82,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1187,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1188,"        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1189,"            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1192,"                final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1193,"                final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];
",8,2,1,2,4,1,0,2,0,15,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1194,"                final int      pStart   = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1195,"                final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,69,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1196,"                final int      qStart   = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1197,"                final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,66,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1198,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1199,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1200,"                    final int lInc = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,31,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1201,"                    int l = p - pStart;
",6,1,0,0,0,0,0,0,0,7,19,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1202,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1203,"                        outBlock[k] = tBlock[l];
",0,0,1,2,4,0,0,0,0,9,24,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1204,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1205,"                        l+= lInc;
",4,0,0,0,0,0,0,0,0,5,9,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1210,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1215,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1221,"        return rows;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1227,"        return columns;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1233,"        if (v.length != columns) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1234,"            throw new DimensionMismatchException(v.length, columns);
",6,0,0,1,2,0,0,2,0,8,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1236,"        final T[] out = buildArray(getField(), rows);
",2,0,0,3,6,1,6,2,0,11,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1237,"        final T zero = getField().getZero();
",2,0,0,2,4,1,4,2,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1240,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1241,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1242,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1243,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1244,"                final T[] block  = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1245,"                final int      qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1246,"                final int      qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,67,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1247,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1248,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1249,"                    T sum = zero;
",4,0,0,0,0,0,0,2,0,6,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1250,"                    int q = qStart;
",4,0,0,0,0,0,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1251,"                    while (q < qEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1252,"                        sum = sum.
",2,0,0,0,0,0,2,0,0,5,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1257,"                        k += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1258,"                        q += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1260,"                    while (q < qEnd) {
",4,1,0,1,3,0,0,0,0,5,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1261,"                        sum = sum.add(block[k++].multiply(v[q++]));
",6,0,1,4,8,0,6,0,0,19,43,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1263,"                    out[p] = out[p].add(sum);
",0,0,1,3,6,0,4,0,0,13,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1268,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1275,"        if (v.length != rows) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1276,"            throw new DimensionMismatchException(v.length, rows);
",6,0,0,1,2,0,0,2,0,8,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1278,"        final T[] out = buildArray(getField(), columns);
",2,0,0,3,6,1,6,2,0,11,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1279,"        final T zero = getField().getZero();
",2,0,0,2,4,1,4,2,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1282,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1283,"            final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1284,"            final int jWidth2 = jWidth  + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1285,"            final int jWidth3 = jWidth2 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1286,"            final int jWidth4 = jWidth3 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1287,"            final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1288,"            final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1289,"            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1290,"                final T[] block  = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1291,"                final int      pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1292,"                final int      pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,64,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1293,"                for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1294,"                    int k = q - qStart;
",6,1,0,0,0,0,0,0,0,7,19,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1295,"                    T sum = zero;
",4,0,0,0,0,0,0,2,0,6,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1296,"                    int p = pStart;
",4,0,0,0,0,0,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1297,"                    while (p < pEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1298,"                        sum = sum.
",2,0,0,0,0,0,2,0,0,5,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1303,"                        k += jWidth4;
",4,0,0,0,0,0,0,0,0,5,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1304,"                        p += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1306,"                    while (p < pEnd) {
",4,1,0,1,3,0,0,0,0,5,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1307,"                        sum = sum.add(block[k].multiply(v[p++]));
",4,0,1,4,8,0,6,0,0,18,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1308,"                        k += jWidth;
",4,0,0,0,0,0,0,0,0,5,12,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1310,"                    out[q] = out[q].add(sum);
",0,0,1,3,6,0,4,0,0,13,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1315,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1321,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1322,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1323,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1324,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1325,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1326,"                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1327,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1328,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1329,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1330,"                    final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1331,"                    int k = (p - pStart) * jWidth;
",8,2,0,1,2,0,0,0,0,10,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1332,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1333,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1334,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1339,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1345,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1346,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1347,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1348,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1349,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1350,"                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1351,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1352,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1353,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1354,"                    final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1355,"                    int k = (p - pStart) * jWidth;
",8,2,0,1,2,0,0,0,0,10,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1356,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1357,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1358,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1363,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1371,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1372,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1373,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1374,"            final int p0     = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1375,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1376,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1377,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1378,"                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1379,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1380,"                    final int q0     = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1381,"                    final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1382,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,74,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1383,"                    final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1384,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1385,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1386,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1387,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1392,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1400,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1401,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1402,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1403,"            final int p0     = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1404,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1405,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1406,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1407,"                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1408,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1409,"                    final int q0     = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1410,"                    final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1411,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,74,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1412,"                    final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1413,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1414,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1415,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1416,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1421,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1427,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1428,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1429,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1430,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1431,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1432,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1433,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1434,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1435,"                final T[] block = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1436,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1437,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1438,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1439,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1440,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1443,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1446,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1452,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1453,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1454,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1455,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1456,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1457,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1458,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1459,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1460,"                final T[] block = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1461,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1462,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1463,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1464,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1465,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1468,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1471,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1479,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1480,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1481,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1482,"            final int p0     = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1483,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1484,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1485,"            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1486,"                final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1487,"                final int q0     = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1488,"                final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1489,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,74,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1490,"                final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1491,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1492,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1493,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1494,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1495,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1500,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1508,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1509,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1510,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1511,"            final int p0     = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1512,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1513,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1514,"            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1515,"                final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1516,"                final int q0     = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1517,"                final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1518,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,74,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1519,"                final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1520,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1521,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1522,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1523,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1524,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1529,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1538,"        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;
",12,4,0,1,2,1,0,0,0,16,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,20,1547,"        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;
",12,4,0,1,2,1,0,0,0,16,91,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,48,"    public Array2DRowRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,32,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,103,"            copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,106,"                throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,110,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,114,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,118,"                    throw new DimensionMismatchException(d[r].length, nCols);
",4,0,1,2,4,0,0,2,0,10,57,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,132,"    public Array2DRowRealMatrix(final double[] v) {
",4,0,0,2,5,2,0,0,0,6,47,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,133,"        final int nRows = v.length;
",6,0,0,0,0,1,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,134,"        data = new double[nRows][1];
",2,0,1,2,4,0,0,0,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,135,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,136,"            data[row][0] = v[row];
",0,0,1,3,6,0,0,0,0,9,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,138,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,149,"        return new Array2DRowRealMatrix(copyOut(), false);
",0,0,0,2,4,1,2,2,0,5,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,163,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,165,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,166,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,167,"        final double[][] outData = new double[rowCount][columnCount];
",2,0,1,4,8,1,0,0,0,7,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,168,"        for (int row = 0; row < rowCount; row++) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,169,"            final double[] dataRow    = data[row];
",2,0,1,2,4,1,0,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,170,"            final double[] mRow       = m.data[row];
",6,0,1,2,4,1,0,0,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,171,"            final double[] outDataRow = outData[row];
",2,0,1,2,4,1,0,0,0,7,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,172,"            for (int col = 0; col < columnCount; col++) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,173,"                outDataRow[col] = dataRow[col] + mRow[col];
",0,1,1,3,6,0,0,0,0,14,43,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,177,"        return new Array2DRowRealMatrix(outData, false);
",2,0,0,1,2,1,0,2,0,5,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,190,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,192,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,193,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,194,"        final double[][] outData = new double[rowCount][columnCount];
",2,0,1,4,8,1,0,0,0,7,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,195,"        for (int row = 0; row < rowCount; row++) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,196,"            final double[] dataRow    = data[row];
",2,0,1,2,4,1,0,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,197,"            final double[] mRow       = m.data[row];
",6,0,1,2,4,1,0,0,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,198,"            final double[] outDataRow = outData[row];
",2,0,1,2,4,1,0,0,0,7,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,199,"            for (int col = 0; col < columnCount; col++) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,200,"                outDataRow[col] = dataRow[col] - mRow[col];
",0,1,1,3,6,0,0,0,0,14,43,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,204,"        return new Array2DRowRealMatrix(outData, false);
",2,0,0,1,2,1,0,2,0,5,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,217,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,219,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,220,"        final int nCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,221,"        final int nSum = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,223,"        final double[][] outData = new double[nRows][nCols];
",2,0,1,4,8,1,0,0,0,7,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,225,"        final double[] mCol = new double[nSum];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,226,"        final double[][] mData = m.data;
",6,0,0,2,4,1,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,229,"        for (int col = 0; col < nCols; col++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,232,"            for (int mRow = 0; mRow < nSum; mRow++) {
",8,1,0,1,3,0,0,0,0,10,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,233,"                mCol[mRow] = mData[mRow][col];
",0,0,1,3,6,0,0,0,0,11,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,236,"            for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,237,"                final double[] dataRow = data[row];
",2,0,1,2,4,1,0,0,0,7,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,238,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,239,"                for (int i = 0; i < nSum; i++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,240,"                    sum += dataRow[i] * mCol[i];
",2,1,1,2,4,0,0,0,0,12,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,242,"                outData[row][col] = sum;
",2,0,1,2,4,0,0,0,0,9,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,246,"        return new Array2DRowRealMatrix(outData, false);
",2,0,0,1,2,1,0,2,0,5,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,261,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,272,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);
",6,0,0,1,2,0,0,2,0,8,90,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,275,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);
",6,0,0,1,2,0,0,2,0,8,96,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,280,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,285,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,290,"                    throw new DimensionMismatchException(subMatrix[i].length, nCols);
",4,0,1,2,4,0,0,2,0,10,65,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,295,"            super.setSubMatrix(subMatrix, row, column);
",8,0,0,1,2,0,0,0,0,8,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,319,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,320,"        data[row][column] += increment;
",2,0,1,2,4,0,0,0,0,9,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,321,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,328,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,329,"        data[row][column] *= factor;
",2,0,1,2,4,0,0,0,0,9,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,330,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,348,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,349,"        final int nCols = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,350,"        if (v.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,351,"            throw new DimensionMismatchException(v.length, nCols);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,353,"        final double[] out = new double[nRows];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,354,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,355,"            final double[] dataRow = data[row];
",2,0,1,2,4,1,0,0,0,7,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,356,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,357,"            for (int i = 0; i < nCols; i++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,358,"                sum += dataRow[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,360,"            out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,362,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,369,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,370,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,371,"        if (v.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,372,"            throw new DimensionMismatchException(v.length, nRows);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,375,"        final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,376,"        for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,377,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,378,"            for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,379,"                sum += data[i][col] * v[i];
",2,1,1,3,6,0,0,0,0,14,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,381,"            out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,384,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,391,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,392,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,393,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,394,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,395,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,396,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,397,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,400,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,424,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,425,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,427,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,428,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,429,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,430,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,433,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,442,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,443,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,445,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,446,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,447,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,448,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,451,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,457,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,458,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,459,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,460,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,461,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,462,"                final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,463,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,466,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,472,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,473,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,474,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,475,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,476,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,477,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,480,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,489,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,490,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,492,"        for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,493,"            for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,494,"                final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,495,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,498,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,507,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,508,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,510,"        for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,511,"            for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,512,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,20,515,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,94,"        super(rows, columns);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,95,"        this.rows = rows;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,96,"        this.columns = columns;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,99,"        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,100,"        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,103,"        blocks = createBlocksLayout(rows, columns);
",2,0,0,1,2,0,6,0,0,9,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,104,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,120,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);
",6,0,1,3,6,0,4,0,0,13,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,121,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,139,"        super(rows, columns);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,140,"        this.rows = rows;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,141,"        this.columns = columns;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,144,"        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,145,"        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,147,"        if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,149,"            blocks = new double[blockRows * blockColumns][];
",6,1,0,2,4,0,0,0,0,8,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,152,"            blocks = blockData;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,155,"        int index = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,156,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,157,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,158,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {
",10,1,0,1,3,0,0,0,0,13,64,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,159,"                if (blockData[index].length != iHeight * blockWidth(jBlock)) {
",4,2,1,3,7,0,4,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,160,"                    throw new DimensionMismatchException(blockData[index].length,
",2,0,1,1,3,0,0,2,0,8,61,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,163,"                if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,164,"                    blocks[index] = blockData[index].clone();
",0,0,1,3,6,0,2,0,0,11,41,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,168,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,192,"        final int rows = rawData.length;
",6,0,0,0,0,1,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,193,"        final int columns = rawData[0].length;
",4,0,1,1,2,1,0,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,194,"        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,195,"        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,198,"        for (int i = 0; i < rawData.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,199,"            final int length = rawData[i].length;
",4,0,1,1,2,1,0,0,0,9,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,200,"            if (length != columns) {
",4,1,0,1,3,0,0,0,0,5,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,201,"                throw new DimensionMismatchException(columns, length);
",4,0,0,1,2,0,0,2,0,6,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,206,"        final double[][] blocks = new double[blockRows * blockColumns][];
",6,1,0,4,8,1,0,0,0,8,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,207,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,208,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,209,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,210,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,211,"            final int iHeight = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,212,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,213,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,214,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,215,"                final int jWidth = qEnd - qStart;
",6,1,0,0,0,1,0,0,0,8,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,218,"                final double[] block = new double[iHeight * jWidth];
",6,1,0,2,4,1,0,0,0,8,52,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,219,"                blocks[blockIndex] = block;
",2,0,1,1,2,0,0,0,0,7,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,222,"                int index = 0;
",2,0,0,0,0,0,0,0,0,2,14,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,223,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,224,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);
",0,0,1,2,4,0,12,0,0,16,59,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,225,"                    index += jWidth;
",4,0,0,0,0,0,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,227,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,231,"        return blocks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,247,"        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,248,"        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,250,"        final double[][] blocks = new double[blockRows * blockColumns][];
",6,1,0,4,8,1,0,0,0,8,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,251,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,252,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,253,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,254,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,255,"            final int iHeight = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,256,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,257,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,258,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,259,"                final int jWidth = qEnd - qStart;
",6,1,0,0,0,1,0,0,0,8,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,260,"                blocks[blockIndex] = new double[iHeight * jWidth];
",4,1,1,2,4,0,0,0,0,10,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,261,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,265,"        return blocks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,270,"        return new BlockRealMatrix(rowDimension, columnDimension);
",4,0,0,1,2,1,0,2,0,6,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,276,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,0,0,4,0,10,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,279,"        for (int i = 0; i < blocks.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,280,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);
",6,0,1,4,8,0,4,0,0,20,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,283,"        return copied;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,290,"            return add((BlockRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,291,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,293,"            MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,295,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,298,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,299,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,300,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,303,"                    final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,304,"                    final double[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,45,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,305,"                    final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,306,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,307,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,308,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,309,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,310,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,311,"                        for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,312,"                            outBlock[k] = tBlock[k] + m.getEntry(p, q);
",0,1,1,3,6,0,8,0,0,18,43,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,313,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,317,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,321,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,335,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,337,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,340,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,341,"            final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,342,"            final double[] tBlock = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,343,"            final double[] mBlock = m.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,344,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,345,"                outBlock[k] = tBlock[k] + mBlock[k];
",0,1,1,3,6,0,0,0,0,14,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,349,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,356,"            return subtract((BlockRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,357,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,359,"            MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,361,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,364,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,365,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,366,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,369,"                    final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,370,"                    final double[] tBlock = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,43,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,371,"                    final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,372,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,373,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,374,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,375,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,376,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,377,"                        for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,378,"                            outBlock[k] = tBlock[k] - m.getEntry(p, q);
",0,1,1,3,6,0,8,0,0,18,43,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,379,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,383,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,387,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,401,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,403,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,406,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,407,"            final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,408,"            final double[] tBlock = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,409,"            final double[] mBlock = m.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,410,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,411,"                outBlock[k] = tBlock[k] - mBlock[k];
",0,1,1,3,6,0,0,0,0,14,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,415,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,422,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,425,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,426,"            final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,427,"            final double[] tBlock = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,428,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,429,"                outBlock[k] = tBlock[k] + d;
",2,1,1,2,4,0,0,0,0,12,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,433,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,439,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,442,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,443,"            final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,444,"            final double[] tBlock = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,445,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,446,"                outBlock[k] = tBlock[k] * d;
",2,1,1,2,4,0,0,0,0,12,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,450,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,457,"            return multiply((BlockRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,458,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,460,"            MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,462,"            final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());
",4,0,0,2,4,1,4,4,0,13,78,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,465,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,466,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,467,"                final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,468,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,470,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,471,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,472,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());
",6,1,0,2,4,1,8,0,0,16,75,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,475,"                    final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,478,"                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {
",8,1,0,1,3,0,0,0,0,10,55,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,479,"                        final int kWidth = blockWidth(kBlock);
",2,0,0,1,2,1,4,0,0,7,38,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,480,"                        final double[] tBlock = blocks[iBlock * blockColumns + kBlock];
",8,2,1,2,4,1,0,0,0,13,63,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,481,"                        final int rStart = kBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,482,"                        int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,483,"                        for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,484,"                            final int lStart = (p - pStart) * kWidth;
",8,2,0,1,2,1,0,0,0,11,41,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,485,"                            final int lEnd = lStart + kWidth;
",6,1,0,0,0,1,0,0,0,8,33,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,486,"                            for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,487,"                                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,18,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,488,"                                int r = rStart;
",4,0,0,0,0,0,0,0,0,4,15,18,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,489,"                                for (int l = lStart; l < lEnd; ++l) {
",10,1,0,1,3,0,0,0,0,12,37,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,490,"                                    sum += tBlock[l] * m.getEntry(r, q);
",2,1,1,2,4,0,8,0,0,16,36,19,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,491,"                                    ++r;
",2,0,0,0,0,0,0,0,0,3,4,19,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,493,"                                outBlock[k] += sum;
",2,0,1,1,2,0,0,0,0,7,19,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,494,"                                ++k;
",2,0,0,0,0,0,0,0,0,3,4,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,499,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,503,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,517,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,519,"        final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);
",8,0,0,1,2,1,0,4,0,13,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,522,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,523,"        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,525,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,526,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,528,"            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,529,"                final int jWidth = out.blockWidth(jBlock);
",2,0,0,1,2,1,6,0,0,9,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,530,"                final int jWidth2 = jWidth  + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,531,"                final int jWidth3 = jWidth2 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,532,"                final int jWidth4 = jWidth3 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,535,"                final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,538,"                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,539,"                    final int kWidth = blockWidth(kBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,540,"                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];
",8,2,1,2,4,1,0,0,0,13,63,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,541,"                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];
",14,2,0,2,4,1,0,0,0,17,67,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,542,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,543,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,544,"                        final int lStart = (p - pStart) * kWidth;
",8,2,0,1,2,1,0,0,0,11,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,545,"                        final int lEnd = lStart + kWidth;
",6,1,0,0,0,1,0,0,0,8,33,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,546,"                        for (int nStart = 0; nStart < jWidth; ++nStart) {
",8,1,0,1,3,0,0,0,0,10,49,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,547,"                            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,548,"                            int l = lStart;
",4,0,0,0,0,0,0,0,0,4,15,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,549,"                            int n = nStart;
",4,0,0,0,0,0,0,0,0,4,15,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,550,"                            while (l < lEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,551,"                                sum += tBlock[l] * mBlock[n] +
",2,4,1,2,4,0,0,0,0,15,30,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,555,"                                l += 4;
",2,0,0,0,0,0,0,0,0,3,7,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,556,"                                n += jWidth4;
",4,0,0,0,0,0,0,0,0,5,13,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,558,"                            while (l < lEnd) {
",4,1,0,1,3,0,0,0,0,5,18,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,559,"                                sum += tBlock[l++] * mBlock[n];
",4,1,1,2,4,0,0,0,0,13,31,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,560,"                                n += jWidth;
",4,0,0,0,0,0,0,0,0,5,12,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,562,"                            outBlock[k] += sum;
",2,0,1,1,2,0,0,0,0,7,19,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,563,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,568,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,572,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,578,"        final double[][] data = new double[getRowDimension()][getColumnDimension()];
",2,0,0,6,12,1,4,0,0,7,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,579,"        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,581,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,582,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,583,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,584,"            int regularPos = 0;
",2,0,0,0,0,0,0,0,0,2,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,585,"            int lastPos = 0;
",2,0,0,0,0,0,0,0,0,2,16,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,586,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,587,"                final double[] dataP = data[p];
",2,0,1,2,4,1,0,0,0,7,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,588,"                int blockIndex = iBlock * blockColumns;
",6,1,0,0,0,0,0,0,0,7,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,589,"                int dataPos = 0;
",2,0,0,0,0,0,0,0,0,2,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,590,"                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {
",8,2,0,1,3,0,0,0,0,11,59,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,591,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);
",2,0,1,2,4,0,12,0,0,17,79,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,592,"                    dataPos += BLOCK_SIZE;
",4,0,0,0,0,0,0,0,0,5,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,594,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);
",0,0,1,2,4,0,12,0,0,16,75,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,595,"                regularPos += BLOCK_SIZE;
",4,0,0,0,0,0,0,0,0,5,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,596,"                lastPos    += lastColumns;
",4,0,0,0,0,0,0,0,0,5,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,600,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,606,"        final double[] colSums = new double[BLOCK_SIZE];
",2,0,1,2,4,1,0,0,0,5,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,607,"        double maxColSum = 0;
",2,0,0,0,0,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,608,"        for (int jBlock = 0; jBlock < blockColumns; jBlock++) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,609,"            final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,610,"            Arrays.fill(colSums, 0, jWidth, 0.0);
",0,0,0,1,2,0,8,0,0,8,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,611,"            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,612,"                final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,613,"                final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,614,"                for (int j = 0; j < jWidth; ++j) {
",8,1,0,1,3,0,0,0,0,10,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,615,"                    double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,616,"                    for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,617,"                        sum += FastMath.abs(block[i * jWidth + j]);
",8,2,1,2,4,0,4,0,0,17,43,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,619,"                    colSums[j] += sum;
",2,0,1,1,2,0,0,0,0,7,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,622,"            for (int j = 0; j < jWidth; ++j) {
",8,1,0,1,3,0,0,0,0,10,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,623,"                maxColSum = FastMath.max(maxColSum, colSums[j]);
",2,0,1,2,4,0,6,0,0,13,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,626,"        return maxColSum;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,632,"        double sum2 = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,633,"        for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {
",10,1,0,1,3,0,0,0,0,12,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,634,"            for (final double entry : blocks[blockIndex]) {
",2,0,1,2,5,1,0,0,0,7,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,635,"                sum2 += entry * entry;
",6,1,0,0,0,0,0,0,0,8,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,638,"        return FastMath.sqrt(sum2);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,646,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,649,"        final BlockRealMatrix out =
",2,0,0,0,0,1,0,2,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,653,"        final int blockStartRow = startRow / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,654,"        final int rowsShift = startRow % BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,655,"        final int blockStartColumn = startColumn / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,656,"        final int columnsShift = startColumn % BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,659,"        int pBlock = blockStartRow;
",4,0,0,0,0,0,0,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,660,"        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,661,"            final int iHeight = out.blockHeight(iBlock);
",2,0,0,1,2,1,6,0,0,9,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,662,"            int qBlock = blockStartColumn;
",4,0,0,0,0,0,0,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,663,"            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,664,"                final int jWidth = out.blockWidth(jBlock);
",2,0,0,1,2,1,6,0,0,9,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,667,"                final int outIndex = iBlock * out.blockColumns + jBlock;
",10,2,0,0,0,1,0,0,0,13,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,668,"                final double[] outBlock = out.blocks[outIndex];
",6,0,1,2,4,1,0,0,0,9,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,669,"                final int index = pBlock * blockColumns + qBlock;
",8,2,0,0,0,1,0,0,0,11,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,670,"                final int width = blockWidth(qBlock);
",2,0,0,1,2,1,4,0,0,7,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,672,"                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,673,"                final int widthExcess = jWidth + columnsShift - BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,59,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,674,"                if (heightExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,676,"                    if (widthExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,678,"                        final int width2 = blockWidth(qBlock + 1);
",4,1,0,1,2,1,2,0,0,8,42,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,679,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,683,"                        copyBlockPart(blocks[index + 1], width2,
",2,1,1,1,3,0,4,0,0,9,40,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,687,"                        copyBlockPart(blocks[index + blockColumns], width,
",4,1,1,1,3,0,4,0,0,11,50,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,691,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,
",4,1,1,1,3,0,4,0,0,11,55,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,695,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,697,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,701,"                        copyBlockPart(blocks[index + blockColumns], width,
",4,1,1,1,3,0,4,0,0,11,50,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,708,"                    if (widthExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,710,"                        final int width2 = blockWidth(qBlock + 1);
",4,1,0,1,2,1,2,0,0,8,42,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,711,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,715,"                        copyBlockPart(blocks[index + 1], width2,
",2,1,1,1,3,0,4,0,0,9,40,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,719,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,721,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,727,"                ++qBlock;
",2,0,0,0,0,0,0,0,0,3,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,729,"            ++pBlock;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,732,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,755,"        final int length = srcEndColumn - srcStartColumn;
",6,1,0,0,0,1,0,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,756,"        int srcPos = srcStartRow * srcWidth + srcStartColumn;
",8,2,0,0,0,0,0,0,0,10,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,757,"        int dstPos = dstStartRow * dstWidth + dstStartColumn;
",8,2,0,0,0,0,0,0,0,10,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,758,"        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {
",10,1,0,1,3,0,0,0,0,12,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,759,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);
",0,0,0,1,2,0,14,0,0,14,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,760,"            srcPos += srcWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,761,"            dstPos += dstWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,763,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,770,"        MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,771,"        final int refLength = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,772,"        if (refLength == 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,773,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,775,"        final int endRow = row + subMatrix.length - 1;
",8,2,0,0,0,1,0,0,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,776,"        final int endColumn = column + refLength - 1;
",6,2,0,0,0,1,0,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,777,"        MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);
",0,0,0,1,2,0,12,0,0,12,70,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,778,"        for (final double[] subRow : subMatrix) {
",4,0,0,2,5,1,0,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,779,"            if (subRow.length != refLength) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,780,"                throw new DimensionMismatchException(refLength, subRow.length);
",6,0,0,1,2,0,0,2,0,8,63,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,785,"        final int blockStartRow = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,786,"        final int blockEndRow = (endRow + BLOCK_SIZE) / BLOCK_SIZE;
",8,2,0,1,2,1,0,0,0,11,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,787,"        final int blockStartColumn = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,788,"        final int blockEndColumn = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;
",8,2,0,1,2,1,0,0,0,11,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,791,"        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,792,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,793,"            final int firstRow = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,794,"            final int iStart = FastMath.max(row,    firstRow);
",2,0,0,1,2,1,8,0,0,11,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,795,"            final int iEnd = FastMath.min(endRow + 1, firstRow + iHeight);
",8,2,0,1,2,1,4,0,0,15,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,797,"            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,798,"                final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,799,"                final int firstColumn = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,800,"                final int jStart = FastMath.max(column,    firstColumn);
",2,0,0,1,2,1,8,0,0,11,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,801,"                final int jEnd = FastMath.min(endColumn + 1, firstColumn + jWidth);
",8,2,0,1,2,1,4,0,0,15,67,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,802,"                final int jLength = jEnd - jStart;
",6,1,0,0,0,1,0,0,0,8,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,805,"                final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,806,"                for (int i = iStart; i < iEnd; ++i) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,807,"                    System.arraycopy(subMatrix[i - row], jStart - column,
",8,2,1,1,3,0,4,0,0,16,53,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,814,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,819,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,820,"        final BlockRealMatrix out = new BlockRealMatrix(1, columns);
",4,0,0,1,2,1,0,4,0,9,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,823,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,824,"        final int iRow = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,825,"        int outBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,826,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,827,"        double[] outBlock = out.blocks[outBlockIndex];
",6,0,1,2,4,0,0,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,828,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,829,"            final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,830,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,831,"            final int available = outBlock.length - outIndex;
",8,1,0,0,0,1,0,0,0,10,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,832,"            if (jWidth > available) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,833,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);
",4,1,0,1,2,0,12,0,0,17,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,834,"                outBlock = out.blocks[++outBlockIndex];
",8,0,0,1,2,0,0,0,0,10,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,835,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);
",8,2,0,1,2,0,8,0,0,18,72,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,836,"                outIndex = jWidth - available;
",6,1,0,0,0,0,0,0,0,8,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,838,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,67,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,839,"                outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,843,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,850,"            setRowMatrix(row, (BlockRealMatrix) matrix);
",2,0,0,2,4,0,4,2,0,8,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,853,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,851,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,852,"            super.setRowMatrix(row, matrix);
",6,0,0,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,854,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,869,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,870,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,871,"        if ((matrix.getRowDimension() != 1) ||
",0,2,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,873,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,879,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,880,"        final int iRow = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,881,"        int mBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,882,"        int mIndex = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,883,"        double[] mBlock = matrix.blocks[mBlockIndex];
",6,0,1,2,4,0,0,0,0,8,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,884,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,885,"            final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,886,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,887,"            final int available  = mBlock.length - mIndex;
",8,1,0,0,0,1,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,888,"            if (jWidth > available) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,889,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);
",4,1,0,1,2,0,12,0,0,17,66,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,890,"                mBlock = matrix.blocks[++mBlockIndex];
",8,0,0,1,2,0,0,0,0,10,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,891,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);
",8,2,0,1,2,0,8,0,0,18,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,892,"                mIndex = jWidth - available;
",6,1,0,0,0,0,0,0,0,8,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,894,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);
",4,1,0,1,2,0,12,0,0,17,63,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,895,"                mIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,898,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,903,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,904,"        final BlockRealMatrix out = new BlockRealMatrix(rows, 1);
",4,0,0,1,2,1,0,4,0,9,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,907,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,908,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,909,"        final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,910,"        int outBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,911,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,912,"        double[] outBlock = out.blocks[outBlockIndex];
",6,0,1,2,4,0,0,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,913,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,914,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,915,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,916,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,917,"                if (outIndex >= outBlock.length) {
",6,1,0,1,3,0,0,0,0,7,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,918,"                    outBlock = out.blocks[++outBlockIndex];
",8,0,0,1,2,0,0,0,0,10,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,919,"                    outIndex = 0;
",2,0,0,0,0,0,0,0,0,3,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,921,"                outBlock[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,925,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,932,"            setColumnMatrix(column, (BlockRealMatrix) matrix);
",2,0,0,2,4,0,4,2,0,8,50,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,935,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,933,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,934,"            super.setColumnMatrix(column, matrix);
",6,0,0,1,2,0,0,0,0,6,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,936,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,951,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,952,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,953,"        if ((matrix.getRowDimension() != nRows) ||
",2,2,0,2,5,0,4,0,0,8,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,955,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,961,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,962,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,963,"        final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,964,"        int mBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,965,"        int mIndex = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,966,"        double[] mBlock = matrix.blocks[mBlockIndex];
",6,0,1,2,4,0,0,0,0,8,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,967,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,968,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,969,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,970,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,971,"                if (mIndex >= mBlock.length) {
",6,1,0,1,3,0,0,0,0,7,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,972,"                    mBlock = matrix.blocks[++mBlockIndex];
",8,0,0,1,2,0,0,0,0,10,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,973,"                    mIndex = 0;
",2,0,0,0,0,0,0,0,0,3,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,975,"                block[i * jWidth + jColumn] = mBlock[mIndex++];
",8,2,1,2,4,0,0,0,0,16,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,978,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,983,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,984,"        final double[] outData = new double[columns];
",2,0,1,2,4,1,0,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,987,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,988,"        final int iRow = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,989,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,990,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,991,"            final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,992,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,993,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,66,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,994,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,997,"        return new ArrayRealVector(outData, false);
",2,0,0,1,2,1,0,2,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1004,"            setRow(row, ((ArrayRealVector) vector).getDataRef());
",2,0,0,4,8,0,6,2,0,10,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1007,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1005,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1006,"            super.setRowVector(row, vector);
",6,0,0,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1008,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1013,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1014,"        final double[] outData = new double[rows];
",2,0,1,2,4,1,0,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1017,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1018,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1019,"        final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1020,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1021,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1022,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1023,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1024,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1025,"                outData[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1029,"        return new ArrayRealVector(outData, false);
",2,0,0,1,2,1,0,2,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1036,"            setColumn(column, ((ArrayRealVector) vector).getDataRef());
",2,0,0,4,8,0,6,2,0,10,59,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1039,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1037,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1038,"            super.setColumnVector(column, vector);
",6,0,0,1,2,0,0,0,0,6,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1040,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1045,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1046,"        final double[] out = new double[columns];
",2,0,1,2,4,1,0,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1049,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1050,"        final int iRow = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1051,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1052,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1053,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1054,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1055,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1056,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1059,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1065,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1066,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1067,"        if (array.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1068,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1072,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1073,"        final int iRow = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1074,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1075,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1076,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1077,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1078,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);
",4,1,0,1,2,0,12,0,0,17,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1079,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1081,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1086,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1087,"        final double[] out = new double[rows];
",2,0,1,2,4,1,0,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1090,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1091,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1092,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1093,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1094,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1095,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1096,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1097,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1098,"                out[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1102,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1108,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1109,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1110,"        if (array.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1111,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1115,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1116,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1117,"        final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1118,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1119,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1120,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1121,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1122,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1123,"                block[i * jWidth + jColumn] = array[outIndex++];
",8,2,1,2,4,0,0,0,0,16,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1126,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1130,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1131,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1132,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1133,"        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1135,"        return blocks[iBlock * blockColumns + jBlock][k];
",6,2,1,2,4,1,0,0,0,12,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1140,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1141,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1142,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1143,"        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1145,"        blocks[iBlock * blockColumns + jBlock][k] = value;
",8,2,1,2,4,0,0,0,0,15,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1146,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1151,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1152,"        final int iBlock = row    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1153,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1154,"        final int k = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1156,"        blocks[iBlock * blockColumns + jBlock][k] += increment;
",8,2,1,2,4,0,0,0,0,15,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1157,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1162,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1163,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1164,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1165,"        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1167,"        blocks[iBlock * blockColumns + jBlock][k] *= factor;
",8,2,1,2,4,0,0,0,0,15,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1168,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1173,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1174,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1175,"        final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);
",6,0,0,1,2,1,0,4,0,11,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1178,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1179,"        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1180,"            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1182,"                final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1183,"                final double[] tBlock = blocks[jBlock * blockColumns + iBlock];
",8,2,1,2,4,1,0,0,0,13,63,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1184,"                final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1185,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1186,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1187,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1188,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1189,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1190,"                    final int lInc = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,31,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1191,"                    int l = p - pStart;
",6,1,0,0,0,0,0,0,0,7,19,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1192,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1193,"                        outBlock[k] = tBlock[l];
",0,0,1,2,4,0,0,0,0,9,24,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1194,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1195,"                        l+= lInc;
",4,0,0,0,0,0,0,0,0,5,9,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1199,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1203,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1209,"        return rows;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1215,"        return columns;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1221,"        if (v.length != columns) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1222,"            throw new DimensionMismatchException(v.length, columns);
",6,0,0,1,2,0,0,2,0,8,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1224,"        final double[] out = new double[rows];
",2,0,1,2,4,1,0,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1227,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1228,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1229,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1230,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1231,"                final double[] block  = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,63,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1232,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1233,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1234,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1235,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1236,"                    double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1237,"                    int q = qStart;
",4,0,0,0,0,0,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1238,"                    while (q < qEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1239,"                        sum += block[k]     * v[q]     +
",2,4,1,2,4,0,0,0,0,15,32,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1243,"                        k += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1244,"                        q += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1246,"                    while (q < qEnd) {
",4,1,0,1,3,0,0,0,0,5,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1247,"                        sum += block[k++] * v[q++];
",6,1,1,2,4,0,0,0,0,14,27,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1249,"                    out[p] += sum;
",2,0,1,1,2,0,0,0,0,7,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1254,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1260,"        if (v.length != rows) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1261,"            throw new DimensionMismatchException(v.length, rows);
",6,0,0,1,2,0,0,2,0,8,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1263,"        final double[] out = new double[columns];
",2,0,1,2,4,1,0,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1266,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1267,"            final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1268,"            final int jWidth2 = jWidth  + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1269,"            final int jWidth3 = jWidth2 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1270,"            final int jWidth4 = jWidth3 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1271,"            final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1272,"            final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1273,"            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1274,"                final double[] block  = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,63,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1275,"                final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1276,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1277,"                for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1278,"                    int k = q - qStart;
",6,1,0,0,0,0,0,0,0,7,19,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1279,"                    double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1280,"                    int p = pStart;
",4,0,0,0,0,0,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1281,"                    while (p < pEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1282,"                        sum += block[k]           * v[p]     +
",2,4,1,2,4,0,0,0,0,15,38,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1286,"                        k += jWidth4;
",4,0,0,0,0,0,0,0,0,5,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1287,"                        p += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1289,"                    while (p < pEnd) {
",4,1,0,1,3,0,0,0,0,5,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1290,"                        sum += block[k] * v[p++];
",4,1,1,2,4,0,0,0,0,13,25,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1291,"                        k += jWidth;
",4,0,0,0,0,0,0,0,0,5,12,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1293,"                    out[q] += sum;
",2,0,1,1,2,0,0,0,0,7,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1298,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1304,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1305,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1306,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1307,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1308,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1309,"                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1310,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1311,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1312,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1313,"                    final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1314,"                    int k = (p - pStart) * jWidth;
",8,2,0,1,2,0,0,0,0,10,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1315,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1316,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1317,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1322,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1328,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1329,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1330,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1331,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1332,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1333,"                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1334,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1335,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1336,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1337,"                    final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1338,"                    int k = (p - pStart) * jWidth;
",8,2,0,1,2,0,0,0,0,10,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1339,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1340,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1341,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1346,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1354,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1355,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1356,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1357,"            final int p0 = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1358,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1359,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1360,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1361,"                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1362,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1363,"                    final int q0 = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1364,"                    final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1365,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,72,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1366,"                    final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1367,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1368,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1369,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1370,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1375,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1383,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1384,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1385,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1386,"            final int p0 = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1387,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1388,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1389,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1390,"                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1391,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1392,"                    final int q0 = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1393,"                    final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1394,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,72,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1395,"                    final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1396,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1397,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1398,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1399,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1404,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1410,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1411,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1412,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1413,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1414,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1415,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1416,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1417,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1418,"                final double[] block = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1419,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1420,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1421,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1422,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1423,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1426,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1429,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1435,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1436,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1437,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1438,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1439,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1440,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1441,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1442,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1443,"                final double[] block = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1444,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1445,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1446,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1447,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1448,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1451,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1454,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1462,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1463,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1464,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1465,"            final int p0 = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1466,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1467,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1468,"            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1469,"                final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1470,"                final int q0 = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1471,"                final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1472,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,72,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1473,"                final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1474,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1475,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1476,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1477,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1478,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1483,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1491,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1492,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1493,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1494,"            final int p0 = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1495,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1496,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1497,"            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1498,"                final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1499,"                final int q0 = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1500,"                final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1501,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,72,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1502,"                final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1503,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1504,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1505,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1506,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1507,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1512,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1521,"        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;
",12,4,0,1,2,1,0,0,0,16,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,1530,"        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;
",12,4,0,1,2,1,0,0,0,16,91,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,20,69,"public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {
",2,0,0,0,1,1,0,4,0,7,81,1,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,20,43,"    public MathArithmeticException() {
",2,0,0,1,3,1,0,0,0,3,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,20,44,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,20,45,"        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);
",4,0,0,1,2,0,4,0,0,8,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,20,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,20,56,"                                   Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,20,57,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,20,58,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,20,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,20,63,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,20,69,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,20,75,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,609,"            super(BigFraction.ZERO);
",4,0,0,1,2,0,0,0,0,4,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,610,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,616,"            data = new double[rows][columns];
",2,0,1,2,4,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,617,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,622,"            data[row][column] = value.doubleValue();
",0,0,1,3,6,0,4,0,0,11,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,623,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,631,"            return new Array2DRowRealMatrix(data, false);
",2,0,0,1,2,1,0,2,0,5,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,20,604,"    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {
",2,0,0,0,1,2,0,4,0,8,106,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,120,"            final SchurTransformer t = transformToSchur(matrix);
",2,0,0,1,2,1,4,2,0,9,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,121,"            findEigenVectorsFromSchur(t);
",0,0,0,1,2,0,4,0,0,4,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,140,"        this(matrix);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,141,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,151,"    public EigenDecomposition(final double[] main, final double[] secondary) {
",6,0,0,3,7,3,0,0,0,9,74,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,152,"        this.main      = main.clone();
",2,0,0,1,2,0,4,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,153,"        this.secondary = secondary.clone();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,154,"        transformer    = null;
",2,0,0,0,0,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,155,"        final int size = main.length;
",6,0,0,0,0,1,0,0,0,7,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,156,"        final double[][] z = new double[size][size];
",2,0,1,4,8,1,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,157,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,158,"            z[i][i] = 1.0;
",0,0,1,2,4,0,0,0,0,7,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,160,"        findEigenVectors(z);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,161,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,177,"        this(main, secondary);
",4,0,0,1,2,0,0,0,0,4,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,178,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,197,"                final double mij = matrix.getEntry(i, j);
",2,0,0,1,2,1,8,0,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,198,"                final double mji = matrix.getEntry(j, i);
",2,0,0,1,2,1,8,0,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,199,"                if (FastMath.abs(mij - mji) >
",4,2,0,1,3,0,4,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,201,"                    if (raiseException) {
",2,0,0,1,3,0,0,0,0,2,21,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,202,"                        throw new NonSymmetricMatrixException(i, j, eps);
",6,0,0,1,2,0,0,2,0,8,49,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,204,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,253,"                    cachedD.setEntry(i, i+1, imagEigenvalues[i]);
",2,1,1,2,4,0,6,0,0,13,45,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,255,"                    cachedD.setEntry(i, i-1, imagEigenvalues[i]);
",2,1,1,2,4,0,6,0,0,13,45,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,274,"        if (cachedVt == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,275,"            final int m = eigenvectors.length;
",6,0,0,0,0,1,0,0,0,7,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,276,"            cachedVt = MatrixUtils.createRealMatrix(m, m);
",2,0,0,1,2,0,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,277,"            for (int k = 0; k < m; ++k) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,278,"                cachedVt.setRowVector(k, eigenvectors[k]);
",0,0,1,2,4,0,6,0,0,10,42,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,283,"        return cachedVt;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,296,"        for (int i = 0; i < imagEigenvalues.length; i++) {
",10,1,0,1,3,0,0,0,0,12,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,297,"            if (!Precision.equals(imagEigenvalues[i], 0.0, EPSILON)) {
",0,0,1,3,7,0,6,0,0,11,58,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,298,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,301,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,314,"        return realEigenvalues.clone();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,330,"        return realEigenvalues[i];
",0,0,1,1,2,1,0,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,345,"        return imagEigenvalues.clone();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,361,"        return imagEigenvalues[i];
",0,0,1,1,2,1,0,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,372,"        return eigenvectors[i].copy();
",0,0,1,2,4,1,2,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,381,"        double determinant = 1;
",2,0,0,0,0,0,0,0,0,2,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,382,"        for (double lambda : realEigenvalues) {
",4,0,0,1,3,0,0,0,0,4,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,383,"            determinant *= lambda;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,385,"        return determinant;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,400,"        if (hasComplexEigenvalues()) {
",0,0,0,2,5,0,2,0,0,2,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,401,"            throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,403,"        return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);
",6,0,0,1,2,1,0,2,0,8,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,573,"            realEigenvalues[i] = main[i];
",0,0,1,2,4,0,0,0,0,9,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,574,"            e[i] = secondary[i];
",0,0,1,2,4,0,0,0,0,9,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,586,"                maxAbsoluteValue = FastMath.abs(e[i]);
",2,0,1,2,4,0,4,0,0,11,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,593,"                    realEigenvalues[i] = 0;
",0,0,1,1,2,0,0,0,0,5,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,606,"                    double delta = FastMath.abs(realEigenvalues[m]) +
",2,1,1,2,4,0,4,0,0,11,49,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,608,"                    if (FastMath.abs(e[m]) + delta == delta) {
",4,2,1,3,7,0,4,0,0,14,42,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,609,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,613,"                    if (its == maxIter) {
",4,1,0,1,3,0,0,0,0,5,21,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,614,"                        throw new MaxCountExceededException(LocalizedFormats.CONVERGENCE_FAILED,
",4,0,0,0,1,0,0,2,0,6,72,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,617,"                    its++;
",2,0,0,0,0,0,0,0,0,3,6,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,618,"                    double q = (realEigenvalues[j + 1] - realEigenvalues[j]) / (2 * e[j]);
",4,4,1,5,10,0,0,0,0,18,70,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,619,"                    double t = FastMath.sqrt(1 + q * q);
",6,2,0,1,2,0,4,0,0,12,36,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,620,"                    if (q < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,621,"                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q - t);
",6,4,1,4,8,0,0,0,0,23,61,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,623,"                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);
",6,4,1,4,8,0,0,0,0,23,61,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,625,"                    double u = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,626,"                    double s = 1.0;
",2,0,0,0,0,0,0,0,0,2,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,627,"                    double c = 1.0;
",2,0,0,0,0,0,0,0,0,2,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,629,"                    for (i = m - 1; i >= j; i--) {
",10,2,0,1,3,0,0,0,0,14,30,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,630,"                        double p = s * e[i];
",4,1,1,1,2,0,0,0,0,9,20,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,631,"                        double h = c * e[i];
",4,1,1,1,2,0,0,0,0,9,20,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,632,"                        if (FastMath.abs(p) >= FastMath.abs(q)) {
",0,1,0,3,7,0,12,0,0,13,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,633,"                            c = q / p;
",6,1,0,0,0,0,0,0,0,8,10,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,634,"                            t = FastMath.sqrt(c * c + 1.0);
",6,2,0,1,2,0,4,0,0,13,31,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,635,"                            e[i + 1] = p * t;
",6,2,1,1,2,0,0,0,0,11,17,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,636,"                            s = 1.0 / t;
",4,1,0,0,0,0,0,0,0,6,12,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,637,"                            c = c * s;
",6,1,0,0,0,0,0,0,0,8,10,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,639,"                            s = p / q;
",6,1,0,0,0,0,0,0,0,8,10,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,640,"                            t = FastMath.sqrt(s * s + 1.0);
",6,2,0,1,2,0,4,0,0,13,31,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,641,"                            e[i + 1] = q * t;
",6,2,1,1,2,0,0,0,0,11,17,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,642,"                            c = 1.0 / t;
",4,1,0,0,0,0,0,0,0,6,12,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,643,"                            s = s * c;
",6,1,0,0,0,0,0,0,0,8,10,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,645,"                        if (e[i + 1] == 0.0) {
",2,2,1,2,5,0,0,0,0,6,22,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,646,"                            realEigenvalues[i + 1] -= u;
",4,1,1,1,2,0,0,0,0,8,28,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,647,"                            e[m] = 0.0;
",0,0,1,1,2,0,0,0,0,5,11,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,648,"                            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,650,"                        q = realEigenvalues[i + 1] - u;
",6,2,1,1,2,0,0,0,0,11,31,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,651,"                        t = (realEigenvalues[i] - q) * s + 2.0 * c * h;
",10,4,1,2,4,0,0,0,0,19,47,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,652,"                        u = s * t;
",6,1,0,0,0,0,0,0,0,8,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,653,"                        realEigenvalues[i + 1] = q + u;
",6,2,1,1,2,0,0,0,0,11,31,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,654,"                        q = c * t - h;
",8,2,0,0,0,0,0,0,0,11,14,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,655,"                        for (int ia = 0; ia < n; ia++) {
",8,1,0,1,3,0,0,0,0,10,32,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,656,"                            p = z[ia][i + 1];
",4,1,1,2,4,0,0,0,0,10,17,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,657,"                            z[ia][i + 1] = s * z[ia][i] + c * p;
",8,4,1,4,8,0,0,0,0,23,36,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,658,"                            z[ia][i] = c * z[ia][i] - s * p;
",6,3,1,4,8,0,0,0,0,22,32,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,661,"                    if (t == 0.0 && i >= j) {
",6,3,0,1,3,0,0,0,0,9,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,662,"                        continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,664,"                    realEigenvalues[j] -= u;
",2,0,1,1,2,0,0,0,0,7,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,665,"                    e[j] = q;
",2,0,1,1,2,0,0,0,0,7,9,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,666,"                    e[m] = 0.0;
",0,0,1,1,2,0,0,0,0,5,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,676,"                if (realEigenvalues[j] > p) {
",2,1,1,2,5,0,0,0,0,7,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,677,"                    k = j;
",4,0,0,0,0,0,0,0,0,5,6,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,678,"                    p = realEigenvalues[j];
",2,0,1,1,2,0,0,0,0,7,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,682,"                realEigenvalues[k] = realEigenvalues[i];
",0,0,1,2,4,0,0,0,0,9,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,683,"                realEigenvalues[i] = p;
",2,0,1,1,2,0,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,684,"                for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,685,"                    p = z[j][i];
",2,0,1,2,4,0,0,0,0,9,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,686,"                    z[j][i] = z[j][k];
",0,0,1,4,8,0,0,0,0,13,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,687,"                    z[j][k] = p;
",2,0,1,2,4,0,0,0,0,9,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,703,"                    realEigenvalues[i] = 0;
",0,0,1,1,2,0,0,0,0,5,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,724,"        final SchurTransformer schurTransform = new SchurTransformer(matrix);
",4,0,0,1,2,1,0,4,0,9,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,725,"        final double[][] matT = schurTransform.getT().getData();
",2,0,0,4,8,1,6,0,0,9,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,727,"        realEigenvalues = new double[matT.length];
",6,0,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,728,"        imagEigenvalues = new double[matT.length];
",6,0,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,730,"        for (int i = 0; i < realEigenvalues.length; i++) {
",10,1,0,1,3,0,0,0,0,12,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,731,"            if (i == (realEigenvalues.length - 1) ||
",6,3,0,1,3,0,0,0,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,733,"                realEigenvalues[i] = matT[i][i];
",0,0,1,3,6,0,0,0,0,11,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,735,"                final double x = matT[i + 1][i + 1];
",6,2,1,2,4,1,0,0,0,11,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,736,"                final double p = 0.5 * (matT[i][i] - x);
",4,2,1,3,6,1,0,0,0,13,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,737,"                final double z = FastMath.sqrt(FastMath.abs(p * p + matT[i + 1][i] * matT[i][i + 1]));
",10,5,1,6,12,1,8,0,0,32,86,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,738,"                realEigenvalues[i] = x + p;
",4,1,1,1,2,0,0,0,0,10,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,739,"                imagEigenvalues[i] = z;
",2,0,1,1,2,0,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,740,"                realEigenvalues[i + 1] = x + p;
",6,2,1,1,2,0,0,0,0,11,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,741,"                imagEigenvalues[i + 1] = -z;
",4,1,1,1,2,0,0,0,0,9,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,742,"                i++;
",2,0,0,0,0,0,0,0,0,3,4,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,745,"        return schurTransform;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,759,"        return new Complex(xr, xi).divide(new Complex(yr, yi));
",8,0,0,3,6,1,2,4,0,14,55,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,770,"        final double[][] matrixT = schur.getT().getData();
",2,0,0,4,8,1,6,0,0,9,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,771,"        final double[][] matrixP = schur.getP().getData();
",2,0,0,4,8,1,6,0,0,9,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,773,"        final int n = matrixT.length;
",6,0,0,0,0,1,0,0,0,7,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,776,"        double norm = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,777,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,778,"           for (int j = FastMath.max(i - 1, 0); j < n; j++) {
",10,2,0,2,5,0,4,0,0,17,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,779,"              norm = norm + FastMath.abs(matrixT[i][j]);
",4,1,1,3,6,0,4,0,0,16,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,784,"        if (Precision.equals(norm, 0.0, EPSILON)) {
",0,0,0,2,5,0,8,0,0,8,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,785,"           throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,790,"        double r = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,791,"        double s = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,792,"        double z = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,794,"        for (int idx = n - 1; idx >= 0; idx--) {
",8,2,0,1,3,0,0,0,0,11,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,795,"            double p = realEigenvalues[idx];
",2,0,1,1,2,0,0,0,0,6,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,796,"            double q = imagEigenvalues[idx];
",2,0,1,1,2,0,0,0,0,6,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,798,"            if (Precision.equals(q, 0.0)) {
",0,0,0,2,5,0,6,0,0,6,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,800,"                int l = idx;
",4,0,0,0,0,0,0,0,0,4,12,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,801,"                matrixT[idx][idx] = 1.0;
",0,0,1,2,4,0,0,0,0,7,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,802,"                for (int i = idx - 1; i >= 0; i--) {
",8,2,0,1,3,0,0,0,0,11,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,803,"                    double w = matrixT[i][i] - p;
",4,1,1,2,4,0,0,0,0,11,29,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,804,"                    r = 0.0;
",2,0,0,0,0,0,0,0,0,3,8,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,805,"                    for (int j = l; j <= idx; j++) {
",10,1,0,1,3,0,0,0,0,12,32,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,806,"                        r = r + matrixT[i][j] * matrixT[j][idx];
",4,2,1,4,8,0,0,0,0,19,40,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,808,"                    if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0.0) {
",0,1,1,3,7,0,6,0,0,11,66,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,809,"                        z = w;
",4,0,0,0,0,0,0,0,0,5,6,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,810,"                        s = r;
",4,0,0,0,0,0,0,0,0,5,6,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,812,"                        l = i;
",4,0,0,0,0,0,0,0,0,5,6,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,813,"                        if (Precision.equals(imagEigenvalues[i], 0.0)) {
",0,0,1,3,7,0,4,0,0,8,48,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,814,"                            if (w != 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,815,"                                matrixT[i][idx] = -r / w;
",4,1,1,2,4,0,0,0,0,13,25,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,817,"                                matrixT[i][idx] = -r / (Precision.EPSILON * norm);
",8,2,1,3,6,0,0,0,0,18,50,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,821,"                            double x = matrixT[i][i + 1];
",4,1,1,2,4,0,0,0,0,9,29,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,822,"                            double y = matrixT[i + 1][i];
",4,1,1,2,4,0,0,0,0,9,29,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,823,"                            q = (realEigenvalues[i] - p) * (realEigenvalues[i] - p) +
",6,4,1,4,8,0,0,0,0,19,57,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,825,"                            double t = (x * s - z * r) / q;
",12,4,0,1,2,0,0,0,0,16,31,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,826,"                            matrixT[i][idx] = t;
",2,0,1,2,4,0,0,0,0,9,20,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,827,"                            if (FastMath.abs(x) > FastMath.abs(z)) {
",0,1,0,3,7,0,12,0,0,13,40,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,828,"                                matrixT[i + 1][idx] = (-r - w * t) / x;
",10,4,1,3,6,0,0,0,0,20,39,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,830,"                                matrixT[i + 1][idx] = (-s - y * t) / z;
",10,4,1,3,6,0,0,0,0,20,39,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,835,"                        double t = FastMath.abs(matrixT[i][idx]);
",2,0,1,3,6,0,4,0,0,12,41,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,836,"                        if ((Precision.EPSILON * t) * t > 1) {
",8,3,0,2,5,0,0,0,0,11,38,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,837,"                            for (int j = i; j <= idx; j++) {
",10,1,0,1,3,0,0,0,0,12,32,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,838,"                                matrixT[j][idx] = matrixT[j][idx] / t;
",2,1,1,4,8,0,0,0,0,16,38,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,843,"            } else if (q < 0.0) {
",2,1,0,1,4,0,0,0,0,3,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,845,"                int l = idx - 1;
",4,1,0,0,0,0,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,848,"                if (FastMath.abs(matrixT[idx][idx - 1]) > FastMath.abs(matrixT[idx - 1][idx])) {
",4,3,1,7,15,0,8,0,0,23,80,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,849,"                    matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
",8,4,1,4,8,0,0,0,0,19,54,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,850,"                    matrixT[idx - 1][idx]     = -(matrixT[idx][idx] - p) / matrixT[idx][idx - 1];
",6,4,1,7,14,0,0,0,0,26,77,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,852,"                    final Complex result = cdiv(0.0, -matrixT[idx - 1][idx],
",4,1,1,2,5,1,2,2,0,15,56,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,854,"                    matrixT[idx - 1][idx - 1] = result.getReal();
",4,2,1,3,6,0,4,0,0,13,45,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,855,"                    matrixT[idx - 1][idx]     = result.getImaginary();
",2,1,1,3,6,0,4,0,0,12,50,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,858,"                matrixT[idx][idx - 1] = 0.0;
",2,1,1,2,4,0,0,0,0,8,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,859,"                matrixT[idx][idx]     = 1.0;
",0,0,1,2,4,0,0,0,0,7,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,861,"                for (int i = idx - 2; i >= 0; i--) {
",8,2,0,1,3,0,0,0,0,11,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,862,"                    double ra = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,863,"                    double sa = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,864,"                    for (int j = l; j <= idx; j++) {
",10,1,0,1,3,0,0,0,0,12,32,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,865,"                        ra = ra + matrixT[i][j] * matrixT[j][idx - 1];
",6,3,1,4,8,0,0,0,0,20,46,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,866,"                        sa = sa + matrixT[i][j] * matrixT[j][idx];
",4,2,1,4,8,0,0,0,0,19,42,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,868,"                    double w = matrixT[i][i] - p;
",4,1,1,2,4,0,0,0,0,11,29,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,870,"                    if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0.0) {
",0,1,1,3,7,0,6,0,0,11,66,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,871,"                        z = w;
",4,0,0,0,0,0,0,0,0,5,6,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,872,"                        r = ra;
",4,0,0,0,0,0,0,0,0,5,7,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,873,"                        s = sa;
",4,0,0,0,0,0,0,0,0,5,7,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,875,"                        l = i;
",4,0,0,0,0,0,0,0,0,5,6,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,876,"                        if (Precision.equals(imagEigenvalues[i], 0.0)) {
",0,0,1,3,7,0,4,0,0,8,48,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,877,"                            final Complex c = cdiv(-ra, -sa, w, q);
",6,0,0,1,2,1,6,2,0,17,39,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,878,"                            matrixT[i][idx - 1] = c.getReal();
",2,1,1,3,6,0,4,0,0,12,34,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,879,"                            matrixT[i][idx] = c.getImaginary();
",0,0,1,3,6,0,4,0,0,11,35,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,880,"                        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,882,"                            double x = matrixT[i][i + 1];
",4,1,1,2,4,0,0,0,0,9,29,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,883,"                            double y = matrixT[i + 1][i];
",4,1,1,2,4,0,0,0,0,9,29,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,884,"                            double vr = (realEigenvalues[i] - p) * (realEigenvalues[i] - p) +
",6,5,1,4,8,0,0,0,0,19,65,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,886,"                            final double vi = (realEigenvalues[i] - p) * 2.0 * q;
",6,2,1,2,4,1,0,0,0,13,53,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,887,"                            if (Precision.equals(vr, 0.0) && Precision.equals(vi, 0.0)) {
",0,1,0,3,7,0,12,0,0,13,61,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,888,"                                vr = Precision.EPSILON * norm *
",8,1,0,0,0,0,0,0,0,10,31,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,892,"                            final Complex c     = cdiv(x * r - z * ra + q * sa,
",14,5,0,0,1,1,2,2,0,24,51,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,894,"                            matrixT[i][idx - 1] = c.getReal();
",2,1,1,3,6,0,4,0,0,12,34,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,895,"                            matrixT[i][idx]     = c.getImaginary();
",0,0,1,3,6,0,4,0,0,11,39,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,897,"                            if (FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs(q))) {
",0,2,0,5,11,0,18,0,0,20,60,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,898,"                                matrixT[i + 1][idx - 1] = (-ra - w * matrixT[i][idx - 1] +
",10,6,1,4,9,0,0,0,0,24,58,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,900,"                                matrixT[i + 1][idx]     = (-sa - w * matrixT[i][idx] -
",6,4,1,4,9,0,0,0,0,22,54,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,903,"                                final Complex c2        = cdiv(-r - y * matrixT[i][idx - 1],
",8,3,1,2,5,1,2,2,0,21,60,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,905,"                                matrixT[i + 1][idx - 1] = c2.getReal();
",4,2,1,3,6,0,4,0,0,13,39,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,906,"                                matrixT[i + 1][idx]     = c2.getImaginary();
",2,1,1,3,6,0,4,0,0,12,44,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,911,"                        double t = FastMath.max(FastMath.abs(matrixT[i][idx - 1]),
",4,1,1,3,7,0,8,0,0,17,58,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,913,"                        if ((Precision.EPSILON * t) * t > 1) {
",8,3,0,2,5,0,0,0,0,11,38,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,914,"                            for (int j = i; j <= idx; j++) {
",10,1,0,1,3,0,0,0,0,12,32,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,915,"                                matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
",6,3,1,4,8,0,0,0,0,18,46,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,916,"                                matrixT[j][idx]     = matrixT[j][idx] / t;
",2,1,1,4,8,0,0,0,0,16,42,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,925,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,926,"            if (i < 0 | i > n - 1) {
",6,4,0,1,3,0,0,0,0,10,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,927,"                for (int j = i; j < n; j++) {
",10,1,0,1,3,0,0,0,0,12,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,928,"                    matrixP[i][j] = matrixT[i][j];
",0,0,1,4,8,0,0,0,0,13,30,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,934,"        for (int j = n - 1; j >= 0; j--) {
",8,2,0,1,3,0,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,935,"            for (int i = 0; i <= n - 1; i++) {
",8,2,0,1,3,0,0,0,0,11,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,936,"                z = 0.0;
",2,0,0,0,0,0,0,0,0,3,8,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,937,"                for (int k = 0; k <= FastMath.min(j, n - 1); k++) {
",8,2,0,2,5,0,6,0,0,17,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,938,"                    z = z + matrixP[i][k] * matrixT[k][j];
",4,2,1,4,8,0,0,0,0,19,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,940,"                matrixP[i][j] = z;
",2,0,1,2,4,0,0,0,0,9,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,944,"        eigenvectors = new ArrayRealVector[n];
",2,0,1,1,2,0,0,2,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,945,"        final double[] tmp = new double[n];
",2,0,1,2,4,1,0,0,0,5,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,946,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,947,"            for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,948,"                tmp[j] = matrixP[j][i];
",0,0,1,3,6,0,0,0,0,11,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,950,"            eigenvectors[i] = new ArrayRealVector(tmp);
",2,0,1,2,4,0,0,2,0,9,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,20,952,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,329,"        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {
",0,0,0,1,4,0,4,2,0,6,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,334,"                return getEntry(selectedRows[row], selectedColumns[column]);
",0,0,1,3,6,1,2,0,0,10,60,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,20,48,"        super(LocalizedFormats.NON_SYMMETRIC_MATRIX, row, column, threshold);
",10,0,0,1,2,0,0,0,0,10,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,20,49,"        this.row = row;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,20,50,"        this.column = column;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,20,51,"        this.threshold = threshold;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,20,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,20,58,"        return row;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,20,64,"        return column;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,20,70,"        return threshold;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,49,"        super(rowDimension, columnDimension);
",4,0,0,1,2,0,0,0,0,4,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,50,"        long lRow = rowDimension;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,51,"        long lCol = columnDimension;
",4,0,0,0,0,0,0,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,52,"        if (lRow * lCol >= Integer.MAX_VALUE) {
",8,2,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,53,"            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);
",8,1,0,1,2,0,0,2,0,12,75,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,55,"        this.rows = rowDimension;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,56,"        this.columns = columnDimension;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,57,"        this.entries = new OpenIntToDoubleHashMap(0.0);
",2,0,0,1,2,0,0,2,0,5,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,65,"    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {
",4,0,0,1,3,1,0,2,0,7,52,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,66,"        this.rows = matrix.rows;
",6,0,0,0,0,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,67,"        this.columns = matrix.columns;
",6,0,0,0,0,0,0,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,68,"        this.entries = new OpenIntToDoubleHashMap(matrix.entries);
",6,0,0,1,2,0,0,2,0,9,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,73,"        return new OpenMapRealMatrix(this);
",0,0,0,1,2,1,0,2,0,2,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,78,"        return new OpenMapRealMatrix(rowDimension, columnDimension);
",4,0,0,1,2,1,0,2,0,6,60,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,84,"        return columns;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,98,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,100,"        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);
",2,0,0,1,2,1,0,4,0,7,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,101,"        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {
",10,0,0,3,7,0,6,0,0,16,92,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,102,"            iterator.advance();
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,103,"            final int row = iterator.key() / columns;
",4,1,0,1,2,1,4,0,0,10,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,104,"            final int col = iterator.key() - row * columns;
",6,2,0,1,2,1,4,0,0,13,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,105,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());
",0,1,0,3,6,0,18,0,0,19,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,106,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,108,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,116,"            return subtract((OpenMapRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,117,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,118,"            return (OpenMapRealMatrix) super.subtract(m);
",4,0,0,2,4,1,0,2,0,6,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,132,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,134,"        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);
",2,0,0,1,2,1,0,4,0,7,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,135,"        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {
",10,0,0,3,7,0,6,0,0,16,92,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,136,"            iterator.advance();
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,137,"            final int row = iterator.key() / columns;
",4,1,0,1,2,1,4,0,0,10,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,138,"            final int col = iterator.key() - row * columns;
",6,2,0,1,2,1,4,0,0,13,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,139,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());
",0,1,0,3,6,0,18,0,0,19,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,140,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,142,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,149,"            return multiply((OpenMapRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,150,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,153,"            MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,155,"            final int outCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,156,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);
",6,0,0,1,2,1,0,4,0,11,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,157,"            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {
",6,0,0,3,7,0,8,0,0,14,90,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,158,"                iterator.advance();
",0,0,0,1,2,0,4,0,0,4,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,159,"                final double value = iterator.value();
",2,0,0,1,2,1,4,0,0,7,38,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,160,"                final int key      = iterator.key();
",2,0,0,1,2,1,4,0,0,7,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,161,"                final int i        = key / columns;
",6,1,0,0,0,1,0,0,0,8,35,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,162,"                final int k        = key % columns;
",6,1,0,0,0,1,0,0,0,8,35,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,163,"                for (int j = 0; j < outCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,164,"                    out.addToEntry(i, j, value * m.getEntry(k, j));
",2,1,0,2,4,0,16,0,0,19,47,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,166,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,168,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,183,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,185,"        final int outCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,186,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);
",6,0,0,1,2,0,0,4,0,10,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,187,"        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {
",6,0,0,3,7,0,8,0,0,14,90,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,188,"            iterator.advance();
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,189,"            final double value = iterator.value();
",2,0,0,1,2,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,190,"            final int key      = iterator.key();
",2,0,0,1,2,1,4,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,191,"            final int i        = key / columns;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,192,"            final int k        = key % columns;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,193,"            for (int j = 0; j < outCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,194,"                final int rightKey = m.computeKey(k, j);
",2,0,0,1,2,1,8,0,0,11,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,195,"                if (m.entries.containsKey(rightKey)) {
",4,0,0,2,5,0,4,0,0,8,38,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,196,"                    final int outKey = out.computeKey(i, j);
",2,0,0,1,2,1,8,0,0,11,40,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,197,"                    final double outValue =
",2,0,0,0,0,1,0,0,0,3,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,199,"                    if (outValue == 0.0) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,200,"                        out.entries.remove(outKey);
",4,0,0,1,2,0,4,0,0,8,27,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,202,"                        out.entries.put(outKey, outValue);
",4,0,0,1,2,0,6,0,0,10,34,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,206,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,208,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,213,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,214,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,215,"        return entries.get(computeKey(row, column));
",0,0,0,2,4,1,10,0,0,10,44,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,221,"        return rows;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,226,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,227,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,228,"        if (value == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,229,"            entries.remove(computeKey(row, column));
",0,0,0,2,4,0,10,0,0,10,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,231,"            entries.put(computeKey(row, column), value);
",0,0,0,2,4,0,12,0,0,12,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,233,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,238,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,239,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,240,"        final int key = computeKey(row, column);
",2,0,0,1,2,1,6,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,241,"        final double value = entries.get(key) + increment;
",4,1,0,1,2,1,6,0,0,12,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,242,"        if (value == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,243,"            entries.remove(key);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,245,"            entries.put(key, value);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,247,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,252,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,253,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,254,"        final int key = computeKey(row, column);
",2,0,0,1,2,1,6,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,255,"        final double value = entries.get(key) * factor;
",4,1,0,1,2,1,6,0,0,12,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,256,"        if (value == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,257,"            entries.remove(key);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,259,"            entries.put(key, value);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,261,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,270,"        return row * columns + column;
",6,2,0,0,0,1,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,20,31,"public class OpenMapRealMatrix extends AbstractRealMatrix
",2,0,0,0,0,1,0,2,0,5,57,1,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,73,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,
",6,0,0,0,1,0,0,0,0,6,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,93,"        this(prefix, suffix, separator,
",6,0,0,0,1,0,0,0,0,6,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,95,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,122,"        return NumberFormat.getAvailableLocales();
",0,0,0,1,2,1,4,0,0,4,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,130,"        return prefix;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,138,"        return suffix;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,146,"        return separator;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,154,"        return format;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,181,"        return format(v, new StringBuffer(), new FieldPosition(0)).toString();
",0,0,0,4,8,1,6,4,0,10,70,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,195,"        pos.setBeginIndex(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,196,"        pos.setEndIndex(0);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,199,"        toAppendTo.append(prefix);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,202,"        for (int i = 0; i < vector.getDimension(); ++i) {
",6,1,0,2,5,0,4,0,0,12,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,203,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,204,"                toAppendTo.append(separator);
",0,0,0,1,2,0,6,0,0,6,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,206,"            CompositeFormat.formatDouble(vector.getEntry(i), format, toAppendTo, pos);
",0,0,0,2,4,0,16,0,0,16,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,210,"        toAppendTo.append(suffix);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,212,"        return toAppendTo;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,224,"        final ParsePosition parsePosition = new ParsePosition(0);
",2,0,0,1,2,1,0,4,0,7,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,225,"        final ArrayRealVector result = parse(source, parsePosition);
",2,0,0,1,2,1,6,2,0,11,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,226,"        if (parsePosition.getIndex() == 0) {
",0,1,0,2,5,0,4,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,227,"            throw new MathParseException(source,
",2,0,0,0,1,0,0,2,0,4,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,231,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,242,"        int initialIndex = pos.getIndex();
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,245,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,246,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {
",0,0,0,2,5,0,10,0,0,11,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,247,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,251,"        List<Number> components = new ArrayList<Number>();
",2,0,0,1,2,0,0,8,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,252,"        for (boolean loop = true; loop;){
",4,0,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,254,"            if (!components.isEmpty()) {
",0,0,0,2,5,0,4,0,0,5,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,255,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,256,"                if (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {
",0,0,0,2,5,0,10,0,0,11,71,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,257,"                    loop = false;
",2,0,0,0,0,0,0,0,0,4,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,261,"            if (loop) {
",2,0,0,1,3,0,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,262,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,263,"                Number component = CompositeFormat.parseNumber(source, format, pos);
",2,0,0,1,2,0,10,2,0,14,68,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,264,"                if (component != null) {
",2,1,0,1,3,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,265,"                    components.add(component);
",0,0,0,1,2,0,6,0,0,6,26,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,269,"                    pos.setIndex(initialIndex);
",0,0,0,1,2,0,6,0,0,6,27,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,270,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,272,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,277,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,278,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {
",0,0,0,2,5,0,10,0,0,11,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,279,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,283,"        double[] data = new double[components.size()];
",2,0,0,3,6,0,4,0,0,6,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,284,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,285,"            data[i] = components.get(i).doubleValue();
",0,0,1,3,6,0,8,0,0,13,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,20,287,"        return new ArrayRealVector(data, false);
",2,0,0,1,2,1,0,2,0,5,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,411,"        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,6,4,0,10,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,424,"                this.startRow    = startRow;
",4,0,0,0,0,0,0,0,0,5,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,425,"                this.startColumn = startColumn;
",4,0,0,0,0,0,0,0,0,5,31,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,426,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,431,"                destination[row - startRow][column - startColumn] = value;
",10,2,1,2,4,0,0,0,0,15,58,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,432,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1150,"        protected SparseEntryIterator() {
",2,0,0,1,3,1,0,0,0,3,33,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1151,"            dim = getDimension();
",2,0,0,1,2,0,2,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1152,"            current = new Entry();
",2,0,0,1,2,0,0,2,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1153,"            next = new Entry();
",2,0,0,1,2,0,0,2,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1154,"            if (next.getValue() == 0) {
",0,1,0,2,5,0,4,0,0,5,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1155,"                advance(next);
",0,0,0,1,2,0,4,0,0,4,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1157,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1165,"            if (e == null) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1166,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1169,"                e.setIndex(e.getIndex() + 1);
",0,1,0,2,4,0,8,0,0,9,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1170,"            } while (e.getIndex() < dim && e.getValue() == 0);
",2,3,0,3,7,0,8,0,0,13,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1171,"            if (e.getIndex() >= dim) {
",2,1,0,2,5,0,4,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1172,"                e.setIndex(-1);
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1174,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1178,"            return next.getIndex() >= 0;
",0,1,0,1,2,1,4,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1183,"            int index = next.getIndex();
",2,0,0,1,2,0,4,0,0,6,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1184,"            if (index < 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1185,"                throw new NoSuchElementException();
",0,0,0,1,2,0,0,2,0,2,35,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1187,"            current.setIndex(index);
",0,0,0,1,2,0,6,0,0,6,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1188,"            advance(next);
",0,0,0,1,2,0,4,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1189,"            return current;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1198,"            throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,1141,"    protected class SparseEntryIterator implements Iterator<Entry> {
",2,0,0,0,1,1,0,4,0,7,64,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,356,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,369,"                this.startRow    = startRow;
",4,0,0,0,0,0,0,0,0,5,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,370,"                this.startColumn = startColumn;
",4,0,0,0,0,0,0,0,0,5,31,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,371,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,376,"                destination[row - startRow][column - startColumn] = value;
",10,2,1,2,4,0,0,0,0,15,58,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,20,377,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,379,"        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,8,4,0,12,90,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,20,384,"                return getEntry(selectedRows[row], selectedColumns[column]);
",0,0,1,3,6,1,2,0,0,10,60,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,776,"        return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,779,"            private int i = 0;
",2,0,0,0,0,1,0,0,0,3,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,782,"            private Entry e = new Entry();
",2,0,0,1,2,1,0,4,0,7,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,786,"                return i < dim;
",4,1,0,0,0,1,0,0,0,5,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,791,"                if (i < dim) {
",4,1,0,1,3,0,0,0,0,5,14,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,792,"                    e.setIndex(i++);
",2,0,0,1,2,0,4,0,0,7,16,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,793,"                    return e;
",2,0,0,0,0,1,0,0,0,2,9,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,795,"                    throw new NoSuchElementException();
",0,0,0,1,2,0,0,2,0,2,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,20,805,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,349,"    private FastMath() {}
",2,0,0,2,4,1,0,0,0,3,21,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,361,"        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){
",12,3,0,1,3,0,0,0,0,16,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,362,"            return d; // These are un-normalised - don't try to convert
",2,0,0,0,0,1,0,0,0,2,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,364,"        long xl = Double.doubleToLongBits(d);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,365,"        xl = xl & MASK_30BITS; // Drop low order bits
",6,1,0,0,0,0,0,0,0,8,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,366,"        return Double.longBitsToDouble(xl);
",0,0,0,1,2,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,383,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,384,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,392,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,393,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,396,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,397,"          return exp(-x)/2.0;
",2,1,0,1,2,1,2,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,400,"      double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,401,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,402,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,404,"      exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,406,"      double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,407,"      double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,409,"      double temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,410,"      double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,411,"      double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,414,"      double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,415,"      temp = recip * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,416,"      double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,417,"      double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,420,"      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,422,"      recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,425,"      temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,426,"      yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,427,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,428,"      temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,429,"      yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,430,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,432,"      double result = ya + yb;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,433,"      result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,434,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,442,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,443,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,444,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,452,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,453,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,456,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,457,"          return -exp(-x)/2.0;
",2,1,0,1,2,1,2,0,0,7,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,460,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,461,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,464,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,465,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,466,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,471,"      if (x > 0.25) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,472,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,473,"          exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,475,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,476,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,478,"          double temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,479,"          double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,480,"          double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,483,"          double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,484,"          temp = recip * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,485,"          double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,486,"          double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,489,"          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,491,"          recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,493,"          recipa = -recipa;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,494,"          recipb = -recipb;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,497,"          temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,498,"          yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,499,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,500,"          temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,501,"          yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,502,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,504,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,505,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,506,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,508,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,509,"          expm1(x, hiPrec);
",0,0,0,1,2,0,6,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,511,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,512,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,515,"          double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,516,"          double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,517,"          double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,518,"          double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,519,"          double temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,520,"          double ra = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,521,"          double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,523,"          temp = denom * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,524,"          double za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,525,"          double zb = denom - za;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,527,"          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,530,"          rb += yb*denomr;                        // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,531,"          rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,534,"          temp = ya + ra;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,535,"          yb += -(temp - ya - ra);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,536,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,537,"          temp = ya + rb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,538,"          yb += -(temp - ya - rb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,539,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,541,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,542,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,545,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,546,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,549,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,557,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,559,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,560,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,569,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,570,"          return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,573,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,574,"          return -1.0;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,577,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,578,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,581,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,582,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,583,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,587,"      if (x >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,588,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,590,"          exp(x*2.0, 0.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,592,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,593,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,596,"          double na = -1.0 + ya;
",4,1,0,0,0,0,0,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,597,"          double nb = -(na + 1.0 - ya);
",6,2,0,1,2,0,0,0,0,9,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,598,"          double temp = na + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,599,"          nb += -(temp - na - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,600,"          na = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,603,"          double da = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,604,"          double db = -(da - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,605,"          temp = da + yb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,606,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,607,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,609,"          temp = da * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,610,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,611,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,614,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,615,"          temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,616,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,617,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,620,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,623,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,625,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,627,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,628,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,630,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,632,"          expm1(x*2.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,634,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,635,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,638,"          double na = ya;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,639,"          double nb = yb;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,642,"          double da = 2.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,643,"          double db = -(da - 2.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,644,"          double temp = da + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,645,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,646,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,648,"          temp = da * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,649,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,650,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,653,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,654,"          temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,655,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,656,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,659,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,662,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,664,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,666,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,669,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,670,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,673,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,681,"        return FastMath.log(a + FastMath.sqrt(a * a - 1));
",6,3,0,2,4,1,8,0,0,17,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,689,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,690,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,691,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,692,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,696,"        if (a > 0.167) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,697,"            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);
",8,3,0,2,4,0,8,0,0,20,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,699,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,700,"            if (a > 0.097) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,701,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",52,17,0,8,16,0,0,0,0,70,212,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,702,"            } else if (a > 0.036) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,703,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",40,13,0,6,12,0,0,0,0,54,160,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,704,"            } else if (a > 0.0036) {
",2,1,0,1,4,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,705,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",28,9,0,4,8,0,0,0,0,38,109,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,707,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);
",16,5,0,2,4,0,0,0,0,22,63,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,711,"        return negative ? -absAsinh : absAsinh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,719,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,720,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,721,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,722,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,726,"        if (a > 0.15) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,727,"            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));
",6,4,0,3,6,0,4,0,0,15,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,729,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,730,"            if (a > 0.087) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,731,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));
",36,17,0,8,16,0,0,0,0,54,141,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,732,"            } else if (a > 0.031) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,733,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));
",28,13,0,6,12,0,0,0,0,42,109,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,734,"            } else if (a > 0.003) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,735,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));
",20,9,0,4,8,0,0,0,0,30,77,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,737,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));
",12,5,0,2,4,0,0,0,0,18,47,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,741,"        return negative ? -absAtanh : absAtanh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,750,"        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a
",6,2,0,3,6,2,0,0,0,9,87,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,759,"        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a
",6,2,0,3,6,2,0,0,0,9,91,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,783,"        return Math.random();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,807,"        return exp(x, 0.0, null);
",0,0,0,1,2,1,4,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,826,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,827,"            intVal = (int) -x;
",4,0,0,1,2,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,829,"            if (intVal > 746) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,830,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,831,"                    hiPrec[0] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,832,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,834,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,837,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,840,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,841,"                    hiPrec[0] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,842,"                    hiPrec[1] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,844,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,847,"            if (intVal == 709) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,850,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,851,"                    hiPrec[0] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,852,"                    hiPrec[1] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,854,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,857,"            intVal++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,859,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,860,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,862,"            intVal = -intVal;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,864,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,866,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,867,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,868,"                    hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,869,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,871,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,874,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,875,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,882,"        final int intFrac = (int) ((x - intVal) * 1024.0);
",6,2,0,3,6,1,0,0,0,9,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,883,"        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,884,"        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,890,"        final double epsilon = x - (intVal + intFrac / 1024.0);
",8,3,0,1,2,1,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,899,"        double z = 0.04168701738764507;
",2,0,0,0,0,0,0,0,0,2,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,900,"        z = z * epsilon + 0.1666666505023083;
",6,2,0,0,0,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,901,"        z = z * epsilon + 0.5000000000042687;
",6,2,0,0,0,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,902,"        z = z * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,903,"        z = z * epsilon + -3.940510424527919E-20;
",6,2,0,0,0,0,0,0,0,10,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,910,"        double tempA = intPartA * fracPartA;
",6,1,0,0,0,0,0,0,0,7,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,911,"        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;
",14,5,0,0,0,0,0,0,0,19,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,917,"        final double tempC = tempB + tempA;
",6,1,0,0,0,1,0,0,0,8,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,919,"        if (extra != 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,920,"            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;
",20,7,0,0,0,0,0,0,0,28,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,922,"            result = tempC*z + tempB + tempA;
",10,3,0,0,0,0,0,0,0,14,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,925,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,927,"            hiPrec[0] = tempA;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,928,"            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;
",16,6,1,1,2,0,0,0,0,25,58,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,931,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,939,"      return expm1(x, null);
",0,0,0,1,2,1,4,0,0,5,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,948,"        if (x != x || x == 0.0) { // NaN or zero
",6,3,0,1,3,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,949,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,952,"        if (x <= -1.0 || x >= 1.0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,955,"            double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,956,"            exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,957,"            if (x > 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,958,"                return -1.0 + hiPrec[0] + hiPrec[1];
",0,1,1,2,4,1,0,0,0,6,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,960,"                final double ra = -1.0 + hiPrec[0];
",2,1,1,1,2,1,0,0,0,7,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,961,"                double rb = -(ra + 1.0 - hiPrec[0]);
",4,2,1,2,4,0,0,0,0,9,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,962,"                rb += hiPrec[1];
",2,0,1,1,2,0,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,963,"                return ra + rb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,970,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,972,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,973,"            x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,974,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,978,"            int intFrac = (int) (x * 1024.0);
",4,1,0,2,4,0,0,0,0,5,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,979,"            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;
",6,1,1,1,2,0,0,0,0,9,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,980,"            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,0,0,0,0,8,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,982,"            double temp = tempA + tempB;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,983,"            tempB = -(temp - tempA - tempB);
",8,1,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,984,"            tempA = temp;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,986,"            temp = tempA * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,987,"            baseA = tempA + temp - temp;
",8,2,0,0,0,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,988,"            baseB = tempB + (tempA - baseA);
",8,2,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,990,"            epsilon = x - intFrac/1024.0;
",6,2,0,0,0,0,0,0,0,9,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,995,"        double zb = 0.008336750013465571;
",2,0,0,0,0,0,0,0,0,2,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,996,"        zb = zb * epsilon + 0.041666663879186654;
",6,2,0,0,0,0,0,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,997,"        zb = zb * epsilon + 0.16666666666745392;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,998,"        zb = zb * epsilon + 0.49999999999999994;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,999,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1000,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1002,"        double za = epsilon;
",4,0,0,0,0,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1003,"        double temp = za + zb;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1004,"        zb = -(temp - za - zb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1005,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1007,"        temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1008,"        temp = za + temp - temp;
",8,2,0,0,0,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1009,"        zb += za - temp;
",6,1,0,0,0,0,0,0,0,8,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1010,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1013,"        double ya = za * baseA;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1015,"        temp = ya + za * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1016,"        double yb = -(temp - ya - za * baseB);
",10,2,0,1,2,0,0,0,0,13,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1017,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1019,"        temp = ya + zb * baseA;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1020,"        yb += -(temp - ya - zb * baseA);
",10,2,0,1,2,0,0,0,0,14,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1021,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1023,"        temp = ya + zb * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1024,"        yb += -(temp - ya - zb*baseB);
",10,2,0,1,2,0,0,0,0,14,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1025,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1029,"        temp = ya + baseA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1030,"        yb += -(temp - baseA - ya);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1031,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1033,"        temp = ya + za;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1035,"        yb += -(temp - ya - za);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1036,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1038,"        temp = ya + baseB;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1040,"        yb += -(temp - ya - baseB);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1041,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1043,"        temp = ya + zb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1045,"        yb += -(temp - ya - zb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1046,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1048,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1050,"            double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1051,"            double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1052,"            double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1053,"            double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1054,"            temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1055,"            final double ra = ratio + temp - temp;
",8,2,0,0,0,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1056,"            double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1058,"            temp = denom * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1059,"            za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1060,"            zb = denom - za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1062,"            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1073,"            rb += yb * denomr;                      // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1074,"            rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1077,"            ya = -ra;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1078,"            yb = -rb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1081,"        if (hiPrecOut != null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1082,"            hiPrecOut[0] = ya;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1083,"            hiPrecOut[1] = yb;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1086,"        return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1107,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1113,"            if (x != 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1114,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1115,"                    hiPrec[0] = Double.NaN;
",4,0,1,1,2,0,0,0,0,7,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1118,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1124,"            if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1125,"                hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1128,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1136,"            if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1138,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1139,"                    hiPrec[0] = Double.NEGATIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1142,"                return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1146,"            bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1147,"            while ( (bits & 0x0010000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1148,"                --exp;
",2,0,0,0,0,0,0,0,0,3,6,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1149,"                bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1160,"                double xa = x - 1.0;
",4,1,0,0,0,0,0,0,0,5,20,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1161,"                double xb = xa - x + 1.0;
",6,2,0,0,0,0,0,0,0,8,25,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1162,"                double tmp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1163,"                double aa = xa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1164,"                double ab = xa - aa;
",6,1,0,0,0,0,0,0,0,7,20,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1165,"                xa = aa;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1166,"                xb = ab;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1168,"                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];
",6,1,1,2,4,1,0,0,0,10,69,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1169,"                double ya = lnCoef_last[0];
",2,0,1,1,2,0,0,0,0,4,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1170,"                double yb = lnCoef_last[1];
",2,0,1,1,2,0,0,0,0,4,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1172,"                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,53,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1174,"                    aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1175,"                    ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1177,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1178,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1179,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1182,"                    final double[] lnCoef_i = LN_QUICK_COEF[i];
",2,0,1,2,4,1,0,0,0,7,43,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1183,"                    aa = ya + lnCoef_i[0];
",4,1,1,1,2,0,0,0,0,8,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1184,"                    ab = yb + lnCoef_i[1];
",4,1,1,1,2,0,0,0,0,8,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1186,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1187,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1188,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1192,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1193,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1195,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1196,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1197,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1199,"                return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1222,"            double tmp = epsilon * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1223,"            double aa = epsilon + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1224,"            double ab = epsilon - aa;
",6,1,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1225,"            double xa = aa;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1226,"            double xb = ab;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1229,"            final double numer = bits & 0x3ffffffffffL;
",4,1,0,0,0,1,0,0,0,6,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1230,"            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);
",6,2,0,1,2,1,0,0,0,9,65,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1231,"            aa = numer - xa*denom - xb * denom;
",12,4,0,0,0,0,0,0,0,17,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1232,"            xb += aa / denom;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1235,"            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
",6,1,1,2,4,1,0,0,0,10,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1236,"            double ya = lnCoef_last[0];
",2,0,1,1,2,0,0,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1237,"            double yb = lnCoef_last[1];
",2,0,1,1,2,0,0,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1239,"            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1241,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1242,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1244,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1245,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1246,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1249,"                final double[] lnCoef_i = LN_HI_PREC_COEF[i];
",2,0,1,2,4,1,0,0,0,7,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1250,"                aa = ya + lnCoef_i[0];
",4,1,1,1,2,0,0,0,0,8,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1251,"                ab = yb + lnCoef_i[1];
",4,1,1,1,2,0,0,0,0,8,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1253,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1254,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1255,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1259,"            aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1260,"            ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1268,"            lnza = aa + ab;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1269,"            lnzb = -(lnza - aa - ab);
",8,1,0,1,2,0,0,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1270,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1324,"            hiPrec[0] = a;
",2,0,1,1,2,0,0,0,0,5,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1325,"            hiPrec[1] = b;
",2,0,1,1,2,0,0,0,0,5,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1338,"        if (x == -1) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1339,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1342,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1343,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1346,"        if (x > 1e-6 ||
",2,2,0,0,1,0,0,0,0,4,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1348,"            final double xpa = 1 + x;
",4,1,0,0,0,1,0,0,0,6,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1349,"            final double xpb = -(xpa - 1 - x);
",6,1,0,1,2,1,0,0,0,9,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1351,"            final double[] hiPrec = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1352,"            final double lores = log(xpa, hiPrec);
",2,0,0,1,2,1,6,0,0,9,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1353,"            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1354,"                return lores;
",2,0,0,0,0,1,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1359,"            final double fx1 = xpb / xpa;
",6,1,0,0,0,1,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1360,"            final double epsilon = 0.5 * fx1 + 1;
",4,2,0,0,0,1,0,0,0,7,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1361,"            return epsilon * fx1 + hiPrec[1] + hiPrec[0];
",4,3,1,2,4,1,0,0,0,11,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1364,"            final double y = (x * F_1_3 - F_1_2) * x + 1;
",10,4,0,1,2,1,0,0,0,15,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1365,"            return y * x;
",4,1,0,0,0,1,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1374,"        final double hiPrec[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1376,"        final double lores = log(x, hiPrec);
",2,0,0,1,2,1,6,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1377,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1378,"            return lores;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1381,"        final double tmp = hiPrec[0] * HEX_40000000;
",4,1,1,1,2,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1382,"        final double lna = hiPrec[0] + tmp - tmp;
",6,2,1,1,2,1,0,0,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1383,"        final double lnb = hiPrec[0] - lna + hiPrec[1];
",4,2,1,2,4,1,0,0,0,11,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1385,"        final double rln10a = 0.4342944622039795;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1386,"        final double rln10b = 1.9699272335463627E-8;
",2,0,0,0,0,1,0,0,0,3,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1388,"        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;
",16,7,0,0,0,1,0,0,0,23,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1408,"        return log(x) / log(base);
",0,1,0,2,4,1,8,0,0,9,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1419,"        final double lns[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1421,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1422,"            return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1425,"        if (x != x) { // X is NaN
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1426,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1430,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1431,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1432,"            if ((bits & 0x8000000000000000L) != 0) {
",2,2,0,2,5,0,0,0,0,4,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1434,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1436,"                if (y < 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1437,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1440,"                if (y > 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1441,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1445,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1446,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1448,"            if (y > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1449,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1452,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1455,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1456,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1457,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1459,"            if (y < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1460,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1462,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1466,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1467,"            if (x * x == 1.0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1468,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1471,"            if (x * x > 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1472,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1474,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1478,"        if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1479,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1480,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1483,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1484,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1485,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1486,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1489,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1492,"            if (y > 0)  {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1493,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1494,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1495,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1498,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1502,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1504,"            if (x * x == 1.0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1505,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1508,"            if (x * x < 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1509,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1511,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1516,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1518,"            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
",8,3,0,1,3,0,0,0,0,12,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1519,"                return pow(-x, y);
",2,0,0,1,2,1,4,0,0,7,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1522,"            if (y == (long) y) {
",4,1,0,2,5,0,0,0,0,5,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1524,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
",6,2,0,4,8,1,8,0,0,19,53,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1526,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1533,"        if (y < 8e298 && y > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1534,"            double tmp1 = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1535,"            ya = y + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,11,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1536,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1537,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1538,"            double tmp1 = y * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,45,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1539,"            double tmp2 = tmp1 * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1540,"            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
",12,3,0,1,2,0,0,0,0,16,56,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1541,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1545,"        final double lores = log(x, lns);
",2,0,0,1,2,1,6,0,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1546,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1547,"            return lores;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1550,"        double lna = lns[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1551,"        double lnb = lns[1];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1554,"        double tmp1 = lna * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1555,"        double tmp2 = lna + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1556,"        lnb += lna - tmp2;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1557,"        lna = tmp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1560,"        final double aa = lna * ya;
",6,1,0,0,0,1,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1561,"        final double ab = lna * yb + lnb * ya + lnb * yb;
",14,5,0,0,0,1,0,0,0,20,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1563,"        lna = aa+ab;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1564,"        lnb = -(lna - aa - ab);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1566,"        double z = 1.0 / 120.0;
",2,1,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1567,"        z = z * lnb + (1.0 / 24.0);
",6,3,0,1,2,0,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1568,"        z = z * lnb + (1.0 / 6.0);
",6,3,0,1,2,0,0,0,0,10,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1569,"        z = z * lnb + 0.5;
",6,2,0,0,0,0,0,0,0,9,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1570,"        z = z * lnb + 1.0;
",6,2,0,0,0,0,0,0,0,9,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1571,"        z = z * lnb;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1573,"        final double result = exp(lna, z, null);
",2,0,0,1,2,1,6,0,0,10,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1575,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1588,"        if (e == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1589,"            return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1590,"        } else if (e < 0) {
",2,1,0,1,4,0,0,0,0,3,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1591,"            e = -e;
",4,0,0,0,0,0,0,0,0,6,7,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1592,"            d = 1.0 / d;
",4,1,0,0,0,0,0,0,0,6,12,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1597,"        final int splitFactor = 0x8000001;
",2,0,0,0,0,1,0,0,0,3,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1598,"        final double cd       = splitFactor * d;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1599,"        final double d1High   = cd - (cd - d);
",8,2,0,1,2,1,0,0,0,11,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1600,"        final double d1Low    = d - d1High;
",6,1,0,0,0,1,0,0,0,8,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1603,"        double resultHigh = 1;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1604,"        double resultLow  = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1607,"        double d2p     = d;
",4,0,0,0,0,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1608,"        double d2pHigh = d1High;
",4,0,0,0,0,0,0,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1609,"        double d2pLow  = d1Low;
",4,0,0,0,0,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1611,"        while (e != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1613,"            if ((e & 0x1) != 0) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1616,"                final double tmpHigh = resultHigh * d2p;
",6,1,0,0,0,1,0,0,0,8,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1617,"                final double cRH     = splitFactor * resultHigh;
",6,1,0,0,0,1,0,0,0,8,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1618,"                final double rHH     = cRH - (cRH - resultHigh);
",8,2,0,1,2,1,0,0,0,11,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1619,"                final double rHL     = resultHigh - rHH;
",6,1,0,0,0,1,0,0,0,8,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1620,"                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);
",20,8,0,3,6,1,0,0,0,29,99,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1621,"                resultHigh = tmpHigh;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1622,"                resultLow  = resultLow * d2p + tmpLow;
",8,2,0,0,0,0,0,0,0,11,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1627,"            final double tmpHigh = d2pHigh * d2p;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1628,"            final double cD2pH   = splitFactor * d2pHigh;
",6,1,0,0,0,1,0,0,0,8,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1629,"            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);
",8,2,0,1,2,1,0,0,0,11,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1630,"            final double d2pHL   = d2pHigh - d2pHH;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1631,"            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);
",20,8,0,3,6,1,0,0,0,29,107,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1632,"            final double cTmpH   = splitFactor * tmpHigh;
",6,1,0,0,0,1,0,0,0,8,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1633,"            d2pHigh = cTmpH - (cTmpH - tmpHigh);
",8,2,0,1,2,0,0,0,0,11,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1634,"            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);
",12,4,0,1,2,0,0,0,0,17,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1635,"            d2p     = d2pHigh + d2pLow;
",6,1,0,0,0,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1637,"            e = e >> 1;
",4,1,0,0,0,0,0,0,0,6,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1639,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1641,"        return resultHigh + resultLow;
",4,1,0,0,0,1,0,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1836,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1837,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1840,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1841,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1842,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1843,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1846,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1847,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1848,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1849,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1852,"        double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1853,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1854,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1855,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1880,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1881,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1884,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1885,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1886,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1887,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1888,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1890,"        t = costA*sinEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1891,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1892,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1893,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1894,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1896,"        b = b + sintA*cosEpsB + costA*sinEpsB;
",12,4,0,0,0,0,0,0,0,17,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1897,"        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;
",18,6,0,0,0,0,0,0,0,25,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1899,"        double sina = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1900,"        double sinb = -(sina - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1904,"        a = b = c = d = 0.0;
",8,0,0,0,0,0,0,0,0,12,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1906,"        t = costA*cosEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1907,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1908,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1909,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1910,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1912,"        t = -sintA*sinEpsA;
",6,1,0,0,0,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1913,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1914,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1915,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1916,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1918,"        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;
",16,6,0,0,0,0,0,0,0,23,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1919,"        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);
",16,6,0,1,2,0,0,0,0,23,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1921,"        double cosa = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1922,"        double cosb = -(cosa - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1924,"        if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1926,"            tmp = cosa; cosa = sina; sina = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1927,"            tmp = cosb; cosb = sinb; sinb = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1941,"        double est = sina/cosa;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1944,"        temp = est * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1945,"        double esta = (est + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1946,"        double estb =  est - esta;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1948,"        temp = cosa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1949,"        double cosaa = (cosa + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1950,"        double cosab =  cosa - cosaa;
",6,1,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1953,"        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding
",22,9,0,1,2,0,0,0,0,31,114,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1954,"        err += sinb/cosa;                     // Change in est due to sinb
",6,1,0,0,0,0,0,0,0,8,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1955,"        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb
",10,3,0,0,0,0,0,0,0,15,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1957,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1960,"            double xbadj = xb + est*est*xb;
",10,2,0,0,0,0,0,0,0,12,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1961,"            if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1962,"                xbadj = -xbadj;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1965,"            err += xbadj;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1968,"        return est+err;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1985,"        long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1986,"        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1989,"        inbits &= 0x000fffffffffffffL;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1990,"        inbits |= 0x0010000000000000L;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1993,"        exponent++;
",2,0,0,0,0,0,0,0,0,3,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,1994,"        inbits <<= 11;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2000,"        int idx = exponent >> 6;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2001,"        int shift = exponent - (idx << 6);
",6,2,0,1,2,0,0,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2003,"        if (shift != 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2004,"            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);
",8,3,1,3,6,0,0,0,0,14,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2005,"            shpi0 |= RECIP_2PI[idx] >>> (64-shift);
",4,2,1,2,4,0,0,0,0,11,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2006,"            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));
",8,5,1,5,10,0,0,0,0,20,70,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2007,"            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));
",10,6,1,5,10,0,0,0,0,21,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2009,"            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];
",6,2,1,2,4,0,0,0,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2010,"            shpiA = RECIP_2PI[idx];
",2,0,1,1,2,0,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2011,"            shpiB = RECIP_2PI[idx+1];
",4,1,1,1,2,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2015,"        long a = inbits >>> 32;
",4,1,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2016,"        long b = inbits & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2018,"        long c = shpiA >>> 32;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2019,"        long d = shpiA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2021,"        long ac = a * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2022,"        long bd = b * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2023,"        long bc = b * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2024,"        long ad = a * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2026,"        long prodB = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2027,"        long prodA = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2029,"        boolean bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2030,"        boolean bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2031,"        boolean bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2034,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2036,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2039,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2040,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2042,"        prodB = prodB + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2043,"        prodA = prodA + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2045,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2048,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2050,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2054,"        c = shpiB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2055,"        d = shpiB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2056,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2057,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2058,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2061,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2063,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2064,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2065,"        prodB += ac;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2066,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2068,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2070,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2074,"        c = shpi0 >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2075,"        d = shpi0 & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2077,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2078,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2079,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2081,"        prodA += bd + ((bc + ad) << 32);
",8,3,0,2,4,0,0,0,0,12,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2093,"        int intPart = (int)(prodA >>> 62);
",4,1,0,2,4,0,0,0,0,5,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2096,"        prodA <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2097,"        prodA |= prodB >>> 62;
",4,1,0,0,0,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2098,"        prodB <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2101,"        a = prodA >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2102,"        b = prodA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2104,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2105,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2107,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2108,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2109,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2110,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2112,"        long prod2B = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2113,"        long prod2A = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2115,"        bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2116,"        bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2117,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2120,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2122,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2125,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2126,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2128,"        prod2B = prod2B + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2129,"        prod2A = prod2A + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2131,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2134,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2136,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2140,"        c = PI_O_4_BITS[1] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2141,"        d = PI_O_4_BITS[1] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2142,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2143,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2144,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2147,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2149,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2150,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2151,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2152,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2154,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2156,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2160,"        a = prodB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2161,"        b = prodB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2162,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2163,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2164,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2165,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2166,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2169,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2171,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2172,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2173,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2174,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2176,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2178,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2182,"        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits
",6,2,0,1,2,0,0,0,0,8,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2183,"        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits
",10,5,0,4,8,0,0,0,0,15,102,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2185,"        double sumA = tmpA + tmpB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2186,"        double sumB = -(sumA - tmpA - tmpB);
",8,1,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2189,"        result[0] = intPart;
",2,0,1,1,2,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2190,"        result[1] = sumA * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2191,"        result[2] = sumB * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2192,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2209,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2210,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2215,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2216,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2217,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2219,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2223,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2231,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2232,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2233,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2234,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2235,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2236,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2244,"            quadrant ^= 2;  // Flip bit 1
",2,0,0,0,0,0,0,0,0,3,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2257,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2273,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2277,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2286,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2287,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2288,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2289,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2290,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2291,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2311,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2322,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2323,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2326,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2327,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2328,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2329,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2333,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2334,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2335,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2336,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2338,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2341,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2342,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2346,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2347,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2351,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2352,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2353,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2354,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2355,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2356,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2357,"            final CodyWaite cw = new CodyWaite(xa, xb);
",6,0,0,1,2,1,0,4,0,11,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2358,"            quadrant = cw.getK() & 3;
",2,1,0,1,2,0,4,0,0,8,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2359,"            xa = cw.getRemA();
",2,0,0,1,2,0,4,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2360,"            xb = cw.getRemB();
",2,0,0,1,2,0,4,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2363,"        if (xa > 1.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2365,"            final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2366,"            final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2368,"            final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2369,"            double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2370,"            b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2372,"            xa = a + b;
",6,1,0,0,0,0,0,0,0,8,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2373,"            xb = -(xa - a - b);
",8,1,0,1,2,0,0,0,0,11,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2374,"            quadrant ^= 1;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2375,"            negative ^= true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2379,"        if ((quadrant & 1) == 0) {
",2,2,0,2,5,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2380,"            result = tanQ(xa, xb, false);
",2,0,0,1,2,0,6,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2382,"            result = -tanQ(xa, xb, true);
",2,0,0,1,2,0,6,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2385,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2386,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2389,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2398,"        return atan(x, 0.0, false);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2408,"        boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2411,"        if (xa == 0.0) { // Matches +/- 0.0; return correct sign
",2,1,0,1,3,1,0,0,0,3,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2412,"            return leftPlane ? copySign(Math.PI, xa) : xa;
",8,0,0,1,2,1,4,0,0,12,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2415,"        if (xa < 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2417,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2418,"            xb = -xb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2419,"            negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2422,"        if (xa > 1.633123935319537E16) { // Very large input
",2,1,0,1,3,0,0,0,0,3,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2423,"            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);
",16,3,0,3,6,1,0,0,0,20,69,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2427,"        if (xa < 1) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2428,"            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);
",8,4,0,4,8,0,0,0,0,14,65,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2430,"            final double oneOverXa = 1 / xa;
",4,1,0,0,0,1,0,0,0,6,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2431,"            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);
",8,4,0,4,8,0,0,0,0,15,89,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2433,"        double epsA = xa - TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2434,"        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);
",6,2,1,2,4,0,0,0,0,13,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2435,"        epsB += xb - TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2437,"        double temp = epsA + epsB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2438,"        epsB = -(temp - epsA - epsB);
",8,1,0,1,2,0,0,0,0,11,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2439,"        epsA = temp;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2442,"        temp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2443,"        double ya = xa + temp - temp;
",8,2,0,0,0,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2444,"        double yb = xb + xa - ya;
",8,2,0,0,0,0,0,0,0,10,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2445,"        xa = ya;
",4,0,0,0,0,0,0,0,0,5,8,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2446,"        xb += yb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2449,"        if (idx == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2452,"            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
",6,5,1,5,10,1,0,0,0,20,91,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2454,"            ya = epsA * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2455,"            yb = epsB * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2456,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2457,"            double temp2 = xa * TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2458,"            double za = 1d + temp2;
",4,1,0,0,0,0,0,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2459,"            double zb = -(za - 1d - temp2);
",6,1,0,1,2,0,0,0,0,8,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2460,"            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];
",6,3,1,2,4,0,0,0,0,18,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2461,"            temp = za + temp2;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2462,"            zb += -(temp - za - temp2);
",8,1,0,1,2,0,0,0,0,11,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2463,"            za = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2465,"            zb += xb * TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2466,"            ya = epsA / za;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2468,"            temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2469,"            final double yaa = (ya + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2470,"            final double yab = ya - yaa;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2472,"            temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2473,"            final double zaa = (za + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2474,"            final double zab = za - zaa;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2477,"            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;
",22,9,0,1,2,0,0,0,0,32,65,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2479,"            yb += -epsA * zb / za / za;
",10,3,0,0,0,0,0,0,0,15,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2480,"            yb += epsB / za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2484,"        epsA = ya;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2485,"        epsB = yb;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2488,"        final double epsA2 = epsA * epsA;
",6,1,0,0,0,1,0,0,0,8,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2499,"        yb = 0.07490822288864472;
",2,0,0,0,0,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2500,"        yb = yb * epsA2 + -0.09088450866185192;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2501,"        yb = yb * epsA2 + 0.11111095942313305;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2502,"        yb = yb * epsA2 + -0.1428571423679182;
",6,2,0,0,0,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2503,"        yb = yb * epsA2 + 0.19999999999923582;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2504,"        yb = yb * epsA2 + -0.33333333333333287;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2505,"        yb = yb * epsA2 * epsA;
",8,1,0,0,0,0,0,0,0,10,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2508,"        ya = epsA;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2510,"        temp = ya + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2511,"        yb = -(temp - ya - yb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2512,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2515,"        yb += epsB / (1d + epsA * epsA);
",8,3,0,1,2,0,0,0,0,12,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2518,"        double za = EIGHTHS[idx] + ya;
",4,1,1,1,2,0,0,0,0,9,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2519,"        double zb = -(za - EIGHTHS[idx] - ya);
",6,1,1,2,4,0,0,0,0,12,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2520,"        temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2521,"        zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2522,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2524,"        double result = za + zb;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2525,"        double resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2527,"        if (leftPlane) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2529,"            final double pia = 1.5707963267948966 * 2;
",2,1,0,0,0,1,0,0,0,4,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2530,"            final double pib = 6.123233995736766E-17 * 2;
",2,1,0,0,0,1,0,0,0,4,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2532,"            za = pia - result;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2533,"            zb = -(za - pia + result);
",8,2,0,1,2,0,0,0,0,12,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2534,"            zb += pib - resultb;
",6,1,0,0,0,0,0,0,0,8,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2536,"            result = za + zb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2537,"            resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2541,"        if (negate ^ leftPlane) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2542,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2545,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2555,"        if (x != x || y != y) {
",8,3,0,1,3,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2556,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2559,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2560,"            final double result = x * y;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2561,"            final double invx = 1d / x;
",4,1,0,0,0,1,0,0,0,6,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2562,"            final double invy = 1d / y;
",4,1,0,0,0,1,0,0,0,6,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2564,"            if (invx == 0) { // X is infinite
",2,1,0,1,3,0,0,0,0,3,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2565,"                if (x > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2566,"                    return y; // return +/- 0.0
",2,0,0,0,0,2,0,0,0,2,27,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2568,"                    return copySign(Math.PI, y);
",4,0,0,1,2,1,4,0,0,8,28,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2572,"            if (x < 0 || invx < 0) {
",4,3,0,1,3,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2573,"                if (y < 0 || invy < 0) {
",4,3,0,1,3,0,0,0,0,7,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2574,"                    return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2576,"                    return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2579,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2585,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2586,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2587,"                return Math.PI * F_1_4;
",6,1,0,0,0,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2590,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2591,"                return Math.PI * F_3_4;
",6,1,0,0,0,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2594,"            return Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2597,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2598,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2599,"                return -Math.PI * F_1_4;
",6,1,0,0,0,1,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2602,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2603,"                return -Math.PI * F_3_4;
",6,1,0,0,0,1,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2606,"            return -Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2609,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2610,"            if (y > 0 || 1 / y > 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2611,"                return 0d;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2614,"            if (y < 0 || 1 / y < 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2615,"                return -0d;
",0,0,0,0,0,1,0,0,0,1,11,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2619,"        if (x == Double.NEGATIVE_INFINITY)
",6,1,0,1,2,0,0,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2621,"            if (y > 0.0 || 1 / y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2622,"                return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2625,"            if (y < 0 || 1 / y < 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2626,"                return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2632,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2633,"            if (y > 0 || 1 / y > 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2634,"                return Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2637,"            if (y < 0 || 1 / y < 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2638,"                return -Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2643,"        final double r = y / x;
",6,1,0,0,0,1,0,0,0,8,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2644,"        if (Double.isInfinite(r)) { // bypass calculations that can create NaN
",0,0,0,2,5,0,6,0,0,6,70,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2645,"            return atan(r, 0, x < 0);
",2,1,0,1,2,1,4,0,0,7,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2648,"        double ra = doubleHighPart(r);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2649,"        double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2652,"        final double xa = doubleHighPart(x);
",2,0,0,1,2,1,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2653,"        final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2655,"        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
",22,9,0,1,2,0,0,0,0,32,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2657,"        final double temp = ra + rb;
",6,1,0,0,0,1,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2658,"        rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2659,"        ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2661,"        if (ra == 0) { // Fix up the sign so atan works correctly
",2,1,0,1,3,0,0,0,0,3,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2662,"            ra = copySign(0d, y);
",2,0,0,1,2,0,4,0,0,7,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2666,"        final double result = atan(ra, rb, x < 0);
",4,1,0,1,2,1,6,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2668,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2676,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2677,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2680,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2681,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2684,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2685,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2688,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2689,"          return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2692,"      if (x == 0.0) { // Matches +/- 0.0; return correct sign
",2,1,0,1,3,1,0,0,0,3,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2693,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2699,"      double temp = x * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2700,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2701,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2704,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2705,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2708,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2709,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2711,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2712,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2714,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2715,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2716,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2720,"      y = sqrt(za);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2721,"      temp = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2722,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2723,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2726,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2729,"      double dx = zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2732,"      double r = x/y;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2733,"      temp = r * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2734,"      double ra = r + temp - temp;
",8,2,0,0,0,0,0,0,0,10,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2735,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2737,"      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2738,"      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
",10,3,0,0,0,0,0,0,0,15,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2740,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2741,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2742,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2744,"      return atan(ra, rb, false);
",0,0,0,1,2,1,6,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2752,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2753,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2756,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2757,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2760,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2761,"          return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2764,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2765,"          return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2768,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2769,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2775,"      double temp = x * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2776,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2777,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2780,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2781,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2784,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2785,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2787,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2788,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2790,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2791,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2792,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2795,"      double y = sqrt(za);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2796,"      temp = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2797,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2798,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2801,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2804,"      yb += zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2805,"      y = ya+yb;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2806,"      yb = -(y - ya - yb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2809,"      double r = y/x;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2812,"      if (Double.isInfinite(r)) { // x is effectively zero
",0,0,0,2,5,0,6,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2813,"          return Math.PI/2; // so return the appropriate value
",4,1,0,0,0,2,0,0,0,5,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2816,"      double ra = doubleHighPart(r);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2817,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2819,"      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2820,"      rb += yb / x;  // Add in effect additional bits of sqrt.
",6,1,0,0,0,0,0,0,0,8,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2822,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2823,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2824,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2826,"      return atan(ra, rb, x<0);
",2,1,0,1,2,1,6,0,0,9,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2835,"      long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2836,"      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2837,"      boolean subnormal = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2839,"      if (exponent == -1023) {
",2,1,0,1,3,0,0,0,0,4,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2840,"          if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2841,"              return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2845,"          subnormal = true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2846,"          x *= 1.8014398509481984E16;  // 2^54
",2,0,0,0,0,0,0,0,0,3,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2847,"          inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2848,"          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,8,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2851,"      if (exponent == 1024) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2853,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2857,"      int exp3 = exponent / 3;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2860,"      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |
",4,2,0,1,3,0,4,0,0,10,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2864,"      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);
",4,2,0,2,4,1,4,0,0,11,98,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2867,"      double est = -0.010714690733195933;
",2,0,0,0,0,0,0,0,0,3,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2868,"      est = est * mant + 0.0875862700108075;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2869,"      est = est * mant + -0.3058015757857271;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2870,"      est = est * mant + 0.7249995199969751;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2871,"      est = est * mant + 0.5039018405998233;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2873,"      est *= CBRTTWO[exponent % 3 + 2];
",4,2,1,1,2,0,0,0,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2878,"      final double xs = x / (p2*p2*p2);
",10,2,0,1,2,1,0,0,0,13,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2879,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2880,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2883,"      double temp = est * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2884,"      double ya = est + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2885,"      double yb = est - ya;
",6,1,0,0,0,0,0,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2887,"      double za = ya * ya;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2888,"      double zb = ya * yb * 2.0 + yb * yb;
",10,3,0,0,0,0,0,0,0,13,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2889,"      temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2890,"      double temp2 = za + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2891,"      zb += za - temp2;
",6,1,0,0,0,0,0,0,0,8,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2892,"      za = temp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2894,"      zb = za * yb + ya * zb + zb * yb;
",14,5,0,0,0,0,0,0,0,20,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2895,"      za = za * ya;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2897,"      double na = xs - za;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2898,"      double nb = -(na - xs + za);
",8,2,0,1,2,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2899,"      nb -= zb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2901,"      est += (na+nb)/(3*est*est);
",10,3,0,2,4,0,0,0,0,14,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2904,"      est *= p2;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2906,"      if (subnormal) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2907,"          est *= 3.814697265625E-6;  // 2^-18
",2,0,0,0,0,0,0,0,0,3,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2910,"      return est;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2920,"        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign
",2,2,0,2,5,1,6,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2921,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2925,"        final double facta = 0.01745329052209854;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2926,"        final double factb = 1.997844754509471E-9;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2928,"        double xa = doubleHighPart(x);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2929,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2931,"        double result = xb * factb + xb * facta + xa * factb + xa * facta;
",18,7,0,0,0,0,0,0,0,25,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2932,"        if (result == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2933,"            result = result * x; // ensure correct sign if calculation underflows
",6,1,0,0,0,0,0,0,0,8,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2935,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2945,"        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign
",2,2,0,2,5,1,6,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2946,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2950,"        final double facta = 57.2957763671875;
",2,0,0,0,0,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2951,"        final double factb = 3.145894820876798E-6;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2953,"        double xa = doubleHighPart(x);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2954,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2956,"        return xb * factb + xb * facta + xa * factb + xa * facta;
",16,7,0,0,0,1,0,0,0,23,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2965,"        return (x < 0) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,2983,"        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3001,"        if (Double.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3002,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3004,"        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,72,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3013,"        if (Float.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3014,"            return Float.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3016,"        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3028,"        if ((n > -1023) && (n < 1024)) {
",4,3,0,3,7,0,0,0,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3029,"            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
",4,3,0,4,8,1,4,0,0,11,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3033,"        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
",2,2,0,4,9,0,12,0,0,16,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3034,"            return d;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3036,"        if (n < -2098) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3037,"            return (d > 0) ? 0.0 : -0.0;
",2,1,0,1,2,1,0,0,0,4,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3039,"        if (n > 2097) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3040,"            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,69,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3044,"        final long bits = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3045,"        final long sign = bits & 0x8000000000000000L;
",4,1,0,0,0,1,0,0,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3046,"        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;
",4,2,0,3,6,0,0,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3047,"        long mantissa   = bits & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,5,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3050,"        int scaledExponent = exponent + n;
",6,1,0,0,0,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3052,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3054,"            if (scaledExponent > 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3056,"                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3057,"            } else if (scaledExponent > -53) {
",2,1,0,1,4,0,0,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3061,"                mantissa = mantissa | (1L << 52);
",4,2,0,1,2,0,0,0,0,7,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3064,"                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
",6,2,0,2,4,1,0,0,0,10,73,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3065,"                mantissa = mantissa >>> (1 - scaledExponent);
",6,2,0,1,2,0,0,0,0,9,45,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3066,"                if (mostSignificantLostBit != 0) {
",2,1,0,1,3,0,0,0,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3068,"                    mantissa++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3070,"                return Double.longBitsToDouble(sign | mantissa);
",4,1,0,1,2,1,4,0,0,9,48,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3074,"                return (sign == 0L) ? 0.0 : -0.0;
",2,1,0,1,2,1,0,0,0,4,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3078,"            if (exponent == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3081,"                while ((mantissa >>> 52) != 1) {
",2,2,0,2,5,0,0,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3082,"                    mantissa = mantissa << 1;
",4,1,0,0,0,0,0,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3083,"                    --scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3085,"                ++scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3086,"                mantissa = mantissa & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,6,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3088,"                if (scaledExponent < 2047) {
",2,1,0,1,3,0,0,0,0,3,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3089,"                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3091,"                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,74,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3094,"            } else if (scaledExponent < 2047) {
",2,1,0,1,4,0,0,0,0,3,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3095,"                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3097,"                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,74,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3112,"        if ((n > -127) && (n < 128)) {
",4,3,0,3,7,0,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3113,"            return f * Float.intBitsToFloat((n + 127) << 23);
",4,3,0,2,4,1,4,0,0,11,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3117,"        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
",2,2,0,4,9,0,12,0,0,16,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3118,"            return f;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3120,"        if (n < -277) {
",2,1,0,1,3,0,0,0,0,4,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3121,"            return (f > 0) ? 0.0f : -0.0f;
",2,1,0,1,2,1,0,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3123,"        if (n > 276) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3124,"            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,67,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3128,"        final int bits = Float.floatToIntBits(f);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3129,"        final int sign = bits & 0x80000000;
",4,1,0,0,0,1,0,0,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3130,"        int  exponent  = (bits >>> 23) & 0xff;
",4,2,0,1,2,0,0,0,0,6,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3131,"        int mantissa   = bits & 0x007fffff;
",4,1,0,0,0,0,0,0,0,5,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3134,"        int scaledExponent = exponent + n;
",6,1,0,0,0,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3136,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3138,"            if (scaledExponent > 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3140,"                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3141,"            } else if (scaledExponent > -24) {
",2,1,0,1,4,0,0,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3145,"                mantissa = mantissa | (1 << 23);
",4,2,0,1,2,0,0,0,0,7,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3148,"                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
",6,2,0,2,4,1,0,0,0,10,71,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3149,"                mantissa = mantissa >>> (1 - scaledExponent);
",6,2,0,1,2,0,0,0,0,9,45,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3150,"                if (mostSignificantLostBit != 0) {
",2,1,0,1,3,0,0,0,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3152,"                    mantissa++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3154,"                return Float.intBitsToFloat(sign | mantissa);
",4,1,0,1,2,1,4,0,0,9,45,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3158,"                return (sign == 0) ? 0.0f : -0.0f;
",2,1,0,1,2,1,0,0,0,4,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3162,"            if (exponent == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3165,"                while ((mantissa >>> 23) != 1) {
",2,2,0,2,5,0,0,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3166,"                    mantissa = mantissa << 1;
",4,1,0,0,0,0,0,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3167,"                    --scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3169,"                ++scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3170,"                mantissa = mantissa & 0x007fffff;
",4,1,0,0,0,0,0,0,0,6,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3172,"                if (scaledExponent < 255) {
",2,1,0,1,3,0,0,0,0,3,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3173,"                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3175,"                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,71,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3178,"            } else if (scaledExponent < 255) {
",2,1,0,1,4,0,0,0,0,3,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3179,"                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3181,"                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,71,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3221,"        if (Double.isNaN(d) || Double.isNaN(direction)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3222,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3223,"        } else if (d == direction) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3224,"            return direction;
",2,0,0,0,0,1,0,0,0,2,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3225,"        } else if (Double.isInfinite(d)) {
",0,0,0,2,6,0,6,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3226,"            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
",10,1,0,1,2,1,0,0,0,12,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3227,"        } else if (d == 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3228,"            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3233,"        final long bits = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3234,"        final long sign = bits & 0x8000000000000000L;
",4,1,0,0,0,1,0,0,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3235,"        if ((direction < d) ^ (sign == 0L)) {
",6,3,0,3,7,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3236,"            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
",4,3,0,3,6,1,4,0,0,11,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3238,"            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
",4,3,0,3,6,1,4,0,0,11,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3277,"        if (Double.isNaN(f) || Double.isNaN(direction)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3278,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3279,"        } else if (f == direction) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3280,"            return (float) direction;
",2,0,0,1,2,1,0,0,0,2,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3281,"        } else if (Float.isInfinite(f)) {
",0,0,0,2,6,0,6,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3282,"            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
",10,1,0,1,2,1,0,0,0,12,53,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3283,"        } else if (f == 0f) {
",2,1,0,1,4,0,0,0,0,3,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3284,"            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,60,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3289,"        final int bits = Float.floatToIntBits(f);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3290,"        final int sign = bits & 0x80000000;
",4,1,0,0,0,1,0,0,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3291,"        if ((direction < f) ^ (sign == 0)) {
",6,3,0,3,7,0,0,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3292,"            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
",4,3,0,3,6,1,4,0,0,11,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3294,"            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
",4,3,0,3,6,1,4,0,0,11,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3306,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3307,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3310,"        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {
",8,3,0,1,3,0,0,0,0,12,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3311,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3314,"        y = (long) x;
",4,0,0,1,2,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3315,"        if (x < 0 && y != x) {
",6,3,0,1,3,0,0,0,0,9,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3316,"            y--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3319,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3320,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3323,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3333,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3334,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3337,"        y = floor(x);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3338,"        if (y == x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3339,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3342,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3344,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3345,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3348,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3356,"        double y = floor(x);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3357,"        double d = x - y;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3359,"        if (d > 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3360,"            if (y == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3361,"                return -0.0; // Preserve sign of operand
",0,0,0,0,0,1,0,0,0,1,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3363,"            return y+1.0;
",2,1,0,0,0,1,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3365,"        if (d < 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3366,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3370,"        long z = (long) y;
",4,0,0,1,2,0,0,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3371,"        return (z & 1) == 0 ? y : y + 1.0;
",6,3,0,1,2,1,0,0,0,9,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3379,"        return (long) floor(x + 0.5);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3387,"        return (int) floor(x + 0.5f);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3405,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3414,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3415,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3417,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3418,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3421,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3422,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3426,"        int bits = Float.floatToRawIntBits(a);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3427,"        if (bits == 0x80000000) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3428,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3430,"        return b;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3439,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3440,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3442,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3443,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3446,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3447,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3451,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3452,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3453,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3455,"        return b;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3473,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3482,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3483,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3485,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3486,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3489,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3490,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3494,"        int bits = Float.floatToRawIntBits(a);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3495,"        if (bits == 0x80000000) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3496,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3498,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3514,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3515,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3519,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3520,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3521,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3523,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3541,"        if (Double.isInfinite(x) || Double.isInfinite(y)) {
",0,1,0,3,7,0,12,0,0,13,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3542,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3543,"        } else if (Double.isNaN(x) || Double.isNaN(y)) {
",0,1,0,3,8,0,12,0,0,13,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3544,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3547,"            final int expX = getExponent(x);
",2,0,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3548,"            final int expY = getExponent(y);
",2,0,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3549,"            if (expX > expY + 27) {
",4,2,0,1,3,0,0,0,0,6,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3551,"                return abs(x);
",0,0,0,1,2,1,4,0,0,4,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3552,"            } else if (expY > expX + 27) {
",4,2,0,1,4,0,0,0,0,6,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3554,"                return abs(y);
",0,0,0,1,2,1,4,0,0,4,14,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3558,"                final int middleExp = (expX + expY) / 2;
",6,2,0,1,2,1,0,0,0,9,40,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3561,"                final double scaledX = scalb(x, -middleExp);
",4,0,0,1,2,1,4,0,0,10,44,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3562,"                final double scaledY = scalb(y, -middleExp);
",4,0,0,1,2,1,4,0,0,10,44,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3565,"                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);
",10,3,0,1,2,1,2,0,0,16,67,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3568,"                return scalb(scaledH, middleExp);
",0,0,0,1,2,1,6,0,0,6,33,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3596,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation
",0,0,0,1,2,1,8,0,0,8,90,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3608,"        long m = Double.doubleToLongBits(magnitude);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3609,"        long s = Double.doubleToLongBits(sign);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3610,"        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
",8,7,0,3,7,0,0,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3611,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3613,"        return -magnitude; // flip sign
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3625,"        int m = Float.floatToIntBits(magnitude);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3626,"        int s = Float.floatToIntBits(sign);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3627,"        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
",8,7,0,3,7,0,0,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3628,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3630,"        return -magnitude; // flip sign
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3643,"        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;
",0,3,0,4,8,1,6,0,0,9,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3656,"        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;
",0,3,0,3,6,1,6,0,0,9,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3665,"        PrintStream out = System.out;
",6,0,0,0,0,0,0,2,0,8,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3666,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);
",4,0,0,1,2,0,8,0,0,13,96,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3667,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);
",4,0,0,1,2,0,8,0,0,13,96,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3668,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);
",4,0,0,1,2,0,8,0,0,13,100,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3669,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);
",4,0,0,1,2,0,8,0,0,13,100,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3670,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);
",4,0,0,1,2,0,8,0,0,13,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3671,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,75,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3672,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,75,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3673,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3674,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3675,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,81,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3676,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,81,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3677,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,66,"                     throw new MaxCountExceededException(max);
",2,0,0,1,2,0,0,2,0,4,41,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,82,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,114,"        return count;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,125,"        return count < maximalCount;
",4,1,0,0,0,1,0,0,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,136,"        for (int i = 0; i < value; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,137,"            incrementCount();
",0,0,0,1,2,0,2,0,0,2,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,139,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,20,156,"            maxCountCallback.trigger(maximalCount);
",0,0,0,1,2,0,6,0,0,6,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,486,"            = new Comparator<Pair<Double, double[]>>() {
",0,0,0,2,5,0,0,6,0,6,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,490,"                switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,492,"                    val = o1.getKey().compareTo(o2.getKey());
",2,0,0,3,6,0,10,0,0,13,41,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,493,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,495,"                    val = o2.getKey().compareTo(o1.getKey());
",2,0,0,3,6,0,10,0,0,13,41,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,496,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,499,"                    throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,501,"                return val;
",2,0,0,0,0,1,0,0,0,2,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,46,"    private MathArrays() {}
",2,0,0,2,4,1,0,0,0,3,23,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,56,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,57,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,58,"            sum += FastMath.abs(p1[i] - p2[i]);
",2,1,1,3,6,0,4,0,0,16,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,60,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,71,"      int sum = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,72,"      for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,73,"          sum += FastMath.abs(p1[i] - p2[i]);
",2,1,1,3,6,0,4,0,0,16,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,75,"      return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,86,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,87,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,88,"            final double dp = p1[i] - p2[i];
",2,1,1,2,4,1,0,0,0,12,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,89,"            sum += dp * dp;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,91,"        return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,102,"      double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,103,"      for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,104,"          final double dp = p1[i] - p2[i];
",2,1,1,2,4,1,0,0,0,12,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,105,"          sum += dp * dp;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,107,"      return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,118,"        double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,119,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,120,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));
",2,1,1,4,8,0,10,0,0,22,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,122,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,133,"        int max = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,134,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,135,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));
",2,1,1,4,8,0,10,0,0,22,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,137,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,162,"        T previous = val[0];
",2,0,1,1,2,0,0,2,0,6,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,163,"        final int max = val.length;
",6,0,0,0,0,1,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,164,"        for (int i = 1; i < max; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,166,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,168,"                comp = previous.compareTo(val[i]);
",2,0,1,2,4,0,4,0,0,11,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,169,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,170,"                    if (comp >= 0) {
",2,1,0,1,3,0,0,0,0,3,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,171,"                        return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,174,"                    if (comp > 0) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,175,"                        return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,180,"                comp = val[i].compareTo(previous);
",2,0,1,2,4,0,4,0,0,11,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,181,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,182,"                    if (comp >= 0) {
",2,1,0,1,3,0,0,0,0,3,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,183,"                        return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,186,"                    if (comp > 0) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,187,"                       return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,193,"                throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,196,"            previous = val[i];
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,198,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,212,"        return checkOrder(val, dir, strict, false);
",0,0,0,1,2,1,8,0,0,9,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,229,"        double previous = val[0];
",2,0,1,1,2,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,230,"        final int max = val.length;
",6,0,0,0,0,1,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,234,"        for (index = 1; index < max; index++) {
",8,1,0,1,3,0,0,0,0,11,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,235,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,237,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,238,"                    if (val[index] <= previous) {
",2,1,1,2,5,0,0,0,0,7,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,239,"                        break ITEM;
",2,0,0,0,0,0,0,0,0,2,11,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,242,"                    if (val[index] < previous) {
",2,1,1,2,5,0,0,0,0,7,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,243,"                        break ITEM;
",2,0,0,0,0,0,0,0,0,2,11,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,248,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,249,"                    if (val[index] >= previous) {
",2,1,1,2,5,0,0,0,0,7,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,250,"                        break ITEM;
",2,0,0,0,0,0,0,0,0,2,11,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,253,"                    if (val[index] > previous) {
",2,1,1,2,5,0,0,0,0,7,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,254,"                        break ITEM;
",2,0,0,0,0,0,0,0,0,2,11,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,260,"                throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,263,"            previous = val[index];
",2,0,1,1,2,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,266,"        if (index == max) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,268,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,272,"        if (abort) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,273,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);
",8,0,1,2,4,0,0,2,0,14,82,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,275,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,290,"        checkOrder(val, dir, strict, true);
",0,0,0,1,2,0,8,0,0,9,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,291,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,301,"        checkOrder(val, OrderDirection.INCREASING, true);
",4,0,0,1,2,0,4,0,0,9,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,302,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,365,"        double rdwarf = 3.834e-20;
",2,0,0,0,0,0,0,0,0,2,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,366,"        double rgiant = 1.304e+19;
",2,0,0,0,0,0,0,0,0,2,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,367,"        double s1 = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,368,"        double s2 = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,369,"        double s3 = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,370,"        double x1max = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,371,"        double x3max = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,372,"        double floatn = v.length;
",6,0,0,0,0,0,0,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,373,"        double agiant = rgiant / floatn;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,374,"        for (int i = 0; i < v.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,375,"            double xabs = Math.abs(v[i]);
",2,0,1,2,4,0,4,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,376,"            if (xabs < rdwarf || xabs > agiant) {
",8,3,0,1,3,0,0,0,0,11,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,377,"                if (xabs > rdwarf) {
",4,1,0,1,3,0,0,0,0,5,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,378,"                    if (xabs > x1max) {
",4,1,0,1,3,0,0,0,0,5,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,379,"                        double r = x1max / xabs;
",6,1,0,0,0,0,0,0,0,7,24,13,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,380,"                        s1= 1 + s1 * r * r;
",8,2,0,0,0,0,0,0,0,11,19,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,381,"                        x1max = xabs;
",4,0,0,0,0,0,0,0,0,5,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,382,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,383,"                        double r = xabs / x1max;
",6,1,0,0,0,0,0,0,0,7,24,13,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,384,"                        s1 += r * r;
",6,1,0,0,0,0,0,0,0,8,12,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,385,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,387,"                    if (xabs > x3max) {
",4,1,0,1,3,0,0,0,0,5,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,388,"                        double r = x3max / xabs;
",6,1,0,0,0,0,0,0,0,7,24,13,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,389,"                        s3= 1 + s3 * r * r;
",8,2,0,0,0,0,0,0,0,11,19,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,390,"                        x3max = xabs;
",4,0,0,0,0,0,0,0,0,5,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,391,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,392,"                        if (xabs != 0) {
",2,1,0,1,3,0,0,0,0,3,16,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,393,"                            double r = xabs / x3max;
",6,1,0,0,0,0,0,0,0,7,24,15,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,394,"                            s3 += r * r;
",6,1,0,0,0,0,0,0,0,8,12,14,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,395,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,399,"                s2 += xabs * xabs;
",6,1,0,0,0,0,0,0,0,8,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,403,"        if (s1 != 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,404,"            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);
",12,4,0,2,4,0,4,0,0,21,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,406,"            if (s2 == 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,407,"                norm = x3max * Math.sqrt(s3);
",4,1,0,1,2,0,6,0,0,12,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,409,"                if (s2 >= x3max) {
",4,1,0,1,3,0,0,0,0,5,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,410,"                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));
",12,5,0,4,8,0,4,0,0,22,57,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,412,"                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
",12,4,0,4,8,0,4,0,0,21,56,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,416,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,437,"        sortInPlace(x, OrderDirection.INCREASING, yList);
",4,0,0,1,2,0,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,438,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,461,"        if (x == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,462,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,465,"        final int len = x.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,466,"        final List<Pair<Double, double[]>> list
",2,0,0,1,2,1,0,6,0,9,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,469,"        final int yListLen = yList.length;
",6,0,0,0,0,1,0,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,470,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,471,"            final double[] yValues = new double[yListLen];
",2,0,1,2,4,1,0,0,0,5,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,472,"            for (int j = 0; j < yListLen; j++) {
",8,1,0,1,3,0,0,0,0,10,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,473,"                double[] y = yList[j];
",2,0,1,2,4,0,0,0,0,6,22,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,474,"                if (y == null) {
",2,1,0,1,3,0,0,0,0,3,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,475,"                    throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,477,"                if (y.length != len) {
",6,1,0,1,3,0,0,0,0,7,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,478,"                    throw new DimensionMismatchException(y.length, len);
",6,0,0,1,2,0,0,2,0,8,52,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,480,"                yValues[j] = y[i];
",0,0,1,2,4,0,0,0,0,9,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,482,"            list.add(new Pair<Double, double[]>(x[i], yValues));
",2,0,1,4,8,0,4,4,0,14,52,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,485,"        final Comparator<Pair<Double, double[]>> comp
",2,0,0,1,2,1,0,6,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,505,"        Collections.sort(list, comp);
",0,0,0,1,2,0,8,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,507,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,508,"            final Pair<Double, double[]> e = list.get(i);
",2,0,0,2,4,1,6,4,0,13,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,509,"            x[i] = e.getKey();
",0,0,1,2,4,0,4,0,0,9,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,510,"            final double[] yValues = e.getValue();
",2,0,0,2,4,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,511,"            for (int j = 0; j < yListLen; j++) {
",8,1,0,1,3,0,0,0,0,10,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,512,"                yList[j][i] = yValues[j];
",0,0,1,3,6,0,0,0,0,11,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,515,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,524,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,534,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,562,"         final double[] output = new double[len];
",2,0,1,2,4,1,0,0,0,5,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,563,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,564,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,586,"        final int len = a.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,587,"        if (len != b.length) {
",6,1,0,1,3,0,0,0,0,7,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,588,"            throw new DimensionMismatchException(len, b.length);
",6,0,0,1,2,0,0,2,0,8,52,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,591,"        final double[] prodHigh = new double[len];
",2,0,1,2,4,1,0,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,592,"        double prodLowSum = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,594,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,595,"            final double ai = a[i];
",2,0,1,1,2,1,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,596,"            final double ca = SPLIT_FACTOR * ai;
",6,1,0,0,0,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,597,"            final double aHigh = ca - (ca - ai);
",8,2,0,1,2,1,0,0,0,11,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,598,"            final double aLow = ai - aHigh;
",6,1,0,0,0,1,0,0,0,8,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,600,"            final double bi = b[i];
",2,0,1,1,2,1,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,601,"            final double cb = SPLIT_FACTOR * bi;
",6,1,0,0,0,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,602,"            final double bHigh = cb - (cb - bi);
",8,2,0,1,2,1,0,0,0,11,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,603,"            final double bLow = bi - bHigh;
",6,1,0,0,0,1,0,0,0,8,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,604,"            prodHigh[i] = ai * bi;
",4,1,1,1,2,0,0,0,0,10,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,605,"            final double prodLow = aLow * bLow - (((prodHigh[i] -
",6,5,1,1,5,1,0,0,0,16,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,609,"            prodLowSum += prodLow;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,613,"        final double prodHighCur = prodHigh[0];
",2,0,1,1,2,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,614,"        double prodHighNext = prodHigh[1];
",2,0,1,1,2,0,0,0,0,4,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,615,"        double sHighPrev = prodHighCur + prodHighNext;
",6,1,0,0,0,0,0,0,0,7,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,616,"        double sPrime = sHighPrev - prodHighNext;
",6,1,0,0,0,0,0,0,0,7,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,617,"        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
",12,4,0,3,6,0,0,0,0,16,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,619,"        final int lenMinusOne = len - 1;
",4,1,0,0,0,1,0,0,0,6,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,620,"        for (int i = 1; i < lenMinusOne; i++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,621,"            prodHighNext = prodHigh[i + 1];
",4,1,1,1,2,0,0,0,0,8,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,622,"            final double sHighCur = sHighPrev + prodHighNext;
",6,1,0,0,0,1,0,0,0,8,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,623,"            sPrime = sHighCur - prodHighNext;
",6,1,0,0,0,0,0,0,0,8,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,624,"            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
",12,4,0,3,6,0,0,0,0,17,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,625,"            sHighPrev = sHighCur;
",4,0,0,0,0,0,0,0,0,5,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,628,"        double result = sHighPrev + (prodLowSum + sLowSum);
",8,2,0,1,2,0,0,0,0,10,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,630,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,633,"            result = 0;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,634,"            for (int i = 0; i < len; ++i) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,635,"                result += a[i] * b[i];
",2,1,1,2,4,0,0,0,0,12,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,639,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,678,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,679,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,680,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,681,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,682,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,683,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,686,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,687,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,690,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,691,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,692,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,693,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,694,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,695,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,698,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,699,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,702,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,703,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,704,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,708,"        double result = s12High + (prod1Low + prod2Low + s12Low);
",10,2,0,1,2,0,0,0,0,12,57,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,710,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,713,"            result = a1 * b1 + a2 * b2;
",10,3,0,0,0,0,0,0,0,14,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,716,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,758,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,759,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,760,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,761,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,762,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,763,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,766,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,767,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,770,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,771,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,772,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,773,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,774,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,775,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,778,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,779,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,782,"        final double ca3        = SPLIT_FACTOR * a3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,783,"        final double a3High     = ca3 - (ca3 - a3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,784,"        final double a3Low      = a3 - a3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,785,"        final double cb3        = SPLIT_FACTOR * b3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,786,"        final double b3High     = cb3 - (cb3 - b3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,787,"        final double b3Low      = b3 - b3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,790,"        final double prod3High  = a3 * b3;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,791,"        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,794,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,795,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,796,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,799,"        final double s123High   = s12High + prod3High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,800,"        final double s123Prime  = s123High - prod3High;
",6,1,0,0,0,1,0,0,0,8,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,801,"        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);
",12,4,0,3,6,1,0,0,0,17,87,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,805,"        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);
",14,2,0,1,2,0,0,0,0,16,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,807,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,810,"            result = a1 * b1 + a2 * b2 + a3 * b3;
",14,5,0,0,0,0,0,0,0,20,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,813,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,860,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,861,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,862,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,863,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,864,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,865,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,868,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,869,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,872,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,873,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,874,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,875,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,876,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,877,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,880,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,881,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,884,"        final double ca3        = SPLIT_FACTOR * a3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,885,"        final double a3High     = ca3 - (ca3 - a3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,886,"        final double a3Low      = a3 - a3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,887,"        final double cb3        = SPLIT_FACTOR * b3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,888,"        final double b3High     = cb3 - (cb3 - b3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,889,"        final double b3Low      = b3 - b3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,892,"        final double prod3High  = a3 * b3;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,893,"        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,896,"        final double ca4        = SPLIT_FACTOR * a4;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,897,"        final double a4High     = ca4 - (ca4 - a4);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,898,"        final double a4Low      = a4 - a4High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,899,"        final double cb4        = SPLIT_FACTOR * b4;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,900,"        final double b4High     = cb4 - (cb4 - b4);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,901,"        final double b4Low      = b4 - b4High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,904,"        final double prod4High  = a4 * b4;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,905,"        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,908,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,909,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,910,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,913,"        final double s123High   = s12High + prod3High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,914,"        final double s123Prime  = s123High - prod3High;
",6,1,0,0,0,1,0,0,0,8,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,915,"        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);
",12,4,0,3,6,1,0,0,0,17,87,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,918,"        final double s1234High  = s123High + prod4High;
",6,1,0,0,0,1,0,0,0,8,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,919,"        final double s1234Prime = s1234High - prod4High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,920,"        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);
",12,4,0,3,6,1,0,0,0,17,91,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,924,"        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);
",18,2,0,1,2,0,0,0,0,20,102,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,926,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,929,"            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;
",18,7,0,0,0,0,0,0,0,26,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,932,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,946,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,947,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,949,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,950,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,952,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,953,"            if (!Precision.equals(x[i], y[i])) {
",0,0,1,4,9,0,4,0,0,13,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,954,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,957,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,972,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,973,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,975,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,976,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,978,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,979,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {
",0,0,1,4,9,0,4,0,0,13,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,980,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,983,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,997,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,998,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1000,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1001,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1003,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1004,"            if (!Precision.equals(x[i], y[i])) {
",0,0,1,4,9,0,4,0,0,13,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1005,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1008,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1023,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1024,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1026,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1027,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1029,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1030,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {
",0,0,1,4,9,0,4,0,0,13,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1031,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1034,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1061,"         if (Double.isInfinite(normalizedSum)) {
",0,0,0,2,5,0,6,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1062,"             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);
",4,0,0,1,2,0,0,2,0,6,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1064,"         if (Double.isNaN(normalizedSum)) {
",0,0,0,2,5,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1065,"             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
",4,0,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1067,"         double sum = 0d;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1068,"         final int len = values.length;
",6,0,0,0,0,1,0,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1069,"         double[] out = new double[len];
",2,0,1,2,4,0,0,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1070,"         for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1071,"             if (Double.isInfinite(values[i])) {
",0,0,1,3,7,0,4,0,0,8,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1072,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
",6,0,1,2,4,0,0,2,0,12,94,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1074,"             if (!Double.isNaN(values[i])) {
",0,0,1,3,7,0,4,0,0,9,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1075,"                 sum += values[i];
",2,0,1,1,2,0,0,0,0,7,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1078,"         if (sum == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1079,"             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);
",4,0,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1081,"         for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1082,"             if (Double.isNaN(values[i])) {
",0,0,1,3,7,0,4,0,0,8,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1083,"                 out[i] = Double.NaN;
",4,0,1,1,2,0,0,0,0,9,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1085,"                 out[i] = values[i] * normalizedSum / sum;
",4,2,1,2,4,0,0,0,0,15,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,1088,"         return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,20,37,"    public MathInternalError() {
",2,0,0,1,3,1,0,0,0,3,28,2,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,20,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);
",4,0,0,2,4,0,6,0,0,10,69,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,20,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,20,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);
",8,0,0,1,2,0,0,0,0,8,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,20,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,20,56,"        super(pattern, args);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,20,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,34,"    private CompositeFormat() {}
",2,0,0,2,4,1,0,0,0,3,28,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,68,"        parseNextCharacter(source, pos);
",0,0,0,1,2,0,6,0,0,6,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,69,"        pos.setIndex(pos.getIndex() - 1);
",0,1,0,2,4,0,8,0,0,9,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,81,"         int index = pos.getIndex();
",2,0,0,1,2,0,4,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,82,"         final int n = source.length();
",2,0,0,1,2,1,4,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,83,"         char ret = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,85,"         if (index < n) {
",4,1,0,1,3,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,88,"                 c = source.charAt(index++);
",4,0,0,1,2,0,4,0,0,10,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,89,"             } while (Character.isWhitespace(c) && index < n);
",4,2,0,2,5,0,6,0,0,12,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,90,"             pos.setIndex(index);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,92,"             if (index < n) {
",4,1,0,1,3,0,0,0,0,5,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,93,"                 ret = c;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,97,"         return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,111,"        Number ret = null;
",2,0,0,0,0,0,0,2,0,4,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,113,"        StringBuilder sb = new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,114,"        sb.append('(');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,115,"        sb.append(value);
",0,0,0,1,2,0,6,0,0,6,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,116,"        sb.append(')');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,118,"        final int n = sb.length();
",2,0,0,1,2,1,4,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,119,"        final int startIndex = pos.getIndex();
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,120,"        final int endIndex = startIndex + n;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,121,"        if (endIndex < source.length()) {
",2,1,0,2,5,0,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,122,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
",0,1,0,4,9,0,14,0,0,15,75,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,123,"                ret = Double.valueOf(value);
",2,0,0,1,2,0,6,0,0,9,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,124,"                pos.setIndex(endIndex);
",0,0,0,1,2,0,6,0,0,6,23,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,128,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,143,"        final int startIndex = pos.getIndex();
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,144,"        Number number = format.parse(source, pos);
",2,0,0,1,2,0,8,2,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,145,"        final int endIndex = pos.getIndex();
",2,0,0,1,2,1,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,148,"        if (startIndex == endIndex) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,150,"            final double[] special = {
",2,0,0,1,3,1,0,0,0,3,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,153,"            for (int i = 0; i < special.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,154,"                number = parseNumber(source, special[i], pos);
",2,0,1,2,4,0,6,0,0,13,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,155,"                if (number != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,156,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,161,"        return number;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,175,"        final int startIndex = pos.getIndex();
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,176,"        final int endIndex = startIndex + expected.length();
",4,1,0,1,2,1,4,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,177,"        if ((startIndex >= source.length()) ||
",2,2,0,2,5,0,4,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,181,"            pos.setIndex(startIndex);
",0,0,0,1,2,0,6,0,0,6,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,182,"            pos.setErrorIndex(startIndex);
",0,0,0,1,2,0,6,0,0,6,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,183,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,187,"        pos.setIndex(endIndex);
",0,0,0,1,2,0,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,188,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,211,"        if( Double.isNaN(value) || Double.isInfinite(value) ) {
",0,1,0,3,7,0,12,0,0,13,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,212,"            toAppendTo.append('(');
",0,0,0,1,3,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,213,"            toAppendTo.append(value);
",0,0,0,1,2,0,6,0,0,6,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,214,"            toAppendTo.append(')');
",0,0,0,1,3,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,216,"            format.format(value, toAppendTo, pos);
",0,0,0,1,2,0,10,0,0,10,38,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,20,218,"        return toAppendTo;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,83,"    private Precision() {}
",2,0,0,2,4,1,0,0,0,3,22,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,98,"        } else if (x < y) {
",4,1,0,1,4,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,99,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,101,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,122,"        if (equals(x, y, maxUlps)) {
",0,0,0,2,5,0,8,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,123,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,124,"        } else if (x < y) {
",4,1,0,1,4,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,125,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,127,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,139,"        return equals(x, y, 1);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,152,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);
",0,2,0,4,8,1,18,0,0,20,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,166,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;
",6,3,0,2,4,1,10,0,0,19,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,181,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);
",6,3,0,3,6,1,10,0,0,19,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,203,"        int xInt = Float.floatToIntBits(x);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,204,"        int yInt = Float.floatToIntBits(y);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,207,"        if (xInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,208,"            xInt = SGN_MASK_FLOAT - xInt;
",6,1,0,0,0,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,210,"        if (yInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,211,"            yInt = SGN_MASK_FLOAT - yInt;
",6,1,0,0,0,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,214,"        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
",8,2,0,1,2,1,4,0,0,15,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,216,"        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);
",2,1,0,2,4,1,12,0,0,17,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,232,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);
",0,2,0,4,8,1,20,0,0,22,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,244,"        return equals(x, y, 1);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,257,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);
",0,2,0,4,8,1,18,0,0,20,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,287,"        if (equals(x, y, 1)) {
",0,0,0,2,5,0,6,0,0,6,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,288,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,291,"        final double absoluteMax = FastMath.max(FastMath.abs(x), FastMath.abs(y));
",2,0,0,3,6,1,16,0,0,19,74,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,292,"        final double relativeDifference = FastMath.abs((x - y) / absoluteMax);
",8,2,0,2,4,1,4,0,0,15,70,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,294,"        return relativeDifference <= eps;
",4,1,0,0,0,1,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,309,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);
",6,3,0,3,6,1,10,0,0,19,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,335,"            xInt = SGN_MASK - xInt;
",6,1,0,0,0,0,0,0,0,8,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,338,"            yInt = SGN_MASK - yInt;
",6,1,0,0,0,0,0,0,0,8,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,359,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);
",0,2,0,4,8,1,20,0,0,22,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,372,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);
",4,0,0,1,2,1,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,394,"            return (new BigDecimal
",0,0,0,0,1,1,0,2,0,2,22,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,398,"        } catch (NumberFormatException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,399,"            if (Double.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,400,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,402,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,417,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);
",4,0,0,1,2,1,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,435,"        final float sign = FastMath.copySign(1f, x);
",2,0,0,1,2,1,6,0,0,9,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,436,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;
",4,1,0,2,4,1,6,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,437,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;
",6,2,0,2,4,1,6,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,457,"        switch (roundingMethod) {
",2,0,0,1,3,0,0,0,0,2,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,459,"            if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,460,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,462,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,464,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,466,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,467,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,469,"            if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,470,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,472,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,474,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,476,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);
",6,0,0,1,2,0,6,0,0,13,66,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,477,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,478,"            if (fraction > 0.5) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,479,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,481,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,483,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,486,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,487,"            if (fraction > 0.5) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,488,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,489,"            } else if (fraction < 0.5) {
",2,1,0,1,4,0,0,0,0,3,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,490,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,493,"                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math
",0,3,0,1,4,0,12,0,0,15,57,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,495,"                    unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,497,"                    unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,500,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,503,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);
",6,0,0,1,2,0,6,0,0,13,66,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,504,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,505,"            if (fraction >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,506,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,508,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,510,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,513,"            if (unscaled != FastMath.floor(unscaled)) {
",2,1,0,2,5,0,6,0,0,9,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,514,"                throw new MathArithmeticException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,518,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,519,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,521,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,
",4,0,0,0,1,0,0,2,0,6,80,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,532,"        return unscaled;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,20,552,"        return x + originalDelta - x;
",6,2,0,0,0,1,0,0,0,8,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3719,"    private static class ExpFracTable {
",2,0,0,0,1,2,0,0,0,4,35,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3745,"                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();
",2,0,0,1,2,0,4,0,0,7,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3746,"                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();
",2,0,0,1,2,0,4,0,0,7,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3748,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3815,"                --k;
",2,0,0,0,0,0,0,0,0,3,4,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3816,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,20,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);
",12,0,0,1,2,0,0,0,0,13,73,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,20,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,20,80,"        super(direction == MathArrays.OrderDirection.INCREASING ?
",8,1,0,0,1,0,0,0,0,9,57,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,20,89,"        this.direction = direction;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,20,90,"        this.strict = strict;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,20,91,"        this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,20,92,"        this.previous = previous;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,20,93,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,20,99,"        return direction;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,20,105,"        return strict;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,20,113,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,20,119,"        return previous;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,143,"    public static enum OrderDirection {
",2,0,0,0,1,2,0,0,0,4,35,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,145,"        INCREASING,
",2,0,0,0,0,0,0,0,0,2,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,147,"        DECREASING
",2,0,0,0,0,0,0,0,0,2,10,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3680,"    private static class ExpIntTable {
",2,0,0,0,1,2,0,0,0,4,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3712,"                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();
",2,0,0,1,2,0,4,0,0,7,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3713,"                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();
",2,0,0,1,2,0,4,0,0,7,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,20,3715,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,20,166,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,47,"    private MathUtils() {}
",2,0,0,2,4,1,0,0,0,3,22,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,57,"        return new Double(value).hashCode();
",2,0,0,2,4,1,2,2,0,6,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,68,"        return Arrays.hashCode(value);
",0,0,0,1,2,1,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,91,"         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);
",14,5,0,2,4,1,4,0,0,23,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,113,"        final double p = FastMath.abs(period);
",2,0,0,1,2,1,6,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,114,"        return a - p * FastMath.floor((a - offset) / p) - offset;
",12,5,0,2,4,1,4,0,0,21,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,129,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,131,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,132,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,134,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,136,"            return (byte) -magnitude; // Flip sign.
",2,0,0,1,2,1,0,0,0,3,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,152,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,154,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,155,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,157,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,159,"            return (short) -magnitude; // Flip sign.
",2,0,0,1,2,1,0,0,0,3,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,175,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,177,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,178,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,180,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,182,"            return -magnitude; // Flip sign.
",2,0,0,0,0,1,0,0,0,3,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,198,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,200,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,201,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,203,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,205,"            return -magnitude; // Flip sign.
",2,0,0,0,0,1,0,0,0,3,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,217,"        if (Double.isInfinite(x) || Double.isNaN(x)) {
",0,1,0,3,7,0,12,0,0,13,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,218,"            throw new NotFiniteNumberException(x);
",2,0,0,1,2,0,0,2,0,4,38,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,220,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,231,"        for (int i = 0; i < val.length; i++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,232,"            final double x = val[i];
",2,0,1,1,2,1,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,233,"            if (Double.isInfinite(x) || Double.isNaN(x)) {
",0,1,0,3,7,0,12,0,0,13,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,234,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);
",8,0,0,1,2,0,0,2,0,10,73,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,237,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,251,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,252,"            throw new NullArgumentException(pattern, args);
",4,0,0,1,2,0,0,2,0,6,47,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,254,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,20,265,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,20,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);
",8,0,0,1,2,0,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,20,41,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,20,53,"        super(specific, wrong, args);
",6,0,0,1,2,0,0,0,0,6,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,20,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,20,6134,"    private FastMathLiteralArrays() {}
",2,0,0,2,4,1,0,0,0,3,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,20,6142,"        return EXP_INT_A.clone();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,20,6150,"        return EXP_INT_B.clone();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,20,6158,"        return EXP_FRAC_A.clone();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,20,6166,"        return EXP_FRAC_B.clone();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,114,"    public MersenneTwister(int seed) {
",4,0,0,1,3,1,0,0,0,5,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,115,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,116,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,123,"    public MersenneTwister(int[] seed) {
",4,0,0,2,5,1,0,0,0,5,36,2,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,124,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,125,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,126,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,131,"    public MersenneTwister(long seed) {
",4,0,0,1,3,1,0,0,0,5,35,2,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,132,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,133,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,134,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,168,"            setSeed(System.currentTimeMillis() + System.identityHashCode(this));
",0,1,0,3,6,0,10,0,0,11,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,20,169,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,61,"        return next(1) != 0;
",0,1,0,1,2,1,2,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,66,"        int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,67,"        final int iEnd = bytes.length - 3;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,68,"        while (i < iEnd) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,69,"            final int random = next(32);
",2,0,0,1,2,1,2,0,0,5,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,70,"            bytes[i]     = (byte) (random & 0xff);
",2,1,1,3,6,0,0,0,0,8,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,71,"            bytes[i + 1] = (byte) ((random >>  8) & 0xff);
",4,3,1,4,8,0,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,72,"            bytes[i + 2] = (byte) ((random >> 16) & 0xff);
",4,3,1,4,8,0,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,73,"            bytes[i + 3] = (byte) ((random >> 24) & 0xff);
",4,3,1,4,8,0,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,74,"            i += 4;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,75,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,76,"        int random = next(32);
",2,0,0,1,2,0,2,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,77,"        while (i < bytes.length) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,78,"            bytes[i++] = (byte) (random & 0xff);
",4,1,1,3,6,0,0,0,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,79,"            random     = random >> 8;
",4,1,0,0,0,0,0,0,0,6,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,92,"        return next(23) * 0x1.0p-23f;
",0,1,0,1,2,1,2,0,0,3,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,119,"        return next(32);
",0,0,0,1,2,1,2,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,138,"        if (n > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,139,"            if ((n & -n) == n) {
",6,2,0,2,5,0,0,0,0,9,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,140,"                return (int) ((n * (long) next(31)) >> 31);
",2,2,0,5,10,1,2,0,0,6,43,10,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,145,"                bits = next(31);
",2,0,0,1,2,0,2,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,146,"                val = bits % n;
",6,1,0,0,0,0,0,0,0,8,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,147,"            } while (bits - val + (n - 1) < 0);
",6,4,0,2,5,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,148,"            return val;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,150,"        throw new NotStrictlyPositiveException(n);
",2,0,0,1,2,0,0,2,0,4,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,155,"        final long high  = ((long) next(32)) << 32;
",2,1,0,3,6,1,2,0,0,6,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,156,"        final long  low  = ((long) next(32)) & 0xffffffffL;
",2,1,0,3,6,1,2,0,0,6,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,20,157,"        return high | low;
",4,1,0,0,0,1,0,0,0,5,18,4,0.00000,0
