dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,"                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {
",8,1,0,2,5,0,0,0,0,10,62,9,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,233,"        if (mti >= N) { // generate N words at one time
",4,1,0,1,3,0,0,0,0,5,47,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,234,"            int mtNext = mt[0];
",2,0,1,1,2,0,0,0,0,4,19,7,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,235,"            for (int k = 0; k < N - M; ++k) {
",10,2,0,1,3,0,0,0,0,13,33,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,236,"                int mtCurr = mtNext;
",4,0,0,0,0,0,0,0,0,4,20,9,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,237,"                mtNext = mt[k + 1];
",4,1,1,1,2,0,0,0,0,8,19,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,238,"                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);
",6,3,0,2,4,0,0,0,0,10,50,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,239,"                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];
",8,4,1,4,8,0,0,0,0,21,47,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,241,"            for (int k = N - M; k < N - 1; ++k) {
",12,3,0,1,3,0,0,0,0,16,37,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,242,"                int mtCurr = mtNext;
",4,0,0,0,0,0,0,0,0,4,20,9,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,243,"                mtNext = mt[k + 1];
",4,1,1,1,2,0,0,0,0,8,19,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,244,"                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);
",6,3,0,2,4,0,0,0,0,10,50,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,245,"                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];
",10,5,1,5,10,0,0,0,0,24,53,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,247,"            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);
",4,3,1,3,6,0,0,0,0,10,49,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,248,"            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];
",8,5,1,4,8,0,0,0,0,20,51,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,250,"            mti = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,253,"        y = mt[mti++];
",4,0,1,1,2,0,0,0,0,8,14,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,256,"        y ^=  y >>> 11;
",4,1,0,0,0,0,0,0,0,6,15,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,257,"        y ^= (y <<   7) & 0x9d2c5680;
",4,2,0,1,2,0,0,0,0,7,29,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,258,"        y ^= (y <<  15) & 0xefc60000;
",4,2,0,1,2,0,0,0,0,7,29,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,259,"        y ^=  y >>> 18;
",4,1,0,0,0,0,0,0,0,6,15,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,261,"        return y >>> (32 - bits);
",4,2,0,1,2,1,0,0,0,6,25,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,843,"        DoubleIndex(double value, int index) {
",6,0,0,1,3,0,0,0,0,6,38,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,844,"            this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,845,"            this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,846,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,850,"            return Double.compare(value, o.value);
",4,0,0,1,2,1,6,0,0,10,38,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,833,"    private static class DoubleIndex implements Comparable<DoubleIndex> {
",2,0,0,0,1,2,0,4,0,8,69,2,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,892,"        public FitnessFunction() {
",2,0,0,1,3,1,0,0,0,3,26,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,893,"            valueRange = 1;
",2,0,0,0,0,0,0,0,0,3,15,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,894,"            isRepairMode = true;
",2,0,0,0,0,0,0,0,0,4,20,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,895,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,903,"            if (isRepairMode) {
",2,0,0,1,3,0,0,0,0,2,19,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,904,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,905,"                value = CMAESOptimizer.this.computeObjectiveValue(repaired) +
",4,1,0,1,2,0,4,0,0,10,61,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,907,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,910,"            return isMinimize ? value : -value;
",6,0,0,0,0,1,0,0,0,7,35,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,936,"            this.valueRange = valueRange;
",4,0,0,0,0,0,0,0,0,5,29,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,937,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,944,"            final double[] lB = CMAESOptimizer.this.getLowerBound();
",4,0,0,2,4,1,2,0,0,7,56,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,945,"            final double[] uB = CMAESOptimizer.this.getUpperBound();
",4,0,0,2,4,1,2,0,0,7,56,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,947,"            final double[] repaired = new double[x.length];
",6,0,0,2,4,1,0,0,0,7,47,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,948,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,949,"                if (x[i] < lB[i]) {
",0,1,1,3,7,0,0,0,0,9,19,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,951,"                } else if (x[i] > uB[i]) {
",0,1,1,3,8,0,0,0,0,9,26,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,954,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,957,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,966,"            double penalty = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,967,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,968,"                double diff = Math.abs(x[i] - repaired[i]);
",2,1,1,3,6,0,4,0,0,15,43,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,969,"                penalty += diff * valueRange;
",6,1,0,0,0,0,0,0,0,8,29,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,971,"            return isMinimize ? penalty : -penalty;
",6,0,0,0,0,1,0,0,0,7,39,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,881,"    private class FitnessFunction {
",2,0,0,0,1,1,0,0,0,3,31,2,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,370,"        isMinimize = getGoalType().equals(GoalType.MINIMIZE);
",6,0,0,2,4,0,4,0,0,11,53,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,371,"        final FitnessFunction fitfun = new FitnessFunction();
",2,0,0,1,2,1,0,4,0,7,53,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,372,"        final double[] guess = getStartPoint();
",2,0,0,2,4,1,2,0,0,5,39,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,374,"        dimension = guess.length;
",6,0,0,0,0,0,0,0,0,7,25,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,375,"        initializeCMA(guess);
",0,0,0,1,2,0,4,0,0,4,21,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,376,"        iterations = 0;
",2,0,0,0,0,0,0,0,0,3,15,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,377,"        double bestValue = fitfun.value(guess);
",2,0,0,1,2,0,6,0,0,8,39,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,378,"        push(fitnessHistory, bestValue);
",0,0,0,1,2,0,6,0,0,6,32,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,379,"        PointValuePair optimum
",2,0,0,0,0,0,0,2,0,4,22,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,382,"        PointValuePair lastResult = null;
",2,0,0,0,0,0,0,2,0,4,33,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,387,"        for (iterations = 1; iterations <= maxIterations; iterations++) {
",8,1,0,1,3,0,0,0,0,11,65,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,390,"            final RealMatrix arz = randn1(dimension, lambda);
",2,0,0,1,2,1,6,2,0,11,49,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,391,"            final RealMatrix arx = zeros(dimension, lambda);
",2,0,0,1,2,1,6,2,0,11,48,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,392,"            final double[] fitness = new double[lambda];
",2,0,1,2,4,1,0,0,0,5,44,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,394,"            for (int k = 0; k < lambda; k++) {
",8,1,0,1,3,0,0,0,0,10,34,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,395,"                RealMatrix arxk = null;
",2,0,0,0,0,0,0,2,0,4,23,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,396,"                for (int i = 0; i < checkFeasableCount + 1; i++) {
",8,2,0,1,3,0,0,0,0,11,50,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,397,"                    if (diagonalOnly <= 0) {
",2,1,0,1,3,0,0,0,0,3,24,11,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,404,"                    if (i >= checkFeasableCount ||
",4,2,0,0,1,0,0,0,0,6,30,11,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,411,"                copyColumn(arxk, 0, arx, k);
",0,0,0,1,2,0,8,0,0,8,28,10,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,413,"                    fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness
",0,0,1,3,6,0,10,0,0,15,63,11,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,416,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,419,"            final int[] arindex = sortedIndices(fitness);
",2,0,0,2,4,1,4,0,0,7,45,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,421,"            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)
",4,0,0,2,4,1,0,2,0,7,65,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,422,"            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));
",2,0,0,2,4,1,12,2,0,17,78,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,423,"            xmean = bestArx.multiply(weights);
",2,0,0,1,2,0,6,0,0,9,34,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,424,"            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));
",2,0,0,2,4,1,12,2,0,17,78,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,425,"            final RealMatrix zmean = bestArz.multiply(weights);
",2,0,0,1,2,1,6,2,0,11,51,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,426,"            final boolean hsig = updateEvolutionPaths(zmean, xold);
",2,0,0,1,2,1,6,0,0,9,55,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,427,"            if (diagonalOnly <= 0) {
",2,1,0,1,3,0,0,0,0,3,24,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,433,"            sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps));
",10,4,0,3,6,0,8,0,0,23,63,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,434,"            final double bestFitness = fitness[arindex[0]];
",2,0,1,2,4,1,0,0,0,7,47,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,435,"            final double worstFitness = fitness[arindex[arindex.length - 1]];
",6,1,1,2,4,1,0,0,0,12,65,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,436,"            if (bestValue > bestFitness) {
",4,1,0,1,3,0,0,0,0,5,30,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,437,"                bestValue = bestFitness;
",4,0,0,0,0,0,0,0,0,5,24,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,438,"                lastResult = optimum;
",4,0,0,0,0,0,0,0,0,5,21,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,439,"                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),
",2,0,0,2,5,0,8,2,0,13,65,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,441,"                if (getConvergenceChecker() != null &&
",0,2,0,1,3,0,2,0,0,5,38,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,450,"            if (stopFitness != 0) { // only if stopFitness is defined
",2,1,0,1,3,0,0,0,0,3,57,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,455,"            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);
",2,0,0,3,6,1,6,0,0,9,52,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,456,"            final double[] pcCol = pc.getColumn(0);
",2,0,0,2,4,1,4,0,0,7,39,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,457,"            for (int i = 0; i < dimension; i++) {
",8,1,0,1,3,0,0,0,0,10,37,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,458,"                if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {
",4,2,1,5,11,0,8,0,0,22,68,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,459,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,465,"            for (int i = 0; i < dimension; i++) {
",8,1,0,1,3,0,0,0,0,10,37,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,466,"                if (sigma * sqrtDiagC[i] > stopTolUpX) {
",4,2,1,2,5,0,0,0,0,10,40,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,470,"            final double historyBest = min(fitnessHistory);
",2,0,0,1,2,1,4,0,0,7,47,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,471,"            final double historyWorst = max(fitnessHistory);
",2,0,0,1,2,1,4,0,0,7,48,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,472,"            if (iterations > 2 &&
",2,2,0,0,1,0,0,0,0,4,21,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,477,"            if (iterations > fitnessHistory.length &&
",6,2,0,0,1,0,0,0,0,8,41,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,482,"            if (max(diagD) / min(diagD) > 1e7) {
",0,2,0,3,7,0,8,0,0,10,36,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,486,"            if (getConvergenceChecker() != null) {
",0,1,0,2,5,0,2,0,0,4,38,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,497,"            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {
",4,3,1,5,11,0,0,0,0,11,58,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,500,"            if (iterations > 2 && Math.max(historyWorst, bestFitness) -
",2,3,0,1,3,0,8,0,0,13,59,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,505,"            push(fitnessHistory,bestFitness);
",0,0,0,1,2,0,6,0,0,6,33,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,506,"            fitfun.setValueRange(worstFitness-bestFitness);
",4,1,0,1,2,0,4,0,0,9,47,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,507,"            if (generateStatistics) {
",2,0,0,1,3,0,0,0,0,2,25,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,514,"        return optimum;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,546,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,566,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,574,"        if (lambda <= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,578,"        final double[][] sigmaArray = new double[guess.length][1];
",6,0,0,4,8,1,0,0,0,7,58,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,579,"        for (int i = 0; i < guess.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,580,"            sigmaArray[i][0] = inputSigma[i];
",0,0,1,3,6,0,0,0,0,9,33,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,582,"        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);
",4,0,0,1,2,1,0,4,0,10,71,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,583,"        sigma = max(insigma); // overall standard deviation
",2,0,0,1,2,0,4,0,0,7,51,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,586,"        stopTolUpX = 1e3 * max(insigma);
",2,1,0,1,2,0,4,0,0,8,32,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,587,"        stopTolX = 1e-11 * max(insigma);
",2,1,0,1,2,0,4,0,0,8,32,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,588,"        stopTolFun = 1e-12;
",2,0,0,0,0,0,0,0,0,3,19,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,589,"        stopTolHistFun = 1e-13;
",2,0,0,0,0,0,0,0,0,3,23,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,592,"        mu = lambda / 2; // number of parents/points for recombination
",4,1,0,0,0,0,0,0,0,6,62,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,593,"        logMu2 = Math.log(mu + 0.5);
",4,1,0,1,2,0,4,0,0,10,28,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,594,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);
",2,0,0,4,8,0,12,0,0,16,71,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,595,"        double sumw = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,596,"        double sumwq = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,597,"        for (int i = 0; i < mu; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,598,"            double w = weights.getEntry(i, 0);
",2,0,0,1,2,0,6,0,0,8,34,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,599,"            sumw += w;
",4,0,0,0,0,0,0,0,0,5,10,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,600,"            sumwq += w * w;
",6,1,0,0,0,0,0,0,0,8,15,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,602,"        weights = weights.scalarMultiply(1 / sumw);
",4,1,0,1,2,0,4,0,0,10,43,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,603,"        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i
",8,2,0,0,0,0,0,0,0,11,69,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,606,"        cc = (4 + mueff / dimension) /
",6,3,0,1,2,0,0,0,0,10,30,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,608,"        cs = (mueff + 2) / (dimension + mueff + 3.);
",8,3,0,2,4,0,0,0,0,12,44,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,609,"        damps = (1 + 2 * Math.max(0, Math.sqrt((mueff - 1) /
",4,7,0,1,5,0,8,0,0,20,52,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,613,"        ccov1 = 2 / ((dimension + 1.3) * (dimension + 1.3) + mueff);
",8,5,0,3,6,0,0,0,0,14,60,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,614,"        ccovmu = Math.min(1 - ccov1, 2 * (mueff - 2 + 1 / mueff) /
",8,6,0,1,3,0,4,0,0,19,58,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,616,"        ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3);
",6,3,0,2,4,0,4,0,0,14,54,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,617,"        ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3);
",8,4,0,2,4,0,4,0,0,17,64,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,618,"        chiN = Math.sqrt(dimension) *
",2,1,0,1,2,0,6,0,0,10,29,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,621,"        xmean = MatrixUtils.createColumnRealMatrix(guess); // objective variables
",2,0,0,1,2,0,6,0,0,9,73,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,622,"        diagD = insigma.scalarMultiply(1 / sigma);
",4,1,0,1,2,0,4,0,0,10,42,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,623,"        diagC = square(diagD);
",2,0,0,1,2,0,4,0,0,7,22,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,624,"        pc = zeros(dimension, 1); // evolution paths for C and sigma
",2,0,0,1,2,0,4,0,0,7,60,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,625,"        ps = zeros(dimension, 1); // B defines the coordinate system
",2,0,0,1,2,0,4,0,0,7,60,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,626,"        normps = ps.getFrobeniusNorm();
",2,0,0,1,2,0,4,0,0,7,31,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,628,"        B = eye(dimension, dimension);
",2,0,0,1,2,0,6,0,0,9,30,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,629,"        D = ones(dimension, 1); // diagonal D defines the scaling
",2,0,0,1,2,0,4,0,0,7,57,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,630,"        BD = times(B, repmat(diagD.transpose(), dimension, 1));
",2,0,0,3,6,0,12,0,0,15,55,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,631,"        C = B.multiply(diag(square(D)).multiply(B.transpose())); // covariance
",2,0,0,5,10,0,16,0,0,19,70,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,632,"        historySize = 10 + (int) (3 * 10 * dimension / (double) lambda);
",6,3,0,3,6,0,0,0,0,10,64,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,633,"        fitnessHistory = new double[historySize]; // history of fitness values
",2,0,1,1,2,0,0,0,0,5,70,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,634,"        for (int i = 0; i < historySize; i++) {
",8,1,0,1,3,0,0,0,0,10,39,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,635,"            fitnessHistory[i] = Double.MAX_VALUE;
",4,0,1,1,2,0,0,0,0,9,37,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,637,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,648,"        ps = ps.scalarMultiply(1 - cs).add(
",4,1,0,1,3,0,6,0,0,12,35,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,651,"        normps = ps.getFrobeniusNorm();
",2,0,0,1,2,0,4,0,0,7,31,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,652,"        final boolean hsig = normps /
",4,1,0,0,0,1,0,0,0,6,29,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,655,"        pc = pc.scalarMultiply(1 - cc);
",4,1,0,1,2,0,4,0,0,10,31,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,656,"        if (hsig) {
",2,0,0,1,3,0,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,657,"            pc = pc.add(xmean.subtract(xold).scalarMultiply(Math.sqrt(cc * (2 - cc) * mueff) / sigma));
",10,3,0,5,10,0,16,0,0,30,91,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,659,"        return hsig;
",2,0,0,0,0,1,0,0,0,2,12,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,804,"        for (int i = vals.length-1; i > 0; i--) {
",10,2,0,1,3,0,0,0,0,13,41,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,805,"            vals[i] = vals[i-1];
",2,1,1,2,4,0,0,0,0,10,20,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,807,"        vals[0] = val;
",2,0,1,1,2,0,0,0,0,5,14,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,808,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,817,"        final DoubleIndex[] dis = new DoubleIndex[doubles.length];
",6,0,0,2,4,1,0,4,0,11,58,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,818,"        for (int i = 0; i < doubles.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,819,"            dis[i] = new DoubleIndex(doubles[i], i);
",2,0,1,3,6,0,0,2,0,13,40,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,821,"        Arrays.sort(dis);
",0,0,0,1,2,0,6,0,0,6,17,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,822,"        final int[] indices = new int[doubles.length];
",6,0,0,2,4,1,0,0,0,7,46,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,823,"        for (int i = 0; i < doubles.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,824,"            indices[i] = dis[i].index;
",2,0,1,2,4,0,0,0,0,11,26,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,826,"        return indices;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,982,"        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
",2,0,0,6,12,1,8,0,0,11,77,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,983,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,984,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,985,"                d[r][c] = Math.log(m.getEntry(r, c));
",0,0,1,4,8,0,12,0,0,19,37,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,988,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,996,"        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
",2,0,0,6,12,1,8,0,0,11,77,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,997,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,998,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,999,"                d[r][c] = Math.sqrt(m.getEntry(r, c));
",0,0,1,4,8,0,12,0,0,19,38,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1002,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1010,"        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
",2,0,0,6,12,1,8,0,0,11,77,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1011,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1012,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1013,"                double e = m.getEntry(r, c);
",2,0,0,1,2,0,8,0,0,10,28,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1014,"                d[r][c] = e * e;
",4,1,1,2,4,0,0,0,0,12,16,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1017,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1026,"        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
",2,0,0,6,12,1,8,0,0,11,77,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1027,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1028,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1029,"                d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);
",0,1,1,4,8,0,16,0,0,24,46,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1032,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1056,"        final double[][] d = new double[m.getRowDimension()][cols.length];
",6,0,0,5,10,1,4,0,0,11,66,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1057,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1058,"            for (int c = 0; c < cols.length; c++) {
",10,1,0,1,3,0,0,0,0,12,39,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1059,"                d[r][c] = m.getEntry(r, cols[c]);
",0,0,1,4,8,0,6,0,0,17,33,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1062,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1102,"        if (m.getColumnDimension() == 1) {
",0,1,0,2,5,0,4,0,0,5,34,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1103,"            final double[][] d = new double[m.getRowDimension()][m.getRowDimension()];
",2,0,0,6,12,1,8,0,0,11,74,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1104,"            for (int i = 0; i < m.getRowDimension(); i++) {
",6,1,0,2,5,0,4,0,0,12,47,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1105,"                d[i][i] = m.getEntry(i, 0);
",0,0,1,3,6,0,6,0,0,13,27,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1107,"            return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1127,"        for (int i = 0; i < m1.getRowDimension(); i++) {
",6,1,0,2,5,0,4,0,0,12,48,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1128,"            m2.setEntry(i, col2, m1.getEntry(i, col1));
",0,0,0,2,4,0,16,0,0,16,43,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1130,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1138,"        final double[][] d = new double[n][m];
",2,0,1,4,8,1,0,0,0,7,38,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1139,"        for (int r = 0; r < n; r++) {
",8,1,0,1,3,0,0,0,0,10,29,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1140,"            Arrays.fill(d[r], 1);
",0,0,1,2,4,0,4,0,0,8,21,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1142,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1152,"        final double[][] d = new double[n][m];
",2,0,1,4,8,1,0,0,0,7,38,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1153,"        for (int r = 0; r < n; r++) {
",8,1,0,1,3,0,0,0,0,10,29,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1154,"            if (r < m) {
",4,1,0,1,3,0,0,0,0,5,12,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1155,"                d[r][r] = 1;
",0,0,1,2,4,0,0,0,0,7,12,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1158,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1167,"        return new Array2DRowRealMatrix(n, m);
",4,0,0,1,2,1,0,2,0,6,38,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1177,"        final int rd = mat.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,37,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1178,"        final int cd = mat.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,40,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1179,"        final double[][] d = new double[n * rd][m * cd];
",10,2,0,4,8,1,0,0,0,13,48,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1180,"        for (int r = 0; r < n * rd; r++) {
",10,2,0,1,3,0,0,0,0,13,34,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1181,"            for (int c = 0; c < m * cd; c++) {
",10,2,0,1,3,0,0,0,0,13,34,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1182,"                d[r][c] = mat.getEntry(r % rd, c % cd);
",8,2,1,3,6,0,4,0,0,21,39,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1185,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1195,"        final int size = (int) ((end - start) / step + 1);
",8,3,0,3,6,1,0,0,0,12,50,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1196,"        final double[][] d = new double[size][1];
",2,0,1,4,8,1,0,0,0,5,41,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1197,"        double value = start;
",4,0,0,0,0,0,0,0,0,4,21,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1198,"        for (int r = 0; r < size; r++) {
",8,1,0,1,3,0,0,0,0,10,32,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1199,"            d[r][0] = value;
",2,0,1,2,4,0,0,0,0,7,16,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1200,"            value += step;
",4,0,0,0,0,0,0,0,0,5,14,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1202,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1210,"        double max = -Double.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,31,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1211,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1212,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1213,"                double e = m.getEntry(r, c);
",2,0,0,1,2,0,8,0,0,10,28,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1214,"                if (max < e) {
",4,1,0,1,3,0,0,0,0,5,14,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1215,"                    max = e;
",4,0,0,0,0,0,0,0,0,5,8,10,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1219,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1227,"        double min = Double.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,30,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1228,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1229,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1230,"                double e = m.getEntry(r, c);
",2,0,0,1,2,0,8,0,0,10,28,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1231,"                if (min > e) {
",4,1,0,1,3,0,0,0,0,5,14,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1232,"                    min = e;
",4,0,0,0,0,0,0,0,0,5,8,10,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1236,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1244,"        double max = -Double.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,31,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1245,"        for (int r = 0; r < m.length; r++) {
",10,1,0,1,3,0,0,0,0,12,36,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1246,"            if (max < m[r]) {
",2,1,1,2,5,0,0,0,0,7,17,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1247,"                max = m[r];
",2,0,1,1,2,0,0,0,0,7,11,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1250,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1258,"        double min = Double.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,30,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1259,"        for (int r = 0; r < m.length; r++) {
",10,1,0,1,3,0,0,0,0,12,36,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1260,"            if (min > m[r]) {
",2,1,1,2,5,0,0,0,0,7,17,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1261,"                min = m[r];
",2,0,1,1,2,0,0,0,0,7,11,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1264,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1309,"        final double[][] d = new double[size][popSize];
",2,0,1,4,8,1,0,0,0,7,47,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1310,"        for (int r = 0; r < size; r++) {
",8,1,0,1,3,0,0,0,0,10,32,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1311,"            for (int c = 0; c < popSize; c++) {
",8,1,0,1,3,0,0,0,0,10,35,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1312,"                d[r][c] = random.nextGaussian();
",0,0,1,3,6,0,4,0,0,11,32,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1315,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,79,"public class CMAESOptimizer
",2,0,0,0,0,1,0,0,0,3,27,1,1,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,762,"         final int[] output = new int[len];
",2,0,1,2,4,1,0,0,0,5,34,4,1,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,763,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,1,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,764,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,79,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,81,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,82,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,83,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,84,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,85,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,86,"                out.setEntry(row, col, getEntry(row, col) + m.getEntry(row, col));
",0,1,0,3,6,0,22,0,0,23,66,9,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,90,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,96,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,98,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,99,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,100,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,101,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,102,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,103,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));
",0,1,0,3,6,0,22,0,0,23,66,9,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,107,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,112,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,113,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,114,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,115,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,116,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,117,"                out.setEntry(row, col, getEntry(row, col) + d);
",2,1,0,2,4,0,14,0,0,17,47,9,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,121,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,280,"        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,63,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,466,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,467,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,468,"        final RealMatrix out = createMatrix(nRows, 1);
",2,0,0,1,2,1,4,2,0,9,46,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,469,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,470,"            out.setEntry(i, 0, getEntry(i, column));
",0,0,0,2,4,0,12,0,0,12,40,7,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,473,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,559,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,560,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,561,"        final double[] out = new double[nRows];
",2,0,1,2,4,1,0,0,0,5,39,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,562,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,563,"            out[i] = getEntry(i, column);
",0,0,1,2,4,0,6,0,0,11,29,6,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,566,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,280,"        return walkInOptimizedOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,63,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,289,"                sum = 0;
",2,0,0,0,0,0,0,0,0,3,8,10,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,290,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,294,"                sum += value * value;
",6,1,0,0,0,0,0,0,0,8,21,10,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,295,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,299,"                return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,11,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,338,"        if (columnData == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,341,"        final int nRows = columnData.length;
",6,0,0,0,0,1,0,0,0,7,36,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,342,"        final RealMatrix m = createRealMatrix(nRows, 1);
",2,0,0,1,2,1,4,2,0,9,48,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,343,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,344,"            m.setEntry(i, 0, columnData[i]);
",0,0,1,2,4,0,6,0,0,10,32,7,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,346,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,571,"        if ((left.getRowDimension()    != right.getRowDimension()) ||
",0,2,0,3,7,0,8,0,0,10,61,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,576,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,588,"        if ((left.getRowDimension()    != right.getRowDimension()) ||
",0,2,0,3,7,0,8,0,0,10,61,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,593,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1109,"            final double[][] d = new double[m.getRowDimension()][1];
",2,0,0,5,10,1,4,0,0,7,56,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1110,"            for (int i = 0; i < m.getColumnDimension(); i++) {
",6,1,0,2,5,0,4,0,0,12,50,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1111,"                d[i][0] = m.getEntry(i, i);
",0,0,1,3,6,0,8,0,0,13,27,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1113,"            return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,7,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,579,"            realEigenvalues[i] = main[i];
",0,0,1,2,4,0,0,0,0,9,29,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,580,"            e[i] = secondary[i];
",0,0,1,2,4,0,0,0,0,9,20,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,612,"                    double delta = FastMath.abs(realEigenvalues[m]) +
",2,1,1,2,4,0,4,0,0,11,49,11,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,614,"                    if (FastMath.abs(e[m]) + delta == delta) {
",4,2,1,3,7,0,4,0,0,14,42,10,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,615,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,619,"                    if (its == maxIter) {
",4,1,0,1,3,0,0,0,0,5,21,10,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,623,"                    its++;
",2,0,0,0,0,0,0,0,0,3,6,10,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,624,"                    double q = (realEigenvalues[j + 1] - realEigenvalues[j]) / (2 * e[j]);
",4,4,1,5,10,0,0,0,0,18,70,11,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,625,"                    double t = FastMath.sqrt(1 + q * q);
",6,2,0,1,2,0,4,0,0,12,36,11,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,626,"                    if (q < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,10,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,627,"                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q - t);
",6,4,1,4,8,0,0,0,0,23,61,12,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,629,"                        q = realEigenvalues[m] - realEigenvalues[j] + e[j] / (q + t);
",6,4,1,4,8,0,0,0,0,23,61,12,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,631,"                    double u = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,11,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,632,"                    double s = 1.0;
",2,0,0,0,0,0,0,0,0,2,15,11,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,633,"                    double c = 1.0;
",2,0,0,0,0,0,0,0,0,2,15,11,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,635,"                    for (i = m - 1; i >= j; i--) {
",10,2,0,1,3,0,0,0,0,14,30,10,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,636,"                        double p = s * e[i];
",4,1,1,1,2,0,0,0,0,9,20,13,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,637,"                        double h = c * e[i];
",4,1,1,1,2,0,0,0,0,9,20,13,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,638,"                        if (FastMath.abs(p) >= FastMath.abs(q)) {
",0,1,0,3,7,0,12,0,0,13,41,12,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,639,"                            c = q / p;
",6,1,0,0,0,0,0,0,0,8,10,14,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,640,"                            t = FastMath.sqrt(c * c + 1.0);
",6,2,0,1,2,0,4,0,0,13,31,14,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,641,"                            e[i + 1] = p * t;
",6,2,1,1,2,0,0,0,0,11,17,14,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,642,"                            s = 1.0 / t;
",4,1,0,0,0,0,0,0,0,6,12,14,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,643,"                            c = c * s;
",6,1,0,0,0,0,0,0,0,8,10,14,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,645,"                            s = p / q;
",6,1,0,0,0,0,0,0,0,8,10,14,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,646,"                            t = FastMath.sqrt(s * s + 1.0);
",6,2,0,1,2,0,4,0,0,13,31,14,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,647,"                            e[i + 1] = q * t;
",6,2,1,1,2,0,0,0,0,11,17,14,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,648,"                            c = 1.0 / t;
",4,1,0,0,0,0,0,0,0,6,12,14,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,649,"                            s = s * c;
",6,1,0,0,0,0,0,0,0,8,10,14,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,651,"                        if (e[i + 1] == 0.0) {
",2,2,1,2,5,0,0,0,0,6,22,12,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,656,"                        q = realEigenvalues[i + 1] - u;
",6,2,1,1,2,0,0,0,0,11,31,12,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,657,"                        t = (realEigenvalues[i] - q) * s + 2.0 * c * h;
",10,4,1,2,4,0,0,0,0,19,47,12,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,658,"                        u = s * t;
",6,1,0,0,0,0,0,0,0,8,10,12,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,659,"                        realEigenvalues[i + 1] = q + u;
",6,2,1,1,2,0,0,0,0,11,31,12,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,660,"                        q = c * t - h;
",8,2,0,0,0,0,0,0,0,11,14,12,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,661,"                        for (int ia = 0; ia < n; ia++) {
",8,1,0,1,3,0,0,0,0,10,32,12,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,662,"                            p = z[ia][i + 1];
",4,1,1,2,4,0,0,0,0,10,17,14,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,663,"                            z[ia][i + 1] = s * z[ia][i] + c * p;
",8,4,1,4,8,0,0,0,0,23,36,14,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,664,"                            z[ia][i] = c * z[ia][i] - s * p;
",6,3,1,4,8,0,0,0,0,22,32,14,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,667,"                    if (t == 0.0 && i >= j) {
",6,3,0,1,3,0,0,0,0,9,25,10,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,670,"                    realEigenvalues[j] -= u;
",2,0,1,1,2,0,0,0,0,7,24,10,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,671,"                    e[j] = q;
",2,0,1,1,2,0,0,0,0,7,9,10,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,672,"                    e[m] = 0.0;
",0,0,1,1,2,0,0,0,0,5,11,10,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,682,"                if (realEigenvalues[j] > p) {
",2,1,1,2,5,0,0,0,0,7,29,8,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,683,"                    k = j;
",4,0,0,0,0,0,0,0,0,5,6,10,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,684,"                    p = realEigenvalues[j];
",2,0,1,1,2,0,0,0,0,7,23,10,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,688,"                realEigenvalues[k] = realEigenvalues[i];
",0,0,1,2,4,0,0,0,0,9,40,8,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,689,"                realEigenvalues[i] = p;
",2,0,1,1,2,0,0,0,0,7,23,8,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,690,"                for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,8,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,691,"                    p = z[j][i];
",2,0,1,2,4,0,0,0,0,9,12,10,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,692,"                    z[j][i] = z[j][k];
",0,0,1,4,8,0,0,0,0,13,18,10,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,693,"                    z[j][k] = p;
",2,0,1,2,4,0,0,0,0,9,12,10,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,104,"                final double[] hK = householderVectors[k - 1];
",4,1,1,2,4,1,0,0,0,8,46,8,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,105,"                qta[k][k] = 1;
",0,0,1,2,4,0,0,0,0,7,14,8,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,106,"                if (hK[k] != 0.0) {
",0,1,1,2,5,0,0,0,0,5,19,8,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,107,"                    final double inv = 1.0 / (secondary[k - 1] * hK[k]);
",4,3,1,3,6,1,0,0,0,14,52,10,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,108,"                    double beta = 1.0 / secondary[k - 1];
",4,2,1,1,2,0,0,0,0,8,37,11,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,109,"                    qta[k][k] = 1 + beta * hK[k];
",2,2,1,3,6,0,0,0,0,15,29,10,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,110,"                    for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,10,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,111,"                        qta[k][i] = beta * hK[i];
",2,1,1,3,6,0,0,0,0,14,25,12,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,113,"                    for (int j = k + 1; j < m; ++j) {
",10,2,0,1,3,0,0,0,0,13,33,10,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,114,"                        beta = 0;
",2,0,0,0,0,0,0,0,0,3,9,12,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,115,"                        for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,12,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,116,"                            beta += qta[j][i] * hK[i];
",2,1,1,3,6,0,0,0,0,14,26,14,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,118,"                        beta *= inv;
",4,0,0,0,0,0,0,0,0,5,12,12,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,119,"                        qta[j][k] = beta * hK[k];
",2,1,1,3,6,0,0,0,0,14,25,12,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,120,"                        for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,12,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,121,"                            qta[j][i] += beta * hK[i];
",2,1,1,3,6,0,0,0,0,14,26,14,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,198,"            final double[] hK = householderVectors[k];
",2,0,1,2,4,1,0,0,0,7,42,6,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,199,"            main[k] = hK[k];
",0,0,1,2,4,0,0,0,0,9,16,6,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,200,"            double xNormSqr = 0;
",2,0,0,0,0,0,0,0,0,2,20,7,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,201,"            for (int j = k + 1; j < m; ++j) {
",10,2,0,1,3,0,0,0,0,13,33,6,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,202,"                final double c = hK[j];
",2,0,1,1,2,1,0,0,0,7,23,8,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,203,"                xNormSqr += c * c;
",6,1,0,0,0,0,0,0,0,8,18,8,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,205,"            final double a = (hK[k + 1] > 0) ? -FastMath.sqrt(xNormSqr) : FastMath.sqrt(xNormSqr);
",4,2,1,4,8,1,12,0,0,22,86,6,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,206,"            secondary[k] = a;
",2,0,1,1,2,0,0,0,0,7,17,6,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,207,"            if (a != 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,6,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,210,"                hK[k + 1] -= a;
",4,1,1,1,2,0,0,0,0,8,15,8,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,211,"                final double beta = -1 / (a * hK[k + 1]);
",6,3,1,2,4,1,0,0,0,13,41,8,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,217,"                Arrays.fill(z, k + 1, m, 0);
",2,1,0,1,2,0,8,0,0,11,28,9,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,218,"                for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,8,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,219,"                    final double[] hI = householderVectors[i];
",2,0,1,2,4,1,0,0,0,7,42,10,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,220,"                    final double hKI = hK[i];
",2,0,1,1,2,1,0,0,0,7,25,10,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,221,"                    double zI = hI[i] * hKI;
",4,1,1,1,2,0,0,0,0,9,24,11,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,222,"                    for (int j = i + 1; j < m; ++j) {
",10,2,0,1,3,0,0,0,0,13,33,10,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,223,"                        final double hIJ = hI[j];
",2,0,1,1,2,1,0,0,0,7,25,12,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,224,"                        zI   += hIJ * hK[j];
",4,1,1,1,2,0,0,0,0,10,20,12,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,225,"                        z[j] += hIJ * hKI;
",4,1,1,1,2,0,0,0,0,10,18,12,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,227,"                    z[i] = beta * (z[i] + zI);
",4,2,1,3,6,0,0,0,0,15,26,10,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,231,"                double gamma = 0;
",2,0,0,0,0,0,0,0,0,2,17,9,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,232,"                for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,8,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,233,"                    gamma += z[i] * hK[i];
",2,1,1,2,4,0,0,0,0,12,22,10,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,235,"                gamma *= beta / 2;
",4,1,0,0,0,0,0,0,0,6,18,8,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,238,"                for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,8,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,239,"                    z[i] -= gamma * hK[i];
",2,1,1,2,4,0,0,0,0,12,22,10,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,244,"                for (int i = k + 1; i < m; ++i) {
",10,2,0,1,3,0,0,0,0,13,33,8,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,245,"                    final double[] hI = householderVectors[i];
",2,0,1,2,4,1,0,0,0,7,42,10,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,246,"                    for (int j = i; j < m; ++j) {
",10,1,0,1,3,0,0,0,0,12,29,10,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,247,"                        hI[j] -= hK[i] * z[j] + z[i] * hK[j];
",0,3,1,5,10,0,0,0,0,24,37,12,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,400,"                final double mij = matrix.getEntry(i, j);
",2,0,0,1,2,1,8,0,0,11,41,8,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,401,"                final double mji = matrix.getEntry(j, i);
",2,0,0,1,2,1,8,0,0,11,41,8,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,402,"                if (FastMath.abs(mij - mji) >
",4,2,0,1,3,0,4,0,0,10,29,8,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,104,"        if (Double.isNaN(nextGaussian)) {
",0,0,0,2,5,0,6,0,0,6,33,5,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,106,"            final double x = nextDouble();
",2,0,0,1,2,1,2,0,0,5,30,6,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,107,"            final double y = nextDouble();
",2,0,0,1,2,1,2,0,0,5,30,6,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,108,"            final double alpha = 2 * FastMath.PI * x;
",8,1,0,0,0,1,0,0,0,10,41,6,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,109,"            final double r      = FastMath.sqrt(-2 * FastMath.log(y));
",2,1,0,2,4,1,10,0,0,15,58,6,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,110,"            random       = r * FastMath.cos(alpha);
",4,1,0,1,2,0,6,0,0,12,39,6,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,111,"            nextGaussian = r * FastMath.sin(alpha);
",4,1,0,1,2,0,6,0,0,12,39,6,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,112,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,114,"            random = nextGaussian;
",4,0,0,0,0,0,0,0,0,5,22,6,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,115,"            nextGaussian = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,26,6,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,118,"        return random;
",2,0,0,0,0,1,0,0,0,2,14,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,560,"            for (int i = 0; i < init.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,561,"                if (inputSigma[i] > uB[i] - lB[i]) {
",0,2,1,4,9,0,0,0,0,14,36,8,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1184,"                double xa = x - 1.0;
",4,1,0,0,0,0,0,0,0,5,20,9,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1185,"                double xb = xa - x + 1.0;
",6,2,0,0,0,0,0,0,0,8,25,9,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1186,"                double tmp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,9,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1187,"                double aa = xa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,27,9,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1188,"                double ab = xa - aa;
",6,1,0,0,0,0,0,0,0,7,20,9,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1189,"                xa = aa;
",4,0,0,0,0,0,0,0,0,5,8,8,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1190,"                xb = ab;
",4,0,0,0,0,0,0,0,0,5,8,8,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1192,"                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];
",6,1,1,2,4,1,0,0,0,10,69,8,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1193,"                double ya = lnCoef_last[0];
",2,0,1,1,2,0,0,0,0,4,27,9,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1194,"                double yb = lnCoef_last[1];
",2,0,1,1,2,0,0,0,0,4,27,9,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1196,"                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,53,8,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1198,"                    aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,10,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1199,"                    ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,10,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1201,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1202,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1203,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1206,"                    final double[] lnCoef_i = LN_QUICK_COEF[i];
",2,0,1,2,4,1,0,0,0,7,43,10,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1207,"                    aa = ya + lnCoef_i[0];
",4,1,1,1,2,0,0,0,0,8,22,10,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1208,"                    ab = yb + lnCoef_i[1];
",4,1,1,1,2,0,0,0,0,8,22,10,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1210,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1211,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1212,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1216,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1217,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1219,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1220,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1221,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1223,"                return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,8,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,90,"        final long high = ((long) next(26)) << 26;
",2,1,0,3,6,1,2,0,0,6,42,4,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,91,"        final int  low  = next(26);
",2,0,0,1,2,1,2,0,0,5,27,4,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,92,"        return (high | low) * 0x1.0p-52d;
",4,2,0,1,2,1,0,0,0,6,33,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,534,"        for (OptimizationData data : optData) {
",4,0,0,1,3,0,0,2,0,6,39,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,535,"            if (data instanceof Sigma) {
",2,0,0,1,3,0,0,2,0,4,28,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,536,"                inputSigma = ((Sigma) data).getSigma();
",4,0,0,3,6,0,2,2,0,9,39,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,537,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,539,"            if (data instanceof PopulationSize) {
",2,0,0,1,3,0,0,2,0,4,37,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,540,"                lambda = ((PopulationSize) data).getPopulationSize();
",4,0,0,3,6,0,2,2,0,9,53,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,541,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,545,"        checkParameters();
",0,0,0,1,2,0,2,0,0,2,18,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,552,"        final double[] init = getStartPoint();
",2,0,0,2,4,1,2,0,0,5,38,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,553,"        final double[] lB = getLowerBound();
",2,0,0,2,4,1,2,0,0,5,36,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,554,"        final double[] uB = getUpperBound();
",2,0,0,2,4,1,2,0,0,5,36,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,556,"        if (inputSigma != null) {
",2,1,0,1,3,0,0,0,0,3,25,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,557,"            if (inputSigma.length != init.length) {
",8,1,0,1,3,0,0,0,0,9,39,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,304,"            return sigma.clone();
",0,0,0,1,2,1,4,0,0,4,21,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,338,"            return lambda;
",2,0,0,0,0,1,0,0,0,2,14,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,398,"                        arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))
",2,0,0,2,5,0,14,0,0,17,52,13,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,428,"                updateCovariance(hsig, bestArx, arz, arindex, xold);
",0,0,0,1,2,0,12,0,0,12,52,10,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,703,"        double negccov = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,704,"        if (ccov1 + ccovmu > 0) {
",4,2,0,1,3,0,0,0,0,6,25,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,705,"            final RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))
",2,0,0,2,4,1,10,2,0,15,62,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,707,"            final RealMatrix roneu = pc.multiply(pc.transpose())
",2,0,0,2,4,1,8,2,0,13,52,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,710,"            double oldFac = hsig ? 0 : ccov1 * cc * (2 - cc);
",10,2,0,1,2,0,0,0,0,12,49,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,711,"            oldFac += 1 - ccov1 - ccovmu;
",6,1,0,0,0,0,0,0,0,8,29,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,712,"            if (isActiveCMA) {
",2,0,0,1,3,0,0,0,0,2,18,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,714,"                negccov = (1 - ccovmu) * 0.25 * mueff /
",6,3,0,1,2,0,0,0,0,10,39,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,718,"                final double negminresidualvariance = 0.66;
",2,0,0,0,0,1,0,0,0,3,43,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,720,"                final double negalphaold = 0.5;
",2,0,0,0,0,1,0,0,0,3,31,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,722,"                final int[] arReverseIndex = reverse(arindex);
",2,0,0,2,4,1,4,0,0,7,46,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,723,"                RealMatrix arzneg = selectColumns(arz, MathArrays.copyOf(arReverseIndex, mu));
",2,0,0,2,4,0,12,2,0,16,78,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,724,"                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));
",2,0,0,3,6,0,8,2,0,12,51,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,725,"                final int[] idxnorms = sortedIndices(arnorms.getRow(0));
",2,0,0,3,6,1,6,0,0,9,56,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,726,"                final RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);
",2,0,0,1,2,1,6,2,0,11,66,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,727,"                final int[] idxReverse = reverse(idxnorms);
",2,0,0,2,4,1,4,0,0,7,43,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,728,"                final RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);
",2,0,0,1,2,1,6,2,0,11,69,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,729,"                arnorms = divide(arnormsReverse, arnormsSorted);
",2,0,0,1,2,0,6,0,0,9,48,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,730,"                final int[] idxInv = inverse(idxnorms);
",2,0,0,2,4,1,4,0,0,7,39,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,731,"                final RealMatrix arnormsInv = selectColumns(arnorms, idxInv);
",2,0,0,1,2,1,6,2,0,11,61,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,733,"                final double negcovMax = (1 - negminresidualvariance) /
",4,2,0,1,2,1,0,0,0,7,55,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,735,"                if (negccov > negcovMax) {
",4,1,0,1,3,0,0,0,0,5,26,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,738,"                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));
",2,0,0,2,4,0,10,0,0,13,57,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,739,"                final RealMatrix artmp = BD.multiply(arzneg);
",2,0,0,1,2,1,6,2,0,11,45,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,740,"                final RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(artmp.transpose());
",2,0,0,4,8,1,14,2,0,19,82,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,741,"                oldFac += negalphaold * negccov;
",6,1,0,0,0,0,0,0,0,8,32,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,742,"                C = C.scalarMultiply(oldFac)
",2,0,0,1,2,0,6,0,0,9,28,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,749,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,758,"        updateBD(negccov);
",0,0,0,1,2,0,4,0,0,4,18,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,759,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,767,"        if (ccov1 + ccovmu + negccov > 0 &&
",6,3,0,0,1,0,0,0,0,9,35,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,770,"            C = triu(C, 0).add(triu(C, 1).transpose());
",2,0,0,4,8,0,12,0,0,15,43,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,772,"            final EigenDecomposition eig = new EigenDecomposition(C);
",4,0,0,1,2,1,0,4,0,9,57,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,773,"            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors
",2,0,0,1,2,0,4,0,0,7,66,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,774,"            D = eig.getD();
",2,0,0,1,2,0,4,0,0,7,15,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,775,"            diagD = diag(D);
",2,0,0,1,2,0,4,0,0,7,16,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,776,"            if (min(diagD) <= 0) {
",0,1,0,2,5,0,4,0,0,5,22,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,786,"            if (max(diagD) > 1e14 * min(diagD)) {
",0,2,0,3,7,0,8,0,0,10,37,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,791,"            diagC = diag(C);
",2,0,0,1,2,0,4,0,0,7,16,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,792,"            diagD = sqrt(diagD); // D contains standard deviations now
",2,0,0,1,2,0,4,0,0,7,58,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,793,"            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)
",2,0,0,4,8,0,12,0,0,15,65,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,795,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1041,"        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
",2,0,0,6,12,1,8,0,0,11,77,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1042,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1043,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1044,"                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);
",0,1,1,4,8,0,16,0,0,24,46,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1047,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1071,"        final double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
",2,0,0,6,12,1,8,0,0,11,77,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1072,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1073,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1074,"                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;
",6,2,1,3,6,0,8,0,0,23,44,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1077,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1085,"        final double[][] d = new double[1][m.getColumnDimension()];
",2,0,0,5,10,1,4,0,0,7,59,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1086,"        for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1087,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1088,"            for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1089,"                sum += m.getEntry(r, c);
",2,0,0,1,2,0,8,0,0,11,24,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1091,"            d[0][c] = sum;
",2,0,1,2,4,0,0,0,0,7,14,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1093,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1272,"        final int[] inverse = new int[indices.length];
",6,0,0,2,4,1,0,0,0,7,46,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1273,"        for (int i = 0; i < indices.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1274,"            inverse[indices[i]] = i;
",2,0,1,2,4,0,0,0,0,9,24,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1276,"        return inverse;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1284,"        final int[] reverse = new int[indices.length];
",6,0,0,2,4,1,0,0,0,7,46,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1285,"        for (int i = 0; i < indices.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1286,"            reverse[i] = indices[indices.length - i - 1];
",6,1,1,2,4,0,0,0,0,14,45,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1288,"        return reverse;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,521,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,522,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,523,"        if (vector.getDimension() != nRows) {
",2,1,0,2,5,0,4,0,0,7,37,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,527,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,528,"            setEntry(i, column, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,40,7,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,530,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,118,"        throws MathArithmeticException {
",2,0,0,0,1,0,0,0,0,2,32,2,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,81,"    private byte maxIter = 30;
",2,0,0,0,0,1,0,0,0,3,26,2,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,119,"        final double symTol = 10 * matrix.getRowDimension() * matrix.getColumnDimension() * Precision.EPSILON;
",6,1,0,2,4,1,8,0,0,16,102,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,120,"        isSymmetric = MatrixUtils.isSymmetric(matrix, symTol);
",2,0,0,1,2,0,8,0,0,11,54,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,121,"        if (isSymmetric) {
",2,0,0,1,3,0,0,0,0,2,18,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,122,"            transformToTridiagonal(matrix);
",0,0,0,1,2,0,4,0,0,4,31,7,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,123,"            findEigenVectors(transformer.getQ().getData());
",0,0,0,3,6,0,8,0,0,8,47,7,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,128,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,199,"        if (cachedV == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,200,"            final int m = eigenvectors.length;
",6,0,0,0,0,1,0,0,0,7,34,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,201,"            cachedV = MatrixUtils.createRealMatrix(m, m);
",2,0,0,1,2,0,8,0,0,11,45,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,202,"            for (int k = 0; k < m; ++k) {
",8,1,0,1,3,0,0,0,0,10,29,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,203,"                cachedV.setColumnVector(k, eigenvectors[k]);
",0,0,1,2,4,0,6,0,0,10,44,9,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,207,"        return cachedV;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,223,"        if (cachedD == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,225,"            cachedD = MatrixUtils.createRealDiagonalMatrix(realEigenvalues);
",2,0,0,1,2,0,6,0,0,9,64,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,227,"            for (int i = 0; i < imagEigenvalues.length; i++) {
",10,1,0,1,3,0,0,0,0,12,50,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,228,"                if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) > 0) {
",0,1,1,3,7,0,6,0,0,11,64,8,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,230,"                } else if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0) {
",0,1,1,3,8,0,6,0,0,11,71,9,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,235,"        return cachedD;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,561,"        transformer = new TriDiagonalTransformer(matrix);
",4,0,0,1,2,0,0,2,0,7,49,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,562,"        main = transformer.getMainDiagonalRef();
",2,0,0,1,2,0,4,0,0,7,40,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,563,"        secondary = transformer.getSecondaryDiagonalRef();
",2,0,0,1,2,0,4,0,0,7,50,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,564,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,573,"        final double[][]z = householderMatrix.clone();
",2,0,0,3,6,1,4,0,0,7,46,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,574,"        final int n = main.length;
",6,0,0,0,0,1,0,0,0,7,26,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,575,"        realEigenvalues = new double[n];
",2,0,1,1,2,0,0,0,0,5,32,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,576,"        imagEigenvalues = new double[n];
",2,0,1,1,2,0,0,0,0,5,32,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,577,"        final double[] e = new double[n];
",2,0,1,2,4,1,0,0,0,5,33,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,578,"        for (int i = 0; i < n - 1; i++) {
",8,2,0,1,3,0,0,0,0,11,33,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,582,"        realEigenvalues[n - 1] = main[n - 1];
",4,2,1,2,4,0,0,0,0,11,37,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,583,"        e[n - 1] = 0;
",2,1,1,1,2,0,0,0,0,6,13,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,586,"        double maxAbsoluteValue = 0;
",2,0,0,0,0,0,0,0,0,2,28,5,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,587,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,588,"            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {
",2,1,1,3,7,0,4,0,0,11,58,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,589,"                maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);
",2,0,1,2,4,0,4,0,0,11,52,8,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,591,"            if (FastMath.abs(e[i]) > maxAbsoluteValue) {
",2,1,1,3,7,0,4,0,0,11,44,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,596,"        if (maxAbsoluteValue != 0) {
",2,1,0,1,3,0,0,0,0,3,28,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,597,"            for (int i=0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,27,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,598,"                if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {
",6,2,1,3,7,0,4,0,0,16,79,8,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,601,"                if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {
",6,2,1,3,7,0,4,0,0,16,65,8,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,602,"                    e[i]=0;
",0,0,1,1,2,0,0,0,0,5,7,10,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,607,"        for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,608,"            int its = 0;
",2,0,0,0,0,0,0,0,0,2,12,7,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,611,"                for (m = j; m < n - 1; m++) {
",10,2,0,1,3,0,0,0,0,14,29,8,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,618,"                if (m != j) {
",4,1,0,1,3,0,0,0,0,5,13,8,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,674,"            } while (m != j);
",4,1,0,1,3,0,0,0,0,5,17,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,678,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,679,"            int k = i;
",4,0,0,0,0,0,0,0,0,4,10,7,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,680,"            double p = realEigenvalues[i];
",2,0,1,1,2,0,0,0,0,6,30,7,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,681,"            for (int j = i + 1; j < n; j++) {
",10,2,0,1,3,0,0,0,0,13,33,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,687,"            if (k != i) {
",4,1,0,1,3,0,0,0,0,5,13,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,699,"        maxAbsoluteValue = 0;
",2,0,0,0,0,0,0,0,0,3,21,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,700,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,701,"            if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {
",2,1,1,3,7,0,4,0,0,11,58,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,702,"                maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);
",2,0,1,2,4,0,4,0,0,11,50,8,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,706,"        if (maxAbsoluteValue != 0.0) {
",2,1,0,1,3,0,0,0,0,3,30,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,707,"            for (int i=0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,27,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,708,"                if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {
",6,2,1,3,7,0,4,0,0,16,78,8,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,713,"        eigenvectors = new ArrayRealVector[n];
",2,0,1,1,2,0,0,2,0,7,38,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,714,"        final double[] tmp = new double[n];
",2,0,1,2,4,1,0,0,0,5,35,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,715,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,716,"            for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,717,"                tmp[j] = z[j][i];
",0,0,1,3,6,0,0,0,0,11,17,8,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,719,"            eigenvectors[i] = new ArrayRealVector(tmp);
",2,0,1,2,4,0,0,2,0,9,43,6,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,721,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,62,"    public TriDiagonalTransformer(RealMatrix matrix) {
",4,0,0,1,3,1,0,2,0,7,50,2,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,63,"        if (!matrix.isSquare()) {
",0,0,0,2,5,0,4,0,0,5,25,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,68,"        final int m = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,39,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,69,"        householderVectors = matrix.getData();
",2,0,0,1,2,0,4,0,0,7,38,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,70,"        main      = new double[m];
",2,0,1,1,2,0,0,0,0,5,26,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,71,"        secondary = new double[m - 1];
",4,1,0,1,2,0,0,0,0,6,30,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,72,"        cachedQ   = null;
",2,0,0,0,0,0,0,0,0,3,17,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,73,"        cachedQt  = null;
",2,0,0,0,0,0,0,0,0,3,17,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,74,"        cachedT   = null;
",2,0,0,0,0,0,0,0,0,3,17,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,77,"        transform();
",0,0,0,1,2,0,2,0,0,2,12,5,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,86,"        if (cachedQ == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,87,"            cachedQ = getQT().transpose();
",2,0,0,2,4,0,4,0,0,7,30,6,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,89,"        return cachedQ;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,98,"        if (cachedQt == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,99,"            final int m = householderVectors.length;
",6,0,0,0,0,1,0,0,0,7,40,6,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,100,"            double[][] qta = new double[m][m];
",2,0,1,4,8,0,0,0,0,6,34,7,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,103,"            for (int k = m - 1; k >= 1; --k) {
",8,2,0,1,3,0,0,0,0,11,34,6,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,126,"            qta[0][0] = 1;
",0,0,1,2,4,0,0,0,0,3,14,6,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,127,"            cachedQt = MatrixUtils.createRealMatrix(qta);
",2,0,0,1,2,0,6,0,0,9,45,6,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,131,"        return cachedQt;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,175,"        return main;
",2,0,0,0,0,1,0,0,0,2,12,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,185,"        return secondary;
",2,0,0,0,0,1,0,0,0,2,17,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,193,"        final int m = householderVectors.length;
",6,0,0,0,0,1,0,0,0,7,40,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,194,"        final double[] z = new double[m];
",2,0,1,2,4,1,0,0,0,5,33,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,195,"        for (int k = 0; k < m - 1; k++) {
",8,2,0,1,3,0,0,0,0,11,33,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,252,"        main[m - 1] = householderVectors[m - 1][m - 1];
",6,3,1,3,6,0,0,0,0,14,47,4,1,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,253,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,215,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);
",10,0,0,1,2,1,2,2,0,15,72,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,216,"        for (int i = 0; i < diagonal.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,43,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,217,"            m.setEntry(i, i, diagonal[i]);
",0,0,1,2,4,0,8,0,0,12,30,7,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,219,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,390,"        final int rows = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,42,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,391,"        if (rows != matrix.getColumnDimension()) {
",2,1,0,2,5,0,4,0,0,7,42,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,398,"        for (int i = 0; i < rows; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,399,"            for (int j = i + 1; j < rows; j++) {
",10,2,0,1,3,0,0,0,0,13,36,6,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,412,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,439,"        return isSymmetricInternal(matrix, eps, false);
",0,0,0,1,2,1,6,0,0,7,47,5,1,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,114,"        return count;
",2,0,0,0,0,1,0,0,0,2,13,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,363,"        return super.optimize(optData);
",4,0,0,1,2,1,0,0,0,4,31,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,530,"        super.parseOptimizationData(optData);
",4,0,0,1,2,0,0,0,0,4,37,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,297,"            sigma = s.clone();
",2,0,0,1,2,0,4,0,0,7,18,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,298,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,327,"            throws NotStrictlyPositiveException {
",2,0,0,0,1,0,0,0,0,2,37,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,328,"            if (size <= 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,331,"            lambda = size;
",4,0,0,0,0,0,0,0,0,5,14,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,332,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1179,"            if (x < 1.01 && x > 0.99 && hiPrec == null) {
",6,5,0,1,3,0,0,0,0,11,45,6,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,141,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,143,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,144,"        final int nCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,145,"        final int nSum  = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,146,"        final RealMatrix out = createMatrix(nRows, nCols);
",2,0,0,1,2,1,6,2,0,11,50,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,147,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,148,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,149,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,150,"                for (int i = 0; i < nSum; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,8,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,151,"                    sum += getEntry(row, i) * m.getEntry(i, col);
",2,1,0,2,4,0,14,0,0,18,45,10,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,153,"                out.setEntry(row, col, sum);
",0,0,0,1,2,0,10,0,0,10,28,9,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,157,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,598,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,599,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,600,"        final RealMatrix out = createMatrix(nCols, nRows);
",2,0,0,1,2,1,6,2,0,11,50,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,601,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,611,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,873,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,410,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,411,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,412,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,413,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,414,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,415,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,416,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,419,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,1,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,6,30,"public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {
",2,0,0,0,1,1,0,2,0,5,88,1,1,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,6,34,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,6,41,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,601,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,606,"                out.setEntry(column, row, value);
",0,0,0,1,2,0,10,0,0,10,33,11,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,607,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,81,"        return (rows * columns <= 4096) ?
",4,2,0,1,2,1,0,0,0,6,33,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,115,"        super.incrementEvaluationCount();
",2,0,0,1,2,0,0,0,0,2,33,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,116,"        return function.value(params);
",0,0,0,1,2,1,6,0,0,6,30,5,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,106,"    public MersenneTwister() {
",2,0,0,1,3,1,0,0,0,3,26,2,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,107,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,108,"        setSeed(System.currentTimeMillis() + System.identityHashCode(this));
",0,1,0,3,6,0,10,0,0,11,68,5,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,109,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };
",2,0,0,2,4,3,0,0,0,5,55,2,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,144,"        long longMT = seed;
",4,0,0,0,0,0,0,0,0,4,19,5,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,146,"        mt[0]= (int) longMT;
",2,0,1,2,4,0,0,0,0,5,20,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,147,"        for (mti = 1; mti < N; ++mti) {
",8,1,0,1,3,0,0,0,0,11,31,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,150,"            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;
",8,5,0,3,6,0,0,0,0,14,71,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,151,"            mt[mti]= (int) longMT;
",2,0,1,2,4,0,0,0,0,7,22,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,154,"        clear(); // Clear normal deviate cache
",0,0,0,1,2,0,2,0,0,2,38,5,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,167,"        if (seed == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,172,"        setSeed(19650218);
",0,0,0,1,2,0,2,0,0,2,18,5,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,173,"        int i = 1;
",2,0,0,0,0,0,0,0,0,2,10,5,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,174,"        int j = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {
",10,1,0,2,5,0,6,0,0,18,57,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,177,"            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
",2,3,1,5,10,0,0,0,0,13,73,7,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,178,"            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
",6,5,1,5,10,0,0,0,0,15,73,7,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,179,"            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear
",10,5,1,5,10,0,0,0,0,19,76,7,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,180,"            mt[i]   = (int) (l & 0xffffffffl);
",2,1,1,3,6,0,0,0,0,8,34,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,181,"            i++; j++;
",4,0,0,0,0,0,0,0,0,6,9,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,182,"            if (i >= N) {
",4,1,0,1,3,0,0,0,0,5,13,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,183,"                mt[0] = mt[N - 1];
",2,1,1,2,4,0,0,0,0,8,18,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,184,"                i = 1;
",2,0,0,0,0,0,0,0,0,3,6,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,186,"            if (j >= seed.length) {
",6,1,0,1,3,0,0,0,0,7,23,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,187,"                j = 0;
",2,0,0,0,0,0,0,0,0,3,6,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,191,"        for (int k = N - 1; k != 0; k--) {
",8,2,0,1,3,0,0,0,0,11,34,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,192,"            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
",2,3,1,5,10,0,0,0,0,13,73,7,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,193,"            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
",6,5,1,5,10,0,0,0,0,15,73,7,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,194,"            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear
",10,5,0,4,8,0,0,0,0,15,69,7,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,195,"            mt[i]   = (int) (l & 0xffffffffL);
",2,1,1,3,6,0,0,0,0,8,34,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,196,"            i++;
",2,0,0,0,0,0,0,0,0,3,4,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,197,"            if (i >= N) {
",4,1,0,1,3,0,0,0,0,5,13,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,198,"                mt[0] = mt[N - 1];
",2,1,1,2,4,0,0,0,0,8,18,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,199,"                i = 1;
",2,0,0,0,0,0,0,0,0,3,6,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,203,"        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array
",0,0,1,1,2,0,0,0,0,3,64,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,205,"        clear(); // Clear normal deviate cache
",0,0,0,1,2,0,2,0,0,2,38,5,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,207,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });
",4,2,0,7,14,0,2,0,0,8,71,5,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,217,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,231,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,119,"    private boolean isMinimize = true;
",2,0,0,0,0,1,0,0,0,4,34,2,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,200,"    private final List<Double> statisticsSigmaHistory = new ArrayList<Double>();
",2,0,0,1,2,2,0,8,0,12,76,2,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,202,"    private final List<RealMatrix> statisticsMeanHistory = new ArrayList<RealMatrix>();
",2,0,0,1,2,2,0,8,0,12,83,2,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,204,"    private final List<Double> statisticsFitnessHistory = new ArrayList<Double>();
",2,0,0,1,2,2,0,8,0,12,78,2,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,206,"    private final List<RealMatrix> statisticsDHistory = new ArrayList<RealMatrix>();
",2,0,0,1,2,2,0,8,0,12,80,2,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,232,"        this.maxIterations = maxIterations;
",4,0,0,0,0,0,0,0,0,5,35,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,233,"        this.stopFitness = stopFitness;
",4,0,0,0,0,0,0,0,0,5,31,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,234,"        this.isActiveCMA = isActiveCMA;
",4,0,0,0,0,0,0,0,0,5,31,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,235,"        this.diagonalOnly = diagonalOnly;
",4,0,0,0,0,0,0,0,0,5,33,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,236,"        this.checkFeasableCount = checkFeasableCount;
",4,0,0,0,0,0,0,0,0,5,45,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,237,"        this.random = random;
",4,0,0,0,0,0,0,0,0,5,21,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,238,"        this.generateStatistics = generateStatistics;
",4,0,0,0,0,0,0,0,0,5,45,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,239,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,290,"            throws NotPositiveException {
",2,0,0,0,1,0,0,0,0,2,29,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,291,"            for (int i = 0; i < s.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,292,"                if (s[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,15,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3489,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2274,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,1,0
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,70,"        final double[] p = getKey();
",2,0,0,2,4,1,2,0,0,5,28,4,1,0
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,71,"        return p == null ? null : p.clone();
",2,1,0,1,2,1,4,0,0,7,36,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2276,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,40,"    public BitsStreamGenerator() {
",2,0,0,1,3,1,0,0,0,3,30,2,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,41,"        nextGaussian = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,26,4,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,195,"        nextGaussian = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,26,4,1,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,196,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2334,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,91,"                function = ((ObjectiveFunction) data).getObjectiveFunction();
",4,0,0,3,6,0,2,2,0,9,61,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,92,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction,6,45,"        return function;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2293,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2296,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2297,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2301,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2306,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2307,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2317,"            final CodyWaite cw = new CodyWaite(xa);
",4,0,0,1,2,1,0,4,0,9,39,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2318,"            quadrant = cw.getK() & 3;
",2,1,0,1,2,0,4,0,0,8,25,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2319,"            xa = cw.getRemA();
",2,0,0,1,2,0,4,0,0,7,18,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2320,"            xb = cw.getRemB();
",2,0,0,1,2,0,4,0,0,7,18,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2326,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2328,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2330,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2332,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2280,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction,6,35,"    public ObjectiveFunction(MultivariateFunction f) {
",4,0,0,1,3,1,0,2,0,7,50,2,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction,6,36,"        function = f;
",4,0,0,0,0,0,0,0,0,5,13,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction,6,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3808,"        CodyWaite(double xa) {
",4,0,0,1,3,0,0,0,0,4,22,3,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3811,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3817,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,8,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3818,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3819,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3821,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3822,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,8,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3823,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3824,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3826,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3827,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3828,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3829,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3831,"                if (remA > 0) {
",2,1,0,1,3,0,0,0,0,3,15,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3832,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3841,"            this.finalK = k;
",4,0,0,0,0,0,0,0,0,5,16,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3842,"            this.finalRemA = remA;
",4,0,0,0,0,0,0,0,0,5,22,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3843,"            this.finalRemB = remB;
",4,0,0,0,0,0,0,0,0,5,22,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3844,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3850,"            return finalK;
",2,0,0,0,0,1,0,0,0,2,14,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3856,"            return finalRemA;
",2,0,0,0,0,1,0,0,0,2,17,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3862,"            return finalRemB;
",2,0,0,0,0,1,0,0,0,2,17,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1678,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1680,"        double p = 2.7553817452272217E-6;
",2,0,0,0,0,0,0,0,0,2,33,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1681,"        p = p * x2 + -1.9841269659586505E-4;
",6,2,0,0,0,0,0,0,0,10,36,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1682,"        p = p * x2 + 0.008333333333329196;
",6,2,0,0,0,0,0,0,0,9,34,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1683,"        p = p * x2 + -0.16666666666666666;
",6,2,0,0,0,0,0,0,0,10,34,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1686,"        p = p * x2 * x;
",8,1,0,0,0,0,0,0,0,10,15,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1688,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1698,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1700,"        double p = 2.479773539153719E-5;
",2,0,0,0,0,0,0,0,0,2,32,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1701,"        p = p * x2 + -0.0013888888689039883;
",6,2,0,0,0,0,0,0,0,10,36,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1702,"        p = p * x2 + 0.041666666666621166;
",6,2,0,0,0,0,0,0,0,9,34,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1703,"        p = p * x2 + -0.49999999999999994;
",6,2,0,0,0,0,0,0,0,10,34,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1704,"        p *= x2;
",4,0,0,0,0,0,0,0,0,5,8,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1706,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1717,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1718,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1721,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1722,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1723,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1724,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1727,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1728,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1729,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1730,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1733,"        final double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,1,0,0,0,8,43,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1734,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1735,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1736,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1762,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1763,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1765,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1766,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1767,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1768,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1769,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1771,"        t = costA * sinEpsA;
",6,1,0,0,0,0,0,0,0,8,20,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1772,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1773,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1774,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1775,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1777,"        b = b + sintA * cosEpsB + costA * sinEpsB;
",12,4,0,0,0,0,0,0,0,17,42,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1792,"        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;
",18,6,0,0,0,0,0,0,0,25,68,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1819,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1820,"            t = ((costA + costB) * (cosEpsA + cosEpsB) -
",10,5,0,2,5,0,0,0,0,16,44,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1822,"            c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1823,"            d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1824,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1825,"            b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1828,"        result = a + b;
",6,1,0,0,0,0,0,0,0,8,15,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1830,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1841,"        final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1842,"        final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1844,"        final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1845,"        double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1846,"        b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1848,"        return sinQ(a, b);
",0,0,0,1,2,1,6,0,0,6,18,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2226,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2227,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2229,"        double xb = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2232,"        xa = x;
",4,0,0,0,0,0,0,0,0,5,7,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2233,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2239,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2247,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2252,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2262,"            final CodyWaite cw = new CodyWaite(xa);
",4,0,0,1,2,1,0,4,0,9,39,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2263,"            quadrant = cw.getK() & 3;
",2,1,0,1,2,0,4,0,0,8,25,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2264,"            xa = cw.getRemA();
",2,0,0,1,2,0,4,0,0,7,18,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2265,"            xb = cw.getRemB();
",2,0,0,1,2,0,4,0,0,7,18,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2268,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2272,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2278,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,6,6174,"        return LN_MANT.clone();
",0,0,0,1,2,1,4,0,0,4,23,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3777,"    private static class lnMant {
",2,0,0,0,1,2,0,0,0,4,29,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3791,"                LN_MANT = FastMathLiteralArrays.loadLnMant();
",2,0,0,1,2,0,4,0,0,7,45,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3793,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1120,"        return log(x, null);
",0,0,0,1,2,1,4,0,0,5,20,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1130,"        if (x==0) { // Handle special case of +0/-0
",2,1,0,1,3,0,0,0,0,3,43,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1133,"        long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1136,"        if ((bits & 0x8000000000000000L) != 0 || x != x) {
",6,4,0,2,5,0,0,0,0,10,50,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1147,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1156,"        int exp = (int)(bits >> 52)-1023;
",4,2,0,2,4,0,0,0,0,6,33,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1158,"        if ((bits & 0x7ff0000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,40,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1178,"        if (exp == -1 || exp == 0) {
",4,3,0,1,3,0,0,0,0,8,28,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1228,"        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];
",8,2,0,5,10,1,0,0,0,11,79,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1239,"        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));
",8,4,0,3,6,1,0,0,0,13,95,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1241,"        double lnza = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1242,"        double lnzb = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1244,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1297,"            lnza = -0.16624882440418567;
",2,0,0,0,0,0,0,0,0,4,28,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1298,"            lnza = lnza * epsilon + 0.19999954120254515;
",6,2,0,0,0,0,0,0,0,9,44,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1299,"            lnza = lnza * epsilon + -0.2499999997677497;
",6,2,0,0,0,0,0,0,0,10,44,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1300,"            lnza = lnza * epsilon + 0.3333333333332802;
",6,2,0,0,0,0,0,0,0,9,43,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1301,"            lnza = lnza * epsilon + -0.5;
",6,2,0,0,0,0,0,0,0,10,29,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1302,"            lnza = lnza * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,28,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1303,"            lnza = lnza * epsilon;
",6,1,0,0,0,0,0,0,0,8,22,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1320,"        double a = LN_2_A*exp;
",6,1,0,0,0,0,0,0,0,7,22,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1321,"        double b = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1322,"        double c = a+lnm[0];
",4,1,1,1,2,0,0,0,0,7,20,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1323,"        double d = -(c-a-lnm[0]);
",6,1,1,2,4,0,0,0,0,10,25,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1324,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1325,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1327,"        c = a + lnza;
",6,1,0,0,0,0,0,0,0,8,13,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1328,"        d = -(c - a - lnza);
",8,1,0,1,2,0,0,0,0,11,20,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1329,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1330,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1332,"        c = a + LN_2_B*exp;
",8,2,0,0,0,0,0,0,0,11,19,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1333,"        d = -(c - a - LN_2_B*exp);
",10,2,0,1,2,0,0,0,0,14,26,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1334,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1335,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1337,"        c = a + lnm[1];
",4,1,1,1,2,0,0,0,0,8,15,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1338,"        d = -(c - a - lnm[1]);
",6,1,1,2,4,0,0,0,0,11,22,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1339,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1340,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1342,"        c = a + lnzb;
",6,1,0,0,0,0,0,0,0,8,13,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1343,"        d = -(c - a - lnzb);
",8,1,0,1,2,0,0,0,0,11,20,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1344,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1345,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1347,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1352,"        return a + b;
",4,1,0,0,0,1,0,0,0,5,13,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,452,"                    break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,11,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,101,"        return goal;
",2,0,0,0,0,1,0,0,0,2,12,4,1,0
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,44,"        this(point, value, true);
",4,0,0,1,2,0,0,0,0,5,25,4,1,0
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,58,"        super(copyArray ? ((point == null) ? null :
",4,1,0,1,4,0,0,0,0,6,43,3,1,0
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,85,"        for (OptimizationData data : optData) {
",4,0,0,1,3,0,0,2,0,6,39,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,86,"            if (data instanceof GoalType) {
",2,0,0,1,3,0,0,2,0,4,31,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,87,"                goal = (GoalType) data;
",4,0,0,1,2,0,0,2,0,7,23,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,88,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,90,"            if (data instanceof ObjectiveFunction) {
",2,0,0,1,3,0,0,2,0,4,40,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,95,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,6,29,"    private static final double[] EXP_INT_A = new double[] {
",2,0,0,2,5,3,0,0,0,5,56,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,6,1535,"    private static final double[] EXP_INT_B = new double[] {
",2,0,0,2,5,3,0,0,0,5,56,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,6,3043,"    private static final double[] EXP_FRAC_A = new double[] {
",2,0,0,2,5,3,0,0,0,5,57,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,6,4074,"    private static final double[] EXP_FRAC_B = new double[] {
",2,0,0,2,5,3,0,0,0,5,57,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,6,5103,"    private static final double[][] LN_MANT = new double[][] {
",2,0,0,4,9,3,0,0,0,5,58,2,1,0
defect4j,math,org/apache/commons/math3/util/Pair,6,74,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,64,"        return super.optimize(optData);
",4,0,0,1,2,1,0,0,0,4,31,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,81,"        super.parseOptimizationData(optData);
",4,0,0,1,2,0,0,0,0,4,37,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,43,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3539,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,616,"        return getColumnDimension() == getRowDimension();
",0,1,0,2,4,1,4,0,0,5,49,4,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleBounds,6,73,"        final double[] lB = new double[dim];
",2,0,1,2,4,1,0,0,0,5,36,4,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleBounds,6,74,"        Arrays.fill(lB, Double.NEGATIVE_INFINITY);
",4,0,0,1,2,0,6,0,0,10,42,5,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleBounds,6,75,"        final double[] uB = new double[dim];
",2,0,1,2,4,1,0,0,0,5,36,4,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleBounds,6,76,"        Arrays.fill(uB, Double.POSITIVE_INFINITY);
",4,0,0,1,2,0,6,0,0,10,42,5,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleBounds,6,78,"        return new SimpleBounds(lB, uB);
",4,0,0,1,2,1,0,2,0,6,32,5,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,143,"                if (upperBound.length != dim) {
",6,1,0,1,3,0,0,0,0,7,31,8,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,146,"                for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,8,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,147,"                    final double v = start[i];
",2,0,1,1,2,1,0,0,0,7,26,10,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,148,"                    final double hi = upperBound[i];
",2,0,1,1,2,1,0,0,0,7,32,10,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,149,"                    if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,10,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/GoalType,6,28,"public enum GoalType implements OptimizationData {
",2,0,0,0,1,1,0,2,0,5,50,1,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/GoalType,6,30,"    MAXIMIZE,
",2,0,0,0,0,0,0,0,0,2,9,2,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/GoalType,6,32,"    MINIMIZE
",2,0,0,0,0,0,0,0,0,2,8,2,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,134,"                for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,8,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,135,"                    final double v = start[i];
",2,0,1,1,2,1,0,0,0,7,26,10,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,136,"                    final double lo = lowerBound[i];
",2,0,1,1,2,1,0,0,0,7,32,10,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,137,"                    if (v < lo) {
",4,1,0,1,3,0,0,0,0,5,13,10,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3535,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3544,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3545,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3548,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3532,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,92,"                final SimpleBounds bounds = (SimpleBounds) data;
",4,0,0,1,2,1,0,4,0,9,48,8,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,93,"                lowerBound = bounds.getLower();
",2,0,0,1,2,0,4,0,0,7,31,8,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,94,"                upperBound = bounds.getUpper();
",2,0,0,1,2,0,4,0,0,7,31,8,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,95,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,131,"                if (lowerBound.length != dim) {
",6,1,0,1,3,0,0,0,0,7,31,8,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleBounds,6,53,"        return lower.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleBounds,6,61,"        return upper.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleBounds,6,42,"                        double[] uB) {
",2,0,0,1,4,0,0,0,0,2,14,3,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleBounds,6,43,"        lower = lB.clone();
",2,0,0,1,2,0,4,0,0,7,19,4,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleBounds,6,44,"        upper = uB.clone();
",2,0,0,1,2,0,4,0,0,7,19,4,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleBounds,6,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,102,"        return checker;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,109,"        return start == null ? null : start.clone();
",2,1,0,1,2,1,4,0,0,7,44,5,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,121,"        return upperBound == null ? null : upperBound.clone();
",2,1,0,1,2,1,4,0,0,7,54,5,1,0
defect4j,math,org/apache/commons/math3/util/Precision,6,96,"        if (equals(x, y, eps)) {
",0,0,0,2,5,0,8,0,0,8,24,5,1,0
defect4j,math,org/apache/commons/math3/util/Precision,6,97,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,1,0
defect4j,math,org/apache/commons/math3/util/Precision,6,272,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;
",6,3,0,2,4,1,10,0,0,19,53,4,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,115,"        return lowerBound == null ? null : lowerBound.clone();
",2,1,0,1,2,1,4,0,0,7,54,5,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,142,"            if (upperBound != null) {
",2,1,0,1,3,0,0,0,0,3,25,6,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,162,"        evaluations.incrementCount();
",0,0,0,1,2,0,4,0,0,4,29,5,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,163,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,88,"                start = ((InitialGuess) data).getInitialGuess();
",4,0,0,3,6,0,2,2,0,9,48,8,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,89,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,129,"            final int dim = start.length;
",6,0,0,0,0,1,0,0,0,7,29,6,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,130,"            if (lowerBound != null) {
",2,1,0,1,3,0,0,0,0,3,25,6,1,0
defect4j,math,org/apache/commons/math3/optim/InitialGuess,6,45,"        return init.clone();
",0,0,0,1,2,1,4,0,0,4,20,5,1,0
defect4j,math,org/apache/commons/math3/optim/InitialGuess,6,35,"    public InitialGuess(double[] startPoint) {
",4,0,0,2,5,1,0,0,0,5,42,2,1,0
defect4j,math,org/apache/commons/math3/optim/InitialGuess,6,36,"        init = startPoint.clone();
",2,0,0,1,2,0,4,0,0,7,26,4,1,0
defect4j,math,org/apache/commons/math3/optim/InitialGuess,6,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/util/Pair,6,65,"        return key;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/util/Pair,6,45,"    public Pair(K k, V v) {
",6,0,0,1,3,1,0,4,0,11,23,2,1,0
defect4j,math,org/apache/commons/math3/util/Pair,6,46,"        key = k;
",4,0,0,0,0,0,0,0,0,5,8,4,1,0
defect4j,math,org/apache/commons/math3/util/Pair,6,47,"        value = v;
",4,0,0,0,0,0,0,0,0,5,10,4,1,0
defect4j,math,org/apache/commons/math3/util/Pair,6,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,192,"                evaluations.setMaximalCount(((MaxEval) data).getMaxEval());
",2,0,0,4,8,0,6,2,0,10,59,9,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,193,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,1,0
defect4j,math,org/apache/commons/math3/optim/MaxEval,6,49,"        return maxEval;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0
defect4j,math,org/apache/commons/math3/optim/MaxEval,6,35,"    public MaxEval(int max) {
",4,0,0,1,3,1,0,0,0,5,25,2,1,0
defect4j,math,org/apache/commons/math3/optim/MaxEval,6,36,"        if (max <= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,1,0
defect4j,math,org/apache/commons/math3/optim/MaxEval,6,40,"        maxEval = max;
",4,0,0,0,0,0,0,0,0,5,14,4,1,0
defect4j,math,org/apache/commons/math3/optim/MaxEval,6,41,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,101,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,155,"        if (++count > maximalCount) {
",4,1,0,1,3,0,0,0,0,6,29,4,1,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,158,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,97,"    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);
",6,0,0,1,2,3,4,0,0,13,77,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,115,"    private static final double LN_QUICK_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,128,"    private static final double LN_HI_PREC_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,51,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,141,"    private static final double SINE_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,44,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,160,"    private static final double SINE_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,44,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,179,"    private static final double COSINE_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,46,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,198,"    private static final double COSINE_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,46,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,218,"    private static final double TANGENT_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,47,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,237,"    private static final double TANGENT_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,47,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,256,"    private static final long RECIP_2PI[] = new long[] {
",2,0,0,2,5,3,0,0,0,5,52,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,277,"    private static final long PI_O_4_BITS[] = new long[] {
",2,0,0,2,5,3,0,0,0,5,54,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};
",2,0,0,2,4,3,0,0,0,5,126,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,
",2,0,0,1,3,3,0,0,0,5,61,2,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,66,"        return super.optimize(optData);
",4,0,0,1,2,1,0,0,0,4,31,5,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,82,"        super.parseOptimizationData(optData);
",4,0,0,1,2,0,0,0,0,4,37,5,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,86,"        for (OptimizationData data : optData) {
",4,0,0,1,3,0,0,2,0,6,39,4,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,87,"            if (data instanceof InitialGuess) {
",2,0,0,1,3,0,0,2,0,4,35,7,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,91,"            if (data instanceof SimpleBounds) {
",2,0,0,1,3,0,0,2,0,4,35,7,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,100,"        checkParameters();
",0,0,0,1,2,0,2,0,0,2,18,5,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,128,"        if (start != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3017,"        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,61,5,1,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,592,"                maxAbsoluteValue = FastMath.abs(e[i]);
",2,0,1,2,4,0,4,0,0,11,38,8,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,48,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,1,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/util/Precision,6,331,"        long xInt = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,1,0
defect4j,math,org/apache/commons/math3/util/Precision,6,332,"        long yInt = Double.doubleToLongBits(y);
",2,0,0,1,2,0,6,0,0,8,39,5,1,0
defect4j,math,org/apache/commons/math3/util/Precision,6,335,"        if (xInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,1,0
defect4j,math,org/apache/commons/math3/util/Precision,6,338,"        if (yInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,1,0
defect4j,math,org/apache/commons/math3/util/Precision,6,342,"        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
",8,2,0,1,2,1,4,0,0,15,61,4,1,0
defect4j,math,org/apache/commons/math3/util/Precision,6,344,"        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);
",2,1,0,2,4,1,12,0,0,17,55,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2999,"        return (x < 0l) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,25,5,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,140,"        evaluations.resetCount();
",0,0,0,1,2,0,4,0,0,4,25,5,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,141,"        iterations.resetCount();
",0,0,0,1,2,0,4,0,0,4,24,5,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,143,"        return doOptimize();
",0,0,0,1,2,1,2,0,0,2,20,5,1,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,164,"        count = 0;
",2,0,0,0,0,0,0,0,0,3,10,4,1,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,165,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,96,"        maximalCount = max;
",4,0,0,0,0,0,0,0,0,5,19,4,1,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,137,"        parseOptimizationData(optData);
",0,0,0,1,2,0,4,0,0,4,31,5,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,190,"        for (OptimizationData data : optData) {
",4,0,0,1,3,0,0,2,0,6,39,4,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,191,"            if (data instanceof MaxEval) {
",2,0,0,1,3,0,0,2,0,4,30,7,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,195,"            if (data instanceof MaxIter) {
",2,0,0,1,3,0,0,2,0,4,30,7,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,200,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,47,"    protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {
",4,0,0,1,3,1,0,4,0,9,59,2,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,48,"        this.checker = checker;
",4,0,0,0,0,0,0,0,0,5,23,4,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,50,"        evaluations = new Incrementor(0, new MaxEvalCallback());
",2,0,0,2,4,0,0,4,0,7,56,4,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,51,"        iterations = new Incrementor(0, new MaxIterCallback());
",2,0,0,2,4,0,0,4,0,7,55,4,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,80,"        throws NullArgumentException {
",2,0,0,0,1,0,0,0,0,2,30,2,1,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,41,"    private int count = 0;
",2,0,0,0,0,1,0,0,0,3,22,2,1,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,81,"        if (cb == null){
",2,1,0,1,3,0,0,0,0,3,16,4,1,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,84,"        maximalCount = max;
",4,0,0,0,0,0,0,0,0,5,19,4,1,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,85,"        maxCountCallback = cb;
",4,0,0,0,0,0,0,0,0,5,22,4,1,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,86,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,221,"    private static class MaxIterCallback
",2,0,0,0,0,2,0,0,0,4,36,2,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,206,"    private static class MaxEvalCallback
",2,0,0,0,0,2,0,0,0,4,36,2,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,534,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,535,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,536,"        final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,537,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,538,"            out[i] = getEntry(row, i);
",0,0,1,2,4,0,6,0,0,11,26,6,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,541,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,126,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,127,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,128,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,129,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,130,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,131,"                out.setEntry(row, col, getEntry(row, col) * d);
",2,1,0,2,4,0,14,0,0,17,47,9,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,135,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,145,"        return new Array2DRowRealMatrix(rowDimension, columnDimension);
",4,0,0,1,2,1,0,2,0,6,63,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3421,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,1,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,600,"            return data[index];
",0,0,1,1,2,1,0,0,0,4,19,7,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,254,"        return copyOut();
",0,0,0,1,2,1,2,0,0,2,17,5,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,528,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,529,"        final double[][] out = new double[nRows][this.getColumnDimension()];
",2,0,1,5,10,1,2,0,0,7,68,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,531,"        for (int i = 0; i < nRows; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);
",2,0,1,4,8,0,4,0,0,18,56,7,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,534,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,606,"        if (left.getColumnDimension() != right.getRowDimension()) {
",0,1,0,3,7,0,8,0,0,9,59,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,610,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,101,"        NullArgumentException {
",2,0,0,0,1,0,0,0,0,2,23,2,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,102,"        if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,105,"            if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,108,"            final int nRows = d.length;
",6,0,0,0,0,1,0,0,0,7,27,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,109,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,112,"            final int nCols = d[0].length;
",4,0,1,1,2,1,0,0,0,7,30,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,113,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,116,"            for (int r = 1; r < nRows; r++) {
",8,1,0,1,3,0,0,0,0,10,33,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,121,"            data = d;
",4,0,0,0,0,0,0,0,0,5,9,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,123,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,610,"        return data.length;
",4,0,0,0,0,1,0,0,0,4,19,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2423,"        return atan(x, 0.0, false);
",0,0,0,1,2,1,4,0,0,5,27,5,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,130,"        if (data == null ||
",2,2,0,0,1,0,0,0,0,4,19,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,134,"        return (data.length * data[0].length <= 4096) ?
",6,2,1,2,4,1,0,0,0,10,47,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,379,"        return Math.sqrt(a);
",0,0,0,1,2,1,6,0,0,6,20,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2442,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2443,"            xb = -xb;
",4,0,0,0,0,0,0,0,0,6,9,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2444,"            negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2453,"            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);
",8,4,0,4,8,0,0,0,0,14,65,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2455,"            final double oneOverXa = 1 / xa;
",4,1,0,0,0,1,0,0,0,6,32,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2456,"            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);
",8,4,0,4,8,0,0,0,0,15,89,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2567,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,56,"    protected AbstractRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,33,2,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2433,"        boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2436,"        if (xa == 0.0) { // Matches +/- 0.0; return correct sign
",2,1,0,1,3,1,0,0,0,3,56,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2440,"        if (xa < 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2447,"        if (xa > 1.633123935319537E16) { // Very large input
",2,1,0,1,3,0,0,0,0,3,52,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2452,"        if (xa < 1) {
",2,1,0,1,3,0,0,0,0,3,13,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2458,"        double epsA = xa - TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,40,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2459,"        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);
",6,2,1,2,4,0,0,0,0,13,50,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2460,"        epsB += xb - TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,34,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2462,"        double temp = epsA + epsB;
",6,1,0,0,0,0,0,0,0,7,26,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2463,"        epsB = -(temp - epsA - epsB);
",8,1,0,1,2,0,0,0,0,11,29,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2464,"        epsA = temp;
",4,0,0,0,0,0,0,0,0,5,12,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2467,"        temp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2468,"        double ya = xa + temp - temp;
",8,2,0,0,0,0,0,0,0,10,29,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2469,"        double yb = xb + xa - ya;
",8,2,0,0,0,0,0,0,0,10,25,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2470,"        xa = ya;
",4,0,0,0,0,0,0,0,0,5,8,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2471,"        xb += yb;
",4,0,0,0,0,0,0,0,0,5,9,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2474,"        if (idx == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2482,"            double temp2 = xa * TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,41,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2483,"            double za = 1d + temp2;
",4,1,0,0,0,0,0,0,0,5,23,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2484,"            double zb = -(za - 1d - temp2);
",6,1,0,1,2,0,0,0,0,8,31,7,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2485,"            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];
",6,3,1,2,4,0,0,0,0,18,62,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2486,"            temp = za + temp2;
",6,1,0,0,0,0,0,0,0,8,18,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2487,"            zb += -(temp - za - temp2);
",8,1,0,1,2,0,0,0,0,11,27,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2488,"            za = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2490,"            zb += xb * TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,32,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2491,"            ya = epsA / za;
",6,1,0,0,0,0,0,0,0,8,15,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2493,"            temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2494,"            final double yaa = (ya + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2495,"            final double yab = ya - yaa;
",6,1,0,0,0,1,0,0,0,8,28,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2497,"            temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2498,"            final double zaa = (za + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2499,"            final double zab = za - zaa;
",6,1,0,0,0,1,0,0,0,8,28,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2502,"            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;
",22,9,0,1,2,0,0,0,0,32,65,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2504,"            yb += -epsA * zb / za / za;
",10,3,0,0,0,0,0,0,0,15,27,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2505,"            yb += epsB / za;
",6,1,0,0,0,0,0,0,0,8,16,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2509,"        epsA = ya;
",4,0,0,0,0,0,0,0,0,5,10,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2510,"        epsB = yb;
",4,0,0,0,0,0,0,0,0,5,10,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2513,"        final double epsA2 = epsA * epsA;
",6,1,0,0,0,1,0,0,0,8,33,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2524,"        yb = 0.07490822288864472;
",2,0,0,0,0,0,0,0,0,3,25,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2525,"        yb = yb * epsA2 + -0.09088450866185192;
",6,2,0,0,0,0,0,0,0,10,39,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2526,"        yb = yb * epsA2 + 0.11111095942313305;
",6,2,0,0,0,0,0,0,0,9,38,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2527,"        yb = yb * epsA2 + -0.1428571423679182;
",6,2,0,0,0,0,0,0,0,10,38,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2528,"        yb = yb * epsA2 + 0.19999999999923582;
",6,2,0,0,0,0,0,0,0,9,38,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2529,"        yb = yb * epsA2 + -0.33333333333333287;
",6,2,0,0,0,0,0,0,0,10,39,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2530,"        yb = yb * epsA2 * epsA;
",8,1,0,0,0,0,0,0,0,10,23,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2533,"        ya = epsA;
",4,0,0,0,0,0,0,0,0,5,10,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2535,"        temp = ya + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2536,"        yb = -(temp - ya - yb);
",8,1,0,1,2,0,0,0,0,11,23,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2537,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2540,"        yb += epsB / (1d + epsA * epsA);
",8,3,0,1,2,0,0,0,0,12,32,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2543,"        double za = EIGHTHS[idx] + ya;
",4,1,1,1,2,0,0,0,0,9,30,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2544,"        double zb = -(za - EIGHTHS[idx] - ya);
",6,1,1,2,4,0,0,0,0,12,38,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2545,"        temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2546,"        zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2547,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2549,"        double result = za + zb;
",6,1,0,0,0,0,0,0,0,7,24,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2550,"        double resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,10,37,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2552,"        if (leftPlane) {
",2,0,0,1,3,0,0,0,0,2,16,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2566,"        if (negate ^ leftPlane) {
",4,1,0,1,3,0,0,0,0,5,25,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2570,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,117,"                if (d[r].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,27,8,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,61,"        super(rowDimension, columnDimension);
",4,0,0,1,2,0,0,0,0,4,37,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,62,"        data = new double[rowDimension][columnDimension];
",2,0,1,2,4,0,0,0,0,7,49,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,63,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,314,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,315,"        data[row][column] = value;
",2,0,1,2,4,0,0,0,0,9,26,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,316,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/util/Precision,6,70,"        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);
",4,2,0,2,4,0,4,0,0,11,65,4,1,0
defect4j,math,org/apache/commons/math3/util/Precision,6,77,"        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);
",4,2,0,2,4,0,4,0,0,11,68,4,1,0
defect4j,math,org/apache/commons/math3/util/Precision,6,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {
",6,0,0,0,1,0,0,0,0,6,75,2,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,80,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,272,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,273,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,276,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,279,"            MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,7,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,280,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,281,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,285,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,286,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,289,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,290,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,291,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,296,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,300,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,547,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,548,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,67,"        throws NotStrictlyPositiveException {
",2,0,0,0,1,0,0,0,0,2,37,2,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,68,"        if (rowDimension < 1) {
",2,1,0,1,3,0,0,0,0,3,23,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,71,"        if (columnDimension < 1) {
",2,1,0,1,3,0,0,0,0,3,26,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,74,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,306,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,307,"        return data[row][column];
",0,0,1,2,4,1,0,0,0,6,25,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,47,"    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);
",6,0,0,1,2,3,4,2,0,15,95,2,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,50,"        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);
",0,0,0,2,4,0,6,0,0,6,55,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,6,53,"public abstract class RealLinearOperator {
",2,0,0,0,1,2,0,0,0,4,42,1,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,
",8,0,0,0,1,0,0,0,0,8,76,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,101,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,133,"                            final NumberFormat format) {
",2,0,0,0,2,1,0,2,0,5,28,3,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,134,"        this.prefix            = prefix;
",4,0,0,0,0,0,0,0,0,5,32,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,135,"        this.suffix            = suffix;
",4,0,0,0,0,0,0,0,0,5,32,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,136,"        this.rowPrefix         = rowPrefix;
",4,0,0,0,0,0,0,0,0,5,35,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,137,"        this.rowSuffix         = rowSuffix;
",4,0,0,0,0,0,0,0,0,5,35,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,138,"        this.rowSeparator      = rowSeparator;
",4,0,0,0,0,0,0,0,0,5,38,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,139,"        this.columnSeparator   = columnSeparator;
",4,0,0,0,0,0,0,0,0,5,41,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,140,"        this.format            = format;
",4,0,0,0,0,0,0,0,0,5,32,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,142,"        this.format.setGroupingUsed(false);
",2,0,0,1,2,0,2,0,0,5,35,5,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,143,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,207,"        return format;
",2,0,0,0,0,1,0,0,0,2,14,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,224,"        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));
",0,0,0,2,4,1,6,2,0,8,76,5,1,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,54,"        final NumberFormat nf = NumberFormat.getInstance(locale);
",2,0,0,1,2,1,6,2,0,11,57,4,1,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,55,"        nf.setMaximumFractionDigits(10);
",0,0,0,1,2,0,4,0,0,4,32,5,1,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,56,"        return nf;
",2,0,0,0,0,1,0,0,0,2,10,4,1,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,43,"        return getDefaultNumberFormat(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,51,5,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,339,"        return (data == null) ? 0 : data.length;
",6,1,0,1,2,1,0,0,0,7,40,5,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,345,"        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;
",4,3,1,5,10,1,0,0,0,11,66,5,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,
",12,0,0,0,1,0,0,0,0,12,73,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,215,"        return getInstance(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,40,5,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,52,"    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();
",2,0,0,1,2,3,4,2,0,11,85,2,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");
",2,0,0,2,4,3,0,4,0,15,104,2,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,454,"        checkRowIndex(m, row);
",0,0,0,1,2,0,6,0,0,6,22,5,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,455,"        checkColumnIndex(m, column);
",0,0,0,1,2,0,6,0,0,6,28,5,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,456,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,467,"        if (row < 0 ||
",2,2,0,0,1,0,0,0,0,4,14,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,472,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,483,"        if (column < 0 || column >= m.getColumnDimension()) {
",4,3,0,2,5,0,4,0,0,11,53,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,487,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,264,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,1,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,267,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,85,"    public ArrayRealVector(double[] d) {
",4,0,0,2,5,1,0,0,0,5,36,2,1,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,86,"        data = d.clone();
",2,0,0,1,2,0,4,0,0,7,17,4,1,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,87,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,60,"public abstract class RealVector {
",2,0,0,0,1,2,0,0,0,4,34,1,1,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1159,"    @Deprecated
",2,0,0,0,0,0,0,0,0,2,11,3,1,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,43,"    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();
",2,0,0,1,2,3,4,2,0,11,86,2,1,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,82,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);
",8,0,0,1,2,0,0,0,0,8,64,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,106,"                            final String separator, final NumberFormat format) {
",4,0,0,0,2,2,0,4,0,10,52,3,1,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,107,"        this.prefix      = prefix;
",4,0,0,0,0,0,0,0,0,5,26,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,108,"        this.suffix      = suffix;
",4,0,0,0,0,0,0,0,0,5,26,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,109,"        this.separator   = separator;
",4,0,0,0,0,0,0,0,0,5,29,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,110,"        trimmedPrefix    = prefix.trim();
",2,0,0,1,2,0,4,0,0,7,33,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,111,"        trimmedSuffix    = suffix.trim();
",2,0,0,1,2,0,4,0,0,7,33,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,112,"        trimmedSeparator = separator.trim();
",2,0,0,1,2,0,4,0,0,7,36,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,113,"        this.format      = format;
",4,0,0,0,0,0,0,0,0,5,26,4,1,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,114,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,162,"        return getInstance(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,40,5,1,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,171,"        return new RealVectorFormat(CompositeFormat.getDefaultNumberFormat(locale));
",0,0,0,2,4,1,6,2,0,8,76,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,97,"    protected AbstractSimplex(final double[] steps) {
",4,0,0,2,5,2,0,0,0,6,49,2,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,98,"        if (steps == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,101,"        if (steps.length == 0) {
",4,1,0,1,3,0,0,0,0,5,24,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,104,"        dimension = steps.length;
",6,0,0,0,0,0,0,0,0,7,25,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,108,"        startConfiguration = new double[dimension][dimension];
",2,0,1,2,4,0,0,0,0,7,54,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,109,"        for (int i = 0; i < dimension; i++) {
",8,1,0,1,3,0,0,0,0,10,37,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,110,"            final double[] vertexI = startConfiguration[i];
",2,0,1,2,4,1,0,0,0,7,47,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,111,"            for (int j = 0; j < i + 1; j++) {
",8,2,0,1,3,0,0,0,0,11,33,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,112,"                if (steps[j] == 0) {
",0,1,1,2,5,0,0,0,0,5,20,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,115,"                System.arraycopy(steps, 0, vertexI, 0, j + 1);
",2,1,0,1,2,0,8,0,0,11,46,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,118,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,115,"        if (maxIterationCount != ITERATION_CHECK_DISABLED) {
",4,1,0,1,3,0,0,0,0,5,52,4,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,121,"        final double p = previous.getValue();
",2,0,0,1,2,1,4,0,0,7,37,4,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,122,"        final double c = current.getValue();
",2,0,0,1,2,1,4,0,0,7,36,4,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,123,"        final double difference = FastMath.abs(p - c);
",6,1,0,1,2,1,4,0,0,12,46,4,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,124,"        final double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));
",2,0,0,3,6,1,16,0,0,19,67,4,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,125,"        return difference <= size * getRelativeThreshold() ||
",4,3,0,1,2,1,2,0,0,9,53,4,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,39,"public class SimpleValueChecker
",2,0,0,0,0,1,0,0,0,3,31,1,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,167,"                    return simplex.getPoint(0);
",0,0,0,1,2,1,4,0,0,4,27,11,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,133,"            = new MultivariateFunction() {
",0,0,0,1,3,0,0,2,0,2,30,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,135,"                    return computeObjectiveValue(point);
",0,0,0,1,2,1,4,0,0,4,36,11,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,132,"        final MultivariateFunction evalFunc
",2,0,0,0,0,1,0,2,0,5,35,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,139,"        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
",6,1,0,1,2,1,2,0,0,10,59,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,140,"        final Comparator<PointValuePair> comparator
",2,0,0,0,0,1,0,4,0,7,43,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,151,"        simplex.build(getStartPoint());
",0,0,0,2,4,0,6,0,0,6,31,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,152,"        simplex.evaluate(evalFunc, comparator);
",0,0,0,1,2,0,8,0,0,8,39,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,154,"        PointValuePair[] previous = null;
",2,0,0,1,2,0,0,2,0,4,33,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,155,"        int iteration = 0;
",2,0,0,0,0,0,0,0,0,2,18,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,156,"        final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();
",2,0,0,1,2,1,2,4,0,9,75,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,158,"            if (iteration > 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,159,"                boolean converged = true;
",2,0,0,0,0,0,0,0,0,3,25,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,160,"                for (int i = 0; i < simplex.getSize(); i++) {
",6,1,0,2,5,0,4,0,0,12,45,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,161,"                    PointValuePair prev = previous[i];
",2,0,1,1,2,0,0,2,0,8,34,10,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,162,"                    converged = converged &&
",4,1,0,0,0,0,0,0,0,6,24,10,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,165,"                if (converged) {
",2,0,0,1,3,0,0,0,0,2,16,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,172,"            previous = simplex.getPoints();
",2,0,0,1,2,0,4,0,0,7,31,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,173,"            simplex.iterate(evalFunc, comparator);
",0,0,0,1,2,0,8,0,0,8,38,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,175,"			++iteration;
",2,0,0,0,0,0,0,0,0,3,12,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,220,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,141,"            = new Comparator<PointValuePair>() {
",0,0,0,1,3,0,0,4,0,4,36,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,144,"                final double v1 = o1.getValue();
",2,0,0,1,2,1,4,0,0,7,32,10,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,145,"                final double v2 = o2.getValue();
",2,0,0,1,2,1,4,0,0,7,32,10,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,146,"                return isMinim ? Double.compare(v1, v2) : Double.compare(v2, v1);
",2,0,0,2,4,1,16,0,0,18,65,11,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,183,"        return dimension;
",2,0,0,0,0,1,0,0,0,2,17,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,194,"        return simplex.length;
",4,0,0,0,0,1,0,0,0,4,22,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,217,"        if (dimension != startPoint.length) {
",6,1,0,1,3,0,0,0,0,7,37,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,222,"        simplex = new PointValuePair[dimension + 1];
",4,1,0,1,2,0,0,2,0,8,44,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,223,"        simplex[0] = new PointValuePair(startPoint, Double.NaN);
",6,0,1,2,4,0,0,2,0,11,56,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,226,"        for (int i = 0; i < dimension; i++) {
",8,1,0,1,3,0,0,0,0,10,37,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,227,"            final double[] confI = startConfiguration[i];
",2,0,1,2,4,1,0,0,0,7,45,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,228,"            final double[] vertexI = new double[dimension];
",2,0,1,2,4,1,0,0,0,5,47,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,229,"            for (int k = 0; k < dimension; k++) {
",8,1,0,1,3,0,0,0,0,10,37,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,230,"                vertexI[k] = startPoint[k] + confI[k];
",0,1,1,3,6,0,0,0,0,14,38,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,232,"            simplex[i + 1] = new PointValuePair(vertexI, Double.NaN);
",8,1,1,2,4,0,0,2,0,14,57,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,234,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,247,"        for (int i = 0; i < simplex.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,248,"            final PointValuePair vertex = simplex[i];
",2,0,1,1,2,1,0,2,0,9,41,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,249,"            final double[] point = vertex.getPointRef();
",2,0,0,2,4,1,4,0,0,7,44,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,250,"            if (Double.isNaN(vertex.getValue())) {
",0,0,0,3,7,0,8,0,0,8,38,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,251,"                simplex[i] = new PointValuePair(point, evaluationFunction.value(point), false);
",2,0,1,3,6,0,6,2,0,16,79,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,256,"        Arrays.sort(simplex, comparator);
",0,0,0,1,2,0,8,0,0,8,33,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,257,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,284,"        final PointValuePair[] copy = new PointValuePair[simplex.length];
",6,0,0,2,4,1,0,4,0,11,65,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,285,"        System.arraycopy(simplex, 0, copy, 0, simplex.length);
",4,0,0,1,2,0,8,0,0,12,54,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,286,"        return copy;
",2,0,0,0,0,1,0,0,0,2,12,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,296,"        if (index < 0 ||
",2,2,0,0,1,0,0,0,0,4,16,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,300,"        return simplex[index];
",0,0,1,1,2,1,0,0,0,4,22,5,1,0
defect4j,math,org/apache/commons/math3/optim/AbstractConvergenceChecker,6,61,"        return absoluteThreshold;
",2,0,0,0,0,1,0,0,0,2,25,4,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,66,"        super(relativeThreshold, absoluteThreshold);
",4,0,0,1,2,0,0,0,0,4,44,4,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,67,"        maxIterationCount = ITERATION_CHECK_DISABLED;
",4,0,0,0,0,0,0,0,0,5,45,4,1,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/AbstractConvergenceChecker,6,54,"        return relativeThreshold;
",2,0,0,0,0,1,0,0,0,2,25,4,1,0
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,80,"        return getKey();
",0,0,0,1,2,1,2,0,0,2,16,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,97,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,98,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,122,"        return super.optimize(optData);
",4,0,0,1,2,1,0,0,0,4,31,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,128,"        checkParameters();
",0,0,0,1,2,0,2,0,0,2,18,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,192,"        super.parseOptimizationData(optData);
",4,0,0,1,2,0,0,0,0,4,37,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,196,"        for (OptimizationData data : optData) {
",4,0,0,1,3,0,0,2,0,6,39,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,197,"            if (data instanceof AbstractSimplex) {
",2,0,0,1,3,0,0,2,0,4,38,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,198,"                simplex = (AbstractSimplex) data;
",4,0,0,1,2,0,0,2,0,7,33,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,201,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,204,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,213,"        if (simplex == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,216,"        if (getLowerBound() != null ||
",0,2,0,1,3,0,2,0,0,5,30,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,89,"public class SimplexOptimizer extends MultivariateOptimizer {
",2,0,0,0,1,1,0,2,0,5,61,1,1,0
defect4j,math,org/apache/commons/math3/optim/AbstractConvergenceChecker,6,45,"                                      final double absoluteThreshold) {
",2,0,0,0,2,1,0,0,0,3,33,3,1,0
defect4j,math,org/apache/commons/math3/optim/AbstractConvergenceChecker,6,46,"        this.relativeThreshold = relativeThreshold;
",4,0,0,0,0,0,0,0,0,5,43,4,1,0
defect4j,math,org/apache/commons/math3/optim/AbstractConvergenceChecker,6,47,"        this.absoluteThreshold = absoluteThreshold;
",4,0,0,0,0,0,0,0,0,5,43,4,1,0
defect4j,math,org/apache/commons/math3/optim/AbstractConvergenceChecker,6,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,105,"        this(new SimpleValueChecker(rel, abs));
",4,0,0,2,4,0,0,2,0,6,39,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,106,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3536,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2477,"            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
",6,5,1,5,10,1,0,0,0,20,91,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2479,"            ya = epsA * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2480,"            yb = epsB * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2481,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,1,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,72,"        return evaluations.getCount();
",0,0,0,1,2,1,4,0,0,4,30,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,101,"        this(steps, DEFAULT_KHI, DEFAULT_GAMMA);
",6,0,0,1,2,0,0,0,0,6,40,4,0.66667,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,102,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.66667,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,115,"        super(steps);
",2,0,0,1,2,0,0,0,0,2,13,4,0.66667,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,117,"        this.khi   = khi;
",4,0,0,0,0,0,0,0,0,5,17,4,0.66667,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,118,"        this.gamma = gamma;
",4,0,0,0,0,0,0,0,0,5,19,4,0.66667,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,119,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.66667,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,325,"        if (points.length != simplex.length) {
",8,1,0,1,3,0,0,0,0,9,38,4,0.61538,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,328,"        simplex = points;
",4,0,0,0,0,0,0,0,0,5,17,4,0.61538,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,329,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.61538,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,165,"            final PointValuePair[] reflectedSimplex = getPoints();
",2,0,0,2,4,1,2,2,0,7,54,6,0.61538,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,166,"            final PointValuePair expanded = evaluateNewSimplex(evaluationFunction,
",2,0,0,0,1,1,4,2,0,9,70,6,0.61538,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,168,"            if (comparator.compare(reflected, expanded) <= 0) {
",0,1,0,2,5,0,8,0,0,9,51,6,0.61538,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,170,"                setPoints(reflectedSimplex);
",0,0,0,1,2,0,4,0,0,4,28,9,0.61538,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,173,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.61538,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,157,"        final PointValuePair[] original = getPoints();
",2,0,0,2,4,1,2,2,0,7,46,4,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,158,"        final PointValuePair best = original[0];
",2,0,1,1,2,1,0,2,0,7,40,4,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,161,"        final PointValuePair reflected = evaluateNewSimplex(evaluationFunction,
",2,0,0,0,1,1,4,2,0,9,71,4,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,163,"        if (comparator.compare(reflected, best) < 0) {
",0,1,0,2,5,0,8,0,0,9,46,4,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,177,"        evaluateNewSimplex(evaluationFunction, original, gamma, comparator);
",0,0,0,1,2,0,10,0,0,10,68,5,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,179,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,197,"        final double[] xSmallest = original[0].getPointRef();
",2,0,1,3,6,1,2,0,0,7,53,4,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,200,"        setPoint(0, original[0]);
",0,0,1,2,4,0,2,0,0,4,25,5,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,201,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,202,"        for (int i = 1; i < getSize(); i++) {
",6,1,0,2,5,0,2,0,0,10,37,4,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,203,"            final double[] xOriginal = original[i].getPointRef();
",2,0,1,3,6,1,2,0,0,9,53,6,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,204,"            final double[] xTransformed = new double[dim];
",2,0,1,2,4,1,0,0,0,5,46,6,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,205,"            for (int j = 0; j < dim; j++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,206,"                xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);
",2,3,1,5,10,0,0,0,0,22,71,8,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,208,"            setPoint(i, new PointValuePair(xTransformed, Double.NaN, false));
",6,0,0,2,4,0,4,2,0,13,65,7,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,212,"        evaluate(evaluationFunction, comparator);
",0,0,0,1,2,0,6,0,0,6,41,5,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,214,"        return getPoint(0);
",0,0,0,1,2,1,2,0,0,2,19,5,0.59259,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,311,"        if (index < 0 ||
",2,2,0,0,1,0,0,0,0,4,16,4,0.53333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,315,"        simplex[index] = point;
",2,0,1,1,2,0,0,0,0,7,23,4,0.53333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,316,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.53333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,121,"        this(steps, DEFAULT_RHO, DEFAULT_KHI, DEFAULT_GAMMA, DEFAULT_SIGMA);
",10,0,0,1,2,0,0,0,0,10,68,4,0.51613,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,122,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.51613,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,139,"        super(steps);
",2,0,0,1,2,0,0,0,0,2,13,4,0.51613,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,141,"        this.rho = rho;
",4,0,0,0,0,0,0,0,0,5,15,4,0.51613,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,142,"        this.khi = khi;
",4,0,0,0,0,0,0,0,0,5,15,4,0.51613,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,143,"        this.gamma = gamma;
",4,0,0,0,0,0,0,0,0,5,19,4,0.51613,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,144,"        this.sigma = sigma;
",4,0,0,0,0,0,0,0,0,5,19,4,0.51613,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,145,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.51613,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,234,"                replaceWorstPoint(expanded, comparator);
",0,0,0,1,2,0,6,0,0,6,40,10,0.42105,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,255,"                final double[] xC = new double[n];
",2,0,1,2,4,1,0,0,0,5,34,9,0.42105,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,256,"                for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,9,0.42105,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,257,"                    xC[j] = centroid[j] - gamma * (centroid[j] - xWorst[j]);
",2,3,1,5,10,0,0,0,0,22,56,11,0.42105,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,259,"                final PointValuePair inContracted
",2,0,0,0,0,1,0,2,0,5,33,9,0.42105,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,262,"                if (comparator.compare(inContracted, worst) < 0) {
",0,1,0,2,5,0,8,0,0,9,50,9,0.42105,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,264,"                    replaceWorstPoint(inContracted, comparator);
",0,0,0,1,2,0,6,0,0,6,44,12,0.42105,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,265,"                    return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.42105,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3533,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.41176,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,222,"            replaceWorstPoint(reflected, comparator);
",0,0,0,1,2,0,6,0,0,6,41,7,0.41026,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,237,"                replaceWorstPoint(reflected, comparator);
",0,0,0,1,2,0,6,0,0,6,41,10,0.41026,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,268,"        for (int i = 0; i < dimension; i++) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,269,"            if (comparator.compare(simplex[i], pointValuePair) > 0) {
",0,1,1,3,7,0,6,0,0,11,57,6,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,270,"                PointValuePair tmp = simplex[i];
",2,0,1,1,2,0,0,2,0,8,32,8,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,271,"                simplex[i] = pointValuePair;
",2,0,1,1,2,0,0,0,0,7,28,8,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,272,"                pointValuePair = tmp;
",4,0,0,0,0,0,0,0,0,5,21,8,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,275,"        simplex[dimension] = pointValuePair;
",2,0,1,1,2,0,0,0,0,7,36,4,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,276,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,189,"        final int n = getDimension();
",2,0,0,1,2,1,2,0,0,5,29,4,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,192,"        final PointValuePair best = getPoint(0);
",2,0,0,1,2,1,2,2,0,7,40,4,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,193,"        final PointValuePair secondBest = getPoint(n - 1);
",4,1,0,1,2,1,2,2,0,10,50,4,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,194,"        final PointValuePair worst = getPoint(n);
",2,0,0,1,2,1,4,2,0,9,41,4,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,195,"        final double[] xWorst = worst.getPointRef();
",2,0,0,2,4,1,4,0,0,7,44,4,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,199,"        final double[] centroid = new double[n];
",2,0,1,2,4,1,0,0,0,5,40,4,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,200,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,201,"            final double[] x = getPoint(i).getPointRef();
",2,0,0,3,6,1,6,0,0,9,45,6,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,202,"            for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,203,"                centroid[j] += x[j];
",0,0,1,2,4,0,0,0,0,9,20,8,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,206,"        final double scaling = 1.0 / n;
",4,1,0,0,0,1,0,0,0,6,31,4,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,207,"        for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,208,"            centroid[j] *= scaling;
",2,0,1,1,2,0,0,0,0,7,23,6,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,212,"        final double[] xR = new double[n];
",2,0,1,2,4,1,0,0,0,5,34,4,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,213,"        for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,214,"            xR[j] = centroid[j] + rho * (centroid[j] - xWorst[j]);
",2,3,1,5,10,0,0,0,0,22,54,6,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,216,"        final PointValuePair reflected
",2,0,0,0,0,1,0,2,0,5,30,4,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,219,"        if (comparator.compare(best, reflected) <= 0 &&
",0,2,0,1,3,0,8,0,0,10,47,4,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,223,"        } else if (comparator.compare(reflected, best) < 0) {
",0,1,0,2,6,0,8,0,0,9,53,5,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,225,"            final double[] xE = new double[n];
",2,0,1,2,4,1,0,0,0,5,34,7,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,226,"            for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,7,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,227,"                xE[j] = centroid[j] + khi * (xR[j] - centroid[j]);
",2,3,1,5,10,0,0,0,0,22,50,9,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,229,"            final PointValuePair expanded
",2,0,0,0,0,1,0,2,0,5,29,7,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,232,"            if (comparator.compare(expanded, reflected) < 0) {
",0,1,0,2,5,0,8,0,0,9,50,7,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,239,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,240,"            if (comparator.compare(reflected, worst) < 0) {
",0,1,0,2,5,0,8,0,0,9,47,7,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,242,"                final double[] xC = new double[n];
",2,0,1,2,4,1,0,0,0,5,34,9,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,243,"                for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,9,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,244,"                    xC[j] = centroid[j] + gamma * (xR[j] - centroid[j]);
",2,3,1,5,10,0,0,0,0,22,52,11,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,246,"                final PointValuePair outContracted
",2,0,0,0,0,1,0,2,0,5,34,9,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,248,"                if (comparator.compare(outContracted, reflected) <= 0) {
",0,1,0,2,5,0,8,0,0,9,56,9,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,250,"                    replaceWorstPoint(outContracted, comparator);
",0,0,0,1,2,0,6,0,0,6,45,12,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,251,"                    return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,280,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.40000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,461,"                if (i >= dimension - 1) {
",4,2,0,1,3,0,0,0,0,6,25,9,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1613,"        if (e == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1615,"        } else if (e < 0) {
",2,1,0,1,4,0,0,0,0,3,19,5,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1622,"        final int splitFactor = 0x8000001;
",2,0,0,0,0,1,0,0,0,3,34,4,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1623,"        final double cd       = splitFactor * d;
",6,1,0,0,0,1,0,0,0,8,40,4,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1624,"        final double d1High   = cd - (cd - d);
",8,2,0,1,2,1,0,0,0,11,38,4,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1625,"        final double d1Low    = d - d1High;
",6,1,0,0,0,1,0,0,0,8,35,4,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1628,"        double resultHigh = 1;
",2,0,0,0,0,0,0,0,0,2,22,5,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1629,"        double resultLow  = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1632,"        double d2p     = d;
",4,0,0,0,0,0,0,0,0,4,19,5,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1633,"        double d2pHigh = d1High;
",4,0,0,0,0,0,0,0,0,4,24,5,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1634,"        double d2pLow  = d1Low;
",4,0,0,0,0,0,0,0,0,4,23,5,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1636,"        while (e != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1638,"            if ((e & 0x1) != 0) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1641,"                final double tmpHigh = resultHigh * d2p;
",6,1,0,0,0,1,0,0,0,8,40,8,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1642,"                final double cRH     = splitFactor * resultHigh;
",6,1,0,0,0,1,0,0,0,8,48,8,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1643,"                final double rHH     = cRH - (cRH - resultHigh);
",8,2,0,1,2,1,0,0,0,11,48,8,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1644,"                final double rHL     = resultHigh - rHH;
",6,1,0,0,0,1,0,0,0,8,40,8,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1645,"                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);
",20,8,0,3,6,1,0,0,0,29,99,8,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1646,"                resultHigh = tmpHigh;
",4,0,0,0,0,0,0,0,0,5,21,8,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1647,"                resultLow  = resultLow * d2p + tmpLow;
",8,2,0,0,0,0,0,0,0,11,38,8,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1652,"            final double tmpHigh = d2pHigh * d2p;
",6,1,0,0,0,1,0,0,0,8,37,6,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1653,"            final double cD2pH   = splitFactor * d2pHigh;
",6,1,0,0,0,1,0,0,0,8,45,6,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1654,"            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);
",8,2,0,1,2,1,0,0,0,11,49,6,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1655,"            final double d2pHL   = d2pHigh - d2pHH;
",6,1,0,0,0,1,0,0,0,8,39,6,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1656,"            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);
",20,8,0,3,6,1,0,0,0,29,107,6,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1657,"            final double cTmpH   = splitFactor * tmpHigh;
",6,1,0,0,0,1,0,0,0,8,45,6,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1658,"            d2pHigh = cTmpH - (cTmpH - tmpHigh);
",8,2,0,1,2,0,0,0,0,11,36,6,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1659,"            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);
",12,4,0,1,2,0,0,0,0,17,54,6,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1660,"            d2p     = d2pHigh + d2pLow;
",6,1,0,0,0,0,0,0,0,8,27,6,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1662,"            e = e >> 1;
",4,1,0,0,0,0,0,0,0,6,11,6,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1664,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1666,"        return resultHigh + resultLow;
",4,1,0,0,0,1,0,0,0,5,30,4,0.15385,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,475,"                break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,9,0.14286,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,53,"        this(0);
",0,0,0,1,2,0,0,0,0,0,8,3,0.09302,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.09302,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,62,"        this(max,
",2,0,0,0,1,0,0,0,0,2,9,4,0.09302,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.09302,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,63,"             new MaxCountExceededCallback() {
",0,0,0,1,3,0,0,2,0,2,32,6,0.09302,0
defect4j,math,org/apache/commons/math3/util/Precision,6,244,"        return equals(x, y, 1);
",0,0,0,1,2,1,6,0,0,6,23,5,0.07547,0
defect4j,math,org/apache/commons/math3/util/Precision,6,336,"            xInt = SGN_MASK - xInt;
",6,1,0,0,0,0,0,0,0,8,23,6,0.05714,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,127,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);
",6,0,1,3,6,0,4,0,0,13,72,4,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,128,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,203,"        final int rows = rawData.length;
",6,0,0,0,0,1,0,0,0,7,32,4,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,204,"        final int columns = rawData[0].length;
",4,0,1,1,2,1,0,0,0,7,38,4,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,205,"        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,62,4,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,206,"        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,209,"        for (int i = 0; i < rawData.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,210,"            final int length = rawData[i].length;
",4,0,1,1,2,1,0,0,0,9,37,6,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,211,"            if (length != columns) {
",4,1,0,1,3,0,0,0,0,5,24,6,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,217,"        final double[][] blocks = new double[blockRows * blockColumns][];
",6,1,0,4,8,1,0,0,0,8,65,4,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,218,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,219,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,220,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,221,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,222,"            final int iHeight = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,34,6,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,223,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,224,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,225,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,226,"                final int jWidth = qEnd - qStart;
",6,1,0,0,0,1,0,0,0,8,33,8,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,229,"                final double[] block = new double[iHeight * jWidth];
",6,1,0,2,4,1,0,0,0,8,52,8,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,230,"                blocks[blockIndex] = block;
",2,0,1,1,2,0,0,0,0,7,27,8,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,233,"                int index = 0;
",2,0,0,0,0,0,0,0,0,2,14,9,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,234,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,235,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);
",0,0,1,2,4,0,12,0,0,16,59,11,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,236,"                    index += jWidth;
",4,0,0,0,0,0,0,0,0,5,16,10,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,238,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,242,"        return blocks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.05063,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1251,"        return rows;
",2,0,0,0,0,1,0,0,0,2,12,4,0.04938,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1257,"        return columns;
",2,0,0,0,0,1,0,0,0,2,15,4,0.04938,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,149,"        super(rows, columns);
",4,0,0,1,2,0,0,0,0,4,21,4,0.04878,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,150,"        this.rows = rows;
",4,0,0,0,0,0,0,0,0,5,17,4,0.04878,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,151,"        this.columns = columns;
",4,0,0,0,0,0,0,0,0,5,23,4,0.04878,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,154,"        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,49,4,0.04878,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,155,"        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.04878,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,157,"        if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.04878,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,162,"            blocks = blockData;
",4,0,0,0,0,0,0,0,0,5,19,6,0.04878,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,165,"        int index = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.04878,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,166,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.04878,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,167,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.04878,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,168,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {
",10,1,0,1,3,0,0,0,0,13,64,6,0.04878,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,169,"                if (blockData[index].length != iHeight * blockWidth(jBlock)) {
",4,2,1,3,7,0,4,0,0,14,62,8,0.04878,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,173,"                if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,8,0.04878,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,178,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04878,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1571,"        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;
",12,4,0,1,2,1,0,0,0,16,79,5,0.04878,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1580,"        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;
",12,4,0,1,2,1,0,0,0,16,91,5,0.04878,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,76,"        final ArrayRealVector r = new ArrayRealVector(residuals);
",4,0,0,1,2,1,0,4,0,9,57,4,0.03774,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,77,"        return FastMath.sqrt(r.dotProduct(getWeight().operate(r)));
",0,0,0,4,8,1,14,0,0,14,59,5,0.03774,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,120,"        this.cost = cost;
",4,0,0,0,0,0,0,0,0,5,17,4,0.03774,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,121,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03774,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,163,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,0.03774,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,165,"        final int dim = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,34,4,0.03774,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,166,"        final double[] outData = new double[dim];
",2,0,1,2,4,1,0,0,0,5,41,4,0.03774,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,167,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.03774,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,168,"            outData[i] = data[i] * m.data[i];
",4,1,1,3,6,0,0,0,0,16,33,6,0.03774,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,171,"        return new DiagonalMatrix(outData, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.03774,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,219,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.03774,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,289,"        return multiply(new DiagonalMatrix(v, false)).getDataRef();
",2,0,0,3,6,1,4,2,0,9,59,5,0.03774,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,462,"                    break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,11,0.03704,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,483,"                break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,9,0.03704,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,787,"                final double tfac = max(diagD) / 1e14 - min(diagD);
",2,2,0,2,4,1,8,0,0,13,51,8,0.03704,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,788,"                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));
",2,0,0,3,6,0,14,0,0,17,58,8,0.03704,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,789,"                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));
",2,0,0,3,6,0,12,0,0,15,59,8,0.03704,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,146,"                fW = eval(func, w);
",2,0,0,1,2,0,6,0,0,9,19,8,0.03704,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,147,"                if (isMinim ?
",2,0,0,0,1,0,0,0,0,2,13,9,0.03704,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,150,"                    xA = xB;
",4,0,0,0,0,0,0,0,0,5,8,10,0.03704,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,151,"                    xB = w;
",4,0,0,0,0,0,0,0,0,5,7,10,0.03704,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,152,"                    fA = fB;
",4,0,0,0,0,0,0,0,0,5,8,10,0.03704,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,153,"                    fB = fW;
",4,0,0,0,0,0,0,0,0,5,8,10,0.03704,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,154,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03704,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,180,"                w = xC + GOLD * (xC - xB);
",10,3,0,1,2,0,0,0,0,14,26,10,0.03704,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,181,"                fW = eval(func, w);
",2,0,0,1,2,0,6,0,0,9,19,10,0.03704,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3540,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.03704,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,87,"        final double scaledX = normalized ? FastMath.PI * x : x;
",12,1,0,0,0,1,0,0,0,14,56,4,0.03704,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,88,"        if (FastMath.abs(scaledX) <= SHORTCUT) {
",2,1,0,2,5,0,6,0,0,9,40,4,0.03704,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,90,"            final double scaledX2 = scaledX * scaledX;
",6,1,0,0,0,1,0,0,0,8,42,6,0.03704,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,91,"            return ((scaledX2 - 20) * scaledX2 + 120) / 120;
",4,4,0,2,4,1,0,0,0,8,48,6,0.03704,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,94,"            return FastMath.sin(scaledX) / scaledX;
",2,1,0,1,2,1,6,0,0,9,39,6,0.03704,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,168,"        this(rel, abs, lineRel, lineAbs, null);
",8,0,0,1,2,0,0,0,0,8,39,4,0.03571,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,169,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,249,"                double t = 2 * (fX + fX2 - 2 * fVal);
",8,4,0,1,2,0,0,0,0,12,37,9,0.03571,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,250,"                double temp = fX - fVal - delta;
",8,1,0,0,0,0,0,0,0,9,32,9,0.03571,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,251,"                t *= temp * temp;
",6,1,0,0,0,0,0,0,0,8,17,8,0.03571,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,252,"                temp = fX - fX2;
",6,1,0,0,0,0,0,0,0,8,16,8,0.03571,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,253,"                t -= delta * temp * temp;
",8,1,0,0,0,0,0,0,0,10,25,8,0.03571,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,255,"                if (t < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,8,0.03571,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,72,"        this(false);
",0,0,0,1,2,0,0,0,0,1,12,4,0.03571,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,73,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,81,"    public Sinc(boolean normalized) {
",4,0,0,1,3,1,0,0,0,5,33,2,0.03571,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,82,"        this.normalized = normalized;
",4,0,0,0,0,0,0,0,0,5,29,4,0.03571,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,44,"        this(point, value, true);
",4,0,0,1,2,0,0,0,0,5,25,4,0.03540,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03540,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,58,"        super(copyArray ?
",2,0,0,0,1,0,0,0,0,2,17,5,0.03540,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03540,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,65,"        return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(computeJacobian(params)));
",0,0,0,3,6,1,12,0,0,12,88,5,0.03540,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,216,"        final double[] target = getTarget();
",2,0,0,2,4,1,2,0,0,5,36,4,0.03540,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,217,"        if (objectiveValue.length != target.length) {
",8,1,0,1,3,0,0,0,0,9,45,4,0.03540,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,222,"        final double[] residuals = new double[target.length];
",6,0,0,2,4,1,0,0,0,7,53,4,0.03540,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,223,"        for (int i = 0; i < target.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.03540,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,224,"            residuals[i] = target[i] - objectiveValue[i];
",0,1,1,3,6,0,0,0,0,14,45,6,0.03540,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,227,"        return residuals;
",2,0,0,0,0,1,0,0,0,2,17,4,0.03540,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,6,60,"        return jacobian.value(params);
",0,0,0,1,2,1,6,0,0,6,30,5,0.03540,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,6,105,"                jacobian = ((ModelFunctionJacobian) data).getModelFunctionJacobian();
",4,0,0,3,6,0,2,2,0,9,69,8,0.03540,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,6,108,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03540,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,6,35,"    public ModelFunctionJacobian(MultivariateMatrixFunction j) {
",4,0,0,1,3,1,0,2,0,7,60,2,0.03540,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,6,36,"        jacobian = j;
",4,0,0,0,0,0,0,0,0,5,13,4,0.03540,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,6,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03540,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,6,45,"        return jacobian;
",2,0,0,0,0,1,0,0,0,2,16,4,0.03540,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,184,"        if (m instanceof DiagonalMatrix) {
",2,0,0,1,3,0,0,2,0,4,34,5,0.03540,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,187,"            MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,7,0.03540,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,188,"            final int nRows = m.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,38,6,0.03540,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,189,"            final int nCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,6,0.03540,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,190,"            final double[][] product = new double[nRows][nCols];
",2,0,1,4,8,1,0,0,0,7,52,6,0.03540,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,191,"            for (int r = 0; r < nRows; r++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.03540,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,192,"                for (int c = 0; c < nCols; c++) {
",8,1,0,1,3,0,0,0,0,10,33,8,0.03540,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,193,"                    product[r][c] = data[r] * m.getEntry(r, c);
",0,1,1,4,8,0,8,0,0,20,43,10,0.03540,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,196,"            return new Array2DRowRealMatrix(product, false);
",2,0,0,1,2,1,0,2,0,5,48,7,0.03540,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,62,"        super.incrementEvaluationCount();
",2,0,0,1,2,0,0,0,0,2,33,5,0.03509,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,63,"        return model.value(params);
",0,0,0,1,2,1,6,0,0,6,27,5,0.03509,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,96,"        return weightMatrix.copy();
",0,0,0,1,2,1,4,0,0,4,27,5,0.03509,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,137,"                model = ((ModelFunction) data).getModelFunction();
",4,0,0,3,6,0,2,2,0,9,50,8,0.03509,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,138,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.03509,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,6,35,"    public ModelFunction(MultivariateVectorFunction m) {
",4,0,0,1,3,1,0,2,0,7,52,2,0.03509,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,6,36,"        model = m;
",4,0,0,0,0,0,0,0,0,5,10,4,0.03509,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,6,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03509,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,6,45,"        return model;
",2,0,0,0,0,1,0,0,0,2,13,4,0.03509,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,105,"        return target.clone();
",0,0,0,1,2,1,4,0,0,4,22,5,0.03478,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,197,"        return super.optimize(optData);
",4,0,0,1,2,1,0,0,0,4,31,5,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,244,"        super.parseOptimizationData(optData);
",4,0,0,1,2,0,0,0,0,4,37,5,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,248,"        for (OptimizationData data : optData) {
",4,0,0,1,3,0,0,2,0,6,39,4,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,249,"            if (data instanceof Weight) {
",2,0,0,1,3,0,0,2,0,4,29,7,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,250,"                weightMatrixSqrt = squareRoot(((Weight) data).getWeight());
",4,0,0,4,8,0,4,2,0,11,59,8,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,253,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,256,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,265,"        if (m instanceof DiagonalMatrix) {
",2,0,0,1,3,0,0,2,0,4,34,5,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,266,"            final int dim = m.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,36,6,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,267,"            final RealMatrix sqrtM = new DiagonalMatrix(dim);
",4,0,0,1,2,1,0,4,0,9,49,6,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,268,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,269,"                sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));
",0,0,0,3,6,0,20,0,0,20,54,9,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,271,"            return sqrtM;
",2,0,0,0,0,1,0,0,0,2,13,6,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,6,83,"        return super.optimize(optData);
",4,0,0,1,2,1,0,0,0,4,31,5,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,6,99,"        super.parseOptimizationData(optData);
",4,0,0,1,2,0,0,0,0,4,37,5,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,6,103,"        for (OptimizationData data : optData) {
",4,0,0,1,3,0,0,2,0,6,39,4,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,6,104,"            if (data instanceof ModelFunctionJacobian) {
",2,0,0,1,3,0,0,2,0,4,44,7,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,6,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,87,"        return super.optimize(optData);
",4,0,0,1,2,1,0,0,0,4,31,5,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,131,"        super.parseOptimizationData(optData);
",4,0,0,1,2,0,0,0,0,4,37,5,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,135,"        for (OptimizationData data : optData) {
",4,0,0,1,3,0,0,2,0,6,39,4,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,136,"            if (data instanceof ModelFunction) {
",2,0,0,1,3,0,0,2,0,4,36,7,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,140,"            if (data instanceof Target) {
",2,0,0,1,3,0,0,2,0,4,29,7,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,141,"                target = ((Target) data).getTarget();
",4,0,0,3,6,0,2,2,0,9,37,8,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,142,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,144,"            if (data instanceof Weight) {
",2,0,0,1,3,0,0,2,0,4,29,7,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,145,"                weightMatrix = ((Weight) data).getWeight();
",4,0,0,3,6,0,2,2,0,9,43,8,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,146,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,151,"        checkParameters();
",0,0,0,1,2,0,2,0,0,2,18,5,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,152,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,161,"        if (target.length != weightMatrix.getColumnDimension()) {
",4,1,0,2,5,0,4,0,0,9,57,4,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,165,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,6,38,"    public Target(double[] observations) {
",4,0,0,2,5,1,0,0,0,5,38,2,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,6,39,"        target = observations.clone();
",2,0,0,1,2,0,4,0,0,7,30,4,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,6,40,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,6,48,"        return target.clone();
",0,0,0,1,2,1,4,0,0,4,22,5,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,6,41,"    public Weight(double[] weight) {
",4,0,0,2,5,1,0,0,0,5,32,2,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,6,42,"        weightMatrix = new DiagonalMatrix(weight);
",4,0,0,1,2,0,0,2,0,7,42,4,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,6,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,6,65,"        return weightMatrix.copy();
",0,0,0,1,2,1,4,0,0,4,27,5,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,213,"                    delta = fX2 - fVal;
",6,1,0,0,0,0,0,0,0,8,19,10,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,214,"                    bigInd = i;
",4,0,0,0,0,0,0,0,0,5,11,10,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,226,"                if (checker != null) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,232,"                    return (fVal < fX) ? current : previous;
",8,1,0,1,2,1,0,0,0,9,40,11,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,238,"            final double[] d = new double[n];
",2,0,1,2,4,1,0,0,0,5,33,6,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,239,"            final double[] x2 = new double[n];
",2,0,1,2,4,1,0,0,0,5,34,6,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,240,"            for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,241,"                d[i] = x[i] - x1[i];
",0,1,1,3,6,0,0,0,0,14,20,8,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,242,"                x2[i] = 2 * x[i] - x1[i];
",0,2,1,3,6,0,0,0,0,15,25,8,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,245,"            x1 = x.clone();
",2,0,0,1,2,0,4,0,0,7,15,6,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,246,"            fX2 = computeObjectiveValue(x2);
",2,0,0,1,2,0,4,0,0,7,32,6,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,248,"            if (fX > fX2) {
",4,1,0,1,3,0,0,0,0,5,15,6,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,267,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,401,"                        arxk = xmean.add(times(diagD,arz.getColumnMatrix(k))
",2,0,0,2,5,0,14,0,0,17,52,13,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,430,"                updateCovarianceDiagonalOnly(hsig, bestArz);
",0,0,0,1,2,0,6,0,0,6,44,10,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,672,"        double oldFac = hsig ? 0 : ccov1Sep * cc * (2 - cc);
",10,2,0,1,2,0,0,0,0,12,52,5,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,673,"        oldFac += 1 - ccov1Sep - ccovmuSep;
",6,1,0,0,0,0,0,0,0,8,35,4,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,674,"        diagC = diagC.scalarMultiply(oldFac) // regard old matrix
",2,0,0,1,2,0,6,0,0,9,57,4,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,678,"        diagD = sqrt(diagC); // replaces eig(C)
",2,0,0,2,4,0,4,0,0,7,39,4,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,679,"        if (diagonalOnly > 1 &&
",2,2,0,0,1,0,0,0,0,4,23,4,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,687,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,52,"        super(dimension, dimension);
",4,0,0,1,2,0,0,0,0,4,28,4,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,53,"        data = new double[dimension];
",2,0,1,1,2,0,0,0,0,5,29,4,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,64,"        this(d, true);
",2,0,0,1,2,0,0,0,0,3,14,4,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,65,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,82,"        throws NullArgumentException {
",2,0,0,0,1,0,0,0,0,2,30,2,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,83,"        MathUtils.checkNotNull(d);
",0,0,0,1,2,0,6,0,0,6,26,5,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,84,"        data = copyArray ? d.clone() : d;
",6,0,0,1,2,0,4,0,0,11,33,4,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,85,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,107,"        return new DiagonalMatrix(data);
",2,0,0,1,2,1,0,2,0,4,32,5,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,226,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,227,"        return row == column ? data[row] : 0;
",4,1,1,1,2,1,0,0,0,9,37,5,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,236,"        if (row == column) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,237,"            MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,7,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,238,"            data[row] = value;
",2,0,1,1,2,0,0,0,0,7,18,6,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,242,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,276,"        return data.length;
",4,0,0,0,0,1,0,0,0,4,19,5,0.03448,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,282,"        return data.length;
",4,0,0,0,0,1,0,0,0,4,19,5,0.03448,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,450,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.03361,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,675,"            return new ArrayRealVector(operate(((ArrayRealVector) v).getDataRef()), false);
",2,0,0,5,10,1,4,4,0,11,79,7,0.03361,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,53,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,6,50,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,6,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,48,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,101,"        this(rel, abs, FastMath.sqrt(rel), FastMath.sqrt(abs), checker);
",6,0,0,3,6,0,12,0,0,18,64,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,102,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,151,"        this(rel, abs, null);
",4,0,0,1,2,0,0,0,0,4,21,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,152,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,176,"        final GoalType goal = getGoalType();
",2,0,0,1,2,1,2,2,0,7,36,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,177,"        final double[] guess = getStartPoint();
",2,0,0,2,4,1,2,0,0,5,39,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,178,"        final int n = guess.length;
",6,0,0,0,0,1,0,0,0,7,27,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,180,"        final double[][] direc = new double[n][n];
",2,0,1,4,8,1,0,0,0,7,42,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,181,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,182,"            direc[i][i] = 1;
",0,0,1,2,4,0,0,0,0,7,16,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,185,"        final ConvergenceChecker<PointValuePair> checker
",2,0,0,0,0,1,0,4,0,7,48,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,188,"        double[] x = guess;
",4,0,0,1,2,0,0,0,0,4,19,5,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,189,"        double fVal = computeObjectiveValue(x);
",2,0,0,1,2,0,4,0,0,6,39,5,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,190,"        double[] x1 = x.clone();
",2,0,0,2,4,0,4,0,0,6,24,5,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,191,"        int iter = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,193,"            ++iter;
",2,0,0,0,0,0,0,0,0,3,7,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,195,"            double fX = fVal;
",4,0,0,0,0,0,0,0,0,4,17,7,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,196,"            double fX2 = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,197,"            double delta = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,198,"            int bigInd = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,199,"            double alphaMin = 0;
",2,0,0,0,0,0,0,0,0,2,20,7,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,201,"            for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,202,"                final double[] d = MathArrays.copyOf(direc[i]);
",2,0,1,3,6,1,4,0,0,11,47,8,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,204,"                fX2 = fVal;
",4,0,0,0,0,0,0,0,0,5,11,8,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,206,"                final UnivariatePointValuePair optimum = line.search(x, d);
",2,0,0,1,2,1,8,2,0,13,59,8,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,207,"                fVal = optimum.getValue();
",2,0,0,1,2,0,4,0,0,7,26,8,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,208,"                alphaMin = optimum.getPoint();
",2,0,0,1,2,0,4,0,0,7,30,8,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,209,"                final double[][] result = newPointAndDirection(x, d, alphaMin);
",2,0,0,3,6,1,8,0,0,11,63,8,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,210,"                x = result[0];
",2,0,1,1,2,0,0,0,0,5,14,8,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,212,"                if ((fX2 - fVal) > delta) {
",6,2,0,2,5,0,0,0,0,8,27,8,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,219,"            boolean stop = 2 * (fX - fVal) <=
",6,3,0,1,2,0,0,0,0,9,33,7,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,223,"            final PointValuePair previous = new PointValuePair(x1, fX);
",6,0,0,1,2,1,0,4,0,11,59,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,224,"            final PointValuePair current = new PointValuePair(x, fVal);
",6,0,0,1,2,1,0,4,0,11,59,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,225,"            if (!stop) { // User-defined stopping criteria.
",2,0,0,1,3,0,0,0,0,3,47,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,230,"            if (stop) {
",2,0,0,1,3,0,0,0,0,2,11,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,231,"                if (goal == GoalType.MINIMIZE) {
",6,1,0,1,3,0,0,0,0,7,32,8,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,283,"        final int n = p.length;
",6,0,0,0,0,1,0,0,0,7,23,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,284,"        final double[] nP = new double[n];
",2,0,1,2,4,1,0,0,0,5,34,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,285,"        final double[] nD = new double[n];
",2,0,1,2,4,1,0,0,0,5,34,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,286,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,287,"            nD[i] = d[i] * optimum;
",2,1,1,2,4,0,0,0,0,12,23,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,288,"            nP[i] = p[i] + nD[i];
",0,1,1,3,6,0,0,0,0,14,21,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,291,"        final double[][] result = new double[2][];
",2,0,0,4,8,1,0,0,0,3,42,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,292,"        result[0] = nP;
",2,0,1,1,2,0,0,0,0,5,15,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,293,"        result[1] = nD;
",2,0,1,1,2,0,0,0,0,5,15,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,295,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,380,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,346,"            final UnivariateFunction f = new UnivariateFunction() {
",2,0,0,1,3,1,0,4,0,7,55,5,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,348,"                        final double[] x = new double[n];
",2,0,1,2,4,1,0,0,0,5,33,11,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,349,"                        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,11,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,350,"                            x[i] = p[i] + alpha * d[i];
",2,2,1,3,6,0,0,0,0,17,27,13,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,352,"                        final double obj = PowellOptimizer.this.computeObjectiveValue(x);
",4,0,0,1,2,1,4,0,0,9,65,11,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,353,"                        return obj;
",2,0,0,0,0,1,0,0,0,2,11,11,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,345,"            final int n = p.length;
",6,0,0,0,0,1,0,0,0,7,23,5,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,346,"            final UnivariateFunction f = new UnivariateFunction() {
",2,0,0,1,3,1,0,4,0,7,55,5,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,357,"            final GoalType goal = PowellOptimizer.this.getGoalType();
",4,0,0,1,2,1,2,2,0,9,57,5,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,358,"            bracket.search(f, goal, 0, 1);
",0,0,0,1,2,0,8,0,0,8,30,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,362,"            return optimize(new MaxEval(Integer.MAX_VALUE),
",4,0,0,1,3,1,2,2,0,8,47,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,113,"        evaluations.resetCount();
",0,0,0,1,2,0,4,0,0,4,25,5,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,114,"        final boolean isMinim = goal == GoalType.MINIMIZE;
",8,1,0,0,0,1,0,0,0,10,50,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,116,"        double fA = eval(func, xA);
",2,0,0,1,2,0,6,0,0,8,27,5,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,117,"        double fB = eval(func, xB);
",2,0,0,1,2,0,6,0,0,8,27,5,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,118,"        if (isMinim ?
",2,0,0,0,1,0,0,0,0,2,13,5,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,122,"            double tmp = xA;
",4,0,0,0,0,0,0,0,0,4,16,7,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,123,"            xA = xB;
",4,0,0,0,0,0,0,0,0,5,8,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,124,"            xB = tmp;
",4,0,0,0,0,0,0,0,0,5,9,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,126,"            tmp = fA;
",4,0,0,0,0,0,0,0,0,5,9,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,127,"            fA = fB;
",4,0,0,0,0,0,0,0,0,5,8,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,128,"            fB = tmp;
",4,0,0,0,0,0,0,0,0,5,9,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,131,"        double xC = xB + GOLD * (xB - xA);
",10,3,0,1,2,0,0,0,0,13,34,5,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,132,"        double fC = eval(func, xC);
",2,0,0,1,2,0,6,0,0,8,27,5,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,134,"        while (isMinim ? fC < fB : fC > fB) {
",10,2,0,1,3,0,0,0,0,12,37,5,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,135,"            double tmp1 = (xB - xA) * (fB - fC);
",10,3,0,2,4,0,0,0,0,13,36,7,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,136,"            double tmp2 = (xB - xC) * (fB - fA);
",10,3,0,2,4,0,0,0,0,13,36,7,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,138,"            double val = tmp2 - tmp1;
",6,1,0,0,0,0,0,0,0,7,25,7,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,139,"            double denom = Math.abs(val) < EPS_MIN ? 2 * EPS_MIN : 2 * val;
",8,3,0,1,2,0,6,0,0,17,63,7,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,141,"            double w = xB - ((xB - xC) * tmp2 - (xB - xA) * tmp1) / denom;
",18,7,0,3,6,0,0,0,0,25,62,7,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,142,"            double wLim = xB + growLimit * (xC - xB);
",10,3,0,1,2,0,0,0,0,13,41,7,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,145,"            if ((w - xC) * (xB - w) > 0) {
",8,4,0,3,7,0,0,0,0,12,30,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,164,"            } else if ((w - wLim) * (wLim - xC) >= 0) {
",8,4,0,3,8,0,0,0,0,12,43,7,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,167,"            } else if ((w - wLim) * (xC - w) > 0) {
",8,4,0,3,8,0,0,0,0,12,39,8,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,184,"            xA = xB;
",4,0,0,0,0,0,0,0,0,5,8,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,185,"            fA = fB;
",4,0,0,0,0,0,0,0,0,5,8,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,186,"            xB = xC;
",4,0,0,0,0,0,0,0,0,5,8,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,187,"            fB = fC;
",4,0,0,0,0,0,0,0,0,5,8,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,188,"            xC = w;
",4,0,0,0,0,0,0,0,0,5,7,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,189,"            fC = fW;
",4,0,0,0,0,0,0,0,0,5,8,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,190,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,192,"        lo = xA;
",4,0,0,0,0,0,0,0,0,5,8,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,193,"        fLo = fA;
",4,0,0,0,0,0,0,0,0,5,9,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,194,"        mid = xB;
",4,0,0,0,0,0,0,0,0,5,9,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,195,"        fMid = fB;
",4,0,0,0,0,0,0,0,0,5,10,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,196,"        hi = xC;
",4,0,0,0,0,0,0,0,0,5,8,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,197,"        fHi = fC;
",4,0,0,0,0,0,0,0,0,5,9,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,199,"        if (lo > hi) {
",4,1,0,1,3,0,0,0,0,5,14,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,200,"            double tmp = lo;
",4,0,0,0,0,0,0,0,0,4,16,7,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,201,"            lo = hi;
",4,0,0,0,0,0,0,0,0,5,8,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,202,"            hi = tmp;
",4,0,0,0,0,0,0,0,0,5,9,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,204,"            tmp = fLo;
",4,0,0,0,0,0,0,0,0,5,10,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,205,"            fLo = fHi;
",4,0,0,0,0,0,0,0,0,5,10,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,206,"            fHi = tmp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,208,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,229,"        return lo;
",2,0,0,0,0,1,0,0,0,2,10,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,245,"        return hi;
",2,0,0,0,0,1,0,0,0,2,10,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,261,"        return mid;
",2,0,0,0,0,1,0,0,0,2,11,4,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,281,"            evaluations.incrementCount();
",0,0,0,1,2,0,4,0,0,4,29,7,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,284,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,285,"        return f.value(x);
",0,0,0,1,2,1,6,0,0,6,18,5,0.03333,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2234,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.03333,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2235,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.03333,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2269,"            quadrant ^= 2;  // Flip bit 1
",2,0,0,0,0,0,0,0,0,3,29,6,0.03333,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,122,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,124,"        if (rel < MIN_RELATIVE_TOLERANCE) {
",4,1,0,1,3,0,0,0,0,5,35,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,127,"        if (abs <= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,130,"        relativeThreshold = rel;
",4,0,0,0,0,0,0,0,0,5,24,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,131,"        absoluteThreshold = abs;
",4,0,0,0,0,0,0,0,0,5,24,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,134,"        line = new LineSearch(lineRel,
",4,0,0,0,1,0,0,2,0,7,30,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,136,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03226,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,70,"    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);
",2,1,0,1,2,3,4,0,0,10,74,2,0.03226,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,174,"        checkParameters();
",0,0,0,1,2,0,2,0,0,2,18,5,0.03226,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,376,"        if (getLowerBound() != null ||
",0,2,0,1,3,0,2,0,0,5,30,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,65,"public class PowellOptimizer
",2,0,0,0,0,1,0,0,0,3,28,1,0.03226,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,329,"                   double abs) {
",2,0,0,0,2,0,0,0,0,2,13,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,330,"            super(REL_TOL_UNUSED,
",2,0,0,0,1,0,0,0,0,2,21,5,0.03226,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,318,"        private final BracketFinder bracket = new BracketFinder();
",2,0,0,1,2,2,0,4,0,8,58,3,0.03226,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,333,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,242,"                    if (checker.converged(iter, previous, current)) {
",0,0,0,2,5,0,10,0,0,10,49,11,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,243,"                        return best;
",2,0,0,0,0,1,0,0,0,2,12,12,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,117,"        if (maxIterationCount != ITERATION_CHECK_DISABLED) {
",4,1,0,1,3,0,0,0,0,5,52,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,123,"        final double p = previous.getValue();
",2,0,0,1,2,1,4,0,0,7,37,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,124,"        final double c = current.getValue();
",2,0,0,1,2,1,4,0,0,7,36,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,125,"        final double difference = FastMath.abs(p - c);
",6,1,0,1,2,1,4,0,0,12,46,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,126,"        final double size = FastMath.max(FastMath.abs(p), FastMath.abs(c));
",2,0,0,3,6,1,16,0,0,19,67,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,127,"        return difference <= size * getRelativeThreshold() ||
",4,3,0,1,2,1,2,0,0,9,53,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,41,"public class SimpleUnivariateValueChecker
",2,0,0,0,0,1,0,0,0,3,41,1,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,79,"        this(100, 50);
",0,0,0,1,2,0,0,0,0,0,14,3,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,90,"                         int maxEvaluations) {
",2,0,0,0,2,0,0,0,0,2,21,3,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,48,"    private final Incrementor evaluations = new Incrementor();
",2,0,0,1,2,2,0,4,0,8,58,2,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,91,"        if (growLimit <= 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,94,"        if (maxEvaluations <= 0) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,98,"        this.growLimit = growLimit;
",4,0,0,0,0,0,0,0,0,5,27,4,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,99,"        evaluations.setMaximalCount(maxEvaluations);
",0,0,0,1,2,0,6,0,0,6,44,5,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,100,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03226,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,68,"        super(relativeThreshold, absoluteThreshold);
",4,0,0,1,2,0,0,0,0,4,44,4,0.03125,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,69,"        maxIterationCount = ITERATION_CHECK_DISABLED;
",4,0,0,0,0,0,0,0,0,5,45,4,0.03125,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03125,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,456,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.03101,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,457,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.03101,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,458,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.03101,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,459,"            double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.03101,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,460,"            for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.03101,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,461,"                dot += data[i] * vData[i];
",2,1,1,2,4,0,0,0,0,12,26,8,0.03101,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,463,"            return dot;
",2,0,0,0,0,1,0,0,0,2,11,6,0.03101,0
defect4j,math,org/apache/commons/math3/util/Precision,6,339,"            yInt = SGN_MASK - yInt;
",6,1,0,0,0,0,0,0,0,8,23,6,0.03030,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,209,"                        e = b - x;
",6,1,0,0,0,0,0,0,0,8,10,12,0.02941,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3471,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.02857,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3476,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.02857,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3477,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.02857,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3480,"        return b;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02857,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,749,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.02778,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,777,"         final double[] output = new double[len];
",2,0,1,2,4,1,0,0,0,5,40,4,0.02778,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,778,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.02778,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,779,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.02778,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,222,"                b -= tol;
",4,0,0,0,0,0,0,0,0,5,9,9,0.02778,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,758,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.02740,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,761,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02740,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,71,"        this(updateFormula,
",2,0,0,0,1,0,0,0,0,2,19,4,0.02703,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02703,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,197,"                    q = -q;
",4,0,0,0,0,0,0,0,0,6,7,10,0.02703,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,219,"            } else if (m > 0) {
",2,1,0,1,4,0,0,0,0,3,19,7,0.02703,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,227,"                c = a;
",4,0,0,0,0,0,0,0,0,5,6,8,0.02703,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,228,"                fc = fa;
",4,0,0,0,0,0,0,0,0,5,8,8,0.02703,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,229,"                d = b - a;
",6,1,0,0,0,0,0,0,0,8,10,8,0.02703,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,230,"                e = d;
",4,0,0,0,0,0,0,0,0,5,6,8,0.02703,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,280,"                searchDirection = steepestDescent.clone();
",2,0,0,1,2,0,4,0,0,7,42,8,0.02632,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,346,"            return r.clone();
",0,0,0,1,2,1,4,0,0,4,17,6,0.02632,0
defect4j,math,org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,6,37,"        super(absoluteAccuracy);
",2,0,0,1,2,0,0,0,0,2,24,4,0.02632,0
defect4j,math,org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,6,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02632,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,67,"        this(DEFAULT_RELATIVE_ACCURACY,
",2,0,0,0,1,0,0,0,0,2,31,4,0.02632,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02632,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,47,"        this(DEFAULT_ABSOLUTE_ACCURACY);
",2,0,0,1,2,0,0,0,0,2,32,4,0.02632,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02632,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,55,"        super(absoluteAccuracy);
",2,0,0,1,2,0,0,0,0,2,24,4,0.02632,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02632,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,98,"            return initial;
",2,0,0,0,0,1,0,0,0,2,15,6,0.02632,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,104,"        throws NullArgumentException {
",2,0,0,0,1,0,0,0,0,2,30,2,0.02597,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,105,"        if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.02597,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,108,"        data = copyArray ? d.clone() :  d;
",6,0,0,1,2,0,4,0,0,11,34,4,0.02597,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,109,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02597,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,193,"        final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();
",2,0,0,1,2,1,2,4,0,9,75,4,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,194,"        final double[] point = getStartPoint();
",2,0,0,2,4,1,2,0,0,5,39,4,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,195,"        final GoalType goal = getGoalType();
",2,0,0,1,2,1,2,2,0,7,36,4,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,196,"        final int n = point.length;
",6,0,0,0,0,1,0,0,0,7,27,4,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,197,"        double[] r = computeObjectiveGradient(point);
",2,0,0,2,4,0,4,0,0,6,45,5,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,198,"        if (goal == GoalType.MINIMIZE) {
",6,1,0,1,3,0,0,0,0,7,32,4,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,199,"            for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,200,"                r[i] = -r[i];
",0,0,1,2,4,0,0,0,0,10,13,8,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,205,"        double[] steepestDescent = preconditioner.precondition(point, r);
",2,0,0,2,4,0,8,0,0,10,65,5,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,206,"        double[] searchDirection = steepestDescent.clone();
",2,0,0,2,4,0,4,0,0,6,51,5,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,208,"        double delta = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,209,"        for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,210,"            delta += r[i] * searchDirection[i];
",2,1,1,2,4,0,0,0,0,12,35,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,213,"        PointValuePair current = null;
",2,0,0,0,0,0,0,2,0,4,30,4,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,214,"        int iter = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,215,"        int maxEval = getMaxEvaluations();
",2,0,0,1,2,0,2,0,0,4,34,5,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,217,"            ++iter;
",2,0,0,0,0,0,0,0,0,3,7,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,219,"            final double objective = computeObjectiveValue(point);
",2,0,0,1,2,1,4,0,0,7,54,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,220,"            PointValuePair previous = current;
",4,0,0,0,0,0,0,2,0,6,34,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,221,"            current = new PointValuePair(point, objective);
",6,0,0,1,2,0,0,2,0,9,47,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,222,"            if (previous != null) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,223,"                if (checker.converged(iter, previous, current)) {
",0,0,0,2,5,0,10,0,0,10,49,9,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,225,"                    return current;
",2,0,0,0,0,1,0,0,0,2,15,10,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,230,"            final UnivariateFunction lsf = new LineSearchFunction(point, searchDirection);
",6,0,0,1,2,1,0,4,0,11,78,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,231,"            final double uB = findUpperBound(lsf, 0, initialStep);
",2,0,0,1,2,1,6,0,0,9,54,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,235,"            final double step = solver.solve(maxEval, lsf, 0, uB, 1e-15);
",2,0,0,1,2,1,10,0,0,13,61,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,236,"            maxEval -= solver.getEvaluations(); // Subtract used up evaluations.
",2,0,0,1,2,0,4,0,0,7,68,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,239,"            for (int i = 0; i < point.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,40,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,240,"                point[i] += step * searchDirection[i];
",2,1,1,2,4,0,0,0,0,12,38,8,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,243,"            r = computeObjectiveGradient(point);
",2,0,0,1,2,0,4,0,0,7,36,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,244,"            if (goal == GoalType.MINIMIZE) {
",6,1,0,1,3,0,0,0,0,7,32,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,245,"                for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,246,"                    r[i] = -r[i];
",0,0,1,2,4,0,0,0,0,10,13,10,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,251,"            final double deltaOld = delta;
",4,0,0,0,0,1,0,0,0,5,30,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,252,"            final double[] newSteepestDescent = preconditioner.precondition(point, r);
",2,0,0,2,4,1,8,0,0,11,74,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,253,"            delta = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,254,"            for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,255,"                delta += r[i] * newSteepestDescent[i];
",2,1,1,2,4,0,0,0,0,12,38,8,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,259,"            switch (updateFormula) {
",2,0,0,1,3,0,0,0,0,2,24,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,264,"                double deltaMid = 0;
",2,0,0,0,0,0,0,0,0,2,20,8,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,265,"                for (int i = 0; i < r.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,7,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,266,"                    deltaMid += r[i] * steepestDescent[i];
",2,1,1,2,4,0,0,0,0,12,38,9,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,268,"                beta = (delta - deltaMid) / deltaOld;
",8,2,0,1,2,0,0,0,0,11,37,7,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,269,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,274,"            steepestDescent = newSteepestDescent;
",4,0,0,0,0,0,0,0,0,5,37,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,277,"            if (iter % n == 0 ||
",4,3,0,0,1,0,0,0,0,7,20,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,287,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,317,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,330,"        final double yA = f.value(a);
",2,0,0,1,2,1,6,0,0,9,29,4,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,331,"        double yB = yA;
",4,0,0,0,0,0,0,0,0,4,15,5,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,332,"        for (double step = h; step < Double.MAX_VALUE; step *= FastMath.max(2, yA / yB)) {
",16,2,0,2,5,0,4,0,0,23,82,4,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,333,"            final double b = a + step;
",6,1,0,0,0,1,0,0,0,8,26,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,334,"            yB = f.value(b);
",2,0,0,1,2,0,6,0,0,9,16,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,335,"            if (yA * yB <= 0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,336,"                return b;
",2,0,0,0,0,1,0,0,0,2,9,8,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,406,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,49,"public class NonLinearConjugateGradientOptimizer
",2,0,0,0,0,1,0,0,0,3,48,1,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/GradientMultivariateOptimizer,6,54,"        return gradient.value(params);
",0,0,0,1,2,1,6,0,0,6,30,5,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,259,"            switch (updateFormula) {
",2,0,0,1,3,0,0,0,0,2,24,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,371,"                                  double[] direction) {
",2,0,0,1,4,0,0,0,0,2,21,4,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,372,"            currentPoint = point.clone();
",2,0,0,1,2,0,4,0,0,7,29,5,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,373,"            searchDirection = direction.clone();
",2,0,0,1,2,0,4,0,0,7,36,5,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,374,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,379,"            final double[] shiftedPoint = currentPoint.clone();
",2,0,0,2,4,1,4,0,0,7,51,5,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,380,"            for (int i = 0; i < shiftedPoint.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,47,5,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,381,"                shiftedPoint[i] += x * searchDirection[i];
",2,1,1,2,4,0,0,0,0,12,42,7,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,385,"            final double[] gradient = computeObjectiveGradient(shiftedPoint);
",2,0,0,2,4,1,4,0,0,7,65,5,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,388,"            double dotProduct = 0;
",2,0,0,0,0,0,0,0,0,2,22,6,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,389,"            for (int i = 0; i < gradient.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,43,5,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,390,"                dotProduct += gradient[i] * searchDirection[i];
",2,1,1,2,4,0,0,0,0,12,47,7,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,393,"            return dotProduct;
",2,0,0,0,0,1,0,0,0,2,18,5,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,343,"    public static class IdentityPreconditioner implements Preconditioner {
",2,0,0,0,1,2,0,2,0,6,70,2,0.02564,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,264,"                        b = u;
",4,0,0,0,0,0,0,0,0,5,6,12,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,353,"        if (lower >= upper) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,357,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,372,"        verifyInterval(lower, initial);
",0,0,0,1,2,0,6,0,0,6,31,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,373,"        verifyInterval(initial, upper);
",0,0,0,1,2,0,6,0,0,6,31,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,374,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,106,"        return evaluations.getCount();
",0,0,0,1,2,1,4,0,0,4,30,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,112,"        return searchMin;
",2,0,0,0,0,1,0,0,0,2,17,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,118,"        return searchMax;
",2,0,0,0,0,1,0,0,0,2,17,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,124,"        return searchStart;
",2,0,0,0,0,1,0,0,0,2,19,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,130,"        return absoluteAccuracy;
",2,0,0,0,0,1,0,0,0,2,24,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,136,"        return relativeAccuracy;
",2,0,0,0,0,1,0,0,0,2,24,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,142,"        return functionValueAccuracy;
",2,0,0,0,0,1,0,0,0,2,29,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,155,"        incrementEvaluationCount();
",0,0,0,1,2,0,2,0,0,2,27,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,156,"        return function.value(point);
",0,0,0,1,2,1,6,0,0,6,29,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,177,"        MathUtils.checkNotNull(f);
",0,0,0,1,2,0,6,0,0,6,26,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,180,"        searchMin = min;
",4,0,0,0,0,0,0,0,0,5,16,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,181,"        searchMax = max;
",4,0,0,0,0,0,0,0,0,5,16,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,182,"        searchStart = startValue;
",4,0,0,0,0,0,0,0,0,5,25,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,183,"        function = f;
",4,0,0,0,0,0,0,0,0,5,13,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,184,"        evaluations.setMaximalCount(maxEval);
",0,0,0,1,2,0,6,0,0,6,37,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,185,"        evaluations.resetCount();
",0,0,0,1,2,0,4,0,0,4,25,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,186,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,193,"        setup(maxEval, f, min, max, startValue);
",0,0,0,1,2,0,12,0,0,12,40,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,196,"        return doSolve();
",0,0,0,1,2,1,2,0,0,2,17,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,277,"        UnivariateSolverUtils.verifySequence(lower, initial, upper);
",0,0,0,1,2,0,10,0,0,10,60,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,278,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,310,"            evaluations.incrementCount();
",0,0,0,1,2,0,4,0,0,4,29,7,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,313,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,314,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,88,"        double min = getMin();
",2,0,0,1,2,0,2,0,0,4,22,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,89,"        double max = getMax();
",2,0,0,1,2,0,2,0,0,4,22,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,90,"        final double initial = getStartValue();
",2,0,0,1,2,1,2,0,0,5,39,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,91,"        final double functionValueAccuracy = getFunctionValueAccuracy();
",2,0,0,1,2,1,2,0,0,5,64,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,93,"        verifySequence(min, initial, max);
",0,0,0,1,2,0,8,0,0,8,34,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,96,"        double yInitial = computeObjectiveValue(initial);
",2,0,0,1,2,0,4,0,0,6,49,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,97,"        if (FastMath.abs(yInitial) <= functionValueAccuracy) {
",2,1,0,2,5,0,6,0,0,9,54,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,102,"        double yMin = computeObjectiveValue(min);
",2,0,0,1,2,0,4,0,0,6,41,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,103,"        if (FastMath.abs(yMin) <= functionValueAccuracy) {
",2,1,0,2,5,0,6,0,0,9,50,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,108,"        if (yInitial * yMin < 0) {
",4,2,0,1,3,0,0,0,0,6,26,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,113,"        double yMax = computeObjectiveValue(max);
",2,0,0,1,2,0,4,0,0,6,41,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,114,"        if (FastMath.abs(yMax) <= functionValueAccuracy) {
",2,1,0,2,5,0,6,0,0,9,50,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,119,"        if (yInitial * yMax < 0) {
",4,2,0,1,3,0,0,0,0,6,26,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,120,"            return brent(initial, max, yInitial, yMax);
",0,0,0,1,2,1,10,0,0,10,43,7,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,144,"        double a = lo;
",4,0,0,0,0,0,0,0,0,4,14,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,145,"        double fa = fLo;
",4,0,0,0,0,0,0,0,0,4,16,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,146,"        double b = hi;
",4,0,0,0,0,0,0,0,0,4,14,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,147,"        double fb = fHi;
",4,0,0,0,0,0,0,0,0,4,16,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,148,"        double c = a;
",4,0,0,0,0,0,0,0,0,4,13,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,149,"        double fc = fa;
",4,0,0,0,0,0,0,0,0,4,15,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,150,"        double d = b - a;
",6,1,0,0,0,0,0,0,0,7,17,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,151,"        double e = d;
",4,0,0,0,0,0,0,0,0,4,13,5,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,153,"        final double t = getAbsoluteAccuracy();
",2,0,0,1,2,1,2,0,0,5,39,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,154,"        final double eps = getRelativeAccuracy();
",2,0,0,1,2,1,2,0,0,5,41,4,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,157,"            if (FastMath.abs(fc) < FastMath.abs(fb)) {
",0,1,0,3,7,0,12,0,0,13,42,6,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,158,"                a = b;
",4,0,0,0,0,0,0,0,0,5,6,8,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,159,"                b = c;
",4,0,0,0,0,0,0,0,0,5,6,8,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,160,"                c = a;
",4,0,0,0,0,0,0,0,0,5,6,8,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,161,"                fa = fb;
",4,0,0,0,0,0,0,0,0,5,8,8,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,162,"                fb = fc;
",4,0,0,0,0,0,0,0,0,5,8,8,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,163,"                fc = fa;
",4,0,0,0,0,0,0,0,0,5,8,8,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,166,"            final double tol = 2 * eps * FastMath.abs(b) + t;
",6,2,0,1,2,1,6,0,0,15,49,6,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,167,"            final double m = 0.5 * (c - b);
",6,2,0,1,2,1,0,0,0,9,31,6,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,169,"            if (FastMath.abs(m) <= tol ||
",2,2,0,1,3,0,6,0,0,10,29,6,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,171,"                return b;
",2,0,0,0,0,1,0,0,0,2,9,8,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,173,"            if (FastMath.abs(e) < tol ||
",2,2,0,1,3,0,6,0,0,10,28,6,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,179,"                double s = fb / fa;
",6,1,0,0,0,0,0,0,0,7,19,9,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,185,"                if (a == c) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,187,"                    p = 2 * m * s;
",6,1,0,0,0,0,0,0,0,8,14,10,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,188,"                    q = 1 - s;
",4,1,0,0,0,0,0,0,0,6,10,10,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,196,"                if (p > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,199,"                    p = -p;
",4,0,0,0,0,0,0,0,0,6,7,10,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,201,"                s = e;
",4,0,0,0,0,0,0,0,0,5,6,8,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,202,"                e = d;
",4,0,0,0,0,0,0,0,0,5,6,8,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,203,"                if (p >= 1.5 * m * q - FastMath.abs(tol * q) ||
",10,5,0,1,3,0,4,0,0,19,47,8,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,211,"                    d = p / q;
",6,1,0,0,0,0,0,0,0,8,10,10,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,214,"            a = b;
",4,0,0,0,0,0,0,0,0,5,6,6,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,215,"            fa = fb;
",4,0,0,0,0,0,0,0,0,5,8,6,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,217,"            if (FastMath.abs(d) > tol) {
",2,1,0,2,5,0,6,0,0,9,28,6,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,218,"                b += d;
",4,0,0,0,0,0,0,0,0,5,7,8,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,224,"            fb = computeObjectiveValue(b);
",2,0,0,1,2,0,4,0,0,7,30,6,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,225,"            if ((fb > 0 && fc > 0) ||
",4,4,0,1,3,0,0,0,0,8,25,6,0.02564,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,232,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02564,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,95,"    public static enum Formula {
",2,0,0,0,1,2,0,0,0,4,28,2,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,97,"        FLETCHER_REEVES,
",2,0,0,0,0,0,0,0,0,2,16,3,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,99,"        POLAK_RIBIERE
",2,0,0,0,0,0,0,0,0,2,13,3,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,162,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,58,"    private double initialStep = 1;
",2,0,0,0,0,1,0,0,0,3,31,2,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,164,"        this.updateFormula = updateFormula;
",4,0,0,0,0,0,0,0,0,5,35,4,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,165,"        solver = lineSearchSolver;
",4,0,0,0,0,0,0,0,0,5,26,4,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,166,"        this.preconditioner = preconditioner;
",4,0,0,0,0,0,0,0,0,5,37,4,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,167,"        initialStep = 1;
",2,0,0,0,0,0,0,0,0,3,16,4,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,168,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,187,"        return super.optimize(optData);
",4,0,0,1,2,1,0,0,0,4,31,5,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,303,"        super.parseOptimizationData(optData);
",4,0,0,1,2,0,0,0,0,4,37,5,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,307,"        for (OptimizationData data : optData) {
",4,0,0,1,3,0,0,2,0,6,39,4,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,308,"            if  (data instanceof BracketingStep) {
",2,0,0,1,3,0,0,2,0,4,38,7,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,316,"        checkParameters();
",0,0,0,1,2,0,2,0,0,2,18,5,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,402,"        if (getLowerBound() != null ||
",0,2,0,1,3,0,2,0,0,5,30,4,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/GradientMultivariateOptimizer,6,44,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/GradientMultivariateOptimizer,6,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/GradientMultivariateOptimizer,6,74,"        return super.optimize(optData);
",4,0,0,1,2,1,0,0,0,4,31,5,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/GradientMultivariateOptimizer,6,90,"        super.parseOptimizationData(optData);
",4,0,0,1,2,0,0,0,0,4,37,5,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/GradientMultivariateOptimizer,6,94,"        for (OptimizationData data : optData) {
",4,0,0,1,3,0,0,2,0,6,39,4,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/GradientMultivariateOptimizer,6,95,"            if  (data instanceof ObjectiveFunctionGradient) {
",2,0,0,1,3,0,0,2,0,4,49,7,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/GradientMultivariateOptimizer,6,96,"                gradient = ((ObjectiveFunctionGradient) data).getObjectiveFunctionGradient();
",4,0,0,3,6,0,2,2,0,9,77,8,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/GradientMultivariateOptimizer,6,99,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/GradientMultivariateOptimizer,6,102,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02500,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,186,"                        d = p / q;
",6,1,0,0,0,0,0,0,0,8,10,12,0.02500,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,187,"                        u = x + d;
",6,1,0,0,0,0,0,0,0,8,10,12,0.02500,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,190,"                        if (u - a < tol2 || b - u < tol2) {
",12,5,0,1,3,0,0,0,0,17,35,12,0.02500,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,202,"                            e = a - x;
",6,1,0,0,0,0,0,0,0,8,10,14,0.02500,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,250,"                        b = x;
",4,0,0,0,0,0,0,0,0,5,6,12,0.02500,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,312,"            return a.getValue() <= b.getValue() ? a : b;
",4,1,0,2,4,1,8,0,0,13,44,7,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunctionGradient,6,35,"    public ObjectiveFunctionGradient(MultivariateVectorFunction g) {
",4,0,0,1,3,1,0,2,0,7,64,2,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunctionGradient,6,36,"        gradient = g;
",4,0,0,0,0,0,0,0,0,5,13,4,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunctionGradient,6,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02500,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunctionGradient,6,45,"        return gradient;
",2,0,0,0,0,1,0,0,0,2,16,4,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,98,"        super(rows, columns);
",4,0,0,1,2,0,0,0,0,4,21,4,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,99,"        this.rows = rows;
",4,0,0,0,0,0,0,0,0,5,17,4,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,100,"        this.columns = columns;
",4,0,0,0,0,0,0,0,0,5,23,4,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,103,"        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,49,4,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,104,"        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,107,"        blocks = createBlocksLayout(rows, columns);
",2,0,0,1,2,0,6,0,0,9,43,4,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,108,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1215,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1216,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1217,"        final BlockRealMatrix out = new BlockRealMatrix(nCols, nRows);
",6,0,0,1,2,1,0,4,0,11,62,4,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1220,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1221,"        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1222,"            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,52,6,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1224,"                final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,8,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1225,"                final double[] tBlock = blocks[jBlock * blockColumns + iBlock];
",8,2,1,2,4,1,0,0,0,13,63,8,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1226,"                final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1227,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1228,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1229,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,8,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1230,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1231,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1232,"                    final int lInc = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,31,10,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1233,"                    int l = p - pStart;
",6,1,0,0,0,0,0,0,0,7,19,11,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1234,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1235,"                        outBlock[k] = tBlock[l];
",0,0,1,2,4,0,0,0,0,9,24,12,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1236,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1237,"                        l+= lInc;
",4,0,0,0,0,0,0,0,0,5,9,12,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1241,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1245,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.02500,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,72,"public class BlockRealMatrix extends AbstractRealMatrix implements Serializable {
",2,0,0,0,1,1,0,4,0,7,81,1,0.02500,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,94,"                                               final double functionValueAccuracy) {
",2,0,0,0,2,1,0,0,0,3,37,3,0.02500,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,51,"    private final Incrementor evaluations = new Incrementor();
",2,0,0,1,2,2,0,4,0,8,58,2,0.02500,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,95,"        this.absoluteAccuracy = absoluteAccuracy;
",4,0,0,0,0,0,0,0,0,5,41,4,0.02500,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,96,"        this.relativeAccuracy = relativeAccuracy;
",4,0,0,0,0,0,0,0,0,5,41,4,0.02500,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,97,"        this.functionValueAccuracy = functionValueAccuracy;
",4,0,0,0,0,0,0,0,0,5,51,4,0.02500,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,98,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02500,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,174,"                        p = -p;
",4,0,0,0,0,0,0,0,0,6,7,12,0.02439,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,200,"                            e = b - x;
",6,1,0,0,0,0,0,0,0,8,10,14,0.02439,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,211,"                        e = a - x;
",6,1,0,0,0,0,0,0,0,8,10,12,0.02439,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,249,"                    if (u < x) {
",4,1,0,1,3,0,0,0,0,5,12,10,0.02439,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,252,"                        a = x;
",4,0,0,0,0,0,0,0,0,5,6,12,0.02439,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,254,"                    v = w;
",4,0,0,0,0,0,0,0,0,5,6,10,0.02439,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,255,"                    fv = fw;
",4,0,0,0,0,0,0,0,0,5,8,10,0.02439,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,256,"                    w = x;
",4,0,0,0,0,0,0,0,0,5,6,10,0.02439,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,257,"                    fw = fx;
",4,0,0,0,0,0,0,0,0,5,8,10,0.02439,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,258,"                    x = u;
",4,0,0,0,0,0,0,0,0,5,6,10,0.02439,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,259,"                    fx = fu;
",4,0,0,0,0,0,0,0,0,5,8,10,0.02439,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,141,"        if (!isMinim) {
",2,0,0,1,3,0,0,0,0,3,15,4,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,144,"        double fv = fx;
",4,0,0,0,0,0,0,0,0,4,15,5,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,145,"        double fw = fx;
",4,0,0,0,0,0,0,0,0,4,15,5,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,147,"        UnivariatePointValuePair previous = null;
",2,0,0,0,0,0,0,2,0,4,41,4,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,148,"        UnivariatePointValuePair current
",2,0,0,0,0,0,0,2,0,4,32,4,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,151,"        UnivariatePointValuePair best = current;
",4,0,0,0,0,0,0,2,0,6,40,4,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,153,"        int iter = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,155,"            final double m = 0.5 * (a + b);
",6,2,0,1,2,1,0,0,0,9,31,6,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,156,"            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
",6,2,0,1,2,1,6,0,0,15,76,6,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,157,"            final double tol2 = 2 * tol1;
",4,1,0,0,0,1,0,0,0,6,29,6,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,160,"            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
",12,5,0,2,4,1,4,0,0,22,65,6,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,161,"            if (!stop) {
",2,0,0,1,3,0,0,0,0,3,12,6,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,162,"                double p = 0;
",2,0,0,0,0,0,0,0,0,2,13,9,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,163,"                double q = 0;
",2,0,0,0,0,0,0,0,0,2,13,9,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,164,"                double r = 0;
",2,0,0,0,0,0,0,0,0,2,13,9,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,165,"                double u = 0;
",2,0,0,0,0,0,0,0,0,2,13,9,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,167,"                if (FastMath.abs(e) > tol1) { // Fit parabola.
",2,1,0,2,5,0,6,0,0,9,46,8,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,168,"                    r = (x - w) * (fx - fv);
",10,3,0,2,4,0,0,0,0,14,24,10,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,169,"                    q = (x - v) * (fx - fw);
",10,3,0,2,4,0,0,0,0,14,24,10,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,170,"                    p = (x - v) * q - (x - w) * r;
",14,5,0,2,4,0,0,0,0,20,30,10,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,171,"                    q = 2 * (q - r);
",6,2,0,1,2,0,0,0,0,9,16,10,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,173,"                    if (q > 0) {
",2,1,0,1,3,0,0,0,0,3,12,10,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,176,"                        q = -q;
",4,0,0,0,0,0,0,0,0,6,7,12,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,179,"                    r = e;
",4,0,0,0,0,0,0,0,0,5,6,10,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,180,"                    e = d;
",4,0,0,0,0,0,0,0,0,5,6,10,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,182,"                    if (p > q * (a - x) &&
",8,5,0,1,3,0,0,0,0,13,22,10,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,199,"                        if (x < m) {
",4,1,0,1,3,0,0,0,0,5,12,12,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,204,"                        d = GOLDEN_SECTION * e;
",6,1,0,0,0,0,0,0,0,8,23,12,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,208,"                    if (x < m) {
",4,1,0,1,3,0,0,0,0,5,12,10,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,213,"                    d = GOLDEN_SECTION * e;
",6,1,0,0,0,0,0,0,0,8,23,10,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,217,"                if (FastMath.abs(d) < tol1) {
",2,1,0,2,5,0,6,0,0,9,29,8,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,224,"                    u = x + d;
",6,1,0,0,0,0,0,0,0,8,10,10,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,227,"                double fu = computeObjectiveValue(u);
",2,0,0,1,2,0,4,0,0,6,37,9,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,228,"                if (!isMinim) {
",2,0,0,1,3,0,0,0,0,3,15,8,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,233,"                previous = current;
",4,0,0,0,0,0,0,0,0,5,19,8,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,234,"                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
",10,0,0,1,2,0,0,2,0,14,62,8,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,235,"                best = best(best,
",2,0,0,0,1,0,4,0,0,7,17,8,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,241,"                if (checker != null) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,248,"                if (fu <= fx) {
",4,1,0,1,3,0,0,0,0,5,15,8,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,261,"                    if (u < x) {
",4,1,0,1,3,0,0,0,0,5,12,10,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,262,"                        a = u;
",4,0,0,0,0,0,0,0,0,5,6,12,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,266,"                    if (fu <= fw ||
",4,2,0,0,1,0,0,0,0,6,15,10,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,268,"                        v = w;
",4,0,0,0,0,0,0,0,0,5,6,12,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,269,"                        fv = fw;
",4,0,0,0,0,0,0,0,0,5,8,12,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,270,"                        w = u;
",4,0,0,0,0,0,0,0,0,5,6,12,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,271,"                        fw = fu;
",4,0,0,0,0,0,0,0,0,5,8,12,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,279,"            } else { // Default termination (Brent's criterion).
",0,0,0,1,4,0,0,0,0,0,52,3,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,286,"            ++iter;
",2,0,0,0,0,0,0,0,0,3,7,6,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,287,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,304,"        if (a == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,307,"        if (b == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,311,"        if (isMinim) {
",2,0,0,1,3,0,0,0,0,2,14,4,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariatePointValuePair,6,45,"                                    final double value) {
",2,0,0,0,2,1,0,0,0,3,21,3,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariatePointValuePair,6,46,"        this.point = point;
",4,0,0,0,0,0,0,0,0,5,19,4,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariatePointValuePair,6,47,"        this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,4,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariatePointValuePair,6,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariatePointValuePair,6,56,"        return point;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariatePointValuePair,6,65,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02381,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,116,"        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
",6,1,0,1,2,1,2,0,0,10,59,4,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,117,"        final double lo = getMin();
",2,0,0,1,2,1,2,0,0,5,27,4,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,118,"        final double mid = getStartValue();
",2,0,0,1,2,1,2,0,0,5,35,4,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,119,"        final double hi = getMax();
",2,0,0,1,2,1,2,0,0,5,27,4,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,122,"        final ConvergenceChecker<UnivariatePointValuePair> checker
",2,0,0,0,0,1,0,4,0,7,58,4,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,127,"        if (lo < hi) {
",4,1,0,1,3,0,0,0,0,5,14,4,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,128,"            a = lo;
",4,0,0,0,0,0,0,0,0,5,7,6,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,129,"            b = hi;
",4,0,0,0,0,0,0,0,0,5,7,6,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,135,"        double x = mid;
",4,0,0,0,0,0,0,0,0,4,15,5,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,136,"        double v = x;
",4,0,0,0,0,0,0,0,0,4,13,5,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,137,"        double w = x;
",4,0,0,0,0,0,0,0,0,4,13,5,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,138,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,139,"        double e = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,140,"        double fx = computeObjectiveValue(x);
",2,0,0,1,2,0,4,0,0,6,37,5,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,44,"public class BrentOptimizer extends UnivariateOptimizer {
",2,0,0,0,1,1,0,2,0,5,57,1,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,77,"        return goal;
",2,0,0,0,0,1,0,0,0,2,12,4,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,122,"        return start;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,128,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,134,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,148,"        super.incrementEvaluationCount();
",2,0,0,1,2,0,0,0,0,2,33,5,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,149,"        return function.value(x);
",0,0,0,1,2,1,6,0,0,6,25,5,0.02326,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,101,"                final SearchInterval interval = (SearchInterval) data;
",4,0,0,1,2,1,0,4,0,9,54,8,0.02273,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,102,"                min = interval.getMin();
",2,0,0,1,2,0,4,0,0,7,24,8,0.02273,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,103,"                max = interval.getMax();
",2,0,0,1,2,0,4,0,0,7,24,8,0.02273,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,104,"                start = interval.getStartValue();
",2,0,0,1,2,0,4,0,0,7,33,8,0.02273,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,105,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.02273,0
defect4j,math,org/apache/commons/math3/optim/univariate/SearchInterval,6,48,"                          double init) {
",2,0,0,0,2,0,0,0,0,2,14,3,0.02273,0
defect4j,math,org/apache/commons/math3/optim/univariate/SearchInterval,6,49,"        if (lo >= hi) {
",4,1,0,1,3,0,0,0,0,5,15,4,0.02273,0
defect4j,math,org/apache/commons/math3/optim/univariate/SearchInterval,6,52,"        if (init < lo ||
",4,2,0,0,1,0,0,0,0,6,16,4,0.02273,0
defect4j,math,org/apache/commons/math3/optim/univariate/SearchInterval,6,57,"        lower = lo;
",4,0,0,0,0,0,0,0,0,5,11,4,0.02273,0
defect4j,math,org/apache/commons/math3/optim/univariate/SearchInterval,6,58,"        upper = hi;
",4,0,0,0,0,0,0,0,0,5,11,4,0.02273,0
defect4j,math,org/apache/commons/math3/optim/univariate/SearchInterval,6,59,"        start = init;
",4,0,0,0,0,0,0,0,0,5,13,4,0.02273,0
defect4j,math,org/apache/commons/math3/optim/univariate/SearchInterval,6,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02273,0
defect4j,math,org/apache/commons/math3/optim/univariate/SearchInterval,6,78,"        return lower;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02273,0
defect4j,math,org/apache/commons/math3/optim/univariate/SearchInterval,6,86,"        return upper;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02273,0
defect4j,math,org/apache/commons/math3/optim/univariate/SearchInterval,6,94,"        return start;
",2,0,0,0,0,1,0,0,0,2,13,4,0.02273,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,258,"        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,62,4,0.02273,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,259,"        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.02273,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,261,"        final double[][] blocks = new double[blockRows * blockColumns][];
",6,1,0,4,8,1,0,0,0,8,65,4,0.02273,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,262,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.02273,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,263,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.02273,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,264,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.02273,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.02273,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,266,"            final int iHeight = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,34,6,0.02273,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,267,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.02273,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,268,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.02273,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,269,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.02273,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,270,"                final int jWidth = qEnd - qStart;
",6,1,0,0,0,1,0,0,0,8,33,8,0.02273,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,271,"                blocks[blockIndex] = new double[iHeight * jWidth];
",4,1,1,2,4,0,0,0,0,10,50,8,0.02273,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,272,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.02273,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,276,"        return blocks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.02273,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,466,"                            tmp = 0.1;
",2,0,0,0,0,0,0,0,0,3,10,12,0.02222,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,70,"        return super.optimize(optData);
",4,0,0,1,2,1,0,0,0,4,31,5,0.02222,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,95,"        super.parseOptimizationData(optData);
",4,0,0,1,2,0,0,0,0,4,37,5,0.02222,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,99,"        for (OptimizationData data : optData) {
",4,0,0,1,3,0,0,2,0,6,39,4,0.02222,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,100,"            if (data instanceof SearchInterval) {
",2,0,0,1,3,0,0,2,0,4,37,7,0.02222,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,107,"            if (data instanceof UnivariateObjectiveFunction) {
",2,0,0,1,3,0,0,2,0,4,50,7,0.02222,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,108,"                function = ((UnivariateObjectiveFunction) data).getObjectiveFunction();
",4,0,0,3,6,0,2,2,0,9,71,8,0.02222,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,109,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.02222,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,111,"            if (data instanceof GoalType) {
",2,0,0,1,3,0,0,2,0,4,31,7,0.02222,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,112,"                goal = (GoalType) data;
",4,0,0,1,2,0,0,2,0,7,23,8,0.02222,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,113,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.02222,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,116,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02222,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateObjectiveFunction,6,35,"    public UnivariateObjectiveFunction(UnivariateFunction f) {
",4,0,0,1,3,1,0,2,0,7,58,2,0.02222,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateObjectiveFunction,6,36,"        function = f;
",4,0,0,0,0,0,0,0,0,5,13,4,0.02222,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateObjectiveFunction,6,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02222,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateObjectiveFunction,6,45,"        return function;
",2,0,0,0,0,1,0,0,0,2,16,4,0.02222,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,698,"            } else if (fp < 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.02174,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,699,"                paru = FastMath.min(paru, lmPar);
",2,0,0,1,2,0,8,0,0,11,33,9,0.02174,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,81,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,0.02174,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,83,"        if (rel < MIN_RELATIVE_TOLERANCE) {
",4,1,0,1,3,0,0,0,0,5,35,4,0.02174,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,86,"        if (abs <= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.02174,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,90,"        relativeThreshold = rel;
",4,0,0,0,0,0,0,0,0,5,24,4,0.02174,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,91,"        absoluteThreshold = abs;
",4,0,0,0,0,0,0,0,0,5,24,4,0.02174,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,92,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02174,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,48,"    private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));
",2,2,0,2,4,3,4,0,0,11,74,2,0.02174,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,52,"    private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);
",2,1,0,1,2,3,4,0,0,10,74,2,0.02174,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,49,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,0.02174,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,50,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02174,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3026,"        if (Double.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.02174,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3029,"        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,72,5,0.02174,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,135,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.02128,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,676,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.02083,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,677,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.02083,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,678,"                work1[pj] = work3[pj] * diag[pj] / dxNorm;
",2,2,1,3,6,0,0,0,0,17,42,8,0.02083,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,680,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.02083,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,681,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.02083,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,682,"                work1[pj] /= work2[j];
",0,0,1,2,4,0,0,0,0,9,22,8,0.02083,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,683,"                double tmp = work1[pj];
",2,0,1,1,2,0,0,0,0,6,23,9,0.02083,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,684,"                for (int i = j + 1; i < solvedCols; ++i) {
",10,2,0,1,3,0,0,0,0,13,42,8,0.02083,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,688,"            sum2 = 0;
",2,0,0,0,0,0,0,0,0,3,9,6,0.02083,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,689,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.02083,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,690,"                double s = work1[permutation[j]];
",2,0,1,2,4,0,0,0,0,8,33,9,0.02083,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,691,"                sum2 += s * s;
",6,1,0,0,0,0,0,0,0,8,14,8,0.02083,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,693,"            double correction = fp / (delta * sum2);
",8,2,0,1,2,0,0,0,0,10,40,7,0.02083,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,696,"            if (fp > 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.02083,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,703,"            lmPar = FastMath.max(parl, lmPar + correction);
",6,1,0,1,2,0,6,0,0,14,47,6,0.02083,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,162,"                    setCost(computeCost(currentResiduals));
",0,0,0,2,4,0,6,0,0,6,39,11,0.02083,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,163,"                    return current;
",2,0,0,0,0,1,0,0,0,2,15,10,0.02083,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,165,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02041,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,300,"            final double[] bp = new double[m];
",2,0,1,2,4,1,0,0,0,5,34,5,0.02041,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,303,"            for (int row = 0; row < m; row++) {
",8,1,0,1,3,0,0,0,0,10,35,5,0.02041,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,304,"                bp[row] = b.getEntry(pivot[row]);
",0,0,1,3,6,0,4,0,0,13,33,7,0.02041,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,308,"            for (int col = 0; col < m; col++) {
",8,1,0,1,3,0,0,0,0,10,35,5,0.02041,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,309,"                final double bpCol = bp[col];
",2,0,1,1,2,1,0,0,0,7,29,7,0.02041,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,310,"                for (int i = col + 1; i < m; i++) {
",10,2,0,1,3,0,0,0,0,13,35,7,0.02041,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,316,"            for (int col = m - 1; col >= 0; col--) {
",8,2,0,1,3,0,0,0,0,11,40,5,0.02041,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,317,"                bp[col] /= lu[col][col];
",0,0,1,3,6,0,0,0,0,11,24,7,0.02041,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,318,"                final double bpCol = bp[col];
",2,0,1,1,2,1,0,0,0,7,29,7,0.02041,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,319,"                for (int i = 0; i < col; i++) {
",8,1,0,1,3,0,0,0,0,10,31,7,0.02041,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,324,"            return new ArrayRealVector(bp, false);
",2,0,0,1,2,1,0,2,0,5,38,6,0.02041,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,63,"        this(true, checker);
",2,0,0,1,2,0,0,0,0,3,20,4,0.02000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02000,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,132,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.01961,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,601,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.01961,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,602,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.01961,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,603,"                work1[pj] *= diag[pj] / dxNorm;
",2,1,1,2,4,0,0,0,0,12,31,8,0.01961,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,605,"            sum2 = 0;
",2,0,0,0,0,0,0,0,0,3,9,6,0.01961,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,606,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.01961,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,607,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.01961,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,608,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,0.01961,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,609,"                for (int i = 0; i < j; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.01961,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,612,"                double s = (work1[pj] - sum) / diagR[pj];
",4,2,1,3,6,0,0,0,0,14,41,9,0.01961,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,613,"                work1[pj] = s;
",2,0,1,1,2,0,0,0,0,7,14,8,0.01961,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,614,"                sum2 += s * s;
",6,1,0,0,0,0,0,0,0,8,14,8,0.01961,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,616,"            parl = fp / (delta * sum2);
",8,2,0,1,2,0,0,0,0,11,27,6,0.01961,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,60,"        return evaluations.getMaximalCount();
",0,0,0,1,2,1,4,0,0,4,37,5,0.01923,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,117,"        if (maxIterationCount != ITERATION_CHECK_DISABLED) {
",4,1,0,1,3,0,0,0,0,5,52,4,0.01923,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,123,"        final double[] p = previous.getValueRef();
",2,0,0,2,4,1,4,0,0,7,42,4,0.01923,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,124,"        final double[] c = current.getValueRef();
",2,0,0,2,4,1,4,0,0,7,41,4,0.01923,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,125,"        for (int i = 0; i < p.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.01923,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,126,"            final double pi         = p[i];
",2,0,1,1,2,1,0,0,0,7,31,6,0.01923,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,127,"            final double ci         = c[i];
",2,0,1,1,2,1,0,0,0,7,31,6,0.01923,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,128,"            final double difference = FastMath.abs(pi - ci);
",6,1,0,1,2,1,4,0,0,12,48,6,0.01923,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,129,"            final double size       = FastMath.max(FastMath.abs(pi), FastMath.abs(ci));
",2,0,0,3,6,1,16,0,0,19,75,6,0.01923,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,130,"            if (difference > size * getRelativeThreshold() &&
",4,3,0,1,3,0,2,0,0,9,49,6,0.01923,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,39,"public class SimpleVectorValueChecker
",2,0,0,0,0,1,0,0,0,3,37,1,0.01923,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,105,"        return super.getValue();
",2,0,0,1,2,1,0,0,0,2,24,5,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,496,"                    currentCost = previousCost;
",4,0,0,0,0,0,0,0,0,5,27,10,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,497,"                    for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,10,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,498,"                        int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,13,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,499,"                        currentPoint[pj] = oldX[pj];
",0,0,1,2,4,0,0,0,0,9,28,12,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,501,"                    tmpVec    = weightedResidual;
",4,0,0,0,0,0,0,0,0,5,29,10,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,502,"                    weightedResidual = oldRes;
",4,0,0,0,0,0,0,0,0,5,26,10,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,503,"                    oldRes    = tmpVec;
",4,0,0,0,0,0,0,0,0,5,19,10,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,504,"                    tmpVec    = currentObjective;
",4,0,0,0,0,0,0,0,0,5,29,10,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,505,"                    currentObjective = oldObj;
",4,0,0,0,0,0,0,0,0,5,26,10,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,506,"                    oldObj    = tmpVec;
",4,0,0,0,0,0,0,0,0,5,19,10,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,508,"                    current = new PointVectorValuePair(currentPoint, currentObjective);
",6,0,0,1,2,0,0,2,0,9,67,10,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,769,"                        final double cotan = rkk / lmDiag[k];
",4,1,1,1,2,1,0,0,0,10,37,12,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,770,"                        sin   = 1.0 / FastMath.sqrt(1.0 + cotan * cotan);
",6,3,0,1,2,0,4,0,0,14,49,12,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,771,"                        cos   = sin * cotan;
",6,1,0,0,0,0,0,0,0,8,20,12,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,772,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,151,"                for (int i = 0; i < nC; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,8,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,152,"                    currentPoint[i] += dX[i];
",0,0,1,2,4,0,0,0,0,9,25,10,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,156,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,159,"            if (previous != null) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,160,"                converged = checker.converged(iter, previous, current);
",2,0,0,1,2,0,10,0,0,13,55,8,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,161,"                if (converged) {
",2,0,0,1,3,0,0,0,0,2,16,8,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,166,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01923,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,105,"        return maximalCount;
",2,0,0,0,0,1,0,0,0,2,20,4,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,76,"        this(matrix, DEFAULT_TOO_SMALL);
",4,0,0,1,2,0,0,0,0,4,32,4,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,77,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,86,"    public LUDecomposition(RealMatrix matrix, double singularityThreshold) {
",6,0,0,1,3,1,0,2,0,9,72,2,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,87,"        if (!matrix.isSquare()) {
",0,0,0,2,5,0,4,0,0,5,25,4,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,92,"        final int m = matrix.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,42,4,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,93,"        lu = matrix.getData();
",2,0,0,1,2,0,4,0,0,7,22,4,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,94,"        pivot = new int[m];
",2,0,1,1,2,0,0,0,0,5,19,4,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,95,"        cachedL = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,96,"        cachedU = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,97,"        cachedP = null;
",2,0,0,0,0,0,0,0,0,3,15,4,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,100,"        for (int row = 0; row < m; row++) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,101,"            pivot[row] = row;
",2,0,1,1,2,0,0,0,0,7,17,6,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,103,"        even     = true;
",2,0,0,0,0,0,0,0,0,4,16,4,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,104,"        singular = false;
",2,0,0,0,0,0,0,0,0,4,17,4,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,107,"        for (int col = 0; col < m; col++) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,110,"            for (int row = 0; row < col; row++) {
",8,1,0,1,3,0,0,0,0,10,37,6,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,120,"            int max = col; // permutation row
",4,0,0,0,0,0,0,0,0,4,33,7,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,121,"            double largest = Double.NEGATIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,42,7,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,122,"            for (int row = col; row < m; row++) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,123,"                final double[] luRow = lu[row];
",2,0,1,2,4,1,0,0,0,7,31,8,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,124,"                double sum = luRow[col];
",2,0,1,1,2,0,0,0,0,6,24,9,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,125,"                for (int i = 0; i < col; i++) {
",8,1,0,1,3,0,0,0,0,10,31,8,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,128,"                luRow[col] = sum;
",2,0,1,1,2,0,0,0,0,7,17,8,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,131,"                if (FastMath.abs(sum) > largest) {
",2,1,0,2,5,0,6,0,0,9,34,8,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,132,"                    largest = FastMath.abs(sum);
",2,0,0,1,2,0,6,0,0,9,28,10,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,133,"                    max = row;
",4,0,0,0,0,0,0,0,0,5,10,10,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,138,"            if (FastMath.abs(lu[max][col]) < singularityThreshold) {
",2,1,1,4,9,0,4,0,0,13,56,6,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,144,"            if (max != col) {
",4,1,0,1,3,0,0,0,0,5,17,6,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,160,"            final double luDiag = lu[col][col];
",2,0,1,2,4,1,0,0,0,9,35,6,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,161,"            for (int row = col + 1; row < m; row++) {
",10,2,0,1,3,0,0,0,0,13,41,6,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,258,"        return new Solver(lu, pivot, singular);
",6,0,0,1,2,1,0,2,0,8,39,5,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,279,"        private Solver(final double[][] lu, final int[] pivot, final boolean singular) {
",8,0,0,4,9,4,0,0,0,12,80,3,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,280,"            this.lu       = lu;
",4,0,0,0,0,0,0,0,0,5,19,5,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,281,"            this.pivot    = pivot;
",4,0,0,0,0,0,0,0,0,5,22,5,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,282,"            this.singular = singular;
",4,0,0,0,0,0,0,0,0,5,25,5,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,283,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,262,"    private static class Solver implements DecompositionSolver {
",2,0,0,0,1,2,0,2,0,6,60,2,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,292,"            final int m = pivot.length;
",6,0,0,0,0,1,0,0,0,7,27,5,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,293,"            if (b.getDimension() != m) {
",2,1,0,2,5,0,4,0,0,7,28,5,0.01923,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,296,"            if (singular) {
",2,0,0,1,3,0,0,0,0,2,15,5,0.01923,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,599,"        double parl = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,600,"        if (rank == solvedCols) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,620,"        sum2 = 0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,621,"        for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,622,"            int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,7,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,623,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,624,"            for (int i = 0; i <= j; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,625,"                sum += weightedJacobian[i][pj] * qy[i];
",2,1,1,3,6,0,0,0,0,14,39,8,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,627,"            sum /= diag[pj];
",2,0,1,1,2,0,0,0,0,7,16,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,628,"            sum2 += sum * sum;
",6,1,0,0,0,0,0,0,0,8,18,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,630,"        double gNorm = FastMath.sqrt(sum2);
",2,0,0,1,2,0,6,0,0,8,35,5,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,631,"        double paru = gNorm / delta;
",6,1,0,0,0,0,0,0,0,7,28,5,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,632,"        if (paru == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,639,"        lmPar = FastMath.min(paru, FastMath.max(lmPar, parl));
",2,0,0,2,4,0,14,0,0,17,54,4,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,640,"        if (lmPar == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,644,"        for (int countdown = 10; countdown >= 0; --countdown) {
",6,1,0,1,3,0,0,0,0,8,55,4,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,647,"            if (lmPar == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,650,"            double sPar = FastMath.sqrt(lmPar);
",2,0,0,1,2,0,6,0,0,8,35,7,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,651,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,652,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,653,"                work1[pj] = sPar * diag[pj];
",2,1,1,2,4,0,0,0,0,12,28,8,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,655,"            determineLMDirection(qy, work1, work2, work3);
",0,0,0,1,2,0,10,0,0,10,46,7,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,657,"            dxNorm = 0;
",2,0,0,0,0,0,0,0,0,3,11,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,658,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,659,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,660,"                double s = diag[pj] * lmDir[pj];
",2,1,1,2,4,0,0,0,0,11,32,9,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,661,"                work3[pj] = s;
",2,0,1,1,2,0,0,0,0,7,14,8,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,662,"                dxNorm += s * s;
",6,1,0,0,0,0,0,0,0,8,16,8,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,664,"            dxNorm = FastMath.sqrt(dxNorm);
",2,0,0,1,2,0,6,0,0,9,31,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,665,"            double previousFP = fp;
",4,0,0,0,0,0,0,0,0,4,23,7,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,666,"            fp = dxNorm - delta;
",6,1,0,0,0,0,0,0,0,8,20,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,670,"            if ((FastMath.abs(fp) <= 0.1 * delta) ||
",2,3,0,2,5,0,6,0,0,11,40,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,672,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,733,"        for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,734,"            int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,7,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,735,"            for (int i = j + 1; i < solvedCols; ++i) {
",10,2,0,1,3,0,0,0,0,13,42,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,738,"            lmDir[j] = diagR[pj];
",0,0,1,2,4,0,0,0,0,9,21,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,739,"            work[j]  = qy[j];
",0,0,1,2,4,0,0,0,0,9,17,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,743,"        for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,747,"            int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,7,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,748,"            double dpj = diag[pj];
",2,0,1,1,2,0,0,0,0,6,22,7,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,749,"            if (dpj != 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,750,"                Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);
",6,1,0,1,2,0,6,0,0,13,45,9,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,752,"            lmDiag[j] = dpj;
",2,0,1,1,2,0,0,0,0,7,16,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,757,"            double qtbpj = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,758,"            for (int k = j; k < solvedCols; ++k) {
",10,1,0,1,3,0,0,0,0,12,38,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,759,"                int pk = permutation[k];
",2,0,1,1,2,0,0,0,0,6,24,9,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,763,"                if (lmDiag[k] != 0) {
",0,1,1,2,5,0,0,0,0,5,21,8,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,767,"                    double rkk = weightedJacobian[k][pk];
",2,0,1,2,4,0,0,0,0,8,37,11,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,768,"                    if (FastMath.abs(rkk) < FastMath.abs(lmDiag[k])) {
",0,1,1,4,9,0,10,0,0,15,50,10,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,780,"                    weightedJacobian[k][pk] = cos * rkk + sin * lmDiag[k];
",6,3,1,3,6,0,0,0,0,20,54,10,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,781,"                    final double temp = cos * work[k] + sin * qtbpj;
",8,3,1,1,2,1,0,0,0,16,48,10,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,782,"                    qtbpj = -sin * work[k] + cos * qtbpj;
",8,3,1,1,2,0,0,0,0,17,37,10,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,783,"                    work[k] = temp;
",2,0,1,1,2,0,0,0,0,7,15,10,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,786,"                    for (int i = k + 1; i < solvedCols; ++i) {
",10,2,0,1,3,0,0,0,0,13,42,10,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,797,"            lmDiag[j] = weightedJacobian[j][permutation[j]];
",0,0,1,4,8,0,0,0,0,13,48,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,798,"            weightedJacobian[j][permutation[j]] = lmDir[j];
",0,0,1,4,8,0,0,0,0,13,47,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,803,"        int nSing = solvedCols;
",4,0,0,0,0,0,0,0,0,4,23,5,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,804,"        for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,805,"            if ((lmDiag[j] == 0) && (nSing == solvedCols)) {
",4,3,1,4,9,0,0,0,0,11,48,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,808,"            if (nSing < solvedCols) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,812,"        if (nSing > 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,813,"            for (int j = nSing - 1; j >= 0; --j) {
",8,2,0,1,3,0,0,0,0,11,38,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,814,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,815,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,816,"                for (int i = j + 1; i < nSing; ++i) {
",10,2,0,1,3,0,0,0,0,13,37,8,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,819,"                work[j] = (work[j] - sum) / lmDiag[j];
",2,2,1,4,8,0,0,0,0,17,38,8,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,824,"        for (int j = 0; j < lmDir.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,825,"            lmDir[permutation[j]] = work[j];
",0,0,1,3,6,0,0,0,0,11,32,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,827,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01887,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3467,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.01887,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3468,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.01887,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,463,"                    double tmp =
",2,0,0,0,0,0,0,0,0,2,12,11,0.01852,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,465,"                        if ((0.1 * currentCost >= previousCost) || (tmp < 0.1)) {
",6,4,0,3,7,0,0,0,0,10,57,10,0.01852,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,468,"                        delta = tmp * FastMath.min(delta, 10.0 * lmNorm);
",6,2,0,1,2,0,6,0,0,15,49,10,0.01852,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,469,"                        lmPar /= tmp;
",4,0,0,0,0,0,0,0,0,5,13,10,0.01852,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,470,"                } else if ((lmPar == 0) || (ratio >= 0.75)) {
",4,3,0,3,8,0,0,0,0,7,45,9,0.01852,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,114,"            final double[] currentResiduals = computeResiduals(currentObjective);
",2,0,0,2,4,1,4,0,0,7,69,6,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,115,"            final RealMatrix weightedJacobian = computeWeightedJacobian(currentPoint);
",2,0,0,1,2,1,4,2,0,9,74,6,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,116,"            current = new PointVectorValuePair(currentPoint, currentObjective);
",6,0,0,1,2,0,0,2,0,9,67,6,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,119,"            final double[]   b = new double[nC];
",2,0,1,2,4,1,0,0,0,5,36,6,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,120,"            final double[][] a = new double[nC][nC];
",2,0,1,4,8,1,0,0,0,7,40,6,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,121,"            for (int i = 0; i < nR; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,6,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,123,"                final double[] grad   = weightedJacobian.getRow(i);
",2,0,0,2,4,1,6,0,0,9,51,8,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,124,"                final double weight   = residualsWeights[i];
",2,0,1,1,2,1,0,0,0,7,44,8,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,125,"                final double residual = currentResiduals[i];
",2,0,1,1,2,1,0,0,0,7,44,8,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,128,"                final double wr = weight * residual;
",6,1,0,0,0,1,0,0,0,8,36,8,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,129,"                for (int j = 0; j < nC; ++j) {
",8,1,0,1,3,0,0,0,0,10,30,8,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,130,"                    b[j] += wr * grad[j];
",2,1,1,2,4,0,0,0,0,12,21,10,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,134,"                for (int k = 0; k < nC; ++k) {
",8,1,0,1,3,0,0,0,0,10,30,8,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,135,"                    double[] ak = a[k];
",2,0,1,2,4,0,0,0,0,6,19,11,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,136,"                    double wgk = weight * grad[k];
",4,1,1,1,2,0,0,0,0,9,30,11,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,137,"                    for (int l = 0; l < nC; ++l) {
",8,1,0,1,3,0,0,0,0,10,30,10,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,138,"                        ak[l] += wgk * grad[l];
",2,1,1,2,4,0,0,0,0,12,23,12,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,145,"                RealMatrix mA = new BlockRealMatrix(a);
",4,0,0,1,2,0,0,4,0,8,39,8,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,146,"                DecompositionSolver solver = useLU ?
",4,0,0,0,0,0,0,2,0,6,36,8,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,149,"                final double[] dX = solver.solve(new ArrayRealVector(b, false)).toArray();
",4,0,0,4,8,1,6,2,0,14,74,8,0.01818,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,83,"        final ConvergenceChecker<PointVectorValuePair> checker
",2,0,0,0,0,1,0,4,0,7,54,4,0.01786,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,87,"        if (checker == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.01786,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,91,"        final double[] targetValues = getTarget();
",2,0,0,2,4,1,2,0,0,5,42,4,0.01786,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,92,"        final int nR = targetValues.length; // Number of observed data.
",6,0,0,0,0,1,0,0,0,7,63,4,0.01786,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,94,"        final RealMatrix weightMatrix = getWeight();
",2,0,0,1,2,1,2,2,0,7,44,4,0.01786,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,96,"        final double[] residualsWeights = new double[nR];
",2,0,1,2,4,1,0,0,0,5,49,4,0.01786,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,97,"        for (int i = 0; i < nR; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.01786,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,98,"            residualsWeights[i] = weightMatrix.getEntry(i, i);
",0,0,1,2,4,0,8,0,0,13,50,6,0.01786,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,101,"        final double[] currentPoint = getStartPoint();
",2,0,0,2,4,1,2,0,0,5,46,4,0.01786,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,102,"        final int nC = currentPoint.length;
",6,0,0,0,0,1,0,0,0,7,35,4,0.01786,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,105,"        PointVectorValuePair current = null;
",2,0,0,0,0,0,0,2,0,4,36,4,0.01786,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,106,"        int iter = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.01786,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,107,"        for (boolean converged = false; !converged;) {
",4,0,0,1,3,0,0,0,0,6,46,4,0.01786,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,108,"            ++iter;
",2,0,0,0,0,0,0,0,0,3,7,6,0.01786,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,111,"            PointVectorValuePair previous = current;
",4,0,0,0,0,0,0,2,0,6,40,6,0.01786,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,113,"            final double[] currentObjective = computeObjectiveValue(currentPoint);
",2,0,0,2,4,1,4,0,0,7,70,6,0.01786,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01786,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,67,"        super(relativeThreshold, absoluteThreshold);
",4,0,0,1,2,0,0,0,0,4,44,4,0.01754,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,68,"        maxIterationCount = ITERATION_CHECK_DISABLED;
",4,0,0,0,0,0,0,0,0,5,45,4,0.01754,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01754,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,81,"        checkParameters();
",0,0,0,1,2,0,2,0,0,2,18,5,0.01754,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,176,"        if (getLowerBound() != null ||
",0,2,0,1,3,0,2,0,0,5,30,4,0.01754,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,52,"public class GaussNewtonOptimizer extends AbstractLeastSquaresOptimizer {
",2,0,0,0,1,1,0,2,0,5,73,1,0.01754,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,74,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,0.01724,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,75,"        this.useLU = useLU;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01724,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01724,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1290,"                        sum += block[k++] * v[q++];
",6,1,1,2,4,0,0,0,0,14,27,12,0.01667,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1264,"        if (v.length != columns) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.01538,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1267,"        final double[] out = new double[rows];
",2,0,1,2,4,1,0,0,0,5,38,4,0.01538,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1270,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.01538,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1271,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.01538,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1272,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.01538,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1273,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.01538,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1274,"                final double[] block  = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,63,8,0.01538,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1275,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.01538,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1276,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.01538,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1277,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.01538,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1278,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.01538,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1279,"                    double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,11,0.01538,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1280,"                    int q = qStart;
",4,0,0,0,0,0,0,0,0,4,15,11,0.01538,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1281,"                    while (q < qEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,10,0.01538,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1289,"                    while (q < qEnd) {
",4,1,0,1,3,0,0,0,0,5,18,10,0.01538,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1292,"                    out[p] += sum;
",2,0,1,1,2,0,0,0,0,7,14,10,0.01538,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1297,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.01538,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,162,"        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);
",4,0,0,1,2,0,0,0,0,4,51,5,0.01408,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,163,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01408,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,598,"        final double[][] data = new double[getRowDimension()][getColumnDimension()];
",2,0,0,6,12,1,4,0,0,7,76,4,0.01408,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,599,"        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,66,4,0.01408,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,601,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.01408,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,602,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.01408,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,603,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.01408,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,604,"            int regularPos = 0;
",2,0,0,0,0,0,0,0,0,2,19,7,0.01408,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,605,"            int lastPos = 0;
",2,0,0,0,0,0,0,0,0,2,16,7,0.01408,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,606,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.01408,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,607,"                final double[] dataP = data[p];
",2,0,1,2,4,1,0,0,0,7,31,8,0.01408,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,608,"                int blockIndex = iBlock * blockColumns;
",6,1,0,0,0,0,0,0,0,7,39,9,0.01408,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,609,"                int dataPos = 0;
",2,0,0,0,0,0,0,0,0,2,16,9,0.01408,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,610,"                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {
",8,2,0,1,3,0,0,0,0,11,59,8,0.01408,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,614,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);
",0,0,1,2,4,0,12,0,0,16,75,9,0.01408,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,615,"                regularPos += BLOCK_SIZE;
",4,0,0,0,0,0,0,0,0,5,25,8,0.01408,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,616,"                lastPos    += lastColumns;
",4,0,0,0,0,0,0,0,0,5,26,8,0.01408,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,620,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.01408,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,516,"                    setCost(currentCost);
",0,0,0,1,2,0,4,0,0,4,21,11,0.01389,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,517,"                    return current;
",2,0,0,0,0,1,0,0,0,2,15,10,0.01389,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,923,"        rank = solvedCols;
",4,0,0,0,0,0,0,0,0,5,18,4,0.01190,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,924,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01190,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,591,"            lmPar = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.01149,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,592,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.01149,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,287,"        final int nR = getTarget().length; // Number of observed data.
",4,0,0,1,2,1,2,0,0,7,62,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,288,"        final double[] currentPoint = getStartPoint();
",2,0,0,2,4,1,2,0,0,5,46,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,289,"        final int nC = currentPoint.length; // Number of parameters.
",6,0,0,0,0,1,0,0,0,7,60,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,292,"        solvedCols  = FastMath.min(nR, nC);
",2,0,0,1,2,0,8,0,0,11,35,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,293,"        diagR       = new double[nC];
",2,0,1,1,2,0,0,0,0,5,29,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,294,"        jacNorm     = new double[nC];
",2,0,1,1,2,0,0,0,0,5,29,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,295,"        beta        = new double[nC];
",2,0,1,1,2,0,0,0,0,5,29,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,296,"        permutation = new int[nC];
",2,0,1,1,2,0,0,0,0,5,26,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,297,"        lmDir       = new double[nC];
",2,0,1,1,2,0,0,0,0,5,29,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,300,"        double   delta   = 0;
",2,0,0,0,0,0,0,0,0,2,21,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,301,"        double   xNorm   = 0;
",2,0,0,0,0,0,0,0,0,2,21,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,302,"        double[] diag    = new double[nC];
",2,0,1,2,4,0,0,0,0,4,34,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,303,"        double[] oldX    = new double[nC];
",2,0,1,2,4,0,0,0,0,4,34,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,304,"        double[] oldRes  = new double[nR];
",2,0,1,2,4,0,0,0,0,4,34,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,305,"        double[] oldObj  = new double[nR];
",2,0,1,2,4,0,0,0,0,4,34,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,306,"        double[] qtf     = new double[nR];
",2,0,1,2,4,0,0,0,0,4,34,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,307,"        double[] work1   = new double[nC];
",2,0,1,2,4,0,0,0,0,4,34,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,308,"        double[] work2   = new double[nC];
",2,0,1,2,4,0,0,0,0,4,34,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,309,"        double[] work3   = new double[nC];
",2,0,1,2,4,0,0,0,0,4,34,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,311,"        final RealMatrix weightMatrixSqrt = getWeightSquareRoot();
",2,0,0,1,2,1,2,2,0,7,58,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,314,"        double[] currentObjective = computeObjectiveValue(currentPoint);
",2,0,0,2,4,0,4,0,0,6,64,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,315,"        double[] currentResiduals = computeResiduals(currentObjective);
",2,0,0,2,4,0,4,0,0,6,63,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,316,"        PointVectorValuePair current = new PointVectorValuePair(currentPoint, currentObjective);
",6,0,0,1,2,0,0,4,0,10,88,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,317,"        double currentCost = computeCost(currentResiduals);
",2,0,0,1,2,0,4,0,0,6,51,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,320,"        lmPar = 0;
",2,0,0,0,0,0,0,0,0,3,10,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,321,"        boolean firstIteration = true;
",2,0,0,0,0,0,0,0,0,3,30,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,322,"        int iter = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,323,"        final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();
",2,0,0,1,2,1,2,4,0,9,81,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,325,"            ++iter;
",2,0,0,0,0,0,0,0,0,3,7,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,326,"            final PointVectorValuePair previous = current;
",4,0,0,0,0,1,0,2,0,7,46,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,329,"            qrDecomposition(computeWeightedJacobian(currentPoint));
",0,0,0,2,4,0,6,0,0,6,55,7,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,331,"            weightedResidual = weightMatrixSqrt.operate(currentResiduals);
",2,0,0,1,2,0,6,0,0,9,62,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,332,"            for (int i = 0; i < nR; i++) {
",8,1,0,1,3,0,0,0,0,10,30,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,333,"                qtf[i] = weightedResidual[i];
",0,0,1,2,4,0,0,0,0,9,29,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,337,"            qTy(qtf);
",0,0,0,1,2,0,4,0,0,4,9,7,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,341,"            for (int k = 0; k < solvedCols; ++k) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,342,"                int pk = permutation[k];
",2,0,1,1,2,0,0,0,0,6,24,9,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,343,"                weightedJacobian[k][pk] = diagR[pk];
",0,0,1,3,6,0,0,0,0,11,36,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,346,"            if (firstIteration) {
",2,0,0,1,3,0,0,0,0,2,21,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,349,"                xNorm = 0;
",2,0,0,0,0,0,0,0,0,3,10,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,350,"                for (int k = 0; k < nC; ++k) {
",8,1,0,1,3,0,0,0,0,10,30,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,351,"                    double dk = jacNorm[k];
",2,0,1,1,2,0,0,0,0,6,23,11,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,352,"                    if (dk == 0) {
",2,1,0,1,3,0,0,0,0,3,14,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,355,"                    double xk = dk * currentPoint[k];
",4,1,1,1,2,0,0,0,0,9,33,11,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,356,"                    xNorm  += xk * xk;
",6,1,0,0,0,0,0,0,0,8,18,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,357,"                    diag[k] = dk;
",2,0,1,1,2,0,0,0,0,7,13,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,359,"                xNorm = FastMath.sqrt(xNorm);
",2,0,0,1,2,0,6,0,0,9,29,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,362,"                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);
",10,2,0,2,4,0,0,0,0,13,81,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,366,"            double maxCosine = 0;
",2,0,0,0,0,0,0,0,0,2,21,7,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,367,"            if (currentCost != 0) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,368,"                for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,369,"                    int    pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,27,11,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,370,"                    double s  = jacNorm[pj];
",2,0,1,1,2,0,0,0,0,6,24,11,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,371,"                    if (s != 0) {
",2,1,0,1,3,0,0,0,0,3,13,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,372,"                        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,13,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,373,"                        for (int i = 0; i <= j; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,12,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,374,"                            sum += weightedJacobian[i][pj] * qtf[i];
",2,1,1,3,6,0,0,0,0,14,40,14,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,376,"                        maxCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * currentCost));
",6,2,0,3,6,0,12,0,0,21,75,12,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,380,"            if (maxCosine <= orthoTolerance) {
",4,1,0,1,3,0,0,0,0,5,34,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,387,"            for (int j = 0; j < nC; ++j) {
",8,1,0,1,3,0,0,0,0,10,30,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,388,"                diag[j] = FastMath.max(diag[j], jacNorm[j]);
",0,0,1,4,8,0,4,0,0,17,44,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,392,"            for (double ratio = 0; ratio < 1.0e-4;) {
",4,1,0,1,3,0,0,0,0,5,41,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,395,"                for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,396,"                    int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,11,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,397,"                    oldX[pj] = currentPoint[pj];
",0,0,1,2,4,0,0,0,0,9,28,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,399,"                final double previousCost = currentCost;
",4,0,0,0,0,1,0,0,0,5,40,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,400,"                double[] tmpVec = weightedResidual;
",4,0,0,1,2,0,0,0,0,4,35,9,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,401,"                weightedResidual = oldRes;
",4,0,0,0,0,0,0,0,0,5,26,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,402,"                oldRes    = tmpVec;
",4,0,0,0,0,0,0,0,0,5,19,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,403,"                tmpVec    = currentObjective;
",4,0,0,0,0,0,0,0,0,5,29,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,404,"                currentObjective = oldObj;
",4,0,0,0,0,0,0,0,0,5,26,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,405,"                oldObj    = tmpVec;
",4,0,0,0,0,0,0,0,0,5,19,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,408,"                determineLMParameter(qtf, delta, diag, work1, work2, work3);
",0,0,0,1,2,0,14,0,0,14,60,9,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,411,"                double lmNorm = 0;
",2,0,0,0,0,0,0,0,0,2,18,9,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,412,"                for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,413,"                    int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,11,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,414,"                    lmDir[pj] = -lmDir[pj];
",0,0,1,2,4,0,0,0,0,10,23,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,415,"                    currentPoint[pj] = oldX[pj] + lmDir[pj];
",0,1,1,3,6,0,0,0,0,14,40,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,416,"                    double s = diag[pj] * lmDir[pj];
",2,1,1,2,4,0,0,0,0,11,32,11,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,417,"                    lmNorm  += s * s;
",6,1,0,0,0,0,0,0,0,8,17,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,419,"                lmNorm = FastMath.sqrt(lmNorm);
",2,0,0,1,2,0,6,0,0,9,31,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,421,"                if (firstIteration) {
",2,0,0,1,3,0,0,0,0,2,21,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,422,"                    delta = FastMath.min(delta, lmNorm);
",2,0,0,1,2,0,8,0,0,11,36,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,426,"                currentObjective = computeObjectiveValue(currentPoint);
",2,0,0,1,2,0,4,0,0,7,55,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,427,"                currentResiduals = computeResiduals(currentObjective);
",2,0,0,1,2,0,4,0,0,7,54,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,428,"                current = new PointVectorValuePair(currentPoint, currentObjective);
",6,0,0,1,2,0,0,2,0,9,67,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,429,"                currentCost = computeCost(currentResiduals);
",2,0,0,1,2,0,4,0,0,7,44,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,432,"                double actRed = -1.0;
",2,0,0,0,0,0,0,0,0,3,21,9,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,433,"                if (0.1 * currentCost < previousCost) {
",4,2,0,1,3,0,0,0,0,6,39,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,434,"                    double r = currentCost / previousCost;
",6,1,0,0,0,0,0,0,0,7,38,11,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,435,"                    actRed = 1.0 - r * r;
",6,2,0,0,0,0,0,0,0,9,21,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,440,"                for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,441,"                    int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,11,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,442,"                    double dirJ = lmDir[pj];
",2,0,1,1,2,0,0,0,0,6,24,11,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,443,"                    work1[j] = 0;
",0,0,1,1,2,0,0,0,0,5,13,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,444,"                    for (int i = 0; i <= j; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,445,"                        work1[i] += weightedJacobian[i][pj] * dirJ;
",2,1,1,3,6,0,0,0,0,14,43,12,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,448,"                double coeff1 = 0;
",2,0,0,0,0,0,0,0,0,2,18,9,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,449,"                for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,450,"                    coeff1 += work1[j] * work1[j];
",2,1,1,2,4,0,0,0,0,12,30,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,452,"                double pc2 = previousCost * previousCost;
",6,1,0,0,0,0,0,0,0,7,41,9,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,453,"                coeff1 = coeff1 / pc2;
",6,1,0,0,0,0,0,0,0,8,22,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,454,"                double coeff2 = lmPar * lmNorm * lmNorm / pc2;
",10,2,0,0,0,0,0,0,0,12,46,9,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,455,"                double preRed = coeff1 + 2 * coeff2;
",6,2,0,0,0,0,0,0,0,8,36,9,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,456,"                double dirDer = -(coeff1 + coeff2);
",6,1,0,1,2,0,0,0,0,8,35,9,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,459,"                ratio = (preRed == 0) ? 0 : (actRed / preRed);
",8,2,0,2,4,0,0,0,0,11,46,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,462,"                if (ratio <= 0.25) {
",2,1,0,1,3,0,0,0,0,3,20,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,471,"                    delta = 2 * lmNorm;
",4,1,0,0,0,0,0,0,0,6,19,11,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,472,"                    lmPar *= 0.5;
",2,0,0,0,0,0,0,0,0,3,13,11,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,476,"                if (ratio >= 1.0e-4) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,478,"                    firstIteration = false;
",2,0,0,0,0,0,0,0,0,4,23,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,479,"                    xNorm = 0;
",2,0,0,0,0,0,0,0,0,3,10,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,480,"                    for (int k = 0; k < nC; ++k) {
",8,1,0,1,3,0,0,0,0,10,30,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,481,"                        double xK = diag[k] * currentPoint[k];
",2,1,1,2,4,0,0,0,0,11,38,13,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,482,"                        xNorm += xK * xK;
",6,1,0,0,0,0,0,0,0,8,17,12,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,484,"                    xNorm = FastMath.sqrt(xNorm);
",2,0,0,1,2,0,6,0,0,9,29,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,487,"                    if (checker != null) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,512,"                if ((FastMath.abs(actRed) <= costRelativeTolerance &&
",2,3,0,1,4,0,6,0,0,11,53,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,522,"                if ((FastMath.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
",4,4,0,5,11,0,6,0,0,14,87,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,525,"                } else if (delta <= 2.2204e-16 * xNorm) {
",4,2,0,1,4,0,0,0,0,6,41,9,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,528,"                } else if (maxCosine <= 2.2204e-16)  {
",2,1,0,1,4,0,0,0,0,3,38,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,532,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,533,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,560,"        final int nC = weightedJacobian[0].length;
",4,0,1,1,2,1,0,0,0,7,42,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,564,"        for (int j = 0; j < rank; ++j) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,565,"            lmDir[permutation[j]] = qy[j];
",0,0,1,3,6,0,0,0,0,11,30,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,567,"        for (int j = rank; j < nC; ++j) {
",10,1,0,1,3,0,0,0,0,12,33,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,570,"        for (int k = rank - 1; k >= 0; --k) {
",8,2,0,1,3,0,0,0,0,11,37,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,571,"            int pk = permutation[k];
",2,0,1,1,2,0,0,0,0,6,24,7,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,572,"            double ypk = lmDir[pk] / diagR[pk];
",2,1,1,2,4,0,0,0,0,11,35,7,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,573,"            for (int i = 0; i < k; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,576,"            lmDir[pk] = ypk;
",2,0,1,1,2,0,0,0,0,7,16,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,581,"        double dxNorm = 0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,582,"        for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,583,"            int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,7,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,584,"            double s = diag[pj] * lmDir[pj];
",2,1,1,2,4,0,0,0,0,11,32,7,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,585,"            work1[pj] = s;
",2,0,1,1,2,0,0,0,0,7,14,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,586,"            dxNorm += s * s;
",6,1,0,0,0,0,0,0,0,8,16,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,588,"        dxNorm = FastMath.sqrt(dxNorm);
",2,0,0,1,2,0,6,0,0,9,31,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,589,"        double fp = dxNorm - delta;
",6,1,0,0,0,0,0,0,0,7,27,5,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,590,"        if (fp <= 0.1 * delta) {
",4,2,0,1,3,0,0,0,0,6,24,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,856,"        weightedJacobian = jacobian.scalarMultiply(-1).getData();
",2,0,0,2,4,0,6,0,0,10,57,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,858,"        final int nR = weightedJacobian.length;
",6,0,0,0,0,1,0,0,0,7,39,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,859,"        final int nC = weightedJacobian[0].length;
",4,0,1,1,2,1,0,0,0,7,42,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,862,"        for (int k = 0; k < nC; ++k) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,863,"            permutation[k] = k;
",2,0,1,1,2,0,0,0,0,7,19,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,864,"            double norm2 = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,865,"            for (int i = 0; i < nR; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,866,"                double akk = weightedJacobian[i][k];
",2,0,1,2,4,0,0,0,0,8,36,9,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,867,"                norm2 += akk * akk;
",6,1,0,0,0,0,0,0,0,8,19,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,869,"            jacNorm[k] = FastMath.sqrt(norm2);
",0,0,1,2,4,0,6,0,0,11,34,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,873,"        for (int k = 0; k < nC; ++k) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,876,"            int nextColumn = -1;
",2,0,0,0,0,0,0,0,0,3,20,7,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,877,"            double ak2 = Double.NEGATIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,38,7,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,878,"            for (int i = k; i < nC; ++i) {
",10,1,0,1,3,0,0,0,0,12,30,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,879,"                double norm2 = 0;
",2,0,0,0,0,0,0,0,0,2,17,9,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,880,"                for (int j = k; j < nR; ++j) {
",10,1,0,1,3,0,0,0,0,12,30,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,881,"                    double aki = weightedJacobian[j][permutation[i]];
",2,0,1,3,6,0,0,0,0,10,49,11,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,882,"                    norm2 += aki * aki;
",6,1,0,0,0,0,0,0,0,8,19,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,884,"                if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {
",0,1,0,3,7,0,12,0,0,13,54,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,888,"                if (norm2 > ak2) {
",4,1,0,1,3,0,0,0,0,5,18,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,889,"                    nextColumn = i;
",4,0,0,0,0,0,0,0,0,5,15,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,890,"                    ak2        = norm2;
",4,0,0,0,0,0,0,0,0,5,19,10,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,893,"            if (ak2 <= qrRankingThreshold) {
",4,1,0,1,3,0,0,0,0,5,32,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,897,"            int pk                  = permutation[nextColumn];
",2,0,1,1,2,0,0,0,0,6,50,7,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,898,"            permutation[nextColumn] = permutation[k];
",0,0,1,2,4,0,0,0,0,9,41,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,899,"            permutation[k]          = pk;
",2,0,1,1,2,0,0,0,0,7,29,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,902,"            double akk   = weightedJacobian[k][pk];
",2,0,1,2,4,0,0,0,0,8,39,7,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,903,"            double alpha = (akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);
",4,1,0,3,6,0,12,0,0,18,68,7,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,904,"            double betak = 1.0 / (ak2 - akk * alpha);
",8,3,0,1,2,0,0,0,0,11,41,7,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,905,"            beta[pk]     = betak;
",2,0,1,1,2,0,0,0,0,7,21,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,908,"            diagR[pk]        = alpha;
",2,0,1,1,2,0,0,0,0,7,25,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,909,"            weightedJacobian[k][pk] -= alpha;
",2,0,1,2,4,0,0,0,0,9,33,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,912,"            for (int dk = nC - 1 - k; dk > 0; --dk) {
",10,2,0,1,3,0,0,0,0,13,41,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,932,"        final int nR = weightedJacobian.length;
",6,0,0,0,0,1,0,0,0,7,39,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,933,"        final int nC = weightedJacobian[0].length;
",4,0,1,1,2,1,0,0,0,7,42,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,935,"        for (int k = 0; k < nC; ++k) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,936,"            int pk = permutation[k];
",2,0,1,1,2,0,0,0,0,6,24,7,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,937,"            double gamma = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,938,"            for (int i = k; i < nR; ++i) {
",10,1,0,1,3,0,0,0,0,12,30,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,939,"                gamma += weightedJacobian[i][pk] * y[i];
",2,1,1,3,6,0,0,0,0,14,40,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,941,"            gamma *= beta[pk];
",2,0,1,1,2,0,0,0,0,7,18,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,942,"            for (int i = k; i < nR; ++i) {
",10,1,0,1,3,0,0,0,0,12,30,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,943,"                y[i] -= gamma * weightedJacobian[i][pk];
",2,1,1,3,6,0,0,0,0,14,40,8,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,946,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,957,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,111,"        return weightMatrixSqrt.copy();
",0,0,0,1,2,1,4,0,0,4,31,5,0.01136,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3464,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.01136,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3465,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.01136,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,285,"        checkParameters();
",0,0,0,1,2,0,2,0,0,2,18,5,0.01124,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,953,"        if (getLowerBound() != null ||
",0,2,0,1,3,0,2,0,0,5,30,4,0.01124,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,113,"public class LevenbergMarquardtOptimizer
",2,0,0,0,0,1,0,0,0,3,40,1,0.01124,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,274,"        super(null); // No custom convergence criterion.
",0,0,0,1,2,0,0,0,0,1,48,3,0.01111,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,275,"        this.initialStepBoundFactor = initialStepBoundFactor;
",4,0,0,0,0,0,0,0,0,5,53,4,0.01111,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,276,"        this.costRelativeTolerance = costRelativeTolerance;
",4,0,0,0,0,0,0,0,0,5,51,4,0.01111,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,277,"        this.parRelativeTolerance = parRelativeTolerance;
",4,0,0,0,0,0,0,0,0,5,49,4,0.01111,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,278,"        this.orthoTolerance = orthoTolerance;
",4,0,0,0,0,0,0,0,0,5,37,4,0.01111,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,279,"        this.qrRankingThreshold = threshold;
",4,0,0,0,0,0,0,0,0,5,36,4,0.01111,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,280,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01111,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,726,"        return data.clone();
",0,0,0,1,2,1,4,0,0,4,20,5,0.01075,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,66,"        return next(1) != 0;
",0,1,0,1,2,1,2,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,71,"        int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,72,"        final int iEnd = bytes.length - 3;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,73,"        while (i < iEnd) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,74,"            final int random = next(32);
",2,0,0,1,2,1,2,0,0,5,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,75,"            bytes[i]     = (byte) (random & 0xff);
",2,1,1,3,6,0,0,0,0,8,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,76,"            bytes[i + 1] = (byte) ((random >>  8) & 0xff);
",4,3,1,4,8,0,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,77,"            bytes[i + 2] = (byte) ((random >> 16) & 0xff);
",4,3,1,4,8,0,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,78,"            bytes[i + 3] = (byte) ((random >> 24) & 0xff);
",4,3,1,4,8,0,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,79,"            i += 4;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,80,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,81,"        int random = next(32);
",2,0,0,1,2,0,2,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,82,"        while (i < bytes.length) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,83,"            bytes[i++] = (byte) (random & 0xff);
",4,1,1,3,6,0,0,0,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,84,"            random     = random >> 8;
",4,1,0,0,0,0,0,0,0,6,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,86,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,97,"        return next(23) * 0x1.0p-23f;
",0,1,0,1,2,1,2,0,0,3,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,124,"        return next(32);
",0,0,0,1,2,1,2,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,143,"        if (n > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,144,"            if ((n & -n) == n) {
",6,2,0,2,5,0,0,0,0,9,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,145,"                return (int) ((n * (long) next(31)) >> 31);
",2,2,0,5,10,1,2,0,0,6,43,10,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,150,"                bits = next(31);
",2,0,0,1,2,0,2,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,151,"                val = bits % n;
",6,1,0,0,0,0,0,0,0,8,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,152,"            } while (bits - val + (n - 1) < 0);
",6,4,0,2,5,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,153,"            return val;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,155,"        throw new NotStrictlyPositiveException(n);
",2,0,0,1,2,0,0,2,0,4,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,160,"        final long high  = ((long) next(32)) << 32;
",2,1,0,3,6,1,2,0,0,6,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,161,"        final long  low  = ((long) next(32)) & 0xffffffffL;
",2,1,0,3,6,1,2,0,0,6,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,162,"        return high | low;
",4,1,0,0,0,1,0,0,0,5,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,177,"        if (n > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,181,"                bits = ((long) next(31)) << 32;
",2,1,0,3,6,0,2,0,0,6,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,182,"                bits = bits | (((long) next(32)) & 0xffffffffL);
",4,2,0,4,8,0,2,0,0,9,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,183,"                val  = bits % n;
",6,1,0,0,0,0,0,0,0,8,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,184,"            } while (bits - val + (n - 1) < 0);
",6,4,0,2,5,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,185,"            return val;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,6,187,"        throw new NotStrictlyPositiveException(n);
",2,0,0,1,2,0,0,2,0,4,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,114,"    public MersenneTwister(int seed) {
",4,0,0,1,3,1,0,0,0,5,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,115,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,116,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,123,"    public MersenneTwister(int[] seed) {
",4,0,0,2,5,1,0,0,0,5,36,2,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,124,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,125,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,126,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,131,"    public MersenneTwister(long seed) {
",4,0,0,1,3,1,0,0,0,5,35,2,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,132,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,133,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,134,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,168,"            setSeed(System.currentTimeMillis() + System.identityHashCode(this));
",0,1,0,3,6,0,10,0,0,11,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,169,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,6,38,"        super(value, 0, false);
",2,0,0,1,2,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,6,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,6,48,"        super(specific, value, 0, false);
",4,0,0,1,2,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,6,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,6,50,"        this(boundIsAllowed ?
",2,0,0,0,1,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,6,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,6,68,"        super(specific, wrong, min);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,6,70,"        this.min = min;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,6,71,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,6,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,6,78,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,6,85,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,6,46,"        super(pattern, wrong, arguments);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,6,47,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,6,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,6,54,"        return argument;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,6,44,"                                        Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,6,45,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,6,46,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,6,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,6,51,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,6,57,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,6,63,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,132,"                    throw new DimensionMismatchException(lowerBound.length, dim);
",6,0,0,1,2,0,0,2,0,8,61,11,0.00000,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,138,"                        throw new NumberIsTooSmallException(v, lo, true);
",4,0,0,1,2,0,0,2,0,7,49,13,0.00000,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,144,"                    throw new DimensionMismatchException(upperBound.length, dim);
",6,0,0,1,2,0,0,2,0,8,61,11,0.00000,0
defect4j,math,org/apache/commons/math3/optim/BaseMultivariateOptimizer,6,150,"                        throw new NumberIsTooLargeException(v, hi, true);
",4,0,0,1,2,0,0,2,0,7,49,13,0.00000,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,81,"        return iterations.getMaximalCount();
",0,0,0,1,2,1,4,0,0,4,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,93,"        return iterations.getCount();
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,173,"        iterations.incrementCount();
",0,0,0,1,2,0,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,174,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,196,"                iterations.setMaximalCount(((MaxIter) data).getMaxIter());
",2,0,0,4,8,0,6,2,0,10,58,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,197,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,89,"        super(relativeThreshold, absoluteThreshold);
",4,0,0,1,2,0,0,0,0,4,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,91,"        if (maxIter <= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,92,"            throw new NotStrictlyPositiveException(maxIter);
",2,0,0,1,2,0,0,2,0,4,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,94,"        maxIterationCount = maxIter;
",4,0,0,0,0,0,0,0,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,95,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,118,"            if (iteration >= maxIterationCount) {
",4,1,0,1,3,0,0,0,0,5,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/SimpleVectorValueChecker,6,119,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,74,"        final double[] p = getKey();
",2,0,0,2,4,1,2,0,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,75,"        return p == null ? null : p.clone();
",2,1,0,1,2,1,4,0,0,7,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,84,"        return getKey();
",0,0,0,1,2,1,2,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,94,"        final double[] v = super.getValue();
",4,0,0,2,4,1,0,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,95,"        return v == null ? null : v.clone();
",2,1,0,1,2,1,4,0,0,7,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,113,"        return new DataTransferObject(getKey(), getValue());
",0,0,0,3,6,1,4,2,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,31,"public class PointVectorValuePair extends Pair<double[], double[]> implements Serializable {
",2,0,0,2,5,1,0,4,0,7,92,1,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,6,56,"        this(entry.getKey(), entry.getValue());
",0,0,0,3,6,0,8,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,6,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,6,84,"        return key;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,6,94,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,6,106,"        if (this == o) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,6,107,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,6,109,"        if (!(o instanceof Pair)) {
",2,0,0,2,5,0,0,2,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,6,110,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,6,112,"            Pair<?, ?> oP = (Pair<?, ?>) o;
",4,0,0,1,2,0,0,4,0,8,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,6,113,"            return (key == null ?
",2,1,0,0,1,1,0,0,0,3,21,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,6,129,"        int result = key == null ? 0 : key.hashCode();
",4,1,0,1,2,0,4,0,0,9,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,6,131,"        final int h = value == null ? 0 : value.hashCode();
",4,1,0,1,2,1,4,0,0,10,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,6,132,"        result = 37 * result + h ^ (h >>> 16);
",8,4,0,1,2,0,0,0,0,13,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Pair,6,134,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,181,"        this(100, checker, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);
",6,0,0,1,2,0,0,0,0,6,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,182,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,212,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,213,"        this.initialStepBoundFactor = initialStepBoundFactor;
",4,0,0,0,0,0,0,0,0,5,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,214,"        this.costRelativeTolerance = costRelativeTolerance;
",4,0,0,0,0,0,0,0,0,5,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,215,"        this.parRelativeTolerance = parRelativeTolerance;
",4,0,0,0,0,0,0,0,0,5,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,216,"        this.orthoTolerance = orthoTolerance;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,217,"        this.qrRankingThreshold = threshold;
",4,0,0,0,0,0,0,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,218,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,241,"        this(100,
",0,0,0,0,1,0,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,244,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,353,"                        dk = 1.0;
",2,0,0,0,0,0,0,0,0,3,9,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,382,"                setCost(currentCost);
",0,0,0,1,2,0,4,0,0,4,21,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,383,"                return current;
",2,0,0,0,0,1,0,0,0,2,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,489,"                        if (checker.converged(iter, previous, current)) {
",0,0,0,2,5,0,10,0,0,10,49,13,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,490,"                            setCost(currentCost);
",0,0,0,1,2,0,4,0,0,4,21,15,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,491,"                            return current;
",2,0,0,0,0,1,0,0,0,2,15,14,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,523,"                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,
",4,0,0,0,1,0,0,2,0,6,82,11,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,526,"                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,
",4,0,0,0,1,0,0,2,0,6,88,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,529,"                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,
",4,0,0,0,1,0,0,2,0,6,82,13,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,568,"            lmDir[permutation[j]] = 0;
",0,0,1,2,4,0,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,574,"                lmDir[permutation[i]] -= ypk * weightedJacobian[i][pk];
",2,1,1,4,8,0,0,0,0,16,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,610,"                    sum += weightedJacobian[i][pj] * work1[permutation[i]];
",2,1,1,4,8,0,0,0,0,16,55,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,634,"            paru = 2.2251e-308 / FastMath.min(delta, 0.1);
",2,1,0,1,2,0,6,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,641,"            lmPar = gNorm / dxNorm;
",6,1,0,0,0,0,0,0,0,8,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,648,"                lmPar = FastMath.max(2.2251e-308, 0.001 * paru);
",4,1,0,1,2,0,4,0,0,10,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,685,"                    work1[permutation[i]] -= weightedJacobian[i][pj] * tmp;
",2,1,1,4,8,0,0,0,0,16,55,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,697,"                parl = FastMath.max(parl, lmPar);
",2,0,0,1,2,0,8,0,0,11,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,706,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,736,"                weightedJacobian[i][pj] = weightedJacobian[j][permutation[i]];
",0,0,1,5,10,0,0,0,0,15,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,773,"                        final double tan = lmDiag[k] / rkk;
",4,1,1,1,2,1,0,0,0,10,35,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,774,"                        cos = 1.0 / FastMath.sqrt(1.0 + tan * tan);
",6,3,0,1,2,0,4,0,0,14,43,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,775,"                        sin = cos * tan;
",6,1,0,0,0,0,0,0,0,8,16,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,787,"                        double rik = weightedJacobian[i][pk];
",2,0,1,2,4,0,0,0,0,8,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,788,"                        final double temp2 = cos * rik + sin * lmDiag[i];
",8,3,1,1,2,1,0,0,0,16,49,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,789,"                        lmDiag[i] = -sin * rik + cos * lmDiag[i];
",6,3,1,2,4,0,0,0,0,19,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,790,"                        weightedJacobian[i][pk] = temp2;
",2,0,1,2,4,0,0,0,0,9,32,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,806,"                nSing = j;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,809,"                work[j] = 0;
",0,0,1,1,2,0,0,0,0,5,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,817,"                    sum += weightedJacobian[i][pj] * work[i];
",2,1,1,3,6,0,0,0,0,14,41,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,885,"                    throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,
",4,0,0,0,1,0,0,2,0,6,95,11,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,894,"                rank = k;
",4,0,0,0,0,0,0,0,0,5,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,895,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,913,"                double gamma = 0;
",2,0,0,0,0,0,0,0,0,2,17,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,914,"                for (int j = k; j < nR; ++j) {
",10,1,0,1,3,0,0,0,0,12,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,915,"                    gamma += weightedJacobian[j][pk] * weightedJacobian[j][permutation[k + dk]];
",6,2,1,5,10,0,0,0,0,21,76,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,917,"                gamma *= betak;
",4,0,0,0,0,0,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,918,"                for (int j = k; j < nR; ++j) {
",10,1,0,1,3,0,0,0,0,12,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,919,"                    weightedJacobian[j][permutation[k + dk]] -= gamma * weightedJacobian[j][pk];
",6,2,1,5,10,0,0,0,0,21,76,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,6,955,"            throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);
",4,0,0,1,2,0,0,2,0,6,73,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,92,"        return FastMath.sqrt(getChiSquare() / getTargetSize());
",0,1,0,3,6,1,8,0,0,9,55,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,102,"        return cost * cost;
",4,1,0,0,0,1,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,142,"        final RealMatrix j = computeWeightedJacobian(params);
",2,0,0,1,2,1,4,2,0,9,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,145,"        final RealMatrix jTj = j.transpose().multiply(j);
",2,0,0,2,4,1,8,2,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,148,"        final DecompositionSolver solver
",2,0,0,0,0,1,0,2,0,5,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,150,"        return solver.getInverse().getData();
",0,0,0,2,4,1,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,169,"        final int nC = params.length;
",6,0,0,0,0,1,0,0,0,7,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,170,"        final double[] sig = new double[nC];
",2,0,1,2,4,1,0,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,171,"        final double[][] cov = computeCovariances(params, covarianceSingularityThreshold);
",2,0,0,3,6,1,6,0,0,9,82,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,172,"        for (int i = 0; i < nC; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,173,"            sig[i] = FastMath.sqrt(cov[i][i]);
",0,0,1,4,8,0,4,0,0,15,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,175,"        return sig;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,218,"            throw new DimensionMismatchException(target.length,
",4,0,0,0,1,0,0,2,0,6,51,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,273,"            final EigenDecomposition dec = new EigenDecomposition(m);
",4,0,0,1,2,1,0,4,0,9,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,274,"            return dec.getSquareRoot();
",0,0,0,1,2,1,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer,6,42,"public abstract class AbstractLeastSquaresOptimizer
",2,0,0,0,0,2,0,0,0,4,51,1,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer,6,39,"public abstract class JacobianMultivariateVectorOptimizer
",2,0,0,0,0,2,0,0,0,4,57,1,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,114,"        return target.length;
",4,0,0,0,0,1,0,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,162,"            throw new DimensionMismatchException(target.length,
",4,0,0,0,1,0,0,2,0,6,51,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer,6,35,"public abstract class MultivariateVectorOptimizer
",2,0,0,0,0,2,0,0,0,4,49,1,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,6,44,"        super(specific, wrong, expected);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,6,45,"        dimension = expected;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,6,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,6,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);
",8,0,0,1,2,0,0,0,0,8,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,6,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,6,63,"        return dimension;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,6,50,"        this(boundIsAllowed ?
",2,0,0,0,1,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,6,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,6,67,"        super(specific, wrong, max);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,6,69,"        this.max = max;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,6,70,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,6,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,6,77,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,6,84,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,99,"        setEntry(index, getEntry(index) + increment);
",2,1,0,2,4,0,8,0,0,11,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,100,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,165,"        checkVectorDimensions(v.getDimension());
",0,0,0,2,4,0,6,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,166,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,177,"        int d = getDimension();
",2,0,0,1,2,0,2,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,178,"        if (d != n) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,179,"            throw new DimensionMismatchException(d, n);
",4,0,0,1,2,0,0,2,0,6,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,181,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,190,"        if (index < 0 ||
",2,2,0,0,1,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,192,"            throw new OutOfRangeException(LocalizedFormats.INDEX,
",4,0,0,0,1,0,0,2,0,6,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,195,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,208,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,209,"        if ((start < 0) || (start >= dim)) {
",6,3,0,3,7,0,0,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,210,"            throw new OutOfRangeException(LocalizedFormats.INDEX, start, 0,
",6,0,0,0,1,0,0,2,0,8,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,213,"        if ((end < 0) || (end >= dim)) {
",6,3,0,3,7,0,0,0,0,9,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,214,"            throw new OutOfRangeException(LocalizedFormats.INDEX, end, 0,
",6,0,0,0,1,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,217,"        if (end < start) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,219,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,
",4,0,0,0,1,0,0,2,0,6,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,222,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,234,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,235,"        RealVector result = v.copy();
",2,0,0,1,2,0,4,2,0,8,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,236,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,237,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,238,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,239,"            final int index = e.getIndex();
",2,0,0,1,2,1,4,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,240,"            result.setEntry(index, e.getValue() + result.getEntry(index));
",0,1,0,3,6,0,16,0,0,17,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,241,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,242,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,255,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,256,"        RealVector result = v.mapMultiply(-1d);
",2,0,0,1,2,0,4,2,0,9,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,257,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,258,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,259,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,260,"            final int index = e.getIndex();
",2,0,0,1,2,1,4,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,261,"            result.setEntry(index, e.getValue() + result.getEntry(index));
",0,1,0,3,6,0,16,0,0,17,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,262,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,263,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,274,"        return copy().mapAddToSelf(d);
",0,0,0,2,4,1,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,285,"        if (d != 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,286,"            return mapToSelf(FunctionUtils.fix2ndArgument(new Add(), d));
",0,0,0,3,6,1,8,2,0,10,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,288,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,307,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,308,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,309,"        final int n = getDimension();
",2,0,0,1,2,1,2,0,0,5,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,310,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,311,"            d += getEntry(i) * v.getEntry(i);
",2,1,0,2,4,0,10,0,0,14,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,313,"        return d;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,329,"        final double norm = getNorm();
",2,0,0,1,2,1,2,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,330,"        final double vNorm = v.getNorm();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,332,"        if (norm == 0 ||
",2,2,0,0,1,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,334,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,336,"        return dotProduct(v) / (norm * vNorm);
",4,2,0,2,4,1,4,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,396,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,397,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,398,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,399,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,400,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,401,"            final double diff = e.getValue() - v.getEntry(e.getIndex());
",2,1,0,3,6,1,12,0,0,16,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,402,"            d += diff * diff;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,403,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,404,"        return FastMath.sqrt(d);
",0,0,0,1,2,1,6,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,418,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,419,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,420,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,421,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,422,"            final double value = e.getValue();
",2,0,0,1,2,1,4,0,0,7,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,423,"            sum += value * value;
",6,1,0,0,0,0,0,0,0,8,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,424,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,425,"        return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,439,"        double norm = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,440,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,441,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,442,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,443,"            norm += FastMath.abs(e.getValue());
",2,0,0,2,4,0,8,0,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,444,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,445,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,459,"        double norm = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,460,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,461,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,462,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,463,"            norm = FastMath.max(norm, FastMath.abs(e.getValue()));
",2,0,0,3,6,0,14,0,0,17,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,464,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,465,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,481,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,482,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,483,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,484,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,485,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,486,"            d += FastMath.abs(e.getValue() - v.getEntry(e.getIndex()));
",2,1,0,4,8,0,16,0,0,20,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,487,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,488,"        return d;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,507,"        checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,508,"        double d = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,509,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,510,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,511,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,512,"            d = FastMath.max(FastMath.abs(e.getValue() - v.getEntry(e.getIndex())), d);
",2,1,0,5,10,0,22,0,0,26,75,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,513,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,514,"        return d;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,524,"        int minIndex    = -1;
",2,0,0,0,0,0,0,0,0,3,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,525,"        double minValue = Double.POSITIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,526,"        Iterator<Entry> iterator = iterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,527,"        while (iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,528,"            final Entry entry = iterator.next();
",2,0,0,1,2,1,4,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,529,"            if (entry.getValue() <= minValue) {
",2,1,0,2,5,0,4,0,0,7,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,530,"                minIndex = entry.getIndex();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,531,"                minValue = entry.getValue();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,533,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,534,"        return minIndex;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,544,"        final int minIndex = getMinIndex();
",2,0,0,1,2,1,2,0,0,5,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,545,"        return minIndex < 0 ? Double.NaN : getEntry(minIndex);
",6,1,0,1,2,1,4,0,0,11,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,555,"        int maxIndex    = -1;
",2,0,0,0,0,0,0,0,0,3,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,556,"        double maxValue = Double.NEGATIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,557,"        Iterator<Entry> iterator = iterator();
",2,0,0,1,2,0,2,4,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,558,"        while (iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,559,"            final Entry entry = iterator.next();
",2,0,0,1,2,1,4,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,560,"            if (entry.getValue() >= maxValue) {
",2,1,0,2,5,0,4,0,0,7,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,561,"                maxIndex = entry.getIndex();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,562,"                maxValue = entry.getValue();
",2,0,0,1,2,0,4,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,564,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,565,"        return maxIndex;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,575,"        final int maxIndex = getMaxIndex();
",2,0,0,1,2,1,2,0,0,5,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,576,"        return maxIndex < 0 ? Double.NaN : getEntry(maxIndex);
",6,1,0,1,2,1,4,0,0,11,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,588,"        return copy().mapMultiplyToSelf(d);
",0,0,0,2,4,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,599,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Multiply(), d));
",0,0,0,3,6,1,8,2,0,10,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,610,"        return copy().mapSubtractToSelf(d);
",0,0,0,2,4,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,621,"        return mapAddToSelf(-d);
",2,0,0,1,2,1,2,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,632,"        return copy().mapDivideToSelf(d);
",0,0,0,2,4,1,6,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,643,"        return mapToSelf(FunctionUtils.fix2ndArgument(new Divide(), d));
",0,0,0,3,6,1,8,2,0,10,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,653,"        final int m = this.getDimension();
",2,0,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,654,"        final int n = v.getDimension();
",2,0,0,1,2,1,4,0,0,7,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,656,"        if (v instanceof SparseRealVector || this instanceof SparseRealVector) {
",2,1,0,1,3,0,0,4,0,7,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,657,"            product = new OpenMapRealMatrix(m, n);
",6,0,0,1,2,0,0,2,0,9,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,659,"            product = new Array2DRowRealMatrix(m, n);
",6,0,0,1,2,0,0,2,0,9,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,661,"        for (int i = 0; i < m; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,662,"            for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,663,"                product.setEntry(i, j, this.getEntry(i) * v.getEntry(j));
",0,1,0,3,6,0,18,0,0,19,57,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,666,"        return product;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,681,"        final double norm2 = v.dotProduct(v);
",2,0,0,1,2,1,6,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,682,"        if (norm2 == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,683,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,685,"        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));
",0,1,0,3,6,1,14,0,0,15,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,694,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,695,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,696,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,697,"            e.setValue(value);
",0,0,0,1,2,0,6,0,0,6,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,698,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,699,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,709,"        int dim = getDimension();
",2,0,0,1,2,0,2,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,710,"        double[] values = new double[dim];
",2,0,1,2,4,0,0,0,0,4,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,711,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,712,"            values[i] = getEntry(i);
",0,0,1,2,4,0,4,0,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,714,"        return values;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,725,"        final double norm = getNorm();
",2,0,0,1,2,1,2,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,726,"        if (norm == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,727,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,729,"        return mapDivide(norm);
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,739,"        final double norm = getNorm();
",2,0,0,1,2,1,2,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,740,"        if (norm == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,741,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,743,"        mapDivideToSelf(getNorm());
",0,0,0,2,4,0,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,744,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,767,"        return new SparseEntryIterator();
",0,0,0,1,2,1,0,2,0,2,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,781,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,782,"        return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,827,"        return copy().mapToSelf(function);
",0,0,0,2,4,1,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,844,"        Iterator<Entry> it = iterator();
",2,0,0,1,2,0,2,4,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,845,"        while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,846,"            final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,847,"            e.setValue(function.value(e.getValue()));
",0,0,0,3,6,0,12,0,0,12,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,848,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,849,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,867,"        return copy().combineToSelf(a, b, y);
",0,0,0,2,4,1,10,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,884,"        checkVectorDimensions(y);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,885,"        for (int i = 0; i < getDimension(); i++) {
",6,1,0,2,5,0,2,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,886,"            final double xi = getEntry(i);
",2,0,0,1,2,1,4,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,887,"            final double yi = y.getEntry(i);
",2,0,0,1,2,1,6,0,0,9,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,888,"            setEntry(i, a * xi + b * yi);
",8,3,0,1,2,0,4,0,0,15,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,890,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,904,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,905,"        visitor.start(dim, 0, dim - 1);
",2,1,0,1,2,0,6,0,0,9,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,906,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,907,"            visitor.visit(i, getEntry(i));
",0,0,0,2,4,0,10,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,909,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,928,"        checkIndices(start, end);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,929,"        visitor.start(getDimension(), start, end);
",0,0,0,2,4,0,10,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,930,"        for (int i = start; i <= end; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,931,"            visitor.visit(i, getEntry(i));
",0,0,0,2,4,0,10,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,933,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,949,"        return walkInDefaultOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,970,"        return walkInDefaultOrder(visitor, start, end);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,984,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,985,"        visitor.start(dim, 0, dim - 1);
",2,1,0,1,2,0,6,0,0,9,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,986,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,987,"            setEntry(i, visitor.visit(i, getEntry(i)));
",0,0,0,3,6,0,14,0,0,14,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,989,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1008,"        checkIndices(start, end);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1009,"        visitor.start(getDimension(), start, end);
",0,0,0,2,4,0,10,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1010,"        for (int i = start; i <= end; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1011,"            setEntry(i, visitor.visit(i, getEntry(i)));
",0,0,0,3,6,0,14,0,0,14,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1013,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1029,"        return walkInDefaultOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1050,"        return walkInDefaultOrder(visitor, start, end);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1125,"        throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1138,"        throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1249,"        return new RealVector() {
",0,0,0,1,3,1,0,2,0,2,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,56,"    public ArrayRealVector() {
",2,0,0,1,3,1,0,0,0,3,26,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,57,"        data = new double[0];
",2,0,0,1,2,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,65,"    public ArrayRealVector(int size) {
",4,0,0,1,3,1,0,0,0,5,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,66,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,75,"    public ArrayRealVector(int size, double preset) {
",6,0,0,1,3,1,0,0,0,7,49,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,76,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,77,"        Arrays.fill(data, preset);
",0,0,0,1,2,0,8,0,0,8,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,106,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,122,"        throws NullArgumentException, NumberIsTooLargeException {
",4,0,0,0,1,0,0,0,0,4,57,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,123,"        if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,124,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,126,"        if (d.length < pos + size) {
",8,2,0,1,3,0,0,0,0,10,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,127,"            throw new NumberIsTooLargeException(pos + size, d.length, true);
",8,1,0,1,2,0,0,2,0,12,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,129,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,130,"        System.arraycopy(d, pos, data, 0, size);
",0,0,0,1,2,0,12,0,0,12,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,131,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,138,"    public ArrayRealVector(Double[] d) {
",4,0,0,2,5,1,0,2,0,7,36,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,139,"        data = new double[d.length];
",6,0,0,1,2,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,140,"        for (int i = 0; i < d.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,141,"            data[i] = d[i].doubleValue();
",0,0,1,3,6,0,2,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,143,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,156,"        throws NullArgumentException, NumberIsTooLargeException {
",4,0,0,0,1,0,0,0,0,4,57,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,157,"        if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,158,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,160,"        if (d.length < pos + size) {
",8,2,0,1,3,0,0,0,0,10,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,161,"            throw new NumberIsTooLargeException(pos + size, d.length, true);
",8,1,0,1,2,0,0,2,0,12,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,163,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,164,"        for (int i = pos; i < pos + size; i++) {
",12,2,0,1,3,0,0,0,0,15,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,165,"            data[i - pos] = d[i].doubleValue();
",4,1,1,3,6,0,2,0,0,14,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,167,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,175,"    public ArrayRealVector(RealVector v) throws NullArgumentException {
",6,0,0,1,3,1,0,2,0,9,67,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,176,"        if (v == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,177,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,179,"        data = new double[v.getDimension()];
",2,0,0,2,4,0,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,180,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,181,"            data[i] = v.getEntry(i);
",0,0,1,2,4,0,6,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,183,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,192,"        this(v, true);
",2,0,0,1,2,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,193,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,202,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {
",6,0,0,1,3,1,0,2,0,9,57,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,203,"        data = deep ? v.data.clone() : v.data;
",12,0,0,1,2,0,2,0,0,15,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,204,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,211,"    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {
",6,0,0,1,3,1,0,4,0,11,64,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,212,"        data = new double[v1.data.length + v2.data.length];
",14,1,0,1,2,0,0,0,0,16,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,213,"        System.arraycopy(v1.data, 0, data, 0, v1.data.length);
",10,0,0,1,2,0,6,0,0,16,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,214,"        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
",16,0,0,1,2,0,6,0,0,22,67,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,215,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,222,"    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {
",6,0,0,1,3,1,0,4,0,11,59,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,223,"        final int l1 = v1.data.length;
",8,0,0,0,0,1,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,224,"        final int l2 = v2.getDimension();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,225,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,226,"        System.arraycopy(v1.data, 0, data, 0, l1);
",4,0,0,1,2,0,8,0,0,12,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,227,"        for (int i = 0; i < l2; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,228,"            data[l1 + i] = v2.getEntry(i);
",4,1,1,2,4,0,6,0,0,14,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,230,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,237,"    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {
",6,0,0,1,3,1,0,4,0,11,59,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,238,"        final int l1 = v1.getDimension();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,239,"        final int l2 = v2.data.length;
",8,0,0,0,0,1,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,240,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,241,"        for (int i = 0; i < l1; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,242,"            data[i] = v1.getEntry(i);
",0,0,1,2,4,0,6,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,244,"        System.arraycopy(v2.data, 0, data, l1, l2);
",4,0,0,1,2,0,10,0,0,14,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,245,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,252,"    public ArrayRealVector(ArrayRealVector v1, double[] v2) {
",6,0,0,2,5,1,0,2,0,9,57,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,253,"        final int l1 = v1.getDimension();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,254,"        final int l2 = v2.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,255,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,256,"        System.arraycopy(v1.data, 0, data, 0, l1);
",4,0,0,1,2,0,8,0,0,12,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,257,"        System.arraycopy(v2, 0, data, l1, l2);
",0,0,0,1,2,0,12,0,0,12,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,258,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,265,"    public ArrayRealVector(double[] v1, ArrayRealVector v2) {
",6,0,0,2,5,1,0,2,0,9,57,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,266,"        final int l1 = v1.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,267,"        final int l2 = v2.getDimension();
",2,0,0,1,2,1,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,268,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,269,"        System.arraycopy(v1, 0, data, 0, l1);
",0,0,0,1,2,0,10,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,270,"        System.arraycopy(v2.data, 0, data, l1, l2);
",4,0,0,1,2,0,10,0,0,14,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,271,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,278,"    public ArrayRealVector(double[] v1, double[] v2) {
",6,0,0,3,7,1,0,0,0,7,50,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,279,"        final int l1 = v1.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,280,"        final int l2 = v2.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,281,"        data = new double[l1 + l2];
",6,1,0,1,2,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,282,"        System.arraycopy(v1, 0, data, 0, l1);
",0,0,0,1,2,0,10,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,283,"        System.arraycopy(v2, 0, data, l1, l2);
",0,0,0,1,2,0,12,0,0,12,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,284,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,289,"        return new ArrayRealVector(this, true);
",0,0,0,1,2,1,0,2,0,3,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,296,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,297,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,298,"            final int dim = vData.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,299,"            checkVectorDimensions(dim);
",0,0,0,1,2,0,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,300,"            ArrayRealVector result = new ArrayRealVector(dim);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,301,"            double[] resultData = result.data;
",6,0,0,1,2,0,0,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,302,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,303,"                resultData[i] = data[i] + vData[i];
",0,1,1,3,6,0,0,0,0,14,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,305,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,307,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,308,"            double[] out = data.clone();
",2,0,0,2,4,0,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,309,"            Iterator<Entry> it = v.iterator();
",2,0,0,1,2,0,4,4,0,10,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,310,"            while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,311,"                final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,312,"                out[e.getIndex()] += e.getValue();
",0,0,1,3,6,0,8,0,0,11,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,313,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,314,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,322,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,323,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,324,"            final int dim = vData.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,325,"            checkVectorDimensions(dim);
",0,0,0,1,2,0,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,326,"            ArrayRealVector result = new ArrayRealVector(dim);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,327,"            double[] resultData = result.data;
",6,0,0,1,2,0,0,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,328,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,329,"                resultData[i] = data[i] - vData[i];
",0,1,1,3,6,0,0,0,0,14,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,331,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,333,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,334,"            double[] out = data.clone();
",2,0,0,2,4,0,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,335,"            Iterator<Entry> it = v.iterator();
",2,0,0,1,2,0,4,4,0,10,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,336,"            while (it.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,337,"                final Entry e = it.next();
",2,0,0,1,2,1,4,2,0,9,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,338,"                out[e.getIndex()] -= e.getValue();
",0,0,1,3,6,0,8,0,0,11,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,339,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,340,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,347,"        return copy().mapToSelf(function);
",0,0,0,2,4,1,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,353,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,354,"            data[i] = function.value(data[i]);
",0,0,1,3,6,0,4,0,0,13,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,356,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,362,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,363,"            data[i] = data[i] + d;
",2,1,1,2,4,0,0,0,0,12,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,365,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,371,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,372,"            data[i] = data[i] - d;
",2,1,1,2,4,0,0,0,0,12,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,374,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,380,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,381,"            data[i] = data[i] * d;
",2,1,1,2,4,0,0,0,0,12,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,383,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,389,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,390,"            data[i] = data[i] / d;
",2,1,1,2,4,0,0,0,0,12,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,392,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,399,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,400,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,401,"            final int dim = vData.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,402,"            checkVectorDimensions(dim);
",0,0,0,1,2,0,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,403,"            ArrayRealVector result = new ArrayRealVector(dim);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,404,"            double[] resultData = result.data;
",6,0,0,1,2,0,0,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,405,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,406,"                resultData[i] = data[i] * vData[i];
",0,1,1,3,6,0,0,0,0,14,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,408,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,410,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,411,"            double[] out = data.clone();
",2,0,0,2,4,0,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,412,"            for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,413,"                out[i] *= v.getEntry(i);
",0,0,1,2,4,0,6,0,0,11,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,415,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,423,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,424,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,425,"            final int dim = vData.length;
",6,0,0,0,0,1,0,0,0,7,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,426,"            checkVectorDimensions(dim);
",0,0,0,1,2,0,4,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,427,"            ArrayRealVector result = new ArrayRealVector(dim);
",4,0,0,1,2,0,0,4,0,8,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,428,"            double[] resultData = result.data;
",6,0,0,1,2,0,0,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,429,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,430,"                resultData[i] = data[i] / vData[i];
",0,1,1,3,6,0,0,0,0,14,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,432,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,434,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,435,"            double[] out = data.clone();
",2,0,0,2,4,0,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,436,"            for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,437,"                out[i] /= v.getEntry(i);
",0,0,1,2,4,0,6,0,0,11,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,439,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,465,"        return super.dotProduct(v);
",4,0,0,1,2,1,0,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,471,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,472,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,473,"            sum += a * a;
",6,1,0,0,0,0,0,0,0,8,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,475,"        return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,481,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,482,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,483,"            sum += FastMath.abs(a);
",2,0,0,1,2,0,6,0,0,9,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,485,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,491,"        double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,492,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,493,"            max = FastMath.max(max, FastMath.abs(a));
",2,0,0,2,4,0,12,0,0,15,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,495,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,501,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,502,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,503,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,504,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,505,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,506,"                final double delta = data[i] - vData[i];
",2,1,1,2,4,1,0,0,0,12,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,507,"                sum += delta * delta;
",6,1,0,0,0,0,0,0,0,8,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,509,"            return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,511,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,512,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,513,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,514,"                final double delta = data[i] - v.getEntry(i);
",2,1,1,2,4,1,6,0,0,14,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,515,"                sum += delta * delta;
",6,1,0,0,0,0,0,0,0,8,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,517,"            return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,525,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,526,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,527,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,528,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,529,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,530,"                final double delta = data[i] - vData[i];
",2,1,1,2,4,1,0,0,0,12,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,531,"                sum += FastMath.abs(delta);
",2,0,0,1,2,0,6,0,0,9,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,533,"            return sum;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,535,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,536,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,537,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,538,"                final double delta = data[i] - v.getEntry(i);
",2,1,1,2,4,1,6,0,0,14,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,539,"                sum += FastMath.abs(delta);
",2,0,0,1,2,0,6,0,0,9,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,541,"            return sum;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,549,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,550,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,551,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,552,"            double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,553,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,554,"                final double delta = data[i] - vData[i];
",2,1,1,2,4,1,0,0,0,12,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,555,"                max = FastMath.max(max, FastMath.abs(delta));
",2,0,0,2,4,0,12,0,0,15,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,557,"            return max;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,559,"            checkVectorDimensions(v);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,560,"            double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,561,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,562,"                final double delta = data[i] - v.getEntry(i);
",2,1,1,2,4,1,6,0,0,14,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,563,"                max = FastMath.max(max, FastMath.abs(delta));
",2,0,0,2,4,0,12,0,0,15,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,565,"            return max;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,572,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,573,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,574,"            final int m = data.length;
",6,0,0,0,0,1,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,575,"            final int n = vData.length;
",6,0,0,0,0,1,0,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,576,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);
",2,0,0,1,2,1,8,2,0,13,58,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,577,"            for (int i = 0; i < m; i++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,578,"                for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,579,"                    out.setEntry(i, j, data[i] * vData[j]);
",0,1,1,3,6,0,8,0,0,17,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,582,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,584,"            final int m = data.length;
",6,0,0,0,0,1,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,585,"            final int n = v.getDimension();
",2,0,0,1,2,1,4,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,586,"            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);
",2,0,0,1,2,1,8,2,0,13,58,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,587,"            for (int i = 0; i < m; i++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,588,"                for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,589,"                    out.setEntry(i, j, data[i] * v.getEntry(j));
",0,1,1,3,6,0,14,0,0,19,44,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,592,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,601,"        } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,602,"            throw new OutOfRangeException(LocalizedFormats.INDEX, index, 0,
",6,0,0,0,1,0,0,2,0,8,63,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,617,"            return new ArrayRealVector(this, (ArrayRealVector) v);
",2,0,0,2,4,1,0,4,0,6,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,618,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,619,"            return new ArrayRealVector(this, v);
",2,0,0,1,2,1,0,2,0,4,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,630,"        return new ArrayRealVector(this, v);
",2,0,0,1,2,1,0,2,0,4,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,636,"        final double[] out = new double[data.length + 1];
",6,1,0,2,4,1,0,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,637,"        System.arraycopy(data, 0, out, 0, data.length);
",4,0,0,1,2,0,8,0,0,12,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,638,"        out[data.length] = in;
",6,0,1,1,2,0,0,0,0,9,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,639,"        return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,646,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,647,"            throw new NotPositiveException(LocalizedFormats.NUMBER_OF_ELEMENTS_SHOULD_BE_POSITIVE, n);
",6,0,0,1,2,0,0,2,0,8,90,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,649,"        ArrayRealVector out = new ArrayRealVector(n);
",4,0,0,1,2,0,0,4,0,8,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,651,"            System.arraycopy(data, index, out.data, 0, n);
",4,0,0,1,2,0,10,0,0,14,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,655,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,652,"        } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,653,"            checkIndex(index);
",0,0,0,1,2,0,4,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,654,"            checkIndex(index + n - 1);
",4,2,0,1,2,0,2,0,0,8,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,656,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,663,"            data[index] = value;
",2,0,1,1,2,0,0,0,0,7,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,666,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,664,"        } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,665,"            checkIndex(index);
",0,0,0,1,2,0,4,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,667,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,674,"        data[index] += increment;
",2,0,1,1,2,0,0,0,0,7,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,678,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,675,"        } catch(IndexOutOfBoundsException e){
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,676,"            throw new OutOfRangeException(LocalizedFormats.INDEX,
",4,0,0,0,1,0,0,2,0,6,53,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,679,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,685,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,686,"            setSubVector(index, ((ArrayRealVector) v).data);
",4,0,0,3,6,0,4,2,0,10,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,689,"                for (int i = index; i < index + v.getDimension(); ++i) {
",10,2,0,2,5,0,4,0,0,17,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,690,"                    data[i] = v.getEntry(i - index);
",4,1,1,2,4,0,4,0,0,14,32,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,695,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,692,"            } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,693,"                checkIndex(index);
",0,0,0,1,2,0,4,0,0,4,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,694,"                checkIndex(index + v.getDimension() - 1);
",2,2,0,2,4,0,6,0,0,10,41,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,697,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,710,"            System.arraycopy(v, 0, data, index, v.length);
",4,0,0,1,2,0,10,0,0,14,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,714,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,711,"        } catch (IndexOutOfBoundsException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,712,"            checkIndex(index);
",0,0,0,1,2,0,4,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,713,"            checkIndex(index + v.length - 1);
",6,2,0,1,2,0,2,0,0,10,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,715,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,720,"        Arrays.fill(data, value);
",0,0,0,1,2,0,8,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,721,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,732,"        return DEFAULT_FORMAT.format(this);
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,745,"        checkVectorDimensions(v.getDimension());
",0,0,0,2,4,0,6,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,746,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,759,"            throw new DimensionMismatchException(data.length, n);
",6,0,0,1,2,0,0,2,0,8,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,771,"        for (double v : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,772,"            if (Double.isNaN(v)) {
",0,0,0,2,5,0,6,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,773,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,776,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,788,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,789,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,792,"        for (double v : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,793,"            if (Double.isInfinite(v)) {
",0,0,0,2,5,0,6,0,0,6,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,794,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,798,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,804,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,805,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,808,"        if (!(other instanceof RealVector)) {
",2,0,0,2,5,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,809,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,812,"        RealVector rhs = (RealVector) other;
",4,0,0,1,2,0,0,4,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,813,"        if (data.length != rhs.getDimension()) {
",4,1,0,2,5,0,4,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,814,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,817,"        if (rhs.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,818,"            return this.isNaN();
",0,0,0,1,2,1,2,0,0,2,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,821,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,822,"            if (data[i] != rhs.getEntry(i)) {
",0,1,1,3,7,0,6,0,0,11,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,823,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,826,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,834,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,835,"            return 9;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,837,"        return MathUtils.hash(data);
",0,0,0,1,2,1,6,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,844,"        return copy().combineToSelf(a, b, y);
",0,0,0,2,4,1,10,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,851,"        if (y instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,852,"            final double[] yData = ((ArrayRealVector) y).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,853,"            checkVectorDimensions(yData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,854,"            for (int i = 0; i < this.data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,855,"                data[i] = a * data[i] + b * yData[i];
",4,3,1,3,6,0,0,0,0,20,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,857,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,858,"            checkVectorDimensions(y);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,859,"            for (int i = 0; i < this.data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,860,"                data[i] = a * data[i] + b * y.getEntry(i);
",4,3,1,3,6,0,6,0,0,22,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,863,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,869,"        visitor.start(data.length, 0, data.length - 1);
",8,1,0,1,2,0,4,0,0,13,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,870,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,871,"            visitor.visit(i, data[i]);
",0,0,1,2,4,0,6,0,0,10,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,873,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,881,"        checkIndices(start, end);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,882,"        visitor.start(data.length, start, end);
",4,0,0,1,2,0,8,0,0,12,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,883,"        for (int i = start; i <= end; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,884,"            visitor.visit(i, data[i]);
",0,0,1,2,4,0,6,0,0,10,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,886,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,896,"        return walkInDefaultOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,908,"        return walkInDefaultOrder(visitor, start, end);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,914,"        visitor.start(data.length, 0, data.length - 1);
",8,1,0,1,2,0,4,0,0,13,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,915,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,916,"            data[i] = visitor.visit(i, data[i]);
",0,0,1,3,6,0,6,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,918,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,926,"        checkIndices(start, end);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,927,"        visitor.start(data.length, start, end);
",4,0,0,1,2,0,8,0,0,12,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,928,"        for (int i = start; i <= end; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,929,"            data[i] = visitor.visit(i, data[i]);
",0,0,1,3,6,0,6,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,931,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,941,"        return walkInDefaultOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,953,"        return walkInDefaultOrder(visitor, start, end);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,6,39,"public class ArrayRealVector extends RealVector implements Serializable {
",2,0,0,0,1,1,0,4,0,7,73,1,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,6,44,"        this(LocalizedFormats.UNSUPPORTED_OPERATION);
",4,0,0,1,2,0,0,0,0,4,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,6,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,6,52,"                                             Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,6,53,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,6,54,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,6,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,6,59,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,6,65,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathUnsupportedOperationException,6,71,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,6,37,"        this(LocalizedFormats.CONVERGENCE_FAILED);
",4,0,0,1,2,0,0,0,0,4,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,6,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,6,48,"                                Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,6,49,"        getContext().addMessage(pattern, args);
",0,0,0,2,4,0,8,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,6,50,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,6,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,6,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,6,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,6,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,6,60,"        super(cause);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,6,61,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,6,62,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,6,63,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,6,69,"        this(LocalizedFormats.ILLEGAL_STATE);
",4,0,0,1,2,0,0,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,6,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,6,74,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,6,80,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,6,86,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/TooManyEvaluationsException,6,37,"        super(max);
",2,0,0,1,2,0,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/TooManyEvaluationsException,6,38,"        getContext().addMessage(LocalizedFormats.EVALUATIONS);
",4,0,0,2,4,0,4,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/TooManyEvaluationsException,6,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,6,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);
",6,0,0,1,2,0,0,0,0,6,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,6,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,6,53,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,6,54,"        getContext().addMessage(specific, max, args);
",0,0,0,2,4,0,10,0,0,10,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,6,55,"        this.max = max;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,6,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MaxCountExceededException,6,62,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/TooManyIterationsException,6,37,"        super(max);
",2,0,0,1,2,0,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/TooManyIterationsException,6,38,"        getContext().addMessage(LocalizedFormats.ITERATIONS);
",4,0,0,2,4,0,4,0,0,8,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/TooManyIterationsException,6,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,88,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,154,"            } catch (SingularMatrixException e) {
",2,0,0,1,4,0,0,2,0,4,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,155,"                throw new ConvergenceException(LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM);
",4,0,0,1,2,0,0,2,0,6,82,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,168,"        throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer,6,178,"            throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);
",4,0,0,1,2,0,0,2,0,6,73,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/SingularMatrixException,6,36,"        super(LocalizedFormats.SINGULAR_MATRIX);
",4,0,0,1,2,0,0,0,0,4,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/SingularMatrixException,6,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,6,41,"        this(LocalizedFormats.NULL_NOT_ALLOWED);
",4,0,0,1,2,0,0,0,0,4,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,6,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,6,50,"        super(pattern, arguments);
",4,0,0,1,2,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,6,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,6,37,"    public MathInternalError() {
",2,0,0,1,3,1,0,0,0,3,28,2,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,6,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);
",4,0,0,2,4,0,6,0,0,10,69,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,6,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,6,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);
",8,0,0,1,2,0,0,0,0,8,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,6,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,6,56,"        super(pattern, args);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,6,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,6,50,"    public Weight(RealMatrix weight) {
",4,0,0,1,3,1,0,2,0,7,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,6,51,"        if (weight.getColumnDimension() != weight.getRowDimension()) {
",0,1,0,3,7,0,8,0,0,9,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,6,52,"            throw new NonSquareMatrixException(weight.getColumnDimension(),
",0,0,0,1,3,0,4,2,0,6,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,6,56,"        weightMatrix = weight.copy();
",2,0,0,1,2,0,4,0,0,7,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,6,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSquareMatrixException,6,40,"        super(LocalizedFormats.NON_SQUARE_MATRIX, wrong, expected);
",8,0,0,1,2,0,0,0,0,8,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSquareMatrixException,6,41,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer,6,32,"public abstract class MultivariateOptimizer
",2,0,0,0,0,2,0,0,0,4,43,1,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,144,"        this(updateFormula,
",2,0,0,0,1,0,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,148,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,261,"                beta = delta / deltaOld;
",6,1,0,0,0,0,0,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,262,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,272,"                throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,283,"                for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,284,"                    searchDirection[i] = steepestDescent[i] + beta * searchDirection[i];
",2,2,1,3,6,0,0,0,0,17,68,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,309,"                initialStep = ((BracketingStep) data).getBracketingStep();
",4,0,0,3,6,0,2,2,0,9,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,312,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,339,"        throw new MathIllegalStateException(LocalizedFormats.UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH);
",4,0,0,1,2,0,0,2,0,6,95,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,404,"            throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);
",4,0,0,1,2,0,0,2,0,6,73,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/GradientMultivariateOptimizer,6,33,"public abstract class GradientMultivariateOptimizer
",2,0,0,0,0,2,0,0,0,4,51,1,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,118,"        public BracketingStep(double step) {
",4,0,0,1,3,1,0,0,0,5,36,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,119,"            initialStep = step;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,120,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer,6,128,"            return initialStep;
",2,0,0,0,0,1,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,88,"        return new DataTransferObject(getKey(), getValue());
",0,0,0,3,6,1,4,2,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,125,"            throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);
",4,0,0,1,2,0,0,2,0,7,71,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,128,"            throw new NotStrictlyPositiveException(abs);
",2,0,0,1,2,0,0,2,0,4,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,227,"                    stop = checker.converged(iter, previous, current);
",2,0,0,1,2,0,10,0,0,13,50,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,234,"                    return (fVal > fX) ? current : previous;
",8,1,0,1,2,1,0,0,0,9,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,256,"                    final UnivariatePointValuePair optimum = line.search(x, d);
",2,0,0,1,2,1,8,2,0,13,59,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,257,"                    fVal = optimum.getValue();
",2,0,0,1,2,0,4,0,0,7,26,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,258,"                    alphaMin = optimum.getPoint();
",2,0,0,1,2,0,4,0,0,7,30,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,259,"                    final double[][] result = newPointAndDirection(x, d, alphaMin);
",2,0,0,3,6,1,8,0,0,11,63,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,260,"                    x = result[0];
",2,0,1,1,2,0,0,0,0,5,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,262,"                    final int lastInd = n - 1;
",4,1,0,0,0,1,0,0,0,6,26,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,263,"                    direc[bigInd] = direc[lastInd];
",0,0,1,2,4,0,0,0,0,9,31,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,264,"                    direc[lastInd] = result[1];
",0,0,1,2,4,0,0,0,0,7,27,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer,6,378,"            throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);
",4,0,0,1,2,0,0,2,0,6,73,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,214,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer,6,218,"            throw new MathUnsupportedOperationException(LocalizedFormats.CONSTRAINT);
",4,0,0,1,2,0,0,2,0,6,73,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,84,"            throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);
",4,0,0,1,2,0,0,2,0,7,71,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,87,"            throw new NotStrictlyPositiveException(abs);
",2,0,0,1,2,0,0,2,0,4,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,110,"        this(rel, abs, null);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,131,"            a = hi;
",4,0,0,0,0,0,0,0,0,5,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,132,"            b = lo;
",4,0,0,0,0,0,0,0,0,5,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,142,"            fx = -fx;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,191,"                            if (x <= m) {
",4,1,0,1,3,0,0,0,0,5,13,14,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,192,"                                d = tol1;
",4,0,0,0,0,0,0,0,0,5,9,16,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,194,"                                d = -tol1;
",4,0,0,0,0,0,0,0,0,6,10,16,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,218,"                    if (d >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,219,"                        u = x + tol1;
",6,1,0,0,0,0,0,0,0,8,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,221,"                        u = x - tol1;
",6,1,0,0,0,0,0,0,0,8,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,229,"                    fu = -fu;
",4,0,0,0,0,0,0,0,0,6,9,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,272,"                    } else if (fu <= fv ||
",4,3,0,0,2,0,0,0,0,7,22,11,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,275,"                        v = u;
",4,0,0,0,0,0,0,0,0,5,6,13,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,276,"                        fv = fu;
",4,0,0,0,0,0,0,0,0,5,8,13,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,280,"                return best(best,
",0,0,0,0,1,1,4,0,0,4,17,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,305,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,308,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BrentOptimizer,6,314,"            return a.getValue() >= b.getValue() ? a : b;
",4,1,0,2,4,1,8,0,0,13,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/UnivariateOptimizer,6,32,"public abstract class UnivariateOptimizer
",2,0,0,0,0,2,0,0,0,4,41,1,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,857,"            if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,858,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,861,"            if (other instanceof DoubleIndex) {
",2,0,0,1,3,0,0,2,0,4,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,862,"                return Double.compare(value, ((DoubleIndex) other).value) == 0;
",4,1,0,3,6,1,6,2,0,13,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,865,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,871,"            long bits = Double.doubleToLongBits(value);
",2,0,0,1,2,0,6,0,0,8,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,872,"            return (int) ((1438542 ^ (bits >>> 32) ^ bits) & 0xffffffff);
",4,3,0,4,8,1,0,0,0,7,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,908,"                value = CMAESOptimizer.this.computeObjectiveValue(point);
",4,0,0,1,2,0,4,0,0,9,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,918,"            final double[] lB = CMAESOptimizer.this.getLowerBound();
",4,0,0,2,4,1,2,0,0,7,56,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,919,"            final double[] uB = CMAESOptimizer.this.getUpperBound();
",4,0,0,2,4,1,2,0,0,7,56,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,921,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,922,"                if (x[i] < lB[i]) {
",0,1,1,3,7,0,0,0,0,9,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,923,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,925,"                if (x[i] > uB[i]) {
",0,1,1,3,7,0,0,0,0,9,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,926,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,929,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,950,"                    repaired[i] = lB[i];
",0,0,1,2,4,0,0,0,0,9,20,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,952,"                    repaired[i] = uB[i];
",0,0,1,2,4,0,0,0,0,9,20,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,245,"        return statisticsSigmaHistory;
",2,0,0,0,0,1,0,0,0,2,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,252,"        return statisticsMeanHistory;
",2,0,0,0,0,1,0,0,0,2,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,259,"        return statisticsFitnessHistory;
",2,0,0,0,0,1,0,0,0,2,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,266,"        return statisticsDHistory;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,406,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,409,"                    arz.setColumn(k, randn(dimension));
",0,0,0,2,4,0,10,0,0,10,35,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,414,"                } catch (TooManyEvaluationsException e) {
",2,0,0,1,4,0,0,2,0,4,41,11,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,415,"                    break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,443,"                    if (getConvergenceChecker().converged(iterations, optimum, lastResult)) {
",0,0,0,3,7,0,10,0,0,10,73,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,444,"                        break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,13,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,467,"                    break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,11,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,479,"                break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,487,"                final PointValuePair current
",2,0,0,0,0,1,0,2,0,5,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,490,"                if (lastResult != null &&
",2,2,0,0,1,0,0,0,0,4,25,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,492,"                    break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,11,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,494,"                lastResult = current;
",4,0,0,0,0,0,0,0,0,5,21,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,498,"                sigma = sigma * Math.exp(0.2 + cs / damps);
",8,3,0,1,2,0,4,0,0,16,43,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,502,"                sigma = sigma * Math.exp(0.2 + cs / damps);
",8,3,0,1,2,0,4,0,0,16,43,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,508,"                statisticsSigmaHistory.add(sigma);
",0,0,0,1,2,0,6,0,0,6,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,509,"                statisticsFitnessHistory.add(bestFitness);
",0,0,0,1,2,0,6,0,0,6,42,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,510,"                statisticsMeanHistory.add(xmean.transpose());
",0,0,0,2,4,0,8,0,0,8,45,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,511,"                statisticsDHistory.add(diagD.transpose().scalarMultiply(1E5));
",0,0,0,3,6,0,10,0,0,10,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,558,"                throw new DimensionMismatchException(inputSigma.length, init.length);
",8,0,0,1,2,0,0,2,0,10,69,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,562,"                    throw new OutOfRangeException(inputSigma[i], 0, uB[i] - lB[i]);
",0,1,1,4,8,0,0,2,0,15,63,11,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,575,"            throw new NotStrictlyPositiveException(lambda);
",2,0,0,1,2,0,0,2,0,4,47,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,682,"            diagonalOnly = 0;
",2,0,0,0,0,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,683,"            B = eye(dimension, dimension);
",2,0,0,1,2,0,6,0,0,9,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,684,"            BD = diag(diagD);
",2,0,0,1,2,0,4,0,0,7,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,685,"            C = diag(diagC);
",2,0,0,1,2,0,4,0,0,7,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,736,"                    negccov = negcovMax;
",4,0,0,0,0,0,0,0,0,5,20,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,751,"                C = C.scalarMultiply(oldFac) // regard old matrix
",2,0,0,1,2,0,6,0,0,9,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,777,"                for (int i = 0; i < dimension; i++) {
",8,1,0,1,3,0,0,0,0,10,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,778,"                    if (diagD.getEntry(i, 0) < 0) {
",0,1,0,2,5,0,6,0,0,7,31,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,779,"                        diagD.setEntry(i, 0, 0);
",0,0,0,1,2,0,6,0,0,6,24,13,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,782,"                final double tfac = max(diagD) / 1e14;
",2,1,0,1,2,1,4,0,0,8,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,783,"                C = C.add(eye(dimension, dimension).scalarMultiply(tfac));
",2,0,0,3,6,0,14,0,0,17,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,784,"                diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));
",2,0,0,3,6,0,12,0,0,15,59,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1296,"        final double[] randn = new double[size];
",2,0,1,2,4,1,0,0,0,5,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1297,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1298,"            randn[i] = random.nextGaussian();
",0,0,1,2,4,0,4,0,0,9,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,1300,"        return randn;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,6,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);
",10,0,0,1,2,0,0,0,0,10,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,6,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,6,62,"        super(specific, wrong, lo, hi);
",8,0,0,1,2,0,0,0,0,8,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,6,63,"        this.lo = lo;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,6,64,"        this.hi = hi;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,6,65,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,6,71,"        return lo;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,6,77,"        return hi;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,82,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,125,"        return count < maximalCount;
",4,1,0,0,0,1,0,0,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,136,"        for (int i = 0; i < value; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,137,"            incrementCount();
",0,0,0,1,2,0,2,0,0,2,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,139,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,156,"            maxCountCallback.trigger(maximalCount);
",0,0,0,1,2,0,6,0,0,6,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,293,"                    throw new NotPositiveException(s[i]);
",0,0,1,2,4,0,0,2,0,6,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,329,"                throw new NotStrictlyPositiveException(size);
",2,0,0,1,2,0,0,2,0,4,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,6,37,"        super(value, 0, true);
",2,0,0,1,2,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,6,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,6,47,"        super(specific, value, 0, true);
",4,0,0,1,2,0,0,0,0,5,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,6,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,65,"        this(n, 1d);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,76,"        this(createHypercubeSteps(n, sideLength));
",0,0,0,2,4,0,6,0,0,6,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,77,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,99,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,102,"            throw new ZeroException();
",0,0,0,1,2,0,0,2,0,2,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,113,"                    throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);
",4,0,0,1,2,0,0,2,0,6,68,11,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,132,"    protected AbstractSimplex(final double[][] referenceSimplex) {
",4,0,0,3,7,2,0,0,0,6,62,2,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,133,"        if (referenceSimplex.length <= 0) {
",4,1,0,1,3,0,0,0,0,5,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,134,"            throw new NotStrictlyPositiveException(LocalizedFormats.SIMPLEX_NEED_ONE_POINT,
",4,0,0,0,1,0,0,2,0,6,79,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,137,"        dimension = referenceSimplex.length - 1;
",6,1,0,0,0,0,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,141,"        startConfiguration = new double[dimension][dimension];
",2,0,1,2,4,0,0,0,0,7,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,142,"        final double[] ref0 = referenceSimplex[0];
",2,0,1,2,4,1,0,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,145,"        for (int i = 0; i < referenceSimplex.length; i++) {
",10,1,0,1,3,0,0,0,0,12,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,146,"            final double[] refI = referenceSimplex[i];
",2,0,1,2,4,1,0,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,149,"            if (refI.length != dimension) {
",6,1,0,1,3,0,0,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,150,"                throw new DimensionMismatchException(refI.length, dimension);
",6,0,0,1,2,0,0,2,0,8,61,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,152,"            for (int j = 0; j < i; j++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,153,"                final double[] refJ = referenceSimplex[j];
",2,0,1,2,4,1,0,0,0,7,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,154,"                boolean allEquals = true;
",2,0,0,0,0,0,0,0,0,3,25,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,155,"                for (int k = 0; k < dimension; k++) {
",8,1,0,1,3,0,0,0,0,10,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,156,"                    if (refI[k] != refJ[k]) {
",0,1,1,3,7,0,0,0,0,9,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,157,"                        allEquals = false;
",2,0,0,0,0,0,0,0,0,4,18,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,158,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,161,"                if (allEquals) {
",2,0,0,1,3,0,0,0,0,2,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,162,"                    throw new MathIllegalArgumentException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX,
",4,0,0,0,1,0,0,2,0,6,82,11,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,168,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,169,"                final double[] confI = startConfiguration[i - 1];
",4,1,1,2,4,1,0,0,0,8,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,170,"                for (int k = 0; k < dimension; k++) {
",8,1,0,1,3,0,0,0,0,10,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,171,"                    confI[k] = refI[k] - ref0[k];
",0,1,1,3,6,0,0,0,0,14,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,175,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,218,"            throw new DimensionMismatchException(dimension, startPoint.length);
",6,0,0,1,2,0,0,2,0,8,67,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,298,"            throw new OutOfRangeException(index, 0, simplex.length - 1);
",6,1,0,1,2,0,0,2,0,9,60,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,313,"            throw new OutOfRangeException(index, 0, simplex.length - 1);
",6,1,0,1,2,0,0,2,0,9,60,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,326,"            throw new DimensionMismatchException(points.length, simplex.length);
",8,0,0,1,2,0,0,2,0,10,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,340,"        final double[] steps = new double[n];
",2,0,1,2,4,1,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,341,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,342,"            steps[i] = sideLength;
",2,0,1,1,2,0,0,0,0,7,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/AbstractSimplex,6,344,"        return steps;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,56,"        this(n, 1d);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,69,"        this(n, sideLength,
",4,0,0,0,1,0,0,0,0,4,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,88,"        super(n, sideLength);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,90,"        this.rho = rho;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,91,"        this.khi = khi;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,92,"        this.gamma = gamma;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,93,"        this.sigma = sigma;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,94,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,109,"        this(n, 1d, rho, khi, gamma, sigma);
",10,0,0,1,2,0,0,0,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,110,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,156,"        this(referenceSimplex, DEFAULT_RHO, DEFAULT_KHI, DEFAULT_GAMMA, DEFAULT_SIGMA);
",10,0,0,1,2,0,0,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,157,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,176,"        super(referenceSimplex);
",2,0,0,1,2,0,0,0,0,2,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,178,"        this.rho = rho;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,179,"        this.khi = khi;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,180,"        this.gamma = gamma;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,181,"        this.sigma = sigma;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,182,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,253,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,270,"            final double[] xSmallest = getPoint(0).getPointRef();
",2,0,0,3,6,1,4,0,0,7,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,271,"            for (int i = 1; i <= n; i++) {
",8,1,0,1,3,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,272,"                final double[] x = getPoint(i).getPoint();
",2,0,0,3,6,1,6,0,0,9,42,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,273,"                for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,274,"                    x[j] = xSmallest[j] + sigma * (x[j] - xSmallest[j]);
",2,3,1,5,10,0,0,0,0,22,52,11,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,276,"                setPoint(i, new PointValuePair(x, Double.NaN, false));
",6,0,0,2,4,0,4,2,0,13,54,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/NelderMeadSimplex,6,278,"            evaluate(evaluationFunction, comparator);
",0,0,0,1,2,0,6,0,0,6,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,6,37,"        this(LocalizedFormats.ZERO_NOT_ALLOWED);
",4,0,0,1,2,0,0,0,0,4,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,6,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,6,47,"        super(specific, 0, arguments);
",4,0,0,1,2,0,0,0,0,4,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/ZeroException,6,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,47,"        this(n, 1d);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,59,"        this(n, sideLength, DEFAULT_KHI, DEFAULT_GAMMA);
",8,0,0,1,2,0,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,72,"        this(n, 1d, khi, gamma);
",6,0,0,1,2,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,73,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,87,"        super(n, sideLength);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,89,"        this.khi   = khi;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,90,"        this.gamma = gamma;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,91,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,129,"        this(referenceSimplex, DEFAULT_KHI, DEFAULT_GAMMA);
",6,0,0,1,2,0,0,0,0,6,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,130,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,146,"        super(referenceSimplex);
",2,0,0,1,2,0,0,0,0,2,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,148,"        this.khi   = khi;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,149,"        this.gamma = gamma;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/MultiDirectionalSimplex,6,150,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,87,"        super(relativeThreshold, absoluteThreshold);
",4,0,0,1,2,0,0,0,0,4,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,89,"        if (maxIter <= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,90,"            throw new NotStrictlyPositiveException(maxIter);
",2,0,0,1,2,0,0,2,0,4,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,92,"        maxIterationCount = maxIter;
",4,0,0,0,0,0,0,0,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,93,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,116,"            if (iteration >= maxIterationCount) {
",4,1,0,1,3,0,0,0,0,5,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/SimpleValueChecker,6,117,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,135,"        public DataTransferObject(final double[] point, final double[] value) {
",6,0,0,3,7,3,0,0,0,9,71,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,136,"            this.point = point.clone();
",2,0,0,1,2,0,4,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,137,"            this.value = value.clone();
",2,0,0,1,2,0,4,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,138,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointVectorValuePair,6,144,"            return new PointVectorValuePair(point, value, false);
",4,0,0,1,2,1,0,2,0,7,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/MaxIter,6,35,"    public MaxIter(int max) {
",4,0,0,1,3,1,0,0,0,5,25,2,0.00000,0
defect4j,math,org/apache/commons/math3/optim/MaxIter,6,36,"        if (max <= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/MaxIter,6,37,"            throw new NotStrictlyPositiveException(max);
",2,0,0,1,2,0,0,2,0,4,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/MaxIter,6,40,"        maxIter = max;
",4,0,0,0,0,0,0,0,0,5,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/MaxIter,6,41,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/MaxIter,6,49,"        return maxIter;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/MaxIter,6,60,"        return new MaxIter(Integer.MAX_VALUE);
",4,0,0,1,2,1,0,2,0,6,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/SearchInterval,6,50,"            throw new NumberIsTooLargeException(lo, hi, false);
",4,0,0,1,2,0,0,2,0,7,51,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/SearchInterval,6,54,"            throw new OutOfRangeException(init, lo, hi);
",6,0,0,1,2,0,0,2,0,8,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/SearchInterval,6,69,"        this(lo, hi, 0.5 * (lo + hi));
",8,2,0,2,4,0,0,0,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/SearchInterval,6,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,89,"        super(relativeThreshold, absoluteThreshold);
",4,0,0,1,2,0,0,0,0,4,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,91,"        if (maxIter <= 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,92,"            throw new NotStrictlyPositiveException(maxIter);
",2,0,0,1,2,0,0,2,0,4,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,94,"        maxIterationCount = maxIter;
",4,0,0,0,0,0,0,0,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,95,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,118,"            if (iteration >= maxIterationCount) {
",4,1,0,1,3,0,0,0,0,5,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/SimpleUnivariateValueChecker,6,119,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,92,"            throw new NotStrictlyPositiveException(growLimit);
",2,0,0,1,2,0,0,2,0,4,50,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,95,"            throw new NotStrictlyPositiveException(maxEvaluations);
",2,0,0,1,2,0,0,2,0,4,55,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,155,"                } else if (isMinim ?
",2,0,0,0,2,0,0,0,0,2,20,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,158,"                    xC = w;
",4,0,0,0,0,0,0,0,0,5,7,11,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,159,"                    fC = fW;
",4,0,0,0,0,0,0,0,0,5,8,11,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,160,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,162,"                w = xC + GOLD * (xC - xB);
",10,3,0,1,2,0,0,0,0,14,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,163,"                fW = eval(func, w);
",2,0,0,1,2,0,6,0,0,9,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,165,"                w = wLim;
",4,0,0,0,0,0,0,0,0,5,9,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,166,"                fW = eval(func, w);
",2,0,0,1,2,0,6,0,0,9,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,168,"                fW = eval(func, w);
",2,0,0,1,2,0,6,0,0,9,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,169,"                if (isMinim ?
",2,0,0,0,1,0,0,0,0,2,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,172,"                    xB = xC;
",4,0,0,0,0,0,0,0,0,5,8,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,173,"                    xC = w;
",4,0,0,0,0,0,0,0,0,5,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,174,"                    w = xC + GOLD * (xC - xB);
",10,3,0,1,2,0,0,0,0,14,26,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,175,"                    fB = fC;
",4,0,0,0,0,0,0,0,0,5,8,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,176,"                    fC =fW;
",4,0,0,0,0,0,0,0,0,5,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,177,"                    fW = eval(func, w);
",2,0,0,1,2,0,6,0,0,9,19,12,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,214,"        return evaluations.getMaximalCount();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,221,"        return evaluations.getCount();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,237,"        return fLo;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,253,"        return fHi;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,269,"        return fMid;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,282,"        } catch (MaxCountExceededException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/univariate/BracketFinder,6,283,"            throw new TooManyEvaluationsException(e.getMax());
",0,0,0,2,4,0,4,2,0,6,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/optim/MaxEval,6,37,"            throw new NotStrictlyPositiveException(max);
",2,0,0,1,2,0,0,2,0,4,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/optim/MaxEval,6,60,"        return new MaxEval(Integer.MAX_VALUE);
",4,0,0,1,2,1,0,2,0,6,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,228,"            throw new TooManyIterationsException(max);
",2,0,0,1,2,0,0,2,0,4,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,110,"        public DataTransferObject(final double[] point, final double value) {
",6,0,0,2,5,3,0,0,0,9,69,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,111,"            this.point = point.clone();
",2,0,0,1,2,0,4,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,112,"            this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,113,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/optim/PointValuePair,6,119,"            return new PointValuePair(point, value, false);
",4,0,0,1,2,1,0,2,0,7,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/optim/BaseOptimizer,6,213,"            throw new TooManyEvaluationsException(max);
",2,0,0,1,2,0,0,2,0,4,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Incrementor,6,66,"                     throw new MaxCountExceededException(max);
",2,0,0,1,2,0,0,2,0,4,41,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,701,"            = new Comparator<Pair<Double, double[]>>() {
",0,0,0,2,5,0,0,6,0,6,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,705,"                switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,707,"                    val = o1.getKey().compareTo(o2.getKey());
",2,0,0,3,6,0,10,0,0,13,41,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,708,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,710,"                    val = o2.getKey().compareTo(o1.getKey());
",2,0,0,3,6,0,10,0,0,13,41,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,711,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,714,"                    throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,716,"                return val;
",2,0,0,0,0,1,0,0,0,2,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,51,"    private MathArrays() {}
",2,0,0,2,4,1,0,0,0,3,23,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,84,"        double[] newArr = new double[arr.length];
",6,0,0,2,4,0,0,0,0,6,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,85,"        for (int i = 0; i < arr.length; i++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,86,"            newArr[i] = arr[i] * val;
",2,1,1,2,4,0,0,0,0,12,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,88,"        return newArr;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,100,"        for (int i = 0; i < arr.length; i++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,101,"            arr[i] *= val;
",2,0,1,1,2,0,0,0,0,7,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,117,"        if (a.length != b.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,118,"            throw new DimensionMismatchException(a.length, b.length);
",8,0,0,1,2,0,0,2,0,10,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,121,"        final double[] result = a.clone();
",2,0,0,2,4,1,4,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,122,"        for (int i = 0; i < a.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,123,"            result[i] += b[i];
",0,0,1,2,4,0,0,0,0,9,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,125,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,139,"        if (a.length != b.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,140,"            throw new DimensionMismatchException(a.length, b.length);
",8,0,0,1,2,0,0,2,0,10,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,143,"        final double[] result = a.clone();
",2,0,0,2,4,1,4,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,144,"        for (int i = 0; i < a.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,145,"            result[i] -= b[i];
",0,0,1,2,4,0,0,0,0,9,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,147,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,161,"        if (a.length != b.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,162,"            throw new DimensionMismatchException(a.length, b.length);
",8,0,0,1,2,0,0,2,0,10,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,165,"        final double[] result = a.clone();
",2,0,0,2,4,1,4,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,166,"        for (int i = 0; i < a.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,167,"            result[i] *= b[i];
",0,0,1,2,4,0,0,0,0,9,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,169,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,183,"        if (a.length != b.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,184,"            throw new DimensionMismatchException(a.length, b.length);
",8,0,0,1,2,0,0,2,0,10,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,187,"        final double[] result = a.clone();
",2,0,0,2,4,1,4,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,188,"        for (int i = 0; i < a.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,189,"            result[i] /= b[i];
",0,0,1,2,4,0,0,0,0,9,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,191,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,202,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,203,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,204,"            sum += FastMath.abs(p1[i] - p2[i]);
",2,1,1,3,6,0,4,0,0,16,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,206,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,217,"      int sum = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,218,"      for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,219,"          sum += FastMath.abs(p1[i] - p2[i]);
",2,1,1,3,6,0,4,0,0,16,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,221,"      return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,232,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,233,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,234,"            final double dp = p1[i] - p2[i];
",2,1,1,2,4,1,0,0,0,12,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,235,"            sum += dp * dp;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,237,"        return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,248,"      double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,249,"      for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,250,"          final double dp = p1[i] - p2[i];
",2,1,1,2,4,1,0,0,0,12,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,251,"          sum += dp * dp;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,253,"      return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,264,"        double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,265,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,266,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));
",2,1,1,4,8,0,10,0,0,22,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,268,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,279,"        int max = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,280,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,281,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));
",2,1,1,4,8,0,10,0,0,22,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,283,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,308,"        T previous = val[0];
",2,0,1,1,2,0,0,2,0,6,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,309,"        final int max = val.length;
",6,0,0,0,0,1,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,310,"        for (int i = 1; i < max; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,312,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,314,"                comp = previous.compareTo(val[i]);
",2,0,1,2,4,0,4,0,0,11,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,315,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,316,"                    if (comp >= 0) {
",2,1,0,1,3,0,0,0,0,3,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,317,"                        return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,320,"                    if (comp > 0) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,321,"                        return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,326,"                comp = val[i].compareTo(previous);
",2,0,1,2,4,0,4,0,0,11,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,327,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,328,"                    if (comp >= 0) {
",2,1,0,1,3,0,0,0,0,3,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,329,"                        return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,332,"                    if (comp > 0) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,333,"                       return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,339,"                throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,342,"            previous = val[i];
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,344,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,356,"        return checkOrder(val, dir, strict, false);
",0,0,0,1,2,1,8,0,0,9,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,373,"        double previous = val[0];
",2,0,1,1,2,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,374,"        final int max = val.length;
",6,0,0,0,0,1,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,378,"        for (index = 1; index < max; index++) {
",8,1,0,1,3,0,0,0,0,11,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,379,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,381,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,382,"                    if (val[index] <= previous) {
",2,1,1,2,5,0,0,0,0,7,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,383,"                        break ITEM;
",2,0,0,0,0,0,0,0,0,2,11,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,386,"                    if (val[index] < previous) {
",2,1,1,2,5,0,0,0,0,7,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,387,"                        break ITEM;
",2,0,0,0,0,0,0,0,0,2,11,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,392,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,393,"                    if (val[index] >= previous) {
",2,1,1,2,5,0,0,0,0,7,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,394,"                        break ITEM;
",2,0,0,0,0,0,0,0,0,2,11,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,397,"                    if (val[index] > previous) {
",2,1,1,2,5,0,0,0,0,7,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,398,"                        break ITEM;
",2,0,0,0,0,0,0,0,0,2,11,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,404,"                throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,407,"            previous = val[index];
",2,0,1,1,2,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,410,"        if (index == max) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,412,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,416,"        if (abort) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,417,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);
",8,0,1,2,4,0,0,2,0,14,82,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,419,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,434,"        checkOrder(val, dir, strict, true);
",0,0,0,1,2,0,8,0,0,9,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,435,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,445,"        checkOrder(val, OrderDirection.INCREASING, true);
",4,0,0,1,2,0,4,0,0,9,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,446,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,458,"        MathUtils.checkNotNull(in);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,459,"        for (int i = 1; i < in.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,460,"            if (in[i].length != in[0].length) {
",4,1,1,3,7,0,0,0,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,461,"                throw new DimensionMismatchException(
",0,0,0,0,1,0,0,2,0,2,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,466,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,478,"        for (int i = 0; i < in.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,479,"            if (in[i] <= 0) {
",0,1,1,2,5,0,0,0,0,5,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,480,"                throw new NotStrictlyPositiveException(in[i]);
",0,0,1,2,4,0,0,2,0,6,46,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,483,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,494,"        for (int i = 0; i < in.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,495,"            if (in[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,496,"                throw new NotPositiveException(in[i]);
",0,0,1,2,4,0,0,2,0,6,38,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,499,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,510,"        for (int i = 0; i < in.length; i ++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,511,"            for (int j = 0; j < in[i].length; j++) {
",8,1,1,2,5,0,0,0,0,14,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,512,"                if (in[i][j] < 0) {
",0,1,1,3,7,0,0,0,0,7,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,513,"                    throw new NotPositiveException(in[i][j]);
",0,0,1,3,6,0,0,2,0,8,41,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,517,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,580,"        double rdwarf = 3.834e-20;
",2,0,0,0,0,0,0,0,0,2,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,581,"        double rgiant = 1.304e+19;
",2,0,0,0,0,0,0,0,0,2,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,582,"        double s1 = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,583,"        double s2 = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,584,"        double s3 = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,585,"        double x1max = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,586,"        double x3max = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,587,"        double floatn = v.length;
",6,0,0,0,0,0,0,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,588,"        double agiant = rgiant / floatn;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,589,"        for (int i = 0; i < v.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,590,"            double xabs = Math.abs(v[i]);
",2,0,1,2,4,0,4,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,591,"            if (xabs < rdwarf || xabs > agiant) {
",8,3,0,1,3,0,0,0,0,11,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,592,"                if (xabs > rdwarf) {
",4,1,0,1,3,0,0,0,0,5,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,593,"                    if (xabs > x1max) {
",4,1,0,1,3,0,0,0,0,5,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,594,"                        double r = x1max / xabs;
",6,1,0,0,0,0,0,0,0,7,24,13,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,595,"                        s1= 1 + s1 * r * r;
",8,2,0,0,0,0,0,0,0,11,19,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,596,"                        x1max = xabs;
",4,0,0,0,0,0,0,0,0,5,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,597,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,598,"                        double r = xabs / x1max;
",6,1,0,0,0,0,0,0,0,7,24,13,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,599,"                        s1 += r * r;
",6,1,0,0,0,0,0,0,0,8,12,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,600,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,602,"                    if (xabs > x3max) {
",4,1,0,1,3,0,0,0,0,5,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,603,"                        double r = x3max / xabs;
",6,1,0,0,0,0,0,0,0,7,24,13,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,604,"                        s3= 1 + s3 * r * r;
",8,2,0,0,0,0,0,0,0,11,19,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,605,"                        x3max = xabs;
",4,0,0,0,0,0,0,0,0,5,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,606,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,607,"                        if (xabs != 0) {
",2,1,0,1,3,0,0,0,0,3,16,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,608,"                            double r = xabs / x3max;
",6,1,0,0,0,0,0,0,0,7,24,15,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,609,"                            s3 += r * r;
",6,1,0,0,0,0,0,0,0,8,12,14,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,610,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,614,"                s2 += xabs * xabs;
",6,1,0,0,0,0,0,0,0,8,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,618,"        if (s1 != 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,619,"            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);
",12,4,0,2,4,0,4,0,0,21,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,621,"            if (s2 == 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,622,"                norm = x3max * Math.sqrt(s3);
",4,1,0,1,2,0,6,0,0,12,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,624,"                if (s2 >= x3max) {
",4,1,0,1,3,0,0,0,0,5,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,625,"                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));
",12,5,0,4,8,0,4,0,0,22,57,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,627,"                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
",12,4,0,4,8,0,4,0,0,21,56,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,631,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,652,"        sortInPlace(x, OrderDirection.INCREASING, yList);
",4,0,0,1,2,0,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,653,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,676,"        if (x == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,677,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,680,"        final int len = x.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,681,"        final List<Pair<Double, double[]>> list
",2,0,0,1,2,1,0,6,0,9,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,684,"        final int yListLen = yList.length;
",6,0,0,0,0,1,0,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,685,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,686,"            final double[] yValues = new double[yListLen];
",2,0,1,2,4,1,0,0,0,5,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,687,"            for (int j = 0; j < yListLen; j++) {
",8,1,0,1,3,0,0,0,0,10,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,688,"                double[] y = yList[j];
",2,0,1,2,4,0,0,0,0,6,22,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,689,"                if (y == null) {
",2,1,0,1,3,0,0,0,0,3,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,690,"                    throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,692,"                if (y.length != len) {
",6,1,0,1,3,0,0,0,0,7,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,693,"                    throw new DimensionMismatchException(y.length, len);
",6,0,0,1,2,0,0,2,0,8,52,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,695,"                yValues[j] = y[i];
",0,0,1,2,4,0,0,0,0,9,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,697,"            list.add(new Pair<Double, double[]>(x[i], yValues));
",2,0,1,4,8,0,4,4,0,14,52,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,700,"        final Comparator<Pair<Double, double[]>> comp
",2,0,0,1,2,1,0,6,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,720,"        Collections.sort(list, comp);
",0,0,0,1,2,0,8,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,722,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,723,"            final Pair<Double, double[]> e = list.get(i);
",2,0,0,2,4,1,6,4,0,13,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,724,"            x[i] = e.getKey();
",0,0,1,2,4,0,4,0,0,9,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,725,"            final double[] yValues = e.getValue();
",2,0,0,2,4,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,726,"            for (int j = 0; j < yListLen; j++) {
",8,1,0,1,3,0,0,0,0,10,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,727,"                yList[j][i] = yValues[j];
",0,0,1,3,6,0,0,0,0,11,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,730,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,739,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,801,"        final int len = a.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,802,"        if (len != b.length) {
",6,1,0,1,3,0,0,0,0,7,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,803,"            throw new DimensionMismatchException(len, b.length);
",6,0,0,1,2,0,0,2,0,8,52,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,806,"        final double[] prodHigh = new double[len];
",2,0,1,2,4,1,0,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,807,"        double prodLowSum = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,809,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,810,"            final double ai = a[i];
",2,0,1,1,2,1,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,811,"            final double ca = SPLIT_FACTOR * ai;
",6,1,0,0,0,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,812,"            final double aHigh = ca - (ca - ai);
",8,2,0,1,2,1,0,0,0,11,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,813,"            final double aLow = ai - aHigh;
",6,1,0,0,0,1,0,0,0,8,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,815,"            final double bi = b[i];
",2,0,1,1,2,1,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,816,"            final double cb = SPLIT_FACTOR * bi;
",6,1,0,0,0,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,817,"            final double bHigh = cb - (cb - bi);
",8,2,0,1,2,1,0,0,0,11,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,818,"            final double bLow = bi - bHigh;
",6,1,0,0,0,1,0,0,0,8,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,819,"            prodHigh[i] = ai * bi;
",4,1,1,1,2,0,0,0,0,10,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,820,"            final double prodLow = aLow * bLow - (((prodHigh[i] -
",6,5,1,1,5,1,0,0,0,16,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,824,"            prodLowSum += prodLow;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,828,"        final double prodHighCur = prodHigh[0];
",2,0,1,1,2,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,829,"        double prodHighNext = prodHigh[1];
",2,0,1,1,2,0,0,0,0,4,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,830,"        double sHighPrev = prodHighCur + prodHighNext;
",6,1,0,0,0,0,0,0,0,7,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,831,"        double sPrime = sHighPrev - prodHighNext;
",6,1,0,0,0,0,0,0,0,7,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,832,"        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
",12,4,0,3,6,0,0,0,0,16,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,834,"        final int lenMinusOne = len - 1;
",4,1,0,0,0,1,0,0,0,6,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,835,"        for (int i = 1; i < lenMinusOne; i++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,836,"            prodHighNext = prodHigh[i + 1];
",4,1,1,1,2,0,0,0,0,8,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,837,"            final double sHighCur = sHighPrev + prodHighNext;
",6,1,0,0,0,1,0,0,0,8,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,838,"            sPrime = sHighCur - prodHighNext;
",6,1,0,0,0,0,0,0,0,8,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,839,"            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
",12,4,0,3,6,0,0,0,0,17,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,840,"            sHighPrev = sHighCur;
",4,0,0,0,0,0,0,0,0,5,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,843,"        double result = sHighPrev + (prodLowSum + sLowSum);
",8,2,0,1,2,0,0,0,0,10,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,845,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,848,"            result = 0;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,849,"            for (int i = 0; i < len; ++i) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,850,"                result += a[i] * b[i];
",2,1,1,2,4,0,0,0,0,12,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,854,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,893,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,894,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,895,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,896,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,897,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,898,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,901,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,902,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,905,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,906,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,907,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,908,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,909,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,910,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,913,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,914,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,917,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,918,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,919,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,923,"        double result = s12High + (prod1Low + prod2Low + s12Low);
",10,2,0,1,2,0,0,0,0,12,57,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,925,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,928,"            result = a1 * b1 + a2 * b2;
",10,3,0,0,0,0,0,0,0,14,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,931,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,973,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,974,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,975,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,976,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,977,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,978,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,981,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,982,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,985,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,986,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,987,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,988,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,989,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,990,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,993,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,994,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,997,"        final double ca3        = SPLIT_FACTOR * a3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,998,"        final double a3High     = ca3 - (ca3 - a3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,999,"        final double a3Low      = a3 - a3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1000,"        final double cb3        = SPLIT_FACTOR * b3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1001,"        final double b3High     = cb3 - (cb3 - b3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1002,"        final double b3Low      = b3 - b3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1005,"        final double prod3High  = a3 * b3;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1006,"        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1009,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1010,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1011,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1014,"        final double s123High   = s12High + prod3High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1015,"        final double s123Prime  = s123High - prod3High;
",6,1,0,0,0,1,0,0,0,8,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1016,"        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);
",12,4,0,3,6,1,0,0,0,17,87,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1020,"        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);
",14,2,0,1,2,0,0,0,0,16,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1022,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1025,"            result = a1 * b1 + a2 * b2 + a3 * b3;
",14,5,0,0,0,0,0,0,0,20,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1028,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1075,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1076,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1077,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1078,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1079,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1080,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1083,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1084,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1087,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1088,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1089,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1090,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1091,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1092,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1095,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1096,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1099,"        final double ca3        = SPLIT_FACTOR * a3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1100,"        final double a3High     = ca3 - (ca3 - a3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1101,"        final double a3Low      = a3 - a3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1102,"        final double cb3        = SPLIT_FACTOR * b3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1103,"        final double b3High     = cb3 - (cb3 - b3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1104,"        final double b3Low      = b3 - b3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1107,"        final double prod3High  = a3 * b3;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1108,"        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1111,"        final double ca4        = SPLIT_FACTOR * a4;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1112,"        final double a4High     = ca4 - (ca4 - a4);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1113,"        final double a4Low      = a4 - a4High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1114,"        final double cb4        = SPLIT_FACTOR * b4;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1115,"        final double b4High     = cb4 - (cb4 - b4);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1116,"        final double b4Low      = b4 - b4High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1119,"        final double prod4High  = a4 * b4;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1120,"        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1123,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1124,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1125,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1128,"        final double s123High   = s12High + prod3High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1129,"        final double s123Prime  = s123High - prod3High;
",6,1,0,0,0,1,0,0,0,8,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1130,"        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);
",12,4,0,3,6,1,0,0,0,17,87,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1133,"        final double s1234High  = s123High + prod4High;
",6,1,0,0,0,1,0,0,0,8,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1134,"        final double s1234Prime = s1234High - prod4High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1135,"        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);
",12,4,0,3,6,1,0,0,0,17,91,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1139,"        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);
",18,2,0,1,2,0,0,0,0,20,102,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1141,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1144,"            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;
",18,7,0,0,0,0,0,0,0,26,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1147,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1161,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1162,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1164,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1165,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1167,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1168,"            if (!Precision.equals(x[i], y[i])) {
",0,0,1,4,9,0,4,0,0,13,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1169,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1172,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1187,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1188,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1190,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1191,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1193,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1194,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {
",0,0,1,4,9,0,4,0,0,13,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1195,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1198,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1212,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1213,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1215,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1216,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1218,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1219,"            if (!Precision.equals(x[i], y[i])) {
",0,0,1,4,9,0,4,0,0,13,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1220,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1223,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1238,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1239,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1241,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1242,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1244,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1245,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {
",0,0,1,4,9,0,4,0,0,13,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1246,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1249,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1276,"         if (Double.isInfinite(normalizedSum)) {
",0,0,0,2,5,0,6,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1277,"             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);
",4,0,0,1,2,0,0,2,0,6,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1279,"         if (Double.isNaN(normalizedSum)) {
",0,0,0,2,5,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1280,"             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
",4,0,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1282,"         double sum = 0d;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1283,"         final int len = values.length;
",6,0,0,0,0,1,0,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1284,"         double[] out = new double[len];
",2,0,1,2,4,0,0,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1285,"         for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1286,"             if (Double.isInfinite(values[i])) {
",0,0,1,3,7,0,4,0,0,8,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1287,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
",6,0,1,2,4,0,0,2,0,12,94,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1289,"             if (!Double.isNaN(values[i])) {
",0,0,1,3,7,0,4,0,0,9,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1290,"                 sum += values[i];
",2,0,1,1,2,0,0,0,0,7,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1293,"         if (sum == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1294,"             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);
",4,0,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1296,"         for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1297,"             if (Double.isNaN(values[i])) {
",0,0,1,3,7,0,4,0,0,8,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1298,"                 out[i] = Double.NaN;
",4,0,1,1,2,0,0,0,0,9,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1300,"                 out[i] = values[i] * normalizedSum / sum;
",4,2,1,2,4,0,0,0,0,15,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1303,"         return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1317,"         T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);
",2,0,0,5,10,0,10,4,0,16,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1318,"         Arrays.fill(array, field.getZero());
",0,0,0,2,4,0,10,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1319,"         return array;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1336,"         if (columns < 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1337,"             T[] dummyRow = buildArray(field, 0);
",2,0,0,2,4,0,4,2,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1338,"             array = (T[][]) Array.newInstance(dummyRow.getClass(), rows);
",2,0,0,5,10,0,10,2,0,15,61,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1339,"         } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1340,"             array = (T[][]) Array.newInstance(field.getRuntimeClass(),
",2,0,0,4,9,0,8,2,0,13,58,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1344,"             for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1345,"                 Arrays.fill(array[i], field.getZero());
",0,0,1,3,6,0,8,0,0,12,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,1348,"         return array;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,6,6134,"    private FastMathLiteralArrays() {}
",2,0,0,2,4,1,0,0,0,3,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,6,6142,"        return EXP_INT_A.clone();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,6,6150,"        return EXP_INT_B.clone();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,6,6158,"        return EXP_FRAC_A.clone();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,6,6166,"        return EXP_FRAC_B.clone();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,289,"    public static enum OrderDirection {
",2,0,0,0,1,2,0,0,0,4,35,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,291,"        INCREASING,
",2,0,0,0,0,0,0,0,0,2,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,293,"        DECREASING
",2,0,0,0,0,0,0,0,0,2,10,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,6,312,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,34,"    private CompositeFormat() {}
",2,0,0,2,4,1,0,0,0,3,28,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,68,"        parseNextCharacter(source, pos);
",0,0,0,1,2,0,6,0,0,6,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,69,"        pos.setIndex(pos.getIndex() - 1);
",0,1,0,2,4,0,8,0,0,9,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,81,"         int index = pos.getIndex();
",2,0,0,1,2,0,4,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,82,"         final int n = source.length();
",2,0,0,1,2,1,4,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,83,"         char ret = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,85,"         if (index < n) {
",4,1,0,1,3,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,88,"                 c = source.charAt(index++);
",4,0,0,1,2,0,4,0,0,10,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,89,"             } while (Character.isWhitespace(c) && index < n);
",4,2,0,2,5,0,6,0,0,12,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,90,"             pos.setIndex(index);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,92,"             if (index < n) {
",4,1,0,1,3,0,0,0,0,5,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,93,"                 ret = c;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,97,"         return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,111,"        Number ret = null;
",2,0,0,0,0,0,0,2,0,4,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,113,"        StringBuilder sb = new StringBuilder();
",2,0,0,1,2,0,0,4,0,6,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,114,"        sb.append('(');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,115,"        sb.append(value);
",0,0,0,1,2,0,6,0,0,6,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,116,"        sb.append(')');
",0,0,0,1,3,0,4,0,0,5,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,118,"        final int n = sb.length();
",2,0,0,1,2,1,4,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,119,"        final int startIndex = pos.getIndex();
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,120,"        final int endIndex = startIndex + n;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,121,"        if (endIndex < source.length()) {
",2,1,0,2,5,0,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,122,"            if (source.substring(startIndex, endIndex).compareTo(sb.toString()) == 0) {
",0,1,0,4,9,0,14,0,0,15,75,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,123,"                ret = Double.valueOf(value);
",2,0,0,1,2,0,6,0,0,9,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,124,"                pos.setIndex(endIndex);
",0,0,0,1,2,0,6,0,0,6,23,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,128,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,143,"        final int startIndex = pos.getIndex();
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,144,"        Number number = format.parse(source, pos);
",2,0,0,1,2,0,8,2,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,145,"        final int endIndex = pos.getIndex();
",2,0,0,1,2,1,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,148,"        if (startIndex == endIndex) {
",4,1,0,1,3,0,0,0,0,5,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,150,"            final double[] special = {
",2,0,0,1,3,1,0,0,0,3,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,153,"            for (int i = 0; i < special.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,154,"                number = parseNumber(source, special[i], pos);
",2,0,1,2,4,0,6,0,0,13,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,155,"                if (number != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,156,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,161,"        return number;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,175,"        final int startIndex = pos.getIndex();
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,176,"        final int endIndex = startIndex + expected.length();
",4,1,0,1,2,1,4,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,177,"        if ((startIndex >= source.length()) ||
",2,2,0,2,5,0,4,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,181,"            pos.setIndex(startIndex);
",0,0,0,1,2,0,6,0,0,6,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,182,"            pos.setErrorIndex(startIndex);
",0,0,0,1,2,0,6,0,0,6,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,183,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,187,"        pos.setIndex(endIndex);
",0,0,0,1,2,0,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,188,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,211,"        if( Double.isNaN(value) || Double.isInfinite(value) ) {
",0,1,0,3,7,0,12,0,0,13,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,212,"            toAppendTo.append('(');
",0,0,0,1,3,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,213,"            toAppendTo.append(value);
",0,0,0,1,2,0,6,0,0,6,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,214,"            toAppendTo.append(')');
",0,0,0,1,3,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,216,"            format.format(value, toAppendTo, pos);
",0,0,0,1,2,0,10,0,0,10,38,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,6,218,"        return toAppendTo;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,6,43,"    public MathArithmeticException() {
",2,0,0,1,3,1,0,0,0,3,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,6,44,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,6,45,"        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);
",4,0,0,1,2,0,4,0,0,8,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,6,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,6,56,"                                   Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,6,57,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,6,58,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,6,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,6,63,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,6,69,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,6,75,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,6,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);
",12,0,0,1,2,0,0,0,0,13,73,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,6,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,6,80,"        super(direction == MathArrays.OrderDirection.INCREASING ?
",8,1,0,0,1,0,0,0,0,9,57,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,6,89,"        this.direction = direction;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,6,90,"        this.strict = strict;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,6,91,"        this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,6,92,"        this.previous = previous;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,6,93,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,6,99,"        return direction;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,6,105,"        return strict;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,6,113,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,6,119,"        return previous;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3838,"                --k;
",2,0,0,0,0,0,0,0,0,3,4,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3839,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,47,"    private MathUtils() {}
",2,0,0,2,4,1,0,0,0,3,22,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,57,"        return new Double(value).hashCode();
",2,0,0,2,4,1,2,2,0,6,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,68,"        return Arrays.hashCode(value);
",0,0,0,1,2,1,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,91,"         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);
",14,5,0,2,4,1,4,0,0,23,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,113,"        final double p = FastMath.abs(period);
",2,0,0,1,2,1,6,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,114,"        return a - p * FastMath.floor((a - offset) / p) - offset;
",12,5,0,2,4,1,4,0,0,21,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,129,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,131,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,132,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,134,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,136,"            return (byte) -magnitude; // Flip sign.
",2,0,0,1,2,1,0,0,0,3,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,152,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,154,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,155,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,157,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,159,"            return (short) -magnitude; // Flip sign.
",2,0,0,1,2,1,0,0,0,3,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,175,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,177,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,178,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,180,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,182,"            return -magnitude; // Flip sign.
",2,0,0,0,0,1,0,0,0,3,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,198,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,200,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,201,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,203,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,205,"            return -magnitude; // Flip sign.
",2,0,0,0,0,1,0,0,0,3,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,217,"        if (Double.isInfinite(x) || Double.isNaN(x)) {
",0,1,0,3,7,0,12,0,0,13,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,218,"            throw new NotFiniteNumberException(x);
",2,0,0,1,2,0,0,2,0,4,38,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,220,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,231,"        for (int i = 0; i < val.length; i++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,232,"            final double x = val[i];
",2,0,1,1,2,1,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,233,"            if (Double.isInfinite(x) || Double.isNaN(x)) {
",0,1,0,3,7,0,12,0,0,13,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,234,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);
",8,0,0,1,2,0,0,2,0,10,73,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,237,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,251,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,252,"            throw new NullArgumentException(pattern, args);
",4,0,0,1,2,0,0,2,0,6,47,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,254,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,6,265,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,6,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);
",8,0,0,1,2,0,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,6,41,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,6,53,"        super(specific, wrong, args);
",6,0,0,1,2,0,0,0,0,6,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,6,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3744,"    private static class ExpFracTable {
",2,0,0,0,1,2,0,0,0,4,35,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3770,"                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();
",2,0,0,1,2,0,4,0,0,7,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3771,"                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();
",2,0,0,1,2,0,4,0,0,7,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3773,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,83,"    private Precision() {}
",2,0,0,2,4,1,0,0,0,3,22,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,98,"        } else if (x < y) {
",4,1,0,1,4,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,99,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,101,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,122,"        if (equals(x, y, maxUlps)) {
",0,0,0,2,5,0,8,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,123,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,124,"        } else if (x < y) {
",4,1,0,1,4,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,125,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,127,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,139,"        return equals(x, y, 1);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,152,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);
",0,2,0,4,8,1,18,0,0,20,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,166,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;
",6,3,0,2,4,1,10,0,0,19,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,181,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);
",6,3,0,3,6,1,10,0,0,19,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,203,"        int xInt = Float.floatToIntBits(x);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,204,"        int yInt = Float.floatToIntBits(y);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,207,"        if (xInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,208,"            xInt = SGN_MASK_FLOAT - xInt;
",6,1,0,0,0,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,210,"        if (yInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,211,"            yInt = SGN_MASK_FLOAT - yInt;
",6,1,0,0,0,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,214,"        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
",8,2,0,1,2,1,4,0,0,15,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,216,"        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);
",2,1,0,2,4,1,12,0,0,17,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,232,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);
",0,2,0,4,8,1,20,0,0,22,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,257,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);
",0,2,0,4,8,1,18,0,0,20,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,288,"        if (equals(x, y, 1)) {
",0,0,0,2,5,0,6,0,0,6,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,289,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,292,"        final double absoluteMax = FastMath.max(FastMath.abs(x), FastMath.abs(y));
",2,0,0,3,6,1,16,0,0,19,74,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,293,"        final double relativeDifference = FastMath.abs((x - y) / absoluteMax);
",8,2,0,2,4,1,4,0,0,15,70,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,295,"        return relativeDifference <= eps;
",4,1,0,0,0,1,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,310,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);
",6,3,0,3,6,1,10,0,0,19,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,360,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);
",0,2,0,4,8,1,20,0,0,22,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,373,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);
",4,0,0,1,2,1,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,395,"            return (new BigDecimal
",0,0,0,0,1,1,0,2,0,2,22,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,399,"        } catch (NumberFormatException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,400,"            if (Double.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,401,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,403,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,418,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);
",4,0,0,1,2,1,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,436,"        final float sign = FastMath.copySign(1f, x);
",2,0,0,1,2,1,6,0,0,9,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,437,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;
",4,1,0,2,4,1,6,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,438,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;
",6,2,0,2,4,1,6,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,458,"        switch (roundingMethod) {
",2,0,0,1,3,0,0,0,0,2,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,460,"            if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,461,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,463,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,465,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,467,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,468,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,470,"            if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,471,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,473,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,475,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,477,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);
",6,0,0,1,2,0,6,0,0,13,66,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,478,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,479,"            if (fraction > 0.5) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,480,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,482,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,484,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,487,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,488,"            if (fraction > 0.5) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,489,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,490,"            } else if (fraction < 0.5) {
",2,1,0,1,4,0,0,0,0,3,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,491,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,494,"                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math
",0,3,0,1,4,0,12,0,0,15,57,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,496,"                    unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,498,"                    unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,501,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,504,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);
",6,0,0,1,2,0,6,0,0,13,66,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,505,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,506,"            if (fraction >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,507,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,509,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,511,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,514,"            if (unscaled != FastMath.floor(unscaled)) {
",2,1,0,2,5,0,6,0,0,9,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,515,"                throw new MathArithmeticException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,519,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,520,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,522,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,
",4,0,0,0,1,0,0,2,0,6,80,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,533,"        return unscaled;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,6,553,"        return x + originalDelta - x;
",6,2,0,0,0,1,0,0,0,8,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3705,"    private static class ExpIntTable {
",2,0,0,0,1,2,0,0,0,4,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3737,"                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();
",2,0,0,1,2,0,4,0,0,7,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3738,"                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();
",2,0,0,1,2,0,4,0,0,7,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3740,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,353,"    private FastMath() {}
",2,0,0,2,4,1,0,0,0,3,21,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,365,"        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){
",12,3,0,1,3,0,0,0,0,16,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,366,"            return d; // These are un-normalised - don't try to convert
",2,0,0,0,0,1,0,0,0,2,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,368,"        long xl = Double.doubleToLongBits(d);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,369,"        xl = xl & MASK_30BITS; // Drop low order bits
",6,1,0,0,0,0,0,0,0,8,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,370,"        return Double.longBitsToDouble(xl);
",0,0,0,1,2,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,387,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,388,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,396,"      if (x > 20) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,397,"          if (x >= LOG_MAX_VALUE) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,399,"              final double t = exp(0.5 * x);
",4,1,0,1,2,1,2,0,0,8,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,400,"              return (0.5 * t) * t;
",4,2,0,1,2,1,0,0,0,6,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,402,"              return 0.5 * exp(x);
",0,1,0,1,2,1,4,0,0,5,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,404,"      } else if (x < -20) {
",2,1,0,1,4,0,0,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,405,"          if (x <= -LOG_MAX_VALUE) {
",4,1,0,1,3,0,0,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,407,"              final double t = exp(-0.5 * x);
",4,1,0,1,2,1,2,0,0,9,31,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,408,"              return (0.5 * t) * t;
",4,2,0,1,2,1,0,0,0,6,21,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,410,"              return 0.5 * exp(-x);
",2,1,0,1,2,1,2,0,0,6,21,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,414,"      final double hiPrec[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,415,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,416,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,418,"      exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,420,"      double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,421,"      double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,423,"      double temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,424,"      double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,425,"      double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,428,"      double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,429,"      temp = recip * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,430,"      double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,431,"      double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,434,"      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,436,"      recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,439,"      temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,440,"      yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,441,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,442,"      temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,443,"      yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,444,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,446,"      double result = ya + yb;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,447,"      result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,448,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,456,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,457,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,458,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,466,"      if (x > 20) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,467,"          if (x >= LOG_MAX_VALUE) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,469,"              final double t = exp(0.5 * x);
",4,1,0,1,2,1,2,0,0,8,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,470,"              return (0.5 * t) * t;
",4,2,0,1,2,1,0,0,0,6,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,472,"              return 0.5 * exp(x);
",0,1,0,1,2,1,4,0,0,5,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,474,"      } else if (x < -20) {
",2,1,0,1,4,0,0,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,475,"          if (x <= -LOG_MAX_VALUE) {
",4,1,0,1,3,0,0,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,477,"              final double t = exp(-0.5 * x);
",4,1,0,1,2,1,2,0,0,9,31,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,478,"              return (-0.5 * t) * t;
",4,2,0,1,2,1,0,0,0,7,22,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,480,"              return -0.5 * exp(-x);
",2,1,0,1,2,1,2,0,0,7,22,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,484,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,485,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,488,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,489,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,490,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,495,"      if (x > 0.25) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,496,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,497,"          exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,499,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,500,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,502,"          double temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,503,"          double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,504,"          double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,507,"          double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,508,"          temp = recip * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,509,"          double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,510,"          double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,513,"          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,515,"          recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,517,"          recipa = -recipa;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,518,"          recipb = -recipb;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,521,"          temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,522,"          yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,523,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,524,"          temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,525,"          yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,526,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,528,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,529,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,530,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,532,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,533,"          expm1(x, hiPrec);
",0,0,0,1,2,0,6,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,535,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,536,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,539,"          double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,540,"          double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,541,"          double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,542,"          double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,543,"          double temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,544,"          double ra = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,545,"          double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,547,"          temp = denom * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,548,"          double za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,549,"          double zb = denom - za;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,551,"          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,554,"          rb += yb*denomr;                        // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,555,"          rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,558,"          temp = ya + ra;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,559,"          yb += -(temp - ya - ra);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,560,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,561,"          temp = ya + rb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,562,"          yb += -(temp - ya - rb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,563,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,565,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,566,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,569,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,570,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,573,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,581,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,583,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,584,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,593,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,594,"          return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,597,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,598,"          return -1.0;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,601,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,602,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,605,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,606,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,607,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,611,"      if (x >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,612,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,614,"          exp(x*2.0, 0.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,616,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,617,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,620,"          double na = -1.0 + ya;
",4,1,0,0,0,0,0,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,621,"          double nb = -(na + 1.0 - ya);
",6,2,0,1,2,0,0,0,0,9,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,622,"          double temp = na + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,623,"          nb += -(temp - na - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,624,"          na = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,627,"          double da = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,628,"          double db = -(da - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,629,"          temp = da + yb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,630,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,631,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,633,"          temp = da * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,634,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,635,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,638,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,639,"          temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,640,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,641,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,644,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,647,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,649,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,651,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,652,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,654,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,656,"          expm1(x*2.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,658,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,659,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,662,"          double na = ya;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,663,"          double nb = yb;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,666,"          double da = 2.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,667,"          double db = -(da - 2.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,668,"          double temp = da + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,669,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,670,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,672,"          temp = da * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,673,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,674,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,677,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,678,"          temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,679,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,680,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,683,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,686,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,688,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,690,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,693,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,694,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,697,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,705,"        return FastMath.log(a + FastMath.sqrt(a * a - 1));
",6,3,0,2,4,1,8,0,0,17,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,713,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,714,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,715,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,716,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,720,"        if (a > 0.167) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,721,"            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);
",8,3,0,2,4,0,8,0,0,20,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,723,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,724,"            if (a > 0.097) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,725,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",52,17,0,8,16,0,0,0,0,70,212,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,726,"            } else if (a > 0.036) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,727,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",40,13,0,6,12,0,0,0,0,54,160,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,728,"            } else if (a > 0.0036) {
",2,1,0,1,4,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,729,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",28,9,0,4,8,0,0,0,0,38,109,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,731,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);
",16,5,0,2,4,0,0,0,0,22,63,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,735,"        return negative ? -absAsinh : absAsinh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,743,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,744,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,745,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,746,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,750,"        if (a > 0.15) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,751,"            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));
",6,4,0,3,6,0,4,0,0,15,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,753,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,754,"            if (a > 0.087) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,755,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));
",36,17,0,8,16,0,0,0,0,54,141,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,756,"            } else if (a > 0.031) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,757,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));
",28,13,0,6,12,0,0,0,0,42,109,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,758,"            } else if (a > 0.003) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,759,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));
",20,9,0,4,8,0,0,0,0,30,77,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,761,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));
",12,5,0,2,4,0,0,0,0,18,47,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,765,"        return negative ? -absAtanh : absAtanh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,774,"        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a
",6,2,0,3,6,2,0,0,0,9,87,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,783,"        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a
",6,2,0,3,6,2,0,0,0,9,91,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,791,"        return nextAfter(a, Double.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,799,"        return nextAfter(a, Float.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,807,"        return Math.random();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,831,"        return exp(x, 0.0, null);
",0,0,0,1,2,1,4,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,850,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,851,"            intVal = (int) -x;
",4,0,0,1,2,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,853,"            if (intVal > 746) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,854,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,855,"                    hiPrec[0] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,856,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,858,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,861,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,863,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,864,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,865,"                    hiPrec[0] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,866,"                    hiPrec[1] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,868,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,871,"            if (intVal == 709) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,873,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,874,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,875,"                    hiPrec[0] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,876,"                    hiPrec[1] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,878,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,881,"            intVal++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,883,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,884,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,886,"            intVal = -intVal;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,888,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,890,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,891,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,892,"                    hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,893,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,895,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,898,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,899,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,906,"        final int intFrac = (int) ((x - intVal) * 1024.0);
",6,2,0,3,6,1,0,0,0,9,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,907,"        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,908,"        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,914,"        final double epsilon = x - (intVal + intFrac / 1024.0);
",8,3,0,1,2,1,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,923,"        double z = 0.04168701738764507;
",2,0,0,0,0,0,0,0,0,2,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,924,"        z = z * epsilon + 0.1666666505023083;
",6,2,0,0,0,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,925,"        z = z * epsilon + 0.5000000000042687;
",6,2,0,0,0,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,926,"        z = z * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,927,"        z = z * epsilon + -3.940510424527919E-20;
",6,2,0,0,0,0,0,0,0,10,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,934,"        double tempA = intPartA * fracPartA;
",6,1,0,0,0,0,0,0,0,7,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,935,"        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;
",14,5,0,0,0,0,0,0,0,19,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,941,"        final double tempC = tempB + tempA;
",6,1,0,0,0,1,0,0,0,8,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,943,"        if (extra != 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,944,"            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;
",20,7,0,0,0,0,0,0,0,28,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,946,"            result = tempC*z + tempB + tempA;
",10,3,0,0,0,0,0,0,0,14,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,949,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,951,"            hiPrec[0] = tempA;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,952,"            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;
",16,6,1,1,2,0,0,0,0,25,58,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,955,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,963,"      return expm1(x, null);
",0,0,0,1,2,1,4,0,0,5,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,972,"        if (x != x || x == 0.0) { // NaN or zero
",6,3,0,1,3,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,973,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,976,"        if (x <= -1.0 || x >= 1.0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,979,"            double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,980,"            exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,981,"            if (x > 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,982,"                return -1.0 + hiPrec[0] + hiPrec[1];
",0,1,1,2,4,1,0,0,0,6,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,984,"                final double ra = -1.0 + hiPrec[0];
",2,1,1,1,2,1,0,0,0,7,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,985,"                double rb = -(ra + 1.0 - hiPrec[0]);
",4,2,1,2,4,0,0,0,0,9,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,986,"                rb += hiPrec[1];
",2,0,1,1,2,0,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,987,"                return ra + rb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,994,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,996,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,997,"            x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,998,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1002,"            int intFrac = (int) (x * 1024.0);
",4,1,0,2,4,0,0,0,0,5,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1003,"            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;
",6,1,1,1,2,0,0,0,0,9,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1004,"            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,0,0,0,0,8,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1006,"            double temp = tempA + tempB;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1007,"            tempB = -(temp - tempA - tempB);
",8,1,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1008,"            tempA = temp;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1010,"            temp = tempA * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1011,"            baseA = tempA + temp - temp;
",8,2,0,0,0,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1012,"            baseB = tempB + (tempA - baseA);
",8,2,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1014,"            epsilon = x - intFrac/1024.0;
",6,2,0,0,0,0,0,0,0,9,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1019,"        double zb = 0.008336750013465571;
",2,0,0,0,0,0,0,0,0,2,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1020,"        zb = zb * epsilon + 0.041666663879186654;
",6,2,0,0,0,0,0,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1021,"        zb = zb * epsilon + 0.16666666666745392;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1022,"        zb = zb * epsilon + 0.49999999999999994;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1023,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1024,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1026,"        double za = epsilon;
",4,0,0,0,0,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1027,"        double temp = za + zb;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1028,"        zb = -(temp - za - zb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1029,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1031,"        temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1032,"        temp = za + temp - temp;
",8,2,0,0,0,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1033,"        zb += za - temp;
",6,1,0,0,0,0,0,0,0,8,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1034,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1037,"        double ya = za * baseA;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1039,"        temp = ya + za * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1040,"        double yb = -(temp - ya - za * baseB);
",10,2,0,1,2,0,0,0,0,13,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1041,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1043,"        temp = ya + zb * baseA;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1044,"        yb += -(temp - ya - zb * baseA);
",10,2,0,1,2,0,0,0,0,14,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1045,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1047,"        temp = ya + zb * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1048,"        yb += -(temp - ya - zb*baseB);
",10,2,0,1,2,0,0,0,0,14,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1049,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1053,"        temp = ya + baseA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1054,"        yb += -(temp - baseA - ya);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1055,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1057,"        temp = ya + za;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1059,"        yb += -(temp - ya - za);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1060,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1062,"        temp = ya + baseB;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1064,"        yb += -(temp - ya - baseB);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1065,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1067,"        temp = ya + zb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1069,"        yb += -(temp - ya - zb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1070,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1072,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1074,"            double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1075,"            double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1076,"            double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1077,"            double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1078,"            temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1079,"            final double ra = ratio + temp - temp;
",8,2,0,0,0,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1080,"            double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1082,"            temp = denom * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1083,"            za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1084,"            zb = denom - za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1086,"            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1097,"            rb += yb * denomr;                      // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1098,"            rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1101,"            ya = -ra;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1102,"            yb = -rb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1105,"        if (hiPrecOut != null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1106,"            hiPrecOut[0] = ya;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1107,"            hiPrecOut[1] = yb;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1110,"        return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1131,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1137,"            if (x != 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1138,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1139,"                    hiPrec[0] = Double.NaN;
",4,0,1,1,2,0,0,0,0,7,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1142,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1148,"            if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1149,"                hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1152,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1160,"            if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1162,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1163,"                    hiPrec[0] = Double.NEGATIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1166,"                return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1170,"            bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1171,"            while ( (bits & 0x0010000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1172,"                --exp;
",2,0,0,0,0,0,0,0,0,3,6,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1173,"                bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1246,"            double tmp = epsilon * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1247,"            double aa = epsilon + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1248,"            double ab = epsilon - aa;
",6,1,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1249,"            double xa = aa;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1250,"            double xb = ab;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1253,"            final double numer = bits & 0x3ffffffffffL;
",4,1,0,0,0,1,0,0,0,6,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1254,"            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);
",6,2,0,1,2,1,0,0,0,9,65,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1255,"            aa = numer - xa*denom - xb * denom;
",12,4,0,0,0,0,0,0,0,17,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1256,"            xb += aa / denom;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1259,"            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
",6,1,1,2,4,1,0,0,0,10,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1260,"            double ya = lnCoef_last[0];
",2,0,1,1,2,0,0,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1261,"            double yb = lnCoef_last[1];
",2,0,1,1,2,0,0,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1263,"            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1265,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1266,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1268,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1269,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1270,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1273,"                final double[] lnCoef_i = LN_HI_PREC_COEF[i];
",2,0,1,2,4,1,0,0,0,7,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1274,"                aa = ya + lnCoef_i[0];
",4,1,1,1,2,0,0,0,0,8,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1275,"                ab = yb + lnCoef_i[1];
",4,1,1,1,2,0,0,0,0,8,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1277,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1278,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1279,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1283,"            aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1284,"            ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1292,"            lnza = aa + ab;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1293,"            lnzb = -(lnza - aa - ab);
",8,1,0,1,2,0,0,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1294,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1348,"            hiPrec[0] = a;
",2,0,1,1,2,0,0,0,0,5,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1349,"            hiPrec[1] = b;
",2,0,1,1,2,0,0,0,0,5,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1362,"        if (x == -1) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1363,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1366,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1367,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1370,"        if (x > 1e-6 ||
",2,2,0,0,1,0,0,0,0,4,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1372,"            final double xpa = 1 + x;
",4,1,0,0,0,1,0,0,0,6,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1373,"            final double xpb = -(xpa - 1 - x);
",6,1,0,1,2,1,0,0,0,9,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1375,"            final double[] hiPrec = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1376,"            final double lores = log(xpa, hiPrec);
",2,0,0,1,2,1,6,0,0,9,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1377,"            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1378,"                return lores;
",2,0,0,0,0,1,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1383,"            final double fx1 = xpb / xpa;
",6,1,0,0,0,1,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1384,"            final double epsilon = 0.5 * fx1 + 1;
",4,2,0,0,0,1,0,0,0,7,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1385,"            return epsilon * fx1 + hiPrec[1] + hiPrec[0];
",4,3,1,2,4,1,0,0,0,11,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1388,"            final double y = (x * F_1_3 - F_1_2) * x + 1;
",10,4,0,1,2,1,0,0,0,15,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1389,"            return y * x;
",4,1,0,0,0,1,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1398,"        final double hiPrec[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1400,"        final double lores = log(x, hiPrec);
",2,0,0,1,2,1,6,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1401,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1402,"            return lores;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1405,"        final double tmp = hiPrec[0] * HEX_40000000;
",4,1,1,1,2,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1406,"        final double lna = hiPrec[0] + tmp - tmp;
",6,2,1,1,2,1,0,0,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1407,"        final double lnb = hiPrec[0] - lna + hiPrec[1];
",4,2,1,2,4,1,0,0,0,11,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1409,"        final double rln10a = 0.4342944622039795;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1410,"        final double rln10b = 1.9699272335463627E-8;
",2,0,0,0,0,1,0,0,0,3,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1412,"        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;
",16,7,0,0,0,1,0,0,0,23,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1432,"        return log(x) / log(base);
",0,1,0,2,4,1,8,0,0,9,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1443,"        final double lns[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1445,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1446,"            return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1449,"        if (x != x) { // X is NaN
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1450,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1454,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1455,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1456,"            if ((bits & 0x8000000000000000L) != 0) {
",2,2,0,2,5,0,0,0,0,4,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1458,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1460,"                if (y < 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1461,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1464,"                if (y > 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1465,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1469,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1470,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1472,"            if (y > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1473,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1476,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1479,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1480,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1481,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1483,"            if (y < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1484,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1486,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1490,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1491,"            if (x * x == 1.0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1492,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1495,"            if (x * x > 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1496,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1498,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1502,"        if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1503,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1504,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1507,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1508,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1509,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1510,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1513,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1516,"            if (y > 0)  {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1517,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1518,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1519,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1522,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1526,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1528,"            if (x * x == 1.0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1529,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1532,"            if (x * x < 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1533,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1535,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1540,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1542,"            if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {
",8,3,0,1,3,0,0,0,0,12,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1543,"                return pow(-x, y);
",2,0,0,1,2,1,4,0,0,7,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1546,"            if (y == (long) y) {
",4,1,0,2,5,0,0,0,0,5,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1548,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
",6,2,0,4,8,1,8,0,0,19,53,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1550,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1557,"        if (y < 8e298 && y > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1558,"            double tmp1 = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1559,"            ya = y + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,11,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1560,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1561,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1562,"            double tmp1 = y * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,45,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1563,"            double tmp2 = tmp1 * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1564,"            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
",12,3,0,1,2,0,0,0,0,16,56,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1565,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1569,"        final double lores = log(x, lns);
",2,0,0,1,2,1,6,0,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1570,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1571,"            return lores;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1574,"        double lna = lns[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1575,"        double lnb = lns[1];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1578,"        double tmp1 = lna * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1579,"        double tmp2 = lna + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1580,"        lnb += lna - tmp2;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1581,"        lna = tmp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1584,"        final double aa = lna * ya;
",6,1,0,0,0,1,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1585,"        final double ab = lna * yb + lnb * ya + lnb * yb;
",14,5,0,0,0,1,0,0,0,20,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1587,"        lna = aa+ab;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1588,"        lnb = -(lna - aa - ab);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1590,"        double z = 1.0 / 120.0;
",2,1,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1591,"        z = z * lnb + (1.0 / 24.0);
",6,3,0,1,2,0,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1592,"        z = z * lnb + (1.0 / 6.0);
",6,3,0,1,2,0,0,0,0,10,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1593,"        z = z * lnb + 0.5;
",6,2,0,0,0,0,0,0,0,9,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1594,"        z = z * lnb + 1.0;
",6,2,0,0,0,0,0,0,0,9,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1595,"        z = z * lnb;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1597,"        final double result = exp(lna, z, null);
",2,0,0,1,2,1,6,0,0,10,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1599,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1614,"            return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1616,"            e = -e;
",4,0,0,0,0,0,0,0,0,6,7,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1617,"            d = 1.0 / d;
",4,1,0,0,0,0,0,0,0,6,12,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1861,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1862,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1865,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1866,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1867,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1868,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1871,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1872,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1873,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1874,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1877,"        double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1878,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1879,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1880,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1905,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1906,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1909,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1910,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1911,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1912,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1913,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1915,"        t = costA*sinEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1916,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1917,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1918,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1919,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1921,"        b = b + sintA*cosEpsB + costA*sinEpsB;
",12,4,0,0,0,0,0,0,0,17,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1922,"        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;
",18,6,0,0,0,0,0,0,0,25,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1924,"        double sina = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1925,"        double sinb = -(sina - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1929,"        a = b = c = d = 0.0;
",8,0,0,0,0,0,0,0,0,12,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1931,"        t = costA*cosEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1932,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1933,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1934,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1935,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1937,"        t = -sintA*sinEpsA;
",6,1,0,0,0,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1938,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1939,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1940,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1941,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1943,"        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;
",16,6,0,0,0,0,0,0,0,23,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1944,"        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);
",16,6,0,1,2,0,0,0,0,23,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1946,"        double cosa = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1947,"        double cosb = -(cosa - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1949,"        if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1951,"            tmp = cosa; cosa = sina; sina = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1952,"            tmp = cosb; cosb = sinb; sinb = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1966,"        double est = sina/cosa;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1969,"        temp = est * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1970,"        double esta = (est + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1971,"        double estb =  est - esta;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1973,"        temp = cosa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1974,"        double cosaa = (cosa + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1975,"        double cosab =  cosa - cosaa;
",6,1,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1978,"        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding
",22,9,0,1,2,0,0,0,0,31,114,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1979,"        err += sinb/cosa;                     // Change in est due to sinb
",6,1,0,0,0,0,0,0,0,8,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1980,"        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb
",10,3,0,0,0,0,0,0,0,15,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1982,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1985,"            double xbadj = xb + est*est*xb;
",10,2,0,0,0,0,0,0,0,12,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1986,"            if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1987,"                xbadj = -xbadj;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1990,"            err += xbadj;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,1993,"        return est+err;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2010,"        long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2011,"        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2014,"        inbits &= 0x000fffffffffffffL;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2015,"        inbits |= 0x0010000000000000L;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2018,"        exponent++;
",2,0,0,0,0,0,0,0,0,3,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2019,"        inbits <<= 11;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2025,"        int idx = exponent >> 6;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2026,"        int shift = exponent - (idx << 6);
",6,2,0,1,2,0,0,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2028,"        if (shift != 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2029,"            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);
",8,3,1,3,6,0,0,0,0,14,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2030,"            shpi0 |= RECIP_2PI[idx] >>> (64-shift);
",4,2,1,2,4,0,0,0,0,11,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2031,"            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));
",8,5,1,5,10,0,0,0,0,20,70,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2032,"            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));
",10,6,1,5,10,0,0,0,0,21,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2034,"            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];
",6,2,1,2,4,0,0,0,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2035,"            shpiA = RECIP_2PI[idx];
",2,0,1,1,2,0,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2036,"            shpiB = RECIP_2PI[idx+1];
",4,1,1,1,2,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2040,"        long a = inbits >>> 32;
",4,1,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2041,"        long b = inbits & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2043,"        long c = shpiA >>> 32;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2044,"        long d = shpiA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2046,"        long ac = a * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2047,"        long bd = b * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2048,"        long bc = b * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2049,"        long ad = a * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2051,"        long prodB = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2052,"        long prodA = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2054,"        boolean bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2055,"        boolean bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2056,"        boolean bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2059,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2061,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2064,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2065,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2067,"        prodB = prodB + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2068,"        prodA = prodA + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2070,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2073,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2075,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2079,"        c = shpiB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2080,"        d = shpiB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2081,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2082,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2083,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2086,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2088,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2089,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2090,"        prodB += ac;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2091,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2093,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2095,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2099,"        c = shpi0 >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2100,"        d = shpi0 & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2102,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2103,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2104,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2106,"        prodA += bd + ((bc + ad) << 32);
",8,3,0,2,4,0,0,0,0,12,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2118,"        int intPart = (int)(prodA >>> 62);
",4,1,0,2,4,0,0,0,0,5,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2121,"        prodA <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2122,"        prodA |= prodB >>> 62;
",4,1,0,0,0,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2123,"        prodB <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2126,"        a = prodA >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2127,"        b = prodA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2129,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2130,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2132,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2133,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2134,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2135,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2137,"        long prod2B = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2138,"        long prod2A = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2140,"        bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2141,"        bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2142,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2145,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2147,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2150,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2151,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2153,"        prod2B = prod2B + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2154,"        prod2A = prod2A + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2156,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2159,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2161,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2165,"        c = PI_O_4_BITS[1] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2166,"        d = PI_O_4_BITS[1] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2167,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2168,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2169,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2172,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2174,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2175,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2176,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2177,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2179,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2181,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2185,"        a = prodB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2186,"        b = prodB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2187,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2188,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2189,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2190,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2191,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2194,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2196,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2197,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2198,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2199,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2201,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2203,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2207,"        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits
",6,2,0,1,2,0,0,0,0,8,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2208,"        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits
",10,5,0,4,8,0,0,0,0,15,102,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2210,"        double sumA = tmpA + tmpB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2211,"        double sumB = -(sumA - tmpA - tmpB);
",8,1,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2214,"        result[0] = intPart;
",2,0,1,1,2,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2215,"        result[1] = sumA * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2216,"        result[2] = sumB * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2217,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2240,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2241,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2242,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2244,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2248,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2256,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2257,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2258,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2259,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2260,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2261,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2282,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2298,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2302,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2311,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2312,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2313,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2314,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2315,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2316,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2336,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2347,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2348,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2351,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2352,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2353,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2354,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2358,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2359,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2360,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2361,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2363,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2366,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2367,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2371,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2372,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2376,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2377,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2378,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2379,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2380,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2381,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2382,"            final CodyWaite cw = new CodyWaite(xa);
",4,0,0,1,2,1,0,4,0,9,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2383,"            quadrant = cw.getK() & 3;
",2,1,0,1,2,0,4,0,0,8,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2384,"            xa = cw.getRemA();
",2,0,0,1,2,0,4,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2385,"            xb = cw.getRemB();
",2,0,0,1,2,0,4,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2388,"        if (xa > 1.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2390,"            final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2391,"            final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2393,"            final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2394,"            double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2395,"            b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2397,"            xa = a + b;
",6,1,0,0,0,0,0,0,0,8,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2398,"            xb = -(xa - a - b);
",8,1,0,1,2,0,0,0,0,11,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2399,"            quadrant ^= 1;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2400,"            negative ^= true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2404,"        if ((quadrant & 1) == 0) {
",2,2,0,2,5,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2405,"            result = tanQ(xa, xb, false);
",2,0,0,1,2,0,6,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2407,"            result = -tanQ(xa, xb, true);
",2,0,0,1,2,0,6,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2410,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2411,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2414,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2437,"            return leftPlane ? copySign(Math.PI, xa) : xa;
",8,0,0,1,2,1,4,0,0,12,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2448,"            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);
",16,3,0,3,6,1,0,0,0,20,69,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2554,"            final double pia = 1.5707963267948966 * 2;
",2,1,0,0,0,1,0,0,0,4,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2555,"            final double pib = 6.123233995736766E-17 * 2;
",2,1,0,0,0,1,0,0,0,4,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2557,"            za = pia - result;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2558,"            zb = -(za - pia + result);
",8,2,0,1,2,0,0,0,0,12,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2559,"            zb += pib - resultb;
",6,1,0,0,0,0,0,0,0,8,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2561,"            result = za + zb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2562,"            resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2580,"        if (x != x || y != y) {
",8,3,0,1,3,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2581,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2584,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2585,"            final double result = x * y;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2586,"            final double invx = 1d / x;
",4,1,0,0,0,1,0,0,0,6,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2587,"            final double invy = 1d / y;
",4,1,0,0,0,1,0,0,0,6,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2589,"            if (invx == 0) { // X is infinite
",2,1,0,1,3,0,0,0,0,3,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2590,"                if (x > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2591,"                    return y; // return +/- 0.0
",2,0,0,0,0,2,0,0,0,2,27,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2593,"                    return copySign(Math.PI, y);
",4,0,0,1,2,1,4,0,0,8,28,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2597,"            if (x < 0 || invx < 0) {
",4,3,0,1,3,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2598,"                if (y < 0 || invy < 0) {
",4,3,0,1,3,0,0,0,0,7,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2599,"                    return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2601,"                    return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2604,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2610,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2611,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2612,"                return Math.PI * F_1_4;
",6,1,0,0,0,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2615,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2616,"                return Math.PI * F_3_4;
",6,1,0,0,0,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2619,"            return Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2622,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2623,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2624,"                return -Math.PI * F_1_4;
",6,1,0,0,0,1,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2627,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2628,"                return -Math.PI * F_3_4;
",6,1,0,0,0,1,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2631,"            return -Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2634,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2635,"            if (y > 0 || 1 / y > 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2636,"                return 0d;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2639,"            if (y < 0 || 1 / y < 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2640,"                return -0d;
",0,0,0,0,0,1,0,0,0,1,11,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2644,"        if (x == Double.NEGATIVE_INFINITY)
",6,1,0,1,2,0,0,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2646,"            if (y > 0.0 || 1 / y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2647,"                return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2650,"            if (y < 0 || 1 / y < 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2651,"                return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2657,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2658,"            if (y > 0 || 1 / y > 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2659,"                return Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2662,"            if (y < 0 || 1 / y < 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2663,"                return -Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2668,"        final double r = y / x;
",6,1,0,0,0,1,0,0,0,8,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2669,"        if (Double.isInfinite(r)) { // bypass calculations that can create NaN
",0,0,0,2,5,0,6,0,0,6,70,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2670,"            return atan(r, 0, x < 0);
",2,1,0,1,2,1,4,0,0,7,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2673,"        double ra = doubleHighPart(r);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2674,"        double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2677,"        final double xa = doubleHighPart(x);
",2,0,0,1,2,1,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2678,"        final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2680,"        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
",22,9,0,1,2,0,0,0,0,32,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2682,"        final double temp = ra + rb;
",6,1,0,0,0,1,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2683,"        rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2684,"        ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2686,"        if (ra == 0) { // Fix up the sign so atan works correctly
",2,1,0,1,3,0,0,0,0,3,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2687,"            ra = copySign(0d, y);
",2,0,0,1,2,0,4,0,0,7,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2691,"        final double result = atan(ra, rb, x < 0);
",4,1,0,1,2,1,6,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2693,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2701,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2702,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2705,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2706,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2709,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2710,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2713,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2714,"          return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2717,"      if (x == 0.0) { // Matches +/- 0.0; return correct sign
",2,1,0,1,3,1,0,0,0,3,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2718,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2724,"      double temp = x * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2725,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2726,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2729,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2730,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2733,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2734,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2736,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2737,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2739,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2740,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2741,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2745,"      y = sqrt(za);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2746,"      temp = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2747,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2748,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2751,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2754,"      double dx = zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2757,"      double r = x/y;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2758,"      temp = r * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2759,"      double ra = r + temp - temp;
",8,2,0,0,0,0,0,0,0,10,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2760,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2762,"      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2763,"      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
",10,3,0,0,0,0,0,0,0,15,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2765,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2766,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2767,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2769,"      return atan(ra, rb, false);
",0,0,0,1,2,1,6,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2777,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2778,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2781,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2782,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2785,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2786,"          return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2789,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2790,"          return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2793,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2794,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2800,"      double temp = x * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2801,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2802,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2805,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2806,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2809,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2810,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2812,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2813,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2815,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2816,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2817,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2820,"      double y = sqrt(za);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2821,"      temp = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2822,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2823,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2826,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2829,"      yb += zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2830,"      y = ya+yb;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2831,"      yb = -(y - ya - yb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2834,"      double r = y/x;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2837,"      if (Double.isInfinite(r)) { // x is effectively zero
",0,0,0,2,5,0,6,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2838,"          return Math.PI/2; // so return the appropriate value
",4,1,0,0,0,2,0,0,0,5,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2841,"      double ra = doubleHighPart(r);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2842,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2844,"      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2845,"      rb += yb / x;  // Add in effect additional bits of sqrt.
",6,1,0,0,0,0,0,0,0,8,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2847,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2848,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2849,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2851,"      return atan(ra, rb, x<0);
",2,1,0,1,2,1,6,0,0,9,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2860,"      long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2861,"      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2862,"      boolean subnormal = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2864,"      if (exponent == -1023) {
",2,1,0,1,3,0,0,0,0,4,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2865,"          if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2866,"              return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2870,"          subnormal = true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2871,"          x *= 1.8014398509481984E16;  // 2^54
",2,0,0,0,0,0,0,0,0,3,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2872,"          inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2873,"          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,8,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2876,"      if (exponent == 1024) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2878,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2882,"      int exp3 = exponent / 3;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2885,"      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |
",4,2,0,1,3,0,4,0,0,10,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2889,"      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);
",4,2,0,2,4,1,4,0,0,11,98,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2892,"      double est = -0.010714690733195933;
",2,0,0,0,0,0,0,0,0,3,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2893,"      est = est * mant + 0.0875862700108075;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2894,"      est = est * mant + -0.3058015757857271;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2895,"      est = est * mant + 0.7249995199969751;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2896,"      est = est * mant + 0.5039018405998233;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2898,"      est *= CBRTTWO[exponent % 3 + 2];
",4,2,1,1,2,0,0,0,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2903,"      final double xs = x / (p2*p2*p2);
",10,2,0,1,2,1,0,0,0,13,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2904,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2905,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2908,"      double temp = est * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2909,"      double ya = est + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2910,"      double yb = est - ya;
",6,1,0,0,0,0,0,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2912,"      double za = ya * ya;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2913,"      double zb = ya * yb * 2.0 + yb * yb;
",10,3,0,0,0,0,0,0,0,13,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2914,"      temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2915,"      double temp2 = za + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2916,"      zb += za - temp2;
",6,1,0,0,0,0,0,0,0,8,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2917,"      za = temp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2919,"      zb = za * yb + ya * zb + zb * yb;
",14,5,0,0,0,0,0,0,0,20,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2920,"      za = za * ya;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2922,"      double na = xs - za;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2923,"      double nb = -(na - xs + za);
",8,2,0,1,2,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2924,"      nb -= zb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2926,"      est += (na+nb)/(3*est*est);
",10,3,0,2,4,0,0,0,0,14,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2929,"      est *= p2;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2931,"      if (subnormal) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2932,"          est *= 3.814697265625E-6;  // 2^-18
",2,0,0,0,0,0,0,0,0,3,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2935,"      return est;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2945,"        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign
",2,2,0,2,5,1,6,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2946,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2950,"        final double facta = 0.01745329052209854;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2951,"        final double factb = 1.997844754509471E-9;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2953,"        double xa = doubleHighPart(x);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2954,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2956,"        double result = xb * factb + xb * facta + xa * factb + xa * facta;
",18,7,0,0,0,0,0,0,0,25,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2957,"        if (result == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2958,"            result = result * x; // ensure correct sign if calculation underflows
",6,1,0,0,0,0,0,0,0,8,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2960,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2970,"        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign
",2,2,0,2,5,1,6,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2971,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2975,"        final double facta = 57.2957763671875;
",2,0,0,0,0,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2976,"        final double factb = 3.145894820876798E-6;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2978,"        double xa = doubleHighPart(x);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2979,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2981,"        return xb * factb + xb * facta + xa * factb + xa * facta;
",16,7,0,0,0,1,0,0,0,23,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,2990,"        return (x < 0) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3008,"        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3027,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3038,"        if (Float.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3039,"            return Float.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3041,"        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3053,"        if ((n > -1023) && (n < 1024)) {
",4,3,0,3,7,0,0,0,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3054,"            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
",4,3,0,4,8,1,4,0,0,11,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3058,"        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
",2,2,0,4,9,0,12,0,0,16,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3059,"            return d;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3061,"        if (n < -2098) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3062,"            return (d > 0) ? 0.0 : -0.0;
",2,1,0,1,2,1,0,0,0,4,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3064,"        if (n > 2097) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3065,"            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,69,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3069,"        final long bits = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3070,"        final long sign = bits & 0x8000000000000000L;
",4,1,0,0,0,1,0,0,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3071,"        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;
",4,2,0,3,6,0,0,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3072,"        long mantissa   = bits & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,5,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3075,"        int scaledExponent = exponent + n;
",6,1,0,0,0,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3077,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3079,"            if (scaledExponent > 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3081,"                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3082,"            } else if (scaledExponent > -53) {
",2,1,0,1,4,0,0,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3086,"                mantissa = mantissa | (1L << 52);
",4,2,0,1,2,0,0,0,0,7,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3089,"                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
",6,2,0,2,4,1,0,0,0,10,73,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3090,"                mantissa = mantissa >>> (1 - scaledExponent);
",6,2,0,1,2,0,0,0,0,9,45,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3091,"                if (mostSignificantLostBit != 0) {
",2,1,0,1,3,0,0,0,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3093,"                    mantissa++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3095,"                return Double.longBitsToDouble(sign | mantissa);
",4,1,0,1,2,1,4,0,0,9,48,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3099,"                return (sign == 0L) ? 0.0 : -0.0;
",2,1,0,1,2,1,0,0,0,4,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3103,"            if (exponent == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3106,"                while ((mantissa >>> 52) != 1) {
",2,2,0,2,5,0,0,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3107,"                    mantissa = mantissa << 1;
",4,1,0,0,0,0,0,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3108,"                    --scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3110,"                ++scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3111,"                mantissa = mantissa & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,6,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3113,"                if (scaledExponent < 2047) {
",2,1,0,1,3,0,0,0,0,3,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3114,"                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3116,"                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,74,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3119,"            } else if (scaledExponent < 2047) {
",2,1,0,1,4,0,0,0,0,3,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3120,"                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3122,"                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,74,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3137,"        if ((n > -127) && (n < 128)) {
",4,3,0,3,7,0,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3138,"            return f * Float.intBitsToFloat((n + 127) << 23);
",4,3,0,2,4,1,4,0,0,11,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3142,"        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
",2,2,0,4,9,0,12,0,0,16,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3143,"            return f;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3145,"        if (n < -277) {
",2,1,0,1,3,0,0,0,0,4,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3146,"            return (f > 0) ? 0.0f : -0.0f;
",2,1,0,1,2,1,0,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3148,"        if (n > 276) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3149,"            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,67,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3153,"        final int bits = Float.floatToIntBits(f);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3154,"        final int sign = bits & 0x80000000;
",4,1,0,0,0,1,0,0,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3155,"        int  exponent  = (bits >>> 23) & 0xff;
",4,2,0,1,2,0,0,0,0,6,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3156,"        int mantissa   = bits & 0x007fffff;
",4,1,0,0,0,0,0,0,0,5,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3159,"        int scaledExponent = exponent + n;
",6,1,0,0,0,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3161,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3163,"            if (scaledExponent > 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3165,"                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3166,"            } else if (scaledExponent > -24) {
",2,1,0,1,4,0,0,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3170,"                mantissa = mantissa | (1 << 23);
",4,2,0,1,2,0,0,0,0,7,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3173,"                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
",6,2,0,2,4,1,0,0,0,10,71,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3174,"                mantissa = mantissa >>> (1 - scaledExponent);
",6,2,0,1,2,0,0,0,0,9,45,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3175,"                if (mostSignificantLostBit != 0) {
",2,1,0,1,3,0,0,0,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3177,"                    mantissa++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3179,"                return Float.intBitsToFloat(sign | mantissa);
",4,1,0,1,2,1,4,0,0,9,45,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3183,"                return (sign == 0) ? 0.0f : -0.0f;
",2,1,0,1,2,1,0,0,0,4,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3187,"            if (exponent == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3190,"                while ((mantissa >>> 23) != 1) {
",2,2,0,2,5,0,0,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3191,"                    mantissa = mantissa << 1;
",4,1,0,0,0,0,0,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3192,"                    --scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3194,"                ++scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3195,"                mantissa = mantissa & 0x007fffff;
",4,1,0,0,0,0,0,0,0,6,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3197,"                if (scaledExponent < 255) {
",2,1,0,1,3,0,0,0,0,3,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3198,"                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3200,"                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,71,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3203,"            } else if (scaledExponent < 255) {
",2,1,0,1,4,0,0,0,0,3,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3204,"                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3206,"                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,71,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3246,"        if (Double.isNaN(d) || Double.isNaN(direction)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3247,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3248,"        } else if (d == direction) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3249,"            return direction;
",2,0,0,0,0,1,0,0,0,2,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3250,"        } else if (Double.isInfinite(d)) {
",0,0,0,2,6,0,6,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3251,"            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
",10,1,0,1,2,1,0,0,0,12,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3252,"        } else if (d == 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3253,"            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3258,"        final long bits = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3259,"        final long sign = bits & 0x8000000000000000L;
",4,1,0,0,0,1,0,0,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3260,"        if ((direction < d) ^ (sign == 0L)) {
",6,3,0,3,7,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3261,"            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
",4,3,0,3,6,1,4,0,0,11,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3263,"            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
",4,3,0,3,6,1,4,0,0,11,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3302,"        if (Double.isNaN(f) || Double.isNaN(direction)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3303,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3304,"        } else if (f == direction) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3305,"            return (float) direction;
",2,0,0,1,2,1,0,0,0,2,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3306,"        } else if (Float.isInfinite(f)) {
",0,0,0,2,6,0,6,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3307,"            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
",10,1,0,1,2,1,0,0,0,12,53,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3308,"        } else if (f == 0f) {
",2,1,0,1,4,0,0,0,0,3,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3309,"            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,60,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3314,"        final int bits = Float.floatToIntBits(f);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3315,"        final int sign = bits & 0x80000000;
",4,1,0,0,0,1,0,0,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3316,"        if ((direction < f) ^ (sign == 0)) {
",6,3,0,3,7,0,0,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3317,"            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
",4,3,0,3,6,1,4,0,0,11,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3319,"            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
",4,3,0,3,6,1,4,0,0,11,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3331,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3332,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3335,"        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {
",8,3,0,1,3,0,0,0,0,12,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3336,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3339,"        y = (long) x;
",4,0,0,1,2,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3340,"        if (x < 0 && y != x) {
",6,3,0,1,3,0,0,0,0,9,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3341,"            y--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3344,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3345,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3348,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3358,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3359,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3362,"        y = floor(x);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3363,"        if (y == x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3364,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3367,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3369,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3370,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3373,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3381,"        double y = floor(x);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3382,"        double d = x - y;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3384,"        if (d > 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3385,"            if (y == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3386,"                return -0.0; // Preserve sign of operand
",0,0,0,0,0,1,0,0,0,1,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3388,"            return y+1.0;
",2,1,0,0,0,1,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3390,"        if (d < 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3391,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3395,"        long z = (long) y;
",4,0,0,1,2,0,0,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3396,"        return (z & 1) == 0 ? y : y + 1.0;
",6,3,0,1,2,1,0,0,0,9,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3404,"        return (long) floor(x + 0.5);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3412,"        return (int) floor(x + 0.5f);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3430,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3439,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3440,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3442,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3443,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3446,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3447,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3451,"        int bits = Float.floatToRawIntBits(a);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3452,"        if (bits == 0x80000000) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3453,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3455,"        return b;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3472,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3478,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3498,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3507,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3508,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3510,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3511,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3514,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3515,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3519,"        int bits = Float.floatToRawIntBits(a);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3520,"        if (bits == 0x80000000) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3521,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3523,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3546,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3566,"        if (Double.isInfinite(x) || Double.isInfinite(y)) {
",0,1,0,3,7,0,12,0,0,13,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3567,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3568,"        } else if (Double.isNaN(x) || Double.isNaN(y)) {
",0,1,0,3,8,0,12,0,0,13,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3569,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3572,"            final int expX = getExponent(x);
",2,0,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3573,"            final int expY = getExponent(y);
",2,0,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3574,"            if (expX > expY + 27) {
",4,2,0,1,3,0,0,0,0,6,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3576,"                return abs(x);
",0,0,0,1,2,1,4,0,0,4,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3577,"            } else if (expY > expX + 27) {
",4,2,0,1,4,0,0,0,0,6,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3579,"                return abs(y);
",0,0,0,1,2,1,4,0,0,4,14,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3583,"                final int middleExp = (expX + expY) / 2;
",6,2,0,1,2,1,0,0,0,9,40,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3586,"                final double scaledX = scalb(x, -middleExp);
",4,0,0,1,2,1,4,0,0,10,44,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3587,"                final double scaledY = scalb(y, -middleExp);
",4,0,0,1,2,1,4,0,0,10,44,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3590,"                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);
",10,3,0,1,2,1,2,0,0,16,67,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3593,"                return scalb(scaledH, middleExp);
",0,0,0,1,2,1,6,0,0,6,33,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3621,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation
",0,0,0,1,2,1,8,0,0,8,90,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3633,"        long m = Double.doubleToLongBits(magnitude);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3634,"        long s = Double.doubleToLongBits(sign);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3635,"        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
",8,7,0,3,7,0,0,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3636,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3638,"        return -magnitude; // flip sign
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3650,"        int m = Float.floatToIntBits(magnitude);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3651,"        int s = Float.floatToIntBits(sign);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3652,"        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
",8,7,0,3,7,0,0,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3653,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3655,"        return -magnitude; // flip sign
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3668,"        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;
",0,3,0,4,8,1,6,0,0,9,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3681,"        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;
",0,3,0,3,6,1,6,0,0,9,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3690,"        PrintStream out = System.out;
",6,0,0,0,0,0,0,2,0,8,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3691,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);
",4,0,0,1,2,0,8,0,0,13,96,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3692,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);
",4,0,0,1,2,0,8,0,0,13,96,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3693,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);
",4,0,0,1,2,0,8,0,0,13,100,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3694,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);
",4,0,0,1,2,0,8,0,0,13,100,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3695,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);
",4,0,0,1,2,0,8,0,0,13,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3696,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,75,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3697,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,75,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3698,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3699,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3700,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,81,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3701,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,81,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,6,3702,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,69,"            throw new NotStrictlyPositiveException(rowDimension);
",2,0,0,1,2,0,0,2,0,4,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,72,"            throw new NotStrictlyPositiveException(columnDimension);
",2,0,0,1,2,0,0,2,0,4,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,163,"        return m.multiply(this);
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,169,"        if (p < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,170,"            throw new NotPositiveException(LocalizedFormats.NOT_POSITIVE_EXPONENT, p);
",6,0,0,1,2,0,0,2,0,8,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,173,"        if (!isSquare()) {
",0,0,0,2,5,0,2,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,174,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());
",0,0,0,3,6,0,4,2,0,6,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,177,"        if (p == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,178,"            return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());
",0,0,0,2,4,1,6,0,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,181,"        if (p == 1) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,182,"            return this.copy();
",0,0,0,1,2,1,2,0,0,2,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,185,"        final int power = p - 1;
",4,1,0,0,0,1,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,194,"        final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();
",2,0,0,3,6,1,8,0,0,11,80,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,195,"        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();
",2,0,0,1,2,1,0,8,0,11,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,196,"        int maxI = -1;
",2,0,0,0,0,0,0,0,0,3,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,198,"        for (int i = 0; i < binaryRepresentation.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,199,"            if (binaryRepresentation[i] == '1') {
",0,1,1,2,5,0,0,0,0,6,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,200,"                final int pos = binaryRepresentation.length - i - 1;
",8,1,0,0,0,1,0,0,0,10,52,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,201,"                nonZeroPositions.add(pos);
",0,0,0,1,2,0,6,0,0,6,26,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,204,"                if (maxI == -1) {
",2,1,0,1,3,0,0,0,0,4,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,205,"                    maxI = pos;
",4,0,0,0,0,0,0,0,0,5,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,210,"        RealMatrix[] results = new RealMatrix[maxI + 1];
",4,1,0,2,4,0,0,4,0,9,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,211,"        results[0] = this.copy();
",0,0,1,2,4,0,2,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,213,"        for (int i = 1; i <= maxI; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,214,"            results[i] = results[i-1].multiply(results[i-1]);
",4,2,1,4,8,0,2,0,0,17,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,217,"        RealMatrix result = this.copy();
",2,0,0,1,2,0,2,2,0,6,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,219,"        for (Integer i : nonZeroPositions) {
",4,0,0,1,3,0,0,2,0,6,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,220,"            result = result.multiply(results[i]);
",2,0,1,2,4,0,4,0,0,11,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,221,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,223,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,228,"        final double[][] data = new double[getRowDimension()][getColumnDimension()];
",2,0,0,6,12,1,4,0,0,7,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,230,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,231,"            final double[] dataI = data[i];
",2,0,1,2,4,1,0,0,0,7,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,232,"            for (int j = 0; j < dataI.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,233,"                dataI[j] = getEntry(i, j);
",0,0,1,2,4,0,6,0,0,11,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,237,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,242,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,308,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,310,"        final RealMatrix subMatrix =
",2,0,0,0,0,1,0,2,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,312,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,313,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,314,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));
",8,2,0,2,4,0,10,0,0,20,66,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,318,"        return subMatrix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,325,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);
",0,0,0,1,2,0,8,0,0,8,69,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,327,"        final RealMatrix subMatrix =
",2,0,0,0,0,1,0,2,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,329,"        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {
",0,0,0,1,4,0,4,2,0,6,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,339,"        return subMatrix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,348,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,349,"        final int rowsCount    = endRow + 1 - startRow;
",6,2,0,0,0,1,0,0,0,9,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,350,"        final int columnsCount = endColumn + 1 - startColumn;
",6,2,0,0,0,1,0,0,0,9,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,351,"        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {
",10,3,1,4,9,0,0,0,0,15,81,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,352,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,
",6,0,1,1,3,0,0,2,0,10,85,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,356,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,380,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,387,"        MatrixUtils.checkSubMatrixIndex(this, selectedRows, selectedColumns);
",0,0,0,1,2,0,8,0,0,8,69,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,388,"        if ((destination.length < selectedRows.length) ||
",8,2,0,1,3,0,0,0,0,10,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,390,"            throw new MatrixDimensionMismatchException(destination.length, destination[0].length,
",6,0,1,1,3,0,0,2,0,10,85,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,394,"        for (int i = 0; i < selectedRows.length; i++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,395,"            final double[] destinationI = destination[i];
",2,0,1,2,4,1,0,0,0,7,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,396,"            for (int j = 0; j < selectedColumns.length; j++) {
",10,1,0,1,3,0,0,0,0,12,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,397,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);
",0,0,1,4,8,0,2,0,0,15,64,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,400,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,406,"        MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,407,"        final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,408,"        if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,409,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,412,"        final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,413,"        if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,414,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,417,"        for (int r = 1; r < nRows; ++r) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,418,"            if (subMatrix[r].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,419,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);
",4,0,1,2,4,0,0,2,0,10,65,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,423,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,424,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,425,"        MatrixUtils.checkRowIndex(this, nRows + row - 1);
",4,2,0,1,2,0,4,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,426,"        MatrixUtils.checkColumnIndex(this, nCols + column - 1);
",4,2,0,1,2,0,4,0,0,10,55,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,428,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,429,"            for (int j = 0; j < nCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,430,"                setEntry(row + i, column + j, subMatrix[i][j]);
",8,2,1,3,6,0,2,0,0,18,47,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,433,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,437,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,438,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,439,"        final RealMatrix out = createMatrix(1, nCols);
",2,0,0,1,2,1,4,2,0,9,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,440,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,441,"            out.setEntry(0, i, getEntry(row, i));
",0,0,0,2,4,0,12,0,0,12,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,444,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,450,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,451,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,452,"        if ((matrix.getRowDimension() != 1) ||
",0,2,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,454,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,458,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,459,"            setEntry(row, i, matrix.getEntry(0, i));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,461,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,479,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,480,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,481,"        if ((matrix.getRowDimension() != nRows) ||
",2,2,0,2,5,0,4,0,0,8,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,483,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,487,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,488,"            setEntry(i, column, matrix.getEntry(i, 0));
",0,0,0,2,4,0,12,0,0,12,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,490,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,495,"        return new ArrayRealVector(getRow(row), false);
",0,0,0,2,4,1,4,2,0,7,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,501,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,502,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,503,"        if (vector.getDimension() != nCols) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,504,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,507,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,508,"            setEntry(row, i, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,510,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,515,"        return new ArrayRealVector(getColumn(column), false);
",0,0,0,2,4,1,4,2,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,524,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,547,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,548,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,549,"        if (array.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,550,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,552,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,553,"            setEntry(row, i, array[i]);
",0,0,1,2,4,0,6,0,0,10,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,555,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,572,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,573,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,574,"        if (array.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,575,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,577,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,578,"            setEntry(i, column, array[i]);
",0,0,1,2,4,0,6,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,580,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,585,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,586,"        setEntry(row, column, getEntry(row, column) + increment);
",2,1,0,2,4,0,12,0,0,15,57,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,587,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,592,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,593,"        setEntry(row, column, getEntry(row, column) * factor);
",2,1,0,2,4,0,12,0,0,15,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,594,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,637,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,638,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,639,"        if (nRows != nCols) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,640,"            throw new NonSquareMatrixException(nRows, nCols);
",4,0,0,1,2,0,0,2,0,6,49,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,642,"        double trace = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,643,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,644,"            trace += getEntry(i, i);
",2,0,0,1,2,0,6,0,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,646,"        return trace;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,652,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,653,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,654,"        if (v.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,655,"            throw new DimensionMismatchException(v.length, nCols);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,658,"        final double[] out = new double[nRows];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,659,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,660,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,661,"            for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,662,"                sum += getEntry(row, i) * v[i];
",2,1,1,2,4,0,6,0,0,14,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,664,"            out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,667,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,676,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,677,"            final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,678,"            final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,679,"            if (v.getDimension() != nCols) {
",2,1,0,2,5,0,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,680,"                throw new DimensionMismatchException(v.getDimension(), nCols);
",2,0,0,2,4,0,4,2,0,8,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,683,"            final double[] out = new double[nRows];
",2,0,1,2,4,1,0,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,684,"            for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,685,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,686,"                for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,687,"                    sum += getEntry(row, i) * v.getEntry(i);
",2,1,0,2,4,0,12,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,689,"                out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,692,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,699,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,700,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,701,"        if (v.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,702,"            throw new DimensionMismatchException(v.length, nRows);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,705,"        final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,706,"        for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,707,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,708,"            for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,709,"                sum += getEntry(i, col) * v[i];
",2,1,1,2,4,0,6,0,0,14,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,711,"            out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,714,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,720,"            return new ArrayRealVector(preMultiply(((ArrayRealVector) v).getDataRef()), false);
",2,0,0,5,10,1,4,4,0,11,83,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,721,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,723,"            final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,724,"            final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,725,"            if (v.getDimension() != nRows) {
",2,1,0,2,5,0,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,726,"                throw new DimensionMismatchException(v.getDimension(), nRows);
",2,0,0,2,4,0,4,2,0,8,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,729,"            final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,730,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,731,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,732,"                for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,733,"                    sum += getEntry(i, col) * v.getEntry(i);
",2,1,0,2,4,0,12,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,735,"                out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,738,"            return new ArrayRealVector(out, false);
",2,0,0,1,2,1,0,2,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,744,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,745,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,746,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,747,"        for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,748,"            for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,749,"                final double oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,0,0,9,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,750,"                final double newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,751,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,754,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,759,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,760,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,761,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,762,"        for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,763,"            for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,764,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,767,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,775,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,776,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,778,"        for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,779,"            for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,780,"                final double oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,0,0,9,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,781,"                final double newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,782,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,785,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,793,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,794,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,796,"        for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,797,"            for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,798,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,801,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,806,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,807,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,808,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,809,"        for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,810,"            for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,811,"                final double oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,0,0,9,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,812,"                final double newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,813,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,816,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,821,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,822,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,823,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,824,"        for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,825,"            for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,826,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,829,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,837,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,838,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,840,"        for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,841,"            for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,842,"                final double oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,0,0,9,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,843,"                final double newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,844,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,847,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,855,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,856,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,858,"        for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,859,"            for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,860,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,863,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,868,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,882,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,891,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,900,"        final StringBuilder res = new StringBuilder();
",2,0,0,1,2,1,0,4,0,7,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,901,"        String fullClassName = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,902,"        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);
",2,1,0,2,4,0,8,2,0,14,84,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,903,"        res.append(shortClassName);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,904,"        res.append(DEFAULT_FORMAT.format(this));
",0,0,0,2,4,0,8,0,0,8,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,905,"        return res.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,918,"        if (object == this ) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,919,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,921,"        if (object instanceof RealMatrix == false) {
",2,1,0,1,3,0,0,2,0,6,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,922,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,924,"        RealMatrix m = (RealMatrix) object;
",4,0,0,1,2,0,0,4,0,8,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,925,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,926,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,927,"        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
",4,3,0,3,7,0,8,0,0,15,70,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,928,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,930,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,931,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,932,"                if (getEntry(row, col) != m.getEntry(row, col)) {
",0,1,0,3,7,0,14,0,0,15,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,933,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,937,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,947,"        int ret = 7;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,948,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,949,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,950,"        ret = ret * 31 + nRows;
",6,2,0,0,0,0,0,0,0,9,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,951,"        ret = ret * 31 + nCols;
",6,2,0,0,0,0,0,0,0,9,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,952,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,953,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,954,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) *
",8,8,0,3,6,0,0,0,0,17,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,958,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,6,95,"        throw new UnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,6,108,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1249,"        return new RealVector() {
",0,0,0,1,3,1,0,2,0,2,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1630,"            class UnmodifiableEntry extends Entry {
",2,0,0,0,1,0,0,2,0,4,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1258,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1264,"                return v.map(function);
",0,0,0,1,2,1,6,0,0,6,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1270,"                final Iterator<Entry> i = v.iterator();
",2,0,0,1,2,1,4,4,0,11,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1271,"                return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1301,"                final Iterator<Entry> i = v.sparseIterator();
",2,0,0,1,2,1,4,4,0,11,45,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1303,"                return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1334,"                return v.copy();
",0,0,0,1,2,1,4,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1341,"                return v.add(w);
",0,0,0,1,2,1,6,0,0,6,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1348,"                return v.subtract(w);
",0,0,0,1,2,1,6,0,0,6,21,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1354,"                return v.mapAdd(d);
",0,0,0,1,2,1,6,0,0,6,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1366,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1372,"                return v.mapSubtract(d);
",0,0,0,1,2,1,6,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1384,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1390,"                return v.mapMultiply(d);
",0,0,0,1,2,1,6,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1402,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1408,"                return v.mapDivide(d);
",0,0,0,1,2,1,6,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1420,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1427,"                return v.ebeMultiply(w);
",0,0,0,1,2,1,6,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1434,"                return v.ebeDivide(w);
",0,0,0,1,2,1,6,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1441,"                return v.dotProduct(w);
",0,0,0,1,2,1,6,0,0,6,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1448,"                return v.cosine(w);
",0,0,0,1,2,1,6,0,0,6,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1454,"                return v.getNorm();
",0,0,0,1,2,1,4,0,0,4,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1460,"                return v.getL1Norm();
",0,0,0,1,2,1,4,0,0,4,21,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1466,"                return v.getLInfNorm();
",0,0,0,1,2,1,4,0,0,4,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1473,"                return v.getDistance(w);
",0,0,0,1,2,1,6,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1480,"                return v.getL1Distance(w);
",0,0,0,1,2,1,6,0,0,6,26,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1487,"                return v.getLInfDistance(w);
",0,0,0,1,2,1,6,0,0,6,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1493,"                return v.unitVector();
",0,0,0,1,2,1,4,0,0,4,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1504,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1510,"                return v.outerProduct(w);
",0,0,0,1,2,1,6,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1516,"                return v.getEntry(index);
",0,0,0,1,2,1,6,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1528,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1540,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1546,"                return v.getDimension();
",0,0,0,1,2,1,4,0,0,4,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1552,"                return v.append(w);
",0,0,0,1,2,1,6,0,0,6,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1558,"                return v.append(d);
",0,0,0,1,2,1,6,0,0,6,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1565,"                return v.getSubVector(index, n);
",0,0,0,1,2,1,8,0,0,8,32,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1577,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1589,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1595,"                return v.toArray();
",0,0,0,1,2,1,4,0,0,4,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1601,"                return v.isNaN();
",0,0,0,1,2,1,4,0,0,4,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1607,"                return v.isInfinite();
",0,0,0,1,2,1,4,0,0,4,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1614,"                return v.combine(a, b, y);
",0,0,0,1,2,1,10,0,0,10,26,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1626,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,63,"        super(rowDimension, columnDimension);
",4,0,0,1,2,0,0,0,0,4,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,64,"        long lRow = rowDimension;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,65,"        long lCol = columnDimension;
",4,0,0,0,0,0,0,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,66,"        if (lRow * lCol >= Integer.MAX_VALUE) {
",8,2,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,67,"            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);
",8,1,0,1,2,0,0,2,0,12,75,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,69,"        this.rows = rowDimension;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,70,"        this.columns = columnDimension;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,71,"        this.entries = new OpenIntToDoubleHashMap(0.0);
",2,0,0,1,2,0,0,2,0,5,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,79,"    public OpenMapRealMatrix(OpenMapRealMatrix matrix) {
",4,0,0,1,3,1,0,2,0,7,52,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,80,"        this.rows = matrix.rows;
",6,0,0,0,0,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,81,"        this.columns = matrix.columns;
",6,0,0,0,0,0,0,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,82,"        this.entries = new OpenIntToDoubleHashMap(matrix.entries);
",6,0,0,1,2,0,0,2,0,9,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,88,"        return new OpenMapRealMatrix(this);
",0,0,0,1,2,1,0,2,0,2,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,100,"        return new OpenMapRealMatrix(rowDimension, columnDimension);
",4,0,0,1,2,1,0,2,0,6,60,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,106,"        return columns;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,120,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,122,"        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);
",2,0,0,1,2,1,0,4,0,7,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,123,"        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {
",10,0,0,3,7,0,6,0,0,16,92,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,124,"            iterator.advance();
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,125,"            final int row = iterator.key() / columns;
",4,1,0,1,2,1,4,0,0,10,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,126,"            final int col = iterator.key() - row * columns;
",6,2,0,1,2,1,4,0,0,13,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,127,"            out.setEntry(row, col, getEntry(row, col) + iterator.value());
",0,1,0,3,6,0,18,0,0,19,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,128,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,130,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,139,"            return subtract((OpenMapRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,140,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,141,"            return (OpenMapRealMatrix) super.subtract(m);
",4,0,0,2,4,1,0,2,0,6,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,155,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,157,"        final OpenMapRealMatrix out = new OpenMapRealMatrix(this);
",2,0,0,1,2,1,0,4,0,7,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,158,"        for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {
",10,0,0,3,7,0,6,0,0,16,92,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,159,"            iterator.advance();
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,160,"            final int row = iterator.key() / columns;
",4,1,0,1,2,1,4,0,0,10,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,161,"            final int col = iterator.key() - row * columns;
",6,2,0,1,2,1,4,0,0,13,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,162,"            out.setEntry(row, col, getEntry(row, col) - iterator.value());
",0,1,0,3,6,0,18,0,0,19,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,163,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,165,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,179,"            return multiply((OpenMapRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,180,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,182,"            MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,184,"            final int outCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,185,"            final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);
",6,0,0,1,2,1,0,4,0,11,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,186,"            for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {
",6,0,0,3,7,0,8,0,0,14,90,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,187,"                iterator.advance();
",0,0,0,1,2,0,4,0,0,4,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,188,"                final double value = iterator.value();
",2,0,0,1,2,1,4,0,0,7,38,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,189,"                final int key      = iterator.key();
",2,0,0,1,2,1,4,0,0,7,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,190,"                final int i        = key / columns;
",6,1,0,0,0,1,0,0,0,8,35,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,191,"                final int k        = key % columns;
",6,1,0,0,0,1,0,0,0,8,35,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,192,"                for (int j = 0; j < outCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,193,"                    out.addToEntry(i, j, value * m.getEntry(k, j));
",2,1,0,2,4,0,16,0,0,19,47,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,195,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,197,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,214,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,216,"        final int outCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,217,"        OpenMapRealMatrix out = new OpenMapRealMatrix(rows, outCols);
",6,0,0,1,2,0,0,4,0,10,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,218,"        for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {
",6,0,0,3,7,0,8,0,0,14,90,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,219,"            iterator.advance();
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,220,"            final double value = iterator.value();
",2,0,0,1,2,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,221,"            final int key      = iterator.key();
",2,0,0,1,2,1,4,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,222,"            final int i        = key / columns;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,223,"            final int k        = key % columns;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,224,"            for (int j = 0; j < outCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,225,"                final int rightKey = m.computeKey(k, j);
",2,0,0,1,2,1,8,0,0,11,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,226,"                if (m.entries.containsKey(rightKey)) {
",4,0,0,2,5,0,4,0,0,8,38,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,227,"                    final int outKey = out.computeKey(i, j);
",2,0,0,1,2,1,8,0,0,11,40,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,228,"                    final double outValue =
",2,0,0,0,0,1,0,0,0,3,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,230,"                    if (outValue == 0.0) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,231,"                        out.entries.remove(outKey);
",4,0,0,1,2,0,4,0,0,8,27,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,233,"                        out.entries.put(outKey, outValue);
",4,0,0,1,2,0,6,0,0,10,34,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,237,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,239,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,245,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,246,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,247,"        return entries.get(computeKey(row, column));
",0,0,0,2,4,1,10,0,0,10,44,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,253,"        return rows;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,260,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,261,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,262,"        if (value == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,263,"            entries.remove(computeKey(row, column));
",0,0,0,2,4,0,10,0,0,10,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,265,"            entries.put(computeKey(row, column), value);
",0,0,0,2,4,0,12,0,0,12,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,267,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,273,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,274,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,275,"        final int key = computeKey(row, column);
",2,0,0,1,2,1,6,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,276,"        final double value = entries.get(key) + increment;
",4,1,0,1,2,1,6,0,0,12,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,277,"        if (value == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,278,"            entries.remove(key);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,280,"            entries.put(key, value);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,282,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,288,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,289,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,290,"        final int key = computeKey(row, column);
",2,0,0,1,2,1,6,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,291,"        final double value = entries.get(key) * factor;
",4,1,0,1,2,1,6,0,0,12,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,292,"        if (value == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,293,"            entries.remove(key);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,295,"            entries.put(key, value);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,297,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,306,"        return row * columns + column;
",6,2,0,0,0,1,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealMatrix,6,39,"@Deprecated
",2,0,0,0,0,0,0,0,0,2,11,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,48,"    public Array2DRowRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,32,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,103,"            copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,106,"                throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,110,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,114,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,118,"                    throw new DimensionMismatchException(d[r].length, nCols);
",4,0,1,2,4,0,0,2,0,10,57,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,132,"    public Array2DRowRealMatrix(final double[] v) {
",4,0,0,2,5,2,0,0,0,6,47,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,133,"        final int nRows = v.length;
",6,0,0,0,0,1,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,134,"        data = new double[nRows][1];
",2,0,1,2,4,0,0,0,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,135,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,136,"            data[row][0] = v[row];
",0,0,1,3,6,0,0,0,0,9,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,138,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,151,"        return new Array2DRowRealMatrix(copyOut(), false);
",0,0,0,2,4,1,2,2,0,5,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,165,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,167,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,168,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,169,"        final double[][] outData = new double[rowCount][columnCount];
",2,0,1,4,8,1,0,0,0,7,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,170,"        for (int row = 0; row < rowCount; row++) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,171,"            final double[] dataRow    = data[row];
",2,0,1,2,4,1,0,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,172,"            final double[] mRow       = m.data[row];
",6,0,1,2,4,1,0,0,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,173,"            final double[] outDataRow = outData[row];
",2,0,1,2,4,1,0,0,0,7,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,174,"            for (int col = 0; col < columnCount; col++) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,175,"                outDataRow[col] = dataRow[col] + mRow[col];
",0,1,1,3,6,0,0,0,0,14,43,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,179,"        return new Array2DRowRealMatrix(outData, false);
",2,0,0,1,2,1,0,2,0,5,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,192,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,194,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,195,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,196,"        final double[][] outData = new double[rowCount][columnCount];
",2,0,1,4,8,1,0,0,0,7,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,197,"        for (int row = 0; row < rowCount; row++) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,198,"            final double[] dataRow    = data[row];
",2,0,1,2,4,1,0,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,199,"            final double[] mRow       = m.data[row];
",6,0,1,2,4,1,0,0,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,200,"            final double[] outDataRow = outData[row];
",2,0,1,2,4,1,0,0,0,7,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,201,"            for (int col = 0; col < columnCount; col++) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,202,"                outDataRow[col] = dataRow[col] - mRow[col];
",0,1,1,3,6,0,0,0,0,14,43,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,206,"        return new Array2DRowRealMatrix(outData, false);
",2,0,0,1,2,1,0,2,0,5,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,219,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,221,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,222,"        final int nCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,223,"        final int nSum = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,225,"        final double[][] outData = new double[nRows][nCols];
",2,0,1,4,8,1,0,0,0,7,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,227,"        final double[] mCol = new double[nSum];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,228,"        final double[][] mData = m.data;
",6,0,0,2,4,1,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,231,"        for (int col = 0; col < nCols; col++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,234,"            for (int mRow = 0; mRow < nSum; mRow++) {
",8,1,0,1,3,0,0,0,0,10,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,235,"                mCol[mRow] = mData[mRow][col];
",0,0,1,3,6,0,0,0,0,11,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,238,"            for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,239,"                final double[] dataRow = data[row];
",2,0,1,2,4,1,0,0,0,7,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,240,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,241,"                for (int i = 0; i < nSum; i++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,242,"                    sum += dataRow[i] * mCol[i];
",2,1,1,2,4,0,0,0,0,12,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,244,"                outData[row][col] = sum;
",2,0,1,2,4,0,0,0,0,9,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,248,"        return new Array2DRowRealMatrix(outData, false);
",2,0,0,1,2,1,0,2,0,5,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,263,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,274,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);
",6,0,0,1,2,0,0,2,0,8,90,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,277,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);
",6,0,0,1,2,0,0,2,0,8,96,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,282,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,287,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,292,"                    throw new DimensionMismatchException(subMatrix[i].length, nCols);
",4,0,1,2,4,0,0,2,0,10,65,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,297,"            super.setSubMatrix(subMatrix, row, column);
",8,0,0,1,2,0,0,0,0,8,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,323,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,324,"        data[row][column] += increment;
",2,0,1,2,4,0,0,0,0,9,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,325,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,332,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,333,"        data[row][column] *= factor;
",2,0,1,2,4,0,0,0,0,9,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,334,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,352,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,353,"        final int nCols = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,354,"        if (v.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,355,"            throw new DimensionMismatchException(v.length, nCols);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,357,"        final double[] out = new double[nRows];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,358,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,359,"            final double[] dataRow = data[row];
",2,0,1,2,4,1,0,0,0,7,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,360,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,361,"            for (int i = 0; i < nCols; i++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,362,"                sum += dataRow[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,364,"            out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,366,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,373,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,374,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,375,"        if (v.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,376,"            throw new DimensionMismatchException(v.length, nRows);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,379,"        final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,380,"        for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,381,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,382,"            for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,383,"                sum += data[i][col] * v[i];
",2,1,1,3,6,0,0,0,0,14,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,385,"            out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,388,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,395,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,396,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,397,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,398,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,399,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,400,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,401,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,404,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,428,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,429,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,431,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,432,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,433,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,434,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,437,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,446,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,447,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,449,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,450,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,451,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,452,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,455,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,461,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,462,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,463,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,464,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,465,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,466,"                final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,467,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,470,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,476,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,477,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,478,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,479,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,480,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,481,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,484,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,493,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,494,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,496,"        for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,497,"            for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,498,"                final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,499,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,502,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,511,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,512,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,514,"        for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,515,"            for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,516,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,6,519,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DefaultRealMatrixPreservingVisitor,6,37,"    public void visit(int row, int column, double value) {}
",8,0,0,2,4,1,0,0,0,9,55,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1169,"        protected SparseEntryIterator() {
",2,0,0,1,3,1,0,0,0,3,33,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1170,"            dim = getDimension();
",2,0,0,1,2,0,2,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1171,"            current = new Entry();
",2,0,0,1,2,0,0,2,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1172,"            next = new Entry();
",2,0,0,1,2,0,0,2,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1173,"            if (next.getValue() == 0) {
",0,1,0,2,5,0,4,0,0,5,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1174,"                advance(next);
",0,0,0,1,2,0,4,0,0,4,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1176,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1184,"            if (e == null) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1185,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1188,"                e.setIndex(e.getIndex() + 1);
",0,1,0,2,4,0,8,0,0,9,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1189,"            } while (e.getIndex() < dim && e.getValue() == 0);
",2,3,0,3,7,0,8,0,0,13,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1190,"            if (e.getIndex() >= dim) {
",2,1,0,2,5,0,4,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1191,"                e.setIndex(-1);
",0,0,0,1,2,0,4,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1193,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1197,"            return next.getIndex() >= 0;
",0,1,0,1,2,1,4,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1202,"            int index = next.getIndex();
",2,0,0,1,2,0,4,0,0,6,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1203,"            if (index < 0) {
",2,1,0,1,3,0,0,0,0,3,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1204,"                throw new NoSuchElementException();
",0,0,0,1,2,0,0,2,0,2,35,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1206,"            current.setIndex(index);
",0,0,0,1,2,0,6,0,0,6,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1207,"            advance(next);
",0,0,0,1,2,0,4,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1208,"            return current;
",2,0,0,0,0,1,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1217,"            throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1159,"    @Deprecated
",2,0,0,0,0,0,0,0,0,2,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1059,"        public Entry() {
",2,0,0,1,3,1,0,0,0,3,16,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1060,"            setIndex(0);
",0,0,0,1,2,0,2,0,0,2,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1061,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1069,"            return getEntry(getIndex());
",0,0,0,2,4,1,4,0,0,4,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1078,"            setEntry(getIndex(), value);
",0,0,0,2,4,0,6,0,0,6,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1079,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1087,"            return index;
",2,0,0,0,0,1,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1096,"            this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1097,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,6,48,"        super(LocalizedFormats.NON_SYMMETRIC_MATRIX, row, column, threshold);
",10,0,0,1,2,0,0,0,0,10,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,6,49,"        this.row = row;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,6,50,"        this.column = column;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,6,51,"        this.threshold = threshold;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,6,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,6,58,"        return row;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,6,64,"        return column;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/NonSymmetricMatrixException,6,70,"        return threshold;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,159,"            blocks = new double[blockRows * blockColumns][];
",6,1,0,2,4,0,0,0,0,8,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,170,"                    throw new DimensionMismatchException(blockData[index].length,
",2,0,1,1,3,0,0,2,0,8,61,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,174,"                    blocks[index] = blockData[index].clone();
",0,0,1,3,6,0,2,0,0,11,41,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,212,"                throw new DimensionMismatchException(columns, length);
",4,0,0,1,2,0,0,2,0,6,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,284,"        return new BlockRealMatrix(rowDimension, columnDimension);
",4,0,0,1,2,1,0,2,0,6,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,291,"        BlockRealMatrix copied = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,0,0,4,0,10,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,294,"        for (int i = 0; i < blocks.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,295,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);
",6,0,1,4,8,0,4,0,0,20,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,298,"        return copied;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,306,"            return add((BlockRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,307,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,309,"            MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,311,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,314,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,315,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,316,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,319,"                    final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,320,"                    final double[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,45,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,321,"                    final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,322,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,323,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,324,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,325,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,326,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,327,"                        for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,328,"                            outBlock[k] = tBlock[k] + m.getEntry(p, q);
",0,1,1,3,6,0,8,0,0,18,43,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,329,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,333,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,337,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,352,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,354,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,357,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,358,"            final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,359,"            final double[] tBlock = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,360,"            final double[] mBlock = m.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,361,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,362,"                outBlock[k] = tBlock[k] + mBlock[k];
",0,1,1,3,6,0,0,0,0,14,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,366,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,374,"            return subtract((BlockRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,375,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,377,"            MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,379,"            final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,382,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,383,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,384,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,387,"                    final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,388,"                    final double[] tBlock = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,43,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,389,"                    final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,390,"                    final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,391,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,392,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,393,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,394,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,395,"                        for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,396,"                            outBlock[k] = tBlock[k] - m.getEntry(p, q);
",0,1,1,3,6,0,8,0,0,18,43,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,397,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,401,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,405,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,420,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,422,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,425,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,426,"            final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,427,"            final double[] tBlock = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,428,"            final double[] mBlock = m.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,429,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,430,"                outBlock[k] = tBlock[k] - mBlock[k];
",0,1,1,3,6,0,0,0,0,14,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,434,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,441,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,444,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,445,"            final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,446,"            final double[] tBlock = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,447,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,448,"                outBlock[k] = tBlock[k] + d;
",2,1,1,2,4,0,0,0,0,12,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,452,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,458,"        final BlockRealMatrix out = new BlockRealMatrix(rows, columns);
",6,0,0,1,2,1,0,4,0,11,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,461,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,462,"            final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,463,"            final double[] tBlock = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,464,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,465,"                outBlock[k] = tBlock[k] * d;
",2,1,1,2,4,0,0,0,0,12,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,469,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,477,"            return multiply((BlockRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,478,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,480,"            MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,482,"            final BlockRealMatrix out = new BlockRealMatrix(rows, m.getColumnDimension());
",4,0,0,2,4,1,4,4,0,13,78,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,485,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,486,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,487,"                final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,488,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,490,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,491,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,492,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());
",6,1,0,2,4,1,8,0,0,16,75,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,495,"                    final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,498,"                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {
",8,1,0,1,3,0,0,0,0,10,55,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,499,"                        final int kWidth = blockWidth(kBlock);
",2,0,0,1,2,1,4,0,0,7,38,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,500,"                        final double[] tBlock = blocks[iBlock * blockColumns + kBlock];
",8,2,1,2,4,1,0,0,0,13,63,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,501,"                        final int rStart = kBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,502,"                        int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,503,"                        for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,504,"                            final int lStart = (p - pStart) * kWidth;
",8,2,0,1,2,1,0,0,0,11,41,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,505,"                            final int lEnd = lStart + kWidth;
",6,1,0,0,0,1,0,0,0,8,33,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,506,"                            for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,507,"                                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,18,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,508,"                                int r = rStart;
",4,0,0,0,0,0,0,0,0,4,15,18,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,509,"                                for (int l = lStart; l < lEnd; ++l) {
",10,1,0,1,3,0,0,0,0,12,37,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,510,"                                    sum += tBlock[l] * m.getEntry(r, q);
",2,1,1,2,4,0,8,0,0,16,36,19,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,511,"                                    ++r;
",2,0,0,0,0,0,0,0,0,3,4,19,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,513,"                                outBlock[k] += sum;
",2,0,1,1,2,0,0,0,0,7,19,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,514,"                                ++k;
",2,0,0,0,0,0,0,0,0,3,4,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,519,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,523,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,537,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,539,"        final BlockRealMatrix out = new BlockRealMatrix(rows, m.columns);
",8,0,0,1,2,1,0,4,0,13,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,542,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,543,"        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,545,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,546,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,548,"            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,549,"                final int jWidth = out.blockWidth(jBlock);
",2,0,0,1,2,1,6,0,0,9,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,550,"                final int jWidth2 = jWidth  + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,551,"                final int jWidth3 = jWidth2 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,552,"                final int jWidth4 = jWidth3 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,555,"                final double[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,0,0,9,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,558,"                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,559,"                    final int kWidth = blockWidth(kBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,560,"                    final double[] tBlock = blocks[iBlock * blockColumns + kBlock];
",8,2,1,2,4,1,0,0,0,13,63,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,561,"                    final double[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];
",14,2,0,2,4,1,0,0,0,17,67,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,562,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,563,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,564,"                        final int lStart = (p - pStart) * kWidth;
",8,2,0,1,2,1,0,0,0,11,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,565,"                        final int lEnd = lStart + kWidth;
",6,1,0,0,0,1,0,0,0,8,33,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,566,"                        for (int nStart = 0; nStart < jWidth; ++nStart) {
",8,1,0,1,3,0,0,0,0,10,49,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,567,"                            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,568,"                            int l = lStart;
",4,0,0,0,0,0,0,0,0,4,15,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,569,"                            int n = nStart;
",4,0,0,0,0,0,0,0,0,4,15,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,570,"                            while (l < lEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,571,"                                sum += tBlock[l] * mBlock[n] +
",2,4,1,2,4,0,0,0,0,15,30,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,575,"                                l += 4;
",2,0,0,0,0,0,0,0,0,3,7,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,576,"                                n += jWidth4;
",4,0,0,0,0,0,0,0,0,5,13,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,578,"                            while (l < lEnd) {
",4,1,0,1,3,0,0,0,0,5,18,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,579,"                                sum += tBlock[l++] * mBlock[n];
",4,1,1,2,4,0,0,0,0,13,31,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,580,"                                n += jWidth;
",4,0,0,0,0,0,0,0,0,5,12,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,582,"                            outBlock[k] += sum;
",2,0,1,1,2,0,0,0,0,7,19,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,583,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,588,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,592,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,611,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);
",2,0,1,2,4,0,12,0,0,17,79,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,612,"                    dataPos += BLOCK_SIZE;
",4,0,0,0,0,0,0,0,0,5,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,626,"        final double[] colSums = new double[BLOCK_SIZE];
",2,0,1,2,4,1,0,0,0,5,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,627,"        double maxColSum = 0;
",2,0,0,0,0,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,628,"        for (int jBlock = 0; jBlock < blockColumns; jBlock++) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,629,"            final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,630,"            Arrays.fill(colSums, 0, jWidth, 0.0);
",0,0,0,1,2,0,8,0,0,8,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,631,"            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,632,"                final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,633,"                final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,634,"                for (int j = 0; j < jWidth; ++j) {
",8,1,0,1,3,0,0,0,0,10,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,635,"                    double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,636,"                    for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,637,"                        sum += FastMath.abs(block[i * jWidth + j]);
",8,2,1,2,4,0,4,0,0,17,43,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,639,"                    colSums[j] += sum;
",2,0,1,1,2,0,0,0,0,7,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,642,"            for (int j = 0; j < jWidth; ++j) {
",8,1,0,1,3,0,0,0,0,10,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,643,"                maxColSum = FastMath.max(maxColSum, colSums[j]);
",2,0,1,2,4,0,6,0,0,13,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,646,"        return maxColSum;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,652,"        double sum2 = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,653,"        for (int blockIndex = 0; blockIndex < blocks.length; ++blockIndex) {
",10,1,0,1,3,0,0,0,0,12,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,654,"            for (final double entry : blocks[blockIndex]) {
",2,0,1,2,5,1,0,0,0,7,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,655,"                sum2 += entry * entry;
",6,1,0,0,0,0,0,0,0,8,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,658,"        return FastMath.sqrt(sum2);
",0,0,0,1,2,1,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,668,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,671,"        final BlockRealMatrix out =
",2,0,0,0,0,1,0,2,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,675,"        final int blockStartRow = startRow / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,676,"        final int rowsShift = startRow % BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,677,"        final int blockStartColumn = startColumn / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,678,"        final int columnsShift = startColumn % BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,681,"        int pBlock = blockStartRow;
",4,0,0,0,0,0,0,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,682,"        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,683,"            final int iHeight = out.blockHeight(iBlock);
",2,0,0,1,2,1,6,0,0,9,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,684,"            int qBlock = blockStartColumn;
",4,0,0,0,0,0,0,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,685,"            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,686,"                final int jWidth = out.blockWidth(jBlock);
",2,0,0,1,2,1,6,0,0,9,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,689,"                final int outIndex = iBlock * out.blockColumns + jBlock;
",10,2,0,0,0,1,0,0,0,13,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,690,"                final double[] outBlock = out.blocks[outIndex];
",6,0,1,2,4,1,0,0,0,9,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,691,"                final int index = pBlock * blockColumns + qBlock;
",8,2,0,0,0,1,0,0,0,11,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,692,"                final int width = blockWidth(qBlock);
",2,0,0,1,2,1,4,0,0,7,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,694,"                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,695,"                final int widthExcess = jWidth + columnsShift - BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,59,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,696,"                if (heightExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,698,"                    if (widthExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,700,"                        final int width2 = blockWidth(qBlock + 1);
",4,1,0,1,2,1,2,0,0,8,42,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,701,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,705,"                        copyBlockPart(blocks[index + 1], width2,
",2,1,1,1,3,0,4,0,0,9,40,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,709,"                        copyBlockPart(blocks[index + blockColumns], width,
",4,1,1,1,3,0,4,0,0,11,50,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,713,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,
",4,1,1,1,3,0,4,0,0,11,55,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,717,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,719,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,723,"                        copyBlockPart(blocks[index + blockColumns], width,
",4,1,1,1,3,0,4,0,0,11,50,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,730,"                    if (widthExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,732,"                        final int width2 = blockWidth(qBlock + 1);
",4,1,0,1,2,1,2,0,0,8,42,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,733,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,737,"                        copyBlockPart(blocks[index + 1], width2,
",2,1,1,1,3,0,4,0,0,9,40,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,741,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,743,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,749,"                ++qBlock;
",2,0,0,0,0,0,0,0,0,3,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,751,"            ++pBlock;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,754,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,777,"        final int length = srcEndColumn - srcStartColumn;
",6,1,0,0,0,1,0,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,778,"        int srcPos = srcStartRow * srcWidth + srcStartColumn;
",8,2,0,0,0,0,0,0,0,10,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,779,"        int dstPos = dstStartRow * dstWidth + dstStartColumn;
",8,2,0,0,0,0,0,0,0,10,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,780,"        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {
",10,1,0,1,3,0,0,0,0,12,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,781,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);
",0,0,0,1,2,0,14,0,0,14,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,782,"            srcPos += srcWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,783,"            dstPos += dstWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,785,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,794,"        MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,795,"        final int refLength = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,796,"        if (refLength == 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,797,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,799,"        final int endRow = row + subMatrix.length - 1;
",8,2,0,0,0,1,0,0,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,800,"        final int endColumn = column + refLength - 1;
",6,2,0,0,0,1,0,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,801,"        MatrixUtils.checkSubMatrixIndex(this, row, endRow, column, endColumn);
",0,0,0,1,2,0,12,0,0,12,70,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,802,"        for (final double[] subRow : subMatrix) {
",4,0,0,2,5,1,0,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,803,"            if (subRow.length != refLength) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,804,"                throw new DimensionMismatchException(refLength, subRow.length);
",6,0,0,1,2,0,0,2,0,8,63,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,809,"        final int blockStartRow = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,810,"        final int blockEndRow = (endRow + BLOCK_SIZE) / BLOCK_SIZE;
",8,2,0,1,2,1,0,0,0,11,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,811,"        final int blockStartColumn = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,812,"        final int blockEndColumn = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;
",8,2,0,1,2,1,0,0,0,11,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,815,"        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,816,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,817,"            final int firstRow = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,818,"            final int iStart = FastMath.max(row,    firstRow);
",2,0,0,1,2,1,8,0,0,11,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,819,"            final int iEnd = FastMath.min(endRow + 1, firstRow + iHeight);
",8,2,0,1,2,1,4,0,0,15,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,821,"            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,822,"                final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,823,"                final int firstColumn = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,824,"                final int jStart = FastMath.max(column,    firstColumn);
",2,0,0,1,2,1,8,0,0,11,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,825,"                final int jEnd = FastMath.min(endColumn + 1, firstColumn + jWidth);
",8,2,0,1,2,1,4,0,0,15,67,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,826,"                final int jLength = jEnd - jStart;
",6,1,0,0,0,1,0,0,0,8,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,829,"                final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,830,"                for (int i = iStart; i < iEnd; ++i) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,831,"                    System.arraycopy(subMatrix[i - row], jStart - column,
",8,2,1,1,3,0,4,0,0,16,53,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,838,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,844,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,845,"        final BlockRealMatrix out = new BlockRealMatrix(1, columns);
",4,0,0,1,2,1,0,4,0,9,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,848,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,849,"        final int iRow = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,850,"        int outBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,851,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,852,"        double[] outBlock = out.blocks[outBlockIndex];
",6,0,1,2,4,0,0,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,853,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,854,"            final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,855,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,856,"            final int available = outBlock.length - outIndex;
",8,1,0,0,0,1,0,0,0,10,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,857,"            if (jWidth > available) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,858,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);
",4,1,0,1,2,0,12,0,0,17,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,859,"                outBlock = out.blocks[++outBlockIndex];
",8,0,0,1,2,0,0,0,0,10,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,860,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);
",8,2,0,1,2,0,8,0,0,18,72,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,861,"                outIndex = jWidth - available;
",6,1,0,0,0,0,0,0,0,8,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,863,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,67,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,864,"                outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,868,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,876,"            setRowMatrix(row, (BlockRealMatrix) matrix);
",2,0,0,2,4,0,4,2,0,8,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,879,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,877,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,878,"            super.setRowMatrix(row, matrix);
",6,0,0,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,880,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,895,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,896,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,897,"        if ((matrix.getRowDimension() != 1) ||
",0,2,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,899,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,905,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,906,"        final int iRow = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,907,"        int mBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,908,"        int mIndex = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,909,"        double[] mBlock = matrix.blocks[mBlockIndex];
",6,0,1,2,4,0,0,0,0,8,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,910,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,911,"            final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,912,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,913,"            final int available  = mBlock.length - mIndex;
",8,1,0,0,0,1,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,914,"            if (jWidth > available) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,915,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);
",4,1,0,1,2,0,12,0,0,17,66,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,916,"                mBlock = matrix.blocks[++mBlockIndex];
",8,0,0,1,2,0,0,0,0,10,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,917,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);
",8,2,0,1,2,0,8,0,0,18,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,918,"                mIndex = jWidth - available;
",6,1,0,0,0,0,0,0,0,8,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,920,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);
",4,1,0,1,2,0,12,0,0,17,63,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,921,"                mIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,924,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,930,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,931,"        final BlockRealMatrix out = new BlockRealMatrix(rows, 1);
",4,0,0,1,2,1,0,4,0,9,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,934,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,935,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,936,"        final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,937,"        int outBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,938,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,939,"        double[] outBlock = out.blocks[outBlockIndex];
",6,0,1,2,4,0,0,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,940,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,941,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,942,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,943,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,944,"                if (outIndex >= outBlock.length) {
",6,1,0,1,3,0,0,0,0,7,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,945,"                    outBlock = out.blocks[++outBlockIndex];
",8,0,0,1,2,0,0,0,0,10,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,946,"                    outIndex = 0;
",2,0,0,0,0,0,0,0,0,3,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,948,"                outBlock[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,952,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,960,"            setColumnMatrix(column, (BlockRealMatrix) matrix);
",2,0,0,2,4,0,4,2,0,8,50,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,963,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,961,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,962,"            super.setColumnMatrix(column, matrix);
",6,0,0,1,2,0,0,0,0,6,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,964,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,979,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,980,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,981,"        if ((matrix.getRowDimension() != nRows) ||
",2,2,0,2,5,0,4,0,0,8,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,983,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,989,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,990,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,991,"        final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,992,"        int mBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,993,"        int mIndex = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,994,"        double[] mBlock = matrix.blocks[mBlockIndex];
",6,0,1,2,4,0,0,0,0,8,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,995,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,996,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,997,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,998,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,999,"                if (mIndex >= mBlock.length) {
",6,1,0,1,3,0,0,0,0,7,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1000,"                    mBlock = matrix.blocks[++mBlockIndex];
",8,0,0,1,2,0,0,0,0,10,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1001,"                    mIndex = 0;
",2,0,0,0,0,0,0,0,0,3,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1003,"                block[i * jWidth + jColumn] = mBlock[mIndex++];
",8,2,1,2,4,0,0,0,0,16,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1006,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1012,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1013,"        final double[] outData = new double[columns];
",2,0,1,2,4,1,0,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1016,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1017,"        final int iRow = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1018,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1019,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1020,"            final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1021,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1022,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,66,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1023,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1026,"        return new ArrayRealVector(outData, false);
",2,0,0,1,2,1,0,2,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1034,"            setRow(row, ((ArrayRealVector) vector).getDataRef());
",2,0,0,4,8,0,6,2,0,10,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1037,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1035,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1036,"            super.setRowVector(row, vector);
",6,0,0,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1038,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1044,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1045,"        final double[] outData = new double[rows];
",2,0,1,2,4,1,0,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1048,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1049,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1050,"        final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1051,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1052,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1053,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1054,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1055,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1056,"                outData[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1060,"        return new ArrayRealVector(outData, false);
",2,0,0,1,2,1,0,2,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1068,"            setColumn(column, ((ArrayRealVector) vector).getDataRef());
",2,0,0,4,8,0,6,2,0,10,59,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1071,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1069,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1070,"            super.setColumnVector(column, vector);
",6,0,0,1,2,0,0,0,0,6,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1072,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1077,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1078,"        final double[] out = new double[columns];
",2,0,1,2,4,1,0,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1081,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1082,"        final int iRow = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1083,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1084,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1085,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1086,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1087,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1088,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1091,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1098,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1099,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1100,"        if (array.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1101,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1105,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1106,"        final int iRow = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1107,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1108,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1109,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1110,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1111,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);
",4,1,0,1,2,0,12,0,0,17,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1112,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1114,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1119,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1120,"        final double[] out = new double[rows];
",2,0,1,2,4,1,0,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1123,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1124,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1125,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1126,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1127,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1128,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1129,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1130,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1131,"                out[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1135,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1142,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1143,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1144,"        if (array.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1145,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1149,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1150,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1151,"        final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1152,"        int outIndex = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1153,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1154,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1155,"            final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1156,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1157,"                block[i * jWidth + jColumn] = array[outIndex++];
",8,2,1,2,4,0,0,0,0,16,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1160,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1166,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1167,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1168,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1169,"        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1171,"        return blocks[iBlock * blockColumns + jBlock][k];
",6,2,1,2,4,1,0,0,0,12,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1178,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1179,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1180,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1181,"        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1183,"        blocks[iBlock * blockColumns + jBlock][k] = value;
",8,2,1,2,4,0,0,0,0,15,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1184,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1191,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1192,"        final int iBlock = row    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1193,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1194,"        final int k = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1196,"        blocks[iBlock * blockColumns + jBlock][k] += increment;
",8,2,1,2,4,0,0,0,0,15,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1197,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1204,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1205,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1206,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1207,"        final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1209,"        blocks[iBlock * blockColumns + jBlock][k] *= factor;
",8,2,1,2,4,0,0,0,0,15,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1210,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1265,"            throw new DimensionMismatchException(v.length, columns);
",6,0,0,1,2,0,0,2,0,8,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1282,"                        sum += block[k]     * v[q]     +
",2,4,1,2,4,0,0,0,0,15,32,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1286,"                        k += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1287,"                        q += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1304,"        if (v.length != rows) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1305,"            throw new DimensionMismatchException(v.length, rows);
",6,0,0,1,2,0,0,2,0,8,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1307,"        final double[] out = new double[columns];
",2,0,1,2,4,1,0,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1310,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1311,"            final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1312,"            final int jWidth2 = jWidth  + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1313,"            final int jWidth3 = jWidth2 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1314,"            final int jWidth4 = jWidth3 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1315,"            final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1316,"            final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1317,"            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1318,"                final double[] block  = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,63,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1319,"                final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1320,"                final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1321,"                for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1322,"                    int k = q - qStart;
",6,1,0,0,0,0,0,0,0,7,19,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1323,"                    double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1324,"                    int p = pStart;
",4,0,0,0,0,0,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1325,"                    while (p < pEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1326,"                        sum += block[k]           * v[p]     +
",2,4,1,2,4,0,0,0,0,15,38,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1330,"                        k += jWidth4;
",4,0,0,0,0,0,0,0,0,5,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1331,"                        p += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1333,"                    while (p < pEnd) {
",4,1,0,1,3,0,0,0,0,5,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1334,"                        sum += block[k] * v[p++];
",4,1,1,2,4,0,0,0,0,13,25,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1335,"                        k += jWidth;
",4,0,0,0,0,0,0,0,0,5,12,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1337,"                    out[q] += sum;
",2,0,1,1,2,0,0,0,0,7,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1342,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1348,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1349,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1350,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1351,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1352,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1353,"                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1354,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1355,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1356,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1357,"                    final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1358,"                    int k = (p - pStart) * jWidth;
",8,2,0,1,2,0,0,0,0,10,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1359,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1360,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1361,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1366,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1372,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1373,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1374,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1375,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1376,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1377,"                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1378,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1379,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1380,"                    final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1381,"                    final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1382,"                    int k = (p - pStart) * jWidth;
",8,2,0,1,2,0,0,0,0,10,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1383,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1384,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1385,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1390,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1399,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1400,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1401,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1402,"            final int p0 = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1403,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1404,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1405,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1406,"                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1407,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1408,"                    final int q0 = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1409,"                    final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1410,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,72,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1411,"                    final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1412,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1413,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1414,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1415,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1420,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1429,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1430,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1431,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1432,"            final int p0 = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1433,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1434,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1435,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1436,"                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1437,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1438,"                    final int q0 = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1439,"                    final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1440,"                    final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,72,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1441,"                    final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1442,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1443,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1444,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1445,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1450,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1456,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1457,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1458,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1459,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1460,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1461,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1462,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1463,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1464,"                final double[] block = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1465,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1466,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1467,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1468,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1469,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1472,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1475,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1481,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1482,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1483,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1484,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1485,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1486,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1487,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1488,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1489,"                final double[] block = blocks[blockIndex];
",2,0,1,2,4,1,0,0,0,7,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1490,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1491,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1492,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1493,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1494,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1497,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1500,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1510,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1511,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1512,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1513,"            final int p0 = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1514,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1515,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1516,"            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1517,"                final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1518,"                final int q0 = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1519,"                final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1520,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,72,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1521,"                final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1522,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1523,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1524,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1525,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1526,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1531,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1541,"        MatrixUtils.checkSubMatrixIndex(this, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,12,0,0,12,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1542,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1543,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1544,"            final int p0 = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1545,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1546,"            final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1547,"            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1548,"                final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1549,"                final int q0 = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1550,"                final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1551,"                final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,72,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1552,"                final double[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,0,0,13,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1553,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1554,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1555,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1556,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1557,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,6,1562,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,6,45,"        super(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,
",4,0,0,0,1,0,0,0,0,4,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,6,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,6,54,"        return getWrongDimension(0);
",0,0,0,1,2,1,2,0,0,2,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,6,60,"        return getExpectedDimension(0);
",0,0,0,1,2,1,2,0,0,2,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,6,66,"        return getWrongDimension(1);
",0,0,0,1,2,1,2,0,0,2,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixDimensionMismatchException,6,72,"        return getExpectedDimension(1);
",0,0,0,1,2,1,2,0,0,2,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,6,45,"        this(LocalizedFormats.DIMENSIONS_MISMATCH, wrong, expected);
",8,0,0,1,2,0,0,0,0,8,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,6,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,6,59,"        super(specific, wrong, expected);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,6,60,"        this.wrong = wrong.clone();
",2,0,0,1,2,0,4,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,6,61,"        this.expected = expected.clone();
",2,0,0,1,2,0,4,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,6,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,6,68,"        return wrong.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,6,74,"        return expected.clone();
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,6,82,"        return wrong[index];
",0,0,1,1,2,1,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MultiDimensionMismatchException,6,89,"        return expected[index];
",0,0,1,1,2,1,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,6,37,"        this(LocalizedFormats.NO_DATA);
",4,0,0,1,2,0,0,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,6,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,6,45,"        super(specific);
",2,0,0,1,2,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoDataException,6,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,97,"        if (rowDimension != columnDimension) {
",4,1,0,1,3,0,0,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,98,"            throw new DimensionMismatchException(rowDimension, columnDimension);
",4,0,0,1,2,0,0,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,101,"        return new DiagonalMatrix(rowDimension);
",2,0,0,1,2,1,0,2,0,4,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,121,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,123,"        final int dim = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,124,"        final double[] outData = new double[dim];
",2,0,1,2,4,1,0,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,125,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,126,"            outData[i] = data[i] + m.data[i];
",4,1,1,3,6,0,0,0,0,16,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,129,"        return new DiagonalMatrix(outData, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,142,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,144,"        final int dim = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,145,"        final double[] outData = new double[dim];
",2,0,1,2,4,1,0,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,146,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,147,"            outData[i] = data[i] - m.data[i];
",4,1,1,3,6,0,0,0,0,16,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,150,"        return new DiagonalMatrix(outData, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,185,"            return multiply((DiagonalMatrix) m);
",2,0,0,2,4,1,2,2,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,203,"        final int dim = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,204,"        final double[][] out = new double[dim][dim];
",2,0,1,4,8,1,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,206,"        for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,207,"            out[i][i] = data[i];
",0,0,1,3,6,0,0,0,0,11,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,210,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,240,"            ensureZero(value);
",0,0,0,1,2,0,4,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,252,"        if (row == column) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,253,"            MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,254,"            data[row] += increment;
",2,0,1,1,2,0,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,256,"            ensureZero(increment);
",0,0,0,1,2,0,4,0,0,4,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,258,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,267,"        if (row == column) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,268,"            MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,269,"            data[row] *= factor;
",2,0,1,1,2,0,0,0,0,7,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,271,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,296,"        return operate(v);
",0,0,0,1,2,1,4,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,304,"        if (!Precision.equals(0.0, value, 1)) {
",0,0,0,2,5,0,6,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,305,"            throw new NumberIsTooLargeException(FastMath.abs(value), 0, true);
",0,0,0,2,4,0,6,2,0,9,66,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,6,307,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,629,"            super(Fraction.ZERO);
",4,0,0,1,2,0,0,0,0,4,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,630,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,636,"            data = new double[rows][columns];
",2,0,1,2,4,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,637,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,642,"            data[row][column] = value.doubleValue();
",0,0,1,3,6,0,4,0,0,11,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,643,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,651,"            return new Array2DRowRealMatrix(data, false);
",2,0,0,1,2,1,0,2,0,5,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,624,"    private static class FractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<Fraction> {
",2,0,0,0,1,2,0,4,0,8,100,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,125,"            final SchurTransformer t = transformToSchur(matrix);
",2,0,0,1,2,1,4,2,0,9,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,126,"            findEigenVectorsFromSchur(t);
",0,0,0,1,2,0,4,0,0,4,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,145,"        this(matrix);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,146,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,157,"    public EigenDecomposition(final double[] main, final double[] secondary) {
",6,0,0,3,7,3,0,0,0,9,74,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,158,"        isSymmetric = true;
",2,0,0,0,0,0,0,0,0,4,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,159,"        this.main      = main.clone();
",2,0,0,1,2,0,4,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,160,"        this.secondary = secondary.clone();
",2,0,0,1,2,0,4,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,161,"        transformer    = null;
",2,0,0,0,0,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,162,"        final int size = main.length;
",6,0,0,0,0,1,0,0,0,7,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,163,"        final double[][] z = new double[size][size];
",2,0,1,4,8,1,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,164,"        for (int i = 0; i < size; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,165,"            z[i][i] = 1.0;
",0,0,1,2,4,0,0,0,0,7,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,167,"        findEigenVectors(z);
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,168,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,184,"        this(main, secondary);
",4,0,0,1,2,0,0,0,0,4,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,185,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,229,"                    cachedD.setEntry(i, i+1, imagEigenvalues[i]);
",2,1,1,2,4,0,6,0,0,13,45,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,231,"                    cachedD.setEntry(i, i-1, imagEigenvalues[i]);
",2,1,1,2,4,0,6,0,0,13,45,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,250,"        if (cachedVt == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,251,"            final int m = eigenvectors.length;
",6,0,0,0,0,1,0,0,0,7,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,252,"            cachedVt = MatrixUtils.createRealMatrix(m, m);
",2,0,0,1,2,0,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,253,"            for (int k = 0; k < m; ++k) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,254,"                cachedVt.setRowVector(k, eigenvectors[k]);
",0,0,1,2,4,0,6,0,0,10,42,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,259,"        return cachedVt;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,272,"        for (int i = 0; i < imagEigenvalues.length; i++) {
",10,1,0,1,3,0,0,0,0,12,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,273,"            if (!Precision.equals(imagEigenvalues[i], 0.0, EPSILON)) {
",0,0,1,3,7,0,6,0,0,11,58,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,274,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,277,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,290,"        return realEigenvalues.clone();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,306,"        return realEigenvalues[i];
",0,0,1,1,2,1,0,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,321,"        return imagEigenvalues.clone();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,337,"        return imagEigenvalues[i];
",0,0,1,1,2,1,0,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,348,"        return eigenvectors[i].copy();
",0,0,1,2,4,1,2,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,357,"        double determinant = 1;
",2,0,0,0,0,0,0,0,0,2,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,358,"        for (double lambda : realEigenvalues) {
",4,0,0,1,3,0,0,0,0,4,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,359,"            determinant *= lambda;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,361,"        return determinant;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,375,"        if (!isSymmetric) {
",2,0,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,376,"            throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,379,"        final double[] sqrtEigenValues = new double[realEigenvalues.length];
",6,0,0,2,4,1,0,0,0,7,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,380,"        for (int i = 0; i < realEigenvalues.length; i++) {
",10,1,0,1,3,0,0,0,0,12,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,381,"            final double eigen = realEigenvalues[i];
",2,0,1,1,2,1,0,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,382,"            if (eigen <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,383,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,385,"            sqrtEigenValues[i] = FastMath.sqrt(eigen);
",0,0,1,2,4,0,6,0,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,387,"        final RealMatrix sqrtEigen = MatrixUtils.createRealDiagonalMatrix(sqrtEigenValues);
",2,0,0,1,2,1,6,2,0,11,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,388,"        final RealMatrix v = getV();
",2,0,0,1,2,1,2,2,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,389,"        final RealMatrix vT = getVT();
",2,0,0,1,2,1,2,2,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,391,"        return v.multiply(sqrtEigen).multiply(vT);
",0,0,0,2,4,1,10,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,406,"        if (hasComplexEigenvalues()) {
",0,0,0,2,5,0,2,0,0,2,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,407,"            throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,409,"        return new Solver(realEigenvalues, imagEigenvalues, eigenvectors);
",6,0,0,1,2,1,0,2,0,8,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,599,"                    realEigenvalues[i] = 0;
",0,0,1,1,2,0,0,0,0,5,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,620,"                        throw new MaxCountExceededException(LocalizedFormats.CONVERGENCE_FAILED,
",4,0,0,0,1,0,0,2,0,6,72,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,652,"                            realEigenvalues[i + 1] -= u;
",4,1,1,1,2,0,0,0,0,8,28,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,653,"                            e[m] = 0.0;
",0,0,1,1,2,0,0,0,0,5,11,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,654,"                            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,668,"                        continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,709,"                    realEigenvalues[i] = 0;
",0,0,1,1,2,0,0,0,0,5,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,730,"        final SchurTransformer schurTransform = new SchurTransformer(matrix);
",4,0,0,1,2,1,0,4,0,9,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,731,"        final double[][] matT = schurTransform.getT().getData();
",2,0,0,4,8,1,6,0,0,9,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,733,"        realEigenvalues = new double[matT.length];
",6,0,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,734,"        imagEigenvalues = new double[matT.length];
",6,0,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,736,"        for (int i = 0; i < realEigenvalues.length; i++) {
",10,1,0,1,3,0,0,0,0,12,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,737,"            if (i == (realEigenvalues.length - 1) ||
",6,3,0,1,3,0,0,0,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,739,"                realEigenvalues[i] = matT[i][i];
",0,0,1,3,6,0,0,0,0,11,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,741,"                final double x = matT[i + 1][i + 1];
",6,2,1,2,4,1,0,0,0,11,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,742,"                final double p = 0.5 * (matT[i][i] - x);
",4,2,1,3,6,1,0,0,0,13,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,743,"                final double z = FastMath.sqrt(FastMath.abs(p * p + matT[i + 1][i] * matT[i][i + 1]));
",10,5,1,6,12,1,8,0,0,32,86,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,744,"                realEigenvalues[i] = x + p;
",4,1,1,1,2,0,0,0,0,10,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,745,"                imagEigenvalues[i] = z;
",2,0,1,1,2,0,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,746,"                realEigenvalues[i + 1] = x + p;
",6,2,1,1,2,0,0,0,0,11,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,747,"                imagEigenvalues[i + 1] = -z;
",4,1,1,1,2,0,0,0,0,9,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,748,"                i++;
",2,0,0,0,0,0,0,0,0,3,4,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,751,"        return schurTransform;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,765,"        return new Complex(xr, xi).divide(new Complex(yr, yi));
",8,0,0,3,6,1,2,4,0,14,55,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,776,"        final double[][] matrixT = schur.getT().getData();
",2,0,0,4,8,1,6,0,0,9,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,777,"        final double[][] matrixP = schur.getP().getData();
",2,0,0,4,8,1,6,0,0,9,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,779,"        final int n = matrixT.length;
",6,0,0,0,0,1,0,0,0,7,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,782,"        double norm = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,783,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,784,"           for (int j = FastMath.max(i - 1, 0); j < n; j++) {
",10,2,0,2,5,0,4,0,0,17,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,785,"              norm = norm + FastMath.abs(matrixT[i][j]);
",4,1,1,3,6,0,4,0,0,16,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,790,"        if (Precision.equals(norm, 0.0, EPSILON)) {
",0,0,0,2,5,0,8,0,0,8,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,791,"           throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,796,"        double r = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,797,"        double s = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,798,"        double z = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,800,"        for (int idx = n - 1; idx >= 0; idx--) {
",8,2,0,1,3,0,0,0,0,11,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,801,"            double p = realEigenvalues[idx];
",2,0,1,1,2,0,0,0,0,6,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,802,"            double q = imagEigenvalues[idx];
",2,0,1,1,2,0,0,0,0,6,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,804,"            if (Precision.equals(q, 0.0)) {
",0,0,0,2,5,0,6,0,0,6,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,806,"                int l = idx;
",4,0,0,0,0,0,0,0,0,4,12,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,807,"                matrixT[idx][idx] = 1.0;
",0,0,1,2,4,0,0,0,0,7,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,808,"                for (int i = idx - 1; i >= 0; i--) {
",8,2,0,1,3,0,0,0,0,11,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,809,"                    double w = matrixT[i][i] - p;
",4,1,1,2,4,0,0,0,0,11,29,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,810,"                    r = 0.0;
",2,0,0,0,0,0,0,0,0,3,8,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,811,"                    for (int j = l; j <= idx; j++) {
",10,1,0,1,3,0,0,0,0,12,32,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,812,"                        r = r + matrixT[i][j] * matrixT[j][idx];
",4,2,1,4,8,0,0,0,0,19,40,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,814,"                    if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0.0) {
",0,1,1,3,7,0,6,0,0,11,66,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,815,"                        z = w;
",4,0,0,0,0,0,0,0,0,5,6,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,816,"                        s = r;
",4,0,0,0,0,0,0,0,0,5,6,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,818,"                        l = i;
",4,0,0,0,0,0,0,0,0,5,6,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,819,"                        if (Precision.equals(imagEigenvalues[i], 0.0)) {
",0,0,1,3,7,0,4,0,0,8,48,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,820,"                            if (w != 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,821,"                                matrixT[i][idx] = -r / w;
",4,1,1,2,4,0,0,0,0,13,25,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,823,"                                matrixT[i][idx] = -r / (Precision.EPSILON * norm);
",8,2,1,3,6,0,0,0,0,18,50,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,827,"                            double x = matrixT[i][i + 1];
",4,1,1,2,4,0,0,0,0,9,29,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,828,"                            double y = matrixT[i + 1][i];
",4,1,1,2,4,0,0,0,0,9,29,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,829,"                            q = (realEigenvalues[i] - p) * (realEigenvalues[i] - p) +
",6,4,1,4,8,0,0,0,0,19,57,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,831,"                            double t = (x * s - z * r) / q;
",12,4,0,1,2,0,0,0,0,16,31,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,832,"                            matrixT[i][idx] = t;
",2,0,1,2,4,0,0,0,0,9,20,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,833,"                            if (FastMath.abs(x) > FastMath.abs(z)) {
",0,1,0,3,7,0,12,0,0,13,40,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,834,"                                matrixT[i + 1][idx] = (-r - w * t) / x;
",10,4,1,3,6,0,0,0,0,20,39,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,836,"                                matrixT[i + 1][idx] = (-s - y * t) / z;
",10,4,1,3,6,0,0,0,0,20,39,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,841,"                        double t = FastMath.abs(matrixT[i][idx]);
",2,0,1,3,6,0,4,0,0,12,41,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,842,"                        if ((Precision.EPSILON * t) * t > 1) {
",8,3,0,2,5,0,0,0,0,11,38,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,843,"                            for (int j = i; j <= idx; j++) {
",10,1,0,1,3,0,0,0,0,12,32,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,844,"                                matrixT[j][idx] = matrixT[j][idx] / t;
",2,1,1,4,8,0,0,0,0,16,38,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,849,"            } else if (q < 0.0) {
",2,1,0,1,4,0,0,0,0,3,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,851,"                int l = idx - 1;
",4,1,0,0,0,0,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,854,"                if (FastMath.abs(matrixT[idx][idx - 1]) > FastMath.abs(matrixT[idx - 1][idx])) {
",4,3,1,7,15,0,8,0,0,23,80,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,855,"                    matrixT[idx - 1][idx - 1] = q / matrixT[idx][idx - 1];
",8,4,1,4,8,0,0,0,0,19,54,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,856,"                    matrixT[idx - 1][idx]     = -(matrixT[idx][idx] - p) / matrixT[idx][idx - 1];
",6,4,1,7,14,0,0,0,0,26,77,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,858,"                    final Complex result = cdiv(0.0, -matrixT[idx - 1][idx],
",4,1,1,2,5,1,2,2,0,15,56,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,860,"                    matrixT[idx - 1][idx - 1] = result.getReal();
",4,2,1,3,6,0,4,0,0,13,45,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,861,"                    matrixT[idx - 1][idx]     = result.getImaginary();
",2,1,1,3,6,0,4,0,0,12,50,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,864,"                matrixT[idx][idx - 1] = 0.0;
",2,1,1,2,4,0,0,0,0,8,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,865,"                matrixT[idx][idx]     = 1.0;
",0,0,1,2,4,0,0,0,0,7,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,867,"                for (int i = idx - 2; i >= 0; i--) {
",8,2,0,1,3,0,0,0,0,11,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,868,"                    double ra = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,869,"                    double sa = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,870,"                    for (int j = l; j <= idx; j++) {
",10,1,0,1,3,0,0,0,0,12,32,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,871,"                        ra = ra + matrixT[i][j] * matrixT[j][idx - 1];
",6,3,1,4,8,0,0,0,0,20,46,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,872,"                        sa = sa + matrixT[i][j] * matrixT[j][idx];
",4,2,1,4,8,0,0,0,0,19,42,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,874,"                    double w = matrixT[i][i] - p;
",4,1,1,2,4,0,0,0,0,11,29,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,876,"                    if (Precision.compareTo(imagEigenvalues[i], 0.0, EPSILON) < 0.0) {
",0,1,1,3,7,0,6,0,0,11,66,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,877,"                        z = w;
",4,0,0,0,0,0,0,0,0,5,6,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,878,"                        r = ra;
",4,0,0,0,0,0,0,0,0,5,7,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,879,"                        s = sa;
",4,0,0,0,0,0,0,0,0,5,7,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,881,"                        l = i;
",4,0,0,0,0,0,0,0,0,5,6,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,882,"                        if (Precision.equals(imagEigenvalues[i], 0.0)) {
",0,0,1,3,7,0,4,0,0,8,48,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,883,"                            final Complex c = cdiv(-ra, -sa, w, q);
",6,0,0,1,2,1,6,2,0,17,39,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,884,"                            matrixT[i][idx - 1] = c.getReal();
",2,1,1,3,6,0,4,0,0,12,34,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,885,"                            matrixT[i][idx] = c.getImaginary();
",0,0,1,3,6,0,4,0,0,11,35,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,886,"                        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,888,"                            double x = matrixT[i][i + 1];
",4,1,1,2,4,0,0,0,0,9,29,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,889,"                            double y = matrixT[i + 1][i];
",4,1,1,2,4,0,0,0,0,9,29,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,890,"                            double vr = (realEigenvalues[i] - p) * (realEigenvalues[i] - p) +
",6,5,1,4,8,0,0,0,0,19,65,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,892,"                            final double vi = (realEigenvalues[i] - p) * 2.0 * q;
",6,2,1,2,4,1,0,0,0,13,53,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,893,"                            if (Precision.equals(vr, 0.0) && Precision.equals(vi, 0.0)) {
",0,1,0,3,7,0,12,0,0,13,61,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,894,"                                vr = Precision.EPSILON * norm *
",8,1,0,0,0,0,0,0,0,10,31,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,898,"                            final Complex c     = cdiv(x * r - z * ra + q * sa,
",14,5,0,0,1,1,2,2,0,24,51,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,900,"                            matrixT[i][idx - 1] = c.getReal();
",2,1,1,3,6,0,4,0,0,12,34,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,901,"                            matrixT[i][idx]     = c.getImaginary();
",0,0,1,3,6,0,4,0,0,11,39,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,903,"                            if (FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs(q))) {
",0,2,0,5,11,0,18,0,0,20,60,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,904,"                                matrixT[i + 1][idx - 1] = (-ra - w * matrixT[i][idx - 1] +
",10,6,1,4,9,0,0,0,0,24,58,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,906,"                                matrixT[i + 1][idx]     = (-sa - w * matrixT[i][idx] -
",6,4,1,4,9,0,0,0,0,22,54,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,909,"                                final Complex c2        = cdiv(-r - y * matrixT[i][idx - 1],
",8,3,1,2,5,1,2,2,0,21,60,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,911,"                                matrixT[i + 1][idx - 1] = c2.getReal();
",4,2,1,3,6,0,4,0,0,13,39,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,912,"                                matrixT[i + 1][idx]     = c2.getImaginary();
",2,1,1,3,6,0,4,0,0,12,44,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,917,"                        double t = FastMath.max(FastMath.abs(matrixT[i][idx - 1]),
",4,1,1,3,7,0,8,0,0,17,58,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,919,"                        if ((Precision.EPSILON * t) * t > 1) {
",8,3,0,2,5,0,0,0,0,11,38,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,920,"                            for (int j = i; j <= idx; j++) {
",10,1,0,1,3,0,0,0,0,12,32,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,921,"                                matrixT[j][idx - 1] = matrixT[j][idx - 1] / t;
",6,3,1,4,8,0,0,0,0,18,46,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,922,"                                matrixT[j][idx]     = matrixT[j][idx] / t;
",2,1,1,4,8,0,0,0,0,16,42,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,931,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,932,"            if (i < 0 | i > n - 1) {
",6,4,0,1,3,0,0,0,0,10,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,933,"                for (int j = i; j < n; j++) {
",10,1,0,1,3,0,0,0,0,12,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,934,"                    matrixP[i][j] = matrixT[i][j];
",0,0,1,4,8,0,0,0,0,13,30,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,940,"        for (int j = n - 1; j >= 0; j--) {
",8,2,0,1,3,0,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,941,"            for (int i = 0; i <= n - 1; i++) {
",8,2,0,1,3,0,0,0,0,11,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,942,"                z = 0.0;
",2,0,0,0,0,0,0,0,0,3,8,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,943,"                for (int k = 0; k <= FastMath.min(j, n - 1); k++) {
",8,2,0,2,5,0,6,0,0,17,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,944,"                    z = z + matrixP[i][k] * matrixT[k][j];
",4,2,1,4,8,0,0,0,0,19,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,946,"                matrixP[i][j] = z;
",2,0,1,2,4,0,0,0,0,9,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,950,"        eigenvectors = new ArrayRealVector[n];
",2,0,1,1,2,0,0,2,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,951,"        final double[] tmp = new double[n];
",2,0,1,2,4,1,0,0,0,5,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,952,"        for (int i = 0; i < n; i++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,953,"            for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,954,"                tmp[j] = matrixP[j][i];
",0,0,1,3,6,0,0,0,0,11,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,956,"            eigenvectors[i] = new ArrayRealVector(tmp);
",2,0,1,2,4,0,0,2,0,9,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,958,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,52,"    protected AbstractFieldMatrix() {
",2,0,0,1,3,1,0,0,0,3,33,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,53,"        field = null;
",2,0,0,0,0,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,60,"    protected AbstractFieldMatrix(final Field<T> field) {
",4,0,0,1,3,2,0,4,0,10,53,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,61,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,76,"        throws NotStrictlyPositiveException {
",2,0,0,0,1,0,0,0,0,2,37,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,77,"        if (rowDimension <= 0) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,78,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,
",4,0,0,0,1,0,0,2,0,6,66,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,81,"        if (columnDimension <= 0) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,82,"            throw new NotStrictlyPositiveException(LocalizedFormats.DIMENSION,
",4,0,0,0,1,0,0,2,0,6,66,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,85,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,86,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,99,"        if (d == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,100,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,102,"        if (d.length == 0) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,103,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,105,"        if (d[0].length == 0) {
",2,1,1,2,5,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,106,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,108,"        return d[0][0].getField();
",0,0,1,3,6,1,2,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,121,"        if (d.length == 0) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,122,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,124,"        return d[0].getField();
",0,0,1,2,4,1,2,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,143,"        return MathArrays.buildArray(field, rows, columns);
",0,0,0,1,2,1,10,0,0,10,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,159,"        return MathArrays.buildArray(field, length);
",0,0,0,1,2,1,8,0,0,8,44,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,164,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,179,"        checkAdditionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,181,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,182,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,183,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,4,0,13,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,184,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,185,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,186,"                out.setEntry(row, col, getEntry(row, col).add(m.getEntry(row, col)));
",0,0,0,4,8,0,24,0,0,24,69,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,190,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,197,"        checkSubtractionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,199,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,200,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,201,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,4,0,13,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,202,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,203,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,204,"                out.setEntry(row, col, getEntry(row, col).subtract(m.getEntry(row, col)));
",0,0,0,4,8,0,24,0,0,24,74,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,208,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,214,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,215,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,216,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,4,0,13,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,217,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,218,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,219,"                out.setEntry(row, col, getEntry(row, col).add(d));
",0,0,0,3,6,0,18,0,0,18,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,223,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,228,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,229,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,230,"        final FieldMatrix<T> out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,4,0,13,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,231,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,232,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,233,"                out.setEntry(row, col, getEntry(row, col).multiply(d));
",0,0,0,3,6,0,18,0,0,18,55,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,237,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,244,"        checkMultiplicationCompatible(m);
",0,0,0,1,2,0,4,0,0,4,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,246,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,247,"        final int nCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,248,"        final int nSum  = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,249,"        final FieldMatrix<T> out = createMatrix(nRows, nCols);
",2,0,0,1,2,1,6,4,0,13,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,250,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,251,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,252,"                T sum = field.getZero();
",2,0,0,1,2,0,4,2,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,253,"                for (int i = 0; i < nSum; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,254,"                    sum = sum.add(getEntry(row, i).multiply(m.getEntry(i, col)));
",2,0,0,4,8,0,20,0,0,23,61,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,256,"                out.setEntry(row, col, sum);
",0,0,0,1,2,0,10,0,0,10,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,260,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,266,"        return m.multiply(this);
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,272,"        if (p < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,273,"            throw new NotPositiveException(p);
",2,0,0,1,2,0,0,2,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,276,"        if (!isSquare()) {
",0,0,0,2,5,0,2,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,277,"            throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());
",0,0,0,3,6,0,4,2,0,6,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,280,"        if (p == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,281,"            return MatrixUtils.createFieldIdentityMatrix(this.getField(), this.getRowDimension());
",0,0,0,3,6,1,8,0,0,8,86,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,284,"        if (p == 1) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,285,"            return this.copy();
",0,0,0,1,2,1,2,0,0,2,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,288,"        final int power = p - 1;
",4,1,0,0,0,1,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,297,"        final char[] binaryRepresentation = Integer.toBinaryString(power)
",2,0,0,2,4,1,6,0,0,9,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,299,"        final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();
",2,0,0,1,2,1,0,8,0,11,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,301,"        for (int i = 0; i < binaryRepresentation.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,302,"            if (binaryRepresentation[i] == '1') {
",0,1,1,2,5,0,0,0,0,6,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,303,"                final int pos = binaryRepresentation.length - i - 1;
",8,1,0,0,0,1,0,0,0,10,52,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,304,"                nonZeroPositions.add(pos);
",0,0,0,1,2,0,6,0,0,6,26,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,308,"        ArrayList<FieldMatrix<T>> results = new ArrayList<FieldMatrix<T>>(
",2,0,0,0,1,0,0,12,0,14,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,311,"        results.add(0, this.copy());
",0,0,0,2,4,0,6,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,313,"        for (int i = 1; i < binaryRepresentation.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,314,"            final FieldMatrix<T> s = results.get(i - 1);
",4,1,0,1,2,1,4,4,0,14,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,315,"            final FieldMatrix<T> r = s.multiply(s);
",2,0,0,1,2,1,6,4,0,13,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,316,"            results.add(i, r);
",0,0,0,1,2,0,8,0,0,8,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,319,"        FieldMatrix<T> result = this.copy();
",2,0,0,1,2,0,2,4,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,321,"        for (Integer i : nonZeroPositions) {
",4,0,0,1,3,0,0,2,0,6,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,322,"            result = result.multiply(results.get(i));
",2,0,0,2,4,0,10,0,0,13,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,323,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,325,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,330,"        final T[][] data = MathArrays.buildArray(field, getRowDimension(), getColumnDimension());
",2,0,0,5,10,1,10,2,0,15,89,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,332,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,333,"            final T[] dataI = data[i];
",2,0,1,2,4,1,0,2,0,9,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,334,"            for (int j = 0; j < dataI.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,335,"                dataI[j] = getEntry(i, j);
",0,0,1,2,4,0,6,0,0,11,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,339,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,346,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,348,"        final FieldMatrix<T> subMatrix =
",2,0,0,0,0,1,0,4,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,350,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,351,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,352,"                subMatrix.setEntry(i - startRow, j - startColumn, getEntry(i, j));
",8,2,0,2,4,0,10,0,0,20,66,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,356,"        return subMatrix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,366,"        checkSubMatrixIndex(selectedRows, selectedColumns);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,369,"        final FieldMatrix<T> subMatrix =
",2,0,0,0,0,1,0,4,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,371,"        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,8,4,0,12,90,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,381,"        return subMatrix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,392,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,393,"        final int rowsCount    = endRow + 1 - startRow;
",6,2,0,0,0,1,0,0,0,9,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,394,"        final int columnsCount = endColumn + 1 - startColumn;
",6,2,0,0,0,1,0,0,0,9,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,395,"        if ((destination.length < rowsCount) || (destination[0].length < columnsCount)) {
",10,3,1,4,9,0,0,0,0,15,81,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,396,"            throw new MatrixDimensionMismatchException(destination.length,
",4,0,0,0,1,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,403,"        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,6,4,0,10,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,428,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,435,"        checkSubMatrixIndex(selectedRows, selectedColumns);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,436,"        if ((destination.length < selectedRows.length) ||
",8,2,0,1,3,0,0,0,0,10,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,438,"            throw new MatrixDimensionMismatchException(destination.length,
",4,0,0,0,1,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,445,"        for (int i = 0; i < selectedRows.length; i++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,446,"            final T[] destinationI = destination[i];
",2,0,1,2,4,1,0,2,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,447,"            for (int j = 0; j < selectedColumns.length; j++) {
",10,1,0,1,3,0,0,0,0,12,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,448,"                destinationI[j] = getEntry(selectedRows[i], selectedColumns[j]);
",0,0,1,4,8,0,2,0,0,15,64,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,452,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,459,"        if (subMatrix == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,460,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,462,"        final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,463,"        if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,464,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,467,"        final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,468,"        if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,469,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,472,"        for (int r = 1; r < nRows; ++r) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,473,"            if (subMatrix[r].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,474,"                throw new DimensionMismatchException(nCols, subMatrix[r].length);
",4,0,1,2,4,0,0,2,0,10,65,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,478,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,479,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,480,"        checkRowIndex(nRows + row - 1);
",4,2,0,1,2,0,2,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,481,"        checkColumnIndex(nCols + column - 1);
",4,2,0,1,2,0,2,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,483,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,484,"            for (int j = 0; j < nCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,485,"                setEntry(row + i, column + j, subMatrix[i][j]);
",8,2,1,3,6,0,2,0,0,18,47,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,488,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,492,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,493,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,494,"        final FieldMatrix<T> out = createMatrix(1, nCols);
",2,0,0,1,2,1,4,4,0,11,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,495,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,496,"            out.setEntry(0, i, getEntry(row, i));
",0,0,0,2,4,0,12,0,0,12,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,499,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,506,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,507,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,508,"        if ((matrix.getRowDimension() != 1) ||
",0,2,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,510,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,514,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,515,"            setEntry(row, i, matrix.getEntry(0, i));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,518,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,524,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,525,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,526,"        final FieldMatrix<T> out = createMatrix(nRows, 1);
",2,0,0,1,2,1,4,4,0,11,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,527,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,528,"            out.setEntry(i, 0, getEntry(i, column));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,531,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,538,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,539,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,540,"        if ((matrix.getRowDimension() != nRows) ||
",2,2,0,2,5,0,4,0,0,8,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,542,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,546,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,547,"            setEntry(i, column, matrix.getEntry(i, 0));
",0,0,0,2,4,0,12,0,0,12,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,550,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,555,"        return new ArrayFieldVector<T>(field, getRow(row), false);
",2,0,0,2,4,1,4,4,0,11,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,561,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,562,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,563,"        if (vector.getDimension() != nCols) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,564,"            throw new MatrixDimensionMismatchException(1, vector.getDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,567,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,568,"            setEntry(row, i, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,571,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,576,"        return new ArrayFieldVector<T>(field, getColumn(column), false);
",2,0,0,2,4,1,4,4,0,11,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,583,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,584,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,585,"        if (vector.getDimension() != nRows) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,586,"            throw new MatrixDimensionMismatchException(vector.getDimension(), 1,
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,589,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,590,"            setEntry(i, column, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,593,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,597,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,598,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,599,"        final T[] out = MathArrays.buildArray(field, nCols);
",2,0,0,2,4,1,8,2,0,13,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,600,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,601,"            out[i] = getEntry(row, i);
",0,0,1,2,4,0,6,0,0,11,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,604,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,611,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,612,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,613,"        if (array.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,614,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,616,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,617,"            setEntry(row, i, array[i]);
",0,0,1,2,4,0,6,0,0,10,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,620,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,624,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,625,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,626,"        final T[] out = MathArrays.buildArray(field, nRows);
",2,0,0,2,4,1,8,2,0,13,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,627,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,628,"            out[i] = getEntry(i, column);
",0,0,1,2,4,0,6,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,631,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,638,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,639,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,640,"        if (array.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,641,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,643,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,644,"            setEntry(i, column, array[i]);
",0,0,1,2,4,0,6,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,646,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,662,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,663,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,664,"        final FieldMatrix<T> out = createMatrix(nCols, nRows);
",2,0,0,1,2,1,6,4,0,13,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,665,"        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,6,4,0,10,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,673,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,678,"        return getColumnDimension() == getRowDimension();
",0,1,0,2,4,1,4,0,0,5,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,689,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,690,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,691,"        if (nRows != nCols) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,692,"            throw new NonSquareMatrixException(nRows, nCols);
",4,0,0,1,2,0,0,2,0,6,49,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,694,"        T trace = field.getZero();
",2,0,0,1,2,0,4,2,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,695,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,696,"            trace = trace.add(getEntry(i, i));
",2,0,0,2,4,0,10,0,0,13,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,698,"        return trace;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,704,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,705,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,706,"        if (v.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,707,"            throw new DimensionMismatchException(v.length, nCols);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,710,"        final T[] out = MathArrays.buildArray(field, nRows);
",2,0,0,2,4,1,8,2,0,13,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,711,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,712,"            T sum = field.getZero();
",2,0,0,1,2,0,4,2,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,713,"            for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,714,"                sum = sum.add(getEntry(row, i).multiply(v[i]));
",2,0,1,4,8,0,12,0,0,19,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,716,"            out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,719,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,726,"            return new ArrayFieldVector<T>(field, operate(((ArrayFieldVector<T>) v).getDataRef()), false);
",4,0,0,5,10,1,4,8,0,17,94,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,727,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,728,"            final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,729,"            final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,730,"            if (v.getDimension() != nCols) {
",2,1,0,2,5,0,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,731,"                throw new DimensionMismatchException(v.getDimension(), nCols);
",2,0,0,2,4,0,4,2,0,8,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,734,"            final T[] out = MathArrays.buildArray(field, nRows);
",2,0,0,2,4,1,8,2,0,13,52,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,735,"            for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,736,"                T sum = field.getZero();
",2,0,0,1,2,0,4,2,0,8,24,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,737,"                for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,738,"                    sum = sum.add(getEntry(row, i).multiply(v.getEntry(i)));
",2,0,0,4,8,0,18,0,0,21,56,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,740,"                out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,743,"            return new ArrayFieldVector<T>(field, out, false);
",4,0,0,1,2,1,0,4,0,9,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,750,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,751,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,752,"        if (v.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,753,"            throw new DimensionMismatchException(v.length, nRows);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,756,"        final T[] out = MathArrays.buildArray(field, nCols);
",2,0,0,2,4,1,8,2,0,13,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,757,"        for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,758,"            T sum = field.getZero();
",2,0,0,1,2,0,4,2,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,759,"            for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,760,"                sum = sum.add(getEntry(i, col).multiply(v[i]));
",2,0,1,4,8,0,12,0,0,19,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,762,"            out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,765,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,772,"            return new ArrayFieldVector<T>(field, preMultiply(((ArrayFieldVector<T>) v).getDataRef()), false);
",4,0,0,5,10,1,4,8,0,17,98,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,773,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,774,"            final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,775,"            final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,776,"            if (v.getDimension() != nRows) {
",2,1,0,2,5,0,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,777,"                throw new DimensionMismatchException(v.getDimension(), nRows);
",2,0,0,2,4,0,4,2,0,8,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,780,"            final T[] out = MathArrays.buildArray(field, nCols);
",2,0,0,2,4,1,8,2,0,13,52,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,781,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,782,"                T sum = field.getZero();
",2,0,0,1,2,0,4,2,0,8,24,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,783,"                for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,784,"                    sum = sum.add(getEntry(i, col).multiply(v.getEntry(i)));
",2,0,0,4,8,0,18,0,0,21,56,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,786,"                out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,789,"            return new ArrayFieldVector<T>(field, out, false);
",4,0,0,1,2,1,0,4,0,9,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,795,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,796,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,797,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,798,"        for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,799,"            for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,800,"                final T oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,2,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,801,"                final T newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,2,0,15,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,802,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,805,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,810,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,811,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,812,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,813,"        for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,814,"            for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,815,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,818,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,826,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,827,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,829,"        for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,830,"            for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,831,"                final T oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,2,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,832,"                final T newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,2,0,15,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,833,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,836,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,844,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,845,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,847,"        for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,848,"            for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,849,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,852,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,857,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,858,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,859,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,860,"        for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,861,"            for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,862,"                final T oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,2,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,863,"                final T newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,2,0,15,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,864,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,867,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,872,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,873,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,874,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,875,"        for (int column = 0; column < columns; ++column) {
",8,1,0,1,3,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,876,"            for (int row = 0; row < rows; ++row) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,877,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,880,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,888,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,889,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,891,"        for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,892,"            for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,893,"                final T oldValue = getEntry(row, column);
",2,0,0,1,2,1,6,2,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,894,"                final T newValue = visitor.visit(row, column, oldValue);
",2,0,0,1,2,1,10,2,0,15,56,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,895,"                setEntry(row, column, newValue);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,898,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,906,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,907,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,909,"        for (int column = startColumn; column <= endColumn; ++column) {
",10,1,0,1,3,0,0,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,910,"            for (int row = startRow; row <= endRow; ++row) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,911,"                visitor.visit(row, column, getEntry(row, column));
",0,0,0,2,4,0,14,0,0,14,50,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,914,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,919,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,924,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,932,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,940,"        return walkInRowOrder(visitor, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,949,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,950,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,951,"        final StringBuffer res = new StringBuffer();
",2,0,0,1,2,1,0,4,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,952,"        String fullClassName = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,953,"        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);
",2,1,0,2,4,0,8,2,0,14,84,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,954,"        res.append(shortClassName).append(""{"");
",0,0,0,2,5,0,8,0,0,9,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,956,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,957,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,958,"                res.append("","");
",0,0,0,1,2,0,4,0,0,5,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,960,"            res.append(""{"");
",0,0,0,1,3,0,4,0,0,5,16,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,961,"            for (int j = 0; j < nCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,962,"                if (j > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,963,"                    res.append("","");
",0,0,0,1,2,0,4,0,0,5,16,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,965,"                res.append(getEntry(i, j));
",0,0,0,2,4,0,10,0,0,10,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,967,"            res.append(""}"");
",0,0,0,1,3,0,4,0,0,5,16,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,970,"        res.append(""}"");
",0,0,0,1,3,0,4,0,0,5,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,971,"        return res.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,984,"        if (object == this ) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,985,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,987,"        if (object instanceof FieldMatrix<?> == false) {
",2,1,0,1,3,0,0,2,0,6,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,988,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,990,"        FieldMatrix<?> m = (FieldMatrix<?>) object;
",4,0,0,1,2,0,0,4,0,8,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,991,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,992,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,993,"        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
",4,3,0,3,7,0,8,0,0,15,70,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,994,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,996,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,997,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,998,"                if (!getEntry(row, col).equals(m.getEntry(row, col))) {
",0,0,0,4,9,0,16,0,0,17,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,999,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1003,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1013,"        int ret = 322562;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1014,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1015,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1016,"        ret = ret * 31 + nRows;
",6,2,0,0,0,0,0,0,0,9,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1017,"        ret = ret * 31 + nCols;
",6,2,0,0,0,0,0,0,0,9,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1018,"        for (int row = 0; row < nRows; ++row) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1019,"            for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1020,"               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * getEntry(row, col).hashCode();
",8,8,0,5,10,0,8,0,0,25,79,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1023,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1033,"        if (row < 0 || row >= getRowDimension()) {
",4,3,0,2,5,0,2,0,0,9,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1034,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,
",4,0,0,0,1,0,0,2,0,6,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1037,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1047,"        if (column < 0 || column >= getColumnDimension()) {
",4,3,0,2,5,0,2,0,0,9,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1048,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,
",4,0,0,0,1,0,0,2,0,6,60,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1051,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1068,"        checkRowIndex(startRow);
",0,0,0,1,2,0,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1069,"        checkRowIndex(endRow);
",0,0,0,1,2,0,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1070,"        if (endRow < startRow) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1071,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,
",4,0,0,0,1,0,0,2,0,6,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1075,"        checkColumnIndex(startColumn);
",0,0,0,1,2,0,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1076,"        checkColumnIndex(endColumn);
",0,0,0,1,2,0,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1077,"        if (endColumn < startColumn) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1078,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,
",4,0,0,0,1,0,0,2,0,6,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1081,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1095,"        if (selectedRows == null ||
",2,2,0,0,1,0,0,0,0,4,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1097,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1099,"        if (selectedRows.length == 0 ||
",4,2,0,0,1,0,0,0,0,6,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1101,"            throw new NoDataException();
",0,0,0,1,2,0,0,2,0,2,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1104,"        for (final int row : selectedRows) {
",4,0,0,1,3,1,0,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1105,"            checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1107,"        for (final int column : selectedColumns) {
",4,0,0,1,3,1,0,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1108,"            checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1110,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1121,"        if ((getRowDimension() != m.getRowDimension()) ||
",0,2,0,3,7,0,6,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1123,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),
",0,0,0,2,5,0,8,2,0,10,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1126,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1137,"        if ((getRowDimension() != m.getRowDimension()) ||
",0,2,0,3,7,0,6,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1139,"            throw new MatrixDimensionMismatchException(m.getRowDimension(), m.getColumnDimension(),
",0,0,0,2,5,0,8,2,0,10,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1142,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1153,"        if (getColumnDimension() != m.getRowDimension()) {
",0,1,0,3,7,0,6,0,0,7,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1154,"            throw new DimensionMismatchException(m.getRowDimension(), getColumnDimension());
",0,0,0,3,6,0,6,2,0,8,80,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,1156,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,88,"            throw new NonSquareMatrixException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,60,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,111,"                final double[] luRow = lu[row];
",2,0,1,2,4,1,0,0,0,7,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,112,"                double sum = luRow[col];
",2,0,1,1,2,0,0,0,0,6,24,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,113,"                for (int i = 0; i < row; i++) {
",8,1,0,1,3,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,114,"                    sum -= luRow[i] * lu[i][col];
",2,1,1,3,6,0,0,0,0,14,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,116,"                luRow[col] = sum;
",2,0,1,1,2,0,0,0,0,7,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,126,"                    sum -= luRow[i] * lu[i][col];
",2,1,1,3,6,0,0,0,0,14,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,139,"                singular = true;
",2,0,0,0,0,0,0,0,0,4,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,140,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,145,"                double tmp = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,146,"                final double[] luMax = lu[max];
",2,0,1,2,4,1,0,0,0,7,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,147,"                final double[] luCol = lu[col];
",2,0,1,2,4,1,0,0,0,7,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,148,"                for (int i = 0; i < m; i++) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,149,"                    tmp = luMax[i];
",2,0,1,1,2,0,0,0,0,7,15,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,150,"                    luMax[i] = luCol[i];
",0,0,1,2,4,0,0,0,0,9,20,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,151,"                    luCol[i] = tmp;
",2,0,1,1,2,0,0,0,0,7,15,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,153,"                int temp = pivot[max];
",2,0,1,1,2,0,0,0,0,6,22,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,154,"                pivot[max] = pivot[col];
",0,0,1,2,4,0,0,0,0,9,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,155,"                pivot[col] = temp;
",2,0,1,1,2,0,0,0,0,7,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,156,"                even = !even;
",4,0,0,0,0,0,0,0,0,6,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,162,"                lu[row][col] /= luDiag;
",2,0,1,2,4,0,0,0,0,9,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,173,"        if ((cachedL == null) && !singular) {
",4,2,0,2,5,0,0,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,174,"            final int m = pivot.length;
",6,0,0,0,0,1,0,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,175,"            cachedL = MatrixUtils.createRealMatrix(m, m);
",2,0,0,1,2,0,8,0,0,11,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,176,"            for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,177,"                final double[] luI = lu[i];
",2,0,1,2,4,1,0,0,0,7,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,178,"                for (int j = 0; j < i; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,179,"                    cachedL.setEntry(i, j, luI[j]);
",0,0,1,2,4,0,8,0,0,12,31,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,181,"                cachedL.setEntry(i, i, 1.0);
",0,0,0,1,2,0,8,0,0,8,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,184,"        return cachedL;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,193,"        if ((cachedU == null) && !singular) {
",4,2,0,2,5,0,0,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,194,"            final int m = pivot.length;
",6,0,0,0,0,1,0,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,195,"            cachedU = MatrixUtils.createRealMatrix(m, m);
",2,0,0,1,2,0,8,0,0,11,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,196,"            for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,197,"                final double[] luI = lu[i];
",2,0,1,2,4,1,0,0,0,7,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,198,"                for (int j = i; j < m; ++j) {
",10,1,0,1,3,0,0,0,0,12,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,199,"                    cachedU.setEntry(i, j, luI[j]);
",0,0,1,2,4,0,8,0,0,12,31,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,203,"        return cachedU;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,216,"        if ((cachedP == null) && !singular) {
",4,2,0,2,5,0,0,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,217,"            final int m = pivot.length;
",6,0,0,0,0,1,0,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,218,"            cachedP = MatrixUtils.createRealMatrix(m, m);
",2,0,0,1,2,0,8,0,0,11,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,219,"            for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,220,"                cachedP.setEntry(i, pivot[i], 1.0);
",0,0,1,2,4,0,6,0,0,10,35,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,223,"        return cachedP;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,232,"        return pivot.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,240,"        if (singular) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,241,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,243,"            final int m = pivot.length;
",6,0,0,0,0,1,0,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,244,"            double determinant = even ? 1 : -1;
",4,0,0,0,0,0,0,0,0,5,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,245,"            for (int i = 0; i < m; i++) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,246,"                determinant *= lu[i][i];
",2,0,1,2,4,0,0,0,0,9,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,248,"            return determinant;
",2,0,0,0,0,1,0,0,0,2,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,356,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,369,"                this.startRow    = startRow;
",4,0,0,0,0,0,0,0,0,5,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,370,"                this.startColumn = startColumn;
",4,0,0,0,0,0,0,0,0,5,31,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,371,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,376,"                destination[row - startRow][column - startColumn] = value;
",10,2,1,2,4,0,0,0,0,15,58,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,377,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,403,"        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,6,4,0,10,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,416,"                this.startRow    = startRow;
",4,0,0,0,0,0,0,0,0,5,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,417,"                this.startColumn = startColumn;
",4,0,0,0,0,0,0,0,0,5,31,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,418,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,423,"                destination[row - startRow][column - startColumn] = value;
",10,2,1,2,4,0,0,0,0,15,58,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,424,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1303,"                return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1305,"                    private final UnmodifiableEntry e = new UnmodifiableEntry();
",2,0,0,1,2,2,0,4,0,8,60,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1309,"                        return i.hasNext();
",0,0,0,1,2,1,4,0,0,4,19,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1314,"                        e.setIndex(i.next().getIndex());
",0,0,0,3,6,0,10,0,0,10,32,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1315,"                        return e;
",2,0,0,0,0,1,0,0,0,2,9,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1326,"                        throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1630,"            class UnmodifiableEntry extends Entry {
",2,0,0,0,1,0,0,2,0,4,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1634,"                    return v.getEntry(getIndex());
",0,0,0,2,4,1,6,0,0,6,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1646,"                    throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,242,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,257,"                this.endRow = endRow;
",4,0,0,0,0,0,0,0,0,5,21,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,258,"                columnSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,259,"                maxColSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,260,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,264,"                columnSum += FastMath.abs(value);
",2,0,0,1,2,0,6,0,0,9,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,265,"                if (row == endRow) {
",4,1,0,1,3,0,0,0,0,5,20,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,266,"                    maxColSum = FastMath.max(maxColSum, columnSum);
",2,0,0,1,2,0,8,0,0,11,47,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,267,"                    columnSum = 0;
",2,0,0,0,0,0,0,0,0,3,14,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,269,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,273,"                return maxColSum;
",2,0,0,0,0,1,0,0,0,2,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,674,"            super(BigFraction.ZERO);
",4,0,0,1,2,0,0,0,0,4,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,675,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,681,"            data = new double[rows][columns];
",2,0,1,2,4,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,682,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,687,"            data[row][column] = value.doubleValue();
",0,0,1,3,6,0,4,0,0,11,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,688,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,696,"            return new Array2DRowRealMatrix(data, false);
",2,0,0,1,2,1,0,2,0,5,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,669,"    private static class BigFractionMatrixConverter extends DefaultFieldMatrixPreservingVisitor<BigFraction> {
",2,0,0,0,1,2,0,4,0,8,106,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,90,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,
",8,0,0,0,1,0,0,0,0,8,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,92,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,151,"        return NumberFormat.getAvailableLocales();
",0,0,0,1,2,1,4,0,0,4,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,159,"        return prefix;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,167,"        return suffix;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,175,"        return rowPrefix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,183,"        return rowSuffix;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,191,"        return rowSeparator;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,199,"        return columnSeparator;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,234,"        return format(m, new StringBuffer(), new FieldPosition(0)).toString();
",0,0,0,4,8,1,6,4,0,10,70,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,248,"        pos.setBeginIndex(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,249,"        pos.setEndIndex(0);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,252,"        toAppendTo.append(prefix);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,255,"        final int rows = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,256,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,257,"            toAppendTo.append(rowPrefix);
",0,0,0,1,2,0,6,0,0,6,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,258,"            for (int j = 0; j < matrix.getColumnDimension(); ++j) {
",6,1,0,2,5,0,4,0,0,12,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,259,"                if (j > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,260,"                    toAppendTo.append(columnSeparator);
",0,0,0,1,2,0,6,0,0,6,35,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,262,"                CompositeFormat.formatDouble(matrix.getEntry(i, j), format, toAppendTo, pos);
",0,0,0,2,4,0,18,0,0,18,77,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,264,"            toAppendTo.append(rowSuffix);
",0,0,0,1,2,0,6,0,0,6,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,265,"            if (i < rows - 1) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,266,"                toAppendTo.append(rowSeparator);
",0,0,0,1,2,0,6,0,0,6,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,271,"        toAppendTo.append(suffix);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,273,"        return toAppendTo;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,285,"        final ParsePosition parsePosition = new ParsePosition(0);
",2,0,0,1,2,1,0,4,0,7,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,286,"        final RealMatrix result = parse(source, parsePosition);
",2,0,0,1,2,1,6,2,0,11,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,287,"        if (parsePosition.getIndex() == 0) {
",0,1,0,2,5,0,4,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,288,"            throw new MathParseException(source,
",2,0,0,0,1,0,0,2,0,4,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,292,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,303,"        int initialIndex = pos.getIndex();
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,305,"        final String trimmedPrefix = prefix.trim();
",2,0,0,1,2,1,4,2,0,9,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,306,"        final String trimmedSuffix = suffix.trim();
",2,0,0,1,2,1,4,2,0,9,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,307,"        final String trimmedRowPrefix = rowPrefix.trim();
",2,0,0,1,2,1,4,2,0,9,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,308,"        final String trimmedRowSuffix = rowSuffix.trim();
",2,0,0,1,2,1,4,2,0,9,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,309,"        final String trimmedColumnSeparator = columnSeparator.trim();
",2,0,0,1,2,1,4,2,0,9,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,310,"        final String trimmedRowSeparator = rowSeparator.trim();
",2,0,0,1,2,1,4,2,0,9,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,313,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,314,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {
",0,0,0,2,5,0,10,0,0,11,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,315,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,319,"        List<List<Number>> matrix = new ArrayList<List<Number>>();
",2,0,0,1,2,0,0,12,0,14,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,320,"        List<Number> rowComponents = new ArrayList<Number>();
",2,0,0,1,2,0,0,8,0,10,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,321,"        for (boolean loop = true; loop;){
",4,0,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,323,"            if (!rowComponents.isEmpty()) {
",0,0,0,2,5,0,4,0,0,5,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,324,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,325,"                if (!CompositeFormat.parseFixedstring(source, trimmedColumnSeparator, pos)) {
",0,0,0,2,5,0,10,0,0,11,77,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,326,"                    if (trimmedRowSuffix.length() != 0 &&
",0,2,0,1,3,0,4,0,0,6,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,328,"                        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,330,"                        CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,331,"                        if (CompositeFormat.parseFixedstring(source, trimmedRowSeparator, pos)) {
",0,0,0,2,5,0,10,0,0,10,73,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,332,"                            matrix.add(rowComponents);
",0,0,0,1,2,0,6,0,0,6,26,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,333,"                            rowComponents = new ArrayList<Number>();
",2,0,0,1,2,0,0,4,0,7,40,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,334,"                            continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,336,"                            loop = false;
",2,0,0,0,0,0,0,0,0,4,13,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,341,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,342,"                if (trimmedRowPrefix.length() != 0 &&
",0,2,0,1,3,0,4,0,0,6,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,344,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,348,"            if (loop) {
",2,0,0,1,3,0,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,349,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,350,"                Number component = CompositeFormat.parseNumber(source, format, pos);
",2,0,0,1,2,0,10,2,0,14,68,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,351,"                if (component != null) {
",2,1,0,1,3,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,352,"                    rowComponents.add(component);
",0,0,0,1,2,0,6,0,0,6,29,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,354,"                    if (rowComponents.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,355,"                        loop = false;
",2,0,0,0,0,0,0,0,0,4,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,359,"                        pos.setIndex(initialIndex);
",0,0,0,1,2,0,6,0,0,6,27,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,360,"                        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,363,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,367,"        if (!rowComponents.isEmpty()) {
",0,0,0,2,5,0,4,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,368,"            matrix.add(rowComponents);
",0,0,0,1,2,0,6,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,372,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,373,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {
",0,0,0,2,5,0,10,0,0,11,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,374,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,378,"        if (matrix.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,379,"            pos.setIndex(initialIndex);
",0,0,0,1,2,0,6,0,0,6,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,380,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,384,"        double[][] data = new double[matrix.size()][];
",2,0,0,5,10,0,4,0,0,6,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,385,"        int row = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,386,"        for (List<Number> rowList : matrix) {
",4,0,0,1,3,0,0,4,0,8,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,387,"            data[row] = new double[rowList.size()];
",0,0,1,3,6,0,4,0,0,9,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,388,"            for (int i = 0; i < rowList.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,389,"                data[row][i] = rowList.get(i).doubleValue();
",0,0,1,4,8,0,8,0,0,15,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,391,"            row++;
",2,0,0,0,0,0,0,0,0,3,6,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,392,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,6,393,"        return MatrixUtils.createRealMatrix(data);
",0,0,0,1,2,1,6,0,0,6,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,6,42,"                              Class<?> type) {
",2,0,0,0,2,0,0,2,0,4,16,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,6,43,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE_AS_TYPE,
",4,0,0,1,3,0,4,0,0,8,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,6,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,6,53,"                              int position) {
",2,0,0,0,2,0,0,0,0,2,15,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,6,54,"        getContext().addMessage(LocalizedFormats.CANNOT_PARSE,
",4,0,0,1,3,0,4,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathParseException,6,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,59,"        super(field);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,73,"        super(field, rowDimension, columnDimension);
",6,0,0,1,2,0,0,0,0,6,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,74,"        data = MathArrays.buildArray(field, rowDimension, columnDimension);
",2,0,0,1,2,0,10,0,0,13,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,93,"        this(extractField(d), d);
",2,0,0,2,4,0,4,0,0,6,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,94,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,113,"        super(field);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,114,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,115,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,135,"        this(extractField(d), d, copyArray);
",4,0,0,2,4,0,4,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,136,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,156,"        super(field);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,157,"        if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,158,"            copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,160,"            MathUtils.checkNotNull(d);
",0,0,0,1,2,0,6,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,161,"            final int nRows = d.length;
",6,0,0,0,0,1,0,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,162,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,163,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,165,"            final int nCols = d[0].length;
",4,0,1,1,2,1,0,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,166,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,167,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,169,"            for (int r = 1; r < nRows; r++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,170,"                if (d[r].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,171,"                    throw new DimensionMismatchException(nCols, d[r].length);
",4,0,1,2,4,0,0,2,0,10,57,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,174,"            data = d;
",4,0,0,0,0,0,0,0,0,5,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,176,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,187,"        this(extractField(v), v);
",2,0,0,2,4,0,4,0,0,6,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,188,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,199,"        super(field);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,200,"        final int nRows = v.length;
",6,0,0,0,0,1,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,201,"        data = MathArrays.buildArray(getField(), nRows, 1);
",2,0,0,2,4,0,8,0,0,11,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,202,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,203,"            data[row][0] = v[row];
",0,0,1,3,6,0,0,0,0,9,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,205,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,212,"        return new Array2DRowFieldMatrix<T>(getField(), rowDimension, columnDimension);
",4,0,0,2,4,1,2,4,0,10,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,218,"        return new Array2DRowFieldMatrix<T>(getField(), copyOut(), false);
",0,0,0,3,6,1,4,4,0,9,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,232,"        checkAdditionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,234,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,235,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,236,"        final T[][] outData = MathArrays.buildArray(getField(), rowCount, columnCount);
",2,0,0,4,8,1,10,2,0,15,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,237,"        for (int row = 0; row < rowCount; row++) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,238,"            final T[] dataRow    = data[row];
",2,0,1,2,4,1,0,2,0,9,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,239,"            final T[] mRow       = m.data[row];
",6,0,1,2,4,1,0,2,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,240,"            final T[] outDataRow = outData[row];
",2,0,1,2,4,1,0,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,241,"            for (int col = 0; col < columnCount; col++) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,242,"                outDataRow[col] = dataRow[col].add(mRow[col]);
",0,0,1,4,8,0,2,0,0,15,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,246,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);
",2,0,0,2,4,1,2,4,0,9,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,260,"        checkSubtractionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,262,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,263,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,264,"        final T[][] outData = MathArrays.buildArray(getField(), rowCount, columnCount);
",2,0,0,4,8,1,10,2,0,15,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,265,"        for (int row = 0; row < rowCount; row++) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,266,"            final T[] dataRow    = data[row];
",2,0,1,2,4,1,0,2,0,9,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,267,"            final T[] mRow       = m.data[row];
",6,0,1,2,4,1,0,2,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,268,"            final T[] outDataRow = outData[row];
",2,0,1,2,4,1,0,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,269,"            for (int col = 0; col < columnCount; col++) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,270,"                outDataRow[col] = dataRow[col].subtract(mRow[col]);
",0,0,1,4,8,0,2,0,0,15,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,274,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);
",2,0,0,2,4,1,2,4,0,9,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,289,"        checkMultiplicationCompatible(m);
",0,0,0,1,2,0,4,0,0,4,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,291,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,292,"        final int nCols = m.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,293,"        final int nSum = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,294,"        final T[][] outData = MathArrays.buildArray(getField(), nRows, nCols);
",2,0,0,4,8,1,10,2,0,15,70,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,295,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,296,"            final T[] dataRow    = data[row];
",2,0,1,2,4,1,0,2,0,9,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,297,"            final T[] outDataRow = outData[row];
",2,0,1,2,4,1,0,2,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,298,"            for (int col = 0; col < nCols; col++) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,299,"                T sum = getField().getZero();
",2,0,0,2,4,0,4,2,0,8,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,300,"                for (int i = 0; i < nSum; i++) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,301,"                    sum = sum.add(dataRow[i].multiply(m.data[i][col]));
",6,0,1,5,10,0,6,0,0,21,51,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,303,"                outDataRow[col] = sum;
",2,0,1,1,2,0,0,0,0,7,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,307,"        return new Array2DRowFieldMatrix<T>(getField(), outData, false);
",2,0,0,2,4,1,2,4,0,9,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,314,"        return copyOut();
",0,0,0,1,2,1,2,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,324,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,333,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,334,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,335,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET, row);
",6,0,0,1,2,0,0,2,0,8,90,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,337,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,338,"                throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET, column);
",6,0,0,1,2,0,0,2,0,8,96,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,340,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,341,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,342,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,345,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,346,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,347,"                throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,349,"            data = MathArrays.buildArray(getField(), subMatrix.length, nCols);
",6,0,0,2,4,0,8,0,0,15,66,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,350,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,351,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,352,"                    throw new DimensionMismatchException(nCols, subMatrix[i].length);
",4,0,1,2,4,0,0,2,0,10,65,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,354,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,356,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,357,"            super.setSubMatrix(subMatrix, row, column);
",8,0,0,1,2,0,0,0,0,8,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,360,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,366,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,367,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,369,"        return data[row][column];
",0,0,1,2,4,1,0,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,376,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,377,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,379,"        data[row][column] = value;
",2,0,1,2,4,0,0,0,0,9,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,380,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,386,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,387,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,389,"        data[row][column] = data[row][column].add(increment);
",0,0,1,5,10,0,4,0,0,17,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,390,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,396,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,397,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,399,"        data[row][column] = data[row][column].multiply(factor);
",0,0,1,5,10,0,4,0,0,17,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,400,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,405,"        return (data == null) ? 0 : data.length;
",6,1,0,1,2,1,0,0,0,7,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,411,"        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;
",4,3,1,5,10,1,0,0,0,11,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,417,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,418,"        final int nCols = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,419,"        if (v.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,420,"            throw new DimensionMismatchException(v.length, nCols);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,422,"        final T[] out = MathArrays.buildArray(getField(), nRows);
",2,0,0,3,6,1,8,2,0,13,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,423,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,424,"            final T[] dataRow = data[row];
",2,0,1,2,4,1,0,2,0,9,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,425,"            T sum = getField().getZero();
",2,0,0,2,4,0,4,2,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,426,"            for (int i = 0; i < nCols; i++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,427,"                sum = sum.add(dataRow[i].multiply(v[i]));
",2,0,1,4,8,0,6,0,0,17,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,429,"            out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,431,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,437,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,438,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,439,"        if (v.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,440,"            throw new DimensionMismatchException(v.length, nRows);
",6,0,0,1,2,0,0,2,0,8,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,443,"        final T[] out = MathArrays.buildArray(getField(), nCols);
",2,0,0,3,6,1,8,2,0,13,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,444,"        for (int col = 0; col < nCols; ++col) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,445,"            T sum = getField().getZero();
",2,0,0,2,4,0,4,2,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,446,"            for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,447,"                sum = sum.add(data[i][col].multiply(v[i]));
",2,0,1,5,10,0,6,0,0,19,43,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,449,"            out[col] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,452,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,458,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,459,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,460,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,461,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,462,"            final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,463,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,464,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,467,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,473,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,474,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,475,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,476,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,477,"            final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,478,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,479,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,482,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,491,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,492,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,494,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,495,"            final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,496,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,497,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,500,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,509,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,510,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,512,"        for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,513,"            final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,514,"            for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,515,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,518,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,524,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,525,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,526,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,527,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,528,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,529,"                final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,530,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,533,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,539,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,540,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,541,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,542,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,543,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,544,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,547,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,556,"    checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,557,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,559,"        for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,560,"            for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,561,"                final T[] rowI = data[i];
",2,0,1,2,4,1,0,2,0,9,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,562,"                rowI[j] = visitor.visit(i, j, rowI[j]);
",0,0,1,3,6,0,8,0,0,17,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,565,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,574,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,575,"        visitor.start(getRowDimension(), getColumnDimension(),
",0,0,0,2,5,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,577,"        for (int j = startColumn; j <= endColumn; ++j) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,578,"            for (int i = startRow; i <= endRow; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,579,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,582,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,591,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,592,"        final T[][] out = MathArrays.buildArray(getField(), nRows, getColumnDimension());
",2,0,0,5,10,1,10,2,0,15,81,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,594,"        for (int i = 0; i < nRows; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,595,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);
",2,0,1,4,8,0,4,0,0,18,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,597,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,611,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowFieldMatrix,6,612,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1271,"                return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1273,"                    private final UnmodifiableEntry e = new UnmodifiableEntry();
",2,0,0,1,2,2,0,4,0,8,60,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1277,"                        return i.hasNext();
",0,0,0,1,2,1,4,0,0,4,19,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1282,"                        e.setIndex(i.next().getIndex());
",0,0,0,3,6,0,10,0,0,10,32,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1283,"                        return e;
",2,0,0,0,0,1,0,0,0,2,9,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,1293,"                        throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,287,"            return !singular;
",2,0,0,0,0,1,0,0,0,3,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,294,"                throw new DimensionMismatchException(b.getDimension(), m);
",2,0,0,2,4,0,4,2,0,8,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,297,"                throw new SingularMatrixException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,311,"                    bp[i] -= bpCol * lu[i][col];
",2,1,1,3,6,0,0,0,0,14,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,320,"                    bp[i] -= bpCol * lu[i][col];
",2,1,1,3,6,0,0,0,0,14,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,330,"            final int m = pivot.length;
",6,0,0,0,0,1,0,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,331,"            if (b.getRowDimension() != m) {
",2,1,0,2,5,0,4,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,332,"                throw new DimensionMismatchException(b.getRowDimension(), m);
",2,0,0,2,4,0,4,2,0,8,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,334,"            if (singular) {
",2,0,0,1,3,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,335,"                throw new SingularMatrixException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,338,"            final int nColB = b.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,341,"            final double[][] bp = new double[m][nColB];
",2,0,1,4,8,1,0,0,0,7,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,342,"            for (int row = 0; row < m; row++) {
",8,1,0,1,3,0,0,0,0,10,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,343,"                final double[] bpRow = bp[row];
",2,0,1,2,4,1,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,344,"                final int pRow = pivot[row];
",2,0,1,1,2,1,0,0,0,7,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,345,"                for (int col = 0; col < nColB; col++) {
",8,1,0,1,3,0,0,0,0,10,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,346,"                    bpRow[col] = b.getEntry(pRow, col);
",0,0,1,2,4,0,8,0,0,13,35,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,351,"            for (int col = 0; col < m; col++) {
",8,1,0,1,3,0,0,0,0,10,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,352,"                final double[] bpCol = bp[col];
",2,0,1,2,4,1,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,353,"                for (int i = col + 1; i < m; i++) {
",10,2,0,1,3,0,0,0,0,13,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,354,"                    final double[] bpI = bp[i];
",2,0,1,2,4,1,0,0,0,7,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,355,"                    final double luICol = lu[i][col];
",2,0,1,2,4,1,0,0,0,9,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,356,"                    for (int j = 0; j < nColB; j++) {
",8,1,0,1,3,0,0,0,0,10,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,357,"                        bpI[j] -= bpCol[j] * luICol;
",2,1,1,2,4,0,0,0,0,12,28,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,363,"            for (int col = m - 1; col >= 0; col--) {
",8,2,0,1,3,0,0,0,0,11,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,364,"                final double[] bpCol = bp[col];
",2,0,1,2,4,1,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,365,"                final double luDiag = lu[col][col];
",2,0,1,2,4,1,0,0,0,9,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,366,"                for (int j = 0; j < nColB; j++) {
",8,1,0,1,3,0,0,0,0,10,33,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,367,"                    bpCol[j] /= luDiag;
",2,0,1,1,2,0,0,0,0,7,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,369,"                for (int i = 0; i < col; i++) {
",8,1,0,1,3,0,0,0,0,10,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,370,"                    final double[] bpI = bp[i];
",2,0,1,2,4,1,0,0,0,7,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,371,"                    final double luICol = lu[i][col];
",2,0,1,2,4,1,0,0,0,9,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,372,"                    for (int j = 0; j < nColB; j++) {
",8,1,0,1,3,0,0,0,0,10,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,373,"                        bpI[j] -= bpCol[j] * luICol;
",2,1,1,2,4,0,0,0,0,12,28,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,378,"            return new Array2DRowRealMatrix(bp, false);
",2,0,0,1,2,1,0,2,0,5,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/LUDecomposition,6,383,"            return solve(MatrixUtils.createRealIdentityMatrix(pivot.length));
",4,0,0,2,4,1,6,0,0,10,65,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,782,"        return new Iterator<Entry>() {
",0,0,0,1,3,1,0,4,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,785,"            private int i = 0;
",2,0,0,0,0,1,0,0,0,3,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,788,"            private Entry e = new Entry();
",2,0,0,1,2,1,0,4,0,7,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,792,"                return i < dim;
",4,1,0,0,0,1,0,0,0,5,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,797,"                if (i < dim) {
",4,1,0,1,3,0,0,0,0,5,14,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,798,"                    e.setIndex(i++);
",2,0,0,1,2,0,4,0,0,7,16,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,799,"                    return e;
",2,0,0,0,0,1,0,0,0,2,9,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,801,"                    throw new NoSuchElementException();
",0,0,0,1,2,0,0,2,0,2,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVector,6,811,"                throw new MathUnsupportedOperationException();
",0,0,0,1,2,0,0,2,0,2,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,329,"        subMatrix.walkInOptimizedOrder(new DefaultRealMatrixChangingVisitor() {
",0,0,0,1,4,0,4,2,0,6,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,6,334,"                return getEntry(selectedRows[row], selectedColumns[column]);
",0,0,1,3,6,1,2,0,0,10,60,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,371,"        subMatrix.walkInOptimizedOrder(new DefaultFieldMatrixChangingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,8,4,0,12,90,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,376,"                return getEntry(selectedRows[row], selectedColumns[column]);
",0,0,1,3,6,1,2,0,0,10,60,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,430,"                final ArrayRealVector[] eigenvectors) {
",2,0,0,1,4,1,0,2,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,431,"            this.realEigenvalues = realEigenvalues;
",4,0,0,0,0,0,0,0,0,5,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,432,"            this.imagEigenvalues = imagEigenvalues;
",4,0,0,0,0,0,0,0,0,5,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,433,"            this.eigenvectors = eigenvectors;
",4,0,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,434,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,413,"    private static class Solver implements DecompositionSolver {
",2,0,0,0,1,2,0,2,0,6,60,2,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,450,"            if (!isNonSingular()) {
",0,0,0,2,5,0,2,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,451,"                throw new SingularMatrixException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,454,"            final int m = realEigenvalues.length;
",6,0,0,0,0,1,0,0,0,7,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,455,"            if (b.getDimension() != m) {
",2,1,0,2,5,0,4,0,0,7,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,456,"                throw new DimensionMismatchException(b.getDimension(), m);
",2,0,0,2,4,0,4,2,0,8,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,459,"            final double[] bp = new double[m];
",2,0,1,2,4,1,0,0,0,5,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,460,"            for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,461,"                final ArrayRealVector v = eigenvectors[i];
",2,0,1,1,2,1,0,2,0,9,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,462,"                final double[] vData = v.getDataRef();
",2,0,0,2,4,1,4,0,0,7,38,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,463,"                final double s = v.dotProduct(b) / realEigenvalues[i];
",2,1,1,2,4,1,6,0,0,14,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,464,"                for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,465,"                    bp[j] += s * vData[j];
",2,1,1,2,4,0,0,0,0,12,22,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,469,"            return new ArrayRealVector(bp, false);
",2,0,0,1,2,1,0,2,0,5,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,475,"            if (!isNonSingular()) {
",0,0,0,2,5,0,2,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,476,"                throw new SingularMatrixException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,479,"            final int m = realEigenvalues.length;
",6,0,0,0,0,1,0,0,0,7,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,480,"            if (b.getRowDimension() != m) {
",2,1,0,2,5,0,4,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,481,"                throw new DimensionMismatchException(b.getRowDimension(), m);
",2,0,0,2,4,0,4,2,0,8,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,484,"            final int nColB = b.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,485,"            final double[][] bp = new double[m][nColB];
",2,0,1,4,8,1,0,0,0,7,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,486,"            final double[] tmpCol = new double[m];
",2,0,1,2,4,1,0,0,0,5,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,487,"            for (int k = 0; k < nColB; ++k) {
",8,1,0,1,3,0,0,0,0,10,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,488,"                for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,489,"                    tmpCol[i] = b.getEntry(i, k);
",0,0,1,2,4,0,8,0,0,13,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,490,"                    bp[i][k]  = 0;
",0,0,1,2,4,0,0,0,0,7,14,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,492,"                for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,493,"                    final ArrayRealVector v = eigenvectors[i];
",2,0,1,1,2,1,0,2,0,9,42,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,494,"                    final double[] vData = v.getDataRef();
",2,0,0,2,4,1,4,0,0,7,38,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,495,"                    double s = 0;
",2,0,0,0,0,0,0,0,0,2,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,496,"                    for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,497,"                        s += v.getEntry(j) * tmpCol[j];
",2,1,1,2,4,0,6,0,0,14,31,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,499,"                    s /= realEigenvalues[i];
",2,0,1,1,2,0,0,0,0,7,24,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,500,"                    for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,501,"                        bp[j][k] += s * vData[j];
",2,1,1,3,6,0,0,0,0,14,25,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,506,"            return new Array2DRowRealMatrix(bp, false);
",2,0,0,1,2,1,0,2,0,5,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,516,"            for (int i = 0; i < realEigenvalues.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,517,"                if (realEigenvalues[i] == 0 &&
",0,2,1,1,3,0,0,0,0,6,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,519,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,522,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,532,"            if (!isNonSingular()) {
",0,0,0,2,5,0,2,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,533,"                throw new SingularMatrixException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,536,"            final int m = realEigenvalues.length;
",6,0,0,0,0,1,0,0,0,7,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,537,"            final double[][] invData = new double[m][m];
",2,0,1,4,8,1,0,0,0,7,44,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,539,"            for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,540,"                final double[] invI = invData[i];
",2,0,1,2,4,1,0,0,0,7,33,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,541,"                for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,542,"                    double invIJ = 0;
",2,0,0,0,0,0,0,0,0,2,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,543,"                    for (int k = 0; k < m; ++k) {
",8,1,0,1,3,0,0,0,0,10,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,544,"                        final double[] vK = eigenvectors[k].getDataRef();
",2,0,1,3,6,1,2,0,0,9,49,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,545,"                        invIJ += vK[i] * vK[j] / realEigenvalues[k];
",2,2,1,3,6,0,0,0,0,17,44,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,547,"                    invI[j] = invIJ;
",2,0,1,1,2,0,0,0,0,7,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,6,550,"            return MatrixUtils.createRealMatrix(invData);
",0,0,0,1,2,1,6,0,0,6,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,64,"            throw new NonSquareMatrixException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,60,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,139,"        if (cachedT == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,140,"            final int m = main.length;
",6,0,0,0,0,1,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,141,"            double[][] ta = new double[m][m];
",2,0,1,4,8,0,0,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,142,"            for (int i = 0; i < m; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,143,"                ta[i][i] = main[i];
",0,0,1,3,6,0,0,0,0,11,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,144,"                if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,145,"                    ta[i][i - 1] = secondary[i - 1];
",4,2,1,3,6,0,0,0,0,13,32,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,147,"                if (i < main.length - 1) {
",6,2,0,1,3,0,0,0,0,8,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,148,"                    ta[i][i + 1] = secondary[i];
",2,1,1,3,6,0,0,0,0,12,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,151,"            cachedT = MatrixUtils.createRealMatrix(ta);
",2,0,0,1,2,0,6,0,0,9,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,155,"        return cachedT;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/TriDiagonalTransformer,6,165,"        return householderVectors;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,64,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,65,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,103,"        return (rows * columns <= 4096) ?
",4,2,0,1,2,1,0,0,0,6,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,132,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,159,"        if (data == null ||
",2,2,0,0,1,0,0,0,0,4,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,161,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,163,"        return (data.length * data[0].length <= 4096) ?
",6,2,1,2,4,1,0,0,0,10,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,176,"        final RealMatrix m = createRealMatrix(dimension, dimension);
",2,0,0,1,2,1,6,2,0,11,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,177,"        for (int i = 0; i < dimension; ++i) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,178,"            m.setEntry(i, i, 1.0);
",0,0,0,1,2,0,8,0,0,8,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,180,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,195,"        final T zero = field.getZero();
",2,0,0,1,2,1,4,2,0,9,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,196,"        final T one  = field.getOne();
",2,0,0,1,2,1,4,2,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,197,"        final T[][] d = MathArrays.buildArray(field, dimension, dimension);
",2,0,0,3,6,1,10,2,0,15,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,198,"        for (int row = 0; row < dimension; row++) {
",8,1,0,1,3,0,0,0,0,10,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,199,"            final T[] dRow = d[row];
",2,0,1,2,4,1,0,2,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,200,"            Arrays.fill(dRow, zero);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,201,"            dRow[row] = one;
",2,0,1,1,2,0,0,0,0,7,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,203,"        return new Array2DRowFieldMatrix<T>(field, d, false);
",4,0,0,1,2,1,0,4,0,9,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,233,"        final FieldMatrix<T> m =
",2,0,0,0,0,1,0,4,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,235,"        for (int i = 0; i < diagonal.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,236,"            m.setEntry(i, i, diagonal[i]);
",0,0,1,2,4,0,8,0,0,12,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,238,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,251,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,252,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,254,"        return new ArrayRealVector(data, true);
",2,0,0,1,2,1,0,2,0,5,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,269,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,270,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,272,"        if (data.length == 0) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,273,"            throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);
",4,0,0,1,2,0,0,2,0,6,80,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,275,"        return new ArrayFieldVector<T>(data[0].getField(), data, true);
",2,0,1,3,6,1,2,4,0,11,63,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,289,"        if (rowData == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,290,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,292,"        final int nCols = rowData.length;
",6,0,0,0,0,1,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,293,"        final RealMatrix m = createRealMatrix(1, nCols);
",2,0,0,1,2,1,4,2,0,9,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,294,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,295,"            m.setEntry(0, i, rowData[i]);
",0,0,1,2,4,0,6,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,297,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,313,"        if (rowData == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,314,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,316,"        final int nCols = rowData.length;
",6,0,0,0,0,1,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,317,"        if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,318,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,320,"        final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);
",2,0,1,3,6,1,6,4,0,15,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,321,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,322,"            m.setEntry(0, i, rowData[i]);
",0,0,1,2,4,0,6,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,324,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,339,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,362,"        if (columnData == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,363,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,365,"        final int nRows = columnData.length;
",6,0,0,0,0,1,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,366,"        if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,367,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
",4,0,0,1,2,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,369,"        final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);
",2,0,1,3,6,1,6,4,0,15,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,370,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,371,"            m.setEntry(i, 0, columnData[i]);
",0,0,1,2,4,0,6,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,373,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,392,"            if (raiseException) {
",2,0,0,1,3,0,0,0,0,2,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,393,"                throw new NonSquareMatrixException(rows, matrix.getColumnDimension());
",2,0,0,2,4,0,4,2,0,8,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,395,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,404,"                    if (raiseException) {
",2,0,0,1,3,0,0,0,0,2,21,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,405,"                        throw new NonSymmetricMatrixException(i, j, relativeTolerance);
",6,0,0,1,2,0,0,2,0,8,63,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,407,"                        return false;
",0,0,0,0,0,1,0,0,0,1,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,426,"        isSymmetricInternal(matrix, eps, true);
",0,0,0,1,2,0,6,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,427,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,469,"            throw new OutOfRangeException(LocalizedFormats.ROW_INDEX,
",4,0,0,0,1,0,0,2,0,6,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,484,"            throw new OutOfRangeException(LocalizedFormats.COLUMN_INDEX,
",4,0,0,0,1,0,0,2,0,6,60,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,506,"        checkRowIndex(m, startRow);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,507,"        checkRowIndex(m, endRow);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,508,"        if (endRow < startRow) {
",4,1,0,1,3,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,509,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,
",4,0,0,0,1,0,0,2,0,6,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,513,"        checkColumnIndex(m, startColumn);
",0,0,0,1,2,0,6,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,514,"        checkColumnIndex(m, endColumn);
",0,0,0,1,2,0,6,0,0,6,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,515,"        if (endColumn < startColumn) {
",4,1,0,1,3,0,0,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,516,"            throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_COLUMN_AFTER_FINAL_COLUMN,
",4,0,0,0,1,0,0,2,0,6,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,521,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,540,"        if (selectedRows == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,541,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,543,"        if (selectedColumns == null) {
",2,1,0,1,3,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,544,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,546,"        if (selectedRows.length == 0) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,547,"            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_ROW_INDEX_ARRAY);
",4,0,0,1,2,0,0,2,0,6,75,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,549,"        if (selectedColumns.length == 0) {
",4,1,0,1,3,0,0,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,550,"            throw new NoDataException(LocalizedFormats.EMPTY_SELECTED_COLUMN_INDEX_ARRAY);
",4,0,0,1,2,0,0,2,0,6,78,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,553,"        for (final int row : selectedRows) {
",4,0,0,1,3,1,0,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,554,"            checkRowIndex(m, row);
",0,0,0,1,2,0,6,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,556,"        for (final int column : selectedColumns) {
",4,0,0,1,3,1,0,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,557,"            checkColumnIndex(m, column);
",0,0,0,1,2,0,6,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,559,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,573,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),
",0,0,0,2,5,0,8,2,0,10,93,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,590,"            throw new MatrixDimensionMismatchException(left.getRowDimension(), left.getColumnDimension(),
",0,0,0,2,5,0,8,2,0,10,93,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,607,"            throw new DimensionMismatchException(left.getColumnDimension(),
",0,0,0,1,3,0,4,2,0,6,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,618,"        final FractionMatrixConverter converter = new FractionMatrixConverter();
",2,0,0,1,2,1,0,4,0,7,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,619,"        m.walkInOptimizedOrder(converter);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,620,"        return converter.getConvertedMatrix();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,663,"        final BigFractionMatrixConverter converter = new BigFractionMatrixConverter();
",2,0,0,1,2,1,0,4,0,7,78,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,664,"        m.walkInOptimizedOrder(converter);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,665,"        return converter.getConvertedMatrix();
",0,0,0,1,2,1,4,0,0,4,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,743,"        final int n = vector.getDimension();
",2,0,0,1,2,1,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,744,"        oos.writeInt(n);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,745,"        for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,746,"            oos.writeDouble(vector.getEntry(i));
",0,0,0,2,4,0,10,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,748,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,774,"            final int n = ois.readInt();
",2,0,0,1,2,1,4,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,775,"            final double[] data = new double[n];
",2,0,1,2,4,1,0,0,0,5,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,776,"            for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,777,"                data[i] = ois.readDouble();
",0,0,1,2,4,0,4,0,0,9,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,781,"            final RealVector vector = new ArrayRealVector(data, false);
",4,0,0,1,2,1,0,4,0,10,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,784,"            final java.lang.reflect.Field f =
",10,0,0,0,0,1,0,0,0,11,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,786,"            f.setAccessible(true);
",0,0,0,1,2,0,4,0,0,5,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,787,"            f.set(instance, vector);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,797,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,789,"        } catch (NoSuchFieldException nsfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,790,"            IOException ioe = new IOException();
",2,0,0,1,2,0,0,4,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,791,"            ioe.initCause(nsfe);
",0,0,0,1,2,0,6,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,792,"            throw ioe;
",2,0,0,0,0,0,0,0,0,2,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,793,"        } catch (IllegalAccessException iae) {
",2,0,0,1,4,0,0,2,0,4,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,794,"            IOException ioe = new IOException();
",2,0,0,1,2,0,0,4,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,795,"            ioe.initCause(iae);
",0,0,0,1,2,0,6,0,0,6,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,796,"            throw ioe;
",2,0,0,0,0,0,0,0,0,2,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,799,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,844,"        final int n = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,845,"        final int m = matrix.getColumnDimension();
",2,0,0,1,2,1,4,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,846,"        oos.writeInt(n);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,847,"        oos.writeInt(m);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,848,"        for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,849,"            for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,850,"                oos.writeDouble(matrix.getEntry(i, j));
",0,0,0,2,4,0,12,0,0,12,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,853,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,879,"            final int n = ois.readInt();
",2,0,0,1,2,1,4,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,880,"            final int m = ois.readInt();
",2,0,0,1,2,1,4,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,881,"            final double[][] data = new double[n][m];
",2,0,1,4,8,1,0,0,0,7,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,882,"            for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,883,"                final double[] dataI = data[i];
",2,0,1,2,4,1,0,0,0,7,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,884,"                for (int j = 0; j < m; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,885,"                    dataI[j] = ois.readDouble();
",0,0,1,2,4,0,4,0,0,9,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,890,"            final RealMatrix matrix = new Array2DRowRealMatrix(data, false);
",4,0,0,1,2,1,0,4,0,10,64,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,893,"            final java.lang.reflect.Field f =
",10,0,0,0,0,1,0,0,0,11,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,895,"            f.setAccessible(true);
",0,0,0,1,2,0,4,0,0,5,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,896,"            f.set(instance, matrix);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,906,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,898,"        } catch (NoSuchFieldException nsfe) {
",2,0,0,1,4,0,0,2,0,4,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,899,"            IOException ioe = new IOException();
",2,0,0,1,2,0,0,4,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,900,"            ioe.initCause(nsfe);
",0,0,0,1,2,0,6,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,901,"            throw ioe;
",2,0,0,0,0,0,0,0,0,2,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,902,"        } catch (IllegalAccessException iae) {
",2,0,0,1,4,0,0,2,0,4,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,903,"            IOException ioe = new IOException();
",2,0,0,1,2,0,0,4,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,904,"            ioe.initCause(iae);
",0,0,0,1,2,0,6,0,0,6,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,905,"            throw ioe;
",2,0,0,0,0,0,0,0,0,2,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,907,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,930,"        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {
",4,4,0,6,13,0,8,0,0,16,81,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,931,"            throw new DimensionMismatchException(
",0,0,0,0,1,0,0,2,0,2,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,935,"        if( rm.getColumnDimension() != rm.getRowDimension() ){
",0,1,0,3,7,0,8,0,0,9,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,936,"            throw new NonSquareMatrixException(rm.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,939,"        int rows = rm.getRowDimension();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,940,"        for( int i = 0 ; i < rows ; i++ ){
",8,1,0,1,3,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,941,"            double diag = rm.getEntry(i, i);
",2,0,0,1,2,0,8,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,942,"            if( FastMath.abs(diag) < Precision.SAFE_MIN ){
",4,1,0,2,5,0,6,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,943,"                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
",4,0,0,1,2,0,0,2,0,6,69,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,945,"            double bi = b.getEntry(i)/diag;
",4,1,0,1,2,0,6,0,0,11,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,946,"            b.setEntry(i,  bi );
",0,0,0,1,2,0,8,0,0,8,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,947,"            for( int j = i+1; j< rows; j++ ){
",10,2,0,1,3,0,0,0,0,13,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,948,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );
",2,2,0,3,6,0,20,0,0,24,51,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,951,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,975,"        if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {
",4,4,0,6,13,0,8,0,0,16,81,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,976,"            throw new DimensionMismatchException(
",0,0,0,0,1,0,0,2,0,2,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,980,"        if( rm.getColumnDimension() != rm.getRowDimension() ){
",0,1,0,3,7,0,8,0,0,9,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,981,"            throw new NonSquareMatrixException(rm.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,984,"        int rows = rm.getRowDimension();
",2,0,0,1,2,0,4,0,0,6,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,985,"        for( int i = rows-1 ; i >-1 ; i-- ){
",8,2,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,986,"            double diag = rm.getEntry(i, i);
",2,0,0,1,2,0,8,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,987,"            if( FastMath.abs(diag) < Precision.SAFE_MIN ){
",4,1,0,2,5,0,6,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,988,"                throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
",4,0,0,1,2,0,0,2,0,6,69,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,990,"            double bi = b.getEntry(i)/diag;
",4,1,0,1,2,0,6,0,0,11,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,991,"            b.setEntry(i,  bi );
",0,0,0,1,2,0,8,0,0,8,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,992,"            for( int j = i-1; j>-1; j-- ){
",8,2,0,1,3,0,0,0,0,12,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,993,"                b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );
",2,2,0,3,6,0,20,0,0,24,51,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,996,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1012,"        final int n = m.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1013,"        if (m.getColumnDimension() != n) {
",2,1,0,2,5,0,4,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1014,"            throw new NonSquareMatrixException(m.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,55,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1018,"        final int splitIndex1 = splitIndex + 1;
",4,1,0,0,0,1,0,0,0,6,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1020,"        final RealMatrix a = m.getSubMatrix(0, splitIndex, 0, splitIndex);
",2,0,0,1,2,1,8,2,0,13,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1021,"        final RealMatrix b = m.getSubMatrix(0, splitIndex, splitIndex1, n - 1);
",4,1,0,1,2,1,8,2,0,16,71,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1022,"        final RealMatrix c = m.getSubMatrix(splitIndex1, n - 1, 0, splitIndex);
",4,1,0,1,2,1,8,2,0,16,71,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1023,"        final RealMatrix d = m.getSubMatrix(splitIndex1, n - 1, splitIndex1, n - 1);
",6,2,0,1,2,1,8,2,0,19,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1025,"        final SingularValueDecomposition aDec = new SingularValueDecomposition(a);
",4,0,0,1,2,1,0,4,0,9,74,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1026,"        final RealMatrix aInv = aDec.getSolver().getInverse();
",2,0,0,2,4,1,6,2,0,11,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1028,"        final SingularValueDecomposition dDec = new SingularValueDecomposition(d);
",4,0,0,1,2,1,0,4,0,9,74,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1029,"        final RealMatrix dInv = dDec.getSolver().getInverse();
",2,0,0,2,4,1,6,2,0,11,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1031,"        final RealMatrix tmp1 = a.subtract(b.multiply(dInv).multiply(c));
",2,0,0,3,6,1,14,2,0,19,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1032,"        final SingularValueDecomposition tmp1Dec = new SingularValueDecomposition(tmp1);
",4,0,0,1,2,1,0,4,0,9,80,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1033,"        final RealMatrix result00 = tmp1Dec.getSolver().getInverse();
",2,0,0,2,4,1,6,2,0,11,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1035,"        final RealMatrix tmp2 = d.subtract(c.multiply(aInv).multiply(b));
",2,0,0,3,6,1,14,2,0,19,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1036,"        final SingularValueDecomposition tmp2Dec = new SingularValueDecomposition(tmp2);
",4,0,0,1,2,1,0,4,0,9,80,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1037,"        final RealMatrix result11 = tmp2Dec.getSolver().getInverse();
",2,0,0,2,4,1,6,2,0,11,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1039,"        final RealMatrix result01 = aInv.multiply(b).multiply(result11).scalarMultiply(-1);
",2,0,0,3,6,1,12,2,0,18,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1040,"        final RealMatrix result10 = dInv.multiply(c).multiply(result00).scalarMultiply(-1);
",2,0,0,3,6,1,12,2,0,18,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1042,"        final RealMatrix result = new Array2DRowRealMatrix(n, n);
",6,0,0,1,2,1,0,4,0,11,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1043,"        result.setSubMatrix(result00.getData(), 0, 0);
",0,0,0,2,4,0,8,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1044,"        result.setSubMatrix(result01.getData(), 0, splitIndex1);
",0,0,0,2,4,0,10,0,0,10,56,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1045,"        result.setSubMatrix(result10.getData(), splitIndex1, 0);
",0,0,0,2,4,0,10,0,0,10,56,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1046,"        result.setSubMatrix(result11.getData(), splitIndex1, splitIndex1);
",0,0,0,2,4,0,12,0,0,12,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,6,1048,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,103,"        super(field, rows, columns);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,104,"        this.rows    = rows;
",4,0,0,0,0,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,105,"        this.columns = columns;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,108,"        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,109,"        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,112,"        blocks = createBlocksLayout(field, rows, columns);
",2,0,0,1,2,0,8,0,0,11,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,113,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,130,"        this(rawData.length, rawData[0].length, toBlocksLayout(rawData), false);
",6,0,1,3,6,0,4,0,0,13,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,131,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,153,"        super(extractField(blockData), rows, columns);
",4,0,0,2,4,0,4,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,154,"        this.rows    = rows;
",4,0,0,0,0,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,155,"        this.columns = columns;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,158,"        blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,159,"        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,161,"        if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,163,"            blocks = MathArrays.buildArray(getField(), blockRows * blockColumns, -1);
",6,1,0,2,4,0,6,0,0,15,73,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,166,"            blocks = blockData;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,169,"        int index = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,170,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,171,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,172,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock, ++index) {
",10,1,0,1,3,0,0,0,0,13,64,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,173,"                if (blockData[index].length != iHeight * blockWidth(jBlock)) {
",4,2,1,3,7,0,4,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,174,"                    throw new DimensionMismatchException(blockData[index].length,
",2,0,1,1,3,0,0,2,0,8,61,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,177,"                if (copyArray) {
",2,0,0,1,3,0,0,0,0,2,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,178,"                    blocks[index] = blockData[index].clone();
",0,0,1,3,6,0,2,0,0,11,41,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,182,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,211,"        final int rows         = rawData.length;
",6,0,0,0,0,1,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,212,"        final int columns      = rawData[0].length;
",4,0,1,1,2,1,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,213,"        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,214,"        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,217,"        for (int i = 0; i < rawData.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,218,"            final int length = rawData[i].length;
",4,0,1,1,2,1,0,0,0,9,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,219,"            if (length != columns) {
",4,1,0,1,3,0,0,0,0,5,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,220,"                throw new DimensionMismatchException(columns, length);
",4,0,0,1,2,0,0,2,0,6,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,225,"        final Field<T> field = extractField(rawData);
",2,0,0,1,2,1,4,4,0,11,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,226,"        final T[][] blocks = MathArrays.buildArray(field, blockRows * blockColumns, -1);
",6,1,0,3,6,1,6,2,0,17,80,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,227,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,228,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,229,"            final int pStart  = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,230,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,231,"            final int iHeight = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,232,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,233,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,234,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,235,"                final int jWidth = qEnd - qStart;
",6,1,0,0,0,1,0,0,0,8,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,238,"                final T[] block = MathArrays.buildArray(field, iHeight * jWidth);
",6,1,0,2,4,1,6,2,0,16,65,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,239,"                blocks[blockIndex] = block;
",2,0,1,1,2,0,0,0,0,7,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,242,"                int index = 0;
",2,0,0,0,0,0,0,0,0,2,14,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,243,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,244,"                    System.arraycopy(rawData[p], qStart, block, index, jWidth);
",0,0,1,2,4,0,12,0,0,16,59,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,245,"                    index += jWidth;
",4,0,0,0,0,0,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,248,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,252,"        return blocks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,272,"        final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,273,"        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,275,"        final T[][] blocks = MathArrays.buildArray(field, blockRows * blockColumns, -1);
",6,1,0,3,6,1,6,2,0,17,80,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,276,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,277,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,278,"            final int pStart  = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,279,"            final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,280,"            final int iHeight = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,281,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,282,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,283,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,284,"                final int jWidth = qEnd - qStart;
",6,1,0,0,0,1,0,0,0,8,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,285,"                blocks[blockIndex] = MathArrays.buildArray(field, iHeight * jWidth);
",4,1,1,2,4,0,6,0,0,16,68,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,286,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,290,"        return blocks;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,298,"        return new BlockFieldMatrix<T>(getField(), rowDimension,
",2,0,0,1,3,1,2,4,0,8,56,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,307,"        BlockFieldMatrix<T> copied = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,0,2,8,0,16,80,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,310,"        for (int i = 0; i < blocks.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,311,"            System.arraycopy(blocks[i], 0, copied.blocks[i], 0, blocks[i].length);
",6,0,1,4,8,0,4,0,0,20,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,314,"        return copied;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,322,"            return add((BlockFieldMatrix<T>) m);
",2,0,0,2,4,1,2,4,0,8,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,323,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,326,"            checkAdditionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,328,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,331,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,332,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,333,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,336,"                    final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,337,"                    final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,338,"                    final int      pStart   = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,339,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,66,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,340,"                    final int      qStart   = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,341,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,69,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,342,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,343,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,344,"                        for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,345,"                            outBlock[k] = tBlock[k].add(m.getEntry(p, q));
",0,0,1,4,8,0,10,0,0,19,46,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,346,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,351,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,356,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,372,"        checkAdditionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,374,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,377,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,378,"            final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,379,"            final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,380,"            final T[] mBlock   = m.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,381,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,382,"                outBlock[k] = tBlock[k].add(mBlock[k]);
",0,0,1,4,8,0,2,0,0,15,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,386,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,394,"            return subtract((BlockFieldMatrix<T>) m);
",2,0,0,2,4,1,2,4,0,8,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,395,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,398,"            checkSubtractionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,400,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,403,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,404,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,405,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,408,"                    final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,409,"                    final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,410,"                    final int      pStart   = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,411,"                    final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,66,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,412,"                    final int      qStart   = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,413,"                    final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,69,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,414,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,415,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,416,"                        for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,417,"                            outBlock[k] = tBlock[k].subtract(m.getEntry(p, q));
",0,0,1,4,8,0,10,0,0,19,51,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,418,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,423,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,428,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,442,"        checkSubtractionCompatible(m);
",0,0,0,1,2,0,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,444,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,447,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,448,"            final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,449,"            final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,450,"            final T[] mBlock   = m.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,451,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,452,"                outBlock[k] = tBlock[k].subtract(mBlock[k]);
",0,0,1,4,8,0,2,0,0,15,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,456,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,462,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,465,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,466,"            final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,467,"            final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,468,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,469,"                outBlock[k] = tBlock[k].add(d);
",0,0,1,3,6,0,4,0,0,13,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,473,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,480,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, columns);
",6,0,0,2,4,1,2,8,0,17,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,483,"        for (int blockIndex = 0; blockIndex < out.blocks.length; ++blockIndex) {
",12,1,0,1,3,0,0,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,484,"            final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,485,"            final T[] tBlock   = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,486,"            for (int k = 0; k < outBlock.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,487,"                outBlock[k] = tBlock[k].multiply(d);
",0,0,1,3,6,0,4,0,0,13,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,491,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,499,"            return multiply((BlockFieldMatrix<T>) m);
",2,0,0,2,4,1,2,4,0,8,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,500,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,503,"            checkMultiplicationCompatible(m);
",0,0,0,1,2,0,4,0,0,4,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,505,"            final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.getColumnDimension());
",4,0,0,3,6,1,6,8,0,19,98,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,506,"            final T zero = getField().getZero();
",2,0,0,2,4,1,4,2,0,9,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,509,"            int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,510,"            for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,512,"                final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,513,"                final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,515,"                for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,517,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,518,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());
",6,1,0,2,4,1,8,0,0,16,77,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,521,"                    final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,524,"                    for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {
",8,1,0,1,3,0,0,0,0,10,55,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,525,"                        final int kWidth      = blockWidth(kBlock);
",2,0,0,1,2,1,4,0,0,7,43,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,526,"                        final T[] tBlock = blocks[iBlock * blockColumns + kBlock];
",8,2,1,2,4,1,0,2,0,15,58,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,527,"                        final int rStart      = kBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,528,"                        int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,529,"                        for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,530,"                            final int lStart = (p - pStart) * kWidth;
",8,2,0,1,2,1,0,0,0,11,41,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,531,"                            final int lEnd   = lStart + kWidth;
",6,1,0,0,0,1,0,0,0,8,35,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,532,"                            for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,533,"                                T sum = zero;
",4,0,0,0,0,0,0,2,0,6,13,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,534,"                                int r = rStart;
",4,0,0,0,0,0,0,0,0,4,15,18,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,535,"                                for (int l = lStart; l < lEnd; ++l) {
",10,1,0,1,3,0,0,0,0,12,37,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,536,"                                    sum = sum.add(tBlock[l].multiply(m.getEntry(r, q)));
",2,0,1,4,8,0,14,0,0,21,52,19,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,537,"                                    ++r;
",2,0,0,0,0,0,0,0,0,3,4,19,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,539,"                                outBlock[k] = outBlock[k].add(sum);
",0,0,1,3,6,0,4,0,0,13,35,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,540,"                                ++k;
",2,0,0,0,0,0,0,0,0,3,4,17,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,546,"                    ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,551,"            return out;
",2,0,0,0,0,1,0,0,0,2,11,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,566,"        checkMultiplicationCompatible(m);
",0,0,0,1,2,0,4,0,0,4,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,568,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, m.columns);
",8,0,0,2,4,1,2,8,0,19,85,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,569,"        final T zero = getField().getZero();
",2,0,0,2,4,1,4,2,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,572,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,573,"        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,575,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,576,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,578,"            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,579,"                final int jWidth = out.blockWidth(jBlock);
",2,0,0,1,2,1,6,0,0,9,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,580,"                final int jWidth2 = jWidth  + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,581,"                final int jWidth3 = jWidth2 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,582,"                final int jWidth4 = jWidth3 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,585,"                final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,588,"                for (int kBlock = 0; kBlock < blockColumns; ++kBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,589,"                    final int kWidth = blockWidth(kBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,590,"                    final T[] tBlock = blocks[iBlock * blockColumns + kBlock];
",8,2,1,2,4,1,0,2,0,15,58,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,591,"                    final T[] mBlock = m.blocks[kBlock * m.blockColumns + jBlock];
",14,2,0,2,4,1,0,2,0,19,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,592,"                    int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,593,"                    for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,594,"                        final int lStart = (p - pStart) * kWidth;
",8,2,0,1,2,1,0,0,0,11,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,595,"                        final int lEnd   = lStart + kWidth;
",6,1,0,0,0,1,0,0,0,8,35,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,596,"                        for (int nStart = 0; nStart < jWidth; ++nStart) {
",8,1,0,1,3,0,0,0,0,10,49,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,597,"                            T sum = zero;
",4,0,0,0,0,0,0,2,0,6,13,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,598,"                            int l = lStart;
",4,0,0,0,0,0,0,0,0,4,15,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,599,"                            int n = nStart;
",4,0,0,0,0,0,0,0,0,4,15,15,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,600,"                            while (l < lEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,601,"                                sum = sum.
",2,0,0,0,0,0,2,0,0,5,10,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,606,"                                l += 4;
",2,0,0,0,0,0,0,0,0,3,7,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,607,"                                n += jWidth4;
",4,0,0,0,0,0,0,0,0,5,13,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,609,"                            while (l < lEnd) {
",4,1,0,1,3,0,0,0,0,5,18,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,610,"                                sum = sum.add(tBlock[l++].multiply(mBlock[n]));
",4,0,1,4,8,0,6,0,0,18,47,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,611,"                                n += jWidth;
",4,0,0,0,0,0,0,0,0,5,12,16,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,613,"                            outBlock[k] = outBlock[k].add(sum);
",0,0,1,3,6,0,4,0,0,13,35,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,614,"                            ++k;
",2,0,0,0,0,0,0,0,0,3,4,14,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,620,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,624,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,631,"        final T[][] data = MathArrays.buildArray(getField(), getRowDimension(), getColumnDimension());
",2,0,0,6,12,1,10,2,0,15,94,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,632,"        final int lastColumns = columns - (blockColumns - 1) * BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,634,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,635,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,636,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,637,"            int regularPos   = 0;
",2,0,0,0,0,0,0,0,0,2,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,638,"            int lastPos      = 0;
",2,0,0,0,0,0,0,0,0,2,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,639,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,640,"                final T[] dataP = data[p];
",2,0,1,2,4,1,0,2,0,9,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,641,"                int blockIndex = iBlock * blockColumns;
",6,1,0,0,0,0,0,0,0,7,39,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,642,"                int dataPos    = 0;
",2,0,0,0,0,0,0,0,0,2,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,643,"                for (int jBlock = 0; jBlock < blockColumns - 1; ++jBlock) {
",8,2,0,1,3,0,0,0,0,11,59,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,644,"                    System.arraycopy(blocks[blockIndex++], regularPos, dataP, dataPos, BLOCK_SIZE);
",2,0,1,2,4,0,12,0,0,17,79,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,645,"                    dataPos += BLOCK_SIZE;
",4,0,0,0,0,0,0,0,0,5,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,647,"                System.arraycopy(blocks[blockIndex], lastPos, dataP, dataPos, lastColumns);
",0,0,1,2,4,0,12,0,0,16,75,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,648,"                regularPos += BLOCK_SIZE;
",4,0,0,0,0,0,0,0,0,5,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,649,"                lastPos    += lastColumns;
",4,0,0,0,0,0,0,0,0,5,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,653,"        return data;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,663,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,666,"        final BlockFieldMatrix<T> out =
",2,0,0,0,0,1,0,4,0,7,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,670,"        final int blockStartRow    = startRow    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,671,"        final int rowsShift        = startRow    % BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,672,"        final int blockStartColumn = startColumn / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,673,"        final int columnsShift     = startColumn % BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,676,"        int pBlock = blockStartRow;
",4,0,0,0,0,0,0,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,677,"        for (int iBlock = 0; iBlock < out.blockRows; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,678,"            final int iHeight = out.blockHeight(iBlock);
",2,0,0,1,2,1,6,0,0,9,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,679,"            int qBlock = blockStartColumn;
",4,0,0,0,0,0,0,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,680,"            for (int jBlock = 0; jBlock < out.blockColumns; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,681,"                final int jWidth = out.blockWidth(jBlock);
",2,0,0,1,2,1,6,0,0,9,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,684,"                final int      outIndex = iBlock * out.blockColumns + jBlock;
",10,2,0,0,0,1,0,0,0,13,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,685,"                final T[] outBlock = out.blocks[outIndex];
",6,0,1,2,4,1,0,2,0,11,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,686,"                final int      index    = pBlock * blockColumns + qBlock;
",8,2,0,0,0,1,0,0,0,11,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,687,"                final int      width    = blockWidth(qBlock);
",2,0,0,1,2,1,4,0,0,7,45,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,689,"                final int heightExcess = iHeight + rowsShift - BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,690,"                final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,691,"                if (heightExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,693,"                    if (widthExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,695,"                        final int width2 = blockWidth(qBlock + 1);
",4,1,0,1,2,1,2,0,0,8,42,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,696,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,700,"                        copyBlockPart(blocks[index + 1], width2,
",2,1,1,1,3,0,4,0,0,9,40,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,704,"                        copyBlockPart(blocks[index + blockColumns], width,
",4,1,1,1,3,0,4,0,0,11,50,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,708,"                        copyBlockPart(blocks[index + blockColumns + 1], width2,
",4,1,1,1,3,0,4,0,0,11,55,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,712,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,714,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,718,"                        copyBlockPart(blocks[index + blockColumns], width,
",4,1,1,1,3,0,4,0,0,11,50,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,725,"                    if (widthExcess > 0) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,727,"                        final int width2 = blockWidth(qBlock + 1);
",4,1,0,1,2,1,2,0,0,8,42,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,728,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,732,"                        copyBlockPart(blocks[index + 1], width2,
",2,1,1,1,3,0,4,0,0,9,40,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,736,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,738,"                        copyBlockPart(blocks[index], width,
",0,0,1,1,3,0,4,0,0,8,35,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,744,"                ++qBlock;
",2,0,0,0,0,0,0,0,0,3,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,746,"            ++pBlock;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,749,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,772,"        final int length = srcEndColumn - srcStartColumn;
",6,1,0,0,0,1,0,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,773,"        int srcPos = srcStartRow * srcWidth + srcStartColumn;
",8,2,0,0,0,0,0,0,0,10,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,774,"        int dstPos = dstStartRow * dstWidth + dstStartColumn;
",8,2,0,0,0,0,0,0,0,10,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,775,"        for (int srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {
",10,1,0,1,3,0,0,0,0,12,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,776,"            System.arraycopy(srcBlock, srcPos, dstBlock, dstPos, length);
",0,0,0,1,2,0,14,0,0,14,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,777,"            srcPos += srcWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,778,"            dstPos += dstWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,780,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,789,"        MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,790,"        final int refLength = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,791,"        if (refLength == 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,792,"            throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
",4,0,0,1,2,0,0,2,0,6,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,794,"        final int endRow    = row + subMatrix.length - 1;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,795,"        final int endColumn = column + refLength - 1;
",6,2,0,0,0,1,0,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,796,"        checkSubMatrixIndex(row, endRow, column, endColumn);
",0,0,0,1,2,0,10,0,0,10,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,797,"        for (final T[] subRow : subMatrix) {
",4,0,0,2,5,1,0,2,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,798,"            if (subRow.length != refLength) {
",6,1,0,1,3,0,0,0,0,7,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,799,"                throw new DimensionMismatchException(refLength, subRow.length);
",6,0,0,1,2,0,0,2,0,8,63,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,804,"        final int blockStartRow    = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,805,"        final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;
",8,2,0,1,2,1,0,0,0,11,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,806,"        final int blockStartColumn = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,807,"        final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;
",8,2,0,1,2,1,0,0,0,11,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,810,"        for (int iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {
",10,1,0,1,3,0,0,0,0,12,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,811,"            final int iHeight  = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,812,"            final int firstRow = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,813,"            final int iStart   = FastMath.max(row,    firstRow);
",2,0,0,1,2,1,8,0,0,11,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,814,"            final int iEnd     = FastMath.min(endRow + 1, firstRow + iHeight);
",8,2,0,1,2,1,4,0,0,15,66,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,816,"            for (int jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {
",10,1,0,1,3,0,0,0,0,12,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,817,"                final int jWidth      = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,43,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,818,"                final int firstColumn = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,819,"                final int jStart      = FastMath.max(column,    firstColumn);
",2,0,0,1,2,1,8,0,0,11,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,820,"                final int jEnd        = FastMath.min(endColumn + 1, firstColumn + jWidth);
",8,2,0,1,2,1,4,0,0,15,74,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,821,"                final int jLength     = jEnd - jStart;
",6,1,0,0,0,1,0,0,0,8,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,824,"                final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,825,"                for (int i = iStart; i < iEnd; ++i) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,826,"                    System.arraycopy(subMatrix[i - row], jStart - column,
",8,2,1,1,3,0,4,0,0,16,53,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,833,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,839,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,840,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), 1, columns);
",4,0,0,2,4,1,2,8,0,15,80,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,843,"        final int iBlock  = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,844,"        final int iRow    = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,845,"        int outBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,846,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,847,"        T[] outBlock = out.blocks[outBlockIndex];
",6,0,1,2,4,0,0,2,0,10,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,848,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,849,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,850,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,851,"            final int available  = outBlock.length - outIndex;
",8,1,0,0,0,1,0,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,852,"            if (jWidth > available) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,853,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, available);
",4,1,0,1,2,0,12,0,0,17,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,854,"                outBlock = out.blocks[++outBlockIndex];
",8,0,0,1,2,0,0,0,0,10,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,855,"                System.arraycopy(block, iRow * jWidth, outBlock, 0, jWidth - available);
",8,2,0,1,2,0,8,0,0,18,72,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,856,"                outIndex = jWidth - available;
",6,1,0,0,0,0,0,0,0,8,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,858,"                System.arraycopy(block, iRow * jWidth, outBlock, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,67,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,859,"                outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,863,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,871,"            setRowMatrix(row, (BlockFieldMatrix<T>) matrix);
",2,0,0,2,4,0,4,4,0,10,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,874,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,872,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,873,"            super.setRowMatrix(row, matrix);
",6,0,0,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,875,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,890,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,891,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,892,"        if ((matrix.getRowDimension() != 1) ||
",0,2,0,2,5,0,4,0,0,6,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,894,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,900,"        final int iBlock = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,901,"        final int iRow   = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,902,"        int mBlockIndex  = 0;
",2,0,0,0,0,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,903,"        int mIndex       = 0;
",2,0,0,0,0,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,904,"        T[] mBlock  = matrix.blocks[mBlockIndex];
",6,0,1,2,4,0,0,2,0,10,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,905,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,906,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,907,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,908,"            final int available  = mBlock.length - mIndex;
",8,1,0,0,0,1,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,909,"            if (jWidth > available) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,910,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, available);
",4,1,0,1,2,0,12,0,0,17,66,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,911,"                mBlock = matrix.blocks[++mBlockIndex];
",8,0,0,1,2,0,0,0,0,10,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,912,"                System.arraycopy(mBlock, 0, block, iRow * jWidth, jWidth - available);
",8,2,0,1,2,0,8,0,0,18,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,913,"                mIndex = jWidth - available;
",6,1,0,0,0,0,0,0,0,8,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,915,"                System.arraycopy(mBlock, mIndex, block, iRow * jWidth, jWidth);
",4,1,0,1,2,0,12,0,0,17,63,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,916,"                mIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,919,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,925,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,926,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), rows, 1);
",4,0,0,2,4,1,2,8,0,15,77,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,929,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,930,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,931,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,932,"        int outBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,933,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,934,"        T[] outBlock = out.blocks[outBlockIndex];
",6,0,1,2,4,0,0,2,0,10,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,935,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,936,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,937,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,938,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,939,"                if (outIndex >= outBlock.length) {
",6,1,0,1,3,0,0,0,0,7,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,940,"                    outBlock = out.blocks[++outBlockIndex];
",8,0,0,1,2,0,0,0,0,10,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,941,"                    outIndex = 0;
",2,0,0,0,0,0,0,0,0,3,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,943,"                outBlock[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,51,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,947,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,955,"            setColumnMatrix(column, (BlockFieldMatrix<T>) matrix);
",2,0,0,2,4,0,4,4,0,10,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,958,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,956,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,957,"            super.setColumnMatrix(column, matrix);
",6,0,0,1,2,0,0,0,0,6,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,959,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,974,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,975,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,976,"        if ((matrix.getRowDimension() != nRows) ||
",2,2,0,2,5,0,4,0,0,8,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,978,"            throw new MatrixDimensionMismatchException(matrix.getRowDimension(),
",0,0,0,1,3,0,4,2,0,6,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,984,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,985,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,986,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,987,"        int mBlockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,988,"        int mIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,989,"        T[] mBlock = matrix.blocks[mBlockIndex];
",6,0,1,2,4,0,0,2,0,10,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,990,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,991,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,992,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,993,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,994,"                if (mIndex >= mBlock.length) {
",6,1,0,1,3,0,0,0,0,7,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,995,"                    mBlock = matrix.blocks[++mBlockIndex];
",8,0,0,1,2,0,0,0,0,10,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,996,"                    mIndex = 0;
",2,0,0,0,0,0,0,0,0,3,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,998,"                block[i * jWidth + jColumn] = mBlock[mIndex++];
",8,2,1,2,4,0,0,0,0,16,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1001,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1007,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1008,"        final T[] outData = MathArrays.buildArray(getField(), columns);
",2,0,0,3,6,1,8,2,0,13,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1011,"        final int iBlock  = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1012,"        final int iRow    = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1013,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1014,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1015,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1016,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1017,"            System.arraycopy(block, iRow * jWidth, outData, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,66,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1018,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1021,"        return new ArrayFieldVector<T>(getField(), outData, false);
",2,0,0,2,4,1,2,4,0,9,59,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1029,"            setRow(row, ((ArrayFieldVector<T>) vector).getDataRef());
",2,0,0,4,8,0,6,4,0,12,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1032,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1030,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1031,"            super.setRowVector(row, vector);
",6,0,0,1,2,0,0,0,0,6,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1033,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1039,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1040,"        final T[] outData = MathArrays.buildArray(getField(), rows);
",2,0,0,3,6,1,8,2,0,13,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1043,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1044,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1045,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1046,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1047,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1048,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1049,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1050,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1051,"                outData[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1055,"        return new ArrayFieldVector<T>(getField(), outData, false);
",2,0,0,2,4,1,2,4,0,9,59,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1063,"            setColumn(column, ((ArrayFieldVector<T>) vector).getDataRef());
",2,0,0,4,8,0,6,4,0,12,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1066,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1064,"        } catch (ClassCastException cce) {
",2,0,0,1,4,0,0,2,0,4,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1065,"            super.setColumnVector(column, vector);
",6,0,0,1,2,0,0,0,0,6,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1067,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1072,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1073,"        final T[] out = MathArrays.buildArray(getField(), columns);
",2,0,0,3,6,1,8,2,0,13,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1076,"        final int iBlock  = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1077,"        final int iRow    = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1078,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1079,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1080,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1081,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1082,"            System.arraycopy(block, iRow * jWidth, out, outIndex, jWidth);
",4,1,0,1,2,0,12,0,0,17,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1083,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1086,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1093,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1094,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1095,"        if (array.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1096,"            throw new MatrixDimensionMismatchException(1, array.length, 1, nCols);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1100,"        final int iBlock  = row / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1101,"        final int iRow    = row - iBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1102,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1103,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1104,"            final int jWidth     = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1105,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1106,"            System.arraycopy(array, outIndex, block, iRow * jWidth, jWidth);
",4,1,0,1,2,0,12,0,0,17,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1107,"            outIndex += jWidth;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1109,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1114,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1115,"        final T[] out = MathArrays.buildArray(getField(), rows);
",2,0,0,3,6,1,8,2,0,13,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1118,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1119,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1120,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1121,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1122,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1123,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1124,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1125,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1126,"                out[outIndex++] = block[i * jWidth + jColumn];
",8,2,1,2,4,0,0,0,0,16,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1130,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1137,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1138,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1139,"        if (array.length != nRows) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1140,"            throw new MatrixDimensionMismatchException(array.length, 1, nRows, 1);
",6,0,0,1,2,0,0,2,0,8,70,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1144,"        final int jBlock  = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1145,"        final int jColumn = column - jBlock * BLOCK_SIZE;
",8,2,0,0,0,1,0,0,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1146,"        final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1147,"        int outIndex      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1148,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1149,"            final int iHeight = blockHeight(iBlock);
",2,0,0,1,2,1,4,0,0,7,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1150,"            final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1151,"            for (int i = 0; i < iHeight; ++i) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1152,"                block[i * jWidth + jColumn] = array[outIndex++];
",8,2,1,2,4,0,0,0,0,16,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1161,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1162,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1164,"        final int iBlock = row    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1165,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1166,"        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1169,"        return blocks[iBlock * blockColumns + jBlock][k];
",6,2,1,2,4,1,0,0,0,12,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1176,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1177,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1179,"        final int iBlock = row    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1180,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1181,"        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1184,"        blocks[iBlock * blockColumns + jBlock][k] = value;
",8,2,1,2,4,0,0,0,0,15,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1185,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1191,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1192,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1194,"        final int iBlock = row    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1195,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1196,"        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1198,"        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1200,"        blockIJ[k] = blockIJ[k].add(increment);
",0,0,1,3,6,0,4,0,0,13,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1201,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1207,"        checkRowIndex(row);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1208,"        checkColumnIndex(column);
",0,0,0,1,2,0,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1210,"        final int iBlock = row    / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1211,"        final int jBlock = column / BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1212,"        final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
",8,4,0,2,4,1,4,0,0,17,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1214,"        final T[] blockIJ = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1216,"        blockIJ[k] = blockIJ[k].multiply(factor);
",0,0,1,3,6,0,4,0,0,13,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1217,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1222,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1223,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1224,"        final BlockFieldMatrix<T> out = new BlockFieldMatrix<T>(getField(), nCols, nRows);
",6,0,0,2,4,1,2,8,0,17,82,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1227,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1228,"        for (int iBlock = 0; iBlock < blockColumns; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1229,"            for (int jBlock = 0; jBlock < blockRows; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1232,"                final T[] outBlock = out.blocks[blockIndex];
",6,0,1,2,4,1,0,2,0,11,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1233,"                final T[] tBlock   = blocks[jBlock * blockColumns + iBlock];
",8,2,1,2,4,1,0,2,0,15,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1234,"                final int      pStart   = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1235,"                final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,69,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1236,"                final int      qStart   = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1237,"                final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,66,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1238,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1239,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1240,"                    final int lInc = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,31,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1241,"                    int l = p - pStart;
",6,1,0,0,0,0,0,0,0,7,19,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1242,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1243,"                        outBlock[k] = tBlock[l];
",0,0,1,2,4,0,0,0,0,9,24,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1244,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1245,"                        l+= lInc;
",4,0,0,0,0,0,0,0,0,5,9,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1250,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1255,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1261,"        return rows;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1267,"        return columns;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1273,"        if (v.length != columns) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1274,"            throw new DimensionMismatchException(v.length, columns);
",6,0,0,1,2,0,0,2,0,8,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1276,"        final T[] out = MathArrays.buildArray(getField(), rows);
",2,0,0,3,6,1,8,2,0,13,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1277,"        final T zero = getField().getZero();
",2,0,0,2,4,1,4,2,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1280,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1281,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1282,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1283,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1284,"                final T[] block  = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1285,"                final int      qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1286,"                final int      qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,67,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1287,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1288,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1289,"                    T sum = zero;
",4,0,0,0,0,0,0,2,0,6,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1290,"                    int q = qStart;
",4,0,0,0,0,0,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1291,"                    while (q < qEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1292,"                        sum = sum.
",2,0,0,0,0,0,2,0,0,5,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1297,"                        k += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1298,"                        q += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1300,"                    while (q < qEnd) {
",4,1,0,1,3,0,0,0,0,5,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1301,"                        sum = sum.add(block[k++].multiply(v[q++]));
",6,0,1,4,8,0,6,0,0,19,43,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1303,"                    out[p] = out[p].add(sum);
",0,0,1,3,6,0,4,0,0,13,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1308,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1315,"        if (v.length != rows) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1316,"            throw new DimensionMismatchException(v.length, rows);
",6,0,0,1,2,0,0,2,0,8,53,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1318,"        final T[] out = MathArrays.buildArray(getField(), columns);
",2,0,0,3,6,1,8,2,0,13,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1319,"        final T zero = getField().getZero();
",2,0,0,2,4,1,4,2,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1322,"        for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1323,"            final int jWidth  = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1324,"            final int jWidth2 = jWidth  + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1325,"            final int jWidth3 = jWidth2 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1326,"            final int jWidth4 = jWidth3 + jWidth;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1327,"            final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1328,"            final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1329,"            for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1330,"                final T[] block  = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,58,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1331,"                final int      pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1332,"                final int      pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,64,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1333,"                for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1334,"                    int k = q - qStart;
",6,1,0,0,0,0,0,0,0,7,19,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1335,"                    T sum = zero;
",4,0,0,0,0,0,0,2,0,6,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1336,"                    int p = pStart;
",4,0,0,0,0,0,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1337,"                    while (p < pEnd - 3) {
",4,2,0,1,3,0,0,0,0,6,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1338,"                        sum = sum.
",2,0,0,0,0,0,2,0,0,5,10,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1343,"                        k += jWidth4;
",4,0,0,0,0,0,0,0,0,5,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1344,"                        p += 4;
",2,0,0,0,0,0,0,0,0,3,7,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1346,"                    while (p < pEnd) {
",4,1,0,1,3,0,0,0,0,5,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1347,"                        sum = sum.add(block[k].multiply(v[p++]));
",4,0,1,4,8,0,6,0,0,18,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1348,"                        k += jWidth;
",4,0,0,0,0,0,0,0,0,5,12,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1350,"                    out[q] = out[q].add(sum);
",0,0,1,3,6,0,4,0,0,13,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1355,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1361,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1362,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1363,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1364,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1365,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1366,"                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1367,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1368,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1369,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1370,"                    final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1371,"                    int k = (p - pStart) * jWidth;
",8,2,0,1,2,0,0,0,0,10,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1372,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1373,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1374,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1379,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1385,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1386,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1387,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1388,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1389,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1390,"                for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1391,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1392,"                    final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1393,"                    final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1394,"                    final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1395,"                    int k = (p - pStart) * jWidth;
",8,2,0,1,2,0,0,0,0,10,30,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1396,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1397,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1398,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1403,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1412,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1413,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1414,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1415,"            final int p0     = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1416,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1417,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1418,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1419,"                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1420,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1421,"                    final int q0     = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1422,"                    final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1423,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,74,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1424,"                    final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1425,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1426,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1427,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1428,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1433,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1442,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1443,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1444,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1445,"            final int p0     = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1446,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1447,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1448,"            for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1449,"                for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1450,"                    final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1451,"                    final int q0     = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1452,"                    final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1453,"                    final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,74,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1454,"                    final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1455,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1456,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1457,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1458,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1463,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1469,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1470,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1471,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1472,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1473,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1474,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1475,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1476,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1477,"                final T[] block = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1478,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1479,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1480,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1481,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1482,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1485,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1488,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1494,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1495,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1496,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1497,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1498,"            final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1499,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1500,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1501,"                final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,62,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1502,"                final T[] block = blocks[blockIndex];
",2,0,1,2,4,1,0,2,0,9,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1503,"                int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1504,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1505,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1506,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1507,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1510,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1513,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1522,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1523,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1524,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1525,"            final int p0     = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1526,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1527,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1528,"            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1529,"                final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1530,"                final int q0     = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1531,"                final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1532,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,74,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1533,"                final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1534,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1535,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1536,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1537,"                        block[k] = visitor.visit(p, q, block[k]);
",0,0,1,3,6,0,8,0,0,17,41,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1538,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1543,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1552,"        checkSubMatrixIndex(startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1553,"        visitor.start(rows, columns, startRow, endRow, startColumn, endColumn);
",0,0,0,1,2,0,16,0,0,16,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1554,"        for (int iBlock = startRow / BLOCK_SIZE; iBlock < 1 + endRow / BLOCK_SIZE; ++iBlock) {
",14,4,0,1,3,0,0,0,0,19,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1555,"            final int p0     = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1556,"            final int pStart = FastMath.max(startRow, p0);
",2,0,0,1,2,1,8,0,0,11,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1557,"            final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
",8,3,0,2,4,1,4,0,0,16,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1558,"            for (int jBlock = startColumn / BLOCK_SIZE; jBlock < 1 + endColumn / BLOCK_SIZE; ++jBlock) {
",14,4,0,1,3,0,0,0,0,19,92,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1559,"                final int jWidth = blockWidth(jBlock);
",2,0,0,1,2,1,4,0,0,7,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1560,"                final int q0     = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1561,"                final int qStart = FastMath.max(startColumn, q0);
",2,0,0,1,2,1,8,0,0,11,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1562,"                final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
",8,3,0,2,4,1,4,0,0,16,74,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1563,"                final T[] block = blocks[iBlock * blockColumns + jBlock];
",8,2,1,2,4,1,0,2,0,15,57,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1564,"                for (int p = pStart; p < pEnd; ++p) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1565,"                    int k = (p - p0) * jWidth + qStart - q0;
",12,4,0,1,2,0,0,0,0,16,40,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1566,"                    for (int q = qStart; q < qEnd; ++q) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1567,"                        visitor.visit(p, q, block[k]);
",0,0,1,2,4,0,8,0,0,12,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1568,"                        ++k;
",2,0,0,0,0,0,0,0,0,3,4,12,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1573,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1582,"        return (blockRow == blockRows - 1) ? rows - blockRow * BLOCK_SIZE : BLOCK_SIZE;
",12,4,0,1,2,1,0,0,0,16,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/BlockFieldMatrix,6,1591,"        return (blockColumn == blockColumns - 1) ? columns - blockColumn * BLOCK_SIZE : BLOCK_SIZE;
",12,4,0,1,2,1,0,0,0,16,91,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,73,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR,
",6,0,0,0,1,0,0,0,0,6,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,93,"        this(prefix, suffix, separator,
",6,0,0,0,1,0,0,0,0,6,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,95,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,122,"        return NumberFormat.getAvailableLocales();
",0,0,0,1,2,1,4,0,0,4,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,130,"        return prefix;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,138,"        return suffix;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,146,"        return separator;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,154,"        return format;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,181,"        return format(v, new StringBuffer(), new FieldPosition(0)).toString();
",0,0,0,4,8,1,6,4,0,10,70,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,195,"        pos.setBeginIndex(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,196,"        pos.setEndIndex(0);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,199,"        toAppendTo.append(prefix);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,202,"        for (int i = 0; i < vector.getDimension(); ++i) {
",6,1,0,2,5,0,4,0,0,12,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,203,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,204,"                toAppendTo.append(separator);
",0,0,0,1,2,0,6,0,0,6,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,206,"            CompositeFormat.formatDouble(vector.getEntry(i), format, toAppendTo, pos);
",0,0,0,2,4,0,16,0,0,16,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,210,"        toAppendTo.append(suffix);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,212,"        return toAppendTo;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,224,"        final ParsePosition parsePosition = new ParsePosition(0);
",2,0,0,1,2,1,0,4,0,7,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,225,"        final ArrayRealVector result = parse(source, parsePosition);
",2,0,0,1,2,1,6,2,0,11,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,226,"        if (parsePosition.getIndex() == 0) {
",0,1,0,2,5,0,4,0,0,5,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,227,"            throw new MathParseException(source,
",2,0,0,0,1,0,0,2,0,4,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,231,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,242,"        int initialIndex = pos.getIndex();
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,245,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,246,"        if (!CompositeFormat.parseFixedstring(source, trimmedPrefix, pos)) {
",0,0,0,2,5,0,10,0,0,11,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,247,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,251,"        List<Number> components = new ArrayList<Number>();
",2,0,0,1,2,0,0,8,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,252,"        for (boolean loop = true; loop;){
",4,0,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,254,"            if (!components.isEmpty()) {
",0,0,0,2,5,0,4,0,0,5,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,255,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,256,"                if (!CompositeFormat.parseFixedstring(source, trimmedSeparator, pos)) {
",0,0,0,2,5,0,10,0,0,11,71,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,257,"                    loop = false;
",2,0,0,0,0,0,0,0,0,4,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,261,"            if (loop) {
",2,0,0,1,3,0,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,262,"                CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,263,"                Number component = CompositeFormat.parseNumber(source, format, pos);
",2,0,0,1,2,0,10,2,0,14,68,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,264,"                if (component != null) {
",2,1,0,1,3,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,265,"                    components.add(component);
",0,0,0,1,2,0,6,0,0,6,26,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,269,"                    pos.setIndex(initialIndex);
",0,0,0,1,2,0,6,0,0,6,27,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,270,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,272,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,277,"        CompositeFormat.parseAndIgnoreWhitespace(source, pos);
",0,0,0,1,2,0,8,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,278,"        if (!CompositeFormat.parseFixedstring(source, trimmedSuffix, pos)) {
",0,0,0,2,5,0,10,0,0,11,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,279,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,283,"        double[] data = new double[components.size()];
",2,0,0,3,6,0,4,0,0,6,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,284,"        for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,285,"            data[i] = components.get(i).doubleValue();
",0,0,1,3,6,0,8,0,0,13,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/linear/RealVectorFormat,6,287,"        return new ArrayRealVector(data, false);
",2,0,0,1,2,1,0,2,0,5,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,665,"        walkInOptimizedOrder(new DefaultFieldMatrixPreservingVisitor<T>(field.getZero()) {
",0,0,0,2,6,0,6,4,0,10,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,669,"                out.setEntry(column, row, value);
",0,0,0,1,2,0,10,0,0,10,33,11,0.00000,0
defect4j,math,org/apache/commons/math3/linear/AbstractFieldMatrix,6,670,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,36,"    private UnivariateSolverUtils() {}
",2,0,0,2,4,1,0,0,0,3,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,53,"        if (function == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,54,"            throw new NullArgumentException(LocalizedFormats.FUNCTION);
",4,0,0,1,2,0,0,2,0,6,59,7,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,56,"        final UnivariateSolver solver = new BrentSolver();
",2,0,0,1,2,1,0,4,0,7,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,57,"        return solver.solve(Integer.MAX_VALUE, function, x0, x1);
",4,0,0,1,2,1,10,0,0,14,57,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,78,"        if (function == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,79,"            throw new NullArgumentException(LocalizedFormats.FUNCTION);
",4,0,0,1,2,0,0,2,0,6,59,7,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,81,"        final UnivariateSolver solver = new BrentSolver(absoluteAccuracy);
",4,0,0,1,2,1,0,4,0,9,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,82,"        return solver.solve(Integer.MAX_VALUE, function, x0, x1);
",4,0,0,1,2,1,10,0,0,14,57,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,107,"        if (allowedSolution == AllowedSolution.ANY_SIDE) {
",6,1,0,1,3,0,0,0,0,7,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,109,"            return baseRoot;
",2,0,0,0,0,1,0,0,0,2,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,113,"        final double step = FastMath.max(bracketing.getAbsoluteAccuracy(),
",2,0,0,1,3,1,8,0,0,11,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,115,"        double xLo        = FastMath.max(min, baseRoot - step);
",6,1,0,1,2,0,6,0,0,13,55,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,116,"        double fLo        = f.value(xLo);
",2,0,0,1,2,0,6,0,0,8,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,117,"        double xHi        = FastMath.min(max, baseRoot + step);
",6,1,0,1,2,0,6,0,0,13,55,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,118,"        double fHi        = f.value(xHi);
",2,0,0,1,2,0,6,0,0,8,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,119,"        int remainingEval = maxEval - 2;
",4,1,0,0,0,0,0,0,0,5,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,120,"        while (remainingEval > 0) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,122,"            if ((fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0)) {
",8,7,0,3,7,0,0,0,0,15,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,124,"                return bracketing.solve(remainingEval, f, xLo, xHi, baseRoot, allowedSolution);
",0,0,0,1,2,1,16,0,0,16,79,9,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,128,"            boolean changeLo = false;
",2,0,0,0,0,0,0,0,0,3,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,129,"            boolean changeHi = false;
",2,0,0,0,0,0,0,0,0,3,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,130,"            if (fLo < fHi) {
",4,1,0,1,3,0,0,0,0,5,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,132,"                if (fLo >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,133,"                    changeLo = true;
",2,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,135,"                    changeHi = true;
",2,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,137,"            } else if (fLo > fHi) {
",4,1,0,1,4,0,0,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,139,"                if (fLo <= 0) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,140,"                    changeLo = true;
",2,0,0,0,0,0,0,0,0,4,16,11,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,142,"                    changeHi = true;
",2,0,0,0,0,0,0,0,0,4,16,11,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,146,"                changeLo = true;
",2,0,0,0,0,0,0,0,0,4,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,147,"                changeHi = true;
",2,0,0,0,0,0,0,0,0,4,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,151,"            if (changeLo) {
",2,0,0,1,3,0,0,0,0,2,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,152,"                xLo = FastMath.max(min, xLo - step);
",6,1,0,1,2,0,6,0,0,14,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,153,"                fLo  = f.value(xLo);
",2,0,0,1,2,0,6,0,0,9,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,154,"                remainingEval--;
",2,0,0,0,0,0,0,0,0,3,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,158,"            if (changeHi) {
",2,0,0,1,3,0,0,0,0,2,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,159,"                xHi = FastMath.min(max, xHi + step);
",6,1,0,1,2,0,6,0,0,14,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,160,"                fHi  = f.value(xHi);
",2,0,0,1,2,0,6,0,0,9,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,161,"                remainingEval--;
",2,0,0,0,0,0,0,0,0,3,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,164,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,166,"        throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING,
",4,0,0,0,1,0,0,2,0,6,67,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,218,"        return bracket(function, initial, lowerBound, upperBound, Integer.MAX_VALUE);
",4,0,0,1,2,1,10,0,0,14,77,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,260,"        if (function == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,261,"            throw new NullArgumentException(LocalizedFormats.FUNCTION);
",4,0,0,1,2,0,0,2,0,6,59,7,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,263,"        if (maximumIterations <= 0)  {
",2,1,0,1,3,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,264,"            throw new NotStrictlyPositiveException(LocalizedFormats.INVALID_MAX_ITERATIONS, maximumIterations);
",6,0,0,1,2,0,0,2,0,8,99,7,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,266,"        verifySequence(lowerBound, initial, upperBound);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,268,"        double a = initial;
",4,0,0,0,0,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,269,"        double b = initial;
",4,0,0,0,0,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,272,"        int numIterations = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,275,"            a = FastMath.max(a - 1.0, lowerBound);
",4,1,0,1,2,0,6,0,0,12,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,276,"            b = FastMath.min(b + 1.0, upperBound);
",4,1,0,1,2,0,6,0,0,12,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,277,"            fa = function.value(a);
",2,0,0,1,2,0,6,0,0,9,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,279,"            fb = function.value(b);
",2,0,0,1,2,0,6,0,0,9,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,280,"            ++numIterations;
",2,0,0,0,0,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,281,"        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&
",8,4,0,2,6,0,0,0,0,12,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,284,"        if (fa * fb > 0.0) {
",4,2,0,1,3,0,0,0,0,6,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,285,"            throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING,
",4,0,0,0,1,0,0,2,0,6,67,7,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,291,"        return new double[] {a, b};
",4,0,0,2,4,1,0,0,0,4,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,302,"        return (a + b) * 0.5;
",4,2,0,1,2,1,0,0,0,6,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,321,"        if (function == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,322,"            throw new NullArgumentException(LocalizedFormats.FUNCTION);
",4,0,0,1,2,0,0,2,0,6,59,7,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,324,"        final double fLo = function.value(lower);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,325,"        final double fHi = function.value(upper);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,326,"        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);
",8,7,0,2,4,1,0,0,0,15,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,340,"        return (start < mid) && (mid < end);
",8,3,0,2,4,1,0,0,0,11,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,354,"            throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,
",4,0,0,0,1,0,0,2,0,6,79,7,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,392,"        if (function == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,393,"            throw new NullArgumentException(LocalizedFormats.FUNCTION);
",4,0,0,1,2,0,0,2,0,6,59,7,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,395,"        verifyInterval(lower, upper);
",0,0,0,1,2,0,6,0,0,6,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,396,"        if (!isBracketing(function, lower, upper)) {
",0,0,0,2,5,0,8,0,0,9,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,397,"            throw new NoBracketingException(lower, upper,
",4,0,0,0,1,0,0,2,0,6,45,7,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/UnivariateSolverUtils,6,401,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoBracketingException,6,51,"        this(LocalizedFormats.SAME_SIGN_AT_ENDPOINTS, lo, hi, fLo, fHi);
",12,0,0,1,2,0,0,0,0,12,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoBracketingException,6,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoBracketingException,6,68,"        super(specific, lo, hi, fLo, fHi, args);
",12,0,0,1,2,0,0,0,0,12,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoBracketingException,6,69,"        this.lo = lo;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoBracketingException,6,70,"        this.hi = hi;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoBracketingException,6,71,"        this.fLo = fLo;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoBracketingException,6,72,"        this.fHi = fHi;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoBracketingException,6,73,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoBracketingException,6,81,"        return lo;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoBracketingException,6,89,"        return hi;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoBracketingException,6,97,"        return fLo;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NoBracketingException,6,105,"        return fHi;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,6,47,"        super(relativeAccuracy, absoluteAccuracy);
",4,0,0,1,2,0,0,0,0,4,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,6,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,6,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);
",6,0,0,1,2,0,0,0,0,6,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/AbstractUnivariateSolver,6,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,80,"        this(relativeAccuracy,
",2,0,0,0,1,0,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,102,"        return evaluations.getMaximalCount();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,201,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));
",6,3,0,2,4,1,10,0,0,19,60,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,208,"        return solve(maxEval, f, Double.NaN, Double.NaN, startValue);
",8,0,0,1,2,1,8,0,0,16,61,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,234,"        return UnivariateSolverUtils.isBracketing(function, lower, upper);
",0,0,0,1,2,1,10,0,0,10,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,248,"        return UnivariateSolverUtils.isSequence(start, mid, end);
",0,0,0,1,2,1,10,0,0,10,57,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,261,"        UnivariateSolverUtils.verifyInterval(lower, upper);
",0,0,0,1,2,0,8,0,0,8,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,262,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,294,"        UnivariateSolverUtils.verifyBracketing(function, lower, upper);
",0,0,0,1,2,0,10,0,0,10,63,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,295,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,311,"        } catch (MaxCountExceededException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BaseAbstractUnivariateSolver,6,312,"            throw new TooManyEvaluationsException(e.getMax());
",0,0,0,2,4,0,4,2,0,6,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,65,"        super(relativeAccuracy, absoluteAccuracy);
",4,0,0,1,2,0,0,0,0,4,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,77,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);
",6,0,0,1,2,0,0,0,0,6,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,104,"            return min;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,109,"            return brent(min, initial, yMin, yInitial);
",0,0,0,1,2,1,10,0,0,10,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,115,"            return max;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,123,"        throw new NoBracketingException(min, max, yMin, yMax);
",8,0,0,1,2,0,0,2,0,10,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,176,"                d = m;
",4,0,0,0,0,0,0,0,0,5,6,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,177,"                e = d;
",4,0,0,0,0,0,0,0,0,5,6,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,191,"                    q = fa / fc;
",6,1,0,0,0,0,0,0,0,8,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,192,"                    final double r = fb / fc;
",6,1,0,0,0,1,0,0,0,8,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,193,"                    p = s * (2 * m * q * (q - r) - (b - a) * (r - 1));
",18,7,0,4,8,0,0,0,0,26,50,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,194,"                    q = (q - 1) * (r - 1) * (s - 1);
",8,4,0,3,6,0,0,0,0,13,32,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,208,"                    d = m;
",4,0,0,0,0,0,0,0,0,5,6,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,209,"                    e = d;
",4,0,0,0,0,0,0,0,0,5,6,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BrentSolver,6,220,"                b += tol;
",4,0,0,0,0,0,0,0,0,5,9,9,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,103,"        return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
",0,0,0,2,4,1,6,0,0,6,75,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,112,"        final double scaledX  = (normalized ? FastMath.PI : 1) * t.getValue();
",8,1,0,2,4,1,4,0,0,14,70,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,113,"        final double scaledX2 = scaledX * scaledX;
",6,1,0,0,0,1,0,0,0,8,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,115,"        double[] f = new double[t.getOrder() + 1];
",2,1,0,3,6,0,4,0,0,7,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,117,"        if (FastMath.abs(scaledX) <= SHORTCUT) {
",2,1,0,2,5,0,6,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,119,"            for (int i = 0; i < f.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,120,"                final int k = i / 2;
",4,1,0,0,0,1,0,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,121,"                if ((i & 0x1) == 0) {
",2,2,0,2,5,0,0,0,0,4,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,123,"                    f[i] = (((k & 0x1) == 0) ? 1 : -1) *
",2,3,1,4,8,0,0,0,0,11,36,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,127,"                    f[i] = (((k & 0x1) == 0) ? -scaledX : scaledX) *
",6,3,1,4,8,0,0,0,0,15,48,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,134,"            final double inv = 1 / scaledX;
",4,1,0,0,0,1,0,0,0,6,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,135,"            final double cos = FastMath.cos(scaledX);
",2,0,0,1,2,1,6,0,0,9,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,136,"            final double sin = FastMath.sin(scaledX);
",2,0,0,1,2,1,6,0,0,9,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,138,"            f[0] = inv * sin;
",4,1,1,1,2,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,150,"            final double[] sc = new double[f.length];
",6,0,0,2,4,1,0,0,0,7,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,151,"            sc[0] = 1;
",0,0,1,1,2,0,0,0,0,3,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,153,"            double coeff = inv;
",4,0,0,0,0,0,0,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,154,"            for (int n = 1; n < f.length; ++n) {
",10,1,0,1,3,0,0,0,0,12,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,156,"                double s = 0;
",2,0,0,0,0,0,0,0,0,2,13,9,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,157,"                double c = 0;
",2,0,0,0,0,0,0,0,0,2,13,9,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,161,"                if ((n & 0x1) == 0) {
",2,2,0,2,5,0,0,0,0,4,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,163,"                    sc[n] = 0;
",0,0,1,1,2,0,0,0,0,5,10,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,164,"                    kStart = n;
",4,0,0,0,0,0,0,0,0,5,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,167,"                    sc[n] = sc[n - 1];
",2,1,1,2,4,0,0,0,0,10,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,168,"                    c = sc[n];
",2,0,1,1,2,0,0,0,0,7,10,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,169,"                    kStart = n - 1;
",4,1,0,0,0,0,0,0,0,6,15,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,173,"                for (int k = kStart; k > 1; k -= 2) {
",8,1,0,1,3,0,0,0,0,10,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,176,"                    sc[k]     = (k - n) * sc[k] - sc[k - 1];
",6,4,1,4,8,0,0,0,0,21,40,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,177,"                    s         = s * scaledX2 + sc[k];
",6,2,1,1,2,0,0,0,0,13,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,180,"                    sc[k - 1] = (k - 1 - n) * sc[k - 1] + sc[k -2];
",10,6,1,4,8,0,0,0,0,23,47,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,181,"                    c         = c * scaledX2 + sc[k - 1];
",8,3,1,1,2,0,0,0,0,14,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,184,"                sc[0] *= -n;
",2,0,1,1,2,0,0,0,0,6,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,185,"                s      = s * scaledX2 + sc[0];
",6,2,1,1,2,0,0,0,0,11,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,187,"                coeff *= inv;
",4,0,0,0,0,0,0,0,0,5,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,188,"                f[n]   = coeff * (s * sin + c * scaledX * cos);
",12,4,1,2,4,0,0,0,0,21,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,194,"        if (normalized) {
",2,0,0,1,3,0,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,195,"            double scale = FastMath.PI;
",6,0,0,0,0,0,0,0,0,6,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,196,"            for (int i = 1; i < f.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,197,"                f[i]  *= scale;
",2,0,1,1,2,0,0,0,0,7,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,198,"                scale *= FastMath.PI;
",6,0,0,0,0,0,0,0,0,7,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sinc,6,202,"        return t.compose(f);
",0,0,0,1,2,1,6,0,0,6,20,5,0.00000,0
