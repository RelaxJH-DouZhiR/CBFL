dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,"            return n;
",2,0,0,0,0,1,0,0,0,2,9,6,1.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,208,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");
",0,0,0,1,2,1,6,0,0,7,42,5,0.50000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,179,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.50000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,181,"        if ((k == 1) || (k == n - 1)) {
",6,4,0,3,7,0,0,0,0,10,31,4,0.50000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,184,"        long result = Math.round(binomialCoefficientDouble(n, k));
",2,0,0,2,4,0,10,0,0,12,58,5,0.50000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,185,"        if (result == Long.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.50000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,111,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.33333,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,113,"            ret = addAndCheck(b, a, msg);
",2,0,0,1,2,0,8,0,0,11,29,6,0.33333,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,117,"            if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.33333,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,134,"                if (a <= Long.MAX_VALUE - b) {
",8,2,0,1,3,0,0,0,0,10,30,8,0.33333,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,135,"                    ret = a + b;
",6,1,0,0,0,0,0,0,0,8,12,10,0.33333,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,141,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.33333,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,170,"        if (n < k) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.33333,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,174,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.33333,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,178,"        if ((n == k) || (k == 0)) {
",6,3,0,3,7,0,0,0,0,9,27,4,0.33333,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,236,"        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);
",0,1,0,3,6,1,14,0,0,15,64,5,0.11111,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,286,"        double logSum = 0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.06667,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,289,"        for (int i = k + 1; i <= n; i++) {
",10,2,0,1,3,0,0,0,0,13,34,4,0.06667,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,290,"            logSum += Math.log((double)i);
",4,0,0,2,4,0,4,0,0,9,30,6,0.06667,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,294,"        for (int i = 2; i <= n - k; i++) {
",10,2,0,1,3,0,0,0,0,13,34,4,0.06667,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,295,"            logSum -= Math.log((double)i);
",4,0,0,2,4,0,4,0,0,9,30,6,0.06667,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,298,"        return logSum;      
",2,0,0,0,0,1,0,0,0,2,14,4,0.06667,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,269,"        if ((k == 1) || (k == n - 1)) {
",6,4,0,3,7,0,0,0,0,10,31,4,0.06250,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,258,"        if (n < k) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,262,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,266,"        if ((n == k) || (k == 0)) {
",6,3,0,3,7,0,0,0,0,9,27,4,0.05556,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,350,"    private static final long[] factorials = new long[] 
",2,0,0,2,4,3,0,0,0,5,51,2,0.00495,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,63,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,77,"        long s = (long)x + (long)y;
",6,1,0,2,4,0,0,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,78,"        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,53,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,79,"            throw new ArithmeticException(""overflow: add"");
",0,0,0,1,2,0,0,2,0,3,47,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,81,"        return (int)s;
",2,0,0,1,2,1,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,118,"                if (b < 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,120,"                    if (Long.MIN_VALUE - b <= a) {
",8,2,0,1,3,0,0,0,0,10,30,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,121,"                        ret = a + b;
",6,1,0,0,0,0,0,0,0,8,12,12,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,123,"                        throw new ArithmeticException(msg);
",2,0,0,1,2,0,0,2,0,4,35,13,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,127,"                    ret = a + b;
",6,1,0,0,0,0,0,0,0,8,12,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,137,"                    throw new ArithmeticException(msg);
",2,0,0,1,2,0,0,2,0,4,35,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,171,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,175,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,186,"            throw new ArithmeticException(
",0,0,0,0,1,0,0,2,0,2,30,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,259,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,263,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,267,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,270,"            return Math.log((double) n);
",2,0,0,2,4,1,4,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,309,"        return (Math.exp(x) + Math.exp(-x)) / 2.0;
",2,2,0,3,6,1,10,0,0,15,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,321,"        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);
",4,3,0,4,8,1,12,0,0,19,56,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,335,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,336,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,338,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,339,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,341,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,342,"            if (!equals(x[i], y[i])) {
",0,0,1,4,9,0,2,0,0,11,26,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,343,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,346,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,379,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,380,"            throw new IllegalArgumentException(""must have n >= 0 for n!"");
",0,0,0,1,2,0,0,2,0,3,62,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,382,"        if (n > 20) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,383,"            throw new ArithmeticException(
",0,0,0,0,1,0,0,2,0,2,30,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,386,"        return factorials[n];
",0,0,1,1,2,1,0,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,410,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,411,"            throw new IllegalArgumentException(""must have n >= 0 for n!"");
",0,0,0,1,2,0,0,2,0,3,62,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,413,"        if (n < 21) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,414,"            return factorial(n);
",0,0,0,1,2,1,4,0,0,4,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,416,"        return Math.floor(Math.exp(factorialLog(n)) + 0.5);
",0,1,0,3,6,1,12,0,0,13,51,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,433,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,434,"            throw new IllegalArgumentException(""must have n > 0 for n!"");
",0,0,0,1,2,0,0,2,0,3,61,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,436,"        if (n < 21) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,437,"            return Math.log(factorial(n));
",0,0,0,2,4,1,8,0,0,8,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,439,"        double logSum = 0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,440,"        for (int i = 2; i <= n; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,441,"            logSum += Math.log((double)i);
",4,0,0,2,4,0,4,0,0,9,30,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,443,"        return logSum;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,460,"        if ((u == 0) || (v == 0)) {
",4,3,0,3,7,0,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,461,"            return (Math.abs(u) + Math.abs(v));
",0,1,0,3,6,1,12,0,0,13,35,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,468,"        if (u > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,469,"            u = -u;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,471,"        if (v > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,472,"            v = -v;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,475,"        int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,476,"        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
",6,7,0,3,7,0,0,0,0,13,69,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,478,"            u /= 2;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,479,"            v /= 2;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,480,"            k++; // cast out twos.
",2,0,0,0,0,0,0,0,0,3,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,482,"        if (k == 31) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,483,"            throw new ArithmeticException(""overflow: gcd is 2^31"");
",0,0,0,1,2,0,0,2,0,3,55,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,487,"        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
",8,3,0,3,6,0,0,0,0,12,46,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,493,"            while ((t & 1) == 0) { // while t is even..
",2,2,0,2,5,0,0,0,0,4,43,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,494,"                t /= 2; // cast out twos
",2,0,0,0,0,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,497,"            if (t > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,498,"                u = -t;
",4,0,0,0,0,0,0,0,0,6,7,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,500,"                v = t;
",4,0,0,0,0,0,0,0,0,5,6,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,503,"            t = (v - u) / 2;
",6,2,0,1,2,0,0,0,0,9,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,506,"        } while (t != 0);
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,507,"        return -u * (1 << k); // gcd is u*2^k
",4,2,0,1,2,1,0,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,517,"        return new Double(value).hashCode();
",2,0,0,2,4,1,2,2,0,6,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,528,"        return Arrays.hashCode(value);
",0,0,0,1,2,1,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,539,"        return (x >= ZB) ? PB : NB;
",8,1,0,1,2,1,0,0,0,9,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,551,"        if (Double.isNaN(x)) {
",0,0,0,2,5,0,6,0,0,6,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,552,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,554,"        return (x >= 0.0) ? 1.0 : -1.0;
",2,1,0,1,2,1,0,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,565,"        if (Float.isNaN(x)) {
",0,0,0,2,5,0,6,0,0,6,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,566,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,568,"        return (x >= 0.0F) ? 1.0F : -1.0F;
",2,1,0,1,2,1,0,0,0,4,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,578,"        return (x >= 0) ? 1 : -1;
",2,1,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,588,"        return (x >= 0L) ? 1L : -1L;
",2,1,0,1,2,1,0,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,599,"        return (x >= ZS) ? PS : NS;
",8,1,0,1,2,1,0,0,0,9,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,612,"        return Math.abs(mulAndCheck(a / gcd(a, b), b));
",2,1,0,3,6,1,14,0,0,17,47,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,632,"        return Math.log(x)/Math.log(base);
",0,1,0,2,4,1,12,0,0,13,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,646,"        long m = ((long)x) * ((long)y);
",6,1,0,4,8,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,647,"        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,53,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,648,"            throw new ArithmeticException(""overflow: mul"");
",0,0,0,1,2,0,0,2,0,3,47,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,650,"        return (int)m;
",2,0,0,1,2,1,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,665,"        String msg = ""overflow: multiply"";
",2,0,0,0,0,0,0,2,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,666,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,668,"            ret = mulAndCheck(b, a);
",2,0,0,1,2,0,6,0,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,670,"            if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,671,"                if (b < 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,673,"                    if (a >= Long.MAX_VALUE / b) {
",8,2,0,1,3,0,0,0,0,10,30,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,674,"                        ret = a * b;
",6,1,0,0,0,0,0,0,0,8,12,12,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,676,"                        throw new ArithmeticException(msg);
",2,0,0,1,2,0,0,2,0,4,35,13,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,678,"                } else if (b > 0) {
",2,1,0,1,4,0,0,0,0,3,19,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,680,"                    if (Long.MIN_VALUE / b <= a) {
",8,2,0,1,3,0,0,0,0,10,30,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,681,"                        ret = a * b;
",6,1,0,0,0,0,0,0,0,8,12,13,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,683,"                        throw new ArithmeticException(msg);
",2,0,0,1,2,0,0,2,0,4,35,14,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,688,"                    ret = 0;
",2,0,0,0,0,0,0,0,0,3,8,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,690,"            } else if (a > 0) {
",2,1,0,1,4,0,0,0,0,3,19,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,695,"                if (a <= Long.MAX_VALUE / b) {
",8,2,0,1,3,0,0,0,0,10,30,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,696,"                    ret = a * b;
",6,1,0,0,0,0,0,0,0,8,12,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,698,"                    throw new ArithmeticException(msg);
",2,0,0,1,2,0,0,2,0,4,35,12,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,702,"                ret = 0;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,705,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,728,"        if (Double.isNaN(d) || Double.isInfinite(d)) {
",0,1,0,3,7,0,12,0,0,13,46,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,729,"                return d;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,730,"        } else if (d == 0) {
",2,1,0,1,4,0,0,0,0,3,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,731,"                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,62,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,737,"        long bits     = Double.doubleToLongBits(d);
",2,0,0,1,2,0,6,0,0,8,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,738,"        long sign     = bits & 0x8000000000000000L;
",4,1,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,739,"        long exponent = bits & 0x7ff0000000000000L;
",4,1,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,740,"        long mantissa = bits & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,742,"        if (d * (direction - d) >= 0) {
",6,3,0,2,5,0,0,0,0,9,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,744,"                if (mantissa == 0x000fffffffffffffL) {
",2,1,0,1,3,0,0,0,0,3,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,745,"                        return Double.longBitsToDouble(sign |
",2,1,0,0,1,1,4,0,0,7,37,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,748,"                        return Double.longBitsToDouble(sign |
",2,1,0,0,1,1,4,0,0,7,37,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,753,"                if (mantissa == 0L) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,754,"                        return Double.longBitsToDouble(sign |
",2,1,0,0,1,1,4,0,0,7,37,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,758,"                        return Double.longBitsToDouble(sign |
",2,1,0,0,1,1,4,0,0,7,37,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,777,"        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {
",2,2,0,4,9,0,12,0,0,16,58,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,778,"            return d;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,782,"        final long bits     = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,783,"        final long exponent = bits & 0x7ff0000000000000L;
",4,1,0,0,0,1,0,0,0,6,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,784,"        final long rest     = bits & 0x800fffffffffffffL;
",4,1,0,0,0,1,0,0,0,6,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,787,"        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));
",8,3,0,4,8,1,0,0,0,12,70,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,788,"        return Double.longBitsToDouble(newBits);
",0,0,0,1,2,1,6,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,812,"         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);
",14,5,0,2,4,1,4,0,0,23,64,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,825,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);
",4,0,0,1,2,1,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,842,"            return (new BigDecimal
",0,0,0,0,1,1,0,2,0,2,22,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,846,"        } catch (NumberFormatException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,847,"            if (Double.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,27,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,848,"                return x;          
",2,0,0,0,0,1,0,0,0,2,9,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,850,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,865,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);
",4,0,0,1,2,1,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,881,"        float sign = indicator(x);
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,882,"        float factor = (float)Math.pow(10.0f, scale) * sign;
",4,1,0,2,4,0,6,0,0,11,52,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,883,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;
",6,2,0,2,4,1,6,0,0,14,71,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,900,"        switch (roundingMethod) {
",2,0,0,1,3,0,0,0,0,2,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,902,"            if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,903,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,8,0,0,15,69,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,905,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,8,0,0,15,68,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,907,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,909,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,8,0,0,15,69,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,910,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,912,"            if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,913,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,8,0,0,15,68,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,915,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,8,0,0,15,69,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,917,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,919,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);
",6,0,0,1,2,0,4,0,0,11,57,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,920,"            double fraction = unscaled - Math.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,50,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,921,"            if (fraction > 0.5) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,922,"                unscaled = Math.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,31,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,924,"                unscaled = Math.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,32,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,926,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,929,"            double fraction = unscaled - Math.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,50,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,930,"            if (fraction > 0.5) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,931,"                unscaled = Math.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,31,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,932,"            } else if (fraction < 0.5) {
",2,1,0,1,4,0,0,0,0,3,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,933,"                unscaled = Math.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,936,"                if (Math.floor(unscaled) / 2.0 == Math.floor(Math
",0,3,0,1,4,0,12,0,0,15,49,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,938,"                    unscaled = Math.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,32,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,940,"                    unscaled = Math.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,31,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,943,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,946,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);
",6,0,0,1,2,0,4,0,0,11,57,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,947,"            double fraction = unscaled - Math.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,50,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,948,"            if (fraction >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,949,"                unscaled = Math.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,31,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,951,"                unscaled = Math.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,32,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,953,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,956,"            if (unscaled != Math.floor(unscaled)) {
",2,1,0,2,5,0,6,0,0,9,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,957,"                throw new ArithmeticException(""Inexact result from rounding"");
",0,0,0,1,2,0,0,2,0,3,62,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,961,"            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,8,0,0,15,69,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,962,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,964,"            throw new IllegalArgumentException(""Invalid rounding method."");
",0,0,0,1,2,0,0,2,0,3,63,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,966,"        return unscaled;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,980,"        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;
",14,2,0,2,4,1,0,0,0,16,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,996,"        if (Double.isNaN(x)) {
",0,0,0,2,5,0,6,0,0,6,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,997,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,999,"        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;
",4,2,0,2,4,1,0,0,0,7,49,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1014,"        if (Float.isNaN(x)) {
",0,0,0,2,5,0,6,0,0,6,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1015,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1017,"        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;
",4,2,0,2,4,1,0,0,0,7,54,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1031,"        return (x == 0) ? 0 : (x > 0) ? 1 : -1;
",4,2,0,2,4,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1045,"        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;
",4,2,0,2,4,1,0,0,0,7,44,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1060,"        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;
",14,2,0,2,4,1,0,0,0,16,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1071,"        return (Math.exp(x) - Math.exp(-x)) / 2.0;
",2,2,0,3,6,1,10,0,0,15,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1085,"        long s = (long)x - (long)y;
",6,1,0,2,4,0,0,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1086,"        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,53,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1087,"            throw new ArithmeticException(""overflow: subtract"");
",0,0,0,1,2,0,0,2,0,3,52,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1089,"        return (int)s;
",2,0,0,1,2,1,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1104,"        String msg = ""overflow: subtract"";
",2,0,0,0,0,0,0,2,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1105,"        if (b == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1106,"            if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1107,"                ret = a - b;
",6,1,0,0,0,0,0,0,0,8,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1109,"                throw new ArithmeticException(msg);
",2,0,0,1,2,0,0,2,0,4,35,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1113,"            ret = addAndCheck(a, -b, msg);
",4,0,0,1,2,0,6,0,0,12,30,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,1115,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
