dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,112,"        this.chromosomes.addAll(chromosomeColl);
",2,0,0,1,2,0,4,0,0,6,40,5,1.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,113,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,209,"        return chromosomes.iterator();
",0,0,0,1,2,1,4,0,0,4,30,5,1.00000,1
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,108,"        if (chromosomes.size() + chromosomeColl.size() > populationLimit) {
",2,2,0,3,7,0,8,0,0,12,67,4,0.50000,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,39,"        super(representation);
",2,0,0,1,2,0,0,0,0,2,22,4,0.12500,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,40,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,58,"        for (int i : chromosomeRepresentation) {
",4,0,0,1,3,0,0,0,0,4,40,4,0.12500,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,59,"            if (i < 0 || i >1) {
",4,3,0,1,3,0,0,0,0,7,20,6,0.12500,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,63,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,73,"        List<Integer> rList= new ArrayList<Integer> (length);
",4,0,0,1,2,0,0,8,0,12,53,4,0.12500,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,74,"        for (int j=0; j<length; j++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.12500,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,75,"            rList.add(GeneticAlgorithm.getRandomGenerator().nextInt(2));
",0,0,0,3,6,0,10,0,0,10,60,7,0.12500,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,77,"        return rList;
",2,0,0,0,0,1,0,0,0,2,13,4,0.12500,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,42,"    public AbstractListChromosome(final List<T> representation) {
",4,0,0,1,3,2,0,4,0,10,61,2,0.11111,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,43,"        checkValidity(representation);
",0,0,0,1,2,0,4,0,0,4,30,5,0.11111,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,44,"        this.representation = Collections.unmodifiableList(new ArrayList<T> (representation));
",4,0,0,2,4,0,4,4,0,13,86,4,0.11111,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/random/JDKRandomGenerator,34,28,"public class JDKRandomGenerator extends Random implements RandomGenerator {
",2,0,0,0,1,1,0,4,0,7,75,1,0.10000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,40,"    private static RandomGenerator randomGenerator = new JDKRandomGenerator();
",2,0,0,1,2,2,0,4,0,8,74,2,0.10000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,104,"        return randomGenerator;
",2,0,0,0,0,1,0,0,0,2,23,4,0.10000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,34,28,"public abstract class Chromosome implements Comparable<Chromosome>,Fitness {
",2,0,0,0,1,2,0,6,0,10,76,1,0.07143,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,34,33,"    private double fitness = NO_FITNESS;
",4,0,0,0,0,1,0,0,0,5,36,2,0.07143,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,52,"        this(Collections.<Chromosome> emptyList(), populationLimit);
",2,0,0,2,4,0,4,2,0,8,60,4,0.06667,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,75,"        this.populationLimit = populationLimit;
",4,0,0,0,0,0,0,0,0,5,39,4,0.05263,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,76,"        this.chromosomes = new ArrayList<Chromosome>(populationLimit);
",4,0,0,1,2,0,0,4,0,9,62,4,0.05263,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,77,"        this.chromosomes.addAll(chromosomes);
",2,0,0,1,2,0,4,0,0,6,37,5,0.05263,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,71,"        if (chromosomes.size() > populationLimit) {
",2,1,0,2,5,0,4,0,0,7,43,4,0.05000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,64,"    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {
",6,0,0,1,3,3,0,4,0,13,86,2,0.04545,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,65,"        if (chromosomes == null) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.04545,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,68,"        if (populationLimit <= 0) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.04545,0
defect4j,math,org/apache/commons/math3/random/JDKRandomGenerator,34,35,"        setSeed((long) seed);
",2,0,0,2,4,0,2,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/JDKRandomGenerator,34,36,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/JDKRandomGenerator,34,41,"        final long prime = 4294967291l;
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/JDKRandomGenerator,34,43,"        long combined = 0l;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/JDKRandomGenerator,34,44,"        for (int s : seed) {
",4,0,0,1,3,0,0,0,0,4,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/JDKRandomGenerator,34,45,"            combined = combined * prime + s;
",8,2,0,0,0,0,0,0,0,11,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/JDKRandomGenerator,34,47,"        setSeed(combined);
",0,0,0,1,2,0,4,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/JDKRandomGenerator,34,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,66,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,69,"            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);
",6,0,0,1,2,0,0,2,0,8,96,7,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,72,"            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,
",4,0,0,0,1,0,0,2,0,6,101,7,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,90,"        if (chromosomes == null) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,91,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,93,"        if (chromosomes.size() > populationLimit) {
",2,1,0,2,5,0,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,94,"            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,
",4,0,0,0,1,0,0,2,0,6,101,7,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,97,"        this.chromosomes.clear();
",2,0,0,1,2,0,2,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,98,"        this.chromosomes.addAll(chromosomes);
",2,0,0,1,2,0,4,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,99,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,109,"            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,
",4,0,0,0,1,0,0,2,0,6,101,7,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,120,"        return Collections.unmodifiableList(chromosomes);
",0,0,0,1,2,1,6,0,0,6,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,128,"        return chromosomes;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,138,"        if (chromosomes.size() >= populationLimit) {
",2,1,0,2,5,0,4,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,139,"            throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,
",4,0,0,0,1,0,0,2,0,6,101,7,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,142,"        this.chromosomes.add(chromosome);
",2,0,0,1,2,0,4,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,143,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,151,"        Chromosome bestChromosome = this.chromosomes.get(0);
",4,0,0,1,2,0,2,2,0,8,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,152,"        for (Chromosome chromosome : this.chromosomes) {
",4,0,0,1,3,0,0,2,0,6,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,153,"            if (chromosome.compareTo(bestChromosome) > 0) {
",0,1,0,2,5,0,6,0,0,7,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,155,"                bestChromosome = chromosome;
",4,0,0,0,0,0,0,0,0,5,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,157,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,158,"        return bestChromosome;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,166,"        return this.populationLimit;
",2,0,0,0,0,1,0,0,0,2,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,177,"        if (populationLimit <= 0) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,178,"            throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);
",6,0,0,1,2,0,0,2,0,8,96,7,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,180,"        if (populationLimit < chromosomes.size()) {
",2,1,0,2,5,0,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,181,"            throw new NumberIsTooSmallException(populationLimit, chromosomes.size(), true);
",2,0,0,2,4,0,4,2,0,9,79,7,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,183,"        this.populationLimit = populationLimit;
",4,0,0,0,0,0,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,184,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,191,"        return this.chromosomes.size();
",2,0,0,1,2,1,2,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,199,"        return this.chromosomes.toString();
",2,0,0,1,2,1,2,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,72,"                            final SelectionPolicy selectionPolicy) {
",2,0,0,0,2,1,0,2,0,5,40,3,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,58,"    private int generationsEvolved = 0;
",2,0,0,0,0,1,0,0,0,3,35,2,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,74,"        if (crossoverRate < 0 || crossoverRate > 1) {
",4,3,0,1,3,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,75,"            throw new OutOfRangeException(LocalizedFormats.CROSSOVER_RATE,
",4,0,0,0,1,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,78,"        if (mutationRate < 0 || mutationRate > 1) {
",4,3,0,1,3,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,79,"            throw new OutOfRangeException(LocalizedFormats.MUTATION_RATE,
",4,0,0,0,1,0,0,2,0,6,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,82,"        this.crossoverPolicy = crossoverPolicy;
",4,0,0,0,0,0,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,83,"        this.crossoverRate = crossoverRate;
",4,0,0,0,0,0,0,0,0,5,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,84,"        this.mutationPolicy = mutationPolicy;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,85,"        this.mutationRate = mutationRate;
",4,0,0,0,0,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,86,"        this.selectionPolicy = selectionPolicy;
",4,0,0,0,0,0,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,87,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,95,"        randomGenerator = random;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,96,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,118,"        Population current = initial;
",4,0,0,0,0,0,0,2,0,6,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,119,"        generationsEvolved = 0;
",2,0,0,0,0,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,120,"        while (!condition.isSatisfied(current)) {
",0,0,0,2,5,0,6,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,121,"            current = nextGeneration(current);
",2,0,0,1,2,0,4,0,0,7,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,122,"            generationsEvolved++;
",2,0,0,0,0,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,124,"        return current;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,150,"        Population nextGeneration = current.nextGeneration();
",2,0,0,1,2,0,4,2,0,8,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,152,"        RandomGenerator randGen = getRandomGenerator();
",2,0,0,1,2,0,2,2,0,6,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,154,"        while (nextGeneration.getPopulationSize() < nextGeneration.getPopulationLimit()) {
",0,1,0,3,7,0,8,0,0,9,82,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,156,"            ChromosomePair pair = getSelectionPolicy().select(current);
",2,0,0,2,4,0,6,2,0,10,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,159,"            if (randGen.nextDouble() < getCrossoverRate()) {
",0,1,0,3,7,0,6,0,0,7,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,161,"                pair = getCrossoverPolicy().crossover(pair.getFirst(), pair.getSecond());
",2,0,0,4,8,0,12,0,0,15,73,8,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,165,"            if (randGen.nextDouble() < getMutationRate()) {
",0,1,0,3,7,0,6,0,0,7,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,167,"                pair = new ChromosomePair(
",2,0,0,0,1,0,0,2,0,5,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,173,"            nextGeneration.addChromosome(pair.getFirst());
",0,0,0,2,4,0,8,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,175,"            if (nextGeneration.getPopulationSize() < nextGeneration.getPopulationLimit()) {
",0,1,0,3,7,0,8,0,0,9,79,6,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,177,"                nextGeneration.addChromosome(pair.getSecond());
",0,0,0,2,4,0,8,0,0,8,47,9,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,179,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,181,"        return nextGeneration;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,189,"        return crossoverPolicy;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,197,"        return crossoverRate;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,205,"        return mutationPolicy;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,213,"        return mutationRate;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,221,"        return selectionPolicy;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/GeneticAlgorithm,34,232,"        return generationsEvolved;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,34,46,"        this(LocalizedFormats.OUT_OF_RANGE_SIMPLE, wrong, lo, hi);
",10,0,0,1,2,0,0,0,0,10,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,34,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,34,62,"        super(specific, wrong, lo, hi);
",8,0,0,1,2,0,0,0,0,8,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,34,63,"        this.lo = lo;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,34,64,"        this.hi = hi;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,34,65,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,34,71,"        return lo;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/OutOfRangeException,34,77,"        return hi;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,34,46,"        super(pattern, wrong, arguments);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,34,47,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,34,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,34,54,"        return argument;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,34,44,"                                        Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,34,45,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,34,46,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,34,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,34,51,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,34,57,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,34,63,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,49,"        super(representation);
",2,0,0,1,2,0,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,50,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,60,"                throw new InvalidRepresentationException(LocalizedFormats.INVALID_BINARY_DIGIT,
",4,0,0,0,1,0,0,2,0,6,79,9,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,86,"        if (! (another instanceof BinaryChromosome)) {
",2,0,0,2,5,0,0,2,0,5,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,87,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,89,"        BinaryChromosome anotherBc = (BinaryChromosome) another;
",4,0,0,1,2,0,0,4,0,8,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,91,"        if (getLength() != anotherBc.getLength()) {
",0,1,0,3,7,0,6,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,92,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,95,"        for (int i=0; i< getRepresentation().size(); i++) {
",6,1,0,3,7,0,4,0,0,12,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,96,"            if (!(getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i)))) {
",0,0,0,7,15,0,16,0,0,17,81,6,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,97,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/BinaryChromosome,34,101,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,52,"        this(Arrays.asList(representation));
",0,0,0,2,4,0,6,0,0,6,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,69,"        return representation;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,77,"        return getRepresentation().size();
",0,0,0,2,4,1,4,0,0,4,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/AbstractListChromosome,34,100,"        return String.format(""(f=%s %s)"", getFitness(), getRepresentation());
",0,0,0,4,8,1,8,0,0,9,69,5,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,34,45,"        if (this.fitness == NO_FITNESS) {
",4,1,0,1,3,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,34,47,"            this.fitness = fitness();
",2,0,0,1,2,0,2,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,34,49,"        return this.fitness;
",2,0,0,0,0,1,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,34,65,"        return ((Double)this.getFitness()).compareTo(another.getFitness());
",0,0,0,5,10,1,8,2,0,10,67,5,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,34,76,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,34,89,"        for (Chromosome anotherChr : population) {
",4,0,0,1,3,0,0,2,0,6,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,34,90,"            if (this.isSame(anotherChr)) {
",0,0,0,2,5,0,4,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,34,91,"                return anotherChr;
",2,0,0,0,0,1,0,0,0,2,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,34,93,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,34,94,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,34,104,"        Chromosome sameChromosome = findSameChromosome(population);
",2,0,0,1,2,0,4,2,0,8,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,34,105,"        if (sameChromosome != null) {
",2,1,0,1,3,0,0,0,0,3,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,34,106,"            fitness = sameChromosome.getFitness();
",2,0,0,1,2,0,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/Chromosome,34,108,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/InvalidRepresentationException,34,40,"       super(pattern, args);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/genetics/InvalidRepresentationException,34,41,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,34,41,"        this(LocalizedFormats.NULL_NOT_ALLOWED);
",4,0,0,1,2,0,0,0,0,4,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,34,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,34,50,"        super(pattern, arguments);
",4,0,0,1,2,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,34,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,34,37,"        super(value, 0, true);
",2,0,0,1,2,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,34,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,34,47,"        super(specific, value, 0, true);
",4,0,0,1,2,0,0,0,0,5,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotPositiveException,34,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,34,50,"        this(boundIsAllowed ?
",2,0,0,0,1,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,34,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,34,68,"        super(specific, wrong, min);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,34,70,"        this.min = min;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,34,71,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,34,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,34,78,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,34,85,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,34,50,"        this(boundIsAllowed ?
",2,0,0,0,1,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,34,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,34,67,"        super(specific, wrong, max);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,34,69,"        this.max = max;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,34,70,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,34,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,34,77,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooLargeException,34,84,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
