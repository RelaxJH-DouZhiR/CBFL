dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,"    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {
",8,3,0,3,7,0,0,0,0,11,65,4,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,212,"      initialStep = initialStepSize;
",4,0,0,0,0,0,0,0,0,5,30,6,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,252,"      return forward ? initialStep : -initialStep;
",6,0,0,0,0,1,0,0,0,7,44,7,0.50000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3373,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.16667,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.16667,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,334,"            handler.resetState(t, y);
",0,0,0,1,2,0,8,0,0,8,25,7,0.11111,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,172,"            nbPoints        = 2;
",2,0,0,0,0,0,0,0,0,3,20,6,0.09091,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,173,"            signChangeIndex = 1;
",2,0,0,0,0,0,0,0,0,3,20,6,0.09091,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);
",4,0,0,1,2,0,8,0,0,12,44,9,0.08333,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,341,"                    computeDerivatives(eventT, y, yDot);
",0,0,0,1,2,0,8,0,0,8,36,9,0.08333,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,342,"                    resetOccurred = true;
",2,0,0,0,0,0,0,0,0,4,21,8,0.08333,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,"                    return eventT;
",2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,329,"        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {
",8,3,0,4,9,0,4,0,0,16,77,4,0.07143,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,333,"        if (nextAction == EventHandler.Action.RESET_STATE) {
",8,1,0,1,3,0,0,0,0,9,52,4,0.07143,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,336,"        pendingEvent      = false;
",2,0,0,0,0,0,0,0,0,4,26,4,0.07143,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,337,"        pendingEventTime  = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.07143,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,339,"        return (nextAction == EventHandler.Action.RESET_STATE) ||
",8,2,0,1,2,1,0,0,0,10,57,4,0.07143,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,337,"                if (currentEvent.reset(eventT, eventY)) {
",0,0,0,2,5,0,8,0,0,8,41,7,0.07143,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,287,"                return nextX;
",2,0,0,0,0,1,0,0,0,2,13,8,0.07143,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,146,"        final double[] x = new double[maximalOrder + 1];
",4,1,0,2,4,1,0,0,0,6,48,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,147,"        final double[] y = new double[maximalOrder + 1];
",4,1,0,2,4,1,0,0,0,6,48,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,148,"        x[0] = getMin();
",0,0,1,2,4,0,2,0,0,5,16,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,149,"        x[1] = getStartValue();
",0,0,1,2,4,0,2,0,0,5,23,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,150,"        x[2] = getMax();
",0,0,1,2,4,0,2,0,0,5,16,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,151,"        verifySequence(x[0], x[1], x[2]);
",0,0,1,4,8,0,2,0,0,8,33,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,154,"        y[1] = computeObjectiveValue(x[1]);
",0,0,1,3,6,0,2,0,0,7,35,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,155,"        if (Precision.equals(y[1], 0.0, 1)) {
",0,0,1,3,7,0,4,0,0,6,37,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,161,"        y[0] = computeObjectiveValue(x[0]);
",0,0,1,3,6,0,2,0,0,7,35,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,162,"        if (Precision.equals(y[0], 0.0, 1)) {
",0,0,1,3,7,0,4,0,0,6,37,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,169,"        if (y[0] * y[1] < 0) {
",0,2,1,3,7,0,0,0,0,6,22,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,195,"        final double[] tmpX = new double[x.length];
",6,0,0,2,4,1,0,0,0,7,43,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,198,"        double xA    = x[signChangeIndex - 1];
",4,1,1,1,2,0,0,0,0,7,38,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,199,"        double yA    = y[signChangeIndex - 1];
",4,1,1,1,2,0,0,0,0,7,38,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,200,"        double absYA = FastMath.abs(yA);
",2,0,0,1,2,0,6,0,0,8,32,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,201,"        int agingA   = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,202,"        double xB    = x[signChangeIndex];
",2,0,1,1,2,0,0,0,0,6,34,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,203,"        double yB    = y[signChangeIndex];
",2,0,1,1,2,0,0,0,0,6,34,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,204,"        double absYB = FastMath.abs(yB);
",2,0,0,1,2,0,6,0,0,8,32,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,205,"        int agingB   = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,211,"            final double xTol = getAbsoluteAccuracy() +
",2,1,0,1,2,1,2,0,0,6,43,6,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,213,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {
",6,4,0,6,13,0,10,0,0,20,87,6,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,233,"            if (agingA >= MAXIMAL_AGING) {
",4,1,0,1,3,0,0,0,0,5,30,6,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,236,"            } else if (agingB >= MAXIMAL_AGING) {
",4,1,0,1,4,0,0,0,0,5,37,7,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,241,"                targetY = 0;
",2,0,0,0,0,0,0,0,0,3,12,9,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,246,"            int start = 0;
",2,0,0,0,0,0,0,0,0,2,14,7,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,247,"            int end   = nbPoints;
",4,0,0,0,0,0,0,0,0,4,21,7,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,251,"                System.arraycopy(x, start, tmpX, start, end - start);
",4,1,0,1,2,0,12,0,0,17,53,9,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,252,"                nextX = guessX(targetY, tmpX, y, start, end);
",2,0,0,1,2,0,12,0,0,15,45,8,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,254,"                if (!((nextX > xA) && (nextX < xB))) {
",8,3,0,4,9,0,0,0,0,12,38,8,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,273,"            } while (Double.isNaN(nextX) && (end - start > 1));
",4,3,0,3,7,0,6,0,0,13,51,6,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,275,"            if (Double.isNaN(nextX)) {
",0,0,0,2,5,0,6,0,0,6,26,7,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,283,"            final double nextY = computeObjectiveValue(nextX);
",2,0,0,1,2,1,4,0,0,7,50,6,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,284,"            if (Precision.equals(nextY, 0.0, 1)) {
",0,0,0,2,5,0,6,0,0,6,38,7,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,365,"        for (int i = start; i < end - 1; ++i) {
",10,2,0,1,3,0,0,0,0,13,39,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,366,"            final int delta = i + 1 - start;
",6,2,0,0,0,1,0,0,0,9,32,6,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,367,"            for (int j = end - 1; j > i; --j) {
",10,2,0,1,3,0,0,0,0,13,35,6,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,368,"                x[j] = (x[j] - x[j-1]) / (y[j] - y[j - delta]);
",6,5,1,7,14,0,0,0,0,28,47,8,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,373,"        double x0 = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,374,"        for (int j = end - 1; j >= start; --j) {
",10,2,0,1,3,0,0,0,0,13,40,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,375,"            x0 = x[j] + x0 * (targetY - y[j]);
",6,3,1,3,6,0,0,0,0,18,34,6,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,378,"        return x0;
",2,0,0,0,0,1,0,0,0,2,10,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,385,"        this.allowed = allowedSolution;
",4,0,0,0,0,0,0,0,0,5,31,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,386,"        return super.solve(maxEval, f, min, max);
",10,0,0,1,2,1,0,0,0,10,41,5,0.06667,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,232,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.06250,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,128,"        addEventHandler(handler, maxCheckInterval, convergence,
",0,0,0,0,1,0,8,0,0,8,55,5,0.06250,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,131,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,304,"                    occuringEvents.add(state);
",0,0,0,1,2,0,6,0,0,6,26,9,0.06250,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,311,"                final Iterator<EventState> iterator = occuringEvents.iterator();
",2,0,0,1,2,1,4,4,0,11,64,6,0.06250,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,312,"                final EventState currentEvent = iterator.next();
",2,0,0,1,2,1,4,2,0,9,48,6,0.06250,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,313,"                iterator.remove();
",0,0,0,1,2,0,4,0,0,4,18,7,0.06250,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,316,"                final double eventT = currentEvent.getEventTime();
",2,0,0,1,2,1,4,0,0,7,50,6,0.06250,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,317,"                interpolator.setSoftPreviousTime(previousT);
",0,0,0,1,2,0,6,0,0,6,44,7,0.06250,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,318,"                interpolator.setSoftCurrentTime(eventT);
",0,0,0,1,2,0,6,0,0,6,40,7,0.06250,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,321,"                interpolator.setInterpolatedTime(eventT);
",0,0,0,1,2,0,6,0,0,6,41,7,0.06250,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,322,"                final double[] eventY = interpolator.getInterpolatedState();
",2,0,0,2,4,1,4,0,0,7,60,6,0.06250,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,323,"                currentEvent.stepAccepted(eventT, eventY);
",0,0,0,1,2,0,8,0,0,8,42,7,0.06250,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,324,"                isLastStep = currentEvent.stop();
",2,0,0,1,2,0,4,0,0,7,33,6,0.06250,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,327,"                for (final StepHandler handler : stepHandlers) {
",4,0,0,1,3,1,0,2,0,7,48,6,0.06250,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,331,"                if (isLastStep) {
",2,0,0,1,3,0,0,0,0,2,17,6,0.06250,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,296,"                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());
",2,1,0,3,6,1,12,0,0,15,77,11,0.06250,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,320,"      this.softPreviousTime = softPreviousTime;
",4,0,0,0,0,0,0,0,0,5,41,4,0.06250,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,321,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,334,"      this.softCurrentTime  = softCurrentTime;
",4,0,0,0,0,0,0,0,0,5,40,4,0.06250,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,335,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,82,"        super(absoluteAccuracy);
",2,0,0,1,2,0,0,0,0,2,24,4,0.06250,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,83,"        if (maximalOrder < 2) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.06250,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,86,"        this.maximalOrder = maximalOrder;
",4,0,0,0,0,0,0,0,0,5,33,4,0.06250,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,87,"        this.allowed = AllowedSolution.ANY_SIDE;
",6,0,0,0,0,0,0,0,0,7,40,4,0.06250,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,88,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,122,"        return searchStart;
",2,0,0,0,0,1,0,0,0,2,19,4,0.06250,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));
",6,3,0,2,4,1,10,0,0,19,60,5,0.06250,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,268,"        UnivariateRealSolverUtils.verifySequence(lower, initial, upper);
",0,0,0,1,2,0,10,0,0,10,64,5,0.06250,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,269,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,354,"        verifyInterval(lower, initial);
",0,0,0,1,2,0,6,0,0,6,31,5,0.06250,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,355,"        verifyInterval(initial, upper);
",0,0,0,1,2,0,6,0,0,6,31,5,0.06250,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,356,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,227,"                        BracketedUnivariateRealSolver<UnivariateRealFunction> bracketing =
",2,0,0,0,0,0,0,4,0,6,66,10,0.05882,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,229,"                        root = forward ?
",4,0,0,0,0,0,0,0,0,5,16,10,0.05882,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,246,"                    if ((!Double.isNaN(previousEventTime)) &&
",0,1,0,2,5,0,6,0,0,8,41,8,0.05882,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,254,"                    } else if (Double.isNaN(previousEventTime) ||
",0,1,0,1,4,0,6,0,0,7,45,9,0.05882,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,256,"                        pendingEventTime = root;
",4,0,0,0,0,0,0,0,0,5,24,11,0.05882,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,257,"                        pendingEvent = true;
",2,0,0,0,0,0,0,0,0,4,20,11,0.05882,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,258,"                        return true;
",0,0,0,0,0,1,0,0,0,1,12,11,0.05882,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,285,"        return pendingEvent ?
",2,0,0,0,0,1,0,0,0,2,21,5,0.05882,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,303,"            previousEventTime = t;
",4,0,0,0,0,0,0,0,0,5,22,6,0.05882,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,304,"            g0Positive        = increasing;
",4,0,0,0,0,0,0,0,0,5,31,6,0.05882,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,305,"            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
",6,1,0,2,4,0,8,0,0,17,73,6,0.05882,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,44,37,"        super(absoluteAccuracy);
",2,0,0,1,2,0,0,0,0,2,24,4,0.05882,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,44,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,65,"        this(DEFAULT_RELATIVE_ACCURACY,
",2,0,0,0,1,0,0,0,0,2,31,4,0.05882,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,221,"                    increasing = gb >= ga;
",6,1,0,0,0,0,0,0,0,8,22,8,0.05556,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,225,"                    if (solver instanceof BracketedUnivariateRealSolver<?>) {
",2,0,0,1,3,0,0,2,0,4,57,9,0.05556,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,307,"            g0Positive = g0 >= 0;
",4,1,0,0,0,0,0,0,0,6,21,6,0.05556,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,308,"            nextAction = EventHandler.Action.CONTINUE;
",8,0,0,0,0,0,0,0,0,9,42,6,0.05556,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,317,"        return nextAction == EventHandler.Action.STOP;
",8,1,0,0,0,1,0,0,0,9,46,4,0.05556,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,44,"public class EventState {
",2,0,0,0,1,1,0,0,0,3,25,1,0.05556,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,202,"                    interpolator.setInterpolatedTime(t);
",0,0,0,1,2,0,6,0,0,6,36,11,0.05556,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,203,"                    return handler.g(t, interpolator.getInterpolatedState());
",0,0,0,2,4,1,10,0,0,10,57,11,0.05556,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,139,"        eventsStates.add(new EventState(handler, maxCheckInterval, convergence,
",6,0,0,0,2,0,4,2,0,12,71,5,0.05556,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,141,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,285,"                    state.reinitializeBegin(interpolator);
",0,0,0,1,2,0,6,0,0,6,38,9,0.05556,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,286,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,302,"                if (state.evaluateStep(interpolator)) {
",0,0,0,2,5,0,6,0,0,6,39,7,0.05556,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,306,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,362,"                state.stepAccepted(currentT, currentY);
",0,0,0,1,2,0,8,0,0,8,39,7,0.05556,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,363,"                isLastStep = isLastStep || state.stop();
",4,1,0,1,2,0,4,0,0,10,40,6,0.05556,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,364,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3370,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,110,"        return searchMin;
",2,0,0,0,0,1,0,0,0,2,17,4,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,116,"        return searchMax;
",2,0,0,0,0,1,0,0,0,2,17,4,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,128,"        return absoluteAccuracy;
",2,0,0,0,0,1,0,0,0,2,24,4,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,134,"        return relativeAccuracy;
",2,0,0,0,0,1,0,0,0,2,24,4,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,140,"        return functionValueAccuracy;
",2,0,0,0,0,1,0,0,0,2,29,4,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,153,"        incrementEvaluationCount();
",0,0,0,1,2,0,2,0,0,2,27,5,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,154,"        return function.value(point);
",0,0,0,1,2,1,6,0,0,6,29,5,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,173,"        MathUtils.checkNotNull(f);
",0,0,0,1,2,0,6,0,0,6,26,5,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,176,"        searchMin = min;
",4,0,0,0,0,0,0,0,0,5,16,4,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,177,"        searchMax = max;
",4,0,0,0,0,0,0,0,0,5,16,4,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,178,"        searchStart = startValue;
",4,0,0,0,0,0,0,0,0,5,25,4,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,179,"        function = f;
",4,0,0,0,0,0,0,0,0,5,13,4,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,180,"        evaluations.setMaximalCount(maxEval);
",0,0,0,1,2,0,6,0,0,6,37,5,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,181,"        evaluations.resetCount();
",0,0,0,1,2,0,4,0,0,4,25,5,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,182,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,187,"        setup(maxEval, f, min, max, startValue);
",0,0,0,1,2,0,12,0,0,12,40,5,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,190,"        return doSolve();
",0,0,0,1,2,1,2,0,0,2,17,5,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,294,"            evaluations.incrementCount();
",0,0,0,1,2,0,4,0,0,4,29,7,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,297,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,298,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,336,"        if (lower >= upper) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.05556,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,340,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math/ode/events/EventHandler,44,53,"    public enum Action {
",2,0,0,0,1,1,0,0,0,3,20,2,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventHandler,44,60,"        STOP,
",2,0,0,0,0,0,0,0,0,2,5,3,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventHandler,44,69,"        RESET_STATE,
",2,0,0,0,0,0,0,0,0,2,12,3,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventHandler,44,79,"        RESET_DERIVATIVES,
",2,0,0,0,0,0,0,0,0,2,18,3,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventHandler,44,86,"        CONTINUE;
",2,0,0,0,0,0,0,0,0,2,9,3,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,102,"                      final UnivariateRealSolver solver) {
",2,0,0,0,2,1,0,2,0,5,36,3,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,103,"        this.handler           = handler;
",4,0,0,0,0,0,0,0,0,5,33,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,104,"        this.maxCheckInterval  = maxCheckInterval;
",4,0,0,0,0,0,0,0,0,5,42,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,105,"        this.convergence       = FastMath.abs(convergence);
",2,0,0,1,2,0,6,0,0,9,51,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,106,"        this.maxIterationCount = maxIterationCount;
",4,0,0,0,0,0,0,0,0,5,43,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,107,"        this.solver            = solver;
",4,0,0,0,0,0,0,0,0,5,32,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,110,"        t0                = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,111,"        g0                = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,112,"        g0Positive        = true;
",2,0,0,0,0,0,0,0,0,4,25,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,113,"        pendingEvent      = false;
",2,0,0,0,0,0,0,0,0,4,26,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,114,"        pendingEventTime  = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,115,"        previousEventTime = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,116,"        increasing        = true;
",2,0,0,0,0,0,0,0,0,4,25,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,117,"        nextAction        = EventHandler.Action.CONTINUE;
",8,0,0,0,0,0,0,0,0,9,49,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,119,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,154,"        t0 = interpolator.getPreviousTime();
",2,0,0,1,2,0,4,0,0,7,36,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,155,"        interpolator.setInterpolatedTime(t0);
",0,0,0,1,2,0,6,0,0,6,37,5,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,156,"        g0 = handler.g(t0, interpolator.getInterpolatedState());
",2,0,0,2,4,0,10,0,0,13,56,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,157,"        if (g0 == 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,177,"        g0Positive = g0 >= 0;
",4,1,0,0,0,0,0,0,0,6,21,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,179,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,190,"            forward = interpolator.isForward();
",2,0,0,1,2,0,4,0,0,7,35,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,191,"            final double t1 = interpolator.getCurrentTime();
",2,0,0,1,2,1,4,0,0,7,48,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,192,"            final double dt = t1 - t0;
",6,1,0,0,0,1,0,0,0,8,26,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,193,"            if (FastMath.abs(dt) < convergence) {
",2,1,0,2,5,0,6,0,0,9,37,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,197,"            final int    n = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(dt) / maxCheckInterval));
",4,1,0,4,8,1,14,0,0,20,91,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,198,"            final double h = dt / n;
",6,1,0,0,0,1,0,0,0,8,24,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,200,"            final UnivariateRealFunction f = new UnivariateRealFunction() {
",2,0,0,1,3,1,0,4,0,7,63,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,207,"            double ta = t0;
",4,0,0,0,0,0,0,0,0,4,15,5,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,208,"            double ga = g0;
",4,0,0,0,0,0,0,0,0,4,15,5,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,209,"            for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,212,"                final double tb = t0 + (i + 1) * h;
",8,3,0,1,2,1,0,0,0,12,35,6,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,213,"                interpolator.setInterpolatedTime(tb);
",0,0,0,1,2,0,6,0,0,6,37,7,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,214,"                final double gb = handler.g(tb, interpolator.getInterpolatedState());
",2,0,0,2,4,1,10,0,0,13,69,6,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,217,"                if (g0Positive ^ (gb >= 0)) {
",4,2,0,2,5,0,0,0,0,6,29,6,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,267,"                    ta = tb;
",4,0,0,0,0,0,0,0,0,5,8,8,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,268,"                    ga = gb;
",4,0,0,0,0,0,0,0,0,5,8,8,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,274,"            pendingEvent     = false;
",2,0,0,0,0,0,0,0,0,4,25,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,275,"            pendingEventTime = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,30,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,276,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,298,"        t0 = t;
",4,0,0,0,0,0,0,0,0,5,7,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,299,"        g0 = handler.g(t, y);
",2,0,0,1,2,0,8,0,0,11,21,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,301,"        if (pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence)) {
",8,3,0,3,7,0,4,0,0,15,74,4,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,310,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,200,"            final UnivariateRealFunction f = new UnivariateRealFunction() {
",2,0,0,1,3,1,0,4,0,7,63,4,0.05263,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3364,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.05263,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3368,"        y = floor(x);
",2,0,0,1,2,0,4,0,0,7,13,4,0.05263,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3369,"        if (y == x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.05263,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,92,"                                               final double functionValueAccuracy) {
",2,0,0,0,2,1,0,0,0,3,37,3,0.05263,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,49,"    private final Incrementor evaluations = new Incrementor();
",2,0,0,1,2,2,0,4,0,8,58,2,0.05263,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,93,"        this.absoluteAccuracy = absoluteAccuracy;
",4,0,0,0,0,0,0,0,0,5,41,4,0.05263,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,94,"        this.relativeAccuracy = relativeAccuracy;
",4,0,0,0,0,0,0,0,0,5,41,4,0.05263,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,95,"        this.functionValueAccuracy = functionValueAccuracy;
",4,0,0,0,0,0,0,0,0,5,51,4,0.05263,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,96,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,44,41,"public enum AllowedSolution {
",2,0,0,0,1,1,0,0,0,3,29,1,0.05263,0
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,44,48,"    ANY_SIDE,
",2,0,0,0,0,0,0,0,0,2,9,2,0.05263,0
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,44,55,"    LEFT_SIDE,
",2,0,0,0,0,0,0,0,0,2,10,2,0.05263,0
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,44,62,"    RIGHT_SIDE,
",2,0,0,0,0,0,0,0,0,2,11,2,0.05263,0
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,44,68,"    BELOW_SIDE,
",2,0,0,0,0,0,0,0,0,2,11,2,0.05263,0
defect4j,math,org/apache/commons/math/analysis/solvers/AllowedSolution,44,74,"    ABOVE_SIDE;
",2,0,0,0,0,0,0,0,0,2,11,2,0.05263,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,318,"    if (! vectorsInitialized) {
",2,0,0,1,3,0,0,0,0,3,27,4,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,320,"      if (v == null) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,328,"      finalizeStep();
",0,0,0,1,2,0,2,0,0,2,15,7,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,331,"      for (int i = 0; i < interpolatedState.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,52,6,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,332,"          final double yDot1  = yDotK[0][i];
",2,0,1,2,4,1,0,0,0,7,34,8,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,333,"          final double yDot6  = yDotK[5][i];
",2,0,1,2,4,1,0,0,0,7,34,8,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,334,"          final double yDot7  = yDotK[6][i];
",2,0,1,2,4,1,0,0,0,7,34,8,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,335,"          final double yDot8  = yDotK[7][i];
",2,0,1,2,4,1,0,0,0,7,34,8,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,336,"          final double yDot9  = yDotK[8][i];
",2,0,1,2,4,1,0,0,0,7,34,8,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,337,"          final double yDot10 = yDotK[9][i];
",2,0,1,2,4,1,0,0,0,7,34,8,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,338,"          final double yDot11 = yDotK[10][i];
",2,0,1,2,4,1,0,0,0,7,35,8,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,339,"          final double yDot12 = yDotK[11][i];
",2,0,1,2,4,1,0,0,0,7,35,8,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,340,"          final double yDot13 = yDotK[12][i];
",2,0,1,2,4,1,0,0,0,7,35,8,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,341,"          final double yDot14 = yDotKLast[0][i];
",2,0,1,2,4,1,0,0,0,7,38,8,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,342,"          final double yDot15 = yDotKLast[1][i];
",2,0,1,2,4,1,0,0,0,7,38,8,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,343,"          final double yDot16 = yDotKLast[2][i];
",2,0,1,2,4,1,0,0,0,7,38,8,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,344,"          v[0][i] = B_01 * yDot1  + B_06 * yDot6 + B_07 * yDot7 +
",12,10,1,2,4,0,0,0,0,27,55,8,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,347,"          v[1][i] = yDot1 - v[0][i];
",2,1,1,4,8,0,0,0,0,12,26,8,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,348,"          v[2][i] = v[0][i] - v[1][i] - yDotK[12][i];
",0,1,1,8,16,0,0,0,0,18,43,8,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,349,"          for (int k = 0; k < D.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,36,8,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,350,"              v[k+3][i] = D[k][0] * yDot1  + D[k][1]  * yDot6  + D[k][2]  * yDot7  +
",8,15,1,8,16,0,0,0,0,40,70,10,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,357,"      vectorsInitialized = true;
",2,0,0,0,0,0,0,0,0,4,26,6,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,361,"    final double eta      = 1 - theta;
",4,1,0,0,0,1,0,0,0,6,34,4,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,362,"    final double twoTheta = 2 * theta;
",4,1,0,0,0,1,0,0,0,6,34,4,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,363,"    final double theta2   = theta * theta;
",6,1,0,0,0,1,0,0,0,8,38,4,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,364,"    final double dot1 = 1 - twoTheta;
",4,1,0,0,0,1,0,0,0,6,33,4,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,365,"    final double dot2 = theta * (2 - 3 * theta);
",6,3,0,1,2,1,0,0,0,10,44,4,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,366,"    final double dot3 = twoTheta * (1 + theta * (twoTheta -3));
",8,4,0,2,4,1,0,0,0,13,59,4,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,367,"    final double dot4 = theta2 * (3 + theta * (5 * theta - 8));
",8,5,0,2,4,1,0,0,0,14,59,4,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,368,"    final double dot5 = theta2 * (3 + theta * (-12 + theta * (15 - 6 * theta)));
",10,7,0,3,6,1,0,0,0,19,76,4,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,369,"    final double dot6 = theta2 * theta * (4 + theta * (-15 + theta * (18 - 7 * theta)));
",12,7,0,3,6,1,0,0,0,21,84,4,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,371,"    for (int i = 0; i < interpolatedState.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,52,4,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,372,"      interpolatedState[i] = currentState[i] -
",0,1,1,2,4,0,0,0,0,10,40,6,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,380,"      interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +
",4,8,1,7,14,0,0,0,0,29,73,6,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,385,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,397,"    final double[] yTmp = new double[currentState.length];
",6,0,0,2,4,1,0,0,0,7,54,4,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,398,"    final double pT = getGlobalPreviousTime();
",2,0,0,1,2,1,2,0,0,5,42,4,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,401,"    for (int j = 0; j < currentState.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,402,"      s = K14_01 * yDotK[0][j]  + K14_06 * yDotK[5][j]  + K14_07 * yDotK[6][j] +
",8,11,1,6,12,0,0,0,0,32,74,6,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,405,"      yTmp[j] = currentState[j] + h * s;
",4,2,1,2,4,0,0,0,0,15,34,6,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,407,"    integrator.computeDerivatives(pT + C14 * h, yTmp, yDotKLast[0]);
",6,2,1,2,4,0,6,0,0,16,64,5,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,410,"    for (int j = 0; j < currentState.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,411,"     s = K15_01 * yDotK[0][j]  + K15_06 * yDotK[5][j]  + K15_07 * yDotK[6][j] +
",8,12,1,6,12,0,0,0,0,33,74,6,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,415,"     yTmp[j] = currentState[j] + h * s;
",4,2,1,2,4,0,0,0,0,15,34,6,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,417,"    integrator.computeDerivatives(pT + C15 * h, yTmp, yDotKLast[1]);
",6,2,1,2,4,0,6,0,0,16,64,5,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,420,"    for (int j = 0; j < currentState.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,421,"      s = K16_01 * yDotK[0][j]  + K16_06 * yDotK[5][j]  + K16_07 * yDotK[6][j] +
",8,13,1,6,12,0,0,0,0,34,74,6,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,425,"      yTmp[j] = currentState[j] + h * s;
",4,2,1,2,4,0,0,0,0,15,34,6,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,427,"    integrator.computeDerivatives(pT + C16 * h, yTmp, yDotKLast[2]);
",6,2,1,2,4,0,6,0,0,16,64,5,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,429,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,255,"    double error1 = 0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,256,"    double error2 = 0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,258,"    for (int j = 0; j < mainSetDimension; ++j) {
",8,1,0,1,3,0,0,0,0,10,44,4,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,259,"      final double errSum1 = E1_01 * yDotK[0][j]  + E1_06 * yDotK[5][j] +
",6,9,1,4,8,1,0,0,0,24,67,6,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,263,"      final double errSum2 = E2_01 * yDotK[0][j]  + E2_06 * yDotK[5][j] +
",6,9,1,4,8,1,0,0,0,24,67,6,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,268,"      final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));
",2,0,1,5,10,1,12,0,0,23,77,6,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,269,"      final double tol = (vecAbsoluteTolerance == null) ?
",4,1,0,1,2,1,0,0,0,6,51,6,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,272,"      final double ratio1  = errSum1 / tol;
",6,1,0,0,0,1,0,0,0,8,37,6,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,273,"      error1        += ratio1 * ratio1;
",6,1,0,0,0,0,0,0,0,8,33,6,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,274,"      final double ratio2  = errSum2 / tol;
",6,1,0,0,0,1,0,0,0,8,37,6,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,275,"      error2        += ratio2 * ratio2;
",6,1,0,0,0,0,0,0,0,8,33,6,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,278,"    double den = error1 + 0.01 * error2;
",6,2,0,0,0,0,0,0,0,8,36,5,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,279,"    if (den <= 0.0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,283,"    return FastMath.abs(h) * error1 / FastMath.sqrt(mainSetDimension * den);
",6,3,0,2,4,1,10,0,0,19,72,4,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,244,"    super(interpolator);
",2,0,0,1,2,0,0,0,0,2,20,4,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,246,"    if (interpolator.currentState == null) {
",4,1,0,1,3,0,0,0,0,5,40,4,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,248,"      yDotKLast = null;
",2,0,0,0,0,0,0,0,0,3,17,6,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,249,"      v         = null;
",2,0,0,0,0,0,0,0,0,3,17,6,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,250,"      vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,6,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,273,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,278,"    return new DormandPrince853StepInterpolator(this);
",0,0,0,1,2,1,0,2,0,2,50,6,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);
",14,0,0,1,2,0,0,0,0,14,83,5,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,290,"    final int dimension = currentState.length;
",6,0,0,0,0,1,0,0,0,7,42,4,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,292,"    yDotKLast = new double[3][];
",2,0,0,2,4,0,0,0,0,3,28,4,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,293,"    for (int k = 0; k < yDotKLast.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,44,4,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,294,"      yDotKLast[k] = new double[dimension];
",0,0,1,2,4,0,0,0,0,7,37,6,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,297,"    v = new double[7][];
",2,0,0,2,4,0,0,0,0,3,20,4,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,298,"    for (int k = 0; k < v.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,299,"      v[k]  = new double[dimension];
",0,0,1,2,4,0,0,0,0,7,30,6,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,302,"    vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,4,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,304,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,309,"    super.storeTime(t);
",4,0,0,1,2,0,0,0,0,4,19,5,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,310,"    vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,4,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,311,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,391,"    if (currentState == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,393,"      return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.03846,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,
",8,0,0,0,1,0,0,0,0,9,54,4,0.03704,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,223,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03704,0
defect4j,math,org/apache/commons/math/util/Precision,44,272,"            xInt = SGN_MASK - xInt;
",6,1,0,0,0,0,0,0,0,8,23,6,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,63,"  private static final double[] STATIC_C = {
",2,0,0,1,3,3,0,0,0,5,42,2,0.03333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,70,"  private static final double[][] STATIC_A = {
",2,0,0,2,5,3,0,0,0,5,44,2,0.03333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,137,"  private static final double[] STATIC_B = {
",2,0,0,1,3,3,0,0,0,5,42,2,0.03333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,247,"    return 8;
",0,0,0,0,0,1,0,0,0,0,9,3,0.03333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,231,"    super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.03333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,232,"    yDotKLast = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.03333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,233,"    v         = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.03333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,234,"    vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,4,0.03333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,235,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,180,"    private static final double[][] D = {
",2,0,0,2,5,3,0,0,0,5,37,2,0.03333,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,515,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.03125,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,518,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03125,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,305,"              System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length);
",4,0,1,2,4,0,6,0,0,12,53,11,0.02500,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,241,"              for (int i = 0; i < scale.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,40,12,0.02273,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,242,"                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);
",4,2,1,3,6,0,4,0,0,19,78,14,0.02273,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,298,"      if (!isLastStep) {
",2,0,0,1,3,0,0,0,0,3,18,6,0.02041,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,301,"          interpolator.storeTime(stepStart);
",0,0,0,1,2,0,6,0,0,6,34,9,0.02041,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,303,"          if (fsal) {
",2,0,0,1,3,0,0,0,0,2,11,8,0.02041,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,309,"          final double factor =
",2,0,0,0,0,1,0,0,0,3,21,8,0.02041,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,311,"          final double  scaledH    = stepSize * factor;
",6,1,0,0,0,1,0,0,0,8,45,8,0.02041,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,312,"          final double  nextT      = stepStart + scaledH;
",6,1,0,0,0,1,0,0,0,8,47,8,0.02041,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,313,"          final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
",12,2,0,2,4,1,0,0,0,15,65,8,0.02041,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,314,"          hNew = filterStep(scaledH, forward, nextIsLast);
",2,0,0,1,2,0,8,0,0,11,48,8,0.02041,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,316,"          final double  filteredNextT      = stepStart + hNew;
",6,1,0,0,0,1,0,0,0,8,52,8,0.02041,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,317,"          final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);
",12,2,0,2,4,1,0,0,0,15,89,8,0.02041,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,318,"          if (filteredNextIsLast) {
",2,0,0,1,3,0,0,0,0,2,25,8,0.02041,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,324,"    } while (!isLastStep);
",2,0,0,1,3,0,0,0,0,3,22,4,0.02041,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,116,"    super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
",10,0,0,1,2,0,0,0,0,10,76,4,0.01961,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,118,"    this.fsal      = fsal;
",4,0,0,0,0,0,0,0,0,5,22,4,0.01961,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,119,"    this.c         = c;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01961,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,120,"    this.a         = a;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01961,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,121,"    this.b         = b;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01961,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,122,"    this.prototype = prototype;
",4,0,0,0,0,0,0,0,0,5,27,4,0.01961,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,124,"    exp = -1.0 / getOrder();
",2,1,0,1,2,0,2,0,0,7,24,4,0.01961,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,127,"    setSafety(0.9);
",0,0,0,1,2,0,2,0,0,2,15,5,0.01961,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,128,"    setMinReduction(0.2);
",0,0,0,1,2,0,2,0,0,2,21,5,0.01961,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,129,"    setMaxGrowth(10.0);
",0,0,0,1,2,0,2,0,0,2,19,5,0.01961,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,131,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01961,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,293,"      interpolator.storeTime(stepStart + stepSize);
",4,1,0,1,2,0,4,0,0,9,45,7,0.01961,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,294,"      System.arraycopy(yTmp, 0, y, 0, y0.length);
",4,0,0,1,2,0,8,0,0,12,43,7,0.01961,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,295,"      System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);
",6,1,1,2,4,0,6,0,0,15,62,7,0.01961,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,296,"      stepStart = acceptStep(interpolator, y, yDotTmp, t);
",2,0,0,1,2,0,10,0,0,13,52,6,0.01961,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,238,"        if (firstTime) {
",2,0,0,1,3,0,0,0,0,2,16,8,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,239,"          final double[] scale = new double[mainSetDimension];
",2,0,1,2,4,1,0,0,0,5,52,10,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,240,"          if (vecAbsoluteTolerance == null) {
",2,1,0,1,3,0,0,0,0,3,35,10,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,249,"          hNew = initializeStep(forward, getOrder(), scale,
",2,0,0,1,3,0,8,0,0,11,49,10,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,251,"          firstTime = false;
",2,0,0,0,0,0,0,0,0,4,18,10,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,254,"        stepSize = hNew;
",4,0,0,0,0,0,0,0,0,5,16,8,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,257,"        for (int k = 1; k < stages; ++k) {
",8,1,0,1,3,0,0,0,0,10,34,8,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,259,"          for (int j = 0; j < y0.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,260,"            double sum = a[k-1][0] * yDotK[0][j];
",4,2,1,4,8,0,0,0,0,12,37,13,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,261,"            for (int l = 1; l < k; ++l) {
",8,1,0,1,3,0,0,0,0,10,29,12,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,262,"              sum += a[k-1][l] * yDotK[l][j];
",4,2,1,4,8,0,0,0,0,17,31,14,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,264,"            yTmp[j] = y[j] + stepSize * sum;
",4,2,1,2,4,0,0,0,0,15,32,12,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,267,"          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
",6,3,1,3,6,0,4,0,0,19,66,11,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,272,"        for (int j = 0; j < y0.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,273,"          double sum    = b[0] * yDotK[0][j];
",2,1,1,3,6,0,0,0,0,9,35,11,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,274,"          for (int l = 1; l < stages; ++l) {
",8,1,0,1,3,0,0,0,0,10,34,10,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,275,"            sum    += b[l] * yDotK[l][j];
",2,1,1,3,6,0,0,0,0,14,29,12,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,277,"          yTmp[j] = y[j] + stepSize * sum;
",4,2,1,2,4,0,0,0,0,15,32,10,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,281,"        error = estimateError(yDotK, y, yTmp, stepSize);
",2,0,0,1,2,0,10,0,0,13,48,8,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,282,"        if (error >= 1.0) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.01786,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,196,"    setEquations(equations);
",0,0,0,1,2,0,4,0,0,4,24,5,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,197,"    resetEvaluations();
",0,0,0,1,2,0,2,0,0,2,19,5,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,198,"    final boolean forward = t > equations.getTime();
",4,1,0,1,2,1,4,0,0,10,48,4,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,201,"    final double[] y0  = equations.getCompleteState();
",2,0,0,2,4,1,4,0,0,7,50,4,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,202,"    final double[] y = y0.clone();
",2,0,0,2,4,1,4,0,0,7,30,4,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,203,"    final int stages = c.length + 1;
",6,1,0,0,0,1,0,0,0,8,32,4,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,204,"    final double[][] yDotK = new double[stages][y.length];
",6,0,1,4,8,1,0,0,0,9,54,4,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,205,"    final double[] yTmp    = new double[y.length];
",6,0,0,2,4,1,0,0,0,7,46,4,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,206,"    final double[] yDotTmp = new double[y.length];
",6,0,0,2,4,1,0,0,0,7,46,4,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,209,"    final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();
",2,0,0,2,4,1,4,4,0,11,94,4,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,210,"    interpolator.reinitialize(this, yTmp, yDotK, forward,
",0,0,0,0,1,0,10,0,0,10,53,5,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,212,"    interpolator.storeTime(equations.getTime());
",0,0,0,2,4,0,8,0,0,8,44,5,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,215,"    stepStart         = equations.getTime();
",2,0,0,1,2,0,4,0,0,7,40,4,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,216,"    double  hNew      = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,217,"    boolean firstTime = true;
",2,0,0,0,0,0,0,0,0,3,25,5,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,218,"    for (StepHandler handler : stepHandlers) {
",4,0,0,1,3,0,0,2,0,6,42,4,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,221,"    setStateInitialized(false);
",0,0,0,1,2,0,2,0,0,3,27,5,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,224,"    isLastStep = false;
",2,0,0,0,0,0,0,0,0,4,19,4,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,227,"      interpolator.shift();
",0,0,0,1,2,0,4,0,0,4,21,7,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,230,"      double error = 10;
",2,0,0,0,0,0,0,0,0,2,18,7,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,231,"      while (error >= 1.0) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,233,"        if (firstTime || !fsal) {
",4,1,0,1,3,0,0,0,0,6,25,8,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,235,"          computeDerivatives(stepStart, y, yDotK[0]);
",0,0,1,2,4,0,6,0,0,8,43,11,0.01754,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,195,"    sanityChecks(equations, t);
",0,0,0,1,2,0,6,0,0,6,27,5,0.01695,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3354,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.01695,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,187,"    this.safety = safety;
",4,0,0,0,0,0,0,0,0,5,21,4,0.01563,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,188,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01563,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,345,"    this.minReduction = minReduction;
",4,0,0,0,0,0,0,0,0,5,33,4,0.01563,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,346,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01563,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,359,"    this.maxGrowth = maxGrowth;
",4,0,0,0,0,0,0,0,0,5,27,4,0.01563,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,360,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01563,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3337,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.01389,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3341,"        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {
",8,3,0,1,3,0,0,0,0,12,46,4,0.01389,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3345,"        y = (long) x;
",4,0,0,1,2,0,0,0,0,5,13,4,0.01389,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3346,"        if (x < 0 && y != x) {
",6,3,0,1,3,0,0,0,0,9,22,4,0.01389,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3350,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.01389,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3495,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.01389,0
defect4j,math,org/apache/commons/math/util/FastMath,44,864,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.01205,0
defect4j,math,org/apache/commons/math/util/FastMath,44,866,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.01205,0
defect4j,math,org/apache/commons/math/util/FastMath,44,874,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.01205,0
defect4j,math,org/apache/commons/math/util/FastMath,44,875,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.01205,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,333,"      } else if (filteredH < -maxStep) {
",4,1,0,1,4,0,0,0,0,6,34,5,0.01087,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,331,"      if (filteredH > maxStep) {
",4,1,0,1,3,0,0,0,0,5,26,4,0.01075,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,337,"      return filteredH;
",2,0,0,0,0,1,0,0,0,2,17,4,0.01075,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,110,"    super(name);
",2,0,0,1,2,0,0,0,0,2,12,4,0.01053,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,111,"    setStepSizeControl(minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
",0,0,0,1,2,0,10,0,0,10,83,5,0.01053,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,112,"    resetInternalState();
",0,0,0,1,2,0,2,0,0,2,21,5,0.01053,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,114,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01053,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,157,"      minStep     = FastMath.abs(minimalStep);
",2,0,0,1,2,0,6,0,0,9,40,4,0.01053,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,158,"      maxStep     = FastMath.abs(maximalStep);
",2,0,0,1,2,0,6,0,0,9,40,4,0.01053,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,159,"      initialStep = -1;
",2,0,0,0,0,0,0,0,0,4,17,4,0.01053,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,161,"      scalAbsoluteTolerance = absoluteTolerance;
",4,0,0,0,0,0,0,0,0,5,42,4,0.01053,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,162,"      scalRelativeTolerance = relativeTolerance;
",4,0,0,0,0,0,0,0,0,5,42,4,0.01053,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,163,"      vecAbsoluteTolerance  = null;
",2,0,0,0,0,0,0,0,0,3,29,4,0.01053,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,164,"      vecRelativeTolerance  = null;
",2,0,0,0,0,0,0,0,0,3,29,4,0.01053,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,166,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01053,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,250,"    if (initialStep > 0) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.01010,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,321,"      double filteredH = h;
",4,0,0,0,0,0,0,0,0,4,21,5,0.01010,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,322,"      if (FastMath.abs(h) < minStep) {
",2,1,0,2,5,0,6,0,0,9,32,4,0.01010,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,233,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,181,"        currentState     = null;
",2,0,0,0,0,0,0,0,0,3,24,6,0.01000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,182,"        primaryMapper    = null;
",2,0,0,0,0,0,0,0,0,3,24,6,0.01000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,183,"        secondaryMappers = null;
",2,0,0,0,0,0,0,0,0,3,24,6,0.01000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,184,"        allocateInterpolatedArrays(-1);
",0,0,0,1,2,0,2,0,0,3,31,7,0.01000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,82,"    super(interpolator);
",2,0,0,1,2,0,0,0,0,2,20,4,0.01000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,84,"    if (interpolator.currentState != null) {
",4,1,0,1,3,0,0,0,0,5,40,4,0.01000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,95,"      yDotK = null;
",2,0,0,0,0,0,0,0,0,3,13,6,0.01000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,100,"    integrator = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.01000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,102,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,223,"      mainSetDimension = equations.getPrimaryMapper().getDimension();
",2,0,0,2,4,0,6,0,0,9,63,4,0.00990,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,225,"      if ((vecAbsoluteTolerance != null) && (vecAbsoluteTolerance.length != mainSetDimension)) {
",8,3,0,3,7,0,0,0,0,11,90,4,0.00990,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,229,"      if ((vecRelativeTolerance != null) && (vecRelativeTolerance.length != mainSetDimension)) {
",8,3,0,3,7,0,0,0,0,11,90,4,0.00990,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,221,"      super.sanityChecks(equations, t);
",6,0,0,1,2,0,0,0,0,6,33,5,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,171,"  protected AbstractStepInterpolator(final AbstractStepInterpolator interpolator) {
",4,0,0,1,3,2,0,2,0,8,81,2,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,173,"    globalPreviousTime = interpolator.globalPreviousTime;
",6,0,0,0,0,0,0,0,0,7,53,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,174,"    globalCurrentTime  = interpolator.globalCurrentTime;
",6,0,0,0,0,0,0,0,0,7,52,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,175,"    softPreviousTime   = interpolator.softPreviousTime;
",6,0,0,0,0,0,0,0,0,7,51,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,176,"    softCurrentTime    = interpolator.softCurrentTime;
",6,0,0,0,0,0,0,0,0,7,50,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,177,"    h                  = interpolator.h;
",6,0,0,0,0,0,0,0,0,7,36,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,178,"    interpolatedTime   = interpolator.interpolatedTime;
",6,0,0,0,0,0,0,0,0,7,51,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,180,"    if (interpolator.currentState == null) {
",4,1,0,1,3,0,0,0,0,5,40,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,199,"    finalized        = interpolator.finalized;
",6,0,0,0,0,0,0,0,0,7,42,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,200,"    forward          = interpolator.forward;
",6,0,0,0,0,0,0,0,0,7,40,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,201,"    dirtyState       = interpolator.dirtyState;
",6,0,0,0,0,0,0,0,0,7,43,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,202,"    primaryMapper    = interpolator.primaryMapper;
",6,0,0,0,0,0,0,0,0,7,46,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,203,"    secondaryMappers = (interpolator.secondaryMappers == null) ?
",6,1,0,1,2,0,0,0,0,8,60,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,206,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,248,"    globalPreviousTime    = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,35,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,249,"    globalCurrentTime     = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,35,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,250,"    softPreviousTime      = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,35,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,251,"    softCurrentTime       = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,35,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,252,"    h                     = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,35,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,253,"    interpolatedTime      = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,35,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,254,"    currentState          = y;
",4,0,0,0,0,0,0,0,0,5,26,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,255,"    finalized             = false;
",2,0,0,0,0,0,0,0,0,4,30,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,256,"    this.forward          = isForward;
",4,0,0,0,0,0,0,0,0,5,34,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,257,"    this.dirtyState       = true;
",2,0,0,0,0,0,0,0,0,4,29,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,258,"    this.primaryMapper    = primary;
",4,0,0,0,0,0,0,0,0,5,32,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,259,"    this.secondaryMappers = secondary.clone();
",2,0,0,1,2,0,4,0,0,7,42,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,260,"    allocateInterpolatedArrays(y.length);
",4,0,0,1,2,0,2,0,0,6,37,5,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,262,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,268,"     finalizeStep();
",0,0,0,1,2,0,2,0,0,2,15,5,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,271,"     return doCopy();
",0,0,0,1,2,1,2,0,0,2,16,5,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,482,"    if (! finalized) {
",2,0,0,1,3,0,0,0,0,3,18,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,483,"      doFinalize();
",0,0,0,1,2,0,2,0,0,2,13,7,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,484,"      finalized = true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00971,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,486,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00971,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,131,"    reinitialize(y, forward, primaryMapper, secondaryMappers);
",0,0,0,1,2,0,10,0,0,10,58,5,0.00971,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,132,"    this.yDotK = yDotArray;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,133,"    this.integrator = rkIntegrator;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00971,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,134,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00971,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3471,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00962,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3470,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00952,0
defect4j,math,org/apache/commons/math/util/FastMath,44,920,"            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;
",20,7,0,0,0,0,0,0,0,28,63,6,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1106,"        if (x==0) { // Handle special case of +0/-0
",2,1,0,1,3,0,0,0,0,3,43,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1109,"        long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1112,"        if ((bits & 0x8000000000000000L) != 0 || x != x) {
",6,4,0,2,5,0,0,0,0,10,50,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1123,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1132,"        int exp = (int)(bits >> 52)-1023;
",4,2,0,2,4,0,0,0,0,6,33,5,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1134,"        if ((bits & 0x7ff0000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,40,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1154,"        if (exp == -1 || exp == 0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1202,"        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];
",8,2,0,5,10,0,0,0,0,10,73,5,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1213,"        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));
",8,4,0,3,6,0,0,0,0,12,89,5,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1215,"        double lnza = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1216,"        double lnzb = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1218,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1220,"            double tmp = epsilon * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,36,7,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1221,"            double aa = epsilon + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1222,"            double ab = epsilon - aa;
",6,1,0,0,0,0,0,0,0,7,25,7,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1223,"            double xa = aa;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1224,"            double xb = ab;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1227,"            double numer = bits & 0x3ffffffffffL;
",4,1,0,0,0,0,0,0,0,5,37,7,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1228,"            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);
",6,2,0,1,2,0,0,0,0,8,59,7,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1229,"            aa = numer - xa*denom - xb * denom;
",12,4,0,0,0,0,0,0,0,17,35,6,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1230,"            xb += aa / denom;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1233,"            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];
",6,1,1,2,4,0,0,0,0,9,57,7,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1234,"            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];
",6,1,1,2,4,0,0,0,0,9,57,7,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1236,"            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,55,6,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1238,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1239,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1241,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1242,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1243,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1246,"                aa = ya + LN_HI_PREC_COEF[i][0];
",4,1,1,2,4,0,0,0,0,10,32,8,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1247,"                ab = yb + LN_HI_PREC_COEF[i][1];
",4,1,1,2,4,0,0,0,0,10,32,8,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1249,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1250,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1251,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1255,"            aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,6,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1256,"            ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,6,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1264,"            lnza = aa + ab;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1265,"            lnzb = -(lnza - aa - ab);
",8,1,0,1,2,0,0,0,0,11,25,6,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1266,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1292,"        double a = LN_2_A*exp;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1293,"        double b = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1294,"        double c = a+lnm[0];
",4,1,1,1,2,0,0,0,0,7,20,5,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1295,"        double d = -(c-a-lnm[0]);
",6,1,1,2,4,0,0,0,0,10,25,5,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1296,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1297,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1299,"        c = a + lnza;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1300,"        d = -(c - a - lnza);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1301,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1302,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1304,"        c = a + LN_2_B*exp;
",8,2,0,0,0,0,0,0,0,11,19,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1305,"        d = -(c - a - LN_2_B*exp);
",10,2,0,1,2,0,0,0,0,14,26,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1306,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1307,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1309,"        c = a + lnm[1];
",4,1,1,1,2,0,0,0,0,8,15,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1310,"        d = -(c - a - lnm[1]);
",6,1,1,2,4,0,0,0,0,11,22,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1311,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1312,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1314,"        c = a + lnzb;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1315,"        d = -(c - a - lnzb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1316,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1317,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1319,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1320,"            hiPrec[0] = a;
",2,0,1,1,2,0,0,0,0,5,14,6,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1321,"            hiPrec[1] = b;
",2,0,1,1,2,0,0,0,0,5,14,6,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1324,"        return a + b;
",4,1,0,0,0,1,0,0,0,5,13,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1456,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1467,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1479,"        if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1503,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1517,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1534,"        if (y < 8e298 && y > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1535,"            double tmp1 = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1536,"            ya = y + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,11,21,6,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1537,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1538,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1546,"        final double lores = log(x, lns);
",2,0,0,1,2,1,6,0,0,9,33,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1547,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1551,"        double lna = lns[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1552,"        double lnb = lns[1];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1555,"        double tmp1 = lna * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1556,"        double tmp2 = lna + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1557,"        lnb += lna - tmp2;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1558,"        lna = tmp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1561,"        final double aa = lna * ya;
",6,1,0,0,0,1,0,0,0,8,27,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1562,"        final double ab = lna * yb + lnb * ya + lnb * yb;
",14,5,0,0,0,1,0,0,0,20,49,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1564,"        lna = aa+ab;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1565,"        lnb = -(lna - aa - ab);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1567,"        double z = 1.0 / 120.0;
",2,1,0,0,0,0,0,0,0,3,23,5,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1568,"        z = z * lnb + (1.0 / 24.0);
",6,3,0,1,2,0,0,0,0,10,27,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1569,"        z = z * lnb + (1.0 / 6.0);
",6,3,0,1,2,0,0,0,0,10,26,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1570,"        z = z * lnb + 0.5;
",6,2,0,0,0,0,0,0,0,9,18,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1571,"        z = z * lnb + 1.0;
",6,2,0,0,0,0,0,0,0,9,18,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1572,"        z = z * lnb;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1574,"        final double result = exp(lna, z, null);
",2,0,0,1,2,1,6,0,0,10,40,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1576,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,44,6174,"        return LN_MANT;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3791,"    private static class lnMant {
",2,0,0,0,1,2,0,0,0,4,29,2,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3807,"                LN_MANT = FastMathLiteralArrays.loadLnMant();
",2,0,0,1,2,0,4,0,0,7,45,8,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3809,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00943,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1420,"        final double lns[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,35,4,0.00935,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1422,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00935,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1426,"        if (x != x) { // X is NaN
",4,1,0,1,3,0,0,0,0,5,25,4,0.00935,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1431,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00935,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,353,"    stepStart = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,23,4,0.00917,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,354,"    stepSize  = FastMath.sqrt(minStep * maxStep);
",6,1,0,1,2,0,4,0,0,12,45,4,0.00917,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,355,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00917,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,58,"    super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00870,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,59,"    yDotK      = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.00870,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,60,"    integrator = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.00870,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,61,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00870,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,111,"  protected AbstractStepInterpolator() {
",2,0,0,1,3,1,0,0,0,3,38,2,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,112,"    globalPreviousTime = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,32,4,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,113,"    globalCurrentTime  = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,32,4,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,114,"    softPreviousTime   = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,32,4,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,115,"    softCurrentTime    = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,32,4,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,116,"    h                  = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,32,4,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,117,"    interpolatedTime   = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,32,4,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,118,"    currentState       = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,119,"    finalized          = false;
",2,0,0,0,0,0,0,0,0,4,27,4,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,120,"    this.forward       = true;
",2,0,0,0,0,0,0,0,0,4,26,4,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,121,"    this.dirtyState    = true;
",2,0,0,0,0,0,0,0,0,4,26,4,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,122,"    primaryMapper      = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,123,"    secondaryMappers   = null;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,124,"    allocateInterpolatedArrays(-1);
",0,0,0,1,2,0,2,0,0,3,31,5,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,125,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,213,"          interpolatedState                = null;
",2,0,0,0,0,0,0,0,0,3,40,6,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,214,"          interpolatedDerivatives          = null;
",2,0,0,0,0,0,0,0,0,3,40,6,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,215,"          interpolatedPrimaryState         = null;
",2,0,0,0,0,0,0,0,0,3,40,6,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,216,"          interpolatedPrimaryDerivatives   = null;
",2,0,0,0,0,0,0,0,0,3,40,6,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,217,"          interpolatedSecondaryState       = null;
",2,0,0,0,0,0,0,0,0,3,40,6,0.00862,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,218,"          interpolatedSecondaryDerivatives = null;
",2,0,0,0,0,0,0,0,0,3,40,6,0.00862,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3539,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00826,0
defect4j,math,org/apache/commons/math/util/FastMath,44,826,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,882,"        final int intFrac = (int) ((x - intVal) * 1024.0);
",6,2,0,3,6,1,0,0,0,9,50,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,883,"        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,884,"        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,890,"        final double epsilon = x - (intVal + intFrac / 1024.0);
",8,3,0,1,2,1,0,0,0,12,55,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,899,"        double z = 0.04168701738764507;
",2,0,0,0,0,0,0,0,0,2,31,5,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,900,"        z = z * epsilon + 0.1666666505023083;
",6,2,0,0,0,0,0,0,0,9,37,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,901,"        z = z * epsilon + 0.5000000000042687;
",6,2,0,0,0,0,0,0,0,9,37,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,902,"        z = z * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,22,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,903,"        z = z * epsilon + -3.940510424527919E-20;
",6,2,0,0,0,0,0,0,0,10,41,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,910,"        double tempA = intPartA * fracPartA;
",6,1,0,0,0,0,0,0,0,7,36,5,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,911,"        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;
",14,5,0,0,0,0,0,0,0,19,82,5,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,917,"        final double tempC = tempB + tempA;
",6,1,0,0,0,1,0,0,0,8,35,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,919,"        if (extra != 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,925,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,931,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,44,29,"    private static final double[] EXP_INT_A = new double[] {
",2,0,0,2,5,3,0,0,0,5,56,2,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,44,1535,"    private static final double[] EXP_INT_B = new double[] {
",2,0,0,2,5,3,0,0,0,5,56,2,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,44,3043,"    private static final double[] EXP_FRAC_A = new double[] {
",2,0,0,2,5,3,0,0,0,5,57,2,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,44,4074,"    private static final double[] EXP_FRAC_B = new double[] {
",2,0,0,2,5,3,0,0,0,5,57,2,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,44,5103,"    private static final double[][] LN_MANT = new double[][] {
",2,0,0,4,9,3,0,0,0,5,58,2,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,44,6142,"        return EXP_INT_A;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,44,6150,"        return EXP_INT_B;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,44,6158,"        return EXP_FRAC_A;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,44,6166,"        return EXP_FRAC_B;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3754,"    private static class ExpFracTable {
",2,0,0,0,1,2,0,0,0,4,35,2,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3784,"                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();
",2,0,0,1,2,0,4,0,0,7,56,8,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3785,"                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();
",2,0,0,1,2,0,4,0,0,7,56,8,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3787,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3711,"    private static class ExpIntTable {
",2,0,0,0,1,2,0,0,0,4,34,2,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3747,"                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();
",2,0,0,1,2,0,4,0,0,7,54,8,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3748,"                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();
",2,0,0,1,2,0,4,0,0,7,54,8,0.00806,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3750,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00806,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,359,"    return softPreviousTime;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00794,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,368,"    return softCurrentTime;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00769,0
defect4j,math,org/apache/commons/math/util/FastMath,44,375,"        return Math.sqrt(a);
",0,0,0,1,2,1,6,0,0,6,20,5,0.00763,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,278,"            double previousT = interpolator.getGlobalPreviousTime();
",2,0,0,1,2,0,4,0,0,6,56,5,0.00735,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,279,"            final double currentT = interpolator.getGlobalCurrentTime();
",2,0,0,1,2,1,4,0,0,7,60,4,0.00735,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,280,"            resetOccurred = false;
",2,0,0,0,0,0,0,0,0,4,22,4,0.00735,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,283,"            if (! statesInitialized) {
",2,0,0,1,3,0,0,0,0,3,26,4,0.00735,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,284,"                for (EventState state : eventsStates) {
",4,0,0,1,3,0,0,2,0,6,39,6,0.00735,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,287,"                statesInitialized = true;
",2,0,0,0,0,0,0,0,0,4,25,6,0.00735,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,291,"            final int orderingSign = interpolator.isForward() ? +1 : -1;
",2,0,0,1,2,1,4,0,0,9,60,4,0.00735,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,292,"            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
",2,0,0,1,4,0,0,12,0,14,93,4,0.00735,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,301,"            for (final EventState state : eventsStates) {
",4,0,0,1,3,1,0,2,0,7,45,4,0.00735,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,308,"            while (!occuringEvents.isEmpty()) {
",0,0,0,2,5,0,4,0,0,5,35,4,0.00735,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,359,"            interpolator.setInterpolatedTime(currentT);
",0,0,0,1,2,0,6,0,0,6,43,5,0.00735,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,360,"            final double[] currentY = interpolator.getInterpolatedState();
",2,0,0,2,4,1,4,0,0,7,62,4,0.00735,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,361,"            for (final EventState state : eventsStates) {
",4,0,0,1,3,1,0,2,0,7,45,4,0.00735,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,365,"            isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);
",4,1,0,1,2,0,8,0,0,14,63,4,0.00735,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,368,"            for (StepHandler handler : stepHandlers) {
",4,0,0,1,3,0,0,2,0,6,42,4,0.00735,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,372,"            return currentT;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00735,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,292,"            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
",2,0,0,1,4,0,0,12,0,14,93,4,0.00735,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,342,"    return globalPreviousTime;
",2,0,0,0,0,1,0,0,0,2,26,4,0.00735,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,350,"    return globalCurrentTime;
",2,0,0,0,0,1,0,0,0,2,25,4,0.00735,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3005,"        return (x < 0l) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,25,5,0.00730,0
defect4j,math,org/apache/commons/math/util/Precision,44,267,"        long xInt = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00730,0
defect4j,math,org/apache/commons/math/util/Precision,44,268,"        long yInt = Double.doubleToLongBits(y);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00730,0
defect4j,math,org/apache/commons/math/util/Precision,44,271,"        if (xInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00730,0
defect4j,math,org/apache/commons/math/util/Precision,44,274,"        if (yInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00730,0
defect4j,math,org/apache/commons/math/util/Precision,44,278,"        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
",8,2,0,1,2,1,4,0,0,15,61,4,0.00730,0
defect4j,math,org/apache/commons/math/util/Precision,44,280,"        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);
",2,1,0,2,4,1,12,0,0,17,55,4,0.00730,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,384,"    return forward;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00725,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,98,"            return primaryMapper.getDimension();
",0,0,0,1,2,1,4,0,0,4,36,7,0.00719,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,402,"      if (dirtyState) {
",2,0,0,1,3,0,0,0,0,2,17,4,0.00709,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,403,"          final double oneMinusThetaH = globalCurrentTime - interpolatedTime;
",6,1,0,0,0,1,0,0,0,8,67,6,0.00709,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,404,"          final double theta = (h == 0) ? 0 : (h - oneMinusThetaH) / h;
",10,3,0,2,4,1,0,0,0,14,61,6,0.00709,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,405,"          computeInterpolatedStateAndDerivatives(theta, oneMinusThetaH);
",0,0,0,1,2,0,6,0,0,6,62,7,0.00709,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,406,"          dirtyState = false;
",2,0,0,0,0,0,0,0,0,4,19,6,0.00709,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,408,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00709,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,412,"      evaluateCompleteInterpolatedState();
",0,0,0,1,2,0,2,0,0,2,36,5,0.00709,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,413,"      primaryMapper.extractEquationData(interpolatedState,
",0,0,0,0,1,0,6,0,0,6,52,5,0.00709,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,415,"      return interpolatedPrimaryState;
",2,0,0,0,0,1,0,0,0,2,32,4,0.00709,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,251,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00704,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,116,"        primaryMapper.insertEquationData(primaryStateDot, yDot);
",0,0,0,1,2,0,8,0,0,8,56,5,0.00704,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,119,"        for (final SecondaryComponent component : components) {
",4,0,0,1,3,1,0,2,0,7,55,4,0.00704,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,126,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00704,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,192,"        this.expandable = equations;
",4,0,0,0,0,0,0,0,0,5,28,4,0.00699,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,193,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00699,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,203,"        if (y.length != equations.getDimension()) {
",4,1,0,2,5,0,4,0,0,9,43,4,0.00699,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,208,"        final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations);
",4,0,0,1,2,1,0,4,0,9,81,4,0.00699,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,209,"        expandableODE.setTime(t0);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00699,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,210,"        expandableODE.setPrimaryState(y0);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00699,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,213,"        integrate(expandableODE, t);
",0,0,0,1,2,0,6,0,0,6,28,5,0.00699,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,249,"        evaluations.incrementCount();
",0,0,0,1,2,0,4,0,0,4,29,5,0.00699,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,250,"        expandable.computeDerivatives(t, y, yDot);
",0,0,0,1,2,0,10,0,0,10,42,5,0.00699,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,261,"        this.statesInitialized = stateInitialized;
",4,0,0,0,0,0,0,0,0,5,42,4,0.00699,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,262,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00699,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,96,"        if (components.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,27,5,0.00699,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,114,"        primaryMapper.extractEquationData(y, primaryState);
",0,0,0,1,2,0,8,0,0,8,51,5,0.00699,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,115,"        primary.computeDerivatives(t, primaryState, primaryStateDot);
",0,0,0,1,2,0,10,0,0,10,61,5,0.00699,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,163,"        final EquationsMapper[] mappers = new EquationsMapper[components.size()];
",2,0,0,3,6,1,4,4,0,11,73,4,0.00699,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,164,"        for (int i = 0; i < mappers.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,42,4,0.00699,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,167,"        return mappers;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00699,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,285,"        double[] completeState = new double[getTotalDimension()];
",2,0,0,3,6,0,2,0,0,4,57,5,0.00699,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,288,"        primaryMapper.insertEquationData(primaryState, completeState);
",0,0,0,1,2,0,8,0,0,8,62,5,0.00699,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,289,"        for (final SecondaryComponent component : components) {
",4,0,0,1,3,1,0,2,0,7,55,4,0.00699,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,293,"        return completeState;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00699,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,44,92,"        if (equationData.length != dimension) {
",6,1,0,1,3,0,0,0,0,7,39,4,0.00699,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,44,95,"        System.arraycopy(equationData, 0, complete, firstIndex, dimension);
",0,0,0,1,2,0,12,0,0,12,67,5,0.00699,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,44,96,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00699,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,392,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00694,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,155,"        return primaryMapper;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00694,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,150,"        if (++count > maximalCount) {
",4,1,0,1,3,0,0,0,0,6,29,4,0.00694,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,153,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00694,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3542,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00690,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,384,"        final double threshold = 1000 * FastMath.ulp(FastMath.max(FastMath.abs(equations.getTime()),
",2,1,0,2,6,1,16,0,0,20,92,4,0.00680,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,386,"        final double dt = FastMath.abs(equations.getTime() - t);
",4,1,0,2,4,1,8,0,0,14,56,4,0.00680,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,387,"        if (dt <= threshold) {
",4,1,0,1,3,0,0,0,0,5,22,4,0.00680,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,72,"    public ExpandableStatefulODE(final FirstOrderDifferentialEquations primary) {
",4,0,0,1,3,2,0,2,0,8,77,2,0.00680,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,73,"        final int n          = primary.getDimension();
",2,0,0,1,2,1,4,0,0,7,46,4,0.00680,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,74,"        this.primary         = primary;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00680,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,75,"        this.primaryMapper   = new EquationsMapper(0, n);
",4,0,0,1,2,0,0,2,0,7,49,4,0.00680,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,76,"        this.time            = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,34,4,0.00680,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,77,"        this.primaryState    = new double[n];
",2,0,1,1,2,0,0,0,0,5,37,4,0.00680,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,78,"        this.primaryStateDot = new double[n];
",2,0,1,1,2,0,0,0,0,5,37,4,0.00680,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,79,"        this.components      = new ArrayList<ExpandableStatefulODE.SecondaryComponent>();
",6,0,0,1,2,0,0,2,0,9,81,4,0.00680,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00680,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,174,"        this.time = time;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00680,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,175,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00680,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,181,"        return time;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00680,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,192,"        if (primaryState.length != this.primaryState.length) {
",8,1,0,1,3,0,0,0,0,9,54,4,0.00680,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,197,"        System.arraycopy(primaryState, 0, this.primaryState, 0, primaryState.length);
",6,0,0,1,2,0,6,0,0,12,77,5,0.00680,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,199,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00680,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3032,"        if (Double.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00680,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3035,"        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,72,5,0.00680,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,220,"          interpolatedState                = new double[dimension];
",2,0,1,1,2,0,0,0,0,5,57,6,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,221,"          interpolatedDerivatives          = new double[dimension];
",2,0,1,1,2,0,0,0,0,5,57,6,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,222,"          interpolatedPrimaryState         = new double[primaryMapper.getDimension()];
",2,0,0,2,4,0,4,0,0,7,76,6,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,223,"          interpolatedPrimaryDerivatives   = new double[primaryMapper.getDimension()];
",2,0,0,2,4,0,4,0,0,7,76,6,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,224,"          if (secondaryMappers == null) {
",2,1,0,1,3,0,0,0,0,3,31,6,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,228,"              interpolatedSecondaryState       = new double[secondaryMappers.length][];
",6,0,0,2,4,0,0,0,0,7,73,8,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,229,"              interpolatedSecondaryDerivatives = new double[secondaryMappers.length][];
",6,0,0,2,4,0,0,0,0,7,73,8,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,230,"              for (int i = 0; i < secondaryMappers.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,51,8,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,289,"    globalPreviousTime = globalCurrentTime;
",4,0,0,0,0,0,0,0,0,5,39,4,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,290,"    softPreviousTime   = globalPreviousTime;
",4,0,0,0,0,0,0,0,0,5,40,4,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,291,"    softCurrentTime    = globalCurrentTime;
",4,0,0,0,0,0,0,0,0,5,39,4,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,292,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,299,"    globalCurrentTime = t;
",4,0,0,0,0,0,0,0,0,5,22,4,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,300,"    softCurrentTime   = globalCurrentTime;
",4,0,0,0,0,0,0,0,0,5,38,4,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,301,"    h                 = globalCurrentTime - globalPreviousTime;
",6,1,0,0,0,0,0,0,0,8,59,4,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,302,"    setInterpolatedTime(t);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,305,"    finalized  = false;
",2,0,0,0,0,0,0,0,0,4,19,4,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,307,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,378,"      interpolatedTime = time;
",4,0,0,0,0,0,0,0,0,5,24,4,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,379,"      dirtyState       = true;
",2,0,0,0,0,0,0,0,0,4,24,4,0.00676,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,380,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00676,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,44,77,"        if (equationData.length != dimension) {
",6,1,0,1,3,0,0,0,0,7,39,4,0.00676,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,44,80,"        System.arraycopy(complete, firstIndex, equationData, 0, dimension);
",0,0,0,1,2,0,12,0,0,12,67,5,0.00676,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,44,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00676,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3538,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00676,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3541,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00676,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,44,65,"        return dimension;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00671,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,200,"        if (y0.length != equations.getDimension()) {
",4,1,0,2,5,0,4,0,0,9,44,4,0.00658,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,44,49,"    public EquationsMapper(final int firstIndex, final int dimension) {
",6,0,0,1,3,3,0,0,0,9,67,2,0.00658,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,44,50,"        this.firstIndex = firstIndex;
",4,0,0,0,0,0,0,0,0,5,29,4,0.00658,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,44,51,"        this.dimension  = dimension;
",4,0,0,0,0,0,0,0,0,5,28,4,0.00658,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,44,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00658,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,212,"      if (dimension < 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00629,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,236,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00629,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,85,"    public AbstractIntegrator(final String name) {
",4,0,0,1,3,2,0,2,0,8,46,2,0.00625,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,86,"        this.name = name;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00625,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,87,"        stepHandlers = new ArrayList<StepHandler>();
",2,0,0,1,2,0,0,4,0,7,44,4,0.00625,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,88,"        stepStart = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,23,4,0.00625,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,89,"        stepSize  = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,23,4,0.00625,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,90,"        eventsStates = new ArrayList<EventState>();
",2,0,0,1,2,0,0,4,0,7,43,4,0.00625,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,91,"        statesInitialized = false;
",2,0,0,0,0,0,0,0,0,4,26,4,0.00625,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,92,"        evaluations = new Incrementor();
",2,0,0,1,2,0,0,2,0,5,32,4,0.00625,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,93,"        setMaxEvaluations(-1);
",0,0,0,1,2,0,2,0,0,3,22,5,0.00625,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,94,"        resetEvaluations();
",0,0,0,1,2,0,2,0,0,2,19,5,0.00625,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,95,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00625,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,169,"        evaluations.setMaximalCount((maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations);
",8,1,0,2,4,0,4,0,0,13,87,5,0.00625,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,170,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00625,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,185,"        evaluations.resetCount();
",0,0,0,1,2,0,4,0,0,4,25,5,0.00625,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,186,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00625,0
defect4j,math,org/apache/commons/math/util/FastMath,44,115,"    private static final double LN_QUICK_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,0.00621,0
defect4j,math,org/apache/commons/math/util/FastMath,44,128,"    private static final double LN_HI_PREC_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,51,2,0.00621,0
defect4j,math,org/apache/commons/math/util/FastMath,44,141,"    private static final double SINE_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,44,2,0.00621,0
defect4j,math,org/apache/commons/math/util/FastMath,44,160,"    private static final double SINE_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,44,2,0.00621,0
defect4j,math,org/apache/commons/math/util/FastMath,44,179,"    private static final double COSINE_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,46,2,0.00621,0
defect4j,math,org/apache/commons/math/util/FastMath,44,198,"    private static final double COSINE_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,46,2,0.00621,0
defect4j,math,org/apache/commons/math/util/FastMath,44,218,"    private static final double TANGENT_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,47,2,0.00621,0
defect4j,math,org/apache/commons/math/util/FastMath,44,237,"    private static final double TANGENT_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,47,2,0.00621,0
defect4j,math,org/apache/commons/math/util/FastMath,44,256,"    private static final long RECIP_2PI[] = new long[] {
",2,0,0,2,5,3,0,0,0,5,52,2,0.00621,0
defect4j,math,org/apache/commons/math/util/FastMath,44,277,"    private static final long PI_O_4_BITS[] = new long[] {
",2,0,0,2,5,3,0,0,0,5,54,2,0.00621,0
defect4j,math,org/apache/commons/math/util/FastMath,44,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};
",2,0,0,2,4,3,0,0,0,5,126,2,0.00621,0
defect4j,math,org/apache/commons/math/util/FastMath,44,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,
",2,0,0,1,3,3,0,0,0,5,61,2,0.00621,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3023,"        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,61,5,0.00621,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,52,"        this(0);
",0,0,0,1,2,0,0,0,0,0,8,3,0.00621,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00621,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,61,"        this(max,
",2,0,0,0,1,0,0,0,0,2,9,4,0.00621,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00621,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,78,"                       MaxCountExceededCallback cb) {
",2,0,0,0,2,0,0,2,0,4,30,3,0.00621,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,40,"    private int count = 0;
",2,0,0,0,0,1,0,0,0,3,22,2,0.00621,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,79,"        maximalCount = max;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00621,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,80,"        maxCountCallback = cb;
",4,0,0,0,0,0,0,0,0,5,22,4,0.00621,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00621,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,91,"        maximalCount = max;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00621,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,92,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00621,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,159,"        count = 0;
",2,0,0,0,0,0,0,0,0,3,10,4,0.00621,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,160,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00621,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,62,"             new MaxCountExceededCallback() {
",0,0,0,1,3,0,0,2,0,2,32,6,0.00621,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,125,"        return handler;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,132,"        return maxCheckInterval;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,139,"        return convergence;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,146,"        return maxIterationCount;
",2,0,0,0,0,1,0,0,0,2,25,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,171,"            final double epsilon = FastMath.max(solver.getAbsoluteAccuracy(),
",2,0,0,1,3,1,8,0,0,11,65,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,173,"            final double tStart = t0 + 0.5 * epsilon;
",6,2,0,0,0,1,0,0,0,9,41,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,174,"            interpolator.setInterpolatedTime(tStart);
",0,0,0,1,2,0,6,0,0,6,41,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,175,"            g0 = handler.g(tStart, interpolator.getInterpolatedState());
",2,0,0,2,4,0,10,0,0,13,60,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,195,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,233,"                        final double baseRoot = forward ?
",4,0,0,0,0,1,0,0,0,5,33,10,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,236,"                        final int remainingEval = maxIterationCount - solver.getEvaluations();
",4,1,0,1,2,1,4,0,0,10,70,10,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,237,"                        BracketedUnivariateRealSolver<UnivariateRealFunction> bracketing =
",2,0,0,0,0,0,0,4,0,6,66,10,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,239,"                        root = forward ?
",4,0,0,0,0,0,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,251,"                        ta = forward ? ta + convergence : ta - convergence;
",12,2,0,0,0,0,0,0,0,15,51,10,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,252,"                        ga = f.value(ta);
",2,0,0,1,2,0,6,0,0,9,17,10,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,253,"                        --i;
",2,0,0,0,0,0,0,0,0,3,4,10,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,261,"                        ta = tb;
",4,0,0,0,0,0,0,0,0,5,8,11,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,262,"                        ga = gb;
",4,0,0,0,0,0,0,0,0,5,8,11,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,265,"                } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,330,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,44,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,44,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,44,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,44,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,44,60,"        super(cause);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,44,61,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,44,62,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,44,63,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,44,69,"        this(LocalizedFormats.ILLEGAL_STATE);
",4,0,0,1,2,0,0,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,44,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,44,74,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,44,80,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,44,86,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,100,"        this(null);
",0,0,0,1,2,0,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,101,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,105,"        return name;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,110,"        stepHandlers.add(handler);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,115,"        return Collections.unmodifiableCollection(stepHandlers);
",0,0,0,1,2,1,6,0,0,6,56,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,120,"        stepHandlers.clear();
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,121,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,145,"        final List<EventHandler> list = new ArrayList<EventHandler>();
",2,0,0,1,2,1,0,8,0,11,62,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,146,"        for (EventState state : eventsStates) {
",4,0,0,1,3,0,0,2,0,6,39,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,147,"            list.add(state.getEventHandler());
",0,0,0,2,4,0,8,0,0,8,34,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,148,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,149,"        return Collections.unmodifiableCollection(list);
",0,0,0,1,2,1,6,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,154,"        eventsStates.clear();
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,159,"        return stepStart;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,164,"        return stepSize;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,174,"        return evaluations.getMaximalCount();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,179,"        return evaluations.getCount();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,201,"            throw new DimensionMismatchException(y0.length, equations.getDimension());
",4,0,0,2,4,0,4,2,0,10,74,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,204,"            throw new DimensionMismatchException(y.length, equations.getDimension());
",4,0,0,2,4,0,4,2,0,10,73,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,216,"        System.arraycopy(expandableODE.getPrimaryState(), 0, y, 0, y.length);
",4,0,0,2,4,0,10,0,0,14,69,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,217,"        return expandableODE.getTime();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,328,"                    handler.handleStep(interpolator, isLastStep);
",0,0,0,1,2,0,8,0,0,8,45,9,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,329,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,333,"                    System.arraycopy(eventY, 0, y, 0, y.length);
",4,0,0,1,2,0,8,0,0,12,44,9,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,334,"                    return eventT;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,347,"                previousT = eventT;
",4,0,0,0,0,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,348,"                interpolator.setSoftPreviousTime(eventT);
",0,0,0,1,2,0,6,0,0,6,41,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,349,"                interpolator.setSoftCurrentTime(currentT);
",0,0,0,1,2,0,6,0,0,6,42,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,352,"                if (currentEvent.evaluateStep(interpolator)) {
",0,0,0,2,5,0,6,0,0,6,46,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,354,"                    occuringEvents.add(currentEvent);
",0,0,0,1,2,0,6,0,0,6,33,9,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,357,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,369,"                handler.handleStep(interpolator, isLastStep);
",0,0,0,1,2,0,8,0,0,8,45,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,370,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,388,"            throw new NumberIsTooSmallException(LocalizedFormats.TOO_SMALL_INTEGRATION_INTERVAL,
",4,0,0,0,1,0,0,2,0,6,84,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,239,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,
",8,0,0,0,1,0,0,0,0,9,54,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,242,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,44,280,"      den = 1.0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,154,"    super(name, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
",10,0,0,1,2,0,0,0,0,10,74,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,156,"    this.fsal      = fsal;
",4,0,0,0,0,0,0,0,0,5,22,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,157,"    this.c         = c;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,158,"    this.a         = a;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,159,"    this.b         = b;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,160,"    this.prototype = prototype;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,162,"    exp = -1.0 / getOrder();
",2,1,0,1,2,0,2,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,165,"    setSafety(0.9);
",0,0,0,1,2,0,2,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,166,"    setMinReduction(0.2);
",0,0,0,1,2,0,2,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,167,"    setMaxGrowth(10.0);
",0,0,0,1,2,0,2,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,169,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,180,"    return safety;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,219,"        handler.reset();
",0,0,0,1,2,0,4,0,0,4,16,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,220,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,245,"              for (int i = 0; i < scale.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,40,12,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,246,"                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);
",0,2,1,5,10,0,4,0,0,23,82,14,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,284,"          final double factor =
",2,0,0,0,0,1,0,0,0,3,21,10,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,287,"          hNew = filterStep(stepSize * factor, forward, false);
",6,1,0,1,2,0,4,0,0,13,53,10,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,288,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,319,"              hNew = t - stepStart;
",6,1,0,0,0,0,0,0,0,8,21,10,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,327,"    equations.setTime(stepStart);
",0,0,0,1,2,0,6,0,0,6,29,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,328,"    equations.setCompleteState(y);
",0,0,0,1,2,0,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,330,"    resetInternalState();
",0,0,0,1,2,0,2,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,332,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,338,"    return minReduction;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,44,352,"    return maxGrowth;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,133,"    super(name);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,134,"    setStepSizeControl(minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
",0,0,0,1,2,0,10,0,0,10,81,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,135,"    resetInternalState();
",0,0,0,1,2,0,2,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,137,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,186,"      minStep     = FastMath.abs(minimalStep);
",2,0,0,1,2,0,6,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,187,"      maxStep     = FastMath.abs(maximalStep);
",2,0,0,1,2,0,6,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,188,"      initialStep = -1;
",2,0,0,0,0,0,0,0,0,4,17,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,190,"      scalAbsoluteTolerance = 0;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,191,"      scalRelativeTolerance = 0;
",2,0,0,0,0,0,0,0,0,3,26,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,192,"      vecAbsoluteTolerance  = absoluteTolerance.clone();
",2,0,0,1,2,0,4,0,0,7,50,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,193,"      vecRelativeTolerance  = relativeTolerance.clone();
",2,0,0,1,2,0,4,0,0,7,50,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,195,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,210,"      initialStep = -1.0;
",2,0,0,0,0,0,0,0,0,4,19,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,226,"          throw new DimensionMismatchException(mainSetDimension, vecAbsoluteTolerance.length);
",6,0,0,1,2,0,0,2,0,8,84,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,230,"          throw new DimensionMismatchException(mainSetDimension, vecRelativeTolerance.length);
",6,0,0,1,2,0,0,2,0,8,84,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,258,"    double yOnScale2 = 0;
",2,0,0,0,0,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,259,"    double yDotOnScale2 = 0;
",2,0,0,0,0,0,0,0,0,2,24,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,260,"    for (int j = 0; j < scale.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,261,"      ratio         = y0[j] / scale[j];
",2,1,1,2,4,0,0,0,0,12,33,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,262,"      yOnScale2    += ratio * ratio;
",6,1,0,0,0,0,0,0,0,8,30,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,263,"      ratio         = yDot0[j] / scale[j];
",2,1,1,2,4,0,0,0,0,12,36,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,264,"      yDotOnScale2 += ratio * ratio;
",6,1,0,0,0,0,0,0,0,8,30,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,267,"    double h = ((yOnScale2 < 1.0e-10) || (yDotOnScale2 < 1.0e-10)) ?
",6,3,0,3,6,0,0,0,0,9,64,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,269,"    if (! forward) {
",2,0,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,270,"      h = -h;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,274,"    for (int j = 0; j < y0.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,275,"      y1[j] = y0[j] + h * yDot0[j];
",2,2,1,3,6,0,0,0,0,17,29,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,277,"    computeDerivatives(t0 + h, y1, yDot1);
",4,1,0,1,2,0,6,0,0,11,38,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,280,"    double yDDotOnScale = 0;
",2,0,0,0,0,0,0,0,0,2,24,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,281,"    for (int j = 0; j < scale.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,282,"      ratio         = (yDot1[j] - yDot0[j]) / scale[j];
",2,2,1,4,8,0,0,0,0,17,49,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,283,"      yDDotOnScale += ratio * ratio;
",6,1,0,0,0,0,0,0,0,8,30,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,285,"    yDDotOnScale = FastMath.sqrt(yDDotOnScale) / h;
",4,1,0,1,2,0,6,0,0,12,47,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,289,"    final double maxInv2 = FastMath.max(FastMath.sqrt(yDotOnScale2), yDDotOnScale);
",2,0,0,2,4,1,12,0,0,15,79,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,290,"    final double h1 = (maxInv2 < 1.0e-15) ?
",4,1,0,1,2,1,0,0,0,6,39,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,293,"    h = FastMath.min(100.0 * FastMath.abs(h), h1);
",2,1,0,2,4,0,12,0,0,16,46,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,294,"    h = FastMath.max(h, 1.0e-12 * FastMath.abs(t0));  // avoids cancellation when computing t1 - t0
",2,1,0,2,4,0,12,0,0,16,95,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,295,"    if (h < getMinStep()) {
",2,1,0,2,5,0,2,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,296,"      h = getMinStep();
",2,0,0,1,2,0,2,0,0,5,17,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,298,"    if (h > getMaxStep()) {
",2,1,0,2,5,0,2,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,299,"      h = getMaxStep();
",2,0,0,1,2,0,2,0,0,5,17,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,301,"    if (! forward) {
",2,0,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,302,"      h = -h;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,305,"    return h;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,323,"          if (acceptSmall) {
",2,0,0,1,3,0,0,0,0,2,18,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,324,"              filteredH = forward ? minStep : -minStep;
",8,0,0,0,0,0,0,0,0,10,41,8,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,326,"              throw new NumberIsTooSmallException(LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION,
",4,0,0,0,1,0,0,2,0,6,97,9,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,332,"          filteredH = maxStep;
",4,0,0,0,0,0,0,0,0,5,20,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,334,"          filteredH = -maxStep;
",4,0,0,0,0,0,0,0,0,6,21,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,348,"    return stepStart;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,361,"    return minStep;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,368,"    return maxStep;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,44,50,"        this(boundIsAllowed ?
",2,0,0,0,1,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,44,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,44,68,"        super(specific, wrong, min);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,44,70,"        this.min = min;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,44,71,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,44,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,44,78,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,44,85,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,44,46,"        super(pattern, wrong, arguments);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,44,47,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,44,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,44,54,"        return argument;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,44,44,"                                        Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,44,45,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,44,46,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,44,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,44,51,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,44,57,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,44,63,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,44,44,"        super(specific, wrong, expected);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,44,45,"        dimension = expected;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,44,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,44,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);
",8,0,0,1,2,0,0,0,0,8,67,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,44,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,44,63,"        return dimension;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,136,"                                     final EquationsMapper[] secondaryMappers) {
",2,0,0,1,4,1,0,2,0,5,43,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,138,"    globalPreviousTime    = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,139,"    globalCurrentTime     = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,140,"    softPreviousTime      = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,141,"    softCurrentTime       = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,142,"    h                     = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,143,"    interpolatedTime      = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,144,"    currentState          = y;
",4,0,0,0,0,0,0,0,0,5,26,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,145,"    finalized             = false;
",2,0,0,0,0,0,0,0,0,4,30,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,146,"    this.forward          = forward;
",4,0,0,0,0,0,0,0,0,5,32,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,147,"    this.dirtyState       = true;
",2,0,0,0,0,0,0,0,0,4,29,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,148,"    this.primaryMapper    = primaryMapper;
",4,0,0,0,0,0,0,0,0,5,38,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,149,"    this.secondaryMappers = (secondaryMappers == null) ? null : secondaryMappers.clone();
",4,1,0,2,4,0,4,0,0,10,85,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,150,"    allocateInterpolatedArrays(y.length);
",4,0,0,1,2,0,2,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,152,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,186,"      currentState                     = interpolator.currentState.clone();
",6,0,0,1,2,0,2,0,0,9,69,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,187,"      interpolatedState                = interpolator.interpolatedState.clone();
",6,0,0,1,2,0,2,0,0,9,74,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,188,"      interpolatedDerivatives          = interpolator.interpolatedDerivatives.clone();
",6,0,0,1,2,0,2,0,0,9,80,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,189,"      interpolatedPrimaryState         = interpolator.interpolatedPrimaryState.clone();
",6,0,0,1,2,0,2,0,0,9,81,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,190,"      interpolatedPrimaryDerivatives   = interpolator.interpolatedPrimaryDerivatives.clone();
",6,0,0,1,2,0,2,0,0,9,87,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,191,"      interpolatedSecondaryState       = new double[interpolator.interpolatedSecondaryState.length][];
",8,0,0,2,4,0,0,0,0,9,96,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,192,"      interpolatedSecondaryDerivatives = new double[interpolator.interpolatedSecondaryDerivatives.length][];
",8,0,0,2,4,0,0,0,0,9,102,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,193,"      for (int i = 0; i < interpolatedSecondaryState.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,61,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,194,"          interpolatedSecondaryState[i]       = interpolator.interpolatedSecondaryState[i].clone();
",4,0,1,3,6,0,2,0,0,13,89,8,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,195,"          interpolatedSecondaryDerivatives[i] = interpolator.interpolatedSecondaryDerivatives[i].clone();
",4,0,1,3,6,0,2,0,0,13,95,8,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,225,"              interpolatedSecondaryState       = null;
",2,0,0,0,0,0,0,0,0,3,40,8,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,226,"              interpolatedSecondaryDerivatives = null;
",2,0,0,0,0,0,0,0,0,3,40,8,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,231,"                  interpolatedSecondaryState[i]       = new double[secondaryMappers[i].getDimension()];
",0,0,1,4,8,0,2,0,0,11,85,10,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,232,"                  interpolatedSecondaryDerivatives[i] = new double[secondaryMappers[i].getDimension()];
",0,0,1,4,8,0,2,0,0,11,85,10,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,373,"    return interpolatedTime;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,420,"      evaluateCompleteInterpolatedState();
",0,0,0,1,2,0,2,0,0,2,36,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,421,"      primaryMapper.extractEquationData(interpolatedDerivatives,
",0,0,0,0,1,0,6,0,0,6,58,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,423,"      return interpolatedPrimaryDerivatives;
",2,0,0,0,0,1,0,0,0,2,38,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,428,"      evaluateCompleteInterpolatedState();
",0,0,0,1,2,0,2,0,0,2,36,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,429,"      secondaryMappers[index].extractEquationData(interpolatedState,
",0,0,1,1,3,0,4,0,0,8,62,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,431,"      return interpolatedSecondaryState[index];
",0,0,1,1,2,1,0,0,0,4,41,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,436,"      evaluateCompleteInterpolatedState();
",0,0,0,1,2,0,2,0,0,2,36,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,437,"      secondaryMappers[index].extractEquationData(interpolatedDerivatives,
",0,0,1,1,3,0,4,0,0,8,68,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,439,"      return interpolatedSecondaryDerivatives[index];
",0,0,1,1,2,1,0,0,0,4,47,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,493,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,512,"    if (currentState == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,513,"        out.writeInt(-1);
",0,0,0,1,2,0,4,0,0,5,17,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,515,"        out.writeInt(currentState.length);
",4,0,0,1,2,0,4,0,0,8,34,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,517,"    out.writeDouble(globalPreviousTime);
",0,0,0,1,2,0,6,0,0,6,36,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,518,"    out.writeDouble(globalCurrentTime);
",0,0,0,1,2,0,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,519,"    out.writeDouble(softPreviousTime);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,520,"    out.writeDouble(softCurrentTime);
",0,0,0,1,2,0,6,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,521,"    out.writeDouble(h);
",0,0,0,1,2,0,6,0,0,6,19,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,522,"    out.writeBoolean(forward);
",0,0,0,1,2,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,523,"    out.writeObject(primaryMapper);
",0,0,0,1,2,0,6,0,0,6,31,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,524,"    out.write(secondaryMappers.length);
",4,0,0,1,2,0,4,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,525,"    for (final EquationsMapper  mapper : secondaryMappers) {
",4,0,0,1,3,1,0,2,0,7,56,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,526,"        out.writeObject(mapper);
",0,0,0,1,2,0,6,0,0,6,24,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,529,"    if (currentState != null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,530,"        for (int i = 0; i < currentState.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,47,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,531,"            out.writeDouble(currentState[i]);
",0,0,1,2,4,0,4,0,0,8,33,9,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,535,"    out.writeDouble(interpolatedTime);
",0,0,0,1,2,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,541,"    finalizeStep();
",0,0,0,1,2,0,2,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,543,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,559,"    final int dimension = in.readInt();
",2,0,0,1,2,1,4,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,560,"    globalPreviousTime  = in.readDouble();
",2,0,0,1,2,0,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,561,"    globalCurrentTime   = in.readDouble();
",2,0,0,1,2,0,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,562,"    softPreviousTime    = in.readDouble();
",2,0,0,1,2,0,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,563,"    softCurrentTime     = in.readDouble();
",2,0,0,1,2,0,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,564,"    h                   = in.readDouble();
",2,0,0,1,2,0,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,565,"    forward             = in.readBoolean();
",2,0,0,1,2,0,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,566,"    primaryMapper       = (EquationsMapper) in.readObject();
",2,0,0,2,4,0,4,2,0,9,56,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,567,"    secondaryMappers    = new EquationsMapper[in.read()];
",2,0,0,2,4,0,4,2,0,9,53,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,568,"    for (int i = 0; i < secondaryMappers.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,51,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,569,"        secondaryMappers[i] = (EquationsMapper) in.readObject();
",0,0,1,3,6,0,4,2,0,11,56,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,571,"    dirtyState          = true;
",2,0,0,0,0,0,0,0,0,4,27,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,573,"    if (dimension < 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,574,"        currentState = null;
",2,0,0,0,0,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,576,"        currentState  = new double[dimension];
",2,0,1,1,2,0,0,0,0,5,38,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,577,"        for (int i = 0; i < currentState.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,47,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,578,"            currentState[i] = in.readDouble();
",0,0,1,2,4,0,4,0,0,9,34,8,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,583,"    interpolatedTime = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,584,"    allocateInterpolatedArrays(dimension);
",0,0,0,1,2,0,4,0,0,4,38,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,586,"    finalized = true;
",2,0,0,0,0,0,0,0,0,4,17,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,44,588,"    return in.readDouble();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,85,"      final int dimension = currentState.length;
",6,0,0,0,0,1,0,0,0,7,42,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,87,"      yDotK = new double[interpolator.yDotK.length][];
",8,0,0,2,4,0,0,0,0,9,48,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,88,"      for (int k = 0; k < interpolator.yDotK.length; ++k) {
",12,1,0,1,3,0,0,0,0,14,53,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,89,"        yDotK[k] = new double[dimension];
",0,0,1,2,4,0,0,0,0,7,33,8,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,90,"        System.arraycopy(interpolator.yDotK[k], 0,
",4,0,1,1,3,0,4,0,0,10,42,9,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,94,"    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,142,"    writeBaseExternal(out);
",0,0,0,1,2,0,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,145,"    final int n = (currentState == null) ? -1 : currentState.length;
",8,1,0,1,2,1,0,0,0,11,64,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,146,"    final int kMax = (yDotK == null) ? -1 : yDotK.length;
",8,1,0,1,2,1,0,0,0,11,53,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,147,"    out.writeInt(kMax);
",0,0,0,1,2,0,6,0,0,6,19,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,148,"    for (int k = 0; k < kMax; ++k) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,149,"      for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,150,"        out.writeDouble(yDotK[k][i]);
",0,0,1,3,6,0,4,0,0,10,29,9,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,156,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,164,"    final double t = readBaseExternal(in);
",2,0,0,1,2,1,4,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,167,"    final int n = (currentState == null) ? -1 : currentState.length;
",8,1,0,1,2,1,0,0,0,11,64,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,168,"    final int kMax = in.readInt();
",2,0,0,1,2,1,4,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,169,"    yDotK = (kMax < 0) ? null : new double[kMax][];
",4,1,1,3,6,0,0,0,0,8,47,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,170,"    for (int k = 0; k < kMax; ++k) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,171,"      yDotK[k] = (n < 0) ? null : new double[n];
",2,1,1,3,6,0,0,0,0,10,42,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,172,"      for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,173,"        yDotK[k][i] = in.readDouble();
",0,0,1,3,6,0,4,0,0,11,30,8,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,177,"    integrator = null;
",2,0,0,0,0,0,0,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,179,"    if (currentState != null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,181,"        setInterpolatedTime(t);
",0,0,0,1,2,0,4,0,0,4,23,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,183,"        interpolatedTime = t;
",4,0,0,0,0,0,0,0,0,5,21,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaStepInterpolator,44,186,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,254,"      final int dimension = interpolator.currentState.length;
",8,0,0,0,0,1,0,0,0,9,55,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,256,"      yDotKLast    = new double[3][];
",2,0,0,2,4,0,0,0,0,3,31,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,257,"      for (int k = 0; k < yDotKLast.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,44,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,258,"        yDotKLast[k] = new double[dimension];
",0,0,1,2,4,0,0,0,0,7,37,8,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,259,"        System.arraycopy(interpolator.yDotKLast[k], 0, yDotKLast[k], 0,
",4,0,1,2,5,0,4,0,0,14,63,9,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,263,"      v = new double[7][];
",2,0,0,2,4,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,264,"      for (int k = 0; k < v.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,36,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,265,"        v[k] = new double[dimension];
",0,0,1,2,4,0,0,0,0,7,29,8,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,266,"        System.arraycopy(interpolator.v[k], 0, v[k], 0, dimension);
",4,0,1,3,6,0,6,0,0,16,59,9,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,269,"      vectorsInitialized = interpolator.vectorsInitialized;
",6,0,0,0,0,0,0,0,0,7,53,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,321,"        v = new double[7][];
",2,0,0,2,4,0,0,0,0,3,20,8,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,322,"        for (int k = 0; k < 7; ++k) {
",6,1,0,1,3,0,0,0,0,8,29,8,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,323,"          v[k] = new double[interpolatedState.length];
",4,0,1,2,4,0,0,0,0,9,44,10,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,437,"    finalizeStep();
",0,0,0,1,2,0,2,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,439,"    final int dimension = (currentState == null) ? -1 : currentState.length;
",8,1,0,1,2,1,0,0,0,11,72,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,440,"    out.writeInt(dimension);
",0,0,0,1,2,0,6,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,441,"    for (int i = 0; i < dimension; ++i) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,442,"      out.writeDouble(yDotKLast[0][i]);
",0,0,1,3,6,0,4,0,0,8,33,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,443,"      out.writeDouble(yDotKLast[1][i]);
",0,0,1,3,6,0,4,0,0,8,33,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,444,"      out.writeDouble(yDotKLast[2][i]);
",0,0,1,3,6,0,4,0,0,8,33,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,448,"    super.writeExternal(out);
",4,0,0,1,2,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,450,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,458,"    yDotKLast = new double[3][];
",2,0,0,2,4,0,0,0,0,3,28,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,459,"    final int dimension = in.readInt();
",2,0,0,1,2,1,4,0,0,7,35,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,460,"    yDotKLast[0] = (dimension < 0) ? null : new double[dimension];
",2,1,1,3,6,0,0,0,0,8,62,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,461,"    yDotKLast[1] = (dimension < 0) ? null : new double[dimension];
",2,1,1,3,6,0,0,0,0,8,62,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,462,"    yDotKLast[2] = (dimension < 0) ? null : new double[dimension];
",2,1,1,3,6,0,0,0,0,8,62,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,464,"    for (int i = 0; i < dimension; ++i) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,465,"      yDotKLast[0][i] = in.readDouble();
",0,0,1,3,6,0,4,0,0,9,34,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,466,"      yDotKLast[1][i] = in.readDouble();
",0,0,1,3,6,0,4,0,0,9,34,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,467,"      yDotKLast[2][i] = in.readDouble();
",0,0,1,3,6,0,4,0,0,9,34,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,471,"    super.readExternal(in);
",4,0,0,1,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,44,473,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,86,"        return primary;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,101,"            final EquationsMapper lastMapper = components.get(components.size() - 1).mapper;
",4,1,0,2,4,1,8,2,0,16,80,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,102,"            return lastMapper.getFirstIndex() + lastMapper.getDimension();
",0,1,0,2,4,1,8,0,0,9,62,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,120,"            component.mapper.extractEquationData(y, component.state);
",8,0,0,1,2,0,4,0,0,12,57,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,121,"            component.equation.computeDerivatives(t, primaryState, primaryStateDot,
",4,0,0,0,1,0,8,0,0,12,71,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,123,"            component.mapper.insertEquationData(component.stateDot, yDot);
",8,0,0,1,2,0,4,0,0,12,62,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,124,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,135,"        if (components.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,137,"            components = new ArrayList<ExpandableStatefulODE.SecondaryComponent>();
",6,0,0,1,2,0,0,2,0,9,71,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,138,"            firstIndex = primary.getDimension();
",2,0,0,1,2,0,4,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,140,"            final SecondaryComponent last = components.get(components.size() - 1);
",2,1,0,2,4,1,8,2,0,14,70,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,141,"            firstIndex = last.mapper.getFirstIndex() + last.mapper.getDimension();
",10,1,0,2,4,0,4,0,0,16,70,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,144,"        components.add(new SecondaryComponent(secondary, firstIndex));
",4,0,0,2,4,0,4,2,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,146,"        return components.size() - 1;
",0,1,0,1,2,1,4,0,0,5,29,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,165,"            mappers[i] = components.get(i).mapper;
",2,0,1,2,4,0,6,0,0,13,38,6,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,193,"            throw new DimensionMismatchException(primaryState.length, this.primaryState.length);
",8,0,0,1,2,0,0,2,0,10,84,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,205,"        return primaryState.clone();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,212,"        return primaryStateDot.clone();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,226,"        double[] localArray = components.get(index).state;
",4,0,0,2,4,0,6,0,0,10,50,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,229,"        if (secondaryState.length != localArray.length) {
",8,1,0,1,3,0,0,0,0,9,49,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,230,"            throw new DimensionMismatchException(secondaryState.length, localArray.length);
",8,0,0,1,2,0,0,2,0,10,79,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,234,"        System.arraycopy(secondaryState, 0, localArray, 0, secondaryState.length);
",4,0,0,1,2,0,8,0,0,12,74,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,236,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,244,"        return components.get(index).state.clone();
",2,0,0,2,4,1,8,0,0,10,43,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,253,"        return components.get(index).stateDot.clone();
",2,0,0,2,4,1,8,0,0,10,46,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,265,"        if (completeState.length != getTotalDimension()) {
",4,1,0,2,5,0,2,0,0,7,50,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,266,"            throw new DimensionMismatchException(completeState.length, getTotalDimension());
",4,0,0,2,4,0,2,2,0,8,80,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,270,"        primaryMapper.extractEquationData(completeState, primaryState);
",0,0,0,1,2,0,8,0,0,8,63,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,271,"        for (final SecondaryComponent component : components) {
",4,0,0,1,3,1,0,2,0,7,55,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,272,"            component.mapper.extractEquationData(completeState, component.state);
",8,0,0,1,2,0,4,0,0,12,69,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,273,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,275,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,290,"            component.mapper.insertEquationData(component.state, completeState);
",8,0,0,1,2,0,4,0,0,12,68,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,291,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,44,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);
",6,0,0,1,2,0,0,0,0,6,47,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,44,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,44,53,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,44,54,"        getContext().addMessage(specific, max, args);
",0,0,0,2,4,0,10,0,0,10,45,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,44,55,"        this.max = max;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,44,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,44,62,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,44,58,"        return firstIndex;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,44,78,"            throw new DimensionMismatchException(equationData.length, dimension);
",6,0,0,1,2,0,0,2,0,8,69,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/EquationsMapper,44,93,"            throw new DimensionMismatchException(equationData.length, dimension);
",6,0,0,1,2,0,0,2,0,8,69,7,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,316,"        public SecondaryComponent(final SecondaryEquations equation, final int firstIndex) {
",6,0,0,1,3,3,0,2,0,11,84,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,317,"            final int n   = equation.getDimension();
",2,0,0,1,2,1,4,0,0,7,40,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,318,"            this.equation = equation;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,319,"            mapper        = new EquationsMapper(firstIndex, n);
",6,0,0,1,2,0,0,2,0,9,51,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,320,"            state         = new double[n];
",2,0,1,1,2,0,0,0,0,5,30,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,321,"            stateDot      = new double[n];
",2,0,1,1,2,0,0,0,0,5,30,5,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,322,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ode/ExpandableStatefulODE,44,298,"    private static class SecondaryComponent {
",2,0,0,0,1,2,0,0,0,4,41,2,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,73,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,74,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,83,"        return new Double(value).hashCode();
",2,0,0,2,4,1,2,2,0,6,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,94,"        return Arrays.hashCode(value);
",0,0,0,1,2,1,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,105,"        return (x >= ZB) ? PB : NB;
",8,1,0,1,2,1,0,0,0,9,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,117,"        if (Double.isNaN(x)) {
",0,0,0,2,5,0,6,0,0,6,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,118,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,120,"        return (x >= 0.0) ? 1.0 : -1.0;
",2,1,0,1,2,1,0,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,131,"        if (Float.isNaN(x)) {
",0,0,0,2,5,0,6,0,0,6,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,132,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,134,"        return (x >= 0.0F) ? 1.0F : -1.0F;
",2,1,0,1,2,1,0,0,0,4,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,144,"        return (x >= 0) ? 1 : -1;
",2,1,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,154,"        return (x >= 0L) ? 1L : -1L;
",2,1,0,1,2,1,0,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,165,"        return (x >= ZS) ? PS : NS;
",8,1,0,1,2,1,0,0,0,9,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,188,"         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);
",14,5,0,2,4,1,4,0,0,23,72,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,210,"        final double p = FastMath.abs(period);
",2,0,0,1,2,1,6,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,211,"        return a - p * FastMath.floor((a - offset) / p) - offset;
",12,5,0,2,4,1,4,0,0,21,57,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,225,"        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;
",14,2,0,2,4,1,0,0,0,16,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,239,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,241,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,242,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,244,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,246,"            return (byte) -magnitude; // Flip sign.
",2,0,0,1,2,1,0,0,0,3,39,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,261,"        return (x == 0) ? 0 : (x > 0) ? 1 : -1;
",4,2,0,2,4,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,275,"        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;
",4,2,0,2,4,1,0,0,0,7,44,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,286,"        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;
",14,2,0,2,4,1,0,0,0,16,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,298,"        if (e < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,299,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);
",6,0,0,1,2,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,302,"        int result = 1;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,303,"        int k2p    = k;
",4,0,0,0,0,0,0,0,0,4,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,304,"        while (e != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,305,"            if ((e & 0x1) != 0) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,306,"                result *= k2p;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,308,"            k2p *= k2p;
",4,0,0,0,0,0,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,309,"            e = e >> 1;
",4,1,0,0,0,0,0,0,0,6,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,312,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,324,"        if (e < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,325,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);
",6,0,0,1,2,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,328,"        int result = 1;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,329,"        int k2p    = k;
",4,0,0,0,0,0,0,0,0,4,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,330,"        while (e != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,331,"            if ((e & 0x1) != 0) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,332,"                result *= k2p;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,334,"            k2p *= k2p;
",4,0,0,0,0,0,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,335,"            e = e >> 1;
",4,1,0,0,0,0,0,0,0,6,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,338,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,350,"        if (e < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,351,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);
",6,0,0,1,2,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,354,"        long result = 1l;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,355,"        long k2p    = k;
",4,0,0,0,0,0,0,0,0,4,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,356,"        while (e != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,357,"            if ((e & 0x1) != 0) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,358,"                result *= k2p;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,360,"            k2p *= k2p;
",4,0,0,0,0,0,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,361,"            e = e >> 1;
",4,1,0,0,0,0,0,0,0,6,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,364,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,376,"        if (e < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,377,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);
",6,0,0,1,2,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,380,"        long result = 1l;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,381,"        long k2p    = k;
",4,0,0,0,0,0,0,0,0,4,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,382,"        while (e != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,383,"            if ((e & 0x1) != 0) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,384,"                result *= k2p;
",4,0,0,0,0,0,0,0,0,5,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,386,"            k2p *= k2p;
",4,0,0,0,0,0,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,387,"            e = e >> 1;
",4,1,0,0,0,0,0,0,0,6,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,390,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,402,"        if (e < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,403,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);
",6,0,0,1,2,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,406,"        return k.pow(e);
",0,0,0,1,2,1,6,0,0,6,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,418,"        if (e < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,419,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);
",6,0,0,1,2,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,422,"        BigInteger result = BigInteger.ONE;
",6,0,0,0,0,0,0,2,0,8,35,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,423,"        BigInteger k2p    = k;
",4,0,0,0,0,0,0,2,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,424,"        while (e != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,425,"            if ((e & 0x1) != 0) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,426,"                result = result.multiply(k2p);
",2,0,0,1,2,0,6,0,0,9,30,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,428,"            k2p = k2p.multiply(k2p);
",2,0,0,1,2,0,6,0,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,429,"            e = e >> 1;
",4,1,0,0,0,0,0,0,0,6,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,432,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,445,"        if (e.compareTo(BigInteger.ZERO) < 0) {
",4,1,0,2,5,0,4,0,0,9,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,446,"            throw new NotPositiveException(LocalizedFormats.EXPONENT, e);
",6,0,0,1,2,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,449,"        BigInteger result = BigInteger.ONE;
",6,0,0,0,0,0,0,2,0,8,35,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,450,"        BigInteger k2p    = k;
",4,0,0,0,0,0,0,2,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,451,"        while (!BigInteger.ZERO.equals(e)) {
",4,0,0,2,5,0,4,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,452,"            if (e.testBit(0)) {
",0,0,0,2,5,0,4,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,453,"                result = result.multiply(k2p);
",2,0,0,1,2,0,6,0,0,9,30,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,455,"            k2p = k2p.multiply(k2p);
",2,0,0,1,2,0,6,0,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,456,"            e = e.shiftRight(1);
",2,0,0,1,2,0,4,0,0,7,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,459,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,470,"        if (Double.isInfinite(x) || Double.isNaN(x)) {
",0,1,0,3,7,0,12,0,0,13,46,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,471,"            throw new NotFiniteNumberException(x);
",2,0,0,1,2,0,0,2,0,4,38,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,473,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,483,"        for (int i = 0; i < val.length; i++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,484,"            final double x = val[i];
",2,0,1,1,2,1,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,485,"            if (Double.isInfinite(x) || Double.isNaN(x)) {
",0,1,0,3,7,0,12,0,0,13,46,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,486,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);
",8,0,0,1,2,0,0,2,0,10,73,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,489,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,502,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,503,"            throw new NullArgumentException(pattern, args);
",4,0,0,1,2,0,0,2,0,6,47,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,505,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,44,516,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,44,43,"    public MathArithmeticException() {
",2,0,0,1,3,1,0,0,0,3,34,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,44,44,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,44,45,"        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);
",4,0,0,1,2,0,4,0,0,8,58,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,44,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,44,56,"                                   Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,44,57,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,44,58,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,44,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,44,63,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,44,69,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathArithmeticException,44,75,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,44,37,"        super(value, 0, true);
",2,0,0,1,2,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,44,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,44,47,"        super(specific, value, 0, true);
",4,0,0,1,2,0,0,0,0,5,32,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotPositiveException,44,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,44,41,"        this(LocalizedFormats.NULL_NOT_ALLOWED);
",4,0,0,1,2,0,0,0,0,4,40,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,44,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,44,50,"        super(pattern, arguments);
",4,0,0,1,2,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,44,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,44,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);
",8,0,0,1,2,0,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,44,41,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,44,53,"        super(specific, wrong, args);
",6,0,0,1,2,0,0,0,0,6,29,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotFiniteNumberException,44,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,349,"    private FastMath() {}
",2,0,0,2,4,1,0,0,0,3,21,2,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,361,"        if (d > -MathUtils.SAFE_MIN && d < MathUtils.SAFE_MIN){
",12,3,0,1,3,0,0,0,0,16,55,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,362,"            return d; // These are un-normalised - don't try to convert
",2,0,0,0,0,1,0,0,0,2,59,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,364,"        long xl = Double.doubleToLongBits(d);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,365,"        xl = xl & MASK_30BITS; // Drop low order bits
",6,1,0,0,0,0,0,0,0,8,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,366,"        return Double.longBitsToDouble(xl);
",0,0,0,1,2,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,383,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,384,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,392,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,393,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,396,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,397,"          return exp(-x)/2.0;
",2,1,0,1,2,1,2,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,400,"      double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,401,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,402,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,404,"      exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,406,"      double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,407,"      double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,409,"      double temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,410,"      double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,411,"      double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,414,"      double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,415,"      temp = recip * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,416,"      double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,417,"      double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,420,"      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,422,"      recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,425,"      temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,426,"      yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,427,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,428,"      temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,429,"      yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,430,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,432,"      double result = ya + yb;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,433,"      result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,434,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,442,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,443,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,444,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,452,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,453,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,456,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,457,"          return -exp(-x)/2.0;
",2,1,0,1,2,1,2,0,0,7,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,460,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,461,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,464,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,465,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,466,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,471,"      if (x > 0.25) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,472,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,473,"          exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,475,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,476,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,478,"          double temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,479,"          double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,480,"          double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,483,"          double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,484,"          temp = recip * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,485,"          double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,486,"          double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,489,"          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,491,"          recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,493,"          recipa = -recipa;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,494,"          recipb = -recipb;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,497,"          temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,498,"          yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,499,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,500,"          temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,501,"          yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,502,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,504,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,505,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,506,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,508,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,509,"          expm1(x, hiPrec);
",0,0,0,1,2,0,6,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,511,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,512,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,515,"          double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,516,"          double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,517,"          double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,518,"          double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,519,"          double temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,35,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,520,"          double ra = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,521,"          double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,523,"          temp = denom * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,524,"          double za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,525,"          double zb = denom - za;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,527,"          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,530,"          rb += yb*denomr;                        // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,531,"          rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,534,"          temp = ya + ra;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,535,"          yb += -(temp - ya - ra);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,536,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,537,"          temp = ya + rb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,538,"          yb += -(temp - ya - rb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,539,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,541,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,542,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,545,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,546,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,549,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,557,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,559,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,560,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,569,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,570,"          return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,573,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,574,"          return -1.0;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,577,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,578,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,581,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,582,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,583,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,587,"      if (x >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,588,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,590,"          exp(x*2.0, 0.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,24,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,592,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,593,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,596,"          double na = -1.0 + ya;
",4,1,0,0,0,0,0,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,597,"          double nb = -(na + 1.0 - ya);
",6,2,0,1,2,0,0,0,0,9,29,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,598,"          double temp = na + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,599,"          nb += -(temp - na - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,600,"          na = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,603,"          double da = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,604,"          double db = -(da - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,605,"          temp = da + yb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,606,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,607,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,609,"          temp = da * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,610,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,611,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,614,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,615,"          temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,616,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,617,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,620,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,623,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,625,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,627,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,628,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,630,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,632,"          expm1(x*2.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,634,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,635,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,638,"          double na = ya;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,639,"          double nb = yb;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,642,"          double da = 2.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,643,"          double db = -(da - 2.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,644,"          double temp = da + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,645,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,646,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,648,"          temp = da * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,649,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,650,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,653,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,654,"          temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,655,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,656,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,659,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,662,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,664,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,666,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,669,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,670,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,673,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,681,"        return FastMath.log(a + FastMath.sqrt(a * a - 1));
",6,3,0,2,4,1,8,0,0,17,50,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,689,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,690,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,691,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,692,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,696,"        if (a > 0.167) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,697,"            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);
",8,3,0,2,4,0,8,0,0,20,54,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,699,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,700,"            if (a > 0.097) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,701,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",52,17,0,8,16,0,0,0,0,70,212,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,702,"            } else if (a > 0.036) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,703,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",40,13,0,6,12,0,0,0,0,54,160,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,704,"            } else if (a > 0.0036) {
",2,1,0,1,4,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,705,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",28,9,0,4,8,0,0,0,0,38,109,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,707,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);
",16,5,0,2,4,0,0,0,0,22,63,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,711,"        return negative ? -absAsinh : absAsinh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,719,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,720,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,721,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,722,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,726,"        if (a > 0.15) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,727,"            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));
",6,4,0,3,6,0,4,0,0,15,49,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,729,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,730,"            if (a > 0.087) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,731,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));
",36,17,0,8,16,0,0,0,0,54,141,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,732,"            } else if (a > 0.031) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,733,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));
",28,13,0,6,12,0,0,0,0,42,109,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,734,"            } else if (a > 0.003) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,735,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));
",20,9,0,4,8,0,0,0,0,30,77,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,737,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));
",12,5,0,2,4,0,0,0,0,18,47,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,741,"        return negative ? -absAtanh : absAtanh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,750,"        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a
",6,2,0,3,6,2,0,0,0,9,87,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,759,"        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a
",6,2,0,3,6,2,0,0,0,9,91,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,45,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,783,"        return Math.random();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,807,"        return exp(x, 0.0, null);
",0,0,0,1,2,1,4,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,827,"            intVal = (int) -x;
",4,0,0,1,2,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,829,"            if (intVal > 746) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,830,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,831,"                    hiPrec[0] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,832,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,834,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,837,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,840,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,841,"                    hiPrec[0] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,842,"                    hiPrec[1] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,844,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,847,"            if (intVal == 709) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,850,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,851,"                    hiPrec[0] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,852,"                    hiPrec[1] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,854,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,857,"            intVal++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,859,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,860,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,862,"            intVal = -intVal;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,867,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,868,"                    hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,869,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,871,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,922,"            result = tempC*z + tempB + tempA;
",10,3,0,0,0,0,0,0,0,14,33,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,927,"            hiPrec[0] = tempA;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,928,"            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;
",16,6,1,1,2,0,0,0,0,25,58,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,939,"      return expm1(x, null);
",0,0,0,1,2,1,4,0,0,5,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,948,"        if (x != x || x == 0.0) { // NaN or zero
",6,3,0,1,3,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,949,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,952,"        if (x <= -1.0 || x >= 1.0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,955,"            double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,956,"            exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,957,"            if (x > 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,958,"                return -1.0 + hiPrec[0] + hiPrec[1];
",0,1,1,2,4,1,0,0,0,6,36,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,960,"                final double ra = -1.0 + hiPrec[0];
",2,1,1,1,2,1,0,0,0,7,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,961,"                double rb = -(ra + 1.0 - hiPrec[0]);
",4,2,1,2,4,0,0,0,0,9,36,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,962,"                rb += hiPrec[1];
",2,0,1,1,2,0,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,963,"                return ra + rb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,970,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,972,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,973,"            x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,974,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,978,"            int intFrac = (int) (x * 1024.0);
",4,1,0,2,4,0,0,0,0,5,33,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,979,"            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;
",6,1,1,1,2,0,0,0,0,9,60,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,980,"            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,0,0,0,0,8,54,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,982,"            double temp = tempA + tempB;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,983,"            tempB = -(temp - tempA - tempB);
",8,1,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,984,"            tempA = temp;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,986,"            temp = tempA * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,987,"            baseA = tempA + temp - temp;
",8,2,0,0,0,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,988,"            baseB = tempB + (tempA - baseA);
",8,2,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,990,"            epsilon = x - intFrac/1024.0;
",6,2,0,0,0,0,0,0,0,9,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,995,"        double zb = 0.008336750013465571;
",2,0,0,0,0,0,0,0,0,2,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,996,"        zb = zb * epsilon + 0.041666663879186654;
",6,2,0,0,0,0,0,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,997,"        zb = zb * epsilon + 0.16666666666745392;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,998,"        zb = zb * epsilon + 0.49999999999999994;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,999,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1000,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1002,"        double za = epsilon;
",4,0,0,0,0,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1003,"        double temp = za + zb;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1004,"        zb = -(temp - za - zb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1005,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1007,"        temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1008,"        temp = za + temp - temp;
",8,2,0,0,0,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1009,"        zb += za - temp;
",6,1,0,0,0,0,0,0,0,8,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1010,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1013,"        double ya = za * baseA;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1015,"        temp = ya + za * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1016,"        double yb = -(temp - ya - za * baseB);
",10,2,0,1,2,0,0,0,0,13,38,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1017,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1019,"        temp = ya + zb * baseA;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1020,"        yb += -(temp - ya - zb * baseA);
",10,2,0,1,2,0,0,0,0,14,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1021,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1023,"        temp = ya + zb * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1024,"        yb += -(temp - ya - zb*baseB);
",10,2,0,1,2,0,0,0,0,14,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1025,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1029,"        temp = ya + baseA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1030,"        yb += -(temp - baseA - ya);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1031,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1033,"        temp = ya + za;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1035,"        yb += -(temp - ya - za);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1036,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1038,"        temp = ya + baseB;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1040,"        yb += -(temp - ya - baseB);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1041,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1043,"        temp = ya + zb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1045,"        yb += -(temp - ya - zb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1046,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1048,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1050,"            double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1051,"            double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1052,"            double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1053,"            double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1054,"            temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1055,"            final double ra = ratio + temp - temp;
",8,2,0,0,0,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1056,"            double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1058,"            temp = denom * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1059,"            za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1060,"            zb = denom - za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1062,"            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,60,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1073,"            rb += yb * denomr;                      // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1074,"            rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1077,"            ya = -ra;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1078,"            yb = -rb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1081,"        if (hiPrecOut != null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1082,"            hiPrecOut[0] = ya;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1083,"            hiPrecOut[1] = yb;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1086,"        return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1096,"        return log(x, null);
",0,0,0,1,2,1,4,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1107,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1113,"            if (x != 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1114,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1115,"                    hiPrec[0] = Double.NaN;
",4,0,1,1,2,0,0,0,0,7,23,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1118,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1124,"            if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1125,"                hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1128,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1136,"            if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1138,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1139,"                    hiPrec[0] = Double.NEGATIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1142,"                return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1146,"            bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1147,"            while ( (bits & 0x0010000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,44,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1148,"                exp--;
",2,0,0,0,0,0,0,0,0,3,6,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1149,"                bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1155,"            if (x < 1.01 && x > 0.99 && hiPrec == null) {
",6,5,0,1,3,0,0,0,0,11,45,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1160,"                double xa = x - 1.0;
",4,1,0,0,0,0,0,0,0,5,20,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1161,"                double xb = xa - x + 1.0;
",6,2,0,0,0,0,0,0,0,8,25,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1162,"                double tmp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1163,"                double aa = xa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,27,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1164,"                double ab = xa - aa;
",6,1,0,0,0,0,0,0,0,7,20,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1165,"                xa = aa;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1166,"                xb = ab;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1168,"                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];
",6,1,1,2,4,0,0,0,0,9,53,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1169,"                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];
",6,1,1,2,4,0,0,0,0,9,53,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1171,"                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,53,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1173,"                    aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1174,"                    ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1176,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1177,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1178,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1181,"                    aa = ya + LN_QUICK_COEF[i][0];
",4,1,1,2,4,0,0,0,0,10,30,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1182,"                    ab = yb + LN_QUICK_COEF[i][1];
",4,1,1,2,4,0,0,0,0,10,30,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1184,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1185,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1186,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1190,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1191,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1193,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1194,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1195,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1197,"                return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1269,"            lnza = -0.16624882440418567;
",2,0,0,0,0,0,0,0,0,4,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1270,"            lnza = lnza * epsilon + 0.19999954120254515;
",6,2,0,0,0,0,0,0,0,9,44,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1271,"            lnza = lnza * epsilon + -0.2499999997677497;
",6,2,0,0,0,0,0,0,0,10,44,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1272,"            lnza = lnza * epsilon + 0.3333333333332802;
",6,2,0,0,0,0,0,0,0,9,43,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1273,"            lnza = lnza * epsilon + -0.5;
",6,2,0,0,0,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1274,"            lnza = lnza * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1275,"            lnza = lnza * epsilon;
",6,1,0,0,0,0,0,0,0,8,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1333,"        if (x == -1) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1334,"            return x/0.0;   // -Infinity
",2,1,0,0,0,1,0,0,0,3,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1337,"        if (x > 0 && 1/x == 0) { // x = Infinity
",4,4,0,1,3,0,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1338,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1341,"        if (x>1e-6 || x<-1e-6) {
",4,3,0,1,3,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1342,"            double xpa = 1.0 + x;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1343,"            double xpb = -(xpa - 1.0 - x);
",6,1,0,1,2,0,0,0,0,8,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1345,"            double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1347,"            final double lores = log(xpa, hiPrec);
",2,0,0,1,2,1,6,0,0,9,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1348,"            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1349,"                return lores;
",2,0,0,0,0,1,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1354,"            double fx1 = xpb/xpa;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1356,"            double epsilon = 0.5 * fx1 + 1.0;
",4,2,0,0,0,0,0,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1357,"            epsilon = epsilon * fx1;
",6,1,0,0,0,0,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1359,"            return epsilon + hiPrec[1] + hiPrec[0];
",2,1,1,2,4,1,0,0,0,7,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1363,"        double y = x * F_1_3 - F_1_2;
",8,2,0,0,0,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1364,"        y = y * x + 1.0;
",6,2,0,0,0,0,0,0,0,9,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1365,"        y = y * x;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1367,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1375,"        final double hiPrec[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1377,"        final double lores = log(x, hiPrec);
",2,0,0,1,2,1,6,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1378,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1379,"            return lores;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1382,"        final double tmp = hiPrec[0] * HEX_40000000;
",4,1,1,1,2,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1383,"        final double lna = hiPrec[0] + tmp - tmp;
",6,2,1,1,2,1,0,0,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1384,"        final double lnb = hiPrec[0] - lna + hiPrec[1];
",4,2,1,2,4,1,0,0,0,11,47,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1386,"        final double rln10a = 0.4342944622039795;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1387,"        final double rln10b = 1.9699272335463627E-8;
",2,0,0,0,0,1,0,0,0,3,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1389,"        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;
",16,7,0,0,0,1,0,0,0,23,65,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1409,"        return log(x) / log(base);
",0,1,0,2,4,1,8,0,0,9,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1423,"            return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1427,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1432,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1433,"            if ((bits & 0x8000000000000000L) != 0) {
",2,2,0,2,5,0,0,0,0,4,40,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1435,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1437,"                if (y < 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1438,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1441,"                if (y > 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1442,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1446,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1447,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1449,"            if (y > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1450,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1453,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1457,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1458,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1460,"            if (y < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1461,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1463,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1468,"            if (x * x == 1.0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1469,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1472,"            if (x * x > 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1473,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1475,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1480,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1481,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1484,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1485,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1486,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1487,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1490,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1493,"            if (y > 0)  {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1494,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1495,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1496,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1499,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1505,"            if (x * x == 1.0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1506,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1509,"            if (x * x < 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1510,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1512,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1519,"            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
",8,3,0,1,3,0,0,0,0,12,46,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1520,"                return pow(-x, y);
",2,0,0,1,2,1,4,0,0,7,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1523,"            if (y == (long) y) {
",4,1,0,2,5,0,0,0,0,5,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
",6,2,0,4,8,1,8,0,0,19,53,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1527,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1539,"            double tmp1 = y * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,45,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1540,"            double tmp2 = tmp1 * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,48,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1541,"            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
",12,3,0,1,2,0,0,0,0,16,56,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1542,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1548,"            return lores;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1588,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1590,"        double p = 2.7553817452272217E-6;
",2,0,0,0,0,0,0,0,0,2,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1591,"        p = p * x2 + -1.9841269659586505E-4;
",6,2,0,0,0,0,0,0,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1592,"        p = p * x2 + 0.008333333333329196;
",6,2,0,0,0,0,0,0,0,9,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1593,"        p = p * x2 + -0.16666666666666666;
",6,2,0,0,0,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1596,"        p = p * x2 * x;
",8,1,0,0,0,0,0,0,0,10,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1598,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1608,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1610,"        double p = 2.479773539153719E-5;
",2,0,0,0,0,0,0,0,0,2,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1611,"        p = p * x2 + -0.0013888888689039883;
",6,2,0,0,0,0,0,0,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1612,"        p = p * x2 + 0.041666666666621166;
",6,2,0,0,0,0,0,0,0,9,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1613,"        p = p * x2 + -0.49999999999999994;
",6,2,0,0,0,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1614,"        p *= x2;
",4,0,0,0,0,0,0,0,0,5,8,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1616,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1627,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1628,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1631,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1632,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1633,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1634,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1637,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1638,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1639,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1640,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1643,"        final double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,1,0,0,0,8,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1644,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1645,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1646,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1672,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1673,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1675,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1676,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1677,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1678,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1679,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1681,"        t = costA * sinEpsA;
",6,1,0,0,0,0,0,0,0,8,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1682,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1683,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1684,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1685,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1687,"        b = b + sintA * cosEpsB + costA * sinEpsB;
",12,4,0,0,0,0,0,0,0,17,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1702,"        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;
",18,6,0,0,0,0,0,0,0,25,68,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1729,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1730,"            t = ((costA + costB) * (cosEpsA + cosEpsB) -
",10,5,0,2,5,0,0,0,0,16,44,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1732,"            c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1733,"            d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1734,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1735,"            b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1738,"        result = a + b;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1740,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1751,"        final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1752,"        final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1754,"        final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1755,"        double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1756,"        b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1758,"        return sinQ(a, b);
",0,0,0,1,2,1,6,0,0,6,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1771,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1772,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1775,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1776,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1777,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1778,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1781,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1782,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1783,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1784,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1787,"        double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1788,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1789,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1790,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1815,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1816,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1819,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1820,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1821,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1822,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1823,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1825,"        t = costA*sinEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1826,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1827,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1828,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1829,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1831,"        b = b + sintA*cosEpsB + costA*sinEpsB;
",12,4,0,0,0,0,0,0,0,17,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1832,"        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;
",18,6,0,0,0,0,0,0,0,25,62,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1834,"        double sina = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1835,"        double sinb = -(sina - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1839,"        a = b = c = d = 0.0;
",8,0,0,0,0,0,0,0,0,12,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1841,"        t = costA*cosEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1842,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1843,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1844,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1845,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1847,"        t = -sintA*sinEpsA;
",6,1,0,0,0,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1848,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1849,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1850,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1851,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1853,"        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;
",16,6,0,0,0,0,0,0,0,23,54,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1854,"        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);
",16,6,0,1,2,0,0,0,0,23,56,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1856,"        double cosa = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1857,"        double cosb = -(cosa - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1859,"        if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1861,"            tmp = cosa; cosa = sina; sina = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1862,"            tmp = cosb; cosb = sinb; sinb = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1876,"        double est = sina/cosa;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1879,"        temp = est * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1880,"        double esta = (est + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1881,"        double estb =  est - esta;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1883,"        temp = cosa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1884,"        double cosaa = (cosa + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1885,"        double cosab =  cosa - cosaa;
",6,1,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1888,"        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding
",22,9,0,1,2,0,0,0,0,31,114,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1889,"        err += sinb/cosa;                     // Change in est due to sinb
",6,1,0,0,0,0,0,0,0,8,66,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1890,"        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb
",10,3,0,0,0,0,0,0,0,15,66,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1892,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1895,"            double xbadj = xb + est*est*xb;
",10,2,0,0,0,0,0,0,0,12,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1896,"            if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1897,"                xbadj = -xbadj;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1900,"            err += xbadj;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1903,"        return est+err;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1920,"        long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1921,"        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1924,"        inbits &= 0x000fffffffffffffL;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1925,"        inbits |= 0x0010000000000000L;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1928,"        exponent++;
",2,0,0,0,0,0,0,0,0,3,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1929,"        inbits <<= 11;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1935,"        int idx = exponent >> 6;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1936,"        int shift = exponent - (idx << 6);
",6,2,0,1,2,0,0,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1938,"        if (shift != 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1939,"            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);
",8,3,1,3,6,0,0,0,0,14,53,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1940,"            shpi0 |= RECIP_2PI[idx] >>> (64-shift);
",4,2,1,2,4,0,0,0,0,11,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1941,"            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));
",8,5,1,5,10,0,0,0,0,20,70,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1942,"            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));
",10,6,1,5,10,0,0,0,0,21,72,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1944,"            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];
",6,2,1,2,4,0,0,0,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1945,"            shpiA = RECIP_2PI[idx];
",2,0,1,1,2,0,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1946,"            shpiB = RECIP_2PI[idx+1];
",4,1,1,1,2,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1950,"        long a = inbits >>> 32;
",4,1,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1951,"        long b = inbits & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1953,"        long c = shpiA >>> 32;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1954,"        long d = shpiA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1956,"        long ac = a * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1957,"        long bd = b * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1958,"        long bc = b * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1959,"        long ad = a * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1961,"        long prodB = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1962,"        long prodA = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1964,"        boolean bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,47,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1965,"        boolean bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1966,"        boolean bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1969,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1971,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1974,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1975,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1977,"        prodB = prodB + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1978,"        prodA = prodA + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1980,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1983,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1985,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1989,"        c = shpiB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1990,"        d = shpiB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1991,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1992,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1993,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1996,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1998,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,1999,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2000,"        prodB += ac;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2001,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2003,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2005,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2009,"        c = shpi0 >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2010,"        d = shpi0 & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2012,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2013,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2014,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2016,"        prodA += bd + ((bc + ad) << 32);
",8,3,0,2,4,0,0,0,0,12,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2028,"        int intPart = (int)(prodA >>> 62);
",4,1,0,2,4,0,0,0,0,5,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2031,"        prodA <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2032,"        prodA |= prodB >>> 62;
",4,1,0,0,0,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2033,"        prodB <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2036,"        a = prodA >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2037,"        b = prodA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2039,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2040,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2042,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2043,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2044,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2045,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2047,"        long prod2B = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2048,"        long prod2A = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2050,"        bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2051,"        bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2052,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2055,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2057,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2060,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2061,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2063,"        prod2B = prod2B + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2064,"        prod2A = prod2A + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2066,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2069,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2071,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2075,"        c = PI_O_4_BITS[1] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2076,"        d = PI_O_4_BITS[1] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2077,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2078,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2079,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2082,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2084,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2085,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2086,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2087,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2089,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2091,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2095,"        a = prodB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2096,"        b = prodB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2097,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2098,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2099,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2100,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2101,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2104,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2106,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2107,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2108,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2109,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2111,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2113,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2117,"        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits
",6,2,0,1,2,0,0,0,0,8,68,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2118,"        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits
",10,5,0,4,8,0,0,0,0,15,102,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2120,"        double sumA = tmpA + tmpB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2121,"        double sumB = -(sumA - tmpA - tmpB);
",8,1,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2124,"        result[0] = intPart;
",2,0,1,1,2,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2125,"        result[1] = sumA * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2126,"        result[2] = sumB * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2127,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2135,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2136,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2138,"        double xb = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2141,"        xa = x;
",4,0,0,0,0,0,0,0,0,5,7,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2142,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2143,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2144,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2148,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2149,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2150,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2151,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2153,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2156,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2157,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2161,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2165,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2166,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2167,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2168,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2169,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2170,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2175,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2181,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2182,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2183,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2185,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2186,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2187,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2188,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2190,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2191,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2192,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2193,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2195,"                if (remA > 0.0) {
",2,1,0,1,3,0,0,0,0,3,17,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2196,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2202,"                k--;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2203,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2204,"            quadrant = k & 3;
",4,1,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2205,"            xa = remA;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2206,"            xb = remB;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2209,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2210,"            quadrant ^= 2;  // Flip bit 1
",2,0,0,0,0,0,0,0,0,3,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2213,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2215,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2217,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2219,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2221,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2223,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2233,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2236,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2237,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2238,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2241,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2242,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2246,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2247,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2251,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2252,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2253,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2254,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2255,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2256,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2261,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2267,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2268,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2269,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2271,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2272,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2273,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2274,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2276,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2277,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2278,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2279,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2281,"                if (remA > 0.0) {
",2,1,0,1,3,0,0,0,0,3,17,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2282,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2288,"                k--;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2289,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2290,"            quadrant = k & 3;
",4,1,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2291,"            xa = remA;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2292,"            xb = remB;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2298,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2300,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2302,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2304,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2306,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2308,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2318,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2319,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2322,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2323,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2324,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2325,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2329,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2330,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2331,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2332,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2334,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2337,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2338,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2342,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2343,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2347,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2348,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2349,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2350,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2351,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2352,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2357,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2363,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2364,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2365,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2367,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2368,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2369,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2370,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2372,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2373,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2374,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2375,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2377,"                if (remA > 0.0) {
",2,1,0,1,3,0,0,0,0,3,17,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2378,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2384,"                k--;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2385,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2386,"            quadrant = k & 3;
",4,1,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2387,"            xa = remA;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2388,"            xb = remB;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2391,"        if (xa > 1.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2393,"            final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2394,"            final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2396,"            final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2397,"            double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2398,"            b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2400,"            xa = a + b;
",6,1,0,0,0,0,0,0,0,8,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2401,"            xb = -(xa - a - b);
",8,1,0,1,2,0,0,0,0,11,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2402,"            quadrant ^= 1;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2403,"            negative ^= true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2407,"        if ((quadrant & 1) == 0) {
",2,2,0,2,5,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2408,"            result = tanQ(xa, xb, false);
",2,0,0,1,2,0,6,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2410,"            result = -tanQ(xa, xb, true);
",2,0,0,1,2,0,6,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2413,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2414,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2417,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2426,"        return atan(x, 0.0, false);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2436,"        boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2439,"        if (xa == 0.0) { // Matches +/- 0.0; return correct sign
",2,1,0,1,3,1,0,0,0,3,56,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;
",8,0,0,1,2,1,4,0,0,12,46,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2443,"        if (xa < 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2445,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2446,"            xb = -xb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2447,"            negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2450,"        if (xa > 1.633123935319537E16) { // Very large input
",2,1,0,1,3,0,0,0,0,3,52,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2451,"            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);
",12,3,0,3,6,1,0,0,0,16,61,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2455,"        if (xa < 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2456,"            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);
",8,4,0,4,8,0,0,0,0,14,65,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2458,"            double temp = 1.0/xa;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2459,"            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);
",8,4,0,4,8,0,0,0,0,15,74,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2461,"        double epsA = xa - TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,40,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2462,"        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);
",6,2,1,2,4,0,0,0,0,13,50,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2463,"        epsB += xb - TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2465,"        double temp = epsA + epsB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2466,"        epsB = -(temp - epsA - epsB);
",8,1,0,1,2,0,0,0,0,11,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2467,"        epsA = temp;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2470,"        temp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2471,"        double ya = xa + temp - temp;
",8,2,0,0,0,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2472,"        double yb = xb + xa - ya;
",8,2,0,0,0,0,0,0,0,10,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2473,"        xa = ya;
",4,0,0,0,0,0,0,0,0,5,8,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2474,"        xb += yb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2477,"        if (idx == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2480,"            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
",6,5,1,5,10,0,0,0,0,19,87,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2482,"            ya = epsA * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2483,"            yb = epsB * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2484,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2485,"            double temp2 = xa * TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,41,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2486,"            double za = 1.0 + temp2;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2487,"            double zb = -(za - 1.0 - temp2);
",6,1,0,1,2,0,0,0,0,8,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2488,"            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];
",6,3,1,2,4,0,0,0,0,18,62,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2489,"            temp = za + temp2;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2490,"            zb += -(temp - za - temp2);
",8,1,0,1,2,0,0,0,0,11,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2491,"            za = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2493,"            zb += xb * TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2494,"            ya = epsA / za;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2496,"            temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2497,"            final double yaa = (ya + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2498,"            final double yab = ya - yaa;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2500,"            temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2501,"            final double zaa = (za + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2502,"            final double zab = za - zaa;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2505,"            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;
",22,9,0,1,2,0,0,0,0,32,65,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2507,"            yb += -epsA * zb / za / za;
",10,3,0,0,0,0,0,0,0,15,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2508,"            yb += epsB / za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2512,"        epsA = ya;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2513,"        epsB = yb;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2516,"        double epsA2 = epsA*epsA;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2527,"        yb = 0.07490822288864472;
",2,0,0,0,0,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2528,"        yb = yb * epsA2 + -0.09088450866185192;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2529,"        yb = yb * epsA2 + 0.11111095942313305;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2530,"        yb = yb * epsA2 + -0.1428571423679182;
",6,2,0,0,0,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2531,"        yb = yb * epsA2 + 0.19999999999923582;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2532,"        yb = yb * epsA2 + -0.33333333333333287;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2533,"        yb = yb * epsA2 * epsA;
",8,1,0,0,0,0,0,0,0,10,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2536,"        ya = epsA;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2538,"        temp = ya + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2539,"        yb = -(temp - ya - yb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2540,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2543,"        yb += epsB / (1.0 + epsA * epsA);
",8,3,0,1,2,0,0,0,0,12,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2549,"        double za = EIGHTHS[idx] + ya;
",4,1,1,1,2,0,0,0,0,9,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2550,"        double zb = -(za - EIGHTHS[idx] - ya);
",6,1,1,2,4,0,0,0,0,12,38,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2551,"        temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2552,"        zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2553,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2555,"        result = za + zb;
",6,1,0,0,0,0,0,0,0,8,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2556,"        resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,11,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2558,"        if (leftPlane) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2560,"            final double pia = 1.5707963267948966*2.0;
",2,1,0,0,0,1,0,0,0,4,42,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2561,"            final double pib = 6.123233995736766E-17*2.0;
",2,1,0,0,0,1,0,0,0,4,45,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2563,"            za = pia - result;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2564,"            zb = -(za - pia + result);
",8,2,0,1,2,0,0,0,0,12,26,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2565,"            zb += pib - resultb;
",6,1,0,0,0,0,0,0,0,8,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2567,"            result = za + zb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2568,"            resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2572,"        if (negate ^ leftPlane) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2573,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2576,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2586,"        if (x !=x || y != y) {
",8,3,0,1,3,0,0,0,0,11,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2587,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2590,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2591,"            double result = x*y;
",6,1,0,0,0,0,0,0,0,7,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2592,"            double invx = 1.0/x;
",4,1,0,0,0,0,0,0,0,5,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2593,"            double invy = 1.0/y;
",4,1,0,0,0,0,0,0,0,5,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2595,"            if (invx == 0.0) { // X is infinite
",2,1,0,1,3,0,0,0,0,3,35,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2596,"                if (x > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2597,"                    return y; // return +/- 0.0
",2,0,0,0,0,2,0,0,0,2,27,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2599,"                    return copySign(Math.PI, y);
",4,0,0,1,2,1,4,0,0,8,28,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2603,"            if (x < 0.0 || invx < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2604,"                if (y < 0.0 || invy < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2605,"                    return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2607,"                    return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2610,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2616,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2617,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2618,"                return Math.PI/4.0;
",4,1,0,0,0,1,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2621,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2622,"                return Math.PI * F_3_4;
",6,1,0,0,0,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2625,"            return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2628,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2629,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2630,"                return -Math.PI/4.0;
",4,1,0,0,0,1,0,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2633,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2634,"                return -Math.PI * F_3_4;
",6,1,0,0,0,1,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2637,"            return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2640,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2641,"            if (y > 0.0 || 1/y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2642,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2645,"            if (y < 0.0 || 1/y < 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2646,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2650,"        if (x == Double.NEGATIVE_INFINITY)
",6,1,0,1,2,0,0,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2652,"            if (y > 0.0 || 1/y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2653,"                return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2656,"            if (y < 0.0 || 1/y < 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2657,"                return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2663,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2664,"            if (y > 0.0 || 1/y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2665,"                return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2668,"            if (y < 0.0 || 1/y < 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2669,"                return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2674,"        final double r = y/x;
",6,1,0,0,0,1,0,0,0,8,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2675,"        if (Double.isInfinite(r)) { // bypass calculations that can create NaN
",0,0,0,2,5,0,6,0,0,6,70,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2676,"            return atan(r, 0, x < 0);
",2,1,0,1,2,1,4,0,0,7,25,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2679,"        double ra = doubleHighPart(r);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2680,"        double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2683,"        final double xa = doubleHighPart(x);
",2,0,0,1,2,1,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2684,"        final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2686,"        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
",22,9,0,1,2,0,0,0,0,32,54,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2688,"        double temp = ra + rb;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2689,"        rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2690,"        ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2692,"        if (ra == 0) { // Fix up the sign so atan works correctly
",2,1,0,1,3,0,0,0,0,3,57,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2693,"            ra = copySign(0.0, y);
",2,0,0,1,2,0,4,0,0,7,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2697,"        double result = atan(ra, rb, x < 0);
",4,1,0,1,2,0,6,0,0,11,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2699,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2707,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2708,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2711,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2712,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2715,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2716,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2719,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2720,"          return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2723,"      if (x == 0.0) { // Matches +/- 0.0; return correct sign
",2,1,0,1,3,1,0,0,0,3,55,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2724,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2730,"      double temp = x * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2731,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2732,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2735,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2736,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2739,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2740,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2742,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2743,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2745,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2746,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2747,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2751,"      y = sqrt(za);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2752,"      temp = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2753,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2754,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2757,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2760,"      double dx = zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2763,"      double r = x/y;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2764,"      temp = r * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2765,"      double ra = r + temp - temp;
",8,2,0,0,0,0,0,0,0,10,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2766,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2768,"      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2769,"      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
",10,3,0,0,0,0,0,0,0,15,65,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2771,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2772,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2773,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2775,"      return atan(ra, rb, false);
",0,0,0,1,2,1,6,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2783,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2784,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2787,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2788,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2791,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2792,"          return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2795,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2796,"          return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2799,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2800,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2806,"      double temp = x * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2807,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2808,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2811,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2812,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2815,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2816,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2818,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2819,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2821,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2822,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2823,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2826,"      double y = sqrt(za);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2827,"      temp = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2828,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2829,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2832,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2835,"      yb += zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2836,"      y = ya+yb;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2837,"      yb = -(y - ya - yb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2840,"      double r = y/x;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2843,"      if (Double.isInfinite(r)) { // x is effectively zero
",0,0,0,2,5,0,6,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2844,"          return Math.PI/2; // so return the appropriate value
",4,1,0,0,0,2,0,0,0,5,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2847,"      double ra = doubleHighPart(r);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2848,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2850,"      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2851,"      rb += yb / x;  // Add in effect additional bits of sqrt.
",6,1,0,0,0,0,0,0,0,8,56,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2853,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2854,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2855,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2857,"      return atan(ra, rb, x<0);
",2,1,0,1,2,1,6,0,0,9,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2866,"      long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2867,"      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2868,"      boolean subnormal = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2870,"      if (exponent == -1023) {
",2,1,0,1,3,0,0,0,0,4,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2871,"          if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2872,"              return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2876,"          subnormal = true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2877,"          x *= 1.8014398509481984E16;  // 2^54
",2,0,0,0,0,0,0,0,0,3,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2878,"          inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2879,"          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,8,49,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2882,"      if (exponent == 1024) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2884,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2888,"      int exp3 = exponent / 3;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2891,"      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |
",4,2,0,1,3,0,4,0,0,10,68,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2895,"      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);
",4,2,0,2,4,1,4,0,0,11,98,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2898,"      double est = -0.010714690733195933;
",2,0,0,0,0,0,0,0,0,3,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2899,"      est = est * mant + 0.0875862700108075;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2900,"      est = est * mant + -0.3058015757857271;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2901,"      est = est * mant + 0.7249995199969751;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2902,"      est = est * mant + 0.5039018405998233;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2904,"      est *= CBRTTWO[exponent % 3 + 2];
",4,2,1,1,2,0,0,0,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2909,"      final double xs = x / (p2*p2*p2);
",10,2,0,1,2,1,0,0,0,13,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2910,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2911,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2914,"      double temp = est * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2915,"      double ya = est + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2916,"      double yb = est - ya;
",6,1,0,0,0,0,0,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2918,"      double za = ya * ya;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2919,"      double zb = ya * yb * 2.0 + yb * yb;
",10,3,0,0,0,0,0,0,0,13,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2920,"      temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2921,"      double temp2 = za + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2922,"      zb += za - temp2;
",6,1,0,0,0,0,0,0,0,8,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2923,"      za = temp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2925,"      zb = za * yb + ya * zb + zb * yb;
",14,5,0,0,0,0,0,0,0,20,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2926,"      za = za * ya;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2928,"      double na = xs - za;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2929,"      double nb = -(na - xs + za);
",8,2,0,1,2,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2930,"      nb -= zb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2932,"      est += (na+nb)/(3*est*est);
",10,3,0,2,4,0,0,0,0,14,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2935,"      est *= p2;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2937,"      if (subnormal) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2938,"          est *= 3.814697265625E-6;  // 2^-18
",2,0,0,0,0,0,0,0,0,3,35,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2941,"      return est;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2951,"        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign
",2,2,0,2,5,1,6,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2952,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2956,"        final double facta = 0.01745329052209854;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2957,"        final double factb = 1.997844754509471E-9;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2959,"        double xa = doubleHighPart(x);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2960,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2962,"        double result = xb * factb + xb * facta + xa * factb + xa * facta;
",18,7,0,0,0,0,0,0,0,25,66,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2963,"        if (result == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2964,"            result = result * x; // ensure correct sign if calculation underflows
",6,1,0,0,0,0,0,0,0,8,69,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2966,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2976,"        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign
",2,2,0,2,5,1,6,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2977,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2981,"        final double facta = 57.2957763671875;
",2,0,0,0,0,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2982,"        final double factb = 3.145894820876798E-6;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2984,"        double xa = doubleHighPart(x);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2985,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2987,"        return xb * factb + xb * facta + xa * factb + xa * facta;
",16,7,0,0,0,1,0,0,0,23,57,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,2996,"        return (x < 0) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3014,"        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,64,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3033,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3044,"        if (Float.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3045,"            return Float.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3047,"        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,66,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3059,"        if ((n > -1023) && (n < 1024)) {
",4,3,0,3,7,0,0,0,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3060,"            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
",4,3,0,4,8,1,4,0,0,11,62,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3064,"        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
",2,2,0,4,9,0,12,0,0,16,58,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3065,"            return d;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3067,"        if (n < -2098) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3068,"            return (d > 0) ? 0.0 : -0.0;
",2,1,0,1,2,1,0,0,0,4,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3070,"        if (n > 2097) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3071,"            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,69,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3075,"        final long bits = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3076,"        final long sign = bits & 0x8000000000000000L;
",4,1,0,0,0,1,0,0,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3077,"        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;
",4,2,0,3,6,0,0,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3078,"        long mantissa   = bits & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,5,45,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3081,"        int scaledExponent = exponent + n;
",6,1,0,0,0,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3083,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3085,"            if (scaledExponent > 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3087,"                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3088,"            } else if (scaledExponent > -53) {
",2,1,0,1,4,0,0,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3092,"                mantissa = mantissa | (1L << 52);
",4,2,0,1,2,0,0,0,0,7,33,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3095,"                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
",6,2,0,2,4,1,0,0,0,10,73,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3096,"                mantissa = mantissa >>> (1 - scaledExponent);
",6,2,0,1,2,0,0,0,0,9,45,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3097,"                if (mostSignificantLostBit != 0) {
",2,1,0,1,3,0,0,0,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3099,"                    mantissa++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3101,"                return Double.longBitsToDouble(sign | mantissa);
",4,1,0,1,2,1,4,0,0,9,48,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3105,"                return (sign == 0L) ? 0.0 : -0.0;
",2,1,0,1,2,1,0,0,0,4,33,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3109,"            if (exponent == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3112,"                while ((mantissa >>> 52) != 1) {
",2,2,0,2,5,0,0,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3113,"                    mantissa = mantissa << 1;
",4,1,0,0,0,0,0,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3114,"                    --scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3116,"                ++scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3117,"                mantissa = mantissa & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,6,42,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3119,"                if (scaledExponent < 2047) {
",2,1,0,1,3,0,0,0,0,3,28,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3120,"                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3122,"                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,74,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3125,"            } else if (scaledExponent < 2047) {
",2,1,0,1,4,0,0,0,0,3,35,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3126,"                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3128,"                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,74,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3143,"        if ((n > -127) && (n < 128)) {
",4,3,0,3,7,0,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3144,"            return f * Float.intBitsToFloat((n + 127) << 23);
",4,3,0,2,4,1,4,0,0,11,49,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3148,"        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
",2,2,0,4,9,0,12,0,0,16,57,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3149,"            return f;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3151,"        if (n < -277) {
",2,1,0,1,3,0,0,0,0,4,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3152,"            return (f > 0) ? 0.0f : -0.0f;
",2,1,0,1,2,1,0,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3154,"        if (n > 276) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3155,"            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,67,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3159,"        final int bits = Float.floatToIntBits(f);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3160,"        final int sign = bits & 0x80000000;
",4,1,0,0,0,1,0,0,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3161,"        int  exponent  = (bits >>> 23) & 0xff;
",4,2,0,1,2,0,0,0,0,6,38,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3162,"        int mantissa   = bits & 0x007fffff;
",4,1,0,0,0,0,0,0,0,5,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3165,"        int scaledExponent = exponent + n;
",6,1,0,0,0,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3167,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3169,"            if (scaledExponent > 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3171,"                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3172,"            } else if (scaledExponent > -24) {
",2,1,0,1,4,0,0,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3176,"                mantissa = mantissa | (1 << 23);
",4,2,0,1,2,0,0,0,0,7,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3179,"                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
",6,2,0,2,4,1,0,0,0,10,71,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3180,"                mantissa = mantissa >>> (1 - scaledExponent);
",6,2,0,1,2,0,0,0,0,9,45,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3181,"                if (mostSignificantLostBit != 0) {
",2,1,0,1,3,0,0,0,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3183,"                    mantissa++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3185,"                return Float.intBitsToFloat(sign | mantissa);
",4,1,0,1,2,1,4,0,0,9,45,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3189,"                return (sign == 0) ? 0.0f : -0.0f;
",2,1,0,1,2,1,0,0,0,4,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3193,"            if (exponent == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3196,"                while ((mantissa >>> 23) != 1) {
",2,2,0,2,5,0,0,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3197,"                    mantissa = mantissa << 1;
",4,1,0,0,0,0,0,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3198,"                    --scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3200,"                ++scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3201,"                mantissa = mantissa & 0x007fffff;
",4,1,0,0,0,0,0,0,0,6,33,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3203,"                if (scaledExponent < 255) {
",2,1,0,1,3,0,0,0,0,3,27,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3204,"                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3206,"                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,71,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3209,"            } else if (scaledExponent < 255) {
",2,1,0,1,4,0,0,0,0,3,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3210,"                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3212,"                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,71,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3252,"        if (Double.isNaN(d) || Double.isNaN(direction)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3253,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3254,"        } else if (d == direction) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3255,"            return direction;
",2,0,0,0,0,1,0,0,0,2,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3256,"        } else if (Double.isInfinite(d)) {
",0,0,0,2,6,0,6,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3257,"            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
",10,1,0,1,2,1,0,0,0,12,54,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3258,"        } else if (d == 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3259,"            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,62,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3264,"        final long bits = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3265,"        final long sign = bits & 0x8000000000000000L;
",4,1,0,0,0,1,0,0,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3266,"        if ((direction < d) ^ (sign == 0L)) {
",6,3,0,3,7,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3267,"            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
",4,3,0,3,6,1,4,0,0,11,74,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3269,"            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
",4,3,0,3,6,1,4,0,0,11,74,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3308,"        if (Double.isNaN(f) || Double.isNaN(direction)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3309,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3310,"        } else if (f == direction) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3311,"            return (float) direction;
",2,0,0,1,2,1,0,0,0,2,25,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3312,"        } else if (Float.isInfinite(f)) {
",0,0,0,2,6,0,6,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3313,"            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
",10,1,0,1,2,1,0,0,0,12,53,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3314,"        } else if (f == 0f) {
",2,1,0,1,4,0,0,0,0,3,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3315,"            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,60,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3320,"        final int bits = Float.floatToIntBits(f);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3321,"        final int sign = bits & 0x80000000;
",4,1,0,0,0,1,0,0,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3322,"        if ((direction < f) ^ (sign == 0)) {
",6,3,0,3,7,0,0,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3323,"            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
",4,3,0,3,6,1,4,0,0,11,62,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3325,"            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
",4,3,0,3,6,1,4,0,0,11,62,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3338,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3342,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3347,"            y--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3351,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3365,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3376,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3387,"        double y = floor(x);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3388,"        double d = x - y;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3390,"        if (d > 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3391,"            if (y == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3392,"                return -0.0; // Preserve sign of operand
",0,0,0,0,0,1,0,0,0,1,40,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3394,"            return y+1.0;
",2,1,0,0,0,1,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3396,"        if (d < 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3397,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3401,"        long z = (long) y;
",4,0,0,1,2,0,0,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3402,"        return (z & 1) == 0 ? y : y + 1.0;
",6,3,0,1,2,1,0,0,0,9,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3410,"        return (long) floor(x + 0.5);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3418,"        return (int) floor(x + 0.5f);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3427,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3436,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3445,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3446,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3448,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3449,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3452,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3453,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3457,"        int bits = Float.floatToRawIntBits(a);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3458,"        if (bits == 0x80000000) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3459,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3461,"        return b;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3473,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3474,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3477,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3478,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3482,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3483,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3484,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3486,"        return b;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3504,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3513,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3514,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3516,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3517,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3520,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3521,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3525,"        int bits = Float.floatToRawIntBits(a);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3526,"        if (bits == 0x80000000) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3527,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3529,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3545,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3546,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3550,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3551,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3552,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3554,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3572,"        if (Double.isInfinite(x) || Double.isInfinite(y)) {
",0,1,0,3,7,0,12,0,0,13,51,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3573,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3574,"        } else if (Double.isNaN(x) || Double.isNaN(y)) {
",0,1,0,3,8,0,12,0,0,13,48,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3575,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3578,"            final int expX = getExponent(x);
",2,0,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3579,"            final int expY = getExponent(y);
",2,0,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3580,"            if (expX > expY + 27) {
",4,2,0,1,3,0,0,0,0,6,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3582,"                return abs(x);
",0,0,0,1,2,1,4,0,0,4,14,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3583,"            } else if (expY > expX + 27) {
",4,2,0,1,4,0,0,0,0,6,30,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3585,"                return abs(y);
",0,0,0,1,2,1,4,0,0,4,14,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3589,"                final int middleExp = (expX + expY) / 2;
",6,2,0,1,2,1,0,0,0,9,40,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3592,"                final double scaledX = scalb(x, -middleExp);
",4,0,0,1,2,1,4,0,0,10,44,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3593,"                final double scaledY = scalb(y, -middleExp);
",4,0,0,1,2,1,4,0,0,10,44,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3596,"                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);
",10,3,0,1,2,1,2,0,0,16,67,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3599,"                return scalb(scaledH, middleExp);
",0,0,0,1,2,1,6,0,0,6,33,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3627,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation
",0,0,0,1,2,1,8,0,0,8,90,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3639,"        long m = Double.doubleToLongBits(magnitude);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3640,"        long s = Double.doubleToLongBits(sign);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3641,"        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
",8,7,0,3,7,0,0,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3642,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3644,"        return -magnitude; // flip sign
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3656,"        int m = Float.floatToIntBits(magnitude);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3657,"        int s = Float.floatToIntBits(sign);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3658,"        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
",8,7,0,3,7,0,0,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3659,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3661,"        return -magnitude; // flip sign
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3674,"        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;
",0,3,0,4,8,1,6,0,0,9,66,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3687,"        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;
",0,3,0,3,6,1,6,0,0,9,55,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3696,"        PrintStream out = System.out;
",6,0,0,0,0,0,0,2,0,8,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3697,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);
",4,0,0,1,2,0,8,0,0,13,96,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3698,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);
",4,0,0,1,2,0,8,0,0,13,96,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3699,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);
",4,0,0,1,2,0,8,0,0,13,100,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3700,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);
",4,0,0,1,2,0,8,0,0,13,100,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3701,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);
",4,0,0,1,2,0,8,0,0,13,68,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3702,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,75,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3703,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,75,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3704,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,79,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3705,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,79,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3706,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,81,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3707,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,81,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3708,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMathLiteralArrays,44,6134,"    private FastMathLiteralArrays() {}
",2,0,0,2,4,1,0,0,0,3,34,2,0.00000,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,100,"        return maximalCount;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,109,"        return count;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,120,"        return count < maximalCount;
",4,1,0,0,0,1,0,0,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,131,"        for (int i = 0; i < value; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,132,"            incrementCount();
",0,0,0,1,2,0,2,0,0,2,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,134,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,151,"            maxCountCallback.trigger(maximalCount);
",0,0,0,1,2,0,6,0,0,6,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/Incrementor,44,65,"                     throw new MaxCountExceededException(max);
",2,0,0,1,2,0,0,2,0,4,41,10,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,42,"    private Precision() {}
",2,0,0,2,4,1,0,0,0,3,22,2,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,55,"        if (equals(x, y, eps)) {
",0,0,0,2,5,0,8,0,0,8,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,56,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,57,"        } else if (x < y) {
",4,1,0,1,4,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,58,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,60,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,81,"        if (equals(x, y, maxUlps)) {
",0,0,0,2,5,0,8,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,82,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,83,"        } else if (x < y) {
",4,1,0,1,4,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,84,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,86,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,98,"        return equals(x, y, 1);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,111,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);
",0,2,0,4,8,1,18,0,0,20,61,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,125,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;
",6,3,0,2,4,1,10,0,0,19,53,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,140,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);
",6,3,0,3,6,1,10,0,0,19,64,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,162,"        int xInt = Float.floatToIntBits(x);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,163,"        int yInt = Float.floatToIntBits(y);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,166,"        if (xInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,167,"            xInt = SGN_MASK_FLOAT - xInt;
",6,1,0,0,0,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,169,"        if (yInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,170,"            yInt = SGN_MASK_FLOAT - yInt;
",6,1,0,0,0,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,173,"        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
",8,2,0,1,2,1,4,0,0,15,61,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,175,"        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);
",2,1,0,2,4,1,12,0,0,17,53,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,191,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);
",0,2,0,4,8,1,20,0,0,22,67,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,203,"        return equals(x, y, 1);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,216,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);
",0,2,0,4,8,1,18,0,0,20,63,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,231,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;
",6,3,0,2,4,1,10,0,0,19,53,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,246,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);
",6,3,0,3,6,1,10,0,0,19,64,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,275,"            yInt = SGN_MASK - yInt;
",6,1,0,0,0,0,0,0,0,8,23,6,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,296,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);
",0,2,0,4,8,1,20,0,0,22,69,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,309,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);
",4,0,0,1,2,1,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,331,"            return (new BigDecimal
",0,0,0,0,1,1,0,2,0,2,22,11,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,335,"        } catch (NumberFormatException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,336,"            if (Double.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,27,8,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,337,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,9,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,339,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,10,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,354,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);
",4,0,0,1,2,1,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,369,"        final float sign = FastMath.copySign(1f, x);
",2,0,0,1,2,1,6,0,0,9,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,370,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;
",4,1,0,2,4,1,6,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,371,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;
",6,2,0,2,4,1,6,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,389,"        switch (roundingMethod) {
",2,0,0,1,3,0,0,0,0,2,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,391,"            if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,392,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,7,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,394,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,81,7,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,396,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,398,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,5,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,399,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,401,"            if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,402,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,81,7,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,404,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,7,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,406,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,408,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);
",6,0,0,1,2,0,6,0,0,13,66,6,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,409,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,410,"            if (fraction > 0.5) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,411,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,413,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,8,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,415,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,418,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,419,"            if (fraction > 0.5) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,420,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,421,"            } else if (fraction < 0.5) {
",2,1,0,1,4,0,0,0,0,3,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,422,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,9,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,425,"                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math
",0,3,0,1,4,0,12,0,0,15,57,9,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,427,"                    unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,11,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,429,"                    unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,11,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,432,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,435,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);
",6,0,0,1,2,0,6,0,0,13,66,6,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,436,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,437,"            if (fraction >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,438,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,440,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,8,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,442,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,445,"            if (unscaled != FastMath.floor(unscaled)) {
",2,1,0,2,5,0,6,0,0,9,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,446,"                throw new MathArithmeticException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,450,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,5,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,451,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,453,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,
",4,0,0,0,1,0,0,2,0,6,80,6,0.00000,0
defect4j,math,org/apache/commons/math/util/Precision,44,464,"        return unscaled;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,44,50,"        this(boundIsAllowed ?
",2,0,0,0,1,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,44,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,44,67,"        super(specific, wrong, max);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,44,69,"        this.max = max;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,44,70,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,44,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,44,77,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooLargeException,44,84,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NoBracketingException,44,51,"        this(LocalizedFormats.SAME_SIGN_AT_ENDPOINTS, lo, hi, fLo, fHi);
",12,0,0,1,2,0,0,0,0,12,64,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NoBracketingException,44,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NoBracketingException,44,68,"        super(specific, lo, hi, fLo, fHi, args);
",12,0,0,1,2,0,0,0,0,12,40,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NoBracketingException,44,69,"        this.lo = lo;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NoBracketingException,44,70,"        this.hi = hi;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NoBracketingException,44,71,"        this.fLo = fLo;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NoBracketingException,44,72,"        this.fHi = fHi;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NoBracketingException,44,73,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NoBracketingException,44,81,"        return lo;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NoBracketingException,44,89,"        return hi;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NoBracketingException,44,97,"        return fLo;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NoBracketingException,44,105,"        return fHi;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,44,38,"        super(value, 0, false);
",2,0,0,1,2,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,44,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,44,48,"        super(specific, value, 0, false);
",4,0,0,1,2,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,44,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,44,37,"        super(max);
",2,0,0,1,2,0,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,44,38,"        getContext().addMessage(LocalizedFormats.EVALUATIONS);
",4,0,0,2,4,0,4,0,0,8,54,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,44,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathInternalError,44,37,"    public MathInternalError() {
",2,0,0,1,3,1,0,0,0,3,28,2,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathInternalError,44,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);
",4,0,0,2,4,0,6,0,0,10,69,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathInternalError,44,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathInternalError,44,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);
",8,0,0,1,2,0,0,0,0,8,58,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathInternalError,44,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathInternalError,44,56,"        super(pattern, args);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathInternalError,44,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,214,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,69,"        this(DEFAULT_ABSOLUTE_ACCURACY, DEFAULT_MAXIMAL_ORDER);
",4,0,0,1,2,0,0,0,0,4,55,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,84,"            throw new NumberIsTooSmallException(maximalOrder, 2, true);
",2,0,0,1,2,0,0,2,0,5,59,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,102,"        super(relativeAccuracy, absoluteAccuracy);
",4,0,0,1,2,0,0,0,0,4,42,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,103,"        if (maximalOrder < 2) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,104,"            throw new NumberIsTooSmallException(maximalOrder, 2, true);
",2,0,0,1,2,0,0,2,0,5,59,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,106,"        this.maximalOrder = maximalOrder;
",4,0,0,0,0,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,107,"        this.allowed = AllowedSolution.ANY_SIDE;
",6,0,0,0,0,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,108,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,124,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);
",6,0,0,1,2,0,0,0,0,6,65,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,125,"        if (maximalOrder < 2) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,126,"            throw new NumberIsTooSmallException(maximalOrder, 2, true);
",2,0,0,1,2,0,0,2,0,5,59,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,128,"        this.maximalOrder = maximalOrder;
",4,0,0,0,0,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,129,"        this.allowed = AllowedSolution.ANY_SIDE;
",6,0,0,0,0,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,130,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,136,"        return maximalOrder;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,157,"            return x[1];
",0,0,1,1,2,1,0,0,0,2,12,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,164,"            return x[0];
",0,0,1,1,2,1,0,0,0,2,12,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,178,"            y[2] = computeObjectiveValue(x[2]);
",0,0,1,3,6,0,2,0,0,7,35,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,179,"            if (Precision.equals(y[2], 0.0, 1)) {
",0,0,1,3,7,0,4,0,0,6,37,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,181,"                return x[2];
",0,0,1,1,2,1,0,0,0,2,12,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,184,"            if (y[1] * y[2] < 0) {
",0,2,1,3,7,0,0,0,0,6,22,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,186,"                nbPoints        = 3;
",2,0,0,0,0,0,0,0,0,3,20,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,187,"                signChangeIndex = 2;
",2,0,0,0,0,0,0,0,0,3,20,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,189,"                throw new NoBracketingException(x[0], x[2], y[0], y[2]);
",0,0,1,5,10,0,0,2,0,10,56,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,214,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,216,"                    return absYA < absYB ? xA : xB;
",8,1,0,0,0,1,0,0,0,9,31,10,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,218,"                    return xA;
",2,0,0,0,0,1,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,220,"                    return xB;
",2,0,0,0,0,1,0,0,0,2,10,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,222,"                    return (yA <= 0) ? xA : xB;
",6,1,0,1,2,1,0,0,0,7,27,10,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,224,"                    return (yA <  0) ? xB : xA;
",6,1,0,1,2,1,0,0,0,7,27,10,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,227,"                    throw new MathInternalError(null);
",0,0,0,1,2,0,0,2,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,235,"                targetY = -REDUCTION_FACTOR * yB;
",6,1,0,0,0,0,0,0,0,9,33,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,238,"                targetY = -REDUCTION_FACTOR * yA;
",6,1,0,0,0,0,0,0,0,9,33,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,260,"                    if (signChangeIndex - start >= end - signChangeIndex) {
",8,3,0,1,3,0,0,0,0,11,55,10,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,262,"                        ++start;
",2,0,0,0,0,0,0,0,0,3,8,12,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,265,"                        --end;
",2,0,0,0,0,0,0,0,0,3,6,12,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,269,"                    nextX = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,19,10,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,277,"                nextX = xA + 0.5 * (xB - xA);
",8,3,0,1,2,0,0,0,0,12,29,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,278,"                start = signChangeIndex - 1;
",4,1,0,0,0,0,0,0,0,6,28,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,279,"                end   = signChangeIndex;
",4,0,0,0,0,0,0,0,0,5,24,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,290,"            if ((nbPoints > 2) && (end - start != nbPoints)) {
",8,4,0,3,7,0,0,0,0,12,50,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,294,"                nbPoints = end - start;
",6,1,0,0,0,0,0,0,0,8,23,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,295,"                System.arraycopy(x, start, x, 0, nbPoints);
",0,0,0,1,2,0,12,0,0,12,43,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,296,"                System.arraycopy(y, start, y, 0, nbPoints);
",0,0,0,1,2,0,12,0,0,12,43,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,297,"                signChangeIndex -= start;
",4,0,0,0,0,0,0,0,0,5,25,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,299,"            } else  if (nbPoints == x.length) {
",6,1,0,1,4,0,0,0,0,7,35,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,302,"                nbPoints--;
",2,0,0,0,0,0,0,0,0,3,11,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,305,"                if (signChangeIndex >= (x.length + 1) / 2) {
",6,3,0,2,5,0,0,0,0,9,44,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,307,"                    System.arraycopy(x, 1, x, 0, nbPoints);
",0,0,0,1,2,0,10,0,0,10,39,12,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,308,"                    System.arraycopy(y, 1, y, 0, nbPoints);
",0,0,0,1,2,0,10,0,0,10,39,12,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,309,"                    --signChangeIndex;
",2,0,0,0,0,0,0,0,0,3,18,11,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,316,"            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);
",6,2,0,1,2,0,10,0,0,18,89,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,317,"            x[signChangeIndex] = nextX;
",2,0,1,1,2,0,0,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,318,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);
",6,2,0,1,2,0,10,0,0,18,89,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,319,"            y[signChangeIndex] = nextY;
",2,0,1,1,2,0,0,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,320,"            ++nbPoints;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,323,"            if (nextY * yA <= 0) {
",4,2,0,1,3,0,0,0,0,6,22,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,325,"                xB = nextX;
",4,0,0,0,0,0,0,0,0,5,11,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,326,"                yB = nextY;
",4,0,0,0,0,0,0,0,0,5,11,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,327,"                absYB = FastMath.abs(yB);
",2,0,0,1,2,0,6,0,0,9,25,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,328,"                ++agingA;
",2,0,0,0,0,0,0,0,0,3,9,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,329,"                agingB = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,332,"                xA = nextX;
",4,0,0,0,0,0,0,0,0,5,11,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,333,"                yA = nextY;
",4,0,0,0,0,0,0,0,0,5,11,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,334,"                absYA = FastMath.abs(yA);
",2,0,0,1,2,0,6,0,0,9,25,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,335,"                agingA = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,336,"                ++agingB;
",2,0,0,0,0,0,0,0,0,3,9,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,339,"                signChangeIndex++;
",2,0,0,0,0,0,0,0,0,3,18,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,343,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,393,"        this.allowed = allowedSolution;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,394,"        return super.solve(maxEval, f, min, max, startValue);
",12,0,0,1,2,1,0,0,0,12,53,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,44,47,"        super(relativeAccuracy, absoluteAccuracy);
",4,0,0,1,2,0,0,0,0,4,42,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,44,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,44,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);
",6,0,0,1,2,0,0,0,0,6,65,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,44,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,78,"        this(relativeAccuracy,
",2,0,0,0,1,0,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,100,"        return evaluations.getMaximalCount();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,104,"        return evaluations.getCount();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,200,"        return solve(maxEval, f, Double.NaN, Double.NaN, startValue);
",8,0,0,1,2,1,8,0,0,16,61,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,226,"        return UnivariateRealSolverUtils.isBracketing(function, lower, upper);
",0,0,0,1,2,1,10,0,0,10,70,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,240,"        return UnivariateRealSolverUtils.isSequence(start, mid, end);
",0,0,0,1,2,1,10,0,0,10,61,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,253,"        UnivariateRealSolverUtils.verifyInterval(lower, upper);
",0,0,0,1,2,0,8,0,0,8,55,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,254,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,282,"        UnivariateRealSolverUtils.verifyBracketing(function, lower, upper);
",0,0,0,1,2,0,10,0,0,10,67,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,283,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,295,"        } catch (MaxCountExceededException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,44,296,"            throw new TooManyEvaluationsException(e.getMax());
",0,0,0,2,4,0,4,2,0,6,50,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,36,"    private UnivariateRealSolverUtils() {}
",2,0,0,2,4,1,0,0,0,3,38,2,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,50,"        if (function == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,51,"            throw new NullArgumentException(LocalizedFormats.FUNCTION);
",4,0,0,1,2,0,0,2,0,6,59,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,53,"        final UnivariateRealSolver solver = new BrentSolver();
",2,0,0,1,2,1,0,4,0,7,54,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,54,"        return solver.solve(Integer.MAX_VALUE, function, x0, x1);
",4,0,0,1,2,1,10,0,0,14,57,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,73,"        if (function == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,74,"            throw new NullArgumentException(LocalizedFormats.FUNCTION);
",4,0,0,1,2,0,0,2,0,6,59,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,76,"        final UnivariateRealSolver solver = new BrentSolver(absoluteAccuracy);
",4,0,0,1,2,1,0,4,0,9,70,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,77,"        return solver.solve(Integer.MAX_VALUE, function, x0, x1);
",4,0,0,1,2,1,10,0,0,14,57,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,99,"        if (allowedSolution == AllowedSolution.ANY_SIDE) {
",6,1,0,1,3,0,0,0,0,7,50,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,101,"            return baseRoot;
",2,0,0,0,0,1,0,0,0,2,16,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,105,"        final double step = FastMath.max(bracketing.getAbsoluteAccuracy(),
",2,0,0,1,3,1,8,0,0,11,66,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,107,"        double xLo        = FastMath.max(min, baseRoot - step);
",6,1,0,1,2,0,6,0,0,13,55,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,108,"        double fLo        = f.value(xLo);
",2,0,0,1,2,0,6,0,0,8,33,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,109,"        double xHi        = FastMath.min(max, baseRoot + step);
",6,1,0,1,2,0,6,0,0,13,55,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,110,"        double fHi        = f.value(xHi);
",2,0,0,1,2,0,6,0,0,8,33,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,111,"        int remainingEval = maxEval - 2;
",4,1,0,0,0,0,0,0,0,5,32,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,112,"        while (remainingEval > 0) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,114,"            if ((fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0)) {
",8,7,0,3,7,0,0,0,0,15,55,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,116,"                return bracketing.solve(remainingEval, f, xLo, xHi, baseRoot, allowedSolution);
",0,0,0,1,2,1,16,0,0,16,79,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,120,"            boolean changeLo = false;
",2,0,0,0,0,0,0,0,0,3,25,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,121,"            boolean changeHi = false;
",2,0,0,0,0,0,0,0,0,3,25,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,122,"            if (fLo < fHi) {
",4,1,0,1,3,0,0,0,0,5,16,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,124,"                if (fLo >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,125,"                    changeLo = true;
",2,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,127,"                    changeHi = true;
",2,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,129,"            } else if (fLo > fHi) {
",4,1,0,1,4,0,0,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,131,"                if (fLo <= 0) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,132,"                    changeLo = true;
",2,0,0,0,0,0,0,0,0,4,16,11,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,134,"                    changeHi = true;
",2,0,0,0,0,0,0,0,0,4,16,11,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,138,"                changeLo = true;
",2,0,0,0,0,0,0,0,0,4,16,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,139,"                changeHi = true;
",2,0,0,0,0,0,0,0,0,4,16,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,143,"            if (changeLo) {
",2,0,0,1,3,0,0,0,0,2,15,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,144,"                xLo = FastMath.max(min, xLo - step);
",6,1,0,1,2,0,6,0,0,14,36,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,145,"                fLo  = f.value(xLo);
",2,0,0,1,2,0,6,0,0,9,20,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,146,"                remainingEval--;
",2,0,0,0,0,0,0,0,0,3,16,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,150,"            if (changeHi) {
",2,0,0,1,3,0,0,0,0,2,15,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,151,"                xHi = FastMath.min(max, xHi + step);
",6,1,0,1,2,0,6,0,0,14,36,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,152,"                fHi  = f.value(xHi);
",2,0,0,1,2,0,6,0,0,9,20,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,153,"                remainingEval--;
",2,0,0,0,0,0,0,0,0,3,16,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,156,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,158,"        throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING,
",4,0,0,0,1,0,0,2,0,6,67,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,207,"        return bracket(function, initial, lowerBound, upperBound, Integer.MAX_VALUE);
",4,0,0,1,2,1,10,0,0,14,77,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,246,"        if (function == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,247,"            throw new NullArgumentException(LocalizedFormats.FUNCTION);
",4,0,0,1,2,0,0,2,0,6,59,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,249,"        if (maximumIterations <= 0)  {
",2,1,0,1,3,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,250,"            throw new NotStrictlyPositiveException(LocalizedFormats.INVALID_MAX_ITERATIONS, maximumIterations);
",6,0,0,1,2,0,0,2,0,8,99,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,252,"        verifySequence(lowerBound, initial, upperBound);
",0,0,0,1,2,0,8,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,254,"        double a = initial;
",4,0,0,0,0,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,255,"        double b = initial;
",4,0,0,0,0,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,258,"        int numIterations = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,261,"            a = FastMath.max(a - 1.0, lowerBound);
",4,1,0,1,2,0,6,0,0,12,38,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,262,"            b = FastMath.min(b + 1.0, upperBound);
",4,1,0,1,2,0,6,0,0,12,38,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,263,"            fa = function.value(a);
",2,0,0,1,2,0,6,0,0,9,23,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,265,"            fb = function.value(b);
",2,0,0,1,2,0,6,0,0,9,23,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,266,"            ++numIterations;
",2,0,0,0,0,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,267,"        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&
",8,4,0,2,6,0,0,0,0,12,66,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,270,"        if (fa * fb > 0.0) {
",4,2,0,1,3,0,0,0,0,6,20,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,271,"            throw new NoBracketingException(LocalizedFormats.FAILED_BRACKETING,
",4,0,0,0,1,0,0,2,0,6,67,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,277,"        return new double[] {a, b};
",4,0,0,2,4,1,0,0,0,4,27,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,288,"        return (a + b) * 0.5;
",4,2,0,1,2,1,0,0,0,6,21,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,305,"        if (function == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,306,"            throw new NullArgumentException(LocalizedFormats.FUNCTION);
",4,0,0,1,2,0,0,2,0,6,59,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,308,"        final double fLo = function.value(lower);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,309,"        final double fHi = function.value(upper);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,310,"        return (fLo >= 0 && fHi <= 0) || (fLo <= 0 && fHi >= 0);
",8,7,0,2,4,1,0,0,0,15,56,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,324,"        return (start < mid) && (mid < end);
",8,3,0,2,4,1,0,0,0,11,36,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,337,"            throw new NumberIsTooLargeException(LocalizedFormats.ENDPOINTS_NOT_AN_INTERVAL,
",4,0,0,0,1,0,0,2,0,6,79,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,371,"        if (function == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,372,"            throw new NullArgumentException(LocalizedFormats.FUNCTION);
",4,0,0,1,2,0,0,2,0,6,59,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,374,"        verifyInterval(lower, upper);
",0,0,0,1,2,0,6,0,0,6,29,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,375,"        if (!isBracketing(function, lower, upper)) {
",0,0,0,2,5,0,8,0,0,9,44,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,376,"            throw new NoBracketingException(lower, upper,
",4,0,0,0,1,0,0,2,0,6,45,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,44,380,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
