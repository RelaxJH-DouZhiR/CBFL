dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math/stat/Frequency,75,331,"        return getPct(Long.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,31,5,1.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,386,"            return getCumFreq(((Integer) v).longValue());
",2,0,0,4,8,1,4,2,0,8,45,7,0.50000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,444,"        return getCumFreq(Long.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,35,5,0.50000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,177,"        addValue(Long.valueOf(v));
",0,0,0,2,4,0,8,0,0,8,26,5,0.33333,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,178,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,320,"        return (double) getCount(v) / (double) sumFreq;
",2,1,0,3,6,1,4,0,0,7,47,4,0.33333,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,408,"            return getSumFreq();    // v is comparable, but greater than the last value
",0,0,0,1,2,1,2,0,0,2,75,7,0.33333,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,541,"    private static class NaturalComparator<T extends Comparable<T>> implements Comparator<Comparable<T>>, Serializable {
",4,0,0,0,1,2,0,12,0,18,116,2,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,561,"            return o1.compareTo((T) o2);
",2,0,0,2,4,1,4,2,0,8,28,6,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,142,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));
",0,1,0,3,6,0,14,0,0,15,56,9,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,218,"            result += iterator.next().longValue();
",2,0,0,2,4,0,6,0,0,9,38,6,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,251,"                result = count.longValue();
",2,0,0,1,2,0,4,0,0,7,27,8,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,316,"        final long sumFreq = getSumFreq();
",2,0,0,1,2,1,2,0,0,5,34,4,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,317,"        if (sumFreq == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,385,"        if (v instanceof Integer) {
",2,0,0,1,3,0,0,2,0,4,27,5,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,388,"        Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator();
",2,0,0,2,4,0,4,8,0,14,81,4,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,389,"        if (c == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,390,"            c = new NaturalComparator();
",2,0,0,1,2,0,0,2,0,5,28,6,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,392,"        long result = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,395,"            Long value = freqTable.get(v);
",2,0,0,1,2,0,6,2,0,10,30,6,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,396,"            if (value != null) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,397,"                result = value.longValue();
",2,0,0,1,2,0,4,0,0,7,27,8,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,401,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,403,"        if (c.compare(v, freqTable.firstKey()) < 0) {
",0,1,0,3,7,0,10,0,0,11,45,4,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,407,"        if (c.compare(v, freqTable.lastKey()) >= 0) {
",0,1,0,3,7,0,10,0,0,11,45,4,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,495,"        return (double) getCumFreq(v) / (double) sumFreq;
",2,1,0,3,6,1,4,0,0,7,49,4,0.25000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,159,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,215,"        long result = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.20000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,216,"        Iterator<Long> iterator = freqTable.values().iterator();
",2,0,0,2,4,0,6,4,0,12,56,4,0.20000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,217,"        while (iterator.hasNext())  {
",0,0,0,2,5,0,4,0,0,4,29,5,0.20000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,220,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.20000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,244,"        if (v instanceof Integer) {
",2,0,0,1,3,0,0,2,0,4,27,5,0.20000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,247,"        long result = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.20000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,249,"            Long count =  freqTable.get(v);
",2,0,0,1,2,0,6,2,0,10,31,6,0.20000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,250,"            if (count != null) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.20000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,255,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,256,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.20000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,382,"        if (getSumFreq() == 0) {
",0,1,0,2,5,0,2,0,0,3,24,4,0.20000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,491,"        final long sumFreq = getSumFreq();
",2,0,0,1,2,1,2,0,0,5,34,4,0.20000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,492,"        if (sumFreq == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.20000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,133,"        Comparable<?> obj = v;
",4,0,0,0,0,0,0,2,0,6,22,4,0.16667,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,134,"        if (v instanceof Integer) {
",2,0,0,1,3,0,0,2,0,4,27,5,0.16667,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,138,"            Long count = freqTable.get(obj);
",2,0,0,1,2,0,6,2,0,10,32,6,0.16667,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,139,"            if (count == null) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.16667,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,140,"                freqTable.put(obj, Long.valueOf(1));
",0,0,0,2,4,0,10,0,0,10,36,9,0.16667,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,149,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,150,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,158,"        addValue(Long.valueOf(v));
",0,0,0,2,4,0,8,0,0,8,26,5,0.16667,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,59,"    public Frequency() {
",2,0,0,1,3,1,0,0,0,3,20,2,0.14286,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,60,"        freqTable = new TreeMap<Comparable<?>, Long>();
",2,0,0,1,2,0,0,6,0,9,47,4,0.14286,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,61,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,69,"    public Frequency(Comparator<?> comparator) {
",4,0,0,1,3,1,0,2,0,7,44,2,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,70,"        freqTable = new TreeMap<Comparable<?>, Long>((Comparator<? super Comparable<?>>) comparator);
",4,0,0,2,4,0,0,10,0,15,93,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,81,"        NumberFormat nf = NumberFormat.getPercentInstance();
",2,0,0,1,2,0,4,2,0,8,52,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,82,"        StringBuffer outBuffer = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,44,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,83,"        outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");
",0,0,0,1,2,0,4,0,0,5,58,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,84,"        Iterator<Comparable<?>> iter = freqTable.keySet().iterator();
",2,0,0,2,4,0,6,4,0,12,61,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,85,"        while (iter.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,86,"            Comparable<?> value = iter.next();
",2,0,0,1,2,0,4,2,0,8,34,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,87,"            outBuffer.append(value);
",0,0,0,1,2,0,6,0,0,6,24,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,88,"            outBuffer.append('\t');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,89,"            outBuffer.append(getCount(value));
",0,0,0,2,4,0,8,0,0,8,34,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,90,"            outBuffer.append('\t');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,91,"            outBuffer.append(nf.format(getPct(value)));
",0,0,0,3,6,0,12,0,0,12,43,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,92,"            outBuffer.append('\t');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,93,"            outBuffer.append(nf.format(getCumPct(value)));
",0,0,0,3,6,0,12,0,0,12,46,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,94,"            outBuffer.append('\n');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,95,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,96,"        return outBuffer.toString();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,113,"        if (v instanceof Comparable<?>){
",2,0,0,1,3,0,0,2,0,4,32,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,114,"            addValue((Comparable<?>) v);
",2,0,0,2,4,0,2,2,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,116,"            throw MathRuntimeException.createIllegalArgumentException(
",0,0,0,0,1,0,4,0,0,4,58,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,120,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,135,"           obj = Long.valueOf(((Integer) v).longValue());
",4,0,0,4,8,0,6,2,0,13,46,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,144,"        } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,146,"            throw MathRuntimeException.createIllegalArgumentException(
",0,0,0,0,1,0,4,0,0,4,58,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,168,"        addValue(Long.valueOf(v.longValue()));
",0,0,0,3,6,0,10,0,0,10,38,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,169,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,186,"        addValue(Character.valueOf(v));
",0,0,0,2,4,0,8,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,187,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,191,"        freqTable.clear();
",0,0,0,1,2,0,4,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,192,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,204,"        return freqTable.keySet().iterator();
",0,0,0,2,4,1,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,233,"        return getCount((Comparable<?>) v);
",2,0,0,2,4,1,2,2,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,245,"            return getCount(((Integer) v).longValue());
",2,0,0,4,8,1,4,2,0,8,43,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,253,"        } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,266,"        return getCount(Long.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,33,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,276,"        return getCount(Long.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,33,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,286,"        return getCount(Character.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,303,"        return getCumPct((Comparable<?>) v);
",2,0,0,2,4,1,2,2,0,6,36,5,0.00000,1
defect4j,math,org/apache/commons/math/stat/Frequency,75,318,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,342,"        return getPct(Long.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,353,"        return getPct(Character.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,36,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,369,"        return getCumFreq((Comparable<?>) v);
",2,0,0,2,4,1,2,2,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,383,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,399,"        } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,400,"            return result;   // v is not comparable
",2,0,0,0,0,1,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,404,"            return 0;  // v is comparable, but less than first value
",0,0,0,0,0,1,0,0,0,0,56,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,411,"        Iterator<Comparable<?>> values = valuesIterator();
",2,0,0,1,2,0,2,4,0,8,50,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,412,"        while (values.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,413,"            Comparable<?> nextValue = values.next();
",2,0,0,1,2,0,4,2,0,8,40,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,414,"            if (c.compare(v, nextValue) > 0) {
",0,1,0,2,5,0,8,0,0,9,34,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,415,"                result += getCount(nextValue);
",2,0,0,1,2,0,4,0,0,7,30,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,417,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,419,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,420,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,432,"        return getCumFreq(Long.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,456,"        return getCumFreq(Character.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,40,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,475,"        return getCumPct((Comparable<?>) v);
",2,0,0,2,4,1,2,2,0,6,36,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,493,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,508,"        return getCumPct(Long.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,521,"        return getCumPct(Long.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,534,"        return getCumPct(Character.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,568,"        final int prime = 31;
",2,0,0,0,0,1,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,569,"        int result = 1;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,570,"        result = prime * result +
",6,2,0,0,0,0,0,0,0,9,25,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,572,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,578,"        if (this == obj)
",2,1,0,1,2,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,579,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,580,"        if (obj == null)
",2,1,0,1,2,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,581,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,582,"        if (!(obj instanceof Frequency))
",2,0,0,2,4,0,0,2,0,5,32,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,583,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,584,"        Frequency other = (Frequency) obj;
",4,0,0,1,2,0,0,4,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,585,"        if (freqTable == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,586,"            if (other.freqTable != null)
",4,1,0,1,2,0,0,0,0,5,28,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,587,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,588,"        } else if (!freqTable.equals(other.freqTable))
",4,0,0,2,5,0,4,0,0,9,46,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,589,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,590,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
