dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math/dfp/DfpField,59,174,"        this(decimalDigits, true);
",2,0,0,1,2,0,0,0,0,3,26,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,175,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,188,"    private DfpField(final int decimalDigits, final boolean computeConstants) {
",6,0,0,1,3,3,0,0,0,9,75,2,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,190,"        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;
",6,3,0,2,4,0,0,0,0,10,70,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,191,"        this.rMode       = RoundingMode.ROUND_HALF_EVEN;
",6,0,0,0,0,0,0,0,0,7,48,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,192,"        this.ieeeFlags   = 0;
",2,0,0,0,0,0,0,0,0,3,21,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,193,"        this.zero        = new Dfp(this, 0);
",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,194,"        this.one         = new Dfp(this, 1);
",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,195,"        this.two         = new Dfp(this, 2);
",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,197,"        if (computeConstants) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,199,"            synchronized (DfpField.class) {
",0,0,0,1,3,0,0,2,0,2,31,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,205,"                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));
",4,2,0,3,6,0,2,0,0,8,73,9,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,208,"                sqr2           = new Dfp(this, sqr2String);
",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,209,"                sqr2Split      = split(sqr2String);
",2,0,0,1,2,0,4,0,0,7,35,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,210,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);
",4,0,0,1,2,0,0,2,0,7,53,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,211,"                sqr3           = new Dfp(this, sqr3String);
",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,212,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);
",4,0,0,1,2,0,0,2,0,7,53,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,213,"                pi             = new Dfp(this, piString);
",4,0,0,1,2,0,0,2,0,7,41,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,214,"                piSplit        = split(piString);
",2,0,0,1,2,0,4,0,0,7,33,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,215,"                e              = new Dfp(this, eString);
",4,0,0,1,2,0,0,2,0,7,40,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,216,"                eSplit         = split(eString);
",2,0,0,1,2,0,4,0,0,7,32,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,217,"                ln2            = new Dfp(this, ln2String);
",4,0,0,1,2,0,0,2,0,7,42,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,218,"                ln2Split       = split(ln2String);
",2,0,0,1,2,0,4,0,0,7,34,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,219,"                ln5            = new Dfp(this, ln5String);
",4,0,0,1,2,0,0,2,0,7,42,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,220,"                ln5Split       = split(ln5String);
",2,0,0,1,2,0,4,0,0,7,34,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,221,"                ln10           = new Dfp(this, ln10String);
",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,223,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,226,"            sqr2           = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,227,"            sqr2Split      = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,228,"            sqr2Reciprocal = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,229,"            sqr3           = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,230,"            sqr3Reciprocal = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,231,"            pi             = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,232,"            piSplit        = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,233,"            e              = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,234,"            eSplit         = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,235,"            ln2            = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,236,"            ln2Split       = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,237,"            ln5            = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,238,"            ln5Split       = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,239,"            ln10           = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,242,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,248,"        return radixDigits;
",2,0,0,0,0,1,0,0,0,2,19,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,266,"        return rMode;
",2,0,0,0,0,1,0,0,0,2,13,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,328,"        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);
",14,2,0,1,2,0,0,0,0,17,99,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,329,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,400,"        return zero;
",2,0,0,0,0,1,0,0,0,2,12,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,522,"      Dfp result[] = new Dfp[2];
",2,0,0,2,4,0,0,4,0,6,26,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,523,"      boolean leading = true;
",2,0,0,0,0,0,0,0,0,3,23,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,524,"      int sp = 0;
",2,0,0,0,0,0,0,0,0,2,11,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,525,"      int sig = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,527,"      char[] buf = new char[a.length()];
",2,0,0,3,6,0,4,0,0,6,34,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,529,"      for (int i = 0; i < buf.length; i++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,530,"        buf[i] = a.charAt(i);
",0,0,1,2,4,0,6,0,0,11,21,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,532,"        if (buf[i] >= '1' && buf[i] <= '9') {
",0,3,1,3,7,0,0,0,0,13,37,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,533,"            leading = false;
",2,0,0,0,0,0,0,0,0,4,16,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,536,"        if (buf[i] == '.') {
",0,1,1,2,5,0,0,0,0,6,20,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,537,"          sig += (400 - sig) % 4;
",4,2,0,1,2,0,0,0,0,7,23,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,538,"          leading = false;
",2,0,0,0,0,0,0,0,0,4,16,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,541,"        if (sig == (radixDigits / 2) * 4) {
",4,3,0,2,5,0,0,0,0,7,35,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,542,"          sp = i;
",4,0,0,0,0,0,0,0,0,5,7,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,543,"          break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,546,"        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {
",2,4,1,3,7,0,0,0,0,17,49,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,547,"            sig ++;
",2,0,0,0,0,0,0,0,0,3,7,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,551,"      result[0] = new Dfp(this, new String(buf, 0, sp));
",4,0,1,3,6,0,0,4,0,11,50,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,553,"      for (int i = 0; i < buf.length; i++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,554,"        buf[i] = a.charAt(i);
",0,0,1,2,4,0,6,0,0,11,21,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,555,"        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {
",4,5,1,3,7,0,0,0,0,19,47,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,556,"            buf[i] = '0';
",0,0,1,1,2,0,0,0,0,6,13,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,560,"      result[1] = new Dfp(this, new String(buf));
",2,0,1,3,6,0,0,4,0,9,43,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,562,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,570,"        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {
",4,4,0,2,5,0,4,0,0,12,81,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,573,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);
",4,0,0,1,2,1,0,4,0,10,84,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,574,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);
",4,0,0,1,2,1,0,4,0,9,67,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,575,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);
",4,0,0,1,2,1,0,4,0,9,67,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,576,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);
",4,0,0,1,2,1,0,4,0,9,67,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,578,"            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();
",2,0,0,1,2,1,4,2,0,9,54,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,579,"            sqr2String           = highPrecisionSqr2.toString();
",2,0,0,1,2,0,4,0,0,7,52,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,580,"            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();
",2,0,0,2,4,0,8,0,0,11,77,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,582,"            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();
",2,0,0,1,2,1,4,2,0,9,56,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,583,"            sqr3String           = highPrecisionSqr3.toString();
",2,0,0,1,2,0,4,0,0,7,52,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,584,"            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();
",2,0,0,2,4,0,8,0,0,11,77,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,586,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();
",2,0,0,2,4,0,10,0,0,13,90,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,587,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();
",2,0,0,2,4,0,8,0,0,11,71,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,588,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();
",2,0,0,2,4,0,10,0,0,13,88,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,589,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();
",4,0,0,3,6,0,8,2,0,15,103,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,590,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();
",4,0,0,3,6,0,8,2,0,15,103,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,593,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,603,"        Dfp sqrt2   = two.sqrt();
",2,0,0,1,2,0,4,2,0,8,25,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,604,"        Dfp yk      = sqrt2.subtract(one);
",2,0,0,1,2,0,6,2,0,10,34,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,605,"        Dfp four    = two.add(two);
",2,0,0,1,2,0,6,2,0,10,27,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,606,"        Dfp two2kp3 = two;
",4,0,0,0,0,0,0,2,0,6,18,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,607,"        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));
",2,0,0,3,6,0,14,2,0,18,64,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,615,"        for (int i = 1; i < 20; i++) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,616,"            final Dfp ykM1 = yk;
",4,0,0,0,0,1,0,2,0,7,20,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,618,"            final Dfp y2         = yk.multiply(yk);
",2,0,0,1,2,1,6,2,0,11,39,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,619,"            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));
",2,0,0,2,4,1,10,2,0,15,53,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,620,"            final Dfp s          = oneMinusY4.sqrt().sqrt();
",2,0,0,2,4,1,6,2,0,11,48,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,621,"            yk = one.subtract(s).divide(one.add(s));
",2,0,0,3,6,0,14,0,0,17,40,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,623,"            two2kp3 = two2kp3.multiply(four);
",2,0,0,1,2,0,6,0,0,9,33,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,625,"            final Dfp p = one.add(yk);
",2,0,0,1,2,1,6,2,0,11,26,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,626,"            final Dfp p2 = p.multiply(p);
",2,0,0,1,2,1,6,2,0,11,29,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,627,"            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));
",2,0,0,8,16,0,34,0,0,37,108,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,629,"            if (yk.equals(ykM1)) {
",0,0,0,2,5,0,6,0,0,6,22,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,630,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,634,"        return one.divide(ak);
",0,0,0,1,2,1,6,0,0,6,22,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,645,"        Dfp y  = new Dfp(one);
",4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,646,"        Dfp py = new Dfp(one);
",4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,647,"        Dfp f  = new Dfp(one);
",4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,648,"        Dfp fi = new Dfp(one);
",4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,649,"        Dfp x  = new Dfp(one);
",4,0,0,1,2,0,0,4,0,8,22,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,651,"        for (int i = 0; i < 10000; i++) {
",6,1,0,1,3,0,0,0,0,8,33,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,652,"            x = x.multiply(a);
",2,0,0,1,2,0,6,0,0,9,18,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,653,"            y = y.add(x.divide(f));
",2,0,0,2,4,0,10,0,0,13,23,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,654,"            fi = fi.add(one);
",2,0,0,1,2,0,6,0,0,9,17,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,655,"            f = f.multiply(fi);
",2,0,0,1,2,0,6,0,0,9,19,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,656,"            if (y.equals(py)) {
",0,0,0,2,5,0,6,0,0,6,19,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,657,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,659,"            py = new Dfp(y);
",4,0,0,1,2,0,0,2,0,7,16,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,662,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,728,"        int den = 1;
",2,0,0,0,0,0,0,0,0,2,12,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,729,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));
",2,0,0,5,10,0,16,4,0,23,60,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,731,"        Dfp y = new Dfp(x);
",4,0,0,1,2,0,0,4,0,8,19,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,732,"        Dfp num = new Dfp(x);
",4,0,0,1,2,0,0,4,0,8,21,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,733,"        Dfp py = new Dfp(y);
",4,0,0,1,2,0,0,4,0,8,20,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,734,"        for (int i = 0; i < 10000; i++) {
",6,1,0,1,3,0,0,0,0,8,33,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,735,"            num = num.multiply(x);
",2,0,0,1,2,0,6,0,0,9,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,736,"            num = num.multiply(x);
",2,0,0,1,2,0,6,0,0,9,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,737,"            den = den + 2;
",4,1,0,0,0,0,0,0,0,6,14,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,738,"            Dfp t = num.divide(den);
",2,0,0,1,2,0,6,2,0,10,24,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,739,"            y = y.add(t);
",2,0,0,1,2,0,6,0,0,9,13,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,740,"            if (y.equals(py)) {
",0,0,0,2,5,0,6,0,0,6,19,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,741,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,743,"            py = new Dfp(y);
",4,0,0,1,2,0,0,2,0,7,16,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,746,"        return y.multiply(two);
",0,0,0,1,2,1,6,0,0,6,23,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,29,"    public enum RoundingMode {
",2,0,0,0,1,1,0,0,0,3,26,2,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,32,"        ROUND_DOWN,
",2,0,0,0,0,0,0,0,0,2,11,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,35,"        ROUND_UP,
",2,0,0,0,0,0,0,0,0,2,9,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,38,"        ROUND_HALF_UP,
",2,0,0,0,0,0,0,0,0,2,14,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,41,"        ROUND_HALF_DOWN,
",2,0,0,0,0,0,0,0,0,2,16,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,46,"        ROUND_HALF_EVEN,
",2,0,0,0,0,0,0,0,0,2,16,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,49,"        ROUND_HALF_ODD,
",2,0,0,0,0,0,0,0,0,2,15,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,52,"        ROUND_CEIL,
",2,0,0,0,0,0,0,0,0,2,11,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,55,"        ROUND_FLOOR;
",2,0,0,0,0,0,0,0,0,2,12,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,202,"        this(field, (long) x);
",4,0,0,2,4,0,0,0,0,4,22,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,203,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,209,"    protected Dfp(final DfpField field, long x) {
",6,0,0,1,3,2,0,2,0,10,45,2,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,212,"        mant = new int[field.getRadixDigits()];
",2,0,0,2,4,0,4,0,0,7,39,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,213,"        nans = FINITE;
",4,0,0,0,0,0,0,0,0,5,14,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,214,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,216,"        boolean isLongMin = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,217,"        if (x == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,225,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,226,"            sign = -1;
",2,0,0,0,0,0,0,0,0,4,10,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,227,"            x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,229,"            sign = 1;
",2,0,0,0,0,0,0,0,0,3,9,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,232,"        exp = 0;
",2,0,0,0,0,0,0,0,0,3,8,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,233,"        while (x != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);
",12,2,0,1,2,0,10,0,0,24,76,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,235,"            mant[mant.length - 1] = (int) (x % RADIX);
",8,2,1,3,6,0,0,0,0,13,42,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,236,"            x /= RADIX;
",4,0,0,0,0,0,0,0,0,5,11,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,237,"            exp++;
",2,0,0,0,0,0,0,0,0,3,6,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,240,"        if (isLongMin) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,250,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,318,"    public Dfp(final Dfp d) {
",4,0,0,1,3,2,0,2,0,8,25,2,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,319,"        mant  = d.mant.clone();
",6,0,0,1,2,0,2,0,0,9,23,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,320,"        sign  = d.sign;
",6,0,0,0,0,0,0,0,0,7,15,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,321,"        exp   = d.exp;
",6,0,0,0,0,0,0,0,0,7,14,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,322,"        nans  = d.nans;
",6,0,0,0,0,0,0,0,0,7,15,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,323,"        field = d.field;
",6,0,0,0,0,0,0,0,0,7,16,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,324,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,330,"    protected Dfp(final DfpField field, final String s) {
",6,0,0,1,3,3,0,4,0,13,53,2,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,333,"        mant = new int[field.getRadixDigits()];
",2,0,0,2,4,0,4,0,0,7,39,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,334,"        sign = 1;
",2,0,0,0,0,0,0,0,0,3,9,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,335,"        exp = 0;
",2,0,0,0,0,0,0,0,0,3,8,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,336,"        nans = FINITE;
",4,0,0,0,0,0,0,0,0,5,14,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,337,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,339,"        boolean decimalFound = false;
",2,0,0,0,0,0,0,0,0,3,29,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,340,"        final int rsize = 4;   // size of radix in decimal digits
",2,0,0,0,0,1,0,0,0,3,57,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,341,"        final int offset = 4;  // Starting offset into Striped
",2,0,0,0,0,1,0,0,0,3,54,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,342,"        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];
",6,3,0,3,6,1,2,0,0,12,71,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,345,"        if (s.equals(POS_INFINITY_STRING)) {
",0,0,0,2,5,0,6,0,0,6,36,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,351,"        if (s.equals(NEG_INFINITY_STRING)) {
",0,0,0,2,5,0,6,0,0,6,36,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,357,"        if (s.equals(NAN_STRING)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,364,"        int p = s.indexOf(""e"");
",2,0,0,1,2,0,4,0,0,7,23,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,365,"        if (p == -1) { // try upper case?
",2,1,0,1,3,0,0,0,0,4,33,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,366,"            p = s.indexOf(""E"");
",2,0,0,1,2,0,4,0,0,8,19,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,370,"        int sciexp = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,371,"        if (p != -1) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,393,"            fpdecimal = s;
",4,0,0,0,0,0,0,0,0,5,14,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,397,"        if (fpdecimal.indexOf(""-"") !=  -1) {
",0,1,0,2,5,0,4,0,0,7,36,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,402,"        p = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,405,"        int decimalPos = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,407,"            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {
",0,3,0,3,7,0,12,0,0,17,63,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,408,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,411,"            if (decimalFound && fpdecimal.charAt(p) == '0') {
",2,2,0,2,5,0,6,0,0,11,49,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,412,"                decimalPos--;
",2,0,0,0,0,0,0,0,0,3,13,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,415,"            if (fpdecimal.charAt(p) == '.') {
",0,1,0,2,5,0,6,0,0,8,33,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,416,"                decimalFound = true;
",2,0,0,0,0,0,0,0,0,4,20,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,419,"            p++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,421,"            if (p == fpdecimal.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,427,"        int q = offset;
",4,0,0,0,0,0,0,0,0,4,15,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,428,"        striped[0] = '0';
",0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,429,"        striped[1] = '0';
",0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,430,"        striped[2] = '0';
",0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,431,"        striped[3] = '0';
",0,0,1,1,2,0,0,0,0,4,17,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,432,"        int significantDigits=0;
",2,0,0,0,0,0,0,0,0,2,24,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,434,"            if (p == (fpdecimal.length())) {
",2,1,0,3,7,0,4,0,0,7,32,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,435,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,439,"            if (q == mant.length*rsize+offset+1) {
",10,4,0,1,3,0,0,0,0,14,38,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,440,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,443,"            if (fpdecimal.charAt(p) == '.') {
",0,1,0,2,5,0,6,0,0,8,33,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,444,"                decimalFound = true;
",2,0,0,0,0,0,0,0,0,4,20,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,445,"                decimalPos = significantDigits;
",4,0,0,0,0,0,0,0,0,5,31,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,446,"                p++;
",2,0,0,0,0,0,0,0,0,3,4,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,447,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,450,"            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {
",0,3,0,3,7,0,12,0,0,17,61,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,455,"            striped[q] = fpdecimal.charAt(p);
",0,0,1,2,4,0,6,0,0,11,33,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,456,"            q++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,457,"            p++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,458,"            significantDigits++;
",2,0,0,0,0,0,0,0,0,3,20,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,463,"        if (decimalFound && q != offset) {
",6,2,0,1,3,0,0,0,0,8,34,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,465,"                q--;
",2,0,0,0,0,0,0,0,0,3,4,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,466,"                if (q == offset) {
",4,1,0,1,3,0,0,0,0,5,18,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,469,"                if (striped[q] == '0') {
",0,1,1,2,5,0,0,0,0,6,24,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,470,"                    significantDigits--;
",2,0,0,0,0,0,0,0,0,3,20,10,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,478,"        if (decimalFound && significantDigits == 0) {
",4,2,0,1,3,0,0,0,0,6,45,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,483,"        if (!decimalFound) {
",2,0,0,1,3,0,0,0,0,3,20,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,488,"        q = offset;  // set q to point to first sig digit
",4,0,0,0,0,0,0,0,0,5,49,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,489,"        p = significantDigits-1+offset;
",6,2,0,0,0,0,0,0,0,9,31,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,491,"        int trailingZeros = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,492,"        while (p > q) {
",4,1,0,1,3,0,0,0,0,5,15,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,493,"            if (striped[p] != '0') {
",0,1,1,2,5,0,0,0,0,6,24,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,494,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,501,"        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;
",12,4,0,2,4,0,0,0,0,16,62,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,502,"        q -= i;
",4,0,0,0,0,0,0,0,0,5,7,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,503,"        decimalPos += i;
",4,0,0,0,0,0,0,0,0,5,16,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,506,"        while ((p - q) < (mant.length * rsize)) {
",10,3,0,3,7,0,0,0,0,13,41,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,507,"            for (i = 0; i < rsize; i++) {
",8,1,0,1,3,0,0,0,0,11,29,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,508,"                striped[++p] = '0';
",2,0,1,1,2,0,0,0,0,7,19,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,514,"        for (i = mant.length - 1; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,14,40,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,515,"            mant[i] = (striped[q]   - '0') * 1000 +
",0,5,1,3,6,0,0,0,0,15,39,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,519,"            q += 4;
",2,0,0,0,0,0,0,0,0,3,7,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,523,"        exp = (decimalPos+sciexp) / rsize;
",8,2,0,1,2,0,0,0,0,11,34,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,525,"        if (q < striped.length) {
",6,1,0,1,3,0,0,0,0,7,25,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,527,"            round((striped[q] - '0')*1000);
",0,2,1,3,6,0,2,0,0,9,31,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,530,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,594,"        if (field.getRadixDigits() != d.field.getRadixDigits()) {
",4,1,0,3,7,0,6,0,0,11,57,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,601,"        return new Dfp(d);
",2,0,0,1,2,1,0,2,0,4,18,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,632,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,639,"        return field.getRadixDigits();
",0,0,0,1,2,1,4,0,0,4,30,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,646,"        return field.getZero();
",0,0,0,1,2,1,4,0,0,4,23,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,666,"        for (int i = mant.length - 1; i > 0; i--) {
",10,2,0,1,3,0,0,0,0,13,43,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,667,"            mant[i] = mant[i-1];
",2,1,1,2,4,0,0,0,0,10,20,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,669,"        mant[0] = 0;
",0,0,1,1,2,0,0,0,0,3,12,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,670,"        exp--;
",2,0,0,0,0,0,0,0,0,3,6,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,671,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,678,"        for (int i = 0; i < mant.length - 1; i++) {
",10,2,0,1,3,0,0,0,0,13,43,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,679,"            mant[i] = mant[i+1];
",2,1,1,2,4,0,0,0,0,10,20,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,681,"        mant[mant.length - 1] = 0;
",4,1,1,1,2,0,0,0,0,8,26,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,682,"        exp++;
",2,0,0,0,0,0,0,0,0,3,6,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,683,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,694,"        int lostdigit = 0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,695,"        boolean inexact = false;
",2,0,0,0,0,0,0,0,0,3,24,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,697,"        int diff = exp - e;
",6,1,0,0,0,0,0,0,0,7,19,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,699,"        int adiff = diff;
",4,0,0,0,0,0,0,0,0,4,17,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,700,"        if (adiff < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,701,"            adiff = -adiff;
",4,0,0,0,0,0,0,0,0,6,15,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,704,"        if (diff == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,705,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,708,"        if (adiff > (mant.length + 1)) {
",6,2,0,2,5,0,0,0,0,8,32,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,710,"            Arrays.fill(mant, 0);
",0,0,0,1,2,0,6,0,0,6,21,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,711,"            exp = e;
",4,0,0,0,0,0,0,0,0,5,8,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,713,"            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
",4,0,0,1,2,0,4,0,0,8,46,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,714,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);
",4,0,0,1,2,0,4,0,0,8,54,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,716,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,719,"        for (int i = 0; i < adiff; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,720,"            if (diff < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,725,"                if (lostdigit != 0) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,726,"                    inexact = true;
",2,0,0,0,0,0,0,0,0,4,15,10,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,729,"                lostdigit = mant[0];
",2,0,1,1,2,0,0,0,0,5,20,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,731,"                shiftRight();
",0,0,0,1,2,0,2,0,0,2,13,9,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,737,"        if (inexact) {
",2,0,0,1,3,0,0,0,0,2,14,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,738,"            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
",4,0,0,1,2,0,4,0,0,8,46,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,739,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);
",4,0,0,1,2,0,4,0,0,8,54,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,742,"        return lostdigit;
",2,0,0,0,0,1,0,0,0,2,17,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,753,"        if (field.getRadixDigits() != x.field.getRadixDigits()) {
",4,1,0,3,7,0,6,0,0,11,57,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,762,"        if (isNaN() || x.isNaN()) {
",0,1,0,3,7,0,6,0,0,7,27,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,768,"        return compare(this, x) < 0;
",0,1,0,1,2,1,4,0,0,5,28,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,778,"        if (field.getRadixDigits() != x.field.getRadixDigits()) {
",4,1,0,3,7,0,6,0,0,11,57,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,787,"        if (isNaN() || x.isNaN()) {
",0,1,0,3,7,0,6,0,0,7,27,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,793,"        return compare(this, x) > 0;
",0,1,0,1,2,1,4,0,0,5,28,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,807,"        return (nans == QNAN) || (nans == SNAN);
",8,3,0,2,4,1,0,0,0,11,40,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,817,"        if (other instanceof Dfp) {
",2,0,0,1,3,0,0,2,0,4,27,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,818,"            final Dfp x = (Dfp) other;
",4,0,0,1,2,1,0,4,0,9,26,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,819,"            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {
",4,2,0,5,11,0,12,0,0,18,81,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,823,"            return compare(this, x) == 0;
",0,1,0,1,2,1,4,0,0,5,29,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,844,"        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {
",4,2,0,5,11,0,12,0,0,18,81,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,848,"        return greaterThan(x) || lessThan(x);
",0,1,0,2,4,1,8,0,0,9,37,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,859,"        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&
",20,7,0,2,5,0,0,0,0,27,71,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,861,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,864,"        if (a.sign != b.sign) {
",8,1,0,1,3,0,0,0,0,9,23,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,873,"        if (a.nans == INFINITE && b.nans == FINITE) {
",12,3,0,1,3,0,0,0,0,15,45,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,877,"        if (a.nans == FINITE && b.nans == INFINITE) {
",12,3,0,1,3,0,0,0,0,15,45,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,881,"        if (a.nans == INFINITE && b.nans == INFINITE) {
",12,3,0,1,3,0,0,0,0,15,47,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,886,"        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {
",20,5,0,3,7,0,0,0,0,25,67,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,887,"            if (a.exp < b.exp) {
",8,1,0,1,3,0,0,0,0,9,20,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,888,"                return -a.sign;
",4,0,0,0,0,1,0,0,0,5,15,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,891,"            if (a.exp > b.exp) {
",8,1,0,1,3,0,0,0,0,9,20,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,892,"                return a.sign;
",4,0,0,0,0,1,0,0,0,4,14,9,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,897,"        for (int i = a.mant.length - 1; i >= 0; i--) {
",12,2,0,1,3,0,0,0,0,15,46,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,898,"            if (a.mant[i] > b.mant[i]) {
",8,1,1,3,7,0,0,0,0,13,28,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,899,"                return a.sign;
",4,0,0,0,0,1,0,0,0,4,14,9,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,902,"            if (a.mant[i] < b.mant[i]) {
",8,1,1,3,7,0,0,0,0,13,28,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,903,"                return -a.sign;
",4,0,0,0,0,1,0,0,0,5,15,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,907,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1144,"        extra = RADIX-extra;
",6,1,0,0,0,0,0,0,0,8,20,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1145,"        for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1146,"            mant[i] = RADIX-mant[i]-1;
",2,1,1,2,4,0,0,0,0,12,26,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1149,"        int rh = extra / RADIX;
",6,1,0,0,0,0,0,0,0,7,23,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1150,"        extra = extra - rh * RADIX;
",8,2,0,0,0,0,0,0,0,11,27,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1151,"        for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1152,"            final int r = mant[i] + rh;
",4,1,1,1,2,1,0,0,0,10,27,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1153,"            rh = r / RADIX;
",6,1,0,0,0,0,0,0,0,8,15,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1154,"            mant[i] = r - rh * RADIX;
",6,2,1,1,2,0,0,0,0,13,25,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1157,"        return extra;
",2,0,0,0,0,1,0,0,0,2,13,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1167,"        if (field.getRadixDigits() != x.field.getRadixDigits()) {
",4,1,0,3,7,0,6,0,0,11,57,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1175,"        if (nans != FINITE || x.nans != FINITE) {
",10,3,0,1,3,0,0,0,0,13,41,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1206,"        Dfp a = newInstance(this);
",2,0,0,1,2,0,2,2,0,6,26,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1207,"        Dfp b = newInstance(x);
",2,0,0,1,2,0,4,2,0,8,23,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1210,"        Dfp result = newInstance(getZero());
",2,0,0,2,4,0,4,2,0,8,36,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1213,"        final byte asign = a.sign;
",6,0,0,0,0,1,0,0,0,7,26,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1214,"        final byte bsign = b.sign;
",6,0,0,0,0,1,0,0,0,7,26,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1216,"        a.sign = 1;
",4,0,0,0,0,0,0,0,0,5,11,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1217,"        b.sign = 1;
",4,0,0,0,0,0,0,0,0,5,11,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1220,"        byte rsign = bsign;
",4,0,0,0,0,0,0,0,0,4,19,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1221,"        if (compare(a, b) > 0) {
",0,1,0,2,5,0,6,0,0,7,24,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1222,"            rsign = asign;
",4,0,0,0,0,0,0,0,0,5,14,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1228,"        if (b.mant[mant.length-1] == 0) {
",8,2,0,2,5,0,0,0,0,10,33,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1229,"            b.exp = a.exp;
",8,0,0,0,0,0,0,0,0,9,14,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1232,"        if (a.mant[mant.length-1] == 0) {
",8,2,0,2,5,0,0,0,0,10,33,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1237,"        int aextradigit = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1238,"        int bextradigit = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1239,"        if (a.exp < b.exp) {
",8,1,0,1,3,0,0,0,0,9,20,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1240,"            aextradigit = a.align(b.exp);
",6,0,0,1,2,0,4,0,0,11,29,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1242,"            bextradigit = b.align(a.exp);
",6,0,0,1,2,0,4,0,0,11,29,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1246,"        if (asign != bsign) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1247,"            if (asign == rsign) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1248,"                bextradigit = b.complement(bextradigit);
",2,0,0,1,2,0,6,0,0,9,40,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1250,"                aextradigit = a.complement(aextradigit);
",2,0,0,1,2,0,6,0,0,9,40,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1255,"        int rh = 0; /* acts as a carry */
",2,0,0,0,0,0,0,0,0,2,33,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1256,"        for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1257,"            final int r = a.mant[i]+b.mant[i]+rh;
",12,1,1,2,4,1,0,0,0,18,37,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1258,"            rh = r / RADIX;
",6,1,0,0,0,0,0,0,0,8,15,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1259,"            result.mant[i] = r - rh * RADIX;
",10,2,1,1,2,0,0,0,0,15,32,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1261,"        result.exp = a.exp;
",8,0,0,0,0,0,0,0,0,9,19,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1262,"        result.sign = rsign;
",6,0,0,0,0,0,0,0,0,7,20,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1267,"        if (rh != 0 && (asign == bsign)) {
",6,3,0,2,5,0,0,0,0,9,34,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1268,"            final int lostdigit = result.mant[0];
",6,0,0,1,2,1,0,0,0,7,37,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1269,"            result.shiftRight();
",0,0,0,1,2,0,4,0,0,4,20,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1270,"            result.mant[mant.length-1] = rh;
",10,1,0,1,2,0,0,0,0,12,32,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1271,"            final int excp = result.round(lostdigit);
",2,0,0,1,2,1,6,0,0,9,41,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1272,"            if (excp != 0) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1273,"                result = dotrap(excp, ADD_TRAP, x, result);
",2,0,0,1,2,0,10,0,0,13,43,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1278,"        for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1279,"            if (result.mant[mant.length-1] != 0) {
",8,2,0,2,5,0,0,0,0,10,38,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1280,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1282,"            result.shiftLeft();
",0,0,0,1,2,0,4,0,0,4,19,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1283,"            if (i == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1284,"                result.mant[0] = aextradigit+bextradigit;
",8,1,0,1,2,0,0,0,0,10,41,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1285,"                aextradigit = 0;
",2,0,0,0,0,0,0,0,0,3,16,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1286,"                bextradigit = 0;
",2,0,0,0,0,0,0,0,0,3,16,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1291,"        if (result.mant[mant.length-1] == 0) {
",8,2,0,2,5,0,0,0,0,10,38,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1292,"            result.exp = 0;
",4,0,0,0,0,0,0,0,0,5,15,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1294,"            if (asign != bsign) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1296,"                result.sign = 1;  // Per IEEE 854-1987 Section 6.3
",4,0,0,0,0,0,0,0,0,5,50,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1301,"        final int excp = result.round(aextradigit + bextradigit);
",6,1,0,1,2,1,4,0,0,12,57,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1302,"        if (excp != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1303,"            result = dotrap(excp, ADD_TRAP, x, result);
",2,0,0,1,2,0,10,0,0,13,43,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1306,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1313,"        Dfp result = newInstance(this);
",2,0,0,1,2,0,2,2,0,6,31,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1314,"        result.sign = (byte) - result.sign;
",8,0,0,1,2,0,0,0,0,10,35,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1315,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1323,"        return add(x.negate());
",0,0,0,2,4,1,6,0,0,6,23,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1331,"        boolean inc = false;
",2,0,0,0,0,0,0,0,0,3,20,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1332,"        switch (field.getRoundingMode()) {
",0,0,0,2,5,0,4,0,0,4,34,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1350,"                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even
",6,6,1,3,6,0,0,0,0,15,72,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1351,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1367,"        if (inc) {
",2,0,0,1,3,0,0,0,0,2,10,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1369,"            int rh = 1;
",2,0,0,0,0,0,0,0,0,2,11,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1370,"            for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1371,"                final int r = mant[i] + rh;
",4,1,1,1,2,1,0,0,0,10,27,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1372,"                rh = r / RADIX;
",6,1,0,0,0,0,0,0,0,8,15,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1373,"                mant[i] = r - rh * RADIX;
",6,2,1,1,2,0,0,0,0,13,25,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1376,"            if (rh != 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1383,"        if (exp < MIN_EXP) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1389,"        if (exp > MAX_EXP) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1395,"        if (n != 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1397,"            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
",4,0,0,1,2,0,4,0,0,8,46,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1398,"            return DfpField.FLAG_INEXACT;
",4,0,0,0,0,1,0,0,0,4,29,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1401,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1412,"        if (field.getRadixDigits() != x.field.getRadixDigits()) {
",4,1,0,3,7,0,6,0,0,11,57,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1419,"        Dfp result = newInstance(getZero());
",2,0,0,2,4,0,4,2,0,8,36,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1422,"        if (nans != FINITE || x.nans != FINITE) {
",10,3,0,1,3,0,0,0,0,13,41,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1459,"        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result
",6,1,0,2,4,0,0,0,0,7,86,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1461,"        for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1462,"            int rh = 0;  // acts as a carry
",2,0,0,0,0,0,0,0,0,2,31,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1463,"            for (int j=0; j<mant.length; j++) {
",10,1,0,1,3,0,0,0,0,12,35,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1464,"                int r = mant[i] * x.mant[j];    // multiply the 2 digits
",6,1,1,2,4,0,0,0,0,13,56,9,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1465,"                r = r + product[i+j] + rh;  // add to the product digit with carry in
",10,2,1,1,2,0,0,0,0,15,69,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1467,"                rh = r / RADIX;
",6,1,0,0,0,0,0,0,0,8,15,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1468,"                product[i+j] = r - rh * RADIX;
",10,3,1,1,2,0,0,0,0,16,30,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1470,"            product[i+mant.length] = rh;
",8,1,1,1,2,0,0,0,0,12,28,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1474,"        int md = mant.length * 2 - 1;  // default, in case result is zero
",6,2,0,0,0,0,0,0,0,8,65,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1475,"        for (int i = mant.length * 2 - 1; i >= 0; i--) {
",10,3,0,1,3,0,0,0,0,14,48,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1476,"            if (product[i] != 0) {
",0,1,1,2,5,0,0,0,0,5,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1477,"                md = i;
",4,0,0,0,0,0,0,0,0,5,7,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1478,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1483,"        for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1484,"            result.mant[mant.length - i - 1] = product[md - i];
",14,2,1,2,4,0,0,0,0,19,51,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1488,"        result.exp = exp + x.exp + md - 2 * mant.length + 1;
",16,4,0,0,0,0,0,0,0,21,52,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1489,"        result.sign = (byte)((sign == x.sign)?1:-1);
",10,1,0,3,6,0,0,0,0,13,44,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1491,"        if (result.mant[mant.length-1] == 0) {
",8,2,0,2,5,0,0,0,0,10,38,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1493,"            result.exp = 0;
",4,0,0,0,0,0,0,0,0,5,15,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1497,"        if (md > (mant.length-1)) {
",6,2,0,2,5,0,0,0,0,8,27,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1498,"            excp = result.round(product[md-mant.length]);
",8,1,1,2,4,0,4,0,0,16,45,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1503,"        if (excp != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1504,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);
",2,0,0,1,2,0,10,0,0,13,48,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1507,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1584,"        int trial=0;    // trial quotient digit
",2,0,0,0,0,0,0,0,0,2,39,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1587,"        int md=0;       // most sig digit in result
",2,0,0,0,0,0,0,0,0,2,43,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1591,"        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {
",4,1,0,3,7,0,6,0,0,11,63,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1598,"        Dfp result = newInstance(getZero());
",2,0,0,2,4,0,4,2,0,8,36,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1601,"        if (nans != FINITE || divisor.nans != FINITE) {
",10,3,0,1,3,0,0,0,0,13,47,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1632,"        if (divisor.mant[mant.length-1] == 0) {
",8,2,0,2,5,0,0,0,0,10,39,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1641,"        dividend = new int[mant.length+1];  // one extra digit needed
",6,1,0,1,2,0,0,0,0,8,61,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1642,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding
",6,1,0,1,2,0,0,0,0,8,93,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1643,"        remainder = new int[mant.length+1]; // one extra digit needed
",6,1,0,1,2,0,0,0,0,8,61,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1647,"        dividend[mant.length] = 0;
",4,0,1,1,2,0,0,0,0,7,26,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1648,"        quotient[mant.length] = 0;
",4,0,1,1,2,0,0,0,0,7,26,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1649,"        quotient[mant.length+1] = 0;
",4,1,1,1,2,0,0,0,0,8,28,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1650,"        remainder[mant.length] = 0;
",4,0,1,1,2,0,0,0,0,7,27,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1655,"        for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1656,"            dividend[i] = mant[i];
",0,0,1,2,4,0,0,0,0,9,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1657,"            quotient[i] = 0;
",0,0,1,1,2,0,0,0,0,5,16,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1658,"            remainder[i] = 0;
",0,0,1,1,2,0,0,0,0,5,17,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1662,"        nsqd = 0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1663,"        for (qd = mant.length+1; qd >= 0; qd--) {
",10,2,0,1,3,0,0,0,0,14,41,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1667,"            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];
",12,3,1,2,4,1,0,0,0,20,71,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1668,"            int min = divMsb       / (divisor.mant[mant.length-1]+1);
",12,3,0,2,4,0,0,0,0,15,57,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1669,"            int max = (divMsb + 1) / divisor.mant[mant.length-1];
",12,3,0,2,4,0,0,0,0,15,53,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1671,"            trialgood = false;
",2,0,0,0,0,0,0,0,0,4,18,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1672,"            while (!trialgood) {
",2,0,0,1,3,0,0,0,0,3,20,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1674,"                trial = (min+max)/2;
",6,2,0,1,2,0,0,0,0,9,20,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1677,"                int rh = 0;
",2,0,0,0,0,0,0,0,0,2,11,9,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1678,"                for (int i = 0; i < mant.length + 1; i++) {
",10,2,0,1,3,0,0,0,0,13,43,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1679,"                    int dm = (i<mant.length)?divisor.mant[i]:0;
",12,1,1,2,4,0,0,0,0,15,43,11,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1680,"                    final int r = (dm * trial) + rh;
",8,2,0,1,2,1,0,0,0,11,32,10,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1681,"                    rh = r / RADIX;
",6,1,0,0,0,0,0,0,0,8,15,10,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1682,"                    remainder[i] = r - rh * RADIX;
",6,2,1,1,2,0,0,0,0,13,30,10,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1686,"                rh = 1;  // carry in to aid the subtraction
",2,0,0,0,0,0,0,0,0,3,43,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1687,"                for (int i = 0; i < mant.length + 1; i++) {
",10,2,0,1,3,0,0,0,0,13,43,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1688,"                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;
",6,3,1,4,8,1,0,0,0,18,60,10,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1689,"                    rh = r / RADIX;
",6,1,0,0,0,0,0,0,0,8,15,10,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1690,"                    remainder[i] = r - rh * RADIX;
",6,2,1,1,2,0,0,0,0,13,30,10,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1694,"                if (rh == 0) {
",2,1,0,1,3,0,0,0,0,3,14,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1696,"                    max = trial-1;
",4,1,0,0,0,0,0,0,0,6,14,10,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1697,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1701,"                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];
",12,3,1,3,6,0,0,0,0,20,67,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1702,"                minadj = minadj / (divisor.mant[mant.length-1]+1);
",12,3,0,2,4,0,0,0,0,16,50,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1704,"                if (minadj >= 2) {
",2,1,0,1,3,0,0,0,0,3,18,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1705,"                    min = trial+minadj;  // update the minimum
",6,1,0,0,0,0,0,0,0,8,42,10,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1706,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1711,"                trialgood = false;  // assume false
",2,0,0,0,0,0,0,0,0,4,35,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1712,"                for (int i = mant.length - 1; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,44,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1713,"                    if (divisor.mant[i] > remainder[i]) {
",4,1,1,3,7,0,0,0,0,11,37,10,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1714,"                        trialgood = true;
",2,0,0,0,0,0,0,0,0,4,17,12,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1716,"                    if (divisor.mant[i] < remainder[i]) {
",4,1,1,3,7,0,0,0,0,11,37,10,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1717,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1721,"                if (remainder[mant.length] != 0) {
",4,1,1,2,5,0,0,0,0,7,34,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1722,"                    trialgood = false;
",2,0,0,0,0,0,0,0,0,4,18,10,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1725,"                if (trialgood == false) {
",2,1,0,1,3,0,0,0,0,4,25,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1726,"                    min = trial+1;
",4,1,0,0,0,0,0,0,0,6,14,10,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1728,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1731,"            quotient[qd] = trial;
",2,0,1,1,2,0,0,0,0,7,21,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1732,"            if (trial != 0 || nsqd != 0) {
",4,3,0,1,3,0,0,0,0,7,30,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1733,"                nsqd++;
",2,0,0,0,0,0,0,0,0,3,7,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1736,"            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {
",12,3,0,2,5,0,4,0,0,19,89,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1741,"            if (nsqd > mant.length) {
",6,1,0,1,3,0,0,0,0,7,25,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1743,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1747,"            dividend[0] = 0;
",0,0,1,1,2,0,0,0,0,3,16,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1748,"            for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1749,"                dividend[i + 1] = remainder[i];
",2,1,1,2,4,0,0,0,0,10,31,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1754,"        md = mant.length;  // default
",6,0,0,0,0,0,0,0,0,7,29,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1755,"        for (int i = mant.length + 1; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,44,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1756,"            if (quotient[i] != 0) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1757,"                md = i;
",4,0,0,0,0,0,0,0,0,5,7,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1758,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1763,"        for (int i=0; i<mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,35,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1764,"            result.mant[mant.length-i-1] = quotient[md-i];
",14,2,1,2,4,0,0,0,0,19,46,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1768,"        result.exp = exp - divisor.exp + md - mant.length;
",16,3,0,0,0,0,0,0,0,20,50,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1769,"        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);
",10,1,0,3,6,0,0,0,0,13,55,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1771,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero
",8,2,0,2,5,0,0,0,0,10,76,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1772,"            result.exp = 0;
",4,0,0,0,0,0,0,0,0,5,15,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1775,"        if (md > (mant.length-1)) {
",6,2,0,2,5,0,0,0,0,8,27,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1776,"            excp = result.round(quotient[md-mant.length]);
",8,1,1,2,4,0,4,0,0,16,46,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1781,"        if (excp != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1782,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);
",2,0,0,1,2,0,10,0,0,13,52,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1785,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1796,"        if (nans != FINITE) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1807,"        if (divisor == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1817,"        if (divisor < 0 || divisor >= RADIX) {
",6,3,0,1,3,0,0,0,0,9,38,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1825,"        Dfp result = newInstance(this);
",2,0,0,1,2,0,2,2,0,6,31,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1827,"        int rl = 0;
",2,0,0,0,0,0,0,0,0,2,11,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1828,"        for (int i = mant.length-1; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,42,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1829,"            final int r = rl*RADIX + result.mant[i];
",10,2,1,1,2,1,0,0,0,15,40,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1830,"            final int rh = r / divisor;
",6,1,0,0,0,1,0,0,0,8,27,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1831,"            rl = r - rh * divisor;
",8,2,0,0,0,0,0,0,0,11,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1832,"            result.mant[i] = rh;
",6,0,1,1,2,0,0,0,0,9,20,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1835,"        if (result.mant[mant.length-1] == 0) {
",8,2,0,2,5,0,0,0,0,10,38,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1837,"            result.shiftLeft();
",0,0,0,1,2,0,4,0,0,4,19,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1838,"            final int r = rl * RADIX;        // compute the next digit and put it in
",6,1,0,0,0,1,0,0,0,8,72,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1839,"            final int rh = r / divisor;
",6,1,0,0,0,1,0,0,0,8,27,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1840,"            rl = r - rh * divisor;
",8,2,0,0,0,0,0,0,0,11,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1841,"            result.mant[0] = rh;
",6,0,0,1,2,0,0,0,0,7,20,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1844,"        final int excp = result.round(rl * RADIX / divisor);  // do the rounding
",8,2,0,1,2,1,4,0,0,15,72,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1845,"        if (excp != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1846,"            result = dotrap(excp, DIVIDE_TRAP, result, result);
",2,0,0,1,2,0,10,0,0,13,51,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1849,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1859,"        if (nans == FINITE && mant[mant.length-1] == 0) {
",8,4,1,2,5,0,0,0,0,14,49,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1864,"        if (nans != FINITE) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1884,"        if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1895,"        Dfp x = newInstance(this);
",2,0,0,1,2,0,2,2,0,6,26,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1898,"        if (x.exp < -1 || x.exp > 1) {
",8,3,0,1,3,0,0,0,0,12,30,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1903,"        switch (x.mant[mant.length-1] / 2000) {
",8,2,0,2,5,0,0,0,0,10,39,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1905,"                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;
",16,4,0,2,4,0,0,0,0,21,50,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1906,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1914,"                x.mant[mant.length-1] = 3000;
",8,1,0,1,2,0,0,0,0,10,29,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1917,"        Dfp dx = newInstance(x);
",2,0,0,1,2,0,4,2,0,8,24,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1922,"        Dfp px  = getZero();
",2,0,0,1,2,0,2,2,0,6,20,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1923,"        Dfp ppx = getZero();
",2,0,0,1,2,0,2,2,0,6,20,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1924,"        while (x.unequal(px)) {
",0,0,0,2,5,0,6,0,0,6,23,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1925,"            dx = newInstance(x);
",2,0,0,1,2,0,4,0,0,7,20,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1926,"            dx.sign = -1;
",4,0,0,0,0,0,0,0,0,6,13,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1927,"            dx = dx.add(this.divide(x));
",2,0,0,2,4,0,8,0,0,11,28,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1928,"            dx = dx.divide(2);
",2,0,0,1,2,0,4,0,0,7,18,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1929,"            ppx = px;
",4,0,0,0,0,0,0,0,0,5,9,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1930,"            px = x;
",4,0,0,0,0,0,0,0,0,5,7,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1931,"            x = x.add(dx);
",2,0,0,1,2,0,6,0,0,9,14,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1933,"            if (x.equals(ppx)) {
",0,0,0,2,5,0,6,0,0,6,20,7,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1940,"            if (dx.mant[mant.length-1] == 0) {
",8,2,0,2,5,0,0,0,0,10,34,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1941,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1945,"        return x;
",2,0,0,0,0,1,0,0,0,2,9,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1954,"        if (nans != FINITE) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1963,"        if (exp > mant.length || exp < -1) {
",8,3,0,1,3,0,0,0,0,12,36,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1967,"        return dfp2string();
",0,0,0,1,2,1,2,0,0,2,20,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2056,"        char buffer[] = new char[mant.length*4 + 20];
",6,2,0,2,4,0,0,0,0,8,45,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2057,"        int p = 1;
",2,0,0,0,0,0,0,0,0,2,10,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2059,"        int e = exp;
",4,0,0,0,0,0,0,0,0,4,12,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2060,"        boolean pointInserted = false;
",2,0,0,0,0,0,0,0,0,3,30,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2062,"        buffer[0] = ' ';
",0,0,1,1,2,0,0,0,0,4,16,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2064,"        if (e <= 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2065,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2066,"            buffer[p++] = '.';
",2,0,1,1,2,0,0,0,0,7,18,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2067,"            pointInserted = true;
",2,0,0,0,0,0,0,0,0,4,21,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2070,"        while (e < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2078,"        for (int i = mant.length - 1; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,44,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2079,"            buffer[p++] = (char) ((mant[i] / 1000) + '0');
",2,2,1,5,10,0,0,0,0,13,46,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2080,"            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');
",2,3,1,6,12,0,0,0,0,14,52,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2081,"            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');
",2,3,1,6,12,0,0,0,0,14,51,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2082,"            buffer[p++] = (char) (((mant[i]) % 10) + '0');
",2,2,1,6,12,0,0,0,0,13,46,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2083,"            if (--e == 0) {
",2,1,0,1,3,0,0,0,0,4,15,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2084,"                buffer[p++] = '.';
",2,0,1,1,2,0,0,0,0,7,18,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2085,"                pointInserted = true;
",2,0,0,0,0,0,0,0,0,4,21,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2089,"        while (e > 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2097,"        if (!pointInserted) {
",2,0,0,1,3,0,0,0,0,3,21,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2103,"        q = 1;
",2,0,0,0,0,0,0,0,0,3,6,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2104,"        while (buffer[q] == '0') {
",0,1,1,2,5,0,0,0,0,6,26,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2105,"            q++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2107,"        if (buffer[q] == '.') {
",0,1,1,2,5,0,0,0,0,6,23,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2108,"            q--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2112,"        while (buffer[p-1] == '0') {
",2,2,1,2,5,0,0,0,0,7,28,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2113,"            p--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2117,"        if (sign < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2121,"        return new String(buffer, q, p - q);
",8,1,0,1,2,1,0,2,0,11,36,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2133,"        Dfp def = result;
",4,0,0,0,0,0,0,2,0,6,17,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2135,"        switch (type) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2184,"            default: def = result; break;
",4,0,0,0,0,0,0,0,0,5,29,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2187,"        return trap(type, what, oper, def, result);
",0,0,0,1,2,1,12,0,0,12,43,5,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2203,"        return def;
",2,0,0,0,0,1,0,0,0,2,11,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1000,"            switch (rmode) {
",2,0,0,1,3,0,0,0,0,2,16,6,0.03571,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,131,"    public MersenneTwister(long seed) {
",4,0,0,1,3,1,0,0,0,5,35,2,0.03571,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,132,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.03571,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,133,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.03571,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,134,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,35,"    public BitsStreamGenerator() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.03333,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,36,"        nextGaussian = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,26,4,0.03333,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };
",2,0,0,2,4,3,0,0,0,5,55,2,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,144,"        long longMT = seed;
",4,0,0,0,0,0,0,0,0,4,19,5,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,145,"        mt[0]= (int) longMT;
",2,0,1,2,4,0,0,0,0,5,20,4,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,146,"        for (mti = 1; mti < N; ++mti) {
",8,1,0,1,3,0,0,0,0,11,31,4,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,149,"            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;
",8,5,0,3,6,0,0,0,0,14,71,6,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,150,"            mt[mti]= (int) longMT;
",2,0,1,2,4,0,0,0,0,7,22,6,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,152,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,163,"        if (seed == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,168,"        setSeed(19650218);
",0,0,0,1,2,0,2,0,0,2,18,5,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,169,"        int i = 1;
",2,0,0,0,0,0,0,0,0,2,10,5,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,170,"        int j = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,172,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {
",10,1,0,2,5,0,6,0,0,18,57,4,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,173,"            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
",2,3,1,5,10,0,0,0,0,13,73,7,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,174,"            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
",6,5,1,5,10,0,0,0,0,15,73,7,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,175,"            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear
",10,5,1,5,10,0,0,0,0,19,76,7,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,176,"            mt[i]   = (int) (l & 0xffffffffl);
",2,1,1,3,6,0,0,0,0,8,34,6,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,177,"            i++; j++;
",4,0,0,0,0,0,0,0,0,6,9,6,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,178,"            if (i >= N) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,179,"                mt[0] = mt[N - 1];
",2,1,1,2,4,0,0,0,0,8,18,8,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,180,"                i = 1;
",2,0,0,0,0,0,0,0,0,3,6,8,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,182,"            if (j >= seed.length) {
",6,1,0,1,3,0,0,0,0,7,23,6,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,183,"                j = 0;
",2,0,0,0,0,0,0,0,0,3,6,8,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,187,"        for (int k = N - 1; k != 0; k--) {
",8,2,0,1,3,0,0,0,0,11,34,4,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,188,"            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
",2,3,1,5,10,0,0,0,0,13,73,7,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,189,"            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
",6,5,1,5,10,0,0,0,0,15,73,7,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,190,"            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear
",10,5,0,4,8,0,0,0,0,15,69,7,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,191,"            mt[i]   = (int) (l & 0xffffffffL);
",2,1,1,3,6,0,0,0,0,8,34,6,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,192,"            i++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,193,"            if (i >= N) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,194,"                mt[0] = mt[N - 1];
",2,1,1,2,4,0,0,0,0,8,18,8,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,195,"                i = 1;
",2,0,0,0,0,0,0,0,0,3,6,8,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,199,"        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array
",0,0,1,1,2,0,0,0,0,3,64,4,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,201,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,210,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });
",4,2,0,7,14,0,2,0,0,8,71,5,0.03333,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,211,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3464,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00602,0
defect4j,math,org/apache/commons/math/util/FastMath,59,35,"    private static final double EXP_INT_TABLE_A[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,40,"    private static final double EXP_INT_TABLE_B[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,45,"    private static final double EXP_FRAC_TABLE_A[] = new double[1025];
",2,0,0,2,4,3,0,0,0,5,66,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,50,"    private static final double EXP_FRAC_TABLE_B[] = new double[1025];
",2,0,0,2,4,3,0,0,0,5,66,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,53,"    private static final double FACT[] = new double[20];
",2,0,0,2,4,3,0,0,0,5,52,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,56,"    private static final double LN_MANT[][] = new double[1024][];
",2,0,0,4,8,3,0,0,0,5,61,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,65,"    private static final double LN_SPLIT_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,85,"    private static final double LN_QUICK_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,98,"    private static final double LN_HI_PREC_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,51,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,108,"    private static final double SINE_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,60,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,111,"    private static final double SINE_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,60,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,114,"    private static final double COSINE_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,62,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,117,"    private static final double COSINE_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,62,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,120,"    private static final double TANGENT_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,63,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,123,"    private static final double TANGENT_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,63,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,126,"    private static long RECIP_2PI[] = new long[] {
",2,0,0,2,5,2,0,0,0,4,46,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,147,"    private static long PI_O_4_BITS[] = new long[] {
",2,0,0,2,5,2,0,0,0,4,48,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};
",2,0,0,2,4,3,0,0,0,5,127,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,
",2,0,0,1,3,3,0,0,0,5,61,2,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,169,"        FACT[0] = 1.0;
",0,0,1,1,2,0,0,0,0,3,14,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,170,"        for (i = 1; i < 20; i++) {
",6,1,0,1,3,0,0,0,0,9,26,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,171,"            FACT[i] = FACT[i-1] * i;
",4,2,1,2,4,0,0,0,0,13,24,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,174,"        double tmp[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,29,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,175,"        double recip[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,31,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,178,"        for (i = 0; i < 750; i++) {
",6,1,0,1,3,0,0,0,0,9,27,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,179,"            expint(i, tmp);
",0,0,0,1,2,0,6,0,0,6,15,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,180,"            EXP_INT_TABLE_A[i+750] = tmp[0];
",2,1,1,2,4,0,0,0,0,8,32,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,181,"            EXP_INT_TABLE_B[i+750] = tmp[1];
",2,1,1,2,4,0,0,0,0,8,32,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,183,"            if (i != 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,185,"                splitReciprocal(tmp, recip);
",0,0,0,1,2,0,6,0,0,6,28,9,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,186,"                EXP_INT_TABLE_A[750-i] = recip[0];
",2,1,1,2,4,0,0,0,0,8,34,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,187,"                EXP_INT_TABLE_B[750-i] = recip[1];
",2,1,1,2,4,0,0,0,0,8,34,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,192,"        for (i = 0; i < 1025; i++) {
",6,1,0,1,3,0,0,0,0,9,28,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,193,"            slowexp(i/1024.0, tmp);
",2,1,0,1,2,0,4,0,0,7,23,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,194,"            EXP_FRAC_TABLE_A[i] = tmp[0];
",0,0,1,2,4,0,0,0,0,7,29,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,195,"            EXP_FRAC_TABLE_B[i] = tmp[1];
",0,0,1,2,4,0,0,0,0,7,29,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,199,"        for (i = 0; i < 1024; i++) {
",6,1,0,1,3,0,0,0,0,9,28,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,200,"            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );
",4,2,0,4,8,0,4,0,0,10,79,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,201,"            LN_MANT[i] = slowLog(d);
",0,0,1,2,4,0,4,0,0,9,24,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,205,"        buildSinCosTables();
",0,0,0,1,2,0,2,0,0,2,20,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,206,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,911,"        final double xs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,912,"        final double ys[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,913,"        final double facts[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,37,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,914,"        final double as[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,915,"        split(x, xs);
",0,0,0,1,2,0,6,0,0,6,13,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,916,"        ys[0] = ys[1] = 0.0;
",0,0,1,2,4,0,0,0,0,6,20,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,918,"        for (int i = 19; i >= 0; i--) {
",6,1,0,1,3,0,0,0,0,8,31,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,919,"            splitMult(xs, ys, as);
",0,0,0,1,2,0,8,0,0,8,22,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,920,"            ys[0] = as[0];
",0,0,1,2,4,0,0,0,0,5,14,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,921,"            ys[1] = as[1];
",0,0,1,2,4,0,0,0,0,5,14,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,923,"            split(FACT[i], as);
",0,0,1,2,4,0,4,0,0,8,19,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,924,"            splitReciprocal(as, facts);
",0,0,0,1,2,0,6,0,0,6,27,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,926,"            splitAdd(ys, facts, as);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,927,"            ys[0] = as[0];
",0,0,1,2,4,0,0,0,0,5,14,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,928,"            ys[1] = as[1];
",0,0,1,2,4,0,0,0,0,5,14,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,931,"        if (result != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,932,"            result[0] = ys[0];
",0,0,1,2,4,0,0,0,0,5,18,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,933,"            result[1] = ys[1];
",0,0,1,2,4,0,0,0,0,5,18,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,936,"        return ys[0] + ys[1];
",0,1,1,2,4,1,0,0,0,5,21,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,945,"        if (d < 8e298 && d > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,946,"            final double a = d * 1073741824.0;
",4,1,0,0,0,1,0,0,0,6,34,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,947,"            split[0] = (d + a) - a;
",6,2,1,2,4,0,0,0,0,11,23,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,948,"            split[1] = d - split[0];
",2,1,1,2,4,0,0,0,0,8,24,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,949,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,954,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,961,"        final double c = a[0] + a[1];
",2,1,1,2,4,1,0,0,0,8,29,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,962,"        final double d = -(c - a[0] - a[1]);
",4,1,1,3,6,1,0,0,0,11,36,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,964,"        if (c < 8e298 && c > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,965,"            double z = c * 1073741824.0;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,966,"            a[0] = (c + z) - z;
",6,2,1,2,4,0,0,0,0,11,19,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,967,"            a[1] = c - a[0] + d;
",4,2,1,2,4,0,0,0,0,11,20,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,968,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,969,"            double z = c * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,42,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,970,"            a[0] = (c + z - c) * 1073741824.0;
",6,3,1,2,4,0,0,0,0,12,34,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,971,"            a[1] = c - a[0] + d;
",4,2,1,2,4,0,0,0,0,11,20,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,973,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,981,"        ans[0] = a[0] * b[0];
",0,1,1,3,6,0,0,0,0,8,21,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,982,"        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];
",0,5,1,7,14,0,0,0,0,20,49,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,985,"        resplit(ans);
",0,0,0,1,2,0,4,0,0,4,13,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,986,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,994,"        ans[0] = a[0] + b[0];
",0,1,1,3,6,0,0,0,0,8,21,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,995,"        ans[1] = a[1] + b[1];
",0,1,1,3,6,0,0,0,0,8,21,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,997,"        resplit(ans);
",0,0,0,1,2,0,4,0,0,4,13,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,998,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1019,"        final double b = 1.0/4194304.0;
",2,1,0,0,0,1,0,0,0,4,31,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1020,"        final double a = 1.0 - b;
",4,1,0,0,0,1,0,0,0,6,25,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1022,"        if (in[0] == 0.0) {
",0,1,1,2,5,0,0,0,0,3,19,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1027,"        result[0] = a / in[0];
",2,1,1,2,4,0,0,0,0,8,22,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1028,"        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);
",4,7,1,9,18,0,0,0,0,26,60,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1030,"        if (result[1] != result[1]) { // can happen if result[1] is NAN
",0,1,1,4,9,0,0,0,0,5,63,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1031,"            result[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1035,"        resplit(result);
",0,0,0,1,2,0,4,0,0,4,16,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1037,"        for (int i = 0; i < 2; i++) {
",6,1,0,1,3,0,0,0,0,8,29,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1039,"            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -
",2,6,1,4,8,0,0,0,0,16,58,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1042,"            err = err * (result[0] + result[1]);
",4,2,1,3,6,0,0,0,0,11,36,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1044,"            result[1] += err;
",2,0,1,1,2,0,0,0,0,5,17,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1046,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1054,"        final double xs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1055,"        final double ys[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1056,"        final double zs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1059,"        split(a[0], xs);
",0,0,1,2,4,0,4,0,0,6,16,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1060,"        split(b[0], ys);
",0,0,1,2,4,0,4,0,0,6,16,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1061,"        splitMult(xs, ys, zs);
",0,0,0,1,2,0,8,0,0,8,22,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1063,"        result[0] = zs[0];
",0,0,1,2,4,0,0,0,0,5,18,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1064,"        result[1] = zs[1];
",0,0,1,2,4,0,0,0,0,5,18,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1067,"        split(b[1], ys);
",0,0,1,2,4,0,4,0,0,6,16,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1068,"        splitMult(xs, ys, zs);
",0,0,0,1,2,0,8,0,0,8,22,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1070,"        double tmp = result[0] + zs[0];
",2,1,1,2,4,0,0,0,0,7,31,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1071,"        result[1] = result[1] - (tmp - result[0] - zs[0]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1072,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1073,"        tmp = result[0] + zs[1];
",2,1,1,2,4,0,0,0,0,8,24,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1074,"        result[1] = result[1] - (tmp - result[0] - zs[1]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1075,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1078,"        split(a[1], xs);
",0,0,1,2,4,0,4,0,0,6,16,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1079,"        split(b[0], ys);
",0,0,1,2,4,0,4,0,0,6,16,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1080,"        splitMult(xs, ys, zs);
",0,0,0,1,2,0,8,0,0,8,22,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1082,"        tmp = result[0] + zs[0];
",2,1,1,2,4,0,0,0,0,8,24,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1083,"        result[1] = result[1] - (tmp - result[0] - zs[0]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1084,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1085,"        tmp = result[0] + zs[1];
",2,1,1,2,4,0,0,0,0,8,24,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1086,"        result[1] = result[1] - (tmp - result[0] - zs[1]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1087,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1090,"        split(a[1], xs);
",0,0,1,2,4,0,4,0,0,6,16,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1091,"        split(b[1], ys);
",0,0,1,2,4,0,4,0,0,6,16,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1092,"        splitMult(xs, ys, zs);
",0,0,0,1,2,0,8,0,0,8,22,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1094,"        tmp = result[0] + zs[0];
",2,1,1,2,4,0,0,0,0,8,24,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1095,"        result[1] = result[1] - (tmp - result[0] - zs[0]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1096,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1097,"        tmp = result[0] + zs[1];
",2,1,1,2,4,0,0,0,0,8,24,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1098,"        result[1] = result[1] - (tmp - result[0] - zs[1]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1099,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1100,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1109,"        final double xs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1110,"        final double as[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1111,"        final double ys[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1120,"        xs[0] = 2.718281828459045;
",0,0,1,1,2,0,0,0,0,3,26,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1121,"        xs[1] = 1.4456468917292502E-16;
",0,0,1,1,2,0,0,0,0,3,31,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1123,"        split(1.0, ys);
",0,0,0,1,2,0,4,0,0,4,15,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1125,"        while (p > 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1126,"            if ((p & 1) != 0) {
",2,2,0,2,5,0,0,0,0,4,19,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1127,"                quadMult(ys, xs, as);
",0,0,0,1,2,0,8,0,0,8,21,9,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1128,"                ys[0] = as[0]; ys[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1131,"            quadMult(xs, xs, as);
",0,0,0,1,2,0,8,0,0,8,21,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1132,"            xs[0] = as[0]; xs[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1134,"            p >>= 1;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1137,"        if (result != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1138,"            result[0] = ys[0];
",0,0,1,2,4,0,0,0,0,5,18,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1139,"            result[1] = ys[1];
",0,0,1,2,4,0,0,0,0,5,18,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1141,"            resplit(result);
",0,0,0,1,2,0,4,0,0,4,16,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1144,"        return ys[0] + ys[1];
",0,1,1,2,4,1,0,0,0,5,21,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1627,"        double x[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,27,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1628,"        double x2[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1629,"        double y[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,27,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1630,"        double a[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,27,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1632,"        split(xi, x);
",0,0,0,1,2,0,6,0,0,6,13,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1635,"        x[0] += 1.0;
",0,0,1,1,2,0,0,0,0,3,12,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1636,"        resplit(x);
",0,0,0,1,2,0,4,0,0,4,11,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1637,"        splitReciprocal(x, a);
",0,0,0,1,2,0,6,0,0,6,22,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1638,"        x[0] -= 2.0;
",0,0,1,1,2,0,0,0,0,3,12,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1639,"        resplit(x);
",0,0,0,1,2,0,4,0,0,4,11,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1640,"        splitMult(x, a, y);
",0,0,0,1,2,0,8,0,0,8,19,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1641,"        x[0] = y[0];
",0,0,1,2,4,0,0,0,0,5,12,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1642,"        x[1] = y[1];
",0,0,1,2,4,0,0,0,0,5,12,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1645,"        splitMult(x, x, x2);
",0,0,0,1,2,0,8,0,0,8,20,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1651,"        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];
",4,1,1,3,6,0,0,0,0,10,48,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1652,"        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];
",4,1,1,3,6,0,0,0,0,10,48,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1654,"        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,51,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1655,"            splitMult(y, x2, a);
",0,0,0,1,2,0,8,0,0,8,20,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1656,"            y[0] = a[0];
",0,0,1,2,4,0,0,0,0,5,12,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1657,"            y[1] = a[1];
",0,0,1,2,4,0,0,0,0,5,12,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1658,"            splitAdd(y, LN_SPLIT_COEF[i], a);
",0,0,1,2,4,0,6,0,0,10,33,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1659,"            y[0] = a[0];
",0,0,1,2,4,0,0,0,0,5,12,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1660,"            y[1] = a[1];
",0,0,1,2,4,0,0,0,0,5,12,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1663,"        splitMult(y, x, a);
",0,0,0,1,2,0,8,0,0,8,19,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1664,"        y[0] = a[0];
",0,0,1,2,4,0,0,0,0,5,12,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1665,"        y[1] = a[1];
",0,0,1,2,4,0,0,0,0,5,12,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1667,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1677,"        final double xs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1678,"        final double ys[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1679,"        final double facts[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,37,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1680,"        final double as[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1681,"        split(x, xs);
",0,0,0,1,2,0,6,0,0,6,13,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1682,"        ys[0] = ys[1] = 0.0;
",0,0,1,2,4,0,0,0,0,6,20,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1684,"        for (int i = 19; i >= 0; i--) {
",6,1,0,1,3,0,0,0,0,8,31,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1685,"            splitMult(xs, ys, as);
",0,0,0,1,2,0,8,0,0,8,22,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1686,"            ys[0] = as[0]; ys[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1688,"            if ( (i & 1) == 0) {
",2,2,0,2,5,0,0,0,0,4,20,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1689,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1692,"            split(FACT[i], as);
",0,0,1,2,4,0,4,0,0,8,19,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1693,"            splitReciprocal(as, facts);
",0,0,0,1,2,0,6,0,0,6,27,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1695,"            if ( (i & 2) != 0 ) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1696,"                facts[0] = -facts[0];
",0,0,1,2,4,0,0,0,0,6,21,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1697,"                facts[1] = -facts[1];
",0,0,1,2,4,0,0,0,0,6,21,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1700,"            splitAdd(ys, facts, as);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1701,"            ys[0] = as[0]; ys[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1704,"        if (result != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1705,"            result[0] = ys[0];
",0,0,1,2,4,0,0,0,0,5,18,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1706,"            result[1] = ys[1];
",0,0,1,2,4,0,0,0,0,5,18,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1709,"        return ys[0] + ys[1];
",0,1,1,2,4,1,0,0,0,5,21,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1720,"        final double xs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1721,"        final double ys[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1722,"        final double facts[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,37,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1723,"        final double as[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1724,"        split(x, xs);
",0,0,0,1,2,0,6,0,0,6,13,5,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1725,"        ys[0] = ys[1] = 0.0;
",0,0,1,2,4,0,0,0,0,6,20,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1727,"        for (int i = 19; i >= 0; i--) {
",6,1,0,1,3,0,0,0,0,8,31,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1728,"            splitMult(xs, ys, as);
",0,0,0,1,2,0,8,0,0,8,22,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1729,"            ys[0] = as[0]; ys[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1731,"            if ( (i & 1) != 0) {
",2,2,0,2,5,0,0,0,0,4,20,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1732,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1735,"            split(FACT[i], as);
",0,0,1,2,4,0,4,0,0,8,19,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1736,"            splitReciprocal(as, facts);
",0,0,0,1,2,0,6,0,0,6,27,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1738,"            if ( (i & 2) != 0 ) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1739,"                facts[0] = -facts[0];
",0,0,1,2,4,0,0,0,0,6,21,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1740,"                facts[1] = -facts[1];
",0,0,1,2,4,0,0,0,0,6,21,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1743,"            splitAdd(ys, facts, as);
",0,0,0,1,2,0,8,0,0,8,24,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1744,"            ys[0] = as[0]; ys[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1747,"        if (result != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1748,"            result[0] = ys[0];
",0,0,1,2,4,0,0,0,0,5,18,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1749,"            result[1] = ys[1];
",0,0,1,2,4,0,0,0,0,5,18,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1752,"        return ys[0] + ys[1];
",0,1,1,2,4,1,0,0,0,5,21,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1758,"        final double result[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1761,"        for (int i = 0; i < 7; i++) {
",6,1,0,1,3,0,0,0,0,8,29,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1762,"            double x = i / 8.0;
",4,1,0,0,0,0,0,0,0,5,19,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1764,"            slowSin(x, result);
",0,0,0,1,2,0,6,0,0,6,19,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1765,"            SINE_TABLE_A[i] = result[0];
",0,0,1,2,4,0,0,0,0,7,28,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1766,"            SINE_TABLE_B[i] = result[1];
",0,0,1,2,4,0,0,0,0,7,28,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1768,"            slowCos(x, result);
",0,0,0,1,2,0,6,0,0,6,19,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1769,"            COSINE_TABLE_A[i] = result[0];
",0,0,1,2,4,0,0,0,0,7,30,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1770,"            COSINE_TABLE_B[i] = result[1];
",0,0,1,2,4,0,0,0,0,7,30,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1774,"        for (int i = 7; i < 14; i++) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1775,"            double xs[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1776,"            double ys[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1777,"            double as[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1778,"            double bs[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1779,"            double temps[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,31,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1781,"            if ( (i & 1) == 0) {
",2,2,0,2,5,0,0,0,0,4,20,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1783,"                xs[0] = SINE_TABLE_A[i/2];
",2,1,1,2,4,0,0,0,0,8,26,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1784,"                xs[1] = SINE_TABLE_B[i/2];
",2,1,1,2,4,0,0,0,0,8,26,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1785,"                ys[0] = COSINE_TABLE_A[i/2];
",2,1,1,2,4,0,0,0,0,8,28,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1786,"                ys[1] = COSINE_TABLE_B[i/2];
",2,1,1,2,4,0,0,0,0,8,28,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1789,"                splitMult(xs, ys, result);
",0,0,0,1,2,0,8,0,0,8,26,9,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1790,"                SINE_TABLE_A[i] = result[0] * 2.0;
",0,1,1,2,4,0,0,0,0,8,34,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1791,"                SINE_TABLE_B[i] = result[1] * 2.0;
",0,1,1,2,4,0,0,0,0,8,34,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1794,"                splitMult(ys, ys, as);
",0,0,0,1,2,0,8,0,0,8,22,9,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1795,"                splitMult(xs, xs, temps);
",0,0,0,1,2,0,8,0,0,8,25,9,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1796,"                temps[0] = -temps[0];
",0,0,1,2,4,0,0,0,0,6,21,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1797,"                temps[1] = -temps[1];
",0,0,1,2,4,0,0,0,0,6,21,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1798,"                splitAdd(as, temps, result);
",0,0,0,1,2,0,8,0,0,8,28,9,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1799,"                COSINE_TABLE_A[i] = result[0];
",0,0,1,2,4,0,0,0,0,7,30,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1800,"                COSINE_TABLE_B[i] = result[1];
",0,0,1,2,4,0,0,0,0,7,30,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1802,"                xs[0] = SINE_TABLE_A[i/2];
",2,1,1,2,4,0,0,0,0,8,26,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1803,"                xs[1] = SINE_TABLE_B[i/2];
",2,1,1,2,4,0,0,0,0,8,26,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1804,"                ys[0] = COSINE_TABLE_A[i/2];
",2,1,1,2,4,0,0,0,0,8,28,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1805,"                ys[1] = COSINE_TABLE_B[i/2];
",2,1,1,2,4,0,0,0,0,8,28,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1806,"                as[0] = SINE_TABLE_A[i/2+1];
",2,2,1,2,4,0,0,0,0,9,28,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1807,"                as[1] = SINE_TABLE_B[i/2+1];
",2,2,1,2,4,0,0,0,0,9,28,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1808,"                bs[0] = COSINE_TABLE_A[i/2+1];
",2,2,1,2,4,0,0,0,0,9,30,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1809,"                bs[1] = COSINE_TABLE_B[i/2+1];
",2,2,1,2,4,0,0,0,0,9,30,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1812,"                splitMult(xs, bs, temps);
",0,0,0,1,2,0,8,0,0,8,25,9,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1813,"                splitMult(ys, as, result);
",0,0,0,1,2,0,8,0,0,8,26,9,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1814,"                splitAdd(result, temps, result);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1815,"                SINE_TABLE_A[i] = result[0];
",0,0,1,2,4,0,0,0,0,7,28,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1816,"                SINE_TABLE_B[i] = result[1];
",0,0,1,2,4,0,0,0,0,7,28,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1819,"                splitMult(ys, bs, result);
",0,0,0,1,2,0,8,0,0,8,26,9,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1820,"                splitMult(xs, as, temps);
",0,0,0,1,2,0,8,0,0,8,25,9,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1821,"                temps[0] = -temps[0];
",0,0,1,2,4,0,0,0,0,6,21,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1822,"                temps[1] = -temps[1];
",0,0,1,2,4,0,0,0,0,6,21,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1823,"                splitAdd(result, temps, result);
",0,0,0,1,2,0,8,0,0,8,32,9,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1824,"                COSINE_TABLE_A[i] = result[0];
",0,0,1,2,4,0,0,0,0,7,30,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1825,"                COSINE_TABLE_B[i] = result[1];
",0,0,1,2,4,0,0,0,0,7,30,8,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1830,"        for (int i = 0; i < 14; i++) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1831,"            double xs[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1832,"            double ys[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1833,"            double as[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1835,"            as[0] = COSINE_TABLE_A[i];
",0,0,1,2,4,0,0,0,0,7,26,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1836,"            as[1] = COSINE_TABLE_B[i];
",0,0,1,2,4,0,0,0,0,7,26,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1838,"            splitReciprocal(as, ys);
",0,0,0,1,2,0,6,0,0,6,24,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1840,"            xs[0] = SINE_TABLE_A[i];
",0,0,1,2,4,0,0,0,0,7,24,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1841,"            xs[1] = SINE_TABLE_B[i];
",0,0,1,2,4,0,0,0,0,7,24,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1843,"            splitMult(xs, ys, as);
",0,0,0,1,2,0,8,0,0,8,22,7,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1845,"            TANGENT_TABLE_A[i] = as[0];
",0,0,1,2,4,0,0,0,0,7,27,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1846,"            TANGENT_TABLE_B[i] = as[1];
",0,0,1,2,4,0,0,0,0,7,27,6,0.00071,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1849,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00071,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,259,"        rMode = mode;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,260,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,281,"        return ieeeFlags;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,295,"        ieeeFlags = 0;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,296,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,310,"        ieeeFlags = flags & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);
",14,2,0,1,2,0,0,0,0,17,99,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,311,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,335,"        return new Dfp(this);
",0,0,0,1,2,1,0,2,0,2,21,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,343,"        return new Dfp(this, x);
",2,0,0,1,2,1,0,2,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,351,"        return new Dfp(this, x);
",2,0,0,1,2,1,0,2,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,359,"        return new Dfp(this, x);
",2,0,0,1,2,1,0,2,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,367,"        return new Dfp(this, x);
",2,0,0,1,2,1,0,2,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,375,"        return new Dfp(d);
",2,0,0,1,2,1,0,2,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,383,"        return new Dfp(this, s);
",2,0,0,1,2,1,0,2,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,393,"        return new Dfp(this, sign, nans);
",4,0,0,1,2,1,0,2,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,407,"        return one;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,414,"        return two;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,421,"        return sqr2;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,428,"        return sqr2Split.clone();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,435,"        return sqr2Reciprocal;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,442,"        return sqr3;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,449,"        return sqr3Reciprocal;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,456,"        return pi;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,463,"        return piSplit.clone();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,470,"        return e;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,477,"        return eSplit.clone();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,484,"        return ln2;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,491,"        return ln2Split.clone();
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,498,"        return ln5;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,505,"        return ln5Split.clone();
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,512,"        return ln10;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,26,"public class DfpField implements Field<Dfp> {
",2,0,0,0,1,1,0,4,0,7,45,1,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,181,"    protected Dfp(final DfpField field) {
",4,0,0,1,3,2,0,2,0,8,37,2,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,182,"        mant = new int[field.getRadixDigits()];
",2,0,0,2,4,0,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,183,"        sign = 1;
",2,0,0,0,0,0,0,0,0,3,9,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,184,"        exp = 0;
",2,0,0,0,0,0,0,0,0,3,8,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,185,"        nans = FINITE;
",4,0,0,0,0,0,0,0,0,5,14,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,186,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,187,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,194,"        this(field, (long) x);
",4,0,0,2,4,0,0,0,0,4,22,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,195,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,220,"            isLongMin = true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,221,"            ++x;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,243,"            for (int i = 0; i < mant.length - 1; i++) {
",10,2,0,1,3,0,0,0,0,13,43,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,244,"                if (mant[i] != 0) {
",0,1,1,2,5,0,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,245,"                    mant[i]++;
",0,0,1,1,2,0,0,0,0,5,10,10,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,246,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,256,"    protected Dfp(final DfpField field, double x) {
",6,0,0,1,3,2,0,2,0,10,47,2,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,259,"        mant = new int[field.getRadixDigits()];
",2,0,0,2,4,0,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,260,"        sign = 1;
",2,0,0,0,0,0,0,0,0,3,9,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,261,"        exp = 0;
",2,0,0,0,0,0,0,0,0,3,8,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,262,"        nans = FINITE;
",4,0,0,0,0,0,0,0,0,5,14,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,263,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,265,"        long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,266,"        long mantissa = bits & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,267,"        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;
",4,3,0,3,6,0,0,0,0,7,65,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,269,"        if (exponent == -1023) {
",2,1,0,1,3,0,0,0,0,4,24,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,271,"            if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,272,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,275,"            exponent++;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,278,"            while ( (mantissa & 0x0010000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,48,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,279,"                exponent--;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,280,"                mantissa <<= 1;
",2,0,0,0,0,0,0,0,0,3,15,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,282,"            mantissa &= 0x000fffffffffffffL;
",2,0,0,0,0,0,0,0,0,3,32,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,285,"        if (exponent == 1024) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,287,"            if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,288,"                sign = (byte) 1;
",2,0,0,1,2,0,0,0,0,3,16,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,289,"                nans = QNAN;
",4,0,0,0,0,0,0,0,0,5,12,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,290,"            } else if (x < 0) {
",2,1,0,1,4,0,0,0,0,3,19,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,291,"                sign = (byte) -1;
",2,0,0,1,2,0,0,0,0,4,17,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,292,"                nans = INFINITE;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,294,"                sign = (byte) 1;
",2,0,0,1,2,0,0,0,0,3,16,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,295,"                nans = INFINITE;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,297,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,300,"        Dfp xdfp = new Dfp(field, mantissa);
",6,0,0,1,2,0,0,4,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,301,"        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one
",4,0,0,4,8,0,10,2,0,17,107,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,302,"        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));
",2,0,0,3,6,0,14,0,0,17,60,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,304,"        if ((bits & 0x8000000000000000L) != 0) {
",2,2,0,2,5,0,0,0,0,4,40,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,305,"            xdfp = xdfp.negate();
",2,0,0,1,2,0,4,0,0,7,21,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,308,"        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);
",8,0,0,1,2,0,6,0,0,14,53,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,309,"        sign = xdfp.sign;
",6,0,0,0,0,0,0,0,0,7,17,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,310,"        exp  = xdfp.exp;
",6,0,0,0,0,0,0,0,0,7,16,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,311,"        nans = xdfp.nans;
",6,0,0,0,0,0,0,0,0,7,17,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,313,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,346,"            sign = (byte) 1;
",2,0,0,1,2,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,347,"            nans = INFINITE;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,348,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,352,"            sign = (byte) -1;
",2,0,0,1,2,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,353,"            nans = INFINITE;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,354,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,358,"            sign = (byte) 1;
",2,0,0,1,2,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,359,"            nans = QNAN;
",4,0,0,0,0,0,0,0,0,5,12,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,360,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,373,"            fpdecimal = s.substring(0, p);
",2,0,0,1,2,0,6,0,0,9,30,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,374,"            String fpexp = s.substring(p+1);
",4,1,0,1,2,0,4,2,0,11,32,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,375,"            boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,377,"            for (int i=0; i<fpexp.length(); i++)
",6,1,0,2,4,0,4,0,0,12,36,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,379,"                if (fpexp.charAt(i) == '-')
",0,1,0,2,4,0,6,0,0,8,27,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,381,"                    negative = true;
",2,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,382,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,384,"                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9')
",0,3,0,3,6,0,12,0,0,17,53,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,385,"                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';
",4,3,0,1,2,0,6,0,0,15,45,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,388,"            if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,389,"                sciexp = -sciexp;
",4,0,0,0,0,0,0,0,0,6,17,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,391,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,398,"            sign = -1;
",2,0,0,0,0,0,0,0,0,4,10,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,422,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,451,"                p++;
",2,0,0,0,0,0,0,0,0,3,4,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,452,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,467,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,479,"            decimalPos = 0;
",2,0,0,0,0,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,484,"            decimalPos = q-offset;
",6,1,0,0,0,0,0,0,0,8,22,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,496,"            trailingZeros++;
",2,0,0,0,0,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,497,"            p--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,538,"    protected Dfp(final DfpField field, final byte sign, final byte nans) {
",8,0,0,1,3,4,0,2,0,14,71,2,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,539,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,540,"        this.mant    = new int[field.getRadixDigits()];
",2,0,0,2,4,0,4,0,0,7,47,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,541,"        this.sign    = sign;
",4,0,0,0,0,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,542,"        this.exp     = 0;
",2,0,0,0,0,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,543,"        this.nans    = nans;
",4,0,0,0,0,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,544,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,551,"        return new Dfp(getField());
",0,0,0,2,4,1,2,2,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,559,"        return new Dfp(getField(), x);
",2,0,0,2,4,1,2,2,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,567,"        return new Dfp(getField(), x);
",2,0,0,2,4,1,2,2,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,575,"        return new Dfp(getField(), x);
",2,0,0,2,4,1,2,2,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,583,"        return new Dfp(getField(), x);
",2,0,0,2,4,1,2,2,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,595,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,596,"            final Dfp result = newInstance(getZero());
",2,0,0,2,4,1,4,2,0,9,42,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,597,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,598,"            return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);
",4,0,0,1,2,1,8,0,0,12,67,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,611,"        return new Dfp(field, s);
",4,0,0,1,2,1,0,2,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,621,"        return field.newDfp(sig, code);
",0,0,0,1,2,1,8,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,653,"        return field.getOne();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,660,"        return field.getTwo();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,733,"                shiftLeft();
",0,0,0,1,2,0,2,0,0,2,12,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,754,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,755,"            final Dfp result = newInstance(getZero());
",2,0,0,2,4,1,4,2,0,9,42,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,756,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,757,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);
",4,0,0,1,2,0,8,0,0,12,57,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,758,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,763,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,764,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));
",4,0,0,3,6,0,10,0,0,14,73,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,765,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,779,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,780,"            final Dfp result = newInstance(getZero());
",2,0,0,2,4,1,4,2,0,9,42,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,781,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,782,"            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);
",4,0,0,1,2,0,8,0,0,12,60,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,783,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,788,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,789,"            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));
",4,0,0,3,6,0,10,0,0,14,76,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,790,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,800,"        return nans == INFINITE;
",4,1,0,0,0,1,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,820,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,826,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,836,"        return 17 + (sign << 8) + (nans << 16) + exp + Arrays.hashCode(mant);
",6,3,0,3,6,1,6,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,845,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,865,"            if (a.sign == -1) {
",4,1,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,866,"                return -1;
",0,0,0,0,0,1,0,0,0,1,10,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,868,"                return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,874,"            return a.sign;
",4,0,0,0,0,1,0,0,0,4,14,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,878,"            return -b.sign;
",4,0,0,0,0,1,0,0,0,5,15,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,882,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,917,"        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);
",6,0,0,1,2,1,2,0,0,8,52,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,925,"        return trunc(DfpField.RoundingMode.ROUND_FLOOR);
",6,0,0,1,2,1,2,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,933,"        return trunc(DfpField.RoundingMode.ROUND_CEIL);
",6,0,0,1,2,1,2,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,942,"        final Dfp result = this.subtract(this.divide(d).rint().multiply(d));
",2,0,0,4,8,1,12,2,0,17,68,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,945,"        if (result.mant[mant.length-1] == 0) {
",8,2,0,2,5,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,946,"            result.sign = sign;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,949,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,958,"        boolean changed = false;
",2,0,0,0,0,0,0,0,0,3,24,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,960,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,961,"            return newInstance(this);
",0,0,0,1,2,1,2,0,0,2,25,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,964,"        if (nans == INFINITE) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,965,"            return newInstance(this);
",0,0,0,1,2,1,2,0,0,2,25,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,968,"        if (mant[mant.length-1] == 0) {
",4,2,1,2,5,0,0,0,0,8,31,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,970,"            return newInstance(this);
",0,0,0,1,2,1,2,0,0,2,25,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,975,"        if (exp < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,976,"            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,977,"            Dfp result = newInstance(getZero());
",2,0,0,2,4,0,4,2,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,978,"            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);
",6,0,0,1,2,0,6,0,0,13,65,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,979,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,986,"        if (exp >= mant.length) {
",6,1,0,1,3,0,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,987,"            return newInstance(this);
",0,0,0,1,2,1,2,0,0,2,25,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,993,"        Dfp result = newInstance(this);
",2,0,0,1,2,0,2,2,0,6,31,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,994,"        for (int i = 0; i < mant.length-result.exp; i++) {
",14,2,0,1,3,0,0,0,0,17,50,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,995,"            changed |= result.mant[i] != 0;
",6,1,1,1,2,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,996,"            result.mant[i] = 0;
",4,0,1,1,2,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,999,"        if (changed) {
",2,0,0,1,3,0,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1000,"            switch (rmode) {
",2,0,0,1,3,0,0,0,0,2,16,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1002,"                    if (result.sign == -1) {
",4,1,0,1,3,0,0,0,0,6,24,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1004,"                        result = result.add(newInstance(-1));
",2,0,0,2,4,0,6,0,0,10,37,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1009,"                    if (result.sign == 1) {
",4,1,0,1,3,0,0,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1011,"                        result = result.add(getOne());
",2,0,0,2,4,0,6,0,0,9,30,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1017,"                    final Dfp half = newInstance(""0.5"");
",2,0,0,1,2,1,2,2,0,8,36,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1018,"                    Dfp a = subtract(result);  // difference between this and result
",2,0,0,1,2,0,4,2,0,8,64,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1019,"                    a.sign = 1;            // force positive (take abs)
",4,0,0,1,2,0,0,0,0,5,51,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1020,"                    if (a.greaterThan(half)) {
",0,0,0,2,5,0,6,0,0,6,26,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1021,"                        a = newInstance(getOne());
",2,0,0,2,4,0,4,0,0,7,26,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1022,"                        a.sign = sign;
",6,0,0,0,0,0,0,0,0,7,14,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1023,"                        result = result.add(a);
",2,0,0,1,2,0,6,0,0,9,23,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1027,"                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {
",16,6,0,4,9,0,6,0,0,28,87,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1028,"                        a = newInstance(getOne());
",2,0,0,2,4,0,4,0,0,7,26,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1029,"                        a.sign = sign;
",6,0,0,0,0,0,0,0,0,7,14,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1030,"                        result = result.add(a);
",2,0,0,1,2,0,6,0,0,9,23,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1035,"            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact
",4,0,0,1,2,0,4,0,0,8,65,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1036,"            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);
",6,0,0,1,2,0,6,0,0,13,65,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1037,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1040,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1049,"        int result = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1051,"        rounded = rint();
",2,0,0,1,2,0,2,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1053,"        if (rounded.greaterThan(newInstance(2147483647))) {
",0,0,0,3,7,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1054,"            return 2147483647;
",0,0,0,0,0,1,0,0,0,0,18,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1057,"        if (rounded.lessThan(newInstance(-2147483648))) {
",0,0,0,3,7,0,6,0,0,6,49,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1058,"            return -2147483648;
",0,0,0,0,0,1,0,0,0,0,19,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1061,"        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {
",18,3,0,1,3,0,0,0,0,22,68,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1062,"            result = result * RADIX + rounded.mant[i];
",10,2,1,1,2,0,0,0,0,15,42,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1065,"        if (rounded.sign == -1) {
",4,1,0,1,3,0,0,0,0,6,25,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1066,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1069,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1078,"        return exp - 1;
",2,1,0,0,0,1,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1086,"        Dfp d = newInstance(getOne());
",2,0,0,2,4,0,4,2,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1087,"        d.exp = e + 1;
",6,1,0,0,0,0,0,0,0,8,14,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1088,"        return d;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1095,"        if (mant[mant.length-1] > 1000) {
",4,2,1,2,5,0,0,0,0,8,33,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1096,"            return exp * 4 - 1;
",2,2,0,0,0,1,0,0,0,4,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1098,"        if (mant[mant.length-1] > 100) {
",4,2,1,2,5,0,0,0,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1099,"            return exp * 4 - 2;
",2,2,0,0,0,1,0,0,0,4,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1101,"        if (mant[mant.length-1] > 10) {
",4,2,1,2,5,0,0,0,0,8,31,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1102,"            return exp * 4 - 3;
",2,2,0,0,0,1,0,0,0,4,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1104,"        return exp * 4 - 4;
",2,2,0,0,0,1,0,0,0,4,19,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1112,"        Dfp d = newInstance(getOne());
",2,0,0,2,4,0,4,2,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1114,"        if (e >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1115,"            d.exp = e / 4 + 1;
",6,2,0,0,0,0,0,0,0,9,18,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1117,"            d.exp = (e + 1) / 4;
",6,2,0,1,2,0,0,0,0,9,20,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1120,"        switch ((e % 4 + 4) % 4) {
",2,3,0,2,5,0,0,0,0,5,26,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1122,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1124,"                d = d.multiply(10);
",2,0,0,1,2,0,4,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1125,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1127,"                d = d.multiply(100);
",2,0,0,1,2,0,4,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1128,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1130,"                d = d.multiply(1000);
",2,0,0,1,2,0,4,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1133,"        return d;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1168,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1169,"            final Dfp result = newInstance(getZero());
",2,0,0,2,4,1,4,2,0,9,42,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1170,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1171,"            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);
",4,0,0,1,2,1,8,0,0,12,58,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1176,"            if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1177,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1180,"            if (x.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,16,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1181,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1184,"            if (nans == INFINITE && x.nans == FINITE) {
",10,3,0,1,3,0,0,0,0,13,43,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1185,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1188,"            if (x.nans == INFINITE && nans == FINITE) {
",10,3,0,1,3,0,0,0,0,13,43,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1189,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1192,"            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {
",16,5,0,1,3,0,0,0,0,21,63,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1193,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1196,"            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {
",16,5,0,1,3,0,0,0,0,21,63,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1197,"                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1198,"                Dfp result = newInstance(getZero());
",2,0,0,2,4,0,4,2,0,8,36,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1199,"                result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1200,"                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);
",6,0,0,1,2,0,8,0,0,15,60,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1201,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1233,"            a.exp = b.exp;
",8,0,0,0,0,0,0,0,0,9,14,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1334,"                inc = false;
",2,0,0,0,0,0,0,0,0,4,12,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1335,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1338,"                inc = n != 0;       // round up if n!=0
",4,1,0,0,0,0,0,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1339,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1342,"                inc = n >= 5000;  // round half up
",4,1,0,0,0,0,0,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1343,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1346,"                inc = n > 5000;  // round half down
",4,1,0,0,0,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1347,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1354,"                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd
",6,6,1,3,6,0,0,0,0,15,71,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1355,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1358,"                inc = sign == 1 && n != 0;  // round ceil
",6,3,0,0,0,0,0,0,0,10,41,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1359,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1363,"                inc = sign == -1 && n != 0;  // round floor
",6,3,0,0,0,0,0,0,0,11,43,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1377,"                shiftRight();
",0,0,0,1,2,0,2,0,0,2,13,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1378,"                mant[mant.length-1] = rh;
",6,1,1,1,2,0,0,0,0,10,25,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1385,"            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);
",4,0,0,1,2,0,4,0,0,8,48,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1386,"            return DfpField.FLAG_UNDERFLOW;
",4,0,0,0,0,1,0,0,0,4,31,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1391,"            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);
",4,0,0,1,2,0,4,0,0,8,47,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1392,"            return DfpField.FLAG_OVERFLOW;
",4,0,0,0,0,1,0,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1413,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1414,"            final Dfp result = newInstance(getZero());
",2,0,0,2,4,1,4,2,0,9,42,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1415,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1416,"            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);
",4,0,0,1,2,1,8,0,0,12,63,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1423,"            if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1424,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1427,"            if (x.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,16,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1428,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1431,"            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {
",18,6,0,2,5,0,0,0,0,24,73,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1432,"                result = newInstance(this);
",2,0,0,1,2,0,2,0,0,5,27,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1433,"                result.sign = (byte) (sign * x.sign);
",10,1,0,2,4,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1434,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1437,"            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {
",14,6,1,2,5,0,0,0,0,22,71,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1438,"                result = newInstance(x);
",2,0,0,1,2,0,4,0,0,7,24,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1439,"                result.sign = (byte) (sign * x.sign);
",10,1,0,2,4,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1440,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1443,"            if (x.nans == INFINITE && nans == INFINITE) {
",10,3,0,1,3,0,0,0,0,13,45,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1444,"                result = newInstance(this);
",2,0,0,1,2,0,2,0,0,5,27,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1445,"                result.sign = (byte) (sign * x.sign);
",10,1,0,2,4,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1446,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1449,"            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||
",14,7,1,2,5,0,0,0,0,23,74,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1451,"                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1452,"                result = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,32,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1453,"                result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1454,"                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);
",6,0,0,1,2,0,8,0,0,15,65,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1455,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1500,"            excp = result.round(0); // has no effect except to check status
",2,0,0,1,2,0,4,0,0,7,63,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1517,"        Dfp result = newInstance(this);
",2,0,0,1,2,0,2,2,0,6,31,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1520,"        if (nans != FINITE) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1521,"            if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1522,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1525,"            if (nans == INFINITE && x != 0) {
",6,3,0,1,3,0,0,0,0,9,33,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1526,"                result = newInstance(this);
",2,0,0,1,2,0,2,0,0,5,27,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1527,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1530,"            if (nans == INFINITE && x == 0) {
",6,3,0,1,3,0,0,0,0,9,33,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1531,"                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1532,"                result = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,32,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1533,"                result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1534,"                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);
",6,0,0,3,6,0,10,0,0,17,86,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1535,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1540,"        if (x < 0 || x >= RADIX) {
",6,3,0,1,3,0,0,0,0,9,26,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1541,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1542,"            result = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,32,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1543,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1544,"            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);
",6,0,0,1,2,0,8,0,0,15,70,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1545,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1548,"        int rh = 0;
",2,0,0,0,0,0,0,0,0,2,11,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1549,"        for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1550,"            final int r = mant[i] * x + rh;
",6,2,1,1,2,1,0,0,0,13,31,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1551,"            rh = r / RADIX;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1552,"            result.mant[i] = r - rh * RADIX;
",10,2,1,1,2,0,0,0,0,15,32,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1555,"        int lostdigit = 0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1556,"        if (rh != 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1557,"            lostdigit = result.mant[0];
",6,0,0,1,2,0,0,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1558,"            result.shiftRight();
",0,0,0,1,2,0,4,0,0,4,20,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1559,"            result.mant[mant.length-1] = rh;
",10,1,0,1,2,0,0,0,0,12,32,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1562,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero
",8,2,0,2,5,0,0,0,0,10,76,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1563,"            result.exp = 0;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1566,"        final int excp = result.round(lostdigit);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1567,"        if (excp != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1568,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);
",2,0,0,1,2,0,10,0,0,13,53,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1571,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1592,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1593,"            final Dfp result = newInstance(getZero());
",2,0,0,2,4,1,4,2,0,9,42,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1594,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1595,"            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);
",4,0,0,1,2,1,8,0,0,12,67,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1602,"            if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1603,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1606,"            if (divisor.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,22,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1607,"                return divisor;
",2,0,0,0,0,1,0,0,0,2,15,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1610,"            if (nans == INFINITE && divisor.nans == FINITE) {
",10,3,0,1,3,0,0,0,0,13,49,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1611,"                result = newInstance(this);
",2,0,0,1,2,0,2,0,0,5,27,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1612,"                result.sign = (byte) (sign * divisor.sign);
",10,1,0,2,4,0,0,0,0,12,43,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1613,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1616,"            if (divisor.nans == INFINITE && nans == FINITE) {
",10,3,0,1,3,0,0,0,0,13,49,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1617,"                result = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,32,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1618,"                result.sign = (byte) (sign * divisor.sign);
",10,1,0,2,4,0,0,0,0,12,43,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1619,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1622,"            if (divisor.nans == INFINITE && nans == INFINITE) {
",10,3,0,1,3,0,0,0,0,13,51,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1623,"                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1624,"                result = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,32,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1625,"                result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1626,"                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);
",6,0,0,1,2,0,8,0,0,15,69,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1627,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1633,"            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);
",4,0,0,1,2,0,4,0,0,8,47,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1634,"            result = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,32,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1635,"            result.sign = (byte) (sign * divisor.sign);
",10,1,0,2,4,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1636,"            result.nans = INFINITE;
",6,0,0,0,0,0,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1637,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);
",6,0,0,1,2,0,8,0,0,15,70,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1638,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1738,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1778,"            excp = result.round(0);
",2,0,0,1,2,0,4,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1797,"            if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1798,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1801,"            if (nans == INFINITE) {
",4,1,0,1,3,0,0,0,0,5,23,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1802,"                return newInstance(this);
",0,0,0,1,2,1,2,0,0,2,25,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1808,"            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);
",4,0,0,1,2,0,4,0,0,8,47,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1809,"            Dfp result = newInstance(getZero());
",2,0,0,2,4,0,4,2,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1810,"            result.sign = sign;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1811,"            result.nans = INFINITE;
",6,0,0,0,0,0,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1812,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);
",6,0,0,2,4,0,8,0,0,15,72,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1813,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1818,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1819,"            Dfp result = newInstance(getZero());
",2,0,0,2,4,0,4,2,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1820,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1821,"            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);
",6,0,0,1,2,0,8,0,0,15,68,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1822,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1861,"            return newInstance(this);
",0,0,0,1,2,1,2,0,0,2,25,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1865,"            if (nans == INFINITE && sign == 1) {
",6,3,0,1,3,0,0,0,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1867,"                return newInstance(this);
",0,0,0,1,2,1,2,0,0,2,25,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1870,"            if (nans == QNAN) {
",4,1,0,1,3,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1871,"                return newInstance(this);
",0,0,0,1,2,1,2,0,0,2,25,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1874,"            if (nans == SNAN) {
",4,1,0,1,3,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1877,"                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1878,"                result = newInstance(this);
",2,0,0,1,2,0,2,0,0,5,27,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1879,"                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);
",6,0,0,1,2,0,6,0,0,14,64,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1880,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1888,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1889,"            result = newInstance(this);
",2,0,0,1,2,0,2,0,0,5,27,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1890,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1891,"            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);
",6,0,0,1,2,0,6,0,0,14,64,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1892,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1899,"            x.exp = this.exp / 2;
",6,1,0,0,0,0,0,0,0,8,21,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1908,"                x.mant[mant.length-1] = 1500;
",8,1,0,1,2,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1909,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1911,"                x.mant[mant.length-1] = 2200;
",8,1,0,1,2,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1912,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1935,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1956,"            if (nans == INFINITE) {
",4,1,0,1,3,0,0,0,0,5,23,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1957,"                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;
",6,1,0,1,2,1,0,0,0,7,62,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1959,"                return NAN_STRING;
",2,0,0,0,0,1,0,0,0,2,18,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1964,"            return dfp2sci();
",0,0,0,1,2,1,2,0,0,2,17,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1975,"        char rawdigits[]    = new char[mant.length * 4];
",6,1,0,2,4,0,0,0,0,7,48,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1976,"        char outputbuffer[] = new char[mant.length * 4 + 20];
",6,2,0,2,4,0,0,0,0,8,53,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1984,"        p = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1985,"        for (int i = mant.length - 1; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,44,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1986,"            rawdigits[p++] = (char) ((mant[i] / 1000) + '0');
",2,2,1,5,10,0,0,0,0,13,49,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1987,"            rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');
",2,3,1,6,12,0,0,0,0,14,54,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1988,"            rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');
",2,3,1,6,12,0,0,0,0,14,54,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1989,"            rawdigits[p++] = (char) (((mant[i]) % 10) + '0');
",2,2,1,6,12,0,0,0,0,13,49,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1993,"        for (p = 0; p < rawdigits.length; p++) {
",10,1,0,1,3,0,0,0,0,13,40,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1994,"            if (rawdigits[p] != '0') {
",0,1,1,2,5,0,0,0,0,6,26,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1995,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,1998,"        shf = p;
",4,0,0,0,0,0,0,0,0,5,8,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2001,"        q = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2002,"        if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2003,"            outputbuffer[q++] = '-';
",2,0,1,1,2,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2006,"        if (p != rawdigits.length) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2008,"            outputbuffer[q++] = rawdigits[p++];
",4,0,1,2,4,0,0,0,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2009,"            outputbuffer[q++] = '.';
",2,0,1,1,2,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2011,"            while (p<rawdigits.length) {
",6,1,0,1,3,0,0,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2012,"                outputbuffer[q++] = rawdigits[p++];
",4,0,1,2,4,0,0,0,0,11,35,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2015,"            outputbuffer[q++] = '0';
",2,0,1,1,2,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2016,"            outputbuffer[q++] = '.';
",2,0,1,1,2,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2017,"            outputbuffer[q++] = '0';
",2,0,1,1,2,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2018,"            outputbuffer[q++] = 'e';
",2,0,1,1,2,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2019,"            outputbuffer[q++] = '0';
",2,0,1,1,2,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2020,"            return new String(outputbuffer, 0, 5);
",2,0,0,1,2,1,0,2,0,4,38,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2023,"        outputbuffer[q++] = 'e';
",2,0,1,1,2,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2027,"        e = exp * 4 - shf - 1;
",6,3,0,0,0,0,0,0,0,10,22,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2028,"        ae = e;
",4,0,0,0,0,0,0,0,0,5,7,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2029,"        if (e < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2030,"            ae = -e;
",4,0,0,0,0,0,0,0,0,6,8,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2034,"        for (p = 1000000000; p > ae; p /= 10) {
",8,1,0,1,3,0,0,0,0,11,39,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2038,"        if (e < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2039,"            outputbuffer[q++] = '-';
",2,0,1,1,2,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2042,"        while (p > 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2043,"            outputbuffer[q++] = (char)(ae / p + '0');
",6,2,1,3,6,0,0,0,0,13,41,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2044,"            ae = ae % p;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2045,"            p = p / 10;
",4,1,0,0,0,0,0,0,0,6,11,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2048,"        return new String(outputbuffer, 0, q);
",4,0,0,1,2,1,0,2,0,6,38,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2071,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2072,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2073,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2074,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2075,"            e++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2090,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2091,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2092,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2093,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2094,"            e--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2099,"            buffer[p++] = '.';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2118,"            buffer[--q] = '-';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2137,"                def = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,29,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2138,"                def.sign = result.sign;
",8,0,0,0,0,0,0,0,0,9,23,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2139,"                def.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2140,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2143,"                if (nans == FINITE && mant[mant.length-1] != 0) {
",8,4,1,2,5,0,0,0,0,14,49,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2145,"                    def = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,29,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2146,"                    def.sign = (byte)(sign*oper.sign);
",10,1,0,2,4,0,0,0,0,12,34,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2147,"                    def.nans = INFINITE;
",6,0,0,0,0,0,0,0,0,7,20,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2150,"                if (nans == FINITE && mant[mant.length-1] == 0) {
",8,4,1,2,5,0,0,0,0,14,49,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2152,"                    def = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,29,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2153,"                    def.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,16,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2156,"                if (nans == INFINITE || nans == QNAN) {
",8,3,0,1,3,0,0,0,0,11,39,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2157,"                    def = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,29,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2158,"                    def.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,16,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2161,"                if (nans == INFINITE || nans == SNAN) {
",8,3,0,1,3,0,0,0,0,11,39,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2162,"                    def = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,29,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2163,"                    def.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,16,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2168,"                if ( (result.exp+mant.length) < MIN_EXP) {
",10,2,0,2,5,0,0,0,0,12,42,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2169,"                    def = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,29,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2170,"                    def.sign = result.sign;
",8,0,0,0,0,0,0,0,0,9,23,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2172,"                    def = newInstance(result);  // gradual underflow
",2,0,0,1,2,0,4,0,0,7,48,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2174,"                result.exp = result.exp + ERR_SCALE;
",10,1,0,0,0,0,0,0,0,12,36,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2175,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2178,"                result.exp = result.exp - ERR_SCALE;
",10,1,0,0,0,0,0,0,0,12,36,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2179,"                def = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,29,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2180,"                def.sign = result.sign;
",8,0,0,0,0,0,0,0,0,9,23,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2181,"                def.nans = INFINITE;
",6,0,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2182,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2210,"        return nans;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2220,"        Dfp result = x.newInstance(x);
",2,0,0,1,2,0,6,2,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2221,"        result.sign = y.sign;
",8,0,0,0,0,0,0,0,0,9,21,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2222,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2233,"        if (field.getRadixDigits() != x.field.getRadixDigits()) {
",4,1,0,3,7,0,6,0,0,11,57,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2234,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2235,"            final Dfp result = newInstance(getZero());
",2,0,0,2,4,1,4,2,0,9,42,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2236,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2237,"            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);
",4,0,0,1,2,1,8,0,0,12,65,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2241,"        boolean up = false;
",2,0,0,0,0,0,0,0,0,3,19,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2242,"        if (this.lessThan(x)) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2243,"            up = true;
",2,0,0,0,0,0,0,0,0,4,10,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2246,"        if (compare(this, x) == 0) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2247,"            return newInstance(x);
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2250,"        if (lessThan(getZero())) {
",0,0,0,3,7,0,4,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2251,"            up = !up;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2256,"        if (up) {
",2,0,0,1,3,0,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2257,"            inc = newInstance(getOne());
",2,0,0,2,4,0,4,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2258,"            inc.exp = this.exp-mant.length+1;
",10,2,0,0,0,0,0,0,0,13,33,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2259,"            inc.sign = this.sign;
",6,0,0,0,0,0,0,0,0,7,21,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2261,"            if (this.equals(getZero())) {
",0,0,0,3,7,0,4,0,0,4,29,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2262,"                inc.exp = MIN_EXP-mant.length;
",10,1,0,0,0,0,0,0,0,12,30,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2265,"            result = add(inc);
",2,0,0,1,2,0,4,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2267,"            inc = newInstance(getOne());
",2,0,0,2,4,0,4,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2268,"            inc.exp = this.exp;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2269,"            inc.sign = this.sign;
",6,0,0,0,0,0,0,0,0,7,21,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2271,"            if (this.equals(inc)) {
",0,0,0,2,5,0,4,0,0,4,23,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2272,"                inc.exp = this.exp-mant.length;
",10,1,0,0,0,0,0,0,0,12,31,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2274,"                inc.exp = this.exp-mant.length+1;
",10,2,0,0,0,0,0,0,0,13,33,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2277,"            if (this.equals(getZero())) {
",0,0,0,3,7,0,4,0,0,4,29,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2278,"                inc.exp = MIN_EXP-mant.length;
",10,1,0,0,0,0,0,0,0,12,30,8,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2281,"            result = this.subtract(inc);
",2,0,0,1,2,0,4,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2284,"        if (result.classify() == INFINITE && this.classify() != INFINITE) {
",4,3,0,3,7,0,6,0,0,13,67,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2285,"            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2286,"            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);
",6,0,0,1,2,0,8,0,0,15,67,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2289,"        if (result.equals(getZero()) && this.equals(getZero()) == false) {
",0,2,0,5,11,0,10,0,0,13,66,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2290,"            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2291,"            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);
",6,0,0,1,2,0,8,0,0,15,67,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2294,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2304,"        if (isInfinite()) {
",0,0,0,2,5,0,2,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2305,"            if (lessThan(getZero())) {
",0,0,0,3,7,0,4,0,0,4,26,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2306,"                return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2308,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2312,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2313,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2316,"        Dfp y = this;
",2,0,0,0,0,0,0,2,0,4,13,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2317,"        boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2318,"        if (lessThan(getZero())) {
",0,0,0,3,7,0,4,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2319,"            y = negate();
",2,0,0,1,2,0,2,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2320,"            negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2325,"        int exponent = (int)(y.log10() * 3.32);
",2,1,0,3,6,0,4,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2326,"        if (exponent < 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2327,"            exponent--;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2330,"        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);
",2,0,0,2,4,0,8,2,0,12,46,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2331,"        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {
",0,1,0,3,7,0,12,0,0,13,50,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2332,"            tempDfp = tempDfp.multiply(2);
",2,0,0,1,2,0,4,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2333,"            exponent++;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2335,"        exponent--;
",2,0,0,0,0,0,0,0,0,3,11,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2339,"        y = y.divide(DfpMath.pow(getTwo(), exponent));
",2,0,0,3,6,0,12,0,0,15,46,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2340,"        if (exponent > -1023) {
",2,1,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2341,"            y = y.subtract(getOne());
",2,0,0,2,4,0,6,0,0,9,25,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2344,"        if (exponent < -1074) {
",2,1,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2345,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2348,"        if (exponent > 1023) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2349,"            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
",10,0,0,0,0,1,0,0,0,10,68,7,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2353,"        y = y.multiply(newInstance(4503599627370496l)).rint();
",2,0,0,3,6,0,8,0,0,11,54,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2354,"        String str = y.toString();
",2,0,0,1,2,0,4,2,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2355,"        str = str.substring(0, str.length()-1);
",2,1,0,2,4,0,8,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2356,"        long mantissa = Long.parseLong(str);
",2,0,0,1,2,0,6,0,0,8,36,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2358,"        if (mantissa == 4503599627370496L) {
",2,1,0,1,3,0,0,0,0,3,36,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2360,"            mantissa = 0;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2361,"            exponent++;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2365,"        if (exponent <= -1023) {
",2,1,0,1,3,0,0,0,0,4,24,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2366,"            exponent--;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2369,"        while (exponent < -1023) {
",2,1,0,1,3,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2370,"            exponent++;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2371,"            mantissa >>>= 1;
",2,0,0,0,0,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2374,"        long bits = mantissa | ((exponent + 1023L) << 52);
",6,3,0,2,4,0,0,0,0,9,50,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2375,"        double x = Double.longBitsToDouble(bits);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2377,"        if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2378,"            x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2381,"        return x;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2390,"        double split[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,31,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2391,"        long mask = 0xffffffffc0000000L;
",2,0,0,0,0,0,0,0,0,2,32,5,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2393,"        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);
",2,1,1,4,8,0,10,0,0,16,79,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2394,"        split[1] = subtract(newInstance(split[0])).toDouble();
",0,0,1,5,10,0,6,0,0,11,54,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,2396,"        return split;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,59,96,"public class Dfp implements FieldElement<Dfp> {
",2,0,0,0,1,1,0,4,0,7,47,1,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,61,"        return next(1) != 0;
",0,1,0,1,2,1,2,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,66,"        int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,67,"        final int iEnd = bytes.length - 3;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,68,"        while (i < iEnd) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,69,"            final int random = next(32);
",2,0,0,1,2,1,2,0,0,5,28,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,70,"            bytes[i]     = (byte) (random & 0xff);
",2,1,1,3,6,0,0,0,0,8,38,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,71,"            bytes[i + 1] = (byte) ((random >>  8) & 0xff);
",4,3,1,4,8,0,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,72,"            bytes[i + 2] = (byte) ((random >> 16) & 0xff);
",4,3,1,4,8,0,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,73,"            bytes[i + 3] = (byte) ((random >> 24) & 0xff);
",4,3,1,4,8,0,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,74,"            i += 4;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,75,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,76,"        int random = next(32);
",2,0,0,1,2,0,2,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,77,"        while (i < bytes.length) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,78,"            bytes[i++] = (byte) (random & 0xff);
",4,1,1,3,6,0,0,0,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,79,"            random     = random >> 8;
",4,1,0,0,0,0,0,0,0,6,25,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,85,"        final long high = ((long) next(26)) << 26;
",2,1,0,3,6,1,2,0,0,6,42,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,86,"        final int  low  = next(26);
",2,0,0,1,2,1,2,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,87,"        return (high | low) * 0x1.0p-52d;
",4,2,0,1,2,1,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,92,"        return next(23) * 0x1.0p-23f;
",0,1,0,1,2,1,2,0,0,3,29,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,99,"        if (Double.isNaN(nextGaussian)) {
",0,0,0,2,5,0,6,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,101,"            final double x = nextDouble();
",2,0,0,1,2,1,2,0,0,5,30,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,102,"            final double y = nextDouble();
",2,0,0,1,2,1,2,0,0,5,30,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,103,"            final double alpha = 2 * FastMath.PI * x;
",8,1,0,0,0,1,0,0,0,10,41,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,104,"            final double r      = FastMath.sqrt(-2 * FastMath.log(y));
",2,1,0,2,4,1,10,0,0,15,58,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,105,"            random       = r * FastMath.cos(alpha);
",4,1,0,1,2,0,6,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,106,"            nextGaussian = r * FastMath.sin(alpha);
",4,1,0,1,2,0,6,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,107,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,109,"            random = nextGaussian;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,110,"            nextGaussian = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,113,"        return random;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,119,"        return next(32);
",0,0,0,1,2,1,2,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,125,"        if (n < 1) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,126,"            throw new NotStrictlyPositiveException(n);
",2,0,0,1,2,0,0,2,0,4,42,7,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,130,"        int mask = n;
",4,0,0,0,0,0,0,0,0,4,13,5,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,131,"        mask |= mask >> 1;
",4,1,0,0,0,0,0,0,0,6,18,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,132,"        mask |= mask >> 2;
",4,1,0,0,0,0,0,0,0,6,18,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,133,"        mask |= mask >> 4;
",4,1,0,0,0,0,0,0,0,6,18,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,134,"        mask |= mask >> 8;
",4,1,0,0,0,0,0,0,0,6,18,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,135,"        mask |= mask >> 16;
",4,1,0,0,0,0,0,0,0,6,19,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,138,"            final int random = next(32) & mask;
",4,1,0,1,2,1,2,0,0,8,35,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,139,"            if (random < n) {
",4,1,0,1,3,0,0,0,0,5,17,6,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,140,"                return random;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,142,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,148,"        final long high  = ((long) next(32)) << 32;
",2,1,0,3,6,1,2,0,0,6,43,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,149,"        final long  low  = ((long) next(32)) & 0xffffffffL;
",2,1,0,3,6,1,2,0,0,6,51,4,0.00000,0
defect4j,math,org/apache/commons/math/random/BitsStreamGenerator,59,150,"        return high | low;
",4,1,0,0,0,1,0,0,0,5,18,4,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,106,"    public MersenneTwister() {
",2,0,0,1,3,1,0,0,0,3,26,2,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,107,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,108,"        setSeed(System.currentTimeMillis());
",0,0,0,2,4,0,6,0,0,6,36,5,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,109,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,114,"    public MersenneTwister(int seed) {
",4,0,0,1,3,1,0,0,0,5,34,2,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,115,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,116,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,123,"    public MersenneTwister(int[] seed) {
",4,0,0,2,5,1,0,0,0,5,36,2,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,124,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,125,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,126,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,164,"            setSeed(System.currentTimeMillis());
",0,0,0,2,4,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,165,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,227,"        if (mti >= N) { // generate N words at one time
",4,1,0,1,3,0,0,0,0,5,47,4,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,228,"            int mtNext = mt[0];
",2,0,1,1,2,0,0,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,229,"            for (int k = 0; k < N - M; ++k) {
",10,2,0,1,3,0,0,0,0,13,33,6,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,230,"                int mtCurr = mtNext;
",4,0,0,0,0,0,0,0,0,4,20,9,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,231,"                mtNext = mt[k + 1];
",4,1,1,1,2,0,0,0,0,8,19,8,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,232,"                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);
",6,3,0,2,4,0,0,0,0,10,50,8,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,233,"                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];
",8,4,1,4,8,0,0,0,0,21,47,8,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,235,"            for (int k = N - M; k < N - 1; ++k) {
",12,3,0,1,3,0,0,0,0,16,37,6,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,236,"                int mtCurr = mtNext;
",4,0,0,0,0,0,0,0,0,4,20,9,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,237,"                mtNext = mt[k + 1];
",4,1,1,1,2,0,0,0,0,8,19,8,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,238,"                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);
",6,3,0,2,4,0,0,0,0,10,50,8,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,239,"                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];
",10,5,1,5,10,0,0,0,0,24,53,8,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,241,"            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);
",4,3,1,3,6,0,0,0,0,10,49,6,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,242,"            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];
",8,5,1,4,8,0,0,0,0,20,51,6,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,244,"            mti = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,247,"        y = mt[mti++];
",4,0,1,1,2,0,0,0,0,8,14,4,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,250,"        y ^=  y >>> 11;
",4,1,0,0,0,0,0,0,0,6,15,4,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,251,"        y ^= (y <<   7) & 0x9d2c5680;
",4,2,0,1,2,0,0,0,0,7,29,4,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,252,"        y ^= (y <<  15) & 0xefc60000;
",4,2,0,1,2,0,0,0,0,7,29,4,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,253,"        y ^=  y >>> 18;
",4,1,0,0,0,0,0,0,0,6,15,4,0.00000,0
defect4j,math,org/apache/commons/math/random/MersenneTwister,59,255,"        return y >>> (32 - bits);
",4,2,0,1,2,1,0,0,0,6,25,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,59,38,"        super(value, 0, false);
",2,0,0,1,2,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,59,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,59,48,"        super(specific, value, 0, false);
",4,0,0,1,2,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,59,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,52,"        this(null, wrong, min, boundIsAllowed);
",6,0,0,1,2,0,0,0,0,6,39,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,67,"        super(specific,
",2,0,0,0,1,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,73,"        this.min = min;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,74,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,81,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,59,88,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,50,"        super(specific, general, wrong, arguments);
",8,0,0,1,2,0,0,0,0,8,43,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,51,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,64,"        super(general, wrong, arguments);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,65,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,59,72,"        return argument;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,59,44,"        super(null, specific, general, args);
",6,0,0,1,2,0,0,0,0,7,37,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,59,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,59,52,"        this(null, general, args);
",4,0,0,1,2,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,59,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,65,"        super(cause);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,66,"        this.specific = specific;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,67,"        this.general = general;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,68,"        this.arguments = ArgUtils.flatten(arguments);
",2,0,0,1,2,0,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,77,"        this(cause, null, null);
",2,0,0,1,2,0,0,0,0,2,24,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,82,"        return specific;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,87,"        return general;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,92,"        return arguments.clone();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,102,"        return MessageFactory.buildMessage(locale, specific, general, arguments);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,108,"        return getMessage(Locale.US);
",4,0,0,1,2,1,2,0,0,6,29,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,59,114,"        return getMessage(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,211,"    private FastMath() {
",2,0,0,1,3,1,0,0,0,3,20,2,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,212,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,219,"        return Math.sqrt(a);
",0,0,0,1,2,1,6,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,227,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,228,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,231,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,232,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,235,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,236,"          return exp(-x)/2.0;
",2,1,0,1,2,1,2,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,239,"      double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,240,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,241,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,243,"      exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,245,"      double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,246,"      double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,248,"      double temp = ya * 1073741824.0;
",4,1,0,0,0,0,0,0,0,5,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,249,"      double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,250,"      double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,253,"      double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,254,"      temp = recip * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,255,"      double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,256,"      double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,259,"      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,261,"      recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,264,"      temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,265,"      yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,266,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,267,"      temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,268,"      yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,269,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,271,"      double result = ya + yb;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,272,"      result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,273,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,281,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,282,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,283,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,286,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,287,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,290,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,291,"          return -exp(-x)/2.0;
",2,1,0,1,2,1,2,0,0,7,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,294,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,295,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,298,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,299,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,300,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,305,"      if (x > 0.25) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,306,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,307,"          exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,309,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,310,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,312,"          double temp = ya * 1073741824.0;
",4,1,0,0,0,0,0,0,0,5,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,313,"          double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,314,"          double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,317,"          double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,318,"          temp = recip * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,319,"          double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,320,"          double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,323,"          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,325,"          recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,327,"          recipa = -recipa;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,328,"          recipb = -recipb;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,331,"          temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,332,"          yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,333,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,334,"          temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,335,"          yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,336,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,338,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,339,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,340,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,342,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,343,"          expm1(x, hiPrec);
",0,0,0,1,2,0,6,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,345,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,346,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,349,"          double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,350,"          double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,351,"          double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,352,"          double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,353,"          double temp = ratio * 1073741824.0;
",4,1,0,0,0,0,0,0,0,5,35,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,354,"          double ra = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,355,"          double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,357,"          temp = denom * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,358,"          double za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,359,"          double zb = denom - za;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,361,"          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,364,"          rb += yb*denomr;                        // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,365,"          rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,368,"          temp = ya + ra;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,369,"          yb += -(temp - ya - ra);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,370,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,371,"          temp = ya + rb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,372,"          yb += -(temp - ya - rb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,373,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,375,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,376,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,379,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,380,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,383,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,391,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,393,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,394,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,397,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,398,"          return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,401,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,402,"          return -1.0;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,405,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,406,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,409,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,410,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,411,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,415,"      if (x >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,416,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,418,"          exp(x*2.0, 0.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,24,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,420,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,421,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,424,"          double na = -1.0 + ya;
",4,1,0,0,0,0,0,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,425,"          double nb = -(na + 1.0 - ya);
",6,2,0,1,2,0,0,0,0,9,29,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,426,"          double temp = na + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,427,"          nb += -(temp - na - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,428,"          na = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,431,"          double da = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,432,"          double db = -(da - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,433,"          temp = da + yb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,434,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,435,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,437,"          temp = da * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,438,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,439,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,442,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,443,"          temp = ratio * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,444,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,445,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,448,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,451,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,453,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,455,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,456,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,458,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,460,"          expm1(x*2.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,462,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,463,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,466,"          double na = ya;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,467,"          double nb = yb;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,470,"          double da = 2.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,471,"          double db = -(da - 2.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,472,"          double temp = da + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,473,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,474,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,476,"          temp = da * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,477,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,478,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,481,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,482,"          temp = ratio * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,483,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,484,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,487,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,490,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,492,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,494,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,497,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,498,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,501,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,509,"        return FastMath.log(a + FastMath.sqrt(a * a - 1));
",6,3,0,2,4,1,8,0,0,17,50,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,518,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,519,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,520,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,521,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,525,"        if (a > 0.167) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,526,"            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);
",8,3,0,2,4,0,8,0,0,20,54,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,528,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,529,"            if (a > 0.097) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,530,"                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);
",20,33,0,9,18,0,0,0,0,54,264,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,531,"            } else if (a > 0.036) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,532,"                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);
",16,25,0,7,14,0,0,0,0,42,196,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,533,"            } else if (a > 0.0036) {
",2,1,0,1,4,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,534,"                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);
",12,17,0,5,10,0,0,0,0,30,129,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,536,"                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);
",8,9,0,3,6,0,0,0,0,18,71,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,540,"        return negative ? -absAsinh : absAsinh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,550,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,551,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,552,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,553,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,557,"        if (a > 0.15) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,558,"            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));
",6,4,0,3,6,0,4,0,0,15,49,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,560,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,561,"            if (a > 0.087) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,562,"                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));
",20,25,0,9,18,0,0,0,0,46,175,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,563,"            } else if (a > 0.031) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,564,"                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));
",16,19,0,7,14,0,0,0,0,36,135,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,565,"            } else if (a > 0.003) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,566,"                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));
",12,13,0,5,10,0,0,0,0,26,95,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,568,"                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));
",8,7,0,3,6,0,0,0,0,16,57,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,572,"        return negative ? -absAtanh : absAtanh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,582,"        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : (Double.isNaN(a) ? Double.NaN : 0.0));
",8,2,0,5,10,1,6,0,0,17,83,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,590,"        return nextAfter(a, Double.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,597,"        return Math.random();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,621,"        return exp(x, 0.0, null);
",0,0,0,1,2,1,4,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,640,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,641,"            intVal = (int) -x;
",4,0,0,1,2,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,643,"            if (intVal > 746) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,644,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,645,"                    hiPrec[0] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,646,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,648,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,651,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,653,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,654,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,655,"                    hiPrec[0] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,656,"                    hiPrec[1] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,658,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,661,"            if (intVal == 709) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,663,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,664,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,665,"                    hiPrec[0] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,666,"                    hiPrec[1] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,668,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,671,"            intVal++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,673,"            intPartA = EXP_INT_TABLE_A[750-intVal];
",4,1,1,1,2,0,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,674,"            intPartB = EXP_INT_TABLE_B[750-intVal];
",4,1,1,1,2,0,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,676,"            intVal = -intVal;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,678,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,680,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,681,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,682,"                    hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,683,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,685,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,688,"            intPartA = EXP_INT_TABLE_A[750+intVal];
",4,1,1,1,2,0,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,689,"            intPartB = EXP_INT_TABLE_B[750+intVal];
",4,1,1,1,2,0,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,696,"        final int intFrac = (int) ((x - intVal) * 1024.0);
",6,2,0,3,6,1,0,0,0,9,50,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,697,"        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];
",2,0,1,1,2,1,0,0,0,7,51,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,698,"        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];
",2,0,1,1,2,1,0,0,0,7,51,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,704,"        final double epsilon = x - (intVal + intFrac / 1024.0);
",8,3,0,1,2,1,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,713,"        double z = 0.04168701738764507;
",2,0,0,0,0,0,0,0,0,2,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,714,"        z = z * epsilon + 0.1666666505023083;
",6,2,0,0,0,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,715,"        z = z * epsilon + 0.5000000000042687;
",6,2,0,0,0,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,716,"        z = z * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,717,"        z = z * epsilon + -3.940510424527919E-20;
",6,2,0,0,0,0,0,0,0,10,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,724,"        double tempA = intPartA * fracPartA;
",6,1,0,0,0,0,0,0,0,7,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,725,"        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;
",14,5,0,0,0,0,0,0,0,19,82,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,731,"        final double tempC = tempB + tempA;
",6,1,0,0,0,1,0,0,0,8,35,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,733,"        if (extra != 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,734,"            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;
",20,7,0,0,0,0,0,0,0,28,63,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,736,"            result = tempC*z + tempB + tempA;
",10,3,0,0,0,0,0,0,0,14,33,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,739,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,741,"            hiPrec[0] = tempA;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,742,"            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;
",16,6,1,1,2,0,0,0,0,25,58,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,745,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,753,"      return expm1(x, null);
",0,0,0,1,2,1,4,0,0,5,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,762,"        if (x != x || x == 0.0) { // NaN or zero
",6,3,0,1,3,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,763,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,766,"        if (x <= -1.0 || x >= 1.0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,769,"            double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,770,"            exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,771,"            if (x > 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,772,"                return -1.0 + hiPrec[0] + hiPrec[1];
",0,1,1,2,4,1,0,0,0,6,36,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,774,"                final double ra = -1.0 + hiPrec[0];
",2,1,1,1,2,1,0,0,0,7,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,775,"                double rb = -(ra + 1.0 - hiPrec[0]);
",4,2,1,2,4,0,0,0,0,9,36,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,776,"                rb += hiPrec[1];
",2,0,1,1,2,0,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,777,"                return ra + rb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,784,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,786,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,787,"            x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,788,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,792,"            int intFrac = (int) (x * 1024.0);
",4,1,0,2,4,0,0,0,0,5,33,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,793,"            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;
",2,1,1,1,2,0,0,0,0,7,47,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,794,"            double tempB = EXP_FRAC_TABLE_B[intFrac];
",2,0,1,1,2,0,0,0,0,6,41,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,796,"            double temp = tempA + tempB;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,797,"            tempB = -(temp - tempA - tempB);
",8,1,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,798,"            tempA = temp;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,800,"            temp = tempA * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,801,"            baseA = tempA + temp - temp;
",8,2,0,0,0,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,802,"            baseB = tempB + (tempA - baseA);
",8,2,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,804,"            epsilon = x - intFrac/1024.0;
",6,2,0,0,0,0,0,0,0,9,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,809,"        double zb = 0.008336750013465571;
",2,0,0,0,0,0,0,0,0,2,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,810,"        zb = zb * epsilon + 0.041666663879186654;
",6,2,0,0,0,0,0,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,811,"        zb = zb * epsilon + 0.16666666666745392;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,812,"        zb = zb * epsilon + 0.49999999999999994;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,813,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,814,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,816,"        double za = epsilon;
",4,0,0,0,0,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,817,"        double temp = za + zb;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,818,"        zb = -(temp - za - zb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,819,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,821,"        temp = za * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,822,"        temp = za + temp - temp;
",8,2,0,0,0,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,823,"        zb += za - temp;
",6,1,0,0,0,0,0,0,0,8,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,824,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,827,"        double ya = za * baseA;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,829,"        temp = ya + za * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,830,"        double yb = -(temp - ya - za * baseB);
",10,2,0,1,2,0,0,0,0,13,38,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,831,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,833,"        temp = ya + zb * baseA;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,834,"        yb += -(temp - ya - zb * baseA);
",10,2,0,1,2,0,0,0,0,14,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,835,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,837,"        temp = ya + zb * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,838,"        yb += -(temp - ya - zb*baseB);
",10,2,0,1,2,0,0,0,0,14,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,839,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,843,"        temp = ya + baseA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,844,"        yb += -(temp - baseA - ya);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,845,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,847,"        temp = ya + za;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,849,"        yb += -(temp - ya - za);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,850,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,852,"        temp = ya + baseB;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,854,"        yb += -(temp - ya - baseB);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,855,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,857,"        temp = ya + zb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,859,"        yb += -(temp - ya - zb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,860,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,862,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,864,"            double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,865,"            double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,866,"            double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,867,"            double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,868,"            temp = ratio * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,869,"            final double ra = ratio + temp - temp;
",8,2,0,0,0,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,870,"            double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,872,"            temp = denom * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,873,"            za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,874,"            zb = denom - za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,876,"            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,60,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,887,"            rb += yb * denomr;                      // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,888,"            rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,891,"            ya = -ra;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,892,"            yb = -rb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,895,"        if (hiPrecOut != null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,896,"            hiPrecOut[0] = ya;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,897,"            hiPrecOut[1] = yb;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,900,"        return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,950,"            final double a = d * 9.31322574615478515625E-10;
",4,1,0,0,0,1,0,0,0,6,48,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,951,"            split[0] = (d + a - d) * 1073741824.0;
",6,3,1,2,4,0,0,0,0,12,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,952,"            split[1] = d - split[0];
",2,1,1,2,4,0,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1023,"            in[0] = in[1];
",0,0,1,2,4,0,0,0,0,5,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1024,"            in[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1155,"        return log(x, null);
",0,0,0,1,2,1,4,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1165,"        long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1168,"        if ((bits & 0x8000000000000000L) != 0 || x != x) {
",6,4,0,2,5,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1169,"            if (x != 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1170,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1171,"                    hiPrec[0] = Double.NaN;
",4,0,1,1,2,0,0,0,0,7,23,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1174,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1179,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1180,"            if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1181,"                hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1184,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1188,"        int exp = (int)(bits >> 52)-1023;
",4,2,0,2,4,0,0,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1190,"        if ((bits & 0x7ff0000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1192,"            if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1194,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1195,"                    hiPrec[0] = Double.NEGATIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1198,"                return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1202,"            bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1203,"            while ( (bits & 0x0010000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,44,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1204,"                exp--;
",2,0,0,0,0,0,0,0,0,3,6,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1205,"                bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1210,"        if (exp == -1 || exp == 0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1211,"            if (x < 1.01 && x > 0.99 && hiPrec == null) {
",6,5,0,1,3,0,0,0,0,11,45,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1216,"                double xa = x - 1.0;
",4,1,0,0,0,0,0,0,0,5,20,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1217,"                double xb = xa - x + 1.0;
",6,2,0,0,0,0,0,0,0,8,25,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1218,"                double tmp = xa * 1073741824.0;
",4,1,0,0,0,0,0,0,0,5,31,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1219,"                double aa = xa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,27,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1220,"                double ab = xa - aa;
",6,1,0,0,0,0,0,0,0,7,20,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1221,"                xa = aa;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1222,"                xb = ab;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1224,"                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];
",6,1,1,2,4,0,0,0,0,9,53,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1225,"                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];
",6,1,1,2,4,0,0,0,0,9,53,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1227,"                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,53,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1229,"                    aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1230,"                    ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1232,"                    tmp = aa * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1233,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1234,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1237,"                    aa = ya + LN_QUICK_COEF[i][0];
",4,1,1,2,4,0,0,0,0,10,30,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1238,"                    ab = yb + LN_QUICK_COEF[i][1];
",4,1,1,2,4,0,0,0,0,10,30,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1240,"                    tmp = aa * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,24,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1241,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1242,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1246,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1247,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1249,"                tmp = aa * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1250,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1251,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1253,"                return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1258,"        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];
",4,2,1,5,10,0,0,0,0,8,66,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1269,"        double epsilon = (double)(bits & 0x3ffffffffffL) / (4503599627370496.0 + (bits & 0x000ffc0000000000L));
",6,4,0,4,8,0,0,0,0,10,103,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1271,"        double lnza = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1272,"        double lnzb = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1274,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1276,"            double tmp = epsilon * 1073741824.0;
",4,1,0,0,0,0,0,0,0,5,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1277,"            double aa = epsilon + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1278,"            double ab = epsilon - aa;
",6,1,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1279,"            double xa = aa;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1280,"            double xb = ab;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1283,"            double numer = (double)(bits & 0x3ffffffffffL);
",4,1,0,2,4,0,0,0,0,5,47,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1284,"            double denom = 4503599627370496.0 + (bits & 0x000ffc0000000000L);
",4,2,0,1,2,0,0,0,0,6,65,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1285,"            aa = numer - xa*denom - xb * denom;
",12,4,0,0,0,0,0,0,0,17,35,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1286,"            xb += aa / denom;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1289,"            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];
",6,1,1,2,4,0,0,0,0,9,57,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1290,"            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];
",6,1,1,2,4,0,0,0,0,9,57,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1292,"            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,55,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1294,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1295,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1297,"                tmp = aa * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1298,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1299,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1302,"                aa = ya + LN_HI_PREC_COEF[i][0];
",4,1,1,2,4,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1303,"                ab = yb + LN_HI_PREC_COEF[i][1];
",4,1,1,2,4,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1305,"                tmp = aa * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1306,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1307,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1311,"            aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1312,"            ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1320,"            lnza = aa + ab;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1321,"            lnzb = -(lnza - aa - ab);
",8,1,0,1,2,0,0,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1322,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1325,"            lnza = -0.16624882440418567;
",2,0,0,0,0,0,0,0,0,4,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1326,"            lnza = lnza * epsilon + 0.19999954120254515;
",6,2,0,0,0,0,0,0,0,9,44,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1327,"            lnza = lnza * epsilon + -0.2499999997677497;
",6,2,0,0,0,0,0,0,0,10,44,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1328,"            lnza = lnza * epsilon + 0.3333333333332802;
",6,2,0,0,0,0,0,0,0,9,43,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1329,"            lnza = lnza * epsilon + -0.5;
",6,2,0,0,0,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1330,"            lnza = lnza * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1331,"            lnza = lnza * epsilon;
",6,1,0,0,0,0,0,0,0,8,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1348,"        double a = LN_2_A*exp;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1349,"        double b = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1350,"        double c = a+lnm[0];
",4,1,1,1,2,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1351,"        double d = -(c-a-lnm[0]);
",6,1,1,2,4,0,0,0,0,10,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1352,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1353,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1355,"        c = a + lnza;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1356,"        d = -(c - a - lnza);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1357,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1358,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1360,"        c = a + LN_2_B*exp;
",8,2,0,0,0,0,0,0,0,11,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1361,"        d = -(c - a - LN_2_B*exp);
",10,2,0,1,2,0,0,0,0,14,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1362,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1363,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1365,"        c = a + lnm[1];
",4,1,1,1,2,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1366,"        d = -(c - a - lnm[1]);
",6,1,1,2,4,0,0,0,0,11,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1367,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1368,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1370,"        c = a + lnzb;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1371,"        d = -(c - a - lnzb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1372,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1373,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1375,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1376,"            hiPrec[0] = a;
",2,0,1,1,2,0,0,0,0,5,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1377,"            hiPrec[1] = b;
",2,0,1,1,2,0,0,0,0,5,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1380,"        return a + b;
",4,1,0,0,0,1,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1388,"        double xpa = 1.0 + x;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1389,"        double xpb = -(xpa - 1.0 - x);
",6,1,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1391,"        if (x == -1) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1392,"            return x/0.0;   // -Infinity
",2,1,0,0,0,1,0,0,0,3,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1395,"        if (x > 0 && 1/x == 0) { // x = Infinity
",4,4,0,1,3,0,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1396,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1399,"        if (x>1e-6 || x<-1e-6) {
",4,3,0,1,3,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1400,"            double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1402,"            log(xpa, hiPrec);
",0,0,0,1,2,0,6,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1406,"            double fx1 = xpb/xpa;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1408,"            double epsilon = 0.5 * fx1 + 1.0;
",4,2,0,0,0,0,0,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1409,"            epsilon = epsilon * fx1;
",6,1,0,0,0,0,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1411,"            return epsilon + hiPrec[1] + hiPrec[0];
",2,1,1,2,4,1,0,0,0,7,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1415,"        double y = x * 0.333333333333333 - 0.5;
",4,2,0,0,0,0,0,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1416,"        y = y * x + 1.0;
",6,2,0,0,0,0,0,0,0,9,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1417,"        y = y * x;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1419,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1427,"        final double hiPrec[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1429,"        log(x, hiPrec);
",0,0,0,1,2,0,6,0,0,6,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1431,"        final double tmp = hiPrec[0] * 1073741824.0;
",2,1,1,1,2,1,0,0,0,6,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1432,"        final double lna = hiPrec[0] + tmp - tmp;
",6,2,1,1,2,1,0,0,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1433,"        final double lnb = hiPrec[0] - lna + hiPrec[1];
",4,2,1,2,4,1,0,0,0,11,47,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1435,"        final double rln10a = 0.4342944622039795;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1436,"        final double rln10b = 1.9699272335463627E-8;
",2,0,0,0,0,1,0,0,0,3,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1438,"        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;
",16,7,0,0,0,1,0,0,0,23,65,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1449,"        final double lns[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,35,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1451,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1452,"            return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1455,"        if (x != x) { // X is NaN
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1456,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1460,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1461,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1462,"            if ((bits & 0x8000000000000000L) != 0) {
",2,2,0,2,5,0,0,0,0,4,40,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1464,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1466,"                if (y < 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1467,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1470,"                if (y < 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1471,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1474,"                if (y > 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1475,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1479,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1480,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1482,"            if (y > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1483,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1486,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1489,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1490,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1491,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1493,"            if (y < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1494,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1496,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1500,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1501,"            if (x * x == 1.0)
",4,2,0,1,2,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1502,"              return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1504,"            if (x * x > 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1505,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1507,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1511,"        if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1512,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1513,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1516,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1517,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1518,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1519,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1522,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1525,"            if (y > 0)  {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1526,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1527,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1528,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1531,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1535,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1537,"            if (x * x == 1.0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1538,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1541,"            if (x * x < 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1542,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1544,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1549,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1551,"            if (y >= 4503599627370496.0 || y <= -4503599627370496.0) {
",4,3,0,1,3,0,0,0,0,8,58,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1552,"                return pow(-x, y);
",2,0,0,1,2,1,4,0,0,7,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1555,"            if (y == (long) y) {
",4,1,0,2,5,0,0,0,0,5,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1557,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
",6,2,0,4,8,1,8,0,0,19,53,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1559,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1566,"        if (y < 8e298 && y > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1567,"            double tmp1 = y * 1073741824.0;
",4,1,0,0,0,0,0,0,0,5,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1568,"            ya = y + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,11,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1569,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1570,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1571,"            double tmp1 = y * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,45,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1572,"            double tmp2 = tmp1 * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,48,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1573,"            ya = (tmp1 + tmp2 - tmp1) * 1073741824.0 * 1073741824.0;
",8,3,0,1,2,0,0,0,0,12,56,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1574,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1578,"        log(x, lns);
",0,0,0,1,2,0,6,0,0,6,12,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1579,"        double lna = lns[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1580,"        double lnb = lns[1];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1583,"        double tmp1 = lna * 1073741824.0;
",4,1,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1584,"        double tmp2 = lna + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1585,"        lnb += lna - tmp2;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1586,"        lna = tmp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1589,"        final double aa = lna * ya;
",6,1,0,0,0,1,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1590,"        final double ab = lna * yb + lnb * ya + lnb * yb;
",14,5,0,0,0,1,0,0,0,20,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1592,"        lna = aa+ab;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1593,"        lnb = -(lna - aa - ab);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1595,"        double z = 1.0 / 120.0;
",2,1,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1596,"        z = z * lnb + (1.0 / 24.0);
",6,3,0,1,2,0,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1597,"        z = z * lnb + (1.0 / 6.0);
",6,3,0,1,2,0,0,0,0,10,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1598,"        z = z * lnb + 0.5;
",6,2,0,0,0,0,0,0,0,9,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1599,"        z = z * lnb + 1.0;
",6,2,0,0,0,0,0,0,0,9,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1600,"        z = z * lnb;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1602,"        final double result = exp(lna, z, null);
",2,0,0,1,2,1,6,0,0,10,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1604,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1859,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1861,"        double p = 2.7553817452272217E-6;
",2,0,0,0,0,0,0,0,0,2,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1862,"        p = p * x2 + -1.9841269659586505E-4;
",6,2,0,0,0,0,0,0,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1863,"        p = p * x2 + 0.008333333333329196;
",6,2,0,0,0,0,0,0,0,9,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1864,"        p = p * x2 + -0.16666666666666666;
",6,2,0,0,0,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1867,"        p = p * x2 * x;
",8,1,0,0,0,0,0,0,0,10,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1869,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1879,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1881,"        double p = 2.479773539153719E-5;
",2,0,0,0,0,0,0,0,0,2,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1882,"        p = p * x2 + -0.0013888888689039883;
",6,2,0,0,0,0,0,0,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1883,"        p = p * x2 + 0.041666666666621166;
",6,2,0,0,0,0,0,0,0,9,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1884,"        p = p * x2 + -0.49999999999999994;
",6,2,0,0,0,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1885,"        p *= x2;
",4,0,0,0,0,0,0,0,0,5,8,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1887,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1898,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1899,"        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1902,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1903,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1904,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1905,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1908,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1909,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1910,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1911,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1914,"        final double temp = sinEpsA * 1073741824.0;
",4,1,0,0,0,1,0,0,0,6,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1915,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1916,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1917,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1943,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1944,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1946,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1947,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1948,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1949,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1950,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1952,"        t = costA * sinEpsA;
",6,1,0,0,0,0,0,0,0,8,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1953,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1954,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1955,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1956,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1958,"        b = b + sintA * cosEpsB + costA * sinEpsB;
",12,4,0,0,0,0,0,0,0,17,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,1973,"        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;
",18,6,0,0,0,0,0,0,0,25,68,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2000,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2001,"            t = ((costA + costB) * (cosEpsA + cosEpsB) -
",10,5,0,2,5,0,0,0,0,16,44,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2003,"            c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2004,"            d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2005,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2006,"            b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2009,"        result = a + b;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2011,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2022,"        final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2023,"        final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2025,"        final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2026,"        double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2027,"        b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2029,"        return sinQ(a, b);
",0,0,0,1,2,1,6,0,0,6,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2042,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2043,"        final double epsilon = xa - EIGHTHES[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2046,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2047,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2048,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2049,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2052,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2053,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2054,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2055,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2058,"        double temp = sinEpsA * 1073741824.0;
",4,1,0,0,0,0,0,0,0,5,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2059,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2060,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2061,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2086,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2087,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2090,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2091,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2092,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2093,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2094,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2096,"        t = costA*sinEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2097,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2098,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2099,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2100,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2102,"        b = b + sintA*cosEpsB + costA*sinEpsB;
",12,4,0,0,0,0,0,0,0,17,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2103,"        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;
",18,6,0,0,0,0,0,0,0,25,62,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2105,"        double sina = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2106,"        double sinb = -(sina - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2110,"        a = b = c = d = 0.0;
",8,0,0,0,0,0,0,0,0,12,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2112,"        t = costA*cosEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2113,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2114,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2115,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2116,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2118,"        t = -sintA*sinEpsA;
",6,1,0,0,0,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2119,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2120,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2121,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2122,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2124,"        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;
",16,6,0,0,0,0,0,0,0,23,54,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2125,"        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);
",16,6,0,1,2,0,0,0,0,23,56,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2127,"        double cosa = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2128,"        double cosb = -(cosa - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2130,"        if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2132,"            tmp = cosa; cosa = sina; sina = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2133,"            tmp = cosb; cosb = sinb; sinb = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2147,"        double est = sina/cosa;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2150,"        temp = est * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2151,"        double esta = (est + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2152,"        double estb =  est - esta;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2154,"        temp = cosa * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2155,"        double cosaa = (cosa + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2156,"        double cosab =  cosa - cosaa;
",6,1,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2159,"        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding
",22,9,0,1,2,0,0,0,0,31,114,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2160,"        err += sinb/cosa;                     // Change in est due to sinb
",6,1,0,0,0,0,0,0,0,8,66,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2161,"        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb
",10,3,0,0,0,0,0,0,0,15,66,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2163,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2166,"            double xbadj = xb + est*est*xb;
",10,2,0,0,0,0,0,0,0,12,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2167,"            if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2168,"                xbadj = -xbadj;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2171,"            err += xbadj;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2174,"        return est+err;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2191,"        long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2192,"        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2195,"        inbits &= 0x000fffffffffffffL;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2196,"        inbits |= 0x0010000000000000L;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2199,"        exponent++;
",2,0,0,0,0,0,0,0,0,3,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2200,"        inbits <<= 11;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2206,"        int idx = exponent >> 6;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2207,"        int shift = exponent - (idx << 6);
",6,2,0,1,2,0,0,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2209,"        if (shift != 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2210,"            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);
",8,3,1,3,6,0,0,0,0,14,53,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2211,"            shpi0 |= RECIP_2PI[idx] >>> (64-shift);
",4,2,1,2,4,0,0,0,0,11,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2212,"            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));
",8,5,1,5,10,0,0,0,0,20,70,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2213,"            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));
",10,6,1,5,10,0,0,0,0,21,72,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2215,"            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];
",6,2,1,2,4,0,0,0,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2216,"            shpiA = RECIP_2PI[idx];
",2,0,1,1,2,0,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2217,"            shpiB = RECIP_2PI[idx+1];
",4,1,1,1,2,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2221,"        long a = inbits >>> 32;
",4,1,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2222,"        long b = inbits & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2224,"        long c = shpiA >>> 32;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2225,"        long d = shpiA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2227,"        long ac = a * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2228,"        long bd = b * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2229,"        long bc = b * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2230,"        long ad = a * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2232,"        long prodB = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2233,"        long prodA = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2235,"        boolean bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,47,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2236,"        boolean bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2237,"        boolean bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2240,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2242,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2245,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2246,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2248,"        prodB = prodB + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2249,"        prodA = prodA + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2251,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2254,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2256,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2260,"        c = shpiB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2261,"        d = shpiB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2262,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2263,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2264,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2267,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2269,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2270,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2271,"        prodB += ac;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2272,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2274,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2276,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2280,"        c = shpi0 >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2281,"        d = shpi0 & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2283,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2284,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2285,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2287,"        prodA += bd + ((bc + ad) << 32);
",8,3,0,2,4,0,0,0,0,12,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2299,"        int intPart = (int)(prodA >>> 62);
",4,1,0,2,4,0,0,0,0,5,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2302,"        prodA <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2303,"        prodA |= prodB >>> 62;
",4,1,0,0,0,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2304,"        prodB <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2307,"        a = prodA >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2308,"        b = prodA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2310,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2311,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2313,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2314,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2315,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2316,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2318,"        long prod2B = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2319,"        long prod2A = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2321,"        bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2322,"        bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2323,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2326,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2328,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2331,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2332,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2334,"        prod2B = prod2B + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2335,"        prod2A = prod2A + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2337,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2340,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2342,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2346,"        c = PI_O_4_BITS[1] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2347,"        d = PI_O_4_BITS[1] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2348,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2349,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2350,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2353,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2355,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2356,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2357,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2358,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2360,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2362,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2366,"        a = prodB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2367,"        b = prodB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2368,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2369,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2370,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2371,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2372,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2375,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2377,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2378,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2379,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2380,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2382,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2384,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2388,"        double tmpA = (prod2A >>> 12) / 4503599627370496.0;  // High order 52 bits
",4,2,0,1,2,0,0,0,0,6,74,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2389,"        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / 4503599627370496.0 / 4503599627370496.0; // Low bits
",6,5,0,4,8,0,0,0,0,11,114,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2391,"        double sumA = tmpA + tmpB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2392,"        double sumB = -(sumA - tmpA - tmpB);
",8,1,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2395,"        result[0] = intPart;
",2,0,1,1,2,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2396,"        result[1] = sumA * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2397,"        result[2] = sumB * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2398,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2406,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2407,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2409,"        double xb = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2412,"        xa = x;
",4,0,0,0,0,0,0,0,0,5,7,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2413,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2414,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2415,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2419,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2420,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2421,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2422,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2424,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2427,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2428,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2432,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2436,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2437,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2438,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2439,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2440,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2441,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2446,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2452,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2453,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2454,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2456,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2457,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2458,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2459,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2461,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2462,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2463,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2464,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2466,"                if (remA > 0.0)
",2,1,0,1,2,0,0,0,0,3,15,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2467,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2472,"                k--;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2473,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2474,"            quadrant = k & 3;
",4,1,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2475,"            xa = remA;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2476,"            xb = remB;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2479,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2480,"            quadrant ^= 2;  // Flip bit 1
",2,0,0,0,0,0,0,0,0,3,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2483,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2485,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2487,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2489,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2491,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2493,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2503,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2506,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2507,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2508,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2511,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2512,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2516,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2517,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2521,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2522,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2523,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2524,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2525,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2526,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2531,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2537,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2538,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2539,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2541,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2542,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2543,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2544,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2546,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2547,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2548,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2549,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2551,"                if (remA > 0.0)
",2,1,0,1,2,0,0,0,0,3,15,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2552,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2557,"                k--;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2558,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2559,"            quadrant = k & 3;
",4,1,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2560,"            xa = remA;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2561,"            xb = remB;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2567,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2569,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2571,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2573,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2575,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2577,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2587,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2588,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2591,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2592,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2593,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2594,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2598,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2599,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2600,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2601,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2603,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2606,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2607,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2611,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2612,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2616,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2617,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2618,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2619,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2620,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2621,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2626,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2632,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2633,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2634,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2636,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2637,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2638,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2639,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2641,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2642,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2643,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2644,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2646,"                if (remA > 0.0)
",2,1,0,1,2,0,0,0,0,3,15,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2647,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2652,"                k--;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2653,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2654,"            quadrant = k & 3;
",4,1,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2655,"            xa = remA;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2656,"            xb = remB;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2659,"        if (xa > 1.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2661,"            final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2662,"            final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2664,"            final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2665,"            double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2666,"            b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2668,"            xa = a + b;
",6,1,0,0,0,0,0,0,0,8,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2669,"            xb = -(xa - a - b);
",8,1,0,1,2,0,0,0,0,11,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2670,"            quadrant ^= 1;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2671,"            negative ^= true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2675,"        if ((quadrant & 1) == 0) {
",2,2,0,2,5,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2676,"            result = tanQ(xa, xb, false);
",2,0,0,1,2,0,6,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2678,"            result = -tanQ(xa, xb, true);
",2,0,0,1,2,0,6,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2681,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2682,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2685,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2694,"        return atan(x, 0.0, false);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2704,"        boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2707,"        if (xa < 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2709,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2710,"            xb = -xb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2711,"            negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2714,"        if (xa > 1.633123935319537E16) { // Very large input
",2,1,0,1,3,0,0,0,0,3,52,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2715,"            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);
",12,3,0,3,6,1,0,0,0,16,61,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2719,"        if (xa < 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2720,"            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);
",8,4,0,4,8,0,0,0,0,14,65,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2722,"            double temp = 1.0/xa;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2723,"            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);
",8,4,0,4,8,0,0,0,0,15,74,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2725,"        double epsA = xa - TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,40,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2726,"        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);
",6,2,1,2,4,0,0,0,0,13,50,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2727,"        epsB += xb - TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2729,"        double temp = epsA + epsB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2730,"        epsB = -(temp - epsA - epsB);
",8,1,0,1,2,0,0,0,0,11,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2731,"        epsA = temp;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2734,"        temp = xa * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2735,"        double ya = xa + temp - temp;
",8,2,0,0,0,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2736,"        double yb = xb + xa - ya;
",8,2,0,0,0,0,0,0,0,10,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2737,"        xa = ya;
",4,0,0,0,0,0,0,0,0,5,8,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2738,"        xb += yb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2741,"        if (idx == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2744,"            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
",6,5,1,5,10,0,0,0,0,19,87,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2746,"            ya = epsA * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2747,"            yb = epsB * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2748,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2749,"            double temp2 = xa * TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,41,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2750,"            double za = 1.0 + temp2;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2751,"            double zb = -(za - 1.0 - temp2);
",6,1,0,1,2,0,0,0,0,8,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2752,"            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];
",6,3,1,2,4,0,0,0,0,18,62,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2753,"            temp = za + temp2;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2754,"            zb += -(temp - za - temp2);
",8,1,0,1,2,0,0,0,0,11,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2755,"            za = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2757,"            zb += xb * TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2758,"            ya = epsA / za;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2760,"            temp = ya * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2761,"            final double yaa = (ya + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2762,"            final double yab = ya - yaa;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2764,"            temp = za * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2765,"            final double zaa = (za + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2766,"            final double zab = za - zaa;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2769,"            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;
",22,9,0,1,2,0,0,0,0,32,65,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2771,"            yb += -epsA * zb / za / za;
",10,3,0,0,0,0,0,0,0,15,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2772,"            yb += epsB / za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2776,"        epsA = ya;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2777,"        epsB = yb;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2780,"        double epsA2 = epsA*epsA;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2791,"        yb = 0.07490822288864472;
",2,0,0,0,0,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2792,"        yb = yb * epsA2 + -0.09088450866185192;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2793,"        yb = yb * epsA2 + 0.11111095942313305;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2794,"        yb = yb * epsA2 + -0.1428571423679182;
",6,2,0,0,0,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2795,"        yb = yb * epsA2 + 0.19999999999923582;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2796,"        yb = yb * epsA2 + -0.33333333333333287;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2797,"        yb = yb * epsA2 * epsA;
",8,1,0,0,0,0,0,0,0,10,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2800,"        ya = epsA;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2802,"        temp = ya + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2803,"        yb = -(temp - ya - yb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2804,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2807,"        yb += epsB / (1.0 + epsA * epsA);
",8,3,0,1,2,0,0,0,0,12,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2813,"        double za = EIGHTHES[idx] + ya;
",4,1,1,1,2,0,0,0,0,9,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2814,"        double zb = -(za - EIGHTHES[idx] - ya);
",6,1,1,2,4,0,0,0,0,12,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2815,"        temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2816,"        zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2817,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2819,"        result = za + zb;
",6,1,0,0,0,0,0,0,0,8,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2820,"        resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,11,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2822,"        if (leftPlane) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2824,"            final double pia = 1.5707963267948966*2.0;
",2,1,0,0,0,1,0,0,0,4,42,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2825,"            final double pib = 6.123233995736766E-17*2.0;
",2,1,0,0,0,1,0,0,0,4,45,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2827,"            za = pia - result;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2828,"            zb = -(za - pia + result);
",8,2,0,1,2,0,0,0,0,12,26,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2829,"            zb += pib - resultb;
",6,1,0,0,0,0,0,0,0,8,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2831,"            result = za + zb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2832,"            resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2836,"        if (negate ^ leftPlane) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2837,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2840,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2850,"        if (x !=x || y != y) {
",8,3,0,1,3,0,0,0,0,11,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2851,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2854,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2855,"            double result = x*y;
",6,1,0,0,0,0,0,0,0,7,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2856,"            double invx = 1.0/x;
",4,1,0,0,0,0,0,0,0,5,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2857,"            double invy = 1.0/y;
",4,1,0,0,0,0,0,0,0,5,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2859,"            if (invx == 0.0) { // X is infinite
",2,1,0,1,3,0,0,0,0,3,35,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2860,"                if (x > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2861,"                    return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2863,"                    return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2867,"            if (result != result) { // y must be infinite
",4,1,0,1,3,0,0,0,0,5,45,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2868,"                return x/y;
",4,1,0,0,0,1,0,0,0,5,11,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2871,"            if (x < 0.0 || invx < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2872,"                if (y < 0.0 || invy < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2873,"                    return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2875,"                    return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2878,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2882,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2883,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2884,"                return Math.PI/4.0;
",4,1,0,0,0,1,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2887,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2888,"                return Math.PI*3.0/4.0;
",4,2,0,0,0,1,0,0,0,6,23,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2891,"            return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2894,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2895,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2896,"                return -Math.PI/4.0;
",4,1,0,0,0,1,0,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2899,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2900,"                return -Math.PI*3.0/4.0;
",4,2,0,0,0,1,0,0,0,7,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2903,"            return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2906,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2907,"            if (y > 0.0 || 1/y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2908,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2911,"            if (y < 0.0 || 1/y < 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2912,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2916,"        if (x == Double.NEGATIVE_INFINITY)
",6,1,0,1,2,0,0,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2918,"            if (y > 0.0 || 1/y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2919,"                return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2922,"            if (y < 0.0 || 1/y < 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2923,"                return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2927,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2928,"            if (y > 0.0 || 1/y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2929,"                return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2932,"            if (y < 0.0 || 1/y < 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2933,"                return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2937,"        if (x > 8e298 || x < -8e298) { // This would cause split of x to fail
",4,3,0,1,3,0,0,0,0,8,69,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2938,"            x *= 9.31322574615478515625E-10;
",2,0,0,0,0,0,0,0,0,3,32,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2939,"            y *= 9.31322574615478515625E-10;
",2,0,0,0,0,0,0,0,0,3,32,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2943,"        double temp = x * 1073741824.0;
",4,1,0,0,0,0,0,0,0,5,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2944,"        final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2945,"        final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2948,"        final double r = y/x;
",6,1,0,0,0,1,0,0,0,8,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2949,"        temp = r * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2950,"        double ra = r + temp - temp;
",8,2,0,0,0,0,0,0,0,10,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2951,"        double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2953,"        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
",22,9,0,1,2,0,0,0,0,32,54,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2955,"        temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2956,"        rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2957,"        ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2960,"        double result = atan(ra, rb, x < 0);
",4,1,0,1,2,0,6,0,0,11,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2962,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2970,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2971,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2974,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2975,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2978,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2979,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2982,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2983,"          return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2989,"      double temp = x * 1073741824.0;
",4,1,0,0,0,0,0,0,0,5,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2990,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2991,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2994,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2995,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2998,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,2999,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3001,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3002,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3004,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3005,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3006,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3010,"      y = sqrt(za);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3011,"      temp = y * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3012,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3013,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3016,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3019,"      double dx = zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3022,"      double r = x/y;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3023,"      temp = r * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3024,"      double ra = r + temp - temp;
",8,2,0,0,0,0,0,0,0,10,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3025,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3027,"      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3028,"      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
",10,3,0,0,0,0,0,0,0,15,65,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3030,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3031,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3032,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3034,"      return atan(ra, rb, false);
",0,0,0,1,2,1,6,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3042,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3043,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3046,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3047,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3050,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3051,"          return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3054,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3055,"          return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3058,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3059,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3065,"      double temp = x * 1073741824.0;
",4,1,0,0,0,0,0,0,0,5,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3066,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3067,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3070,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3071,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3074,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3075,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3077,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3078,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3080,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3081,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3082,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3085,"      double y = sqrt(za);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3086,"      temp = y * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3087,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3088,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3091,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3094,"      yb += zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3095,"      y = ya+yb;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3096,"      yb = -(y - ya - yb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3099,"      double r = y/x;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3100,"      temp = r * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3101,"      double ra = r + temp - temp;
",8,2,0,0,0,0,0,0,0,10,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3102,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3104,"      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3105,"      rb += yb / x;  // Add in effect additional bits of sqrt.
",6,1,0,0,0,0,0,0,0,8,56,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3107,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3108,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3109,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3111,"      return atan(ra, rb, x<0);
",2,1,0,1,2,1,6,0,0,9,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3120,"      long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3121,"      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3122,"      boolean subnormal = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3124,"      if (exponent == -1023) {
",2,1,0,1,3,0,0,0,0,4,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3125,"          if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3126,"              return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3130,"          subnormal = true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3131,"          x *= 1.8014398509481984E16;  // 2^54
",2,0,0,0,0,0,0,0,0,3,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3132,"          inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3133,"          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,8,49,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3136,"      if (exponent == 1024) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3138,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3142,"      int exp3 = exponent / 3;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3145,"      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |
",4,2,0,1,3,0,4,0,0,10,68,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3149,"      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);
",4,2,0,2,4,1,4,0,0,11,98,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3152,"      double est = -0.010714690733195933;
",2,0,0,0,0,0,0,0,0,3,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3153,"      est = est * mant + 0.0875862700108075;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3154,"      est = est * mant + -0.3058015757857271;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3155,"      est = est * mant + 0.7249995199969751;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3156,"      est = est * mant + 0.5039018405998233;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3158,"      est *= CBRTTWO[exponent % 3 + 2];
",4,2,1,1,2,0,0,0,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3163,"      final double xs = x / (p2*p2*p2);
",10,2,0,1,2,1,0,0,0,13,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3164,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3165,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3168,"      double temp = est * 1073741824.0;
",4,1,0,0,0,0,0,0,0,5,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3169,"      double ya = est + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3170,"      double yb = est - ya;
",6,1,0,0,0,0,0,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3172,"      double za = ya * ya;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3173,"      double zb = ya * yb * 2.0 + yb * yb;
",10,3,0,0,0,0,0,0,0,13,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3174,"      temp = za * 1073741824.0;
",4,1,0,0,0,0,0,0,0,6,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3175,"      double temp2 = za + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3176,"      zb += za - temp2;
",6,1,0,0,0,0,0,0,0,8,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3177,"      za = temp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3179,"      zb = za * yb + ya * zb + zb * yb;
",14,5,0,0,0,0,0,0,0,20,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3180,"      za = za * ya;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3182,"      double na = xs - za;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3183,"      double nb = -(na - xs + za);
",8,2,0,1,2,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3184,"      nb -= zb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3186,"      est += (na+nb)/(3*est*est);
",10,3,0,2,4,0,0,0,0,14,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3189,"      est *= p2;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3191,"      if (subnormal) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3192,"          est *= 3.814697265625E-6;  // 2^-18
",2,0,0,0,0,0,0,0,0,3,35,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3195,"      return est;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3205,"        final double facta = 0.01745329052209854;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3206,"        final double factb = 1.997844754509471E-9;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3208,"        double temp = x * 1073741824.0;
",4,1,0,0,0,0,0,0,0,5,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3209,"        double xa = x + temp - temp;
",8,2,0,0,0,0,0,0,0,10,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3210,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3212,"        return xb * factb + xb * facta + xa * factb + xa * facta;
",16,7,0,0,0,1,0,0,0,23,57,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3222,"        final double facta = 57.2957763671875;
",2,0,0,0,0,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3223,"        final double factb = 3.145894820876798E-6;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3225,"        double temp = x * 1073741824.0;
",4,1,0,0,0,0,0,0,0,5,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3226,"        double xa = x + temp - temp;
",8,2,0,0,0,0,0,0,0,10,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3227,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3229,"        return xb * factb + xb * facta + xa * factb + xa * facta;
",16,7,0,0,0,1,0,0,0,23,57,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3238,"        return (x < 0) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3247,"        return (x < 0l) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3256,"        return (x < 0.0f) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3265,"        return (x < 0.0) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3275,"        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,72,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3297,"        if (Double.isNaN(d) || Double.isInfinite(d)) {
",0,1,0,3,7,0,12,0,0,13,46,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3298,"            return d;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3299,"        } else if (d == 0) {
",2,1,0,1,4,0,0,0,0,3,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3300,"            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,62,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3306,"        long bits     = Double.doubleToLongBits(d);
",2,0,0,1,2,0,6,0,0,8,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3307,"        long sign     = bits & 0x8000000000000000L;
",4,1,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3308,"        long exponent = bits & 0x7ff0000000000000L;
",4,1,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3309,"        long mantissa = bits & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3311,"        if (d * (direction - d) >= 0) {
",6,3,0,2,5,0,0,0,0,9,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3313,"            if (mantissa == 0x000fffffffffffffL) {
",2,1,0,1,3,0,0,0,0,3,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3314,"                return Double.longBitsToDouble(sign |
",2,1,0,0,1,1,4,0,0,7,37,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3317,"                return Double.longBitsToDouble(sign |
",2,1,0,0,1,1,4,0,0,7,37,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3322,"            if (mantissa == 0L) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3323,"                return Double.longBitsToDouble(sign |
",2,1,0,0,1,1,4,0,0,7,37,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3327,"                return Double.longBitsToDouble(sign |
",2,1,0,0,1,1,4,0,0,7,37,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3341,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3342,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3345,"        if (x >= 4503599627370496.0 || x <= -4503599627370496.0) {
",4,3,0,1,3,0,0,0,0,8,58,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3346,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3349,"        y = (long) x;
",4,0,0,1,2,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3350,"        if (x < 0 && y != x) {
",6,3,0,1,3,0,0,0,0,9,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3351,"            y--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3354,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3355,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3358,"        return (double) y;
",2,0,0,1,2,1,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3368,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3369,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3372,"        y = floor(x);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3373,"        if (y == x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3374,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3377,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3379,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3380,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3383,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3391,"        double y = floor(x);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3392,"        double d = x - y;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3394,"        if (d > 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3395,"            return y+1.0;
",2,1,0,0,0,1,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3397,"        if (d < 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3398,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3402,"        long z = (long) y;
",4,0,0,1,2,0,0,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3403,"        return (z & 1) == 0 ? y : y + 1.0;
",6,3,0,1,2,1,0,0,0,9,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3411,"        return (long) floor(x + 0.5);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3419,"        return Math.round(x);
",0,0,0,1,2,1,6,0,0,6,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3428,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3437,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3446,"        return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);
",16,2,0,3,6,1,4,0,0,22,59,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3455,"        return (a <= b) ? a : (Double.isNaN(a + b) ? Double.NaN : b);
",16,2,0,3,6,1,4,0,0,22,61,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3473,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3482,"        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
",16,2,0,3,6,1,4,0,0,22,59,5,0.00000,1
defect4j,math,org/apache/commons/math/util/FastMath,59,3491,"        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);
",16,2,0,3,6,1,4,0,0,22,61,5,0.00000,0
