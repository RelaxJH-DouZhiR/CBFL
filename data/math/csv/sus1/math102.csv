dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,"        for (int i = 0; i < in.length; i ++) {
",10,1,0,1,3,0,0,0,0,12,38,4,1,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,"            if (in[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,16,6,1,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,72,"        if (x <= 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,75,"            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());
",4,1,0,3,6,0,8,0,0,14,57,6,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,78,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,122,"        return alpha;
",2,0,0,0,0,1,0,0,0,2,13,4,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,142,"        return beta;
",2,0,0,0,0,1,0,0,0,2,12,4,1,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,82,"        return getGamma().cumulativeProbability(x);
",0,0,0,2,4,1,6,0,0,6,43,5,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);
",4,0,0,1,2,1,8,0,0,12,67,5,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,158,"        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {
",4,3,0,5,11,0,12,0,0,19,68,4,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,160,"        } else if (x == 0.0) {
",2,1,0,1,4,0,0,0,0,3,22,5,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,162,"        } else if (a >= 1.0 && x > a) {
",6,3,0,1,4,0,0,0,0,9,31,6,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,186,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,40,"    private static double[] lanczos =
",2,0,0,1,2,2,0,0,0,4,33,2,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,60,"    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);
",6,2,0,1,2,3,4,0,0,15,74,2,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,90,"        if (Double.isNaN(x) || (x <= 0.0)) {
",2,2,0,3,7,0,6,0,0,10,36,4,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,93,"            double g = 607.0 / 128.0;
",2,1,0,0,0,0,0,0,0,3,25,7,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,95,"            double sum = 0.0;
",2,0,0,0,0,0,0,0,0,2,17,7,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,96,"            for (int i = lanczos.length - 1; i > 0; --i) {
",10,2,0,1,3,0,0,0,0,13,46,6,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,97,"                sum = sum + (lanczos[i] / (x + i));
",8,3,1,3,6,0,0,0,0,16,35,8,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,99,"            sum = sum + lanczos[0];
",4,1,1,1,2,0,0,0,0,8,23,6,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,101,"            double tmp = x + g + .5;
",6,1,0,0,0,0,0,0,0,7,24,7,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,102,"            ret = ((x + .5) * Math.log(tmp)) - tmp +
",6,5,0,3,6,0,6,0,0,18,40,6,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,106,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,45,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,1,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,102,38,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,1,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,102,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,47,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,48,"        setAlpha(alpha);
",0,0,0,1,2,0,4,0,0,4,16,5,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,49,"        setBeta(beta);
",0,0,0,1,2,0,4,0,0,4,14,5,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,50,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,111,"        if (alpha <= 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,114,"        this.alpha = alpha;
",4,0,0,0,0,0,0,0,0,5,19,4,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,115,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,131,"        if (beta <= 0.0) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,134,"        this.beta = beta;
",4,0,0,0,0,0,0,0,0,5,17,4,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,135,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,43,"        this(df, new GammaDistributionImpl(df / 2.0, 2.0));
",4,1,0,2,4,0,0,2,0,7,51,4,1,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,53,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,1,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,54,"        setGamma(g);
",0,0,0,1,2,0,4,0,0,4,12,5,1,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,55,"        setDegreesOfFreedom(df);
",0,0,0,1,2,0,4,0,0,4,24,5,1,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,63,"        getGamma().setAlpha(degreesOfFreedom / 2.0);
",2,1,0,2,4,0,4,0,0,7,44,5,1,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,180,"        this.gamma = g;
",4,0,0,0,0,0,0,0,0,5,15,4,1,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,182,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,189,"        return gamma;
",2,0,0,0,0,1,0,0,0,2,13,4,1,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,39,"        this(new ChiSquaredDistributionImpl(1.0));
",0,0,0,2,4,0,0,2,0,2,42,6,1,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,40,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,49,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,1,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,50,"        setDistribution(x);
",0,0,0,1,2,0,4,0,0,4,19,5,1,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,402,"        distribution = value;
",4,0,0,0,0,0,0,0,0,5,21,4,1,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,403,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,168,"            double n = 0.0; // current element index
",2,0,0,0,0,0,0,0,0,2,40,9,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,169,"            double an = 1.0 / a; // n-th element in the series
",4,1,0,0,0,0,0,0,0,5,50,9,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,170,"            double sum = an; // partial sum
",4,0,0,0,0,0,0,0,0,4,31,9,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,171,"            while (Math.abs(an) > epsilon && n < maxIterations) {
",6,3,0,2,5,0,6,0,0,15,53,8,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,173,"                n = n + 1.0;
",4,1,0,0,0,0,0,0,0,6,12,10,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,174,"                an = an * (x / (a + n));
",10,3,0,2,4,0,0,0,0,14,24,10,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,177,"                sum = sum + an;
",6,1,0,0,0,0,0,0,0,8,15,10,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,179,"            if (n >= maxIterations) {
",4,1,0,1,3,0,0,0,0,5,25,8,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,182,"                ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
",8,4,0,4,8,0,14,0,0,28,59,10,1,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,278,"        return chiSquareTest.chiSquare(expected, observed);
",0,0,0,1,2,1,8,0,0,8,51,5,1.00000,0
defect4j,math,org/apache/commons/math/special/Gamma,102,243,"            ContinuedFraction cf = new ContinuedFraction() {
",2,0,0,1,3,0,0,4,0,6,48,8,0.81818,0
defect4j,math,org/apache/commons/math/special/Gamma,102,248,"                    return ((2.0 * n) + 1.0) - a + x;
",6,4,0,2,4,1,0,0,0,10,33,14,0.81818,0
defect4j,math,org/apache/commons/math/special/Gamma,102,252,"                    return n * (a - n);
",6,2,0,1,2,1,0,0,0,8,19,14,0.81818,0
defect4j,math,org/apache/commons/math/special/Gamma,102,165,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);
",2,1,0,1,2,0,10,0,0,14,60,8,0.81818,0
defect4j,math,org/apache/commons/math/special/Gamma,102,233,"        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {
",4,3,0,5,11,0,12,0,0,19,68,4,0.81818,0
defect4j,math,org/apache/commons/math/special/Gamma,102,235,"        } else if (x == 0.0) {
",2,1,0,1,4,0,0,0,0,3,22,5,0.81818,0
defect4j,math,org/apache/commons/math/special/Gamma,102,237,"        } else if (x < a || a < 1.0) {
",6,3,0,1,4,0,0,0,0,9,30,6,0.81818,0
defect4j,math,org/apache/commons/math/special/Gamma,102,243,"            ContinuedFraction cf = new ContinuedFraction() {
",2,0,0,1,3,0,0,4,0,6,48,8,0.81818,0
defect4j,math,org/apache/commons/math/special/Gamma,102,256,"            ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);
",2,1,0,1,2,0,10,0,0,14,51,8,0.81818,0
defect4j,math,org/apache/commons/math/special/Gamma,102,257,"            ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;
",8,4,0,4,8,0,14,0,0,28,59,8,0.81818,0
defect4j,math,org/apache/commons/math/special/Gamma,102,260,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.81818,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,45,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.76190,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,46,"        setDegreesOfFreedom(degreesOfFreedom);
",0,0,0,1,2,0,4,0,0,4,38,5,0.76190,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.76190,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,54,"        if (degreesOfFreedom <= 0.0) {
",2,1,0,1,3,0,0,0,0,3,30,4,0.76190,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,57,"        this.degreesOfFreedom = degreesOfFreedom;
",4,0,0,0,0,0,0,0,0,5,41,4,0.76190,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.76190,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,43,"        this(new TDistributionImpl(1.0));
",0,0,0,2,4,0,0,2,0,2,33,6,0.76190,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.76190,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,53,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.76190,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,54,"        setDistribution(t);
",0,0,0,1,2,0,4,0,0,4,19,5,0.76190,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.76190,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,1067,"        distribution = value;
",4,0,0,0,0,0,0,0,0,5,21,4,0.76190,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,1068,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.76190,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,38,"    private static TTest tTest = new TTestImpl();
",2,0,0,1,2,2,0,4,0,8,45,2,0.76190,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,41,"    private static ChiSquareTest chiSquareTest = 
",2,0,0,0,0,2,0,2,0,6,44,2,0.76190,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,45,"    private static UnknownDistributionChiSquareTest unknownDistributionChiSquareTest = 
",2,0,0,0,0,2,0,2,0,6,82,2,0.76190,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,102,"        return unknownDistributionChiSquareTest;
",2,0,0,0,0,1,0,0,0,2,40,4,0.44444,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,51,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,133,"        double p0 = 1.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,134,"        double p1 = getA(0, x);
",2,0,0,1,2,0,4,0,0,6,23,5,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,135,"        double q0 = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,136,"        double q1 = 1.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,137,"        double c = p1 / q1;
",6,1,0,0,0,0,0,0,0,7,19,5,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,138,"        int n = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,139,"        double relativeError = Double.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,40,5,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,140,"        while (n < maxIterations && relativeError > epsilon) {
",8,3,0,1,3,0,0,0,0,11,54,4,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,141,"            ++n;
",2,0,0,0,0,0,0,0,0,3,4,6,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,142,"            double a = getA(n, x);
",2,0,0,1,2,0,6,0,0,8,22,7,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,143,"            double b = getB(n, x);
",2,0,0,1,2,0,6,0,0,8,22,7,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,144,"            double p2 = a * p1 + b * p0;
",10,3,0,0,0,0,0,0,0,13,28,7,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,145,"            double q2 = a * q1 + b * q0;
",10,3,0,0,0,0,0,0,0,13,28,7,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,146,"            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
",0,1,0,3,7,0,12,0,0,13,53,6,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,161,"            double r = p2 / q2;
",6,1,0,0,0,0,0,0,0,7,19,7,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,162,"            relativeError = Math.abs(r / c - 1.0);
",6,2,0,1,2,0,4,0,0,13,38,6,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,165,"            c = p2 / q2;
",6,1,0,0,0,0,0,0,0,8,12,6,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,166,"            p0 = p1;
",4,0,0,0,0,0,0,0,0,5,8,6,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,167,"            p1 = p2;
",4,0,0,0,0,0,0,0,0,5,8,6,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,168,"            q0 = q1;
",4,0,0,0,0,0,0,0,0,5,8,6,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,169,"            q1 = q2;
",4,0,0,0,0,0,0,0,0,5,8,6,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,170,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,172,"        if (n >= maxIterations) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.39130,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,178,"        return c;
",2,0,0,0,0,1,0,0,0,2,9,4,0.39130,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/GeometricMean,102,57,"    public GeometricMean() {
",2,0,0,1,3,1,0,0,0,3,24,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/GeometricMean,102,58,"        sumOfLogs = new SumOfLogs();
",2,0,0,1,2,0,0,2,0,5,28,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/GeometricMean,102,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,33,"public abstract class AbstractStorelessUnivariateStatistic
",2,0,0,0,0,2,0,0,0,4,58,1,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,102,34,"public abstract class AbstractUnivariateStatistic
",2,0,0,0,0,2,0,0,0,4,49,1,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,60,"    public SumOfLogs() {
",2,0,0,1,3,1,0,0,0,3,20,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,61,"       value = 0d;
",2,0,0,0,0,0,0,0,0,3,11,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,62,"       n = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,63,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,90,"    public Variance() {
",2,0,0,1,3,1,0,0,0,3,19,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,70,"    protected SecondMoment moment = null;
",2,0,0,0,0,1,0,2,0,5,37,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,77,"    protected boolean incMoment = true;
",2,0,0,0,0,1,0,0,0,4,35,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,84,"    private boolean isBiasCorrected = true;
",2,0,0,0,0,1,0,0,0,4,39,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,91,"        moment = new SecondMoment();
",2,0,0,1,2,0,0,2,0,5,28,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,92,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,102,57,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,102,58,"        m2 = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,16,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,102,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,76,"    public FirstMoment() {
",2,0,0,1,3,1,0,0,0,3,22,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,77,"        n = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,78,"        m1 = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,16,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,79,"        dev = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,17,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,80,"        nDev = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,18,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,76,"    public Mean() {
",2,0,0,1,3,1,0,0,0,3,15,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,77,"        incMoment = true;
",2,0,0,0,0,0,0,0,0,4,17,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,78,"        moment = new FirstMoment();
",2,0,0,1,2,0,0,2,0,5,27,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,79,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl,102,36,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl,102,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,98,"    public SummaryStatistics() {
",2,0,0,1,3,1,0,0,0,3,28,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,102,"    protected long n = 0;
",2,0,0,0,0,1,0,0,0,3,21,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,105,"    protected SecondMoment secondMoment = new SecondMoment();
",2,0,0,1,2,1,0,4,0,7,57,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,108,"    protected Sum sum = new Sum();
",2,0,0,1,2,1,0,4,0,7,30,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,111,"    protected SumOfSquares sumsq = new SumOfSquares();
",2,0,0,1,2,1,0,4,0,7,50,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,114,"    protected Min min = new Min();
",2,0,0,1,2,1,0,4,0,7,30,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,117,"    protected Max max = new Max();
",2,0,0,1,2,1,0,4,0,7,30,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,120,"    protected SumOfLogs sumLog = new SumOfLogs();
",2,0,0,1,2,1,0,4,0,7,45,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,123,"    protected GeometricMean geoMean = new GeometricMean();
",2,0,0,1,2,1,0,4,0,7,54,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,126,"    protected Mean mean = new Mean();
",2,0,0,1,2,1,0,4,0,7,33,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,129,"    protected Variance variance = new Variance();
",2,0,0,1,2,1,0,4,0,7,45,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,132,"    private StorelessUnivariateStatistic sumImpl = sum;
",4,0,0,0,0,1,0,2,0,7,51,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,133,"    private StorelessUnivariateStatistic sumsqImpl = sumsq;
",4,0,0,0,0,1,0,2,0,7,55,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,134,"    private StorelessUnivariateStatistic minImpl = min;
",4,0,0,0,0,1,0,2,0,7,51,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,135,"    private StorelessUnivariateStatistic maxImpl = max;
",4,0,0,0,0,1,0,2,0,7,51,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,136,"    private StorelessUnivariateStatistic sumLogImpl = sumLog;
",4,0,0,0,0,1,0,2,0,7,57,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,137,"    private StorelessUnivariateStatistic geoMeanImpl = geoMean;
",4,0,0,0,0,1,0,2,0,7,59,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,138,"    private StorelessUnivariateStatistic meanImpl = mean;
",4,0,0,0,0,1,0,2,0,7,53,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,139,"    private StorelessUnivariateStatistic varianceImpl = variance;
",4,0,0,0,0,1,0,2,0,7,61,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,99,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,83,"        SummaryStatistics instance = null;
",2,0,0,0,0,0,0,2,0,4,34,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,85,"            DiscoverClass dc = new DiscoverClass();
",2,0,0,1,2,0,0,4,0,6,39,6,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,89,"        } catch(Throwable t) {
",2,0,0,1,4,0,0,2,0,4,22,6,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,90,"            return new SummaryStatisticsImpl();
",0,0,0,1,2,1,0,2,0,2,35,9,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,52,"    public Sum() {
",2,0,0,1,3,1,0,0,0,3,14,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,53,"        n = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,54,"        value = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,19,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,52,"    public SumOfSquares() {
",2,0,0,1,3,1,0,0,0,3,23,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,53,"        n = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,54,"        value = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,19,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,54,"    public Min() {
",2,0,0,1,3,1,0,0,0,3,14,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,55,"        n = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,56,"        value = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,19,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,52,"    public Max() {
",2,0,0,1,3,1,0,0,0,3,14,2,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,53,"        n = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,54,"        value = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,19,4,0.22222,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.22222,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,303,"        return chiSquareTest.chiSquareTest(expected, observed);
",0,0,0,1,2,1,8,0,0,8,55,5,0.20000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,61,"        if (p < 0.0 || p > 1.0) {
",4,3,0,1,3,0,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,62,"            throw new IllegalArgumentException(""p must be between 0.0 and 1.0, inclusive."");
",0,0,0,1,2,0,0,2,0,3,80,7,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,67,"        UnivariateRealFunction rootFindingFunction =
",2,0,0,0,0,0,0,2,0,4,44,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,80,"        double lowerBound = getDomainLowerBound(p);
",2,0,0,1,2,0,4,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,81,"        double upperBound = getDomainUpperBound(p);
",2,0,0,1,2,0,4,0,0,6,43,5,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,82,"        double[] bracket = null;
",2,0,0,1,2,0,0,0,0,2,24,5,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,84,"            bracket = UnivariateRealSolverUtils.bracket(
",2,0,0,0,1,0,4,0,0,7,44,6,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,104,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,87,"        }  catch (ConvergenceException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,96,"            if (Math.abs(rootFindingFunction.value(lowerBound)) < 1E-6) {
",0,1,0,3,7,0,10,0,0,11,61,7,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,97,"                return lowerBound;
",2,0,0,0,0,1,0,0,0,2,18,9,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,99,"            if (Math.abs(rootFindingFunction.value(upperBound)) < 1E-6) {
",0,1,0,3,7,0,10,0,0,11,61,7,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,100,"                return upperBound;
",2,0,0,0,0,1,0,0,0,2,18,9,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,103,"            throw new MathException(ex);
",2,0,0,1,2,0,0,2,0,4,28,8,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,107,"        double root = UnivariateRealSolverUtils.solve(rootFindingFunction,
",2,0,0,0,1,0,6,0,0,8,66,5,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,109,"        return root;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,102,60,"        if (x0 > x1) {
",4,1,0,1,3,0,0,0,0,5,14,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,102,61,"            throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractDistribution,102,64,"        return cumulativeProbability(x1) - cumulativeProbability(x0);
",0,1,0,2,4,1,8,0,0,9,61,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,73,"            ret = 0.0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,96,"        if (p == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,97,"            return 0d;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,99,"        if (p == 1) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,100,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,102,"        return super.inverseCumulativeProbability(p);
",4,0,0,1,2,1,0,0,0,4,45,5,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,112,"            throw new IllegalArgumentException(""alpha must be positive"");
",0,0,0,1,2,0,0,2,0,3,61,7,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,132,"            throw new IllegalArgumentException(""beta must be positive"");
",0,0,0,1,2,0,0,2,0,3,60,7,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,156,"        return Double.MIN_VALUE;
",4,0,0,0,0,1,0,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,175,"        if (p < .5) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,177,"            ret = getAlpha() * getBeta();
",2,1,0,2,4,0,4,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,180,"            ret = Double.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,183,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,200,"        if (p < .5) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,202,"            ret = getAlpha() * getBeta() * .5;
",2,1,0,2,4,0,4,0,0,8,34,6,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,205,"            ret = getAlpha() * getBeta();
",2,1,0,2,4,0,4,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,208,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,102,34,"        super(""Convergence failed"", new Object[0]);
",0,0,0,2,4,0,0,2,0,3,43,4,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,102,35,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,102,44,"        super(pattern, arguments);
",4,0,0,1,2,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,102,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,102,52,"        super(cause);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,102,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,102,63,"        super(pattern, arguments, cause);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,102,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,102,77,"        super(msg, rootCause);
",4,0,0,1,2,0,0,0,0,4,22,4,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,102,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,102,89,"        super(msg);
",2,0,0,1,2,0,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,102,90,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,123,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,124,"        this.pattern   = null;
",2,0,0,0,0,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,125,"        this.arguments = new Object[0];
",2,0,0,1,2,0,0,2,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,126,"        this.rootCause = null;
",2,0,0,0,0,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,127,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,137,"        super(msg);
",2,0,0,1,2,0,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,138,"        this.pattern   = msg;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,139,"        this.arguments = new Object[0];
",2,0,0,1,2,0,0,2,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,140,"        this.rootCause = null;
",2,0,0,0,0,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,141,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,151,"      super(buildMessage(pattern, arguments, Locale.US));
",4,0,0,2,4,0,6,0,0,10,51,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,152,"      this.pattern   = pattern;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,153,"      this.arguments = arguments;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,154,"      this.rootCause = null;
",2,0,0,0,0,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,165,"        super((rootCause == null ? null : rootCause.getMessage()));
",2,1,0,3,6,0,4,0,0,8,59,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,166,"        this.pattern   = getMessage();
",2,0,0,1,2,0,2,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,167,"        this.arguments = new Object[0];
",2,0,0,1,2,0,0,2,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,168,"        this.rootCause = rootCause;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,169,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,181,"        super(msg);
",2,0,0,1,2,0,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,182,"        this.pattern   = msg;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,183,"        this.arguments = new Object[0];
",2,0,0,1,2,0,0,2,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,184,"        this.rootCause = rootCause;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,185,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,197,"      super(buildMessage(pattern, arguments, Locale.US));
",4,0,0,2,4,0,6,0,0,10,51,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,198,"      this.pattern   = pattern;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,199,"      this.arguments = arguments;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,200,"      this.rootCause = rootCause;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,201,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,47,"        boolean flag = false;
",2,0,0,0,0,0,0,0,0,3,21,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,49,"            Throwable.class.getDeclaredMethod(""getCause"", new Class[0]);
",0,0,0,2,4,0,2,4,0,7,60,7,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,50,"            flag = true;
",2,0,0,0,0,0,0,0,0,4,12,6,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,53,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,51,"        } catch (NoSuchMethodException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,52,"            flag = false;
",2,0,0,0,0,0,0,0,0,4,13,7,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,54,"        JDK_SUPPORTS_NESTED = flag;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,57,"    private static ResourceBundle cachedResources = null;
",2,0,0,0,0,2,0,2,0,6,53,2,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,83,"            if ((cachedResources == null) || (! cachedResources.getLocale().equals(locale))) {
",2,2,0,5,11,0,8,0,0,13,82,6,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,85,"                cachedResources =
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,89,"            if (cachedResources.getLocale().getLanguage().equals(locale.getLanguage())) {
",0,0,0,5,11,0,12,0,0,12,77,7,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,91,"                return cachedResources.getString(s);
",0,0,0,1,2,1,6,0,0,6,36,9,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,96,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,94,"        } catch (MissingResourceException mre) {
",2,0,0,1,4,0,0,2,0,4,40,6,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,100,"        return s;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,113,"        MessageFormat mf = new MessageFormat(translate(pattern, locale));
",2,0,0,2,4,0,6,4,0,12,65,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,114,"        mf.setLocale(locale);
",0,0,0,1,2,0,6,0,0,6,21,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,115,"        return mf.format(arguments);        
",0,0,0,1,2,1,6,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,208,"        return pattern;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,216,"        return arguments;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,226,"        return (pattern == null) ? null : buildMessage(pattern, arguments, locale);
",2,1,0,2,4,1,8,0,0,12,75,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,235,"        return rootCause;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,242,"        printStackTrace(System.err);
",4,0,0,1,2,0,2,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,243,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,251,"        synchronized (out) {
",2,0,0,1,3,0,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,252,"            PrintWriter pw = new PrintWriter(out, false);
",4,0,0,1,2,0,0,4,0,9,45,6,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,253,"            printStackTrace(pw);
",0,0,0,1,2,0,4,0,0,4,20,7,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,255,"            pw.flush();
",0,0,0,1,2,0,4,0,0,4,11,7,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,256,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,257,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,265,"        synchronized (out) {
",2,0,0,1,3,0,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,266,"            super.printStackTrace(out);
",4,0,0,1,2,0,0,0,0,4,27,7,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,267,"            if (rootCause != null && JDK_SUPPORTS_NESTED == false) {
",4,3,0,1,3,0,0,0,0,8,56,6,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,268,"                out.print(""Caused by: "");
",0,0,0,1,2,0,4,0,0,5,25,9,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,269,"                rootCause.printStackTrace(out);
",0,0,0,1,2,0,6,0,0,6,31,9,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,271,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,102,272,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,71,"        return getGamma().getAlpha() * 2.0;
",0,1,0,2,4,1,4,0,0,5,35,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,100,"        if (p == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,101,"            return 0d;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,103,"        if (p == 1) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,104,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,106,"        return super.inverseCumulativeProbability(p);
",4,0,0,1,2,1,0,0,0,4,45,5,0.00000,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,119,"        return Double.MIN_VALUE * getGamma().getBeta();
",4,1,0,2,4,1,4,0,0,9,47,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,137,"        if (p < .5) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,139,"            ret = getDegreesOfFreedom();
",2,0,0,1,2,0,2,0,0,5,28,6,0.00000,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,142,"            ret = Double.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,145,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,162,"        if (p < .5) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,164,"            ret = getDegreesOfFreedom() * .5;
",2,1,0,1,2,0,2,0,0,6,33,6,0.00000,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,167,"            ret = getDegreesOfFreedom();
",2,0,0,1,2,0,2,0,0,5,28,6,0.00000,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,170,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,55,"            throw new IllegalArgumentException(""degrees of freedom must be positive."");
",0,0,0,1,2,0,0,2,0,3,75,7,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,65,"        return degreesOfFreedom;
",2,0,0,0,0,1,0,0,0,2,24,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,77,"        if (x == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,78,"            ret = 0.5;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,80,"            double t =
",2,0,0,0,0,0,0,0,0,2,10,7,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,85,"            if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,86,"                ret = 0.5 * t;
",4,1,0,0,0,0,0,0,0,6,14,8,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,88,"                ret = 1.0 - 0.5 * t;
",4,2,0,0,0,0,0,0,0,7,20,8,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,92,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,111,"        if (p == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,112,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,114,"        if (p == 1) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,115,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,117,"        return super.inverseCumulativeProbability(p);
",4,0,0,1,2,1,0,0,0,4,45,5,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,130,"        return -Double.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,143,"        return Double.MAX_VALUE;
",4,0,0,0,0,1,0,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,102,155,"        return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,68,"            new UnivariateRealFunction() {
",0,0,0,1,3,0,0,2,0,2,30,7,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,72,"                    return cumulativeProbability(x) - p;
",2,1,0,1,2,1,4,0,0,7,36,12,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,73,"                } catch (MathException ex) {
",2,0,0,1,4,0,0,2,0,4,28,12,0.00000,0
defect4j,math,org/apache/commons/math/distribution/AbstractContinuousDistribution,102,74,"                    throw new FunctionEvaluationException(x, ex.getPattern(), ex.getArguments(), ex);
",4,0,0,3,6,0,8,2,0,14,81,14,0.00000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,79,"        return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);
",4,0,0,1,2,1,6,0,0,10,55,5,0.00000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,90,"        return evaluate(x, epsilon, Integer.MAX_VALUE);
",4,0,0,1,2,1,6,0,0,10,47,5,0.00000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,101,"        return evaluate(x, DEFAULT_EPSILON, maxIterations);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,148,"                if (a != 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,8,0.00000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,149,"                    p2 = p1 + (b / a * p0);
",10,3,0,1,2,0,0,0,0,14,23,10,0.00000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,150,"                    q2 = q1 + (b / a * q0);
",10,3,0,1,2,0,0,0,0,14,23,10,0.00000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,151,"                } else if (b != 0) {
",2,1,0,1,4,0,0,0,0,3,20,9,0.00000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,152,"                    p2 = (a / b * p1) + p0;
",10,3,0,1,2,0,0,0,0,14,23,11,0.00000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,153,"                    q2 = (a / b * q1) + q0;
",10,3,0,1,2,0,0,0,0,14,23,11,0.00000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,156,"                    throw new ConvergenceException(
",0,0,0,0,1,0,0,2,0,2,31,13,0.00000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,102,173,"            throw new MaxIterationsExceededException(maxIterations,
",2,0,0,0,1,0,0,2,0,4,55,7,0.00000,0
defect4j,math,org/apache/commons/math/special/Gamma,102,67,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/special/Gamma,102,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/special/Gamma,102,91,"            ret = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,17,6,0.00000,0
defect4j,math,org/apache/commons/math/special/Gamma,102,159,"            ret = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,17,6,0.00000,0
defect4j,math,org/apache/commons/math/special/Gamma,102,161,"            ret = 0.0;
",2,0,0,0,0,0,0,0,0,3,10,7,0.00000,0
defect4j,math,org/apache/commons/math/special/Gamma,102,180,"                throw new MaxIterationsExceededException(maxIterations);
",2,0,0,1,2,0,0,2,0,4,56,11,0.00000,0
defect4j,math,org/apache/commons/math/special/Gamma,102,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);
",4,0,0,1,2,1,8,0,0,12,67,5,0.00000,0
defect4j,math,org/apache/commons/math/special/Gamma,102,234,"            ret = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,17,6,0.00000,0
defect4j,math,org/apache/commons/math/special/Gamma,102,236,"            ret = 1.0;
",2,0,0,0,0,0,0,0,0,3,10,7,0.00000,0
defect4j,math,org/apache/commons/math/special/Gamma,102,240,"            ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);
",2,1,0,1,2,0,10,0,0,14,60,8,0.00000,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,102,36,"        super(""Maximal number of iterations ({0}) exceeded"",
",0,0,0,2,5,0,0,0,0,1,52,4,0.00000,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,102,38,"        this.maxIterations = maxIterations;
",4,0,0,0,0,0,0,0,0,5,35,4,0.00000,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,102,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,102,50,"        super(pattern, arguments);
",4,0,0,1,2,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,102,51,"        this.maxIterations = maxIterations;
",4,0,0,0,0,0,0,0,0,5,35,4,0.00000,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,102,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MaxIterationsExceededException,102,58,"        return maxIterations;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,79,"        if ((sample1 == null) || (sample2 == null ||
",4,4,0,1,4,0,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,81,"            throw new IllegalArgumentException(""insufficient data for t statistic"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,83,"        double meanDifference = StatUtils.meanDifference(sample1, sample2);
",2,0,0,1,2,0,8,0,0,10,67,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,84,"        return t(meanDifference, 0,  
",0,0,0,0,1,1,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,124,"        double meanDifference = StatUtils.meanDifference(sample1, sample2);
",2,0,0,1,2,0,8,0,0,10,67,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,125,"        return tTest(meanDifference, 0, 
",0,0,0,0,1,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,164,"        if ((alpha <= 0) || (alpha > 0.5)) {
",4,3,0,3,7,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,165,"            throw new IllegalArgumentException(""bad significance level: "" + alpha);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,167,"        return (pairedTTest(sample1, sample2) < alpha);
",2,1,0,2,4,1,6,0,0,9,47,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,187,"        if ((observed == null) || (observed.length < 2)) {
",6,3,0,3,7,0,0,0,0,9,50,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,188,"            throw new IllegalArgumentException(""insufficient data for t statistic"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,190,"        return t(StatUtils.mean(observed), mu, StatUtils.variance(observed),
",0,0,0,2,5,1,16,0,0,16,68,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,212,"        if ((sampleStats == null) || (sampleStats.getN() < 2)) {
",2,3,0,4,9,0,4,0,0,9,56,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,213,"            throw new IllegalArgumentException(""insufficient data for t statistic"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,215,"        return t(sampleStats.getMean(), mu, sampleStats.getVariance(),
",0,0,0,2,5,1,12,0,0,12,62,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,254,"        if ((sample1 == null) || (sample2 == null ||
",4,4,0,1,4,0,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,256,"            throw new IllegalArgumentException(""insufficient data for t statistic"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,258,"        return homoscedasticT(StatUtils.mean(sample1), StatUtils.mean(sample2),
",0,0,0,2,5,1,14,0,0,14,71,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,293,"        if ((sample1 == null) || (sample2 == null ||
",4,4,0,1,4,0,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,295,"            throw new IllegalArgumentException(""insufficient data for t statistic"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,297,"        return t(StatUtils.mean(sample1), StatUtils.mean(sample2),
",0,0,0,2,5,1,14,0,0,14,58,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,336,"        if ((sampleStats1 == null) ||
",2,2,0,1,3,0,0,0,0,4,29,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,339,"            throw new IllegalArgumentException(""insufficient data for t statistic"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,341,"        return t(sampleStats1.getMean(), sampleStats2.getMean(), 
",0,0,0,2,5,1,10,0,0,10,56,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,384,"        if ((sampleStats1 == null) ||
",2,2,0,1,3,0,0,0,0,4,29,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,387,"            throw new IllegalArgumentException(""insufficient data for t statistic"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,389,"        return homoscedasticT(sampleStats1.getMean(), sampleStats2.getMean(), 
",0,0,0,2,5,1,10,0,0,10,69,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,422,"        if ((sample == null) || (sample.length < 2)) {
",6,3,0,3,7,0,0,0,0,9,46,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,423,"            throw new IllegalArgumentException(""insufficient data for t statistic"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,425,"        return tTest( StatUtils.mean(sample), mu, StatUtils.variance(sample),
",0,0,0,2,5,1,16,0,0,16,69,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,466,"        if ((alpha <= 0) || (alpha > 0.5)) {
",4,3,0,3,7,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,467,"            throw new IllegalArgumentException(""bad significance level: "" + alpha);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,469,"        return (tTest(mu, sample) < alpha);
",2,1,0,2,4,1,6,0,0,9,35,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,502,"        if ((sampleStats == null) || (sampleStats.getN() < 2)) {
",2,3,0,4,9,0,4,0,0,9,56,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,503,"            throw new IllegalArgumentException(""insufficient data for t statistic"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,505,"        return tTest(sampleStats.getMean(), mu, sampleStats.getVariance(),
",0,0,0,2,5,1,12,0,0,12,66,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,548,"        if ((alpha <= 0) || (alpha > 0.5)) {
",4,3,0,3,7,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,549,"            throw new IllegalArgumentException(""bad significance level: "" + alpha);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,551,"        return (tTest(mu, sampleStats) < alpha);
",2,1,0,2,4,1,6,0,0,9,40,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,592,"        if ((sample1 == null) || (sample2 == null ||
",4,4,0,1,4,0,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,594,"            throw new IllegalArgumentException(""insufficient data"");
",0,0,0,1,2,0,0,2,0,3,56,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,596,"        return tTest(StatUtils.mean(sample1), StatUtils.mean(sample2),
",0,0,0,2,5,1,14,0,0,14,62,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,636,"        if ((sample1 == null) || (sample2 == null ||
",4,4,0,1,4,0,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,638,"            throw new IllegalArgumentException(""insufficient data"");
",0,0,0,1,2,0,0,2,0,3,56,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,640,"        return homoscedasticTTest(StatUtils.mean(sample1), 
",0,0,0,1,3,1,8,0,0,8,50,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,701,"        if ((alpha <= 0) || (alpha > 0.5)) {
",4,3,0,3,7,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,702,"            throw new IllegalArgumentException(""bad significance level: "" + alpha);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,704,"        return (tTest(sample1, sample2) < alpha);
",2,1,0,2,4,1,6,0,0,9,41,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,761,"        if ((alpha <= 0) || (alpha > 0.5)) {
",4,3,0,3,7,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,762,"            throw new IllegalArgumentException(""bad significance level: "" + alpha);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,764,"        return (homoscedasticTTest(sample1, sample2) < alpha);
",2,1,0,2,4,1,6,0,0,9,54,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,803,"        if ((sampleStats1 == null) || (sampleStats2 == null ||
",4,4,0,1,4,0,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,805,"            throw new IllegalArgumentException(""insufficient data for t statistic"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,807,"        return tTest(sampleStats1.getMean(), sampleStats2.getMean(), sampleStats1.getVariance(),
",0,0,0,3,7,1,14,0,0,14,88,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,848,"        if ((sampleStats1 == null) || (sampleStats2 == null ||
",4,4,0,1,4,0,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,850,"            throw new IllegalArgumentException(""insufficient data for t statistic"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,852,"        return homoscedasticTTest(sampleStats1.getMean(),
",0,0,0,1,3,1,6,0,0,6,49,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,914,"        if ((alpha <= 0) || (alpha > 0.5)) {
",4,3,0,3,7,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,915,"            throw new IllegalArgumentException(""bad significance level: "" + alpha);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,917,"        return (tTest(sampleStats1, sampleStats2) < alpha);
",2,1,0,2,4,1,6,0,0,9,51,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,928,"        return DistributionFactory.newInstance();
",0,0,0,1,2,1,4,0,0,4,41,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,941,"        return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) /
",16,8,0,7,14,1,0,0,0,24,60,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,956,"        return (m - mu) / Math.sqrt(v / n);
",8,3,0,2,4,1,4,0,0,15,35,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,974,"            return (m1 - m2) / Math.sqrt((v1 / n1) + (v2 / n2));
",12,5,0,4,8,1,4,0,0,21,52,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,991,"            double pooledVariance = ((n1  - 1) * v1 + (n2 -1) * v2 ) / (n1 + n2 - 2); 
",14,8,0,4,8,0,0,0,0,22,73,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,992,"            return (m1 - m2) / Math.sqrt(pooledVariance * (1d / n1 + 1d / n2));
",10,6,0,3,6,1,4,0,0,20,67,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,1007,"        double t = Math.abs(t(m, mu, v, n));
",2,0,0,2,4,0,14,0,0,16,36,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,1008,"        distribution.setDegreesOfFreedom(n - 1);
",2,1,0,1,2,0,4,0,0,7,40,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,1009,"        return 1.0 - distribution.cumulativeProbability(-t, t);
",2,1,0,1,2,1,6,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,1030,"        double t = Math.abs(t(m1, m2, v1, v2, n1, n2));
",2,0,0,2,4,0,18,0,0,20,47,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,1031,"        double degreesOfFreedom = 0;
",2,0,0,0,0,0,0,0,0,2,28,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,1032,"        degreesOfFreedom = df(v1, v2, n1, n2);
",2,0,0,1,2,0,10,0,0,13,38,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,1033,"        distribution.setDegreesOfFreedom(degreesOfFreedom);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,1034,"        return 1.0 - distribution.cumulativeProbability(-t, t);
",2,1,0,1,2,1,6,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,1055,"        double t = Math.abs(homoscedasticT(m1, m2, v1, v2, n1, n2));
",2,0,0,2,4,0,18,0,0,20,60,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,1056,"        double degreesOfFreedom = (double) (n1 + n2 - 2);
",6,2,0,2,4,0,0,0,0,8,49,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,1057,"        distribution.setDegreesOfFreedom(degreesOfFreedom);
",0,0,0,1,2,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TTestImpl,102,1058,"        return 1.0 - distribution.cumulativeProbability(-t, t);
",2,1,0,1,2,1,6,0,0,10,55,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,34,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,35,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,55,"        TestUtils.tTest = tTest;
",6,0,0,0,0,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,64,"        return tTest;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,74,"        TestUtils.chiSquareTest = chiSquareTest;
",6,0,0,0,0,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,83,"        return chiSquareTest;
",2,0,0,0,0,1,0,0,0,2,21,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,93,"        TestUtils.unknownDistributionChiSquareTest = unknownDistributionChiSquareTest;
",6,0,0,0,0,0,0,0,0,7,78,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,94,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,110,"        return tTest.homoscedasticT(sample1, sample2);
",0,0,0,1,2,1,8,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,119,"        return tTest.homoscedasticT(sampleStats1, sampleStats2);
",0,0,0,1,2,1,8,0,0,8,56,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,128,"        return tTest. homoscedasticTTest(sample1, sample2, alpha);
",0,0,0,1,2,1,10,0,0,10,58,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,136,"        return tTest.homoscedasticTTest(sample1, sample2);
",0,0,0,1,2,1,8,0,0,8,50,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,145,"        return tTest.homoscedasticTTest(sampleStats1, sampleStats2);
",0,0,0,1,2,1,8,0,0,8,60,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,153,"        return tTest.pairedT(sample1, sample2);
",0,0,0,1,2,1,8,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,162,"        return tTest.pairedTTest(sample1, sample2, alpha);
",0,0,0,1,2,1,10,0,0,10,50,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,170,"        return tTest.pairedTTest(sample1, sample2);
",0,0,0,1,2,1,8,0,0,8,43,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,178,"        return tTest.t(mu, observed);
",0,0,0,1,2,1,8,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,186,"        return tTest.t(mu, sampleStats);
",0,0,0,1,2,1,8,0,0,8,32,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,194,"        return tTest.t(sample1, sample2);
",0,0,0,1,2,1,8,0,0,8,33,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,203,"        return tTest.t(sampleStats1, sampleStats2);
",0,0,0,1,2,1,8,0,0,8,43,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,211,"        return tTest.tTest(mu, sample, alpha);
",0,0,0,1,2,1,10,0,0,10,38,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,219,"        return tTest.tTest(mu, sample);
",0,0,0,1,2,1,8,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,228,"        return tTest. tTest(mu, sampleStats, alpha);
",0,0,0,1,2,1,10,0,0,10,44,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,236,"        return tTest.tTest(mu, sampleStats);
",0,0,0,1,2,1,8,0,0,8,36,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,244,"        return tTest.tTest(sample1, sample2, alpha);
",0,0,0,1,2,1,10,0,0,10,44,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,252,"        return tTest.tTest(sample1, sample2);
",0,0,0,1,2,1,8,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,261,"        return tTest. tTest(sampleStats1, sampleStats2, alpha);
",0,0,0,1,2,1,10,0,0,10,55,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,270,"        return tTest.tTest(sampleStats1, sampleStats2);
",0,0,0,1,2,1,8,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,286,"        return chiSquareTest.chiSquare(counts);
",0,0,0,1,2,1,6,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,295,"        return chiSquareTest.chiSquareTest(expected, observed, alpha);
",0,0,0,1,2,1,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,311,"        return chiSquareTest. chiSquareTest(counts, alpha);
",0,0,0,1,2,1,8,0,0,8,51,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,319,"        return chiSquareTest. chiSquareTest(counts);
",0,0,0,1,2,1,6,0,0,6,44,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,327,"        return unknownDistributionChiSquareTest.chiSquareDataSetsComparison(observed1, observed2);
",0,0,0,1,2,1,8,0,0,8,90,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,335,"        return unknownDistributionChiSquareTest.chiSquareTestDataSetsComparison(observed1, observed2);
",0,0,0,1,2,1,8,0,0,8,94,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/TestUtils,102,345,"        return unknownDistributionChiSquareTest.chiSquareTestDataSetsComparison(observed1, observed2, alpha);
",0,0,0,1,2,1,10,0,0,10,101,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,66,"        if ((expected.length < 2) || (expected.length != observed.length)) {
",12,3,0,3,7,0,0,0,0,15,68,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,67,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,70,"        if (!isPositive(expected) || !isNonNegative(observed)) {
",0,1,0,3,7,0,8,0,0,11,56,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,71,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,74,"        double sumSq = 0.0d;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,75,"        double dev = 0.0d;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,76,"        for (int i = 0; i < observed.length; i++) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,77,"                dev = ((double) observed[i] - expected[i]);
",2,1,1,4,8,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,78,"                sumSq += dev * dev / expected[i];
",6,2,1,1,2,0,0,0,0,13,33,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,80,"        return sumSq;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,97,"        distribution.setDegreesOfFreedom(expected.length - 1.0);
",4,1,0,1,2,0,4,0,0,9,56,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,98,"        return 1.0 - distribution.cumulativeProbability(
",0,1,0,0,1,1,4,0,0,5,48,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,118,"        if ((alpha <= 0) || (alpha > 0.5)) {
",4,3,0,3,7,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,119,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,122,"        return (chiSquareTest(expected, observed) < alpha);
",2,1,0,2,4,1,6,0,0,9,51,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,132,"        checkArray(counts);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,133,"        int nRows = counts.length;
",6,0,0,0,0,0,0,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,134,"        int nCols = counts[0].length;
",4,0,1,1,2,0,0,0,0,6,29,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,137,"        double[] rowSum = new double[nRows];
",2,0,1,2,4,0,0,0,0,4,36,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,138,"        double[] colSum = new double[nCols];
",2,0,1,2,4,0,0,0,0,4,36,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,139,"        double total = 0.0d;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,140,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,141,"            for (int col = 0; col < nCols; col++) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,142,"                rowSum[row] += (double) counts[row][col];
",0,0,1,4,8,0,0,0,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,143,"                colSum[col] += (double) counts[row][col];
",0,0,1,4,8,0,0,0,0,11,41,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,144,"                total += (double) counts[row][col];
",2,0,1,3,6,0,0,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,149,"        double sumSq = 0.0d;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,150,"        double expected = 0.0d;
",2,0,0,0,0,0,0,0,0,2,23,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,151,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,152,"            for (int col = 0; col < nCols; col++) {
",8,1,0,1,3,0,0,0,0,10,39,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,153,"                expected = (rowSum[row] * colSum[col]) / total;
",4,2,1,3,6,0,0,0,0,15,47,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,154,"                sumSq += (((double) counts[row][col] - expected) * 
",4,2,1,4,9,0,0,0,0,13,50,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,158,"        return sumSq;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,169,"        checkArray(counts);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,170,"        double df = ((double) counts.length -1) * ((double) counts[0].length - 1);
",8,3,1,5,10,0,0,0,0,13,74,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,171,"        distribution.setDegreesOfFreedom(df);
",0,0,0,1,2,0,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,172,"        return 1 - distribution.cumulativeProbability(chiSquare(counts));
",0,1,0,2,4,1,8,0,0,9,65,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,185,"        if ((alpha <= 0) || (alpha > 0.5)) {
",4,3,0,3,7,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,186,"            throw new IllegalArgumentException(""bad significance level: "" + alpha);
",2,1,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,188,"        return (chiSquareTest(counts) < alpha);
",2,1,0,2,4,1,4,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,201,"        if ((observed1.length < 2) || (observed1.length != observed2.length)) {
",12,3,0,3,7,0,0,0,0,15,71,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,202,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,206,"        if (!isNonNegative(observed1) || !isNonNegative(observed2)) {
",0,1,0,3,7,0,8,0,0,11,61,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,207,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,211,"        long countSum1 = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,212,"        long countSum2 = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,213,"        boolean unequalCounts = false;
",2,0,0,0,0,0,0,0,0,3,30,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,214,"        double weight = 0.0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,215,"        for (int i = 0; i < observed1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,44,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,216,"            countSum1 += observed1[i];
",2,0,1,1,2,0,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,217,"            countSum2 += observed2[i];   
",2,0,1,1,2,0,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,220,"        if (countSum1 * countSum2 == 0) {
",4,2,0,1,3,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,221,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,225,"        unequalCounts = (countSum1 != countSum2);
",6,1,0,1,2,0,0,0,0,8,41,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,226,"        if (unequalCounts) {
",2,0,0,1,3,0,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,227,"            weight = Math.sqrt((double) countSum1 / (double) countSum2);
",6,1,0,3,6,0,4,0,0,12,60,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,230,"        double sumSq = 0.0d;
",2,0,0,0,0,0,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,231,"        double dev = 0.0d;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,232,"        double obs1 = 0.0d;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,233,"        double obs2 = 0.0d;
",2,0,0,0,0,0,0,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,234,"        for (int i = 0; i < observed1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,44,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,235,"            if (observed1[i] == 0 && observed2[i] == 0) {
",0,3,1,3,7,0,0,0,0,11,45,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,236,"                throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,10,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,239,"                obs1 = (double) observed1[i];
",2,0,1,2,4,0,0,0,0,7,29,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,240,"                obs2 = (double) observed2[i];
",2,0,1,2,4,0,0,0,0,7,29,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,241,"                if (unequalCounts) { // apply weights
",2,0,0,1,3,0,0,0,0,2,37,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,242,"                    dev = obs1/weight - obs2 * weight;
",10,3,0,0,0,0,0,0,0,14,34,10,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,244,"                    dev = obs1 - obs2;
",6,1,0,0,0,0,0,0,0,8,18,10,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,246,"                sumSq += (dev * dev) / (obs1 + obs2);
",10,3,0,2,4,0,0,0,0,14,37,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,249,"        return sumSq;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,261,"        distribution.setDegreesOfFreedom((double) observed1.length - 1);
",4,1,0,2,4,0,4,0,0,9,64,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,262,"        return 1 - distribution.cumulativeProbability(
",0,1,0,0,1,1,4,0,0,5,46,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,277,"        if ((alpha <= 0) || (alpha > 0.5)) {
",4,3,0,3,7,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,278,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,281,"        return (chiSquareTestDataSetsComparison(observed1, observed2) < alpha);
",2,1,0,2,4,1,6,0,0,9,71,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,294,"        if (in.length < 2) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,295,"            throw new IllegalArgumentException(""Input table must have at least two rows"");
",0,0,0,1,2,0,0,2,0,3,78,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,298,"        if (in[0].length < 2) {
",2,1,1,2,5,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,299,"            throw new IllegalArgumentException(""Input table must have at least two columns"");
",0,0,0,1,2,0,0,2,0,3,81,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,302,"        if (!isRectangular(in)) {
",0,0,0,2,5,0,4,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,303,"            throw new IllegalArgumentException(""Input table must be rectangular"");
",0,0,0,1,2,0,0,2,0,3,70,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,306,"        if (!isNonNegative(in)) {
",0,0,0,2,5,0,4,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,307,"            throw new IllegalArgumentException(""All entries in input 2-way table must be non-negative"");
",0,0,0,1,2,0,0,2,0,3,92,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,310,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,319,"        return DistributionFactory.newInstance();
",0,0,0,1,2,1,4,0,0,4,41,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,333,"        for (int i = 1; i < in.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,334,"            if (in[i].length != in[0].length) {
",4,1,1,3,7,0,0,0,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,335,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,338,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,350,"        for (int i = 0; i < in.length; i ++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,351,"            if (in[i] <= 0) {
",0,1,1,2,5,0,0,0,0,5,17,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,352,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,355,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,369,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,384,"        for (int i = 0; i < in.length; i ++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,385,"            for (int j = 0; j < in[i].length; j++) {
",8,1,1,2,5,0,0,0,0,14,40,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,386,"                if (in[i][j] < 0) {
",0,1,1,3,7,0,0,0,0,7,19,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,387,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,10,0.00000,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,391,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/GeometricMean,102,65,"        sumOfLogs.increment(d);
",0,0,0,1,2,0,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/GeometricMean,102,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/GeometricMean,102,72,"        if (sumOfLogs.getN() > 0) {
",0,1,0,2,5,0,4,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/GeometricMean,102,73,"            return Math.exp(sumOfLogs.getResult() / (double) sumOfLogs.getN());
",0,1,0,4,8,1,12,0,0,13,67,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/GeometricMean,102,75,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/GeometricMean,102,83,"        sumOfLogs.clear();
",0,0,0,1,2,0,4,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/GeometricMean,102,84,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/GeometricMean,102,104,"        return Math.exp(
",0,0,0,0,1,1,4,0,0,4,16,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/GeometricMean,102,112,"        return sumOfLogs.getN();
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,58,"        if (values == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,59,"            throw new IllegalArgumentException(""input value array is null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,61,"        return evaluate(values, 0, values.length);
",4,0,0,1,2,1,4,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,83,"        if (test(values, begin, length)) {
",0,0,0,2,5,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,84,"            clear();
",0,0,0,1,2,0,2,0,0,2,8,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,85,"            incrementAll(values, begin, length);
",0,0,0,1,2,0,8,0,0,8,36,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,87,"        return getResult();
",0,0,0,1,2,1,2,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,116,"        if (values == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,117,"            throw new IllegalArgumentException(""input values array is null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,119,"        incrementAll(values, 0, values.length);
",4,0,0,1,2,0,4,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,120,"    } 
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,135,"        if (test(values, begin, length)) {
",0,0,0,2,5,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,136,"            int k = begin + length;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,137,"            for (int i = begin; i < k; i++) {
",10,1,0,1,3,0,0,0,0,12,33,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,138,"                increment(values[i]);
",0,0,1,2,4,0,2,0,0,6,21,9,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,141,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,151,"        if (object == this ) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,152,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,154,"       if (object instanceof AbstractStorelessUnivariateStatistic == false) {
",2,1,0,1,3,0,0,2,0,6,70,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,155,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,157,"        AbstractStorelessUnivariateStatistic stat = (AbstractStorelessUnivariateStatistic) object;
",4,0,0,1,2,0,0,4,0,8,90,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,158,"        return (MathUtils.equals(stat.getResult(), this.getResult()) && 
",0,1,0,3,7,1,10,0,0,11,63,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractStorelessUnivariateStatistic,102,168,"        return 31* (31 + MathUtils.hash(getResult())) + MathUtils.hash(getN());
",0,3,0,5,10,1,12,0,0,15,71,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,102,44,"        test(values, 0, 0);
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,102,45,"        return evaluate(values, 0, values.length);
",4,0,0,1,2,1,4,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,102,77,"        if (values == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,102,78,"            throw new IllegalArgumentException(""input value array is null"");
",0,0,0,1,2,0,0,2,0,4,64,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,102,81,"        if (begin < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,102,82,"            throw new IllegalArgumentException(""start position cannot be negative"");
",0,0,0,1,2,0,0,2,0,3,72,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,102,85,"        if (length < 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,102,86,"            throw new IllegalArgumentException(""length cannot be negative"");
",0,0,0,1,2,0,0,2,0,3,64,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,102,89,"        if (begin + length > values.length) {
",8,2,0,1,3,0,0,0,0,10,37,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,102,90,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,102,94,"        if (length == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,102,95,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,102,98,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,69,"        value += Math.log(d);
",2,0,0,1,2,0,6,0,0,9,21,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,70,"        n++;
",2,0,0,0,0,0,0,0,0,3,4,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,77,"        if (n > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,78,"            return value;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,80,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,88,"        return n;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,95,"        value = 0d;
",2,0,0,0,0,0,0,0,0,3,11,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,96,"        n = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,117,"        double sumLog = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,118,"        if (test(values, begin, length)) {
",0,0,0,2,5,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,119,"            sumLog = 0.0;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,120,"            for (int i = begin; i < begin + length; i++) {
",12,2,0,1,3,0,0,0,0,15,46,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,121,"                sumLog += Math.log(values[i]);
",2,0,1,2,4,0,4,0,0,11,30,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfLogs,102,124,"        return sumLog;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,100,"    public Variance(final SecondMoment m2) {
",4,0,0,1,3,2,0,2,0,8,40,2,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,101,"        incMoment = false;
",2,0,0,0,0,0,0,0,0,4,18,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,102,"        this.moment = m2;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,103,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,113,"    public Variance(boolean isBiasCorrected) {
",4,0,0,1,3,1,0,0,0,5,42,2,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,114,"        moment = new SecondMoment();
",2,0,0,1,2,0,0,2,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,115,"        this.isBiasCorrected = isBiasCorrected;
",4,0,0,0,0,0,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,116,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,127,"    public Variance(boolean isBiasCorrected, SecondMoment m2) {
",6,0,0,1,3,1,0,2,0,9,59,2,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,128,"        incMoment = false;
",2,0,0,0,0,0,0,0,0,4,18,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,129,"        this.moment = m2;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,130,"        this.isBiasCorrected = isBiasCorrected;      
",4,0,0,0,0,0,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,131,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,143,"        if (incMoment) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,144,"            moment.increment(d);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,146,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,152,"            if (moment.n == 0) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,153,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,154,"            } else if (moment.n == 1) {
",4,1,0,1,4,0,0,0,0,5,27,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,155,"                return 0d;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,157,"                if (isBiasCorrected) {
",2,0,0,1,3,0,0,0,0,2,22,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,158,"                    return moment.m2 / ((double) moment.n - 1d);
",8,2,0,2,4,1,0,0,0,10,44,9,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,160,"                    return moment.m2 / ((double) moment.n);
",8,1,0,2,4,1,0,0,0,9,39,9,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,169,"        return moment.getN();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,176,"        if (incMoment) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,177,"            moment.clear();
",0,0,0,1,2,0,4,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,179,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,198,"        if (values == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,199,"            throw new IllegalArgumentException(""input values array is null"");
",0,0,0,1,2,0,0,2,0,4,65,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,201,"        return evaluate(values, 0, values.length);
",4,0,0,1,2,1,4,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,226,"        double var = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,228,"        if (test(values, begin, length)) {
",0,0,0,2,5,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,229,"            clear();
",0,0,0,1,2,0,2,0,0,2,8,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,230,"            if (length == 1) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,231,"                var = 0.0;
",2,0,0,0,0,0,0,0,0,3,10,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,232,"            } else if (length > 1) {
",2,1,0,1,4,0,0,0,0,3,24,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,233,"                Mean mean = new Mean();
",2,0,0,1,2,0,0,4,0,6,23,9,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,234,"                double m = mean.evaluate(values, begin, length);
",2,0,0,1,2,0,10,0,0,12,48,10,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,235,"                var = evaluate(values, m, begin, length);
",2,0,0,1,2,0,10,0,0,13,41,9,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,238,"        return var;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,270,"        double var = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,272,"        if (test(values, begin, length)) {
",0,0,0,2,5,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,273,"            if (length == 1) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,274,"                var = 0.0;
",2,0,0,0,0,0,0,0,0,3,10,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,275,"            } else if (length > 1) {
",2,1,0,1,4,0,0,0,0,3,24,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,276,"                double accum = 0.0;
",2,0,0,0,0,0,0,0,0,2,19,10,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,277,"                double dev = 0.0;
",2,0,0,0,0,0,0,0,0,2,17,10,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,278,"                double accum2 = 0.0;
",2,0,0,0,0,0,0,0,0,2,20,10,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,279,"                for (int i = begin; i < begin + length; i++) {
",12,2,0,1,3,0,0,0,0,15,46,9,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,280,"                    dev = values[i] - mean;
",4,1,1,1,2,0,0,0,0,10,23,11,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,281,"                    accum += dev * dev;
",6,1,0,0,0,0,0,0,0,8,19,11,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,282,"                    accum2 += dev;
",4,0,0,0,0,0,0,0,0,5,14,11,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,284,"                double len = (double) length;            
",4,0,0,1,2,0,0,0,0,4,29,10,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,285,"                if (isBiasCorrected) {
",2,0,0,1,3,0,0,0,0,2,22,9,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,286,"                    var = (accum - (accum2 * accum2 / len)) / (len - 1.0);
",12,5,0,3,6,0,0,0,0,18,54,11,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,288,"                    var = (accum - (accum2 * accum2 / len)) / len;
",12,4,0,2,4,0,0,0,0,17,46,11,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,292,"        return var;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,321,"        return evaluate(values, mean, 0, values.length);
",4,0,0,1,2,1,6,0,0,10,48,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,328,"        return isBiasCorrected;
",2,0,0,0,0,1,0,0,0,2,23,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,335,"        this.isBiasCorrected = isBiasCorrected;
",4,0,0,0,0,0,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,102,336,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,102,65,"        if (n < 1) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,102,66,"            m1 = m2 = 0.0;
",4,0,0,0,0,0,0,0,0,6,14,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,102,68,"        super.increment(d);
",4,0,0,1,2,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,102,69,"        m2 += ((double) n - 1) * dev * nDev;
",8,2,0,2,4,0,0,0,0,11,36,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,102,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,102,76,"        super.clear();
",2,0,0,1,2,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,102,77,"        m2 = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,16,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,102,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/SecondMoment,102,84,"        return m2;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,87,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,88,"            m1 = 0.0;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,90,"        n++;
",2,0,0,0,0,0,0,0,0,3,4,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,91,"        double n0 = (double) n;
",4,0,0,1,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,92,"        dev = d - m1;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,93,"        nDev = dev / n0;
",6,1,0,0,0,0,0,0,0,8,16,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,94,"        m1 += nDev;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,95,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,101,"        m1 = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,16,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,102,"        n = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,103,"        dev = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,17,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,104,"        nDev = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,18,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,105,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,111,"        return m1;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/FirstMoment,102,118,"        return n;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,86,"    public Mean(final FirstMoment m1) {
",4,0,0,1,3,2,0,2,0,8,35,2,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,87,"        this.moment = m1;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,88,"        incMoment = false;
",2,0,0,0,0,0,0,0,0,4,18,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,89,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,95,"        if (incMoment) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,96,"            moment.increment(d);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,98,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,104,"        if (incMoment) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,105,"            moment.clear();
",0,0,0,1,2,0,4,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,107,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,113,"        return moment.m1;
",4,0,0,0,0,1,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,120,"        return moment.getN();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,140,"        if (test(values, begin, length)) {
",0,0,0,2,5,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,141,"            Sum sum = new Sum();
",2,0,0,1,2,0,0,4,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,142,"            double sampleSize = (double) length;
",4,0,0,1,2,0,0,0,0,4,36,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,145,"            double xbar = sum.evaluate(values, begin, length) / sampleSize;
",4,1,0,1,2,0,10,0,0,15,63,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,148,"            double correction = 0;
",2,0,0,0,0,0,0,0,0,2,22,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,149,"            for (int i = begin; i < begin + length; i++) {
",12,2,0,1,3,0,0,0,0,15,46,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,150,"                correction += (values[i] - xbar);
",4,1,1,2,4,0,0,0,0,10,33,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,152,"            return xbar + (correction/sampleSize);
",6,2,0,1,2,1,0,0,0,8,38,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Mean,102,154,"        return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl,102,40,"        super.clear();
",2,0,0,1,2,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatisticsImpl,102,41,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,73,"        return (SummaryStatistics)cls.newInstance();
",0,0,0,2,4,1,4,2,0,6,44,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,86,"            instance = (SummaryStatistics) dc.newInstance(
",2,0,0,1,3,0,4,2,0,9,46,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,91,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,92,"        return instance;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,148,"        return new StatisticalSummaryValues(getMean(), getVariance(), getN(),
",0,0,0,3,7,1,6,2,0,8,69,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,158,"        sumImpl.increment(value);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,159,"        sumsqImpl.increment(value);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,160,"        minImpl.increment(value);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,161,"        maxImpl.increment(value);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,162,"        sumLogImpl.increment(value);
",0,0,0,1,2,0,6,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,163,"        geoMean.increment(value);
",0,0,0,1,2,0,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,164,"        secondMoment.increment(value);
",0,0,0,1,2,0,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,167,"        if (!(meanImpl instanceof Mean)) {
",2,0,0,2,5,0,0,2,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,168,"                meanImpl.increment(value);
",0,0,0,1,2,0,6,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,170,"        if (!(varianceImpl instanceof Variance)) {
",2,0,0,2,5,0,0,2,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,171,"            varianceImpl.increment(value);
",0,0,0,1,2,0,6,0,0,6,30,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,173,"        n++;
",2,0,0,0,0,0,0,0,0,3,4,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,174,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,181,"        return n;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,189,"        return sumImpl.getResult();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,200,"        return sumsqImpl.getResult();
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,211,"      if (mean == meanImpl) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,212,"          return new Mean(secondMoment).getResult();
",2,0,0,2,4,1,2,2,0,6,42,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,214,"          return meanImpl.getResult();
",0,0,0,1,2,1,4,0,0,4,28,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,226,"        double stdDev = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,227,"        if (getN() > 0) {
",0,1,0,2,5,0,2,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,228,"            if (getN() > 1) {
",0,1,0,2,5,0,2,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,229,"                stdDev = Math.sqrt(getVariance());
",2,0,0,2,4,0,6,0,0,9,34,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,231,"                stdDev = 0.0;
",2,0,0,0,0,0,0,0,0,3,13,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,234,"        return (stdDev);
",2,0,0,1,2,1,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,245,"        if (varianceImpl == variance) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,246,"            return new Variance(secondMoment).getResult();
",2,0,0,2,4,1,2,2,0,6,46,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,248,"            return varianceImpl.getResult();
",0,0,0,1,2,1,4,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,260,"        return maxImpl.getResult();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,271,"        return minImpl.getResult();
",0,0,0,1,2,1,4,0,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,282,"        return geoMeanImpl.getResult();
",0,0,0,1,2,1,4,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,292,"        StringBuffer outBuffer = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,44,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,293,"        outBuffer.append(""SummaryStatistics:\n"");
",0,0,0,1,2,0,4,0,0,5,41,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,294,"        outBuffer.append(""n: "" + getN() + ""\n"");
",0,1,0,2,4,0,6,0,0,9,40,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,295,"        outBuffer.append(""min: "" + getMin() + ""\n"");
",0,1,0,2,4,0,6,0,0,9,44,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,296,"        outBuffer.append(""max: "" + getMax() + ""\n"");
",0,1,0,2,4,0,6,0,0,9,44,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,297,"        outBuffer.append(""mean: "" + getMean() + ""\n"");
",0,1,0,2,4,0,6,0,0,9,46,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,298,"        outBuffer.append(""geometric mean: "" + getGeometricMean() + ""\n"");
",0,1,0,2,4,0,6,0,0,9,65,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,299,"        outBuffer.append(""variance: "" + getVariance() + ""\n"");
",0,1,0,2,4,0,6,0,0,9,54,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,300,"        outBuffer.append(""sum of squares: "" + getSumsq() + ""\n"");
",0,1,0,2,4,0,6,0,0,9,57,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,301,"        outBuffer.append(""standard deviation: "" + getStandardDeviation() + ""\n"");
",0,1,0,2,4,0,6,0,0,9,73,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,302,"        return outBuffer.toString();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,309,"        this.n = 0;
",2,0,0,0,0,0,0,0,0,3,11,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,310,"        minImpl.clear();
",0,0,0,1,2,0,4,0,0,4,16,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,311,"        maxImpl.clear();
",0,0,0,1,2,0,4,0,0,4,16,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,312,"        sumImpl.clear();
",0,0,0,1,2,0,4,0,0,4,16,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,313,"        sumLogImpl.clear();
",0,0,0,1,2,0,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,314,"        sumsqImpl.clear();
",0,0,0,1,2,0,4,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,315,"        geoMeanImpl.clear();
",0,0,0,1,2,0,4,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,316,"        secondMoment.clear();
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,317,"        if (meanImpl != mean) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,318,"            meanImpl.clear();
",0,0,0,1,2,0,4,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,320,"        if (varianceImpl != variance) {
",4,1,0,1,3,0,0,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,321,"            varianceImpl.clear();
",0,0,0,1,2,0,4,0,0,4,21,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,323,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,332,"        if (object == this ) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,333,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,335,"        if (object instanceof SummaryStatistics == false) {
",2,1,0,1,3,0,0,2,0,6,51,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,336,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,338,"        SummaryStatistics stat = (SummaryStatistics) object;
",4,0,0,1,2,0,0,4,0,8,52,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,339,"        return (MathUtils.equals(stat.getGeometricMean(), 
",0,0,0,1,4,1,8,0,0,8,49,13,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,356,"        int result = 31 + MathUtils.hash(getGeometricMean());
",2,1,0,2,4,0,6,0,0,9,53,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,357,"        result = result * 31 + MathUtils.hash(getGeometricMean());
",4,2,0,2,4,0,6,0,0,13,58,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,358,"        result = result * 31 + MathUtils.hash(getMax());
",4,2,0,2,4,0,6,0,0,13,48,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,359,"        result = result * 31 + MathUtils.hash(getMean());
",4,2,0,2,4,0,6,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,360,"        result = result * 31 + MathUtils.hash(getMin());
",4,2,0,2,4,0,6,0,0,13,48,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,361,"        result = result * 31 + MathUtils.hash(getN());
",4,2,0,2,4,0,6,0,0,13,46,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,362,"        result = result * 31 + MathUtils.hash(getSum());
",4,2,0,2,4,0,6,0,0,13,48,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,363,"        result = result * 31 + MathUtils.hash(getSumsq());
",4,2,0,2,4,0,6,0,0,13,50,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,364,"        result = result * 31 + MathUtils.hash(getVariance());
",4,2,0,2,4,0,6,0,0,13,53,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,365,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,375,"        return sumImpl;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,390,"        checkEmpty();
",0,0,0,1,2,0,2,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,391,"        this.sumImpl = sumImpl;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,392,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,400,"        return sumsqImpl;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,416,"        checkEmpty();
",0,0,0,1,2,0,2,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,417,"        this.sumsqImpl = sumsqImpl;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,418,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,426,"        return minImpl;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,441,"        checkEmpty();
",0,0,0,1,2,0,2,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,442,"        this.minImpl = minImpl;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,443,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,451,"        return maxImpl;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,466,"        checkEmpty();
",0,0,0,1,2,0,2,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,467,"        this.maxImpl = maxImpl;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,468,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,476,"        return sumLogImpl;
",2,0,0,0,0,1,0,0,0,2,18,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,492,"        checkEmpty();
",0,0,0,1,2,0,2,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,493,"        this.sumLogImpl = sumLogImpl;
",4,0,0,0,0,0,0,0,0,5,29,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,494,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,502,"        return geoMeanImpl;
",2,0,0,0,0,1,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,518,"        checkEmpty();
",0,0,0,1,2,0,2,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,519,"        this.geoMeanImpl = geoMeanImpl;
",4,0,0,0,0,0,0,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,520,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,528,"        return meanImpl;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,544,"        checkEmpty();
",0,0,0,1,2,0,2,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,545,"        this.meanImpl = meanImpl;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,546,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,554,"        return varianceImpl;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,570,"        checkEmpty();
",0,0,0,1,2,0,2,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,571,"        this.varianceImpl = varianceImpl;
",4,0,0,0,0,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,572,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,578,"        if (n > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,579,"            throw new IllegalStateException(
",0,0,0,0,1,0,0,2,0,2,32,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,102,582,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,61,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,62,"            value = d;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,64,"            value += d;
",4,0,0,0,0,0,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,66,"        n++;
",2,0,0,0,0,0,0,0,0,3,4,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,73,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,80,"        return n;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,87,"        value = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,19,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,88,"        n = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,89,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,106,"        double sum = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,107,"        if (test(values, begin, length)) {
",0,0,0,2,5,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,108,"            sum = 0.0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,109,"            for (int i = begin; i < begin + length; i++) {
",12,2,0,1,3,0,0,0,0,15,46,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,110,"                sum += values[i];
",2,0,1,1,2,0,0,0,0,7,17,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/Sum,102,113,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,61,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,62,"            value = d * d;
",6,1,0,0,0,0,0,0,0,8,14,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,64,"            value += d * d;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,66,"        n++;
",2,0,0,0,0,0,0,0,0,3,4,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,73,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,80,"        return n;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,87,"        value = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,19,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,88,"        n = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,89,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,106,"        double sumSq = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,107,"        if (test(values, begin, length)) {
",0,0,0,2,5,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,108,"            sumSq = 0.0;
",2,0,0,0,0,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,109,"            for (int i = begin; i < begin + length; i++) {
",12,2,0,1,3,0,0,0,0,15,46,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,110,"                sumSq += values[i] * values[i];
",2,1,1,2,4,0,0,0,0,12,31,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/summary/SumOfSquares,102,113,"        return sumSq;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,63,"        if (d < value || Double.isNaN(value)) {
",4,2,0,2,5,0,6,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,64,"            value = d;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,66,"        n++;
",2,0,0,0,0,0,0,0,0,3,4,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,73,"        value = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,19,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,74,"        n = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,81,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,88,"        return n;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,114,"        double min = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,115,"        if (test(values, begin, length)) {
",0,0,0,2,5,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,116,"            min = values[begin];
",2,0,1,1,2,0,0,0,0,7,20,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,117,"            for (int i = begin; i < begin + length; i++) {
",12,2,0,1,3,0,0,0,0,15,46,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,118,"                if (!Double.isNaN(values[i])) {
",0,0,1,3,7,0,4,0,0,9,31,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,119,"                    min = (min < values[i]) ? min : values[i];
",6,1,1,3,6,0,0,0,0,16,42,10,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Min,102,123,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,61,"        if (d > value || Double.isNaN(value)) {
",4,2,0,2,5,0,6,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,62,"            value = d;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,64,"        n++;
",2,0,0,0,0,0,0,0,0,3,4,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,65,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,71,"        value = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,19,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,72,"        n = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,73,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,79,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,86,"        return n;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,112,"        double max = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,113,"        if (test(values, begin, length)) {
",0,0,0,2,5,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,114,"            max = values[begin];
",2,0,1,1,2,0,0,0,0,7,20,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,115,"            for (int i = begin; i < begin + length; i++) {
",12,2,0,1,3,0,0,0,0,15,46,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,116,"                if (!Double.isNaN(values[i])) {
",0,0,1,3,7,0,4,0,0,9,31,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,117,"                    max = (max > values[i]) ? max : values[i];
",6,1,1,3,6,0,0,0,0,16,42,10,0.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/rank/Max,102,121,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
