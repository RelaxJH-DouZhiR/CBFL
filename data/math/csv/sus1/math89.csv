dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math/stat/Frequency,89,110,"            addValue((Comparable<?>) v);            
",2,0,0,2,4,0,2,2,0,6,28,5,1.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,57,"    public Frequency() {
",2,0,0,1,3,1,0,0,0,3,20,2,0.16667,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,58,"        freqTable = new TreeMap();
",2,0,0,1,2,0,0,2,0,5,26,4,0.16667,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,468,"    private static class NaturalComparator implements Comparator, Serializable {
",2,0,0,0,1,2,0,4,0,8,76,2,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,487,"            return ((Comparable)o1).compareTo(o2);
",2,0,0,3,6,1,4,2,0,8,38,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,66,"    public Frequency(Comparator comparator) {
",4,0,0,1,3,1,0,2,0,7,41,2,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,67,"        freqTable = new TreeMap(comparator);
",4,0,0,1,2,0,0,2,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,78,"        NumberFormat nf = NumberFormat.getPercentInstance();
",2,0,0,1,2,0,4,2,0,8,52,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,79,"        StringBuffer outBuffer = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,44,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,80,"        outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");
",0,0,0,1,2,0,4,0,0,5,58,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,81,"        Iterator iter = freqTable.keySet().iterator();
",2,0,0,2,4,0,6,2,0,10,46,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,82,"        while (iter.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,83,"            Object value = iter.next();
",2,0,0,1,2,0,4,2,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,84,"            outBuffer.append(value);
",0,0,0,1,2,0,6,0,0,6,24,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,85,"            outBuffer.append('\t');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,86,"            outBuffer.append(getCount(value));
",0,0,0,2,4,0,8,0,0,8,34,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,87,"            outBuffer.append('\t');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,88,"            outBuffer.append(nf.format(getPct(value)));
",0,0,0,3,6,0,12,0,0,12,43,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,89,"            outBuffer.append('\t');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,90,"            outBuffer.append(nf.format(getCumPct(value)));
",0,0,0,3,6,0,12,0,0,12,46,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,91,"            outBuffer.append('\n');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,92,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,93,"        return outBuffer.toString();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1
defect4j,math,org/apache/commons/math/stat/Frequency,89,124,"        Object obj = v;
",4,0,0,0,0,0,0,2,0,6,15,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,125,"        if (v instanceof Integer) {
",2,0,0,1,3,0,0,2,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,126,"           obj = Long.valueOf(((Integer) v).longValue());
",4,0,0,4,8,0,6,2,0,13,46,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,129,"            Long count = (Long) freqTable.get(obj);
",2,0,0,2,4,0,6,4,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,130,"            if (count == null) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,131,"                freqTable.put(obj, Long.valueOf(1));
",0,0,0,2,4,0,10,0,0,10,36,9,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,133,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));
",0,1,0,3,6,0,14,0,0,15,56,9,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,138,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,135,"        } catch (ClassCastException ex) {   
",2,0,0,1,4,0,0,2,0,4,33,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,137,"            throw new IllegalArgumentException(""Value not comparable to existing values."");
",0,0,0,1,2,0,0,2,0,3,79,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,139,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,147,"        addValue(Long.valueOf(v));
",0,0,0,2,4,0,8,0,0,8,26,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,148,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,156,"        addValue(Long.valueOf(v.longValue()));
",0,0,0,3,6,0,10,0,0,10,38,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,157,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,165,"        addValue(Long.valueOf(v));
",0,0,0,2,4,0,8,0,0,8,26,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,166,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,174,"        addValue(Character.valueOf(v));
",0,0,0,2,4,0,8,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,175,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,179,"        freqTable.clear();
",0,0,0,1,2,0,4,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,192,"        return freqTable.keySet().iterator();
",0,0,0,2,4,1,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,203,"        long result = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,204,"        Iterator iterator = freqTable.values().iterator();
",2,0,0,2,4,0,6,2,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,205,"        while (iterator.hasNext())  {
",0,0,0,2,5,0,4,0,0,4,29,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,206,"            result += ((Long) iterator.next()).longValue();
",2,0,0,4,8,0,6,2,0,11,47,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,208,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,219,"        if (v instanceof Integer) {
",2,0,0,1,3,0,0,2,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,220,"            return getCount(((Integer) v).longValue());
",2,0,0,4,8,1,4,2,0,8,43,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,222,"        long result = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,224,"            Long count =  (Long) freqTable.get(v);
",2,0,0,2,4,0,6,4,0,12,38,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,225,"            if (count != null) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,226,"                result = count.longValue();
",2,0,0,1,2,0,4,0,0,7,27,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,230,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,228,"        } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,231,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,241,"        return getCount(Long.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,33,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,251,"        return getCount(Long.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,33,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,261,"        return getCount(Character.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,276,"        final long sumFreq = getSumFreq();
",2,0,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,277,"        if (sumFreq == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,278,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,280,"        return (double) getCount(v) / (double) sumFreq;        
",2,1,0,3,6,1,4,0,0,7,47,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,291,"        return getPct(Long.valueOf(v));       
",0,0,0,2,4,1,8,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,302,"        return getPct(Long.valueOf(v));         
",0,0,0,2,4,1,8,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,313,"        return getPct(Character.valueOf(v));         
",0,0,0,2,4,1,8,0,0,8,36,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,327,"        if (getSumFreq() == 0) {
",0,1,0,2,5,0,2,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,328,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,330,"        if (v instanceof Integer) {
",2,0,0,1,3,0,0,2,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,331,"            return getCumFreq(((Integer) v).longValue());
",2,0,0,4,8,1,4,2,0,8,45,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,333,"        Comparator c = freqTable.comparator();
",2,0,0,1,2,0,4,2,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,334,"        if (c == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,335,"            c = new NaturalComparator();
",2,0,0,1,2,0,0,2,0,5,28,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,337,"        long result = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,340,"            Long value = (Long) freqTable.get(v);
",2,0,0,2,4,0,6,4,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,341,"            if (value != null) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,342,"                result = value.longValue();
",2,0,0,1,2,0,4,0,0,7,27,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,346,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,344,"        } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,345,"            return result;   // v is not comparable
",2,0,0,0,0,1,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,348,"        if (c.compare(v, freqTable.firstKey()) < 0) {
",0,1,0,3,7,0,10,0,0,11,45,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,349,"            return 0;  // v is comparable, but less than first value
",0,0,0,0,0,1,0,0,0,0,56,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,352,"        if (c.compare(v, freqTable.lastKey()) >= 0) {
",0,1,0,3,7,0,10,0,0,11,45,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,353,"            return getSumFreq();    // v is comparable, but greater than the last value
",0,0,0,1,2,1,2,0,0,2,75,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,356,"        Iterator values = valuesIterator();
",2,0,0,1,2,0,2,2,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,357,"        while (values.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,358,"            Object nextValue = values.next();
",2,0,0,1,2,0,4,2,0,8,33,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,359,"            if (c.compare(v, nextValue) > 0) {
",0,1,0,2,5,0,8,0,0,9,34,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,360,"                result += getCount(nextValue);
",2,0,0,1,2,0,4,0,0,7,30,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,362,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,364,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,365,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,377,"        return getCumFreq(Long.valueOf(v));       
",0,0,0,2,4,1,8,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,389,"        return getCumFreq(Long.valueOf(v));         
",0,0,0,2,4,1,8,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,401,"        return getCumFreq(Character.valueOf(v));         
",0,0,0,2,4,1,8,0,0,8,40,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,418,"        final long sumFreq = getSumFreq();
",2,0,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,419,"        if (sumFreq == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,420,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,422,"        return (double) getCumFreq(v) / (double) sumFreq;        
",2,1,0,3,6,1,4,0,0,7,49,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,435,"        return getCumPct(Long.valueOf(v));       
",0,0,0,2,4,1,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,448,"        return getCumPct(Long.valueOf(v));         
",0,0,0,2,4,1,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,461,"        return getCumPct(Character.valueOf(v));         
",0,0,0,2,4,1,8,0,0,8,39,5,0.00000,0
