dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,"            u /= 2;
",2,0,0,0,0,0,0,0,0,3,7,6,0.05000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,"            v /= 2;
",2,0,0,0,0,0,0,0,0,3,7,6,0.05000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,432,"            k++; // cast out twos.
",2,0,0,0,0,0,0,0,0,3,22,6,0.05000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,450,"                u = -t;
",4,0,0,0,0,0,0,0,0,6,7,8,0.03448,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,446,"                t /= 2; // cast out twos
",2,0,0,0,0,0,0,0,0,3,24,8,0.03030,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,"        if (u * v == 0) {
",4,2,0,1,3,0,0,0,0,6,17,4,0.02222,1
defect4j,math,org/apache/commons/math/util/MathUtils,94,413,"            return (Math.abs(u) + Math.abs(v));
",0,1,0,3,6,1,12,0,0,13,35,7,0.02222,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,420,"        if (u > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.02222,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,421,"            u = -u;
",4,0,0,0,0,0,0,0,0,6,7,6,0.02222,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,423,"        if (v > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.02222,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,424,"            v = -v;
",4,0,0,0,0,0,0,0,0,6,7,6,0.02222,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,427,"        int k = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.02222,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,428,"        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
",6,7,0,3,7,0,0,0,0,13,69,4,0.02222,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,434,"        if (k == 31) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.02222,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,439,"        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
",8,3,0,3,6,0,0,0,0,12,46,5,0.02222,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,445,"            while ((t & 1) == 0) { // while t is even..
",2,2,0,2,5,0,0,0,0,4,43,6,0.02222,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,449,"            if (t > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.02222,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,452,"                v = t;
",4,0,0,0,0,0,0,0,0,5,6,8,0.02222,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,455,"            t = (v - u) / 2;
",6,2,0,1,2,0,0,0,0,9,16,6,0.02222,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,458,"        } while (t != 0);
",2,1,0,1,3,0,0,0,0,3,17,4,0.02222,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,459,"        return -u * (1 << k); // gcd is u*2^k
",4,2,0,1,2,1,0,0,0,7,37,4,0.02222,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,63,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,77,"        long s = (long)x + (long)y;
",6,1,0,2,4,0,0,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,78,"        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,53,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,79,"            throw new ArithmeticException(""overflow: add"");
",0,0,0,1,2,0,0,2,0,3,47,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,81,"        return (int)s;
",2,0,0,1,2,1,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,95,"        return addAndCheck(a, b, ""overflow: add"");
",0,0,0,1,2,1,6,0,0,7,42,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,111,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,113,"            ret = addAndCheck(b, a, msg);
",2,0,0,1,2,0,8,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,117,"            if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,118,"                if (b < 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,120,"                    if (Long.MIN_VALUE - b <= a) {
",8,2,0,1,3,0,0,0,0,10,30,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,121,"                        ret = a + b;
",6,1,0,0,0,0,0,0,0,8,12,12,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,123,"                        throw new ArithmeticException(msg);
",2,0,0,1,2,0,0,2,0,4,35,13,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,127,"                    ret = a + b;
",6,1,0,0,0,0,0,0,0,8,12,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,134,"                if (a <= Long.MAX_VALUE - b) {
",8,2,0,1,3,0,0,0,0,10,30,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,135,"                    ret = a + b;
",6,1,0,0,0,0,0,0,0,8,12,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,137,"                    throw new ArithmeticException(msg);
",2,0,0,1,2,0,0,2,0,4,35,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,141,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,171,"        if (n < k) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,172,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,175,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,176,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,179,"        if ((n == k) || (k == 0)) {
",6,3,0,3,7,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,180,"            return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,182,"        if ((k == 1) || (k == n - 1)) {
",6,4,0,3,7,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,183,"            return n;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,186,"        long result = Math.round(binomialCoefficientDouble(n, k));
",2,0,0,2,4,0,10,0,0,12,58,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,187,"        if (result == Long.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,188,"            throw new ArithmeticException(
",0,0,0,0,1,0,0,2,0,2,30,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,191,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,217,"        return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);
",0,1,0,3,6,1,14,0,0,15,64,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,239,"        if (n < k) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,240,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,243,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,244,"            throw new IllegalArgumentException(
",0,0,0,0,1,0,0,2,0,2,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,247,"        if ((n == k) || (k == 0)) {
",6,3,0,3,7,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,248,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,250,"        if ((k == 1) || (k == n - 1)) {
",6,4,0,3,7,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,251,"            return Math.log((double)n);
",2,0,0,2,4,1,4,0,0,6,27,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,253,"        double logSum = 0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,256,"        for (int i = k + 1; i <= n; i++) {
",10,2,0,1,3,0,0,0,0,13,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,257,"            logSum += Math.log((double)i);
",4,0,0,2,4,0,4,0,0,9,30,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,261,"        for (int i = 2; i <= n - k; i++) {
",10,2,0,1,3,0,0,0,0,13,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,262,"            logSum -= Math.log((double)i);
",4,0,0,2,4,0,4,0,0,9,30,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,265,"        return logSum;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,276,"        return (Math.exp(x) + Math.exp(-x)) / 2.0;
",2,2,0,3,6,1,10,0,0,15,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,288,"        return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);
",4,3,0,4,8,1,12,0,0,19,56,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,302,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,303,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,305,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,306,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,308,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,309,"            if (!equals(x[i], y[i])) {
",0,0,1,4,9,0,2,0,0,11,26,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,310,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,313,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,339,"        long result = Math.round(factorialDouble(n));
",2,0,0,2,4,0,8,0,0,10,45,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,340,"        if (result == Long.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,341,"            throw new ArithmeticException(
",0,0,0,0,1,0,0,2,0,2,30,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,344,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,368,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,369,"            throw new IllegalArgumentException(""must have n >= 0 for n!"");
",0,0,0,1,2,0,0,2,0,3,62,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,371,"        return Math.floor(Math.exp(factorialLog(n)) + 0.5);
",0,1,0,3,6,1,12,0,0,13,51,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,388,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,389,"            throw new IllegalArgumentException(""must have n > 0 for n!"");
",0,0,0,1,2,0,0,2,0,3,61,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,391,"        double logSum = 0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,392,"        for (int i = 2; i <= n; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,393,"            logSum += Math.log((double)i);
",4,0,0,2,4,0,4,0,0,9,30,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,395,"        return logSum;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,435,"            throw new ArithmeticException(""overflow: gcd is 2^31"");
",0,0,0,1,2,0,0,2,0,3,55,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,469,"        return new Double(value).hashCode();
",2,0,0,2,4,1,2,2,0,6,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,480,"        return Arrays.hashCode(value);
",0,0,0,1,2,1,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,491,"        return (x >= ZB) ? PB : NB;
",8,1,0,1,2,1,0,0,0,9,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,503,"        if (Double.isNaN(x)) {
",0,0,0,2,5,0,6,0,0,6,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,504,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,506,"        return (x >= 0.0) ? 1.0 : -1.0;
",2,1,0,1,2,1,0,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,517,"        if (Float.isNaN(x)) {
",0,0,0,2,5,0,6,0,0,6,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,518,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,520,"        return (x >= 0.0F) ? 1.0F : -1.0F;
",2,1,0,1,2,1,0,0,0,4,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,530,"        return (x >= 0) ? 1 : -1;
",2,1,0,1,2,1,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,540,"        return (x >= 0L) ? 1L : -1L;
",2,1,0,1,2,1,0,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,551,"        return (x >= ZS) ? PS : NS;
",8,1,0,1,2,1,0,0,0,9,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,564,"        return Math.abs(mulAndCheck(a / gcd(a, b), b));
",2,1,0,3,6,1,14,0,0,17,47,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,584,"        return Math.log(x)/Math.log(base);
",0,1,0,2,4,1,12,0,0,13,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,598,"        long m = ((long)x) * ((long)y);
",6,1,0,4,8,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,599,"        if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,53,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,600,"            throw new ArithmeticException(""overflow: mul"");
",0,0,0,1,2,0,0,2,0,3,47,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,602,"        return (int)m;
",2,0,0,1,2,1,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,617,"        String msg = ""overflow: multiply"";
",2,0,0,0,0,0,0,2,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,618,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,620,"            ret = mulAndCheck(b, a);
",2,0,0,1,2,0,6,0,0,9,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,622,"            if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,623,"                if (b < 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,625,"                    if (a >= Long.MAX_VALUE / b) {
",8,2,0,1,3,0,0,0,0,10,30,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,626,"                        ret = a * b;
",6,1,0,0,0,0,0,0,0,8,12,12,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,628,"                        throw new ArithmeticException(msg);
",2,0,0,1,2,0,0,2,0,4,35,13,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,630,"                } else if (b > 0) {
",2,1,0,1,4,0,0,0,0,3,19,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,632,"                    if (Long.MIN_VALUE / b <= a) {
",8,2,0,1,3,0,0,0,0,10,30,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,633,"                        ret = a * b;
",6,1,0,0,0,0,0,0,0,8,12,13,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,635,"                        throw new ArithmeticException(msg);
",2,0,0,1,2,0,0,2,0,4,35,14,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,640,"                    ret = 0;
",2,0,0,0,0,0,0,0,0,3,8,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,642,"            } else if (a > 0) {
",2,1,0,1,4,0,0,0,0,3,19,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,647,"                if (a <= Long.MAX_VALUE / b) {
",8,2,0,1,3,0,0,0,0,10,30,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,648,"                    ret = a * b;
",6,1,0,0,0,0,0,0,0,8,12,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,650,"                    throw new ArithmeticException(msg);
",2,0,0,1,2,0,0,2,0,4,35,12,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,654,"                ret = 0;
",2,0,0,0,0,0,0,0,0,3,8,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,657,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,680,"        if (Double.isNaN(d) || Double.isInfinite(d)) {
",0,1,0,3,7,0,12,0,0,13,46,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,681,"                return d;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,682,"        } else if (d == 0) {
",2,1,0,1,4,0,0,0,0,3,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,683,"                return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,62,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,689,"        long bits     = Double.doubleToLongBits(d);
",2,0,0,1,2,0,6,0,0,8,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,690,"        long sign     = bits & 0x8000000000000000L;
",4,1,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,691,"        long exponent = bits & 0x7ff0000000000000L;
",4,1,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,692,"        long mantissa = bits & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,694,"        if (d * (direction - d) >= 0) {
",6,3,0,2,5,0,0,0,0,9,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,696,"                if (mantissa == 0x000fffffffffffffL) {
",2,1,0,1,3,0,0,0,0,3,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,697,"                        return Double.longBitsToDouble(sign |
",2,1,0,0,1,1,4,0,0,7,37,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,700,"                        return Double.longBitsToDouble(sign |
",2,1,0,0,1,1,4,0,0,7,37,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,705,"                if (mantissa == 0L) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,706,"                        return Double.longBitsToDouble(sign |
",2,1,0,0,1,1,4,0,0,7,37,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,710,"                        return Double.longBitsToDouble(sign |
",2,1,0,0,1,1,4,0,0,7,37,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,729,"        if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {
",2,2,0,4,9,0,12,0,0,16,58,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,730,"            return d;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,734,"        final long bits     = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,735,"        final long exponent = bits & 0x7ff0000000000000L;
",4,1,0,0,0,1,0,0,0,6,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,736,"        final long rest     = bits & 0x800fffffffffffffL;
",4,1,0,0,0,1,0,0,0,6,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,739,"        final long newBits = rest | (exponent + (((long) scaleFactor) << 52));
",8,3,0,4,8,1,0,0,0,12,70,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,740,"        return Double.longBitsToDouble(newBits);
",0,0,0,1,2,1,6,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,764,"         return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);
",14,5,0,2,4,1,4,0,0,23,64,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,777,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);
",4,0,0,1,2,1,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,794,"            return (new BigDecimal
",0,0,0,0,1,1,0,2,0,2,22,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,798,"        } catch (NumberFormatException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,799,"            if (Double.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,27,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,800,"                return x;          
",2,0,0,0,0,1,0,0,0,2,9,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,802,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,10,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,817,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);
",4,0,0,1,2,1,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,833,"        float sign = indicator(x);
",2,0,0,1,2,0,4,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,834,"        float factor = (float)Math.pow(10.0f, scale) * sign;
",4,1,0,2,4,0,6,0,0,11,52,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,835,"        return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;
",6,2,0,2,4,1,6,0,0,14,71,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,852,"        switch (roundingMethod) {
",2,0,0,1,3,0,0,0,0,2,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,854,"            if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,855,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,8,0,0,15,69,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,857,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,8,0,0,15,68,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,859,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,861,"            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,8,0,0,15,69,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,862,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,864,"            if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,865,"                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,8,0,0,15,68,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,867,"                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,8,0,0,15,69,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,869,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,871,"            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);
",6,0,0,1,2,0,4,0,0,11,57,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,872,"            double fraction = unscaled - Math.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,50,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,873,"            if (fraction > 0.5) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,874,"                unscaled = Math.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,31,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,876,"                unscaled = Math.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,32,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,878,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,881,"            double fraction = unscaled - Math.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,50,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,882,"            if (fraction > 0.5) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,883,"                unscaled = Math.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,31,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,884,"            } else if (fraction < 0.5) {
",2,1,0,1,4,0,0,0,0,3,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,885,"                unscaled = Math.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,888,"                if (Math.floor(unscaled) / 2.0 == Math.floor(Math
",0,3,0,1,4,0,12,0,0,15,49,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,890,"                    unscaled = Math.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,32,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,892,"                    unscaled = Math.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,31,11,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,895,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,898,"            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);
",6,0,0,1,2,0,4,0,0,11,57,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,899,"            double fraction = unscaled - Math.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,50,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,900,"            if (fraction >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,901,"                unscaled = Math.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,31,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,903,"                unscaled = Math.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,32,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,905,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,908,"            if (unscaled != Math.floor(unscaled)) {
",2,1,0,2,5,0,6,0,0,9,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,909,"                throw new ArithmeticException(""Inexact result from rounding"");
",0,0,0,1,2,0,0,2,0,3,62,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,913,"            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,8,0,0,15,69,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,914,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,916,"            throw new IllegalArgumentException(""Invalid rounding method."");
",0,0,0,1,2,0,0,2,0,3,63,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,918,"        return unscaled;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,932,"        return (x == ZB) ? ZB : (x > ZB) ? PB : NB;
",14,2,0,2,4,1,0,0,0,16,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,948,"        if (Double.isNaN(x)) {
",0,0,0,2,5,0,6,0,0,6,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,949,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,951,"        return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;
",4,2,0,2,4,1,0,0,0,7,49,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,966,"        if (Float.isNaN(x)) {
",0,0,0,2,5,0,6,0,0,6,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,967,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,969,"        return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;
",4,2,0,2,4,1,0,0,0,7,54,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,983,"        return (x == 0) ? 0 : (x > 0) ? 1 : -1;
",4,2,0,2,4,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,997,"        return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;
",4,2,0,2,4,1,0,0,0,7,44,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1012,"        return (x == ZS) ? ZS : (x > ZS) ? PS : NS;
",14,2,0,2,4,1,0,0,0,16,43,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1023,"        return (Math.exp(x) - Math.exp(-x)) / 2.0;
",2,2,0,3,6,1,10,0,0,15,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1037,"        long s = (long)x - (long)y;
",6,1,0,2,4,0,0,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1038,"        if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
",12,3,0,1,3,0,0,0,0,15,53,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1039,"            throw new ArithmeticException(""overflow: subtract"");
",0,0,0,1,2,0,0,2,0,3,52,7,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1041,"        return (int)s;
",2,0,0,1,2,1,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1056,"        String msg = ""overflow: subtract"";
",2,0,0,0,0,0,0,2,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1057,"        if (b == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1058,"            if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1059,"                ret = a - b;
",6,1,0,0,0,0,0,0,0,8,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1061,"                throw new ArithmeticException(msg);
",2,0,0,1,2,0,0,2,0,4,35,9,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1065,"            ret = addAndCheck(a, -b, msg);
",4,0,0,1,2,0,6,0,0,12,30,6,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,1067,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
