dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,"        } catch (ClassCastException ex) {   
",2,0,0,1,4,0,0,2,0,4,33,6,1.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,134,"            throw new IllegalArgumentException(""Value not comparable to existing values."");
",0,0,0,1,2,0,0,2,0,3,79,8,1.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,121,"        Object obj = v;
",4,0,0,0,0,0,0,2,0,6,15,4,0.20000,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,122,"        if (v instanceof Integer) {
",2,0,0,1,3,0,0,2,0,4,27,5,0.20000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,126,"            Long count = (Long) freqTable.get(obj);
",2,0,0,2,4,0,6,4,0,12,39,6,0.20000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,57,"    public Frequency() {
",2,0,0,1,3,1,0,0,0,3,20,2,0.16667,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,58,"        freqTable = new TreeMap();
",2,0,0,1,2,0,0,2,0,5,26,4,0.16667,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,66,"    public Frequency(Comparator comparator) {
",4,0,0,1,3,1,0,2,0,7,41,2,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,67,"        freqTable = new TreeMap(comparator);
",4,0,0,1,2,0,0,2,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,78,"        NumberFormat nf = NumberFormat.getPercentInstance();
",2,0,0,1,2,0,4,2,0,8,52,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,79,"        StringBuffer outBuffer = new StringBuffer();
",2,0,0,1,2,0,0,4,0,6,44,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,80,"        outBuffer.append(""Value \t Freq. \t Pct. \t Cum Pct. \n"");
",0,0,0,1,2,0,4,0,0,5,58,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,81,"        Iterator iter = freqTable.keySet().iterator();
",2,0,0,2,4,0,6,2,0,10,46,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,82,"        while (iter.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,83,"            Object value = iter.next();
",2,0,0,1,2,0,4,2,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,84,"            outBuffer.append(value);
",0,0,0,1,2,0,6,0,0,6,24,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,85,"            outBuffer.append('\t');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,86,"            outBuffer.append(getCount(value));
",0,0,0,2,4,0,8,0,0,8,34,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,87,"            outBuffer.append('\t');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,88,"            outBuffer.append(nf.format(getPct(value)));
",0,0,0,3,6,0,12,0,0,12,43,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,89,"            outBuffer.append('\t');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,90,"            outBuffer.append(nf.format(getCumPct(value)));
",0,0,0,3,6,0,12,0,0,12,46,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,91,"            outBuffer.append('\n');
",0,0,0,1,2,0,4,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,92,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,93,"        return outBuffer.toString();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,123,"           obj = Long.valueOf(((Integer) v).longValue());
",4,0,0,4,8,0,6,2,0,13,46,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,127,"            if (count == null) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,128,"                freqTable.put(obj, Long.valueOf(1));
",0,0,0,2,4,0,10,0,0,10,36,9,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,130,"                freqTable.put(obj, Long.valueOf(count.longValue() + 1));
",0,1,0,3,6,0,14,0,0,15,56,9,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,135,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,136,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,144,"        addValue(Long.valueOf(v));
",0,0,0,2,4,0,8,0,0,8,26,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,145,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,153,"        addValue(Long.valueOf(v.longValue()));
",0,0,0,3,6,0,10,0,0,10,38,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,154,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,162,"        addValue(Long.valueOf(v));
",0,0,0,2,4,0,8,0,0,8,26,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,163,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,171,"        addValue(Character.valueOf(v));
",0,0,0,2,4,0,8,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,172,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,176,"        freqTable.clear();
",0,0,0,1,2,0,4,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,177,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,189,"        return freqTable.keySet().iterator();
",0,0,0,2,4,1,6,0,0,6,37,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,200,"        long result = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,201,"        Iterator iterator = freqTable.values().iterator();
",2,0,0,2,4,0,6,2,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,202,"        while (iterator.hasNext())  {
",0,0,0,2,5,0,4,0,0,4,29,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,203,"            result += ((Long) iterator.next()).longValue();
",2,0,0,4,8,0,6,2,0,11,47,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,205,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,216,"        if (v instanceof Integer) {
",2,0,0,1,3,0,0,2,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,217,"            return getCount(((Integer) v).longValue());
",2,0,0,4,8,1,4,2,0,8,43,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,219,"        long result = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,221,"            Long count =  (Long) freqTable.get(v);
",2,0,0,2,4,0,6,4,0,12,38,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,222,"            if (count != null) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,223,"                result = count.longValue();
",2,0,0,1,2,0,4,0,0,7,27,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,227,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,225,"        } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,228,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,238,"        return getCount(Long.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,33,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,248,"        return getCount(Long.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,33,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,258,"        return getCount(Character.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,273,"        final long sumFreq = getSumFreq();
",2,0,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,274,"        if (sumFreq == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,275,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,277,"        return (double) getCount(v) / (double) sumFreq;        
",2,1,0,3,6,1,4,0,0,7,47,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,288,"        return getPct(Long.valueOf(v));       
",0,0,0,2,4,1,8,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,299,"        return getPct(Long.valueOf(v));         
",0,0,0,2,4,1,8,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,310,"        return getPct(Character.valueOf(v));         
",0,0,0,2,4,1,8,0,0,8,36,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,324,"        if (getSumFreq() == 0) {
",0,1,0,2,5,0,2,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,325,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,327,"        if (v instanceof Integer) {
",2,0,0,1,3,0,0,2,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,328,"            return getCumFreq(((Integer) v).longValue());
",2,0,0,4,8,1,4,2,0,8,45,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,330,"        Comparator c = freqTable.comparator();
",2,0,0,1,2,0,4,2,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,331,"        if (c == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,332,"            c = new NaturalComparator();
",2,0,0,1,2,0,0,2,0,5,28,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,334,"        long result = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,337,"            Long value = (Long) freqTable.get(v);
",2,0,0,2,4,0,6,4,0,12,37,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,338,"            if (value != null) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,339,"                result = value.longValue();
",2,0,0,1,2,0,4,0,0,7,27,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,343,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,341,"        } catch (ClassCastException ex) {
",2,0,0,1,4,0,0,2,0,4,33,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,342,"            return result;   // v is not comparable
",2,0,0,0,0,1,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,345,"        if (c.compare(v, freqTable.firstKey()) < 0) {
",0,1,0,3,7,0,10,0,0,11,45,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,346,"            return 0;  // v is comparable, but less than first value
",0,0,0,0,0,1,0,0,0,0,56,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,349,"        if (c.compare(v, freqTable.lastKey()) >= 0) {
",0,1,0,3,7,0,10,0,0,11,45,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,350,"            return getSumFreq();    // v is comparable, but greater than the last value
",0,0,0,1,2,1,2,0,0,2,75,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,353,"        Iterator values = valuesIterator();
",2,0,0,1,2,0,2,2,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,354,"        while (values.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,355,"            Object nextValue = values.next();
",2,0,0,1,2,0,4,2,0,8,33,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,356,"            if (c.compare(v, nextValue) > 0) {
",0,1,0,2,5,0,8,0,0,9,34,6,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,357,"                result += getCount(nextValue);
",2,0,0,1,2,0,4,0,0,7,30,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,359,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,361,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,362,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,374,"        return getCumFreq(Long.valueOf(v));       
",0,0,0,2,4,1,8,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,386,"        return getCumFreq(Long.valueOf(v));         
",0,0,0,2,4,1,8,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,398,"        return getCumFreq(Character.valueOf(v));         
",0,0,0,2,4,1,8,0,0,8,40,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,415,"        final long sumFreq = getSumFreq();
",2,0,0,1,2,1,2,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,416,"        if (sumFreq == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,417,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,419,"        return (double) getCumFreq(v) / (double) sumFreq;        
",2,1,0,3,6,1,4,0,0,7,49,4,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,432,"        return getCumPct(Long.valueOf(v));       
",0,0,0,2,4,1,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,445,"        return getCumPct(Long.valueOf(v));         
",0,0,0,2,4,1,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,458,"        return getCumPct(Character.valueOf(v));         
",0,0,0,2,4,1,8,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,465,"    private static class NaturalComparator implements Comparator, Serializable {
",2,0,0,0,1,2,0,4,0,8,76,2,0.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,484,"            return ((Comparable)o1).compareTo(o2);
",2,0,0,3,6,1,4,2,0,8,38,6,0.00000,0
