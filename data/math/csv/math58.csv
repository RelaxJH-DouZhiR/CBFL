dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,182,"            } catch (OutOfRangeException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,183,"                fwhmApprox = points[points.length - 1].getX() - points[0].getX();
",6,2,1,4,8,0,4,0,0,17,65,8,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,271,"            double minY = Double.POSITIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,39,6,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,272,"            double maxY = Double.NEGATIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,39,6,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,273,"            for (final WeightedObservedPoint point : points) {
",4,0,0,1,3,1,0,2,0,7,50,5,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,274,"                minY = Math.min(minY, point.getY());
",2,0,0,2,4,0,10,0,0,13,36,7,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,275,"                maxY = Math.max(maxY, point.getY());
",2,0,0,2,4,0,10,0,0,13,36,7,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,277,"            throw new OutOfRangeException(y, minY, maxY);
",6,0,0,1,2,0,0,2,0,8,45,6,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,52,"        this(null, wrong, min, boundIsAllowed);
",6,0,0,1,2,0,0,0,0,6,39,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,67,"        super(specific,
",2,0,0,0,1,0,0,0,0,2,15,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,73,"        this.min = min;
",4,0,0,0,0,0,0,0,0,5,15,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,74,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,46,"        this(null, wrong, lo, hi);
",6,0,0,1,2,0,0,0,0,6,26,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,62,"        super(specific, LocalizedFormats.OUT_OF_RANGE_SIMPLE,
",6,0,0,0,1,0,0,0,0,6,53,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,64,"        this.lo = lo;
",4,0,0,0,0,0,0,0,0,5,13,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,65,"        this.hi = hi;
",4,0,0,0,0,0,0,0,0,5,13,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,44,"        super(null, specific, general, args);
",6,0,0,1,2,0,0,0,0,7,37,3,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,65,"        super(cause);
",2,0,0,1,2,0,0,0,0,2,13,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,66,"        this.specific = specific;
",4,0,0,0,0,0,0,0,0,5,25,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,67,"        this.general = general;
",4,0,0,0,0,0,0,0,0,5,23,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,68,"        this.arguments = ArgUtils.flatten(arguments);
",2,0,0,1,2,0,6,0,0,9,45,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,50,"        super(specific, general, wrong, arguments);
",8,0,0,1,2,0,0,0,0,8,43,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,51,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,340,"    private LocalizedFormats(final String sourceFormat) {
",4,0,0,1,3,2,0,2,0,8,53,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,341,"        this.sourceFormat = sourceFormat;
",4,0,0,0,0,0,0,0,0,5,33,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,342,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),
",2,0,0,5,10,0,0,0,0,3,67,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),
",2,0,0,4,8,0,0,0,0,3,94,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),
",2,0,0,1,2,0,0,0,0,3,41,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),
",2,0,0,1,2,0,0,0,0,3,95,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),
",2,0,0,1,2,0,0,0,0,3,60,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),
",2,0,0,1,2,0,0,0,0,3,54,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,50,"    BANDWIDTH(""bandwidth ({0})""),
",2,0,0,3,6,0,0,0,0,3,29,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),
",2,0,0,4,8,0,0,0,0,3,108,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),
",2,0,0,3,6,0,0,0,0,3,93,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),
",2,0,0,1,2,0,0,0,0,3,123,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),
",2,0,0,1,2,0,0,0,0,3,89,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),
",2,0,0,2,4,0,0,0,0,3,108,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),
",2,0,0,1,2,0,0,0,0,3,100,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),
",2,0,0,2,4,0,0,0,0,3,94,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),
",2,0,0,2,4,0,0,0,0,3,91,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),
",2,0,0,3,6,0,0,0,0,3,97,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),
",2,0,0,2,4,0,0,0,0,3,83,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),
",2,0,0,2,4,0,0,0,0,3,86,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),
",2,0,0,2,4,0,0,0,0,3,87,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),
",2,0,0,1,2,0,0,0,0,3,84,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),
",2,0,0,1,2,0,0,0,0,3,131,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),
",2,0,0,1,2,0,0,0,0,3,75,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),
",2,0,0,2,4,0,0,0,0,3,98,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),
",2,0,0,2,4,0,0,0,0,3,78,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),
",2,0,0,1,2,0,0,0,0,3,95,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),
",2,0,0,2,4,0,0,0,0,3,74,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),
",2,0,0,1,2,0,0,0,0,3,55,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),
",2,0,0,3,6,0,0,0,0,3,79,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),
",2,0,0,2,4,0,0,0,0,3,115,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),
",2,0,0,5,10,0,0,0,0,3,78,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,46,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),
",2,0,0,2,4,0,0,0,0,3,112,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),
",2,0,0,2,4,0,0,0,0,3,86,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),
",2,0,0,5,10,0,0,0,0,3,290,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),
",2,0,0,3,6,0,0,0,0,3,263,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */
",2,0,0,1,2,0,0,0,0,3,52,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,80,"    CUMULATIVE_PROBABILITY_RETURNED_NAN(""Cumulative probability function returned NaN for argument {0} p = {1}""),
",2,0,0,3,6,0,0,0,0,3,109,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,81,"    DIFFERENT_ROWS_LENGTHS(""some rows have length {0} while others have length {1}""),
",2,0,0,3,6,0,0,0,0,3,81,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,82,"    DIGEST_NOT_INITIALIZED(""digest not initialized""),
",2,0,0,1,2,0,0,0,0,3,49,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,83,"    DIMENSIONS_MISMATCH_2x2(""got {0}x{1} but expected {2}x{3}""), /* keep */
",2,0,0,5,10,0,0,0,0,3,71,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,84,"    DIMENSIONS_MISMATCH_SIMPLE(""{0} != {1}""), /* keep */
",2,0,0,3,6,0,0,0,0,3,52,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,85,"    DIMENSIONS_MISMATCH(""dimensions mismatch""), /* keep */
",2,0,0,1,2,0,0,0,0,3,54,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,86,"    DISCRETE_CUMULATIVE_PROBABILITY_RETURNED_NAN(""Discrete cumulative probability function returned NaN for argument {0}""),
",2,0,0,2,4,0,0,0,0,3,119,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,87,"    DISTRIBUTION_NOT_LOADED(""distribution not loaded""),
",2,0,0,1,2,0,0,0,0,3,51,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,88,"    DUPLICATED_ABSCISSA(""Abscissa {0} is duplicated at both indices {1} and {2}""),
",2,0,0,4,8,0,0,0,0,3,78,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,89,"    EMPTY_CLUSTER_IN_K_MEANS(""empty cluster in k-means""),
",2,0,0,1,2,0,0,0,0,3,53,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,90,"    EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY(""empty polynomials coefficients array""), /* keep */
",2,0,0,1,2,0,0,0,0,3,88,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,91,"    EMPTY_SELECTED_COLUMN_INDEX_ARRAY(""empty selected column index array""),
",2,0,0,1,2,0,0,0,0,3,71,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,92,"    EMPTY_SELECTED_ROW_INDEX_ARRAY(""empty selected row index array""),
",2,0,0,1,2,0,0,0,0,3,65,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,93,"    EMPTY_STRING_FOR_IMAGINARY_CHARACTER(""empty string for imaginary character""),
",2,0,0,1,2,0,0,0,0,3,77,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,94,"    ENDPOINTS_NOT_AN_INTERVAL(""endpoints do not specify an interval: [{0}, {1}]""),
",2,0,0,4,8,0,0,0,0,3,78,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,95,"    EQUAL_VERTICES_IN_SIMPLEX(""equal vertices {0} and {1} in simplex configuration""),
",2,0,0,3,6,0,0,0,0,3,81,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,96,"    EULER_ANGLES_SINGULARITY(""Euler angles singularity""),
",2,0,0,1,2,0,0,0,0,3,53,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,97,"    EVALUATION_FAILED(""evaluation failed for argument = {0}""),
",2,0,0,2,4,0,0,0,0,3,58,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,98,"    EVALUATION(""evaluation""), /* keep */
",2,0,0,1,2,0,0,0,0,3,36,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,99,"    EXPANSION_FACTOR_SMALLER_THAN_ONE(""expansion factor smaller than one ({0})""),
",2,0,0,3,6,0,0,0,0,3,77,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,100,"    FACTORIAL_NEGATIVE_PARAMETER(""must have n >= 0 for n!, got n = {0}""),
",2,0,0,2,4,0,0,0,0,3,69,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,101,"    FAILED_BRACKETING(""number of iterations={4}, maximum iterations={5}, initial={6}, lower bound={7}, upper bound={8}, final a value={0}, final b value={1}, f(a)={2}, f(b)={3}""),
",2,0,0,12,24,0,0,0,0,3,175,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,102,"    FAILED_FRACTION_CONVERSION(""Unable to convert {0} to fraction after {1} iterations""),
",2,0,0,3,6,0,0,0,0,3,85,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,103,"    FIRST_COLUMNS_NOT_INITIALIZED_YET(""first {0} columns are not initialized yet""),
",2,0,0,2,4,0,0,0,0,3,79,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,104,"    FIRST_ELEMENT_NOT_ZERO(""first element is not 0: {0}""),
",2,0,0,2,4,0,0,0,0,3,54,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,105,"    FIRST_ROWS_NOT_INITIALIZED_YET(""first {0} rows are not initialized yet""),
",2,0,0,2,4,0,0,0,0,3,73,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,106,"    FRACTION_CONVERSION_OVERFLOW(""Overflow trying to convert {0} to fraction ({1}/{2})""),
",2,0,0,5,10,0,0,0,0,3,85,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,107,"    FUNCTION_NOT_DIFFERENTIABLE(""function is not differentiable""),
",2,0,0,1,2,0,0,0,0,3,62,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,108,"    FUNCTION_NOT_POLYNOMIAL(""function is not polynomial""),
",2,0,0,1,2,0,0,0,0,3,54,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,109,"    GCD_OVERFLOW_32_BITS(""overflow: gcd({0}, {1}) is 2^31""),
",2,0,0,4,8,0,0,0,0,3,56,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,110,"    GCD_OVERFLOW_64_BITS(""overflow: gcd({0}, {1}) is 2^63""),
",2,0,0,4,8,0,0,0,0,3,56,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,111,"    HOLE_BETWEEN_MODELS_TIME_RANGES(""{0} wide hole between models time ranges""),
",2,0,0,2,4,0,0,0,0,3,76,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,112,"    IDENTICAL_ABSCISSAS_DIVISION_BY_ZERO(""identical abscissas x[{0}] == x[{1}] == {2} cause division by zero""),
",2,0,0,6,12,0,0,0,0,3,107,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,113,"    INDEX_LARGER_THAN_MAX(""the index specified: {0} is larger than the current maximal index {1}""),
",2,0,0,3,6,0,0,0,0,3,95,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,114,"    INDEX_NOT_POSITIVE(""index ({0}) is not positive""),
",2,0,0,3,6,0,0,0,0,3,50,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,115,"    INDEX_OUT_OF_RANGE(""index {0} out of allowed range [{1}, {2}]""),
",2,0,0,5,10,0,0,0,0,3,64,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,116,"    INDEX(""index ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,32,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,117,"    NOT_FINITE_NUMBER(""{0} is not a finite number""), /* keep */
",2,0,0,2,4,0,0,0,0,3,59,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,118,"    ARRAY_ELEMENT(""value {0} at index {1}""), /* keep */
",2,0,0,3,6,0,0,0,0,3,51,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,119,"    INFINITE_ARRAY_ELEMENT(""Array contains an infinite element, {0} at index {1}""),
",2,0,0,3,6,0,0,0,0,3,79,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,120,"    INFINITE_VALUE_CONVERSION(""cannot convert infinite value""),
",2,0,0,1,2,0,0,0,0,3,59,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,121,"    INITIAL_CAPACITY_NOT_POSITIVE(""initial capacity ({0}) is not positive""),
",2,0,0,3,6,0,0,0,0,3,72,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,122,"    INITIAL_COLUMN_AFTER_FINAL_COLUMN(""initial column {1} after final column {0}""),
",2,0,0,3,6,0,0,0,0,3,79,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,123,"    INITIAL_ROW_AFTER_FINAL_ROW(""initial row {1} after final row {0}""),
",2,0,0,3,6,0,0,0,0,3,67,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,124,"    INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE(""input data comes from unsupported datasource: {0}, supported sources: {1}, {2}""),
",2,0,0,4,8,0,0,0,0,3,121,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,125,"    INSTANCES_NOT_COMPARABLE_TO_EXISTING_VALUES(""instance of class {0} not comparable to existing values""),
",2,0,0,2,4,0,0,0,0,3,103,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,126,"    INSUFFICIENT_DATA_FOR_T_STATISTIC(""insufficient data for t statistic, needs at least 2, got {0}""),
",2,0,0,2,4,0,0,0,0,3,98,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,127,"    INSUFFICIENT_DIMENSION(""insufficient dimension {0}, must be at least {1}""),
",2,0,0,3,6,0,0,0,0,3,75,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,128,"    DIMENSION(""dimension ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,40,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,129,"    INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE(""sample contains {0} observed points, at least {1} are required""),
",2,0,0,3,6,0,0,0,0,3,105,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,130,"    INSUFFICIENT_ROWS_AND_COLUMNS(""insufficient data: only {0} rows and {1} columns.""),
",2,0,0,3,6,0,0,0,0,3,83,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,131,"    INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT(""{0} method needs at least one previous point""),
",2,0,0,2,4,0,0,0,0,3,101,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,132,"    INTERNAL_ERROR(""internal error, please fill a bug report at {0}""),
",2,0,0,2,4,0,0,0,0,3,66,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,133,"    INVALID_BRACKETING_PARAMETERS(""invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}""),
",2,0,0,4,8,0,0,0,0,3,112,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,134,"    INVALID_INTERVAL_INITIAL_VALUE_PARAMETERS(""invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}""),
",2,0,0,4,8,0,0,0,0,3,124,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,135,"    INVALID_ITERATIONS_LIMITS(""invalid iteration limits: min={0}, max={1}""),
",2,0,0,3,6,0,0,0,0,3,72,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,136,"    INVALID_MAX_ITERATIONS(""bad value for maximum iterations number: {0}""),
",2,0,0,2,4,0,0,0,0,3,71,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,137,"    INVALID_REGRESSION_ARRAY(""input data array length = {0} does not match the number of observations = {1} and the number of regressors = {2}""),
",2,0,0,4,8,0,0,0,0,3,141,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,138,"    INVALID_ROUNDING_METHOD(""invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})""),
",2,0,0,26,52,0,0,0,0,3,165,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,139,"    ITERATOR_EXHAUSTED(""iterator exhausted""),
",2,0,0,1,2,0,0,0,0,3,41,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,140,"    LCM_OVERFLOW_32_BITS(""overflow: lcm({0}, {1}) is 2^31""),
",2,0,0,4,8,0,0,0,0,3,56,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,141,"    LCM_OVERFLOW_64_BITS(""overflow: lcm({0}, {1}) is 2^63""),
",2,0,0,4,8,0,0,0,0,3,56,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,142,"    LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE(""list of chromosomes bigger than maxPopulationSize""),
",2,0,0,1,2,0,0,0,0,3,101,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,143,"    LOESS_EXPECTS_AT_LEAST_ONE_POINT(""Loess expects at least 1 point""),
",2,0,0,1,2,0,0,0,0,3,67,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,144,"    LOWER_BOUND_NOT_BELOW_UPPER_BOUND(""lower bound ({0}) must be strictly less than upper bound ({1})""), /* keep */
",2,0,0,5,10,0,0,0,0,3,111,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,145,"    LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT(""lower endpoint ({0}) must be less than or equal to upper endpoint ({1})""),
",2,0,0,5,10,0,0,0,0,3,111,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,146,"    MAP_MODIFIED_WHILE_ITERATING(""map has been modified while iterating""),
",2,0,0,1,2,0,0,0,0,3,70,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,147,"    EVALUATIONS(""evaluations""), /* keep */
",2,0,0,1,2,0,0,0,0,3,38,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,148,"    MAX_COUNT_EXCEEDED(""maximal count ({0}) exceeded""), /* keep */
",2,0,0,3,6,0,0,0,0,3,62,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,149,"    MAX_EVALUATIONS_EXCEEDED(""maximal number of evaluations ({0}) exceeded""),
",2,0,0,3,6,0,0,0,0,3,73,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,150,"    MAX_ITERATIONS_EXCEEDED(""maximal number of iterations ({0}) exceeded""),
",2,0,0,3,6,0,0,0,0,3,71,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,151,"    MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION(""minimal step size ({0,number,0.00E00}) reached, integration needs {1,number,0.00E00}""),
",2,0,0,4,8,0,0,0,0,3,132,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,152,"    MISMATCHED_LOESS_ABSCISSA_ORDINATE_ARRAYS(""Loess expects the abscissa and ordinate arrays to be of the same size, but got {0} abscissae and {1} ordinatae""),
",2,0,0,3,6,0,0,0,0,3,156,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,153,"    NAN_ELEMENT_AT_INDEX(""element {0} is NaN""),
",2,0,0,2,4,0,0,0,0,3,43,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,154,"    NAN_VALUE_CONVERSION(""cannot convert NaN value""),
",2,0,0,1,2,0,0,0,0,3,49,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,155,"    NEGATIVE_BRIGHTNESS_EXPONENT(""brightness exponent should be positive or null, but got {0}""),
",2,0,0,2,4,0,0,0,0,3,92,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,156,"    NEGATIVE_COMPLEX_MODULE(""negative complex module {0}""),
",2,0,0,2,4,0,0,0,0,3,55,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,157,"    NEGATIVE_ELEMENT_AT_2D_INDEX(""element ({0}, {1}) is negative: {2}""),
",2,0,0,5,10,0,0,0,0,3,68,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,158,"    NEGATIVE_ELEMENT_AT_INDEX(""element {0} is negative: {1}""),
",2,0,0,3,6,0,0,0,0,3,58,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,159,"    NEGATIVE_NUMBER_OF_SUCCESSES(""number of successes must be non-negative ({0})""),
",2,0,0,3,6,0,0,0,0,3,79,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,160,"    NUMBER_OF_SUCCESSES(""number of successes ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,60,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,161,"    NEGATIVE_NUMBER_OF_TRIALS(""number of trials must be non-negative ({0})""),
",2,0,0,3,6,0,0,0,0,3,73,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,162,"    NUMBER_OF_TRIALS(""number of trials ({0})""),
",2,0,0,3,6,0,0,0,0,3,43,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,163,"    ROBUSTNESS_ITERATIONS(""number of robustness iterations ({0})""),
",2,0,0,3,6,0,0,0,0,3,63,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,164,"    START_POSITION(""start position ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,50,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,165,"    NON_CONVERGENT_CONTINUED_FRACTION(""Continued fraction convergents failed to converge (in less than {0} iterations) for value {1}""),
",2,0,0,4,8,0,0,0,0,3,131,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,166,"    NON_POSITIVE_MICROSPHERE_ELEMENTS(""number of microsphere elements must be positive, but got {0}""),
",2,0,0,2,4,0,0,0,0,3,98,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,167,"    NON_POSITIVE_POLYNOMIAL_DEGREE(""polynomial degree must be positive: degree={0}""),
",2,0,0,2,4,0,0,0,0,3,81,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,168,"    NON_REAL_FINITE_ABSCISSA(""all abscissae must be finite real numbers, but {0}-th is {1}""),
",2,0,0,3,6,0,0,0,0,3,89,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,169,"    NON_REAL_FINITE_ORDINATE(""all ordinatae must be finite real numbers, but {0}-th is {1}""),
",2,0,0,3,6,0,0,0,0,3,89,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,170,"    NON_REAL_FINITE_WEIGHT(""all weights must be finite real numbers, but {0}-th is {1}""),
",2,0,0,3,6,0,0,0,0,3,85,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,171,"    NON_SQUARE_MATRIX(""a {0}x{1} matrix was provided instead of a square matrix""),
",2,0,0,3,6,0,0,0,0,3,78,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,172,"    NORMALIZE_INFINITE(""Cannot normalize to an infinite value""),
",2,0,0,1,2,0,0,0,0,3,60,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,173,"    NORMALIZE_NAN(""Cannot normalize to NaN""),
",2,0,0,1,2,0,0,0,0,3,41,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,174,"    NOT_ADDITION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not addition compatible""),
",2,0,0,5,10,0,0,0,0,3,93,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,175,"    NOT_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not decreasing ({2} < {3})""),
",2,0,0,6,12,0,0,0,0,3,85,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,176,"    NOT_DECREASING_SEQUENCE(""points {3} and {2} are not decreasing ({1} < {0})""), /* keep */
",2,0,0,6,12,0,0,0,0,3,88,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,177,"    NOT_ENOUGH_DATA_FOR_NUMBER_OF_PREDICTORS(""not enough data ({0} rows) for this many predictors ({1} predictors)""),
",2,0,0,5,10,0,0,0,0,3,113,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,178,"    NOT_ENOUGH_POINTS_IN_SPLINE_PARTITION(""spline partition must have at least {0} points, got {1}""),
",2,0,0,3,6,0,0,0,0,3,97,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,179,"    NOT_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not increasing ({2} > {3})""),
",2,0,0,6,12,0,0,0,0,3,85,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,180,"    NOT_INCREASING_SEQUENCE(""points {3} and {2} are not increasing ({1} > {0})""), /* keep */
",2,0,0,6,12,0,0,0,0,3,88,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,181,"    NOT_MULTIPLICATION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not multiplication compatible""),
",2,0,0,5,10,0,0,0,0,3,105,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,182,"    ALPHA(""alpha""), /* keep */
",2,0,0,1,2,0,0,0,0,3,26,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,183,"    BETA(""beta""), /* keep */
",2,0,0,1,2,0,0,0,0,3,24,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,184,"    NOT_POSITIVE_COLUMNDIMENSION(""invalid column dimension: {0} (must be positive)""),
",2,0,0,3,6,0,0,0,0,3,81,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,185,"    NOT_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix""),
",2,0,0,1,2,0,0,0,0,3,61,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,186,"    NON_POSITIVE_DEFINITE_MATRIX(""not positive definite matrix: diagonal element at ({0},{0}) is larger than {2}""), /* keep */
",2,0,0,5,10,0,0,0,0,3,122,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,187,"    DEGREES_OF_FREEDOM(""degrees of freedom ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,58,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,188,"    NOT_POSITIVE_DEGREES_OF_FREEDOM(""degrees of freedom must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,77,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,189,"    NOT_POSITIVE_ELEMENT_AT_INDEX(""element {0} is not positive: {1}""),
",2,0,0,3,6,0,0,0,0,3,66,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,190,"    NOT_POSITIVE_EXPONENT(""invalid exponent {0} (must be positive)""),
",2,0,0,3,6,0,0,0,0,3,65,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,191,"    EXPONENT(""exponent ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,38,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,192,"    NOT_POSITIVE_LENGTH(""length must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,53,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,193,"    LENGTH(""length ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,34,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,194,"    NOT_POSITIVE_MEAN(""mean must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,49,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,195,"    MEAN(""mean ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,30,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,196,"    NOT_POSITIVE_NUMBER_OF_SAMPLES(""number of sample is not positive: {0}""),
",2,0,0,2,4,0,0,0,0,3,72,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,197,"    NUMBER_OF_SAMPLES(""number of samples ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,56,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,198,"    NOT_POSITIVE_PERMUTATION(""permutation k ({0}) must be positive""),
",2,0,0,3,6,0,0,0,0,3,65,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,199,"    PERMUTATION_SIZE(""permutation size ({0}""), /* keep */
",2,0,0,2,5,0,0,0,0,3,53,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,200,"    NOT_POSITIVE_POISSON_MEAN(""the Poisson mean must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,69,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,201,"    NOT_POSITIVE_POPULATION_SIZE(""population size must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,71,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,202,"    POPULATION_SIZE(""population size ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,52,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,203,"    NOT_POSITIVE_ROW_DIMENSION(""invalid row dimension: {0} (must be positive)""),
",2,0,0,3,6,0,0,0,0,3,76,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,204,"    NOT_POSITIVE_SAMPLE_SIZE(""sample size must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,63,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,205,"    NOT_POSITIVE_SCALE(""scale must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,51,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,206,"    SCALE(""scale ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,32,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,207,"    NOT_POSITIVE_SHAPE(""shape must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,51,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,208,"    SHAPE(""shape ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,32,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,209,"    NOT_POSITIVE_STANDARD_DEVIATION(""standard deviation must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,77,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,210,"    STANDARD_DEVIATION(""standard deviation ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,58,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,211,"    NOT_POSITIVE_UPPER_BOUND(""upper bound must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,63,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,212,"    NOT_POSITIVE_WINDOW_SIZE(""window size must be positive ({0})""),
",2,0,0,3,6,0,0,0,0,3,63,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,213,"    NOT_POWER_OF_TWO(""{0} is not a power of 2""),
",2,0,0,2,4,0,0,0,0,3,44,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,214,"    NOT_POWER_OF_TWO_CONSIDER_PADDING(""{0} is not a power of 2, consider padding for fix""),
",2,0,0,2,4,0,0,0,0,3,87,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,215,"    NOT_POWER_OF_TWO_PLUS_ONE(""{0} is not a power of 2 plus one""),
",2,0,0,2,4,0,0,0,0,3,62,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,216,"    NOT_STRICTLY_DECREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly decreasing ({2} <= {3})""),
",2,0,0,6,12,0,0,0,0,3,104,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,217,"    NOT_STRICTLY_DECREASING_SEQUENCE(""points {3} and {2} are not strictly decreasing ({1} <= {0})""), /* keep */
",2,0,0,6,12,0,0,0,0,3,107,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,218,"    NOT_STRICTLY_INCREASING_KNOT_VALUES(""knot values must be strictly increasing""),
",2,0,0,1,2,0,0,0,0,3,79,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,219,"    NOT_STRICTLY_INCREASING_NUMBER_OF_POINTS(""points {0} and {1} are not strictly increasing ({2} >= {3})""),
",2,0,0,6,12,0,0,0,0,3,104,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,220,"    NOT_STRICTLY_INCREASING_SEQUENCE(""points {3} and {2} are not strictly increasing ({1} >= {0})""), /* keep */
",2,0,0,6,12,0,0,0,0,3,107,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,221,"    NOT_SUBTRACTION_COMPATIBLE_MATRICES(""{0}x{1} and {2}x{3} matrices are not subtraction compatible""),
",2,0,0,5,10,0,0,0,0,3,99,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,222,"    NOT_SYMMETRIC_MATRIX(""not symmetric matrix""),
",2,0,0,1,2,0,0,0,0,3,45,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,223,"    NON_SYMMETRIC_MATRIX(""non symmetric matrix: the difference between entries at ({0},{1}) and ({1},{0}) is larger than {2}""), /* keep */
",2,0,0,8,16,0,0,0,0,3,134,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,224,"    NO_BIN_SELECTED(""no bin selected""),
",2,0,0,1,2,0,0,0,0,3,35,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,225,"    NO_CONVERGENCE_WITH_ANY_START_POINT(""none of the {0} start points lead to convergence""), /* keep */
",2,0,0,2,4,0,0,0,0,3,99,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,226,"    NO_DATA(""no data""), /* keep */
",2,0,0,1,2,0,0,0,0,3,30,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,227,"    NO_DEGREES_OF_FREEDOM(""no degrees of freedom ({0} measurements, {1} parameters)""),
",2,0,0,4,8,0,0,0,0,3,82,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,228,"    NO_DENSITY_FOR_THIS_DISTRIBUTION(""This distribution does not have a density function implemented""),
",2,0,0,1,2,0,0,0,0,3,99,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,229,"    NO_FEASIBLE_SOLUTION(""no feasible solution""),
",2,0,0,1,2,0,0,0,0,3,45,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,230,"    NO_OPTIMUM_COMPUTED_YET(""no optimum computed yet""), /* keep */
",2,0,0,1,2,0,0,0,0,3,62,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,231,"    NO_RESULT_AVAILABLE(""no result available""),
",2,0,0,1,2,0,0,0,0,3,43,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,232,"    NO_SUCH_MATRIX_ENTRY(""no entry at indices ({0}, {1}) in a {2}x{3} matrix""),
",2,0,0,6,12,0,0,0,0,3,75,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,233,"    NULL_NOT_ALLOWED(""null is not allowed""), /* keep */
",2,0,0,1,2,0,0,0,0,3,51,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,234,"    COVARIANCE_MATRIX(""covariance matrix""), /* keep */
",2,0,0,1,2,0,0,0,0,3,50,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,235,"    DENOMINATOR(""denominator""), /* keep */
",2,0,0,1,2,0,0,0,0,3,38,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,236,"    DENOMINATOR_FORMAT(""denominator format""), /* keep */
",2,0,0,1,2,0,0,0,0,3,52,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,237,"    FRACTION(""fraction""), /* keep */
",2,0,0,1,2,0,0,0,0,3,32,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,238,"    FUNCTION(""function""), /* keep */
",2,0,0,1,2,0,0,0,0,3,32,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,239,"    IMAGINARY_FORMAT(""imaginary format""), /* keep */
",2,0,0,1,2,0,0,0,0,3,48,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,240,"    INPUT_ARRAY(""input array""), /* keep */
",2,0,0,1,2,0,0,0,0,3,38,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,241,"    NUMERATOR(""numerator""), /* keep */
",2,0,0,1,2,0,0,0,0,3,34,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,242,"    NUMERATOR_FORMAT(""numerator format""), /* keep */
",2,0,0,1,2,0,0,0,0,3,48,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,243,"    OBJECT_TRANSFORMATION(""conversion exception in transformation""), /* keep */
",2,0,0,1,2,0,0,0,0,3,75,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,244,"    REAL_FORMAT(""real format""), /* keep */
",2,0,0,1,2,0,0,0,0,3,38,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,245,"    WHOLE_FORMAT(""whole format""), /* keep */
",2,0,0,1,2,0,0,0,0,3,40,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,246,"    NUMBER_TOO_LARGE(""{0} is larger than the maximum ({1})""), /* keep */
",2,0,0,4,8,0,0,0,0,3,68,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,247,"    NUMBER_TOO_SMALL(""{0} is smaller than the minimum ({1})""), /* keep */
",2,0,0,4,8,0,0,0,0,3,69,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,248,"    NUMBER_TOO_LARGE_BOUND_EXCLUDED(""{0} is larger than, or equal to, the maximum ({1})""), /* keep */
",2,0,0,4,8,0,0,0,0,3,97,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,249,"    NUMBER_TOO_SMALL_BOUND_EXCLUDED(""{0} is smaller than, or equal to, the minimum ({1})""), /* keep */
",2,0,0,4,8,0,0,0,0,3,98,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,250,"    NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE(""number of successes ({0}) must be less than or equal to population size ({1})""),
",2,0,0,5,10,0,0,0,0,3,127,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,251,"    NUMERATOR_OVERFLOW_AFTER_MULTIPLY(""overflow, numerator too large after multiply: {0}""),
",2,0,0,2,4,0,0,0,0,3,87,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,252,"    N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED(""{0} points Legendre-Gauss integrator not supported, number of points must be in the {1}-{2} range""),
",2,0,0,4,8,0,0,0,0,3,150,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,253,"    OBSERVED_COUNTS_ALL_ZERO(""observed counts are all 0 in observed array {0}""),
",2,0,0,2,4,0,0,0,0,3,76,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,254,"    OBSERVED_COUNTS_BOTTH_ZERO_FOR_ENTRY(""observed counts are both zero for entry {0}""),
",2,0,0,2,4,0,0,0,0,3,84,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,255,"    OUT_OF_BOUNDS_QUANTILE_VALUE(""out of bounds quantile value: {0}, must be in (0, 100]""),
",2,0,0,3,6,0,0,0,0,3,87,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,256,"    OUT_OF_BOUND_SIGNIFICANCE_LEVEL(""out of bounds significance level {0}, must be between {1} and {2}""),
",2,0,0,4,8,0,0,0,0,3,101,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,257,"    SIGNIFICANCE_LEVEL(""significance level ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,58,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,258,"    OUT_OF_ORDER_ABSCISSA_ARRAY(""the abscissae array must be sorted in a strictly increasing order, but the {0}-th element is {1} whereas {2}-th is {3}""),
",2,0,0,5,10,0,0,0,0,3,150,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,259,"    OUT_OF_RANGE_ROOT_OF_UNITY_INDEX(""out of range root of unity index {0} (must be in [{1};{2}])""),
",2,0,0,6,12,0,0,0,0,3,96,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,260,"    OUT_OF_RANGE(""out of range""), /* keep */
",2,0,0,1,2,0,0,0,0,3,40,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,261,"    OUT_OF_RANGE_SIMPLE(""{0} out of [{1}, {2}] range""), /* keep */
",2,0,0,5,10,0,0,0,0,3,62,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,262,"    OVERFLOW_IN_FRACTION(""overflow in fraction {0}/{1}, cannot negate""),
",2,0,0,3,6,0,0,0,0,3,68,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,263,"    OVERFLOW_IN_ADDITION(""overflow in addition: {0} + {1}""),
",2,0,0,3,6,0,0,0,0,3,56,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,264,"    OVERFLOW_IN_SUBTRACTION(""overflow in subtraction: {0} - {1}""),
",2,0,0,3,6,0,0,0,0,3,62,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,265,"    PERCENTILE_IMPLEMENTATION_CANNOT_ACCESS_METHOD(""cannot access {0} method in percentile implementation {1}""),
",2,0,0,3,6,0,0,0,0,3,108,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,266,"    PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD(""percentile implementation {0} does not support {1}""),
",2,0,0,3,6,0,0,0,0,3,99,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,267,"    PERMUTATION_EXCEEDS_N(""permutation size ({0}) exceeds permuation domain ({1})""), /* keep */
",2,0,0,5,10,0,0,0,0,3,91,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,268,"    POLYNOMIAL(""polynomial""), /* keep */
",2,0,0,1,2,0,0,0,0,3,36,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,269,"    POLYNOMIAL_INTERPOLANTS_MISMATCH_SEGMENTS(""number of polynomial interpolants must match the number of segments ({0} != {1} - 1)""),
",2,0,0,4,8,0,0,0,0,3,130,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,270,"    POPULATION_LIMIT_NOT_POSITIVE(""population limit has to be positive""),
",2,0,0,1,2,0,0,0,0,3,69,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,271,"    POSITION_SIZE_MISMATCH_INPUT_ARRAY(""position {0} and size {1} don't fit to the size of the input array {2}""),
",2,0,0,4,8,0,0,0,0,3,109,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,272,"    POWER_NEGATIVE_PARAMETERS(""cannot raise an integral value to a negative power ({0}^{1})""),
",2,0,0,4,8,0,0,0,0,3,90,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,273,"    PROPAGATION_DIRECTION_MISMATCH(""propagation direction mismatch""),
",2,0,0,1,2,0,0,0,0,3,65,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,274,"    RANDOMKEY_MUTATION_WRONG_CLASS(""RandomKeyMutation works only with RandomKeys, not {0}""),
",2,0,0,2,4,0,0,0,0,3,88,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,275,"    ROOTS_OF_UNITY_NOT_COMPUTED_YET(""roots of unity have not been computed yet""),
",2,0,0,1,2,0,0,0,0,3,77,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,276,"    ROTATION_MATRIX_DIMENSIONS(""a {0}x{1} matrix cannot be a rotation matrix""),
",2,0,0,3,6,0,0,0,0,3,75,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,277,"    ROW_INDEX_OUT_OF_RANGE(""row index {0} out of allowed range [{1}, {2}]""),
",2,0,0,5,10,0,0,0,0,3,72,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,278,"    ROW_INDEX(""row index ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,40,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,279,"    SAME_SIGN_AT_ENDPOINTS(""function values at endpoints do not have different signs, endpoints: [{0}, {1}], values: [{2}, {3}]""),
",2,0,0,7,14,0,0,0,0,3,126,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,280,"    SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE(""sample size ({0}) exceeds collection size ({1})""), /* keep */
",2,0,0,5,10,0,0,0,0,3,98,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,281,"    SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE(""sample size ({0}) must be less than or equal to population size ({1})""),
",2,0,0,5,10,0,0,0,0,3,113,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,282,"    SIMPLEX_NEED_ONE_POINT(""simplex must contain at least one point""),
",2,0,0,1,2,0,0,0,0,3,66,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,283,"    SIMPLE_MESSAGE(""{0}""),
",2,0,0,2,4,0,0,0,0,3,22,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,284,"    SINGULAR_MATRIX(""matrix is singular""), /* keep */
",2,0,0,1,2,0,0,0,0,3,49,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,285,"    SUBARRAY_ENDS_AFTER_ARRAY_END(""subarray ends after array end""),
",2,0,0,1,2,0,0,0,0,3,63,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,286,"    TOO_LARGE_CUTOFF_SINGULAR_VALUE(""cutoff singular value is {0}, should be at most {1}""),
",2,0,0,3,6,0,0,0,0,3,87,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,287,"    TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(""cannot discard {0} elements from a {1} elements array""),
",2,0,0,3,6,0,0,0,0,3,97,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,288,"    TOO_SMALL_COST_RELATIVE_TOLERANCE(""cost relative tolerance is too small ({0}), no further reduction in the sum of squares is possible""),
",2,0,0,3,6,0,0,0,0,3,136,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,289,"    TOO_SMALL_INTEGRATION_INTERVAL(""too small integration interval: length = {0}""),
",2,0,0,2,4,0,0,0,0,3,79,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,290,"    TOO_SMALL_ORTHOGONALITY_TOLERANCE(""orthogonality tolerance is too small ({0}), solution is orthogonal to the jacobian""),
",2,0,0,3,6,0,0,0,0,3,120,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,291,"    TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE(""parameters relative tolerance is too small ({0}), no further improvement in the approximate solution is possible""),
",2,0,0,3,6,0,0,0,0,3,156,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,292,"    TWO_OR_MORE_CATEGORIES_REQUIRED(""two or more categories required, got {0}""),
",2,0,0,2,4,0,0,0,0,3,76,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,293,"    TWO_OR_MORE_VALUES_IN_CATEGORY_REQUIRED(""two or more values required in each category, one has {0}""),
",2,0,0,2,4,0,0,0,0,3,101,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,294,"    UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH(""unable to bracket optimum in line search""),
",2,0,0,1,2,0,0,0,0,3,85,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,295,"    UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM(""unable to compute covariances: singular problem""),
",2,0,0,1,2,0,0,0,0,3,97,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,296,"    UNABLE_TO_FIRST_GUESS_HARMONIC_COEFFICIENTS(""unable to first guess the harmonic coefficients""),
",2,0,0,1,2,0,0,0,0,3,95,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,297,"    UNABLE_TO_ORTHOGONOLIZE_MATRIX(""unable to orthogonalize matrix in {0} iterations""),
",2,0,0,2,4,0,0,0,0,3,83,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,298,"    UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN(""unable to perform Q.R decomposition on the {0}x{1} jacobian matrix""),
",2,0,0,3,6,0,0,0,0,3,117,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,299,"    UNABLE_TO_SOLVE_SINGULAR_PROBLEM(""unable to solve: singular problem""),
",2,0,0,1,2,0,0,0,0,3,70,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,300,"    UNBOUNDED_SOLUTION(""unbounded solution""),
",2,0,0,1,2,0,0,0,0,3,41,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,301,"    UNKNOWN_MODE(""unknown mode {0}, known modes: {1} ({2}), {3} ({4}), {5} ({6}), {7} ({8}), {9} ({10}) and {11} ({12})""),
",2,0,0,20,40,0,0,0,0,3,118,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,302,"    CANNOT_PARSE_AS_TYPE(""string {0} unparseable (from position {1}) as an object of type {2}""), /* keep */
",2,0,0,5,10,0,0,0,0,3,103,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,303,"    CANNOT_PARSE(""string {0} unparseable (from position {1})""), /* keep */
",2,0,0,4,8,0,0,0,0,3,70,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,304,"    UNPARSEABLE_3D_VECTOR(""unparseable 3D vector: \""{0}\""""),
",2,0,0,2,4,0,0,0,0,3,56,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,305,"    UNPARSEABLE_COMPLEX_NUMBER(""unparseable complex number: \""{0}\""""),
",2,0,0,2,4,0,0,0,0,3,66,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,306,"    UNPARSEABLE_FRACTION_NUMBER(""unparseable fraction number: \""{0}\""""),
",2,0,0,2,4,0,0,0,0,3,68,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,307,"    UNPARSEABLE_REAL_VECTOR(""unparseable real vector: \""{0}\""""),
",2,0,0,2,4,0,0,0,0,3,60,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,308,"    UNSUPPORTED_EXPANSION_MODE(""unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})""),
",2,0,0,8,16,0,0,0,0,3,106,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,309,"    UNSUPPORTED_OPERATION(""unsupported operation""), /* keep */
",2,0,0,1,2,0,0,0,0,3,58,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,310,"    ARITHMETIC_EXCEPTION(""arithmetic exception""), /* keep */
",2,0,0,1,2,0,0,0,0,3,56,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,311,"    ILLEGAL_STATE(""illegal state""), /* keep */
",2,0,0,1,2,0,0,0,0,3,42,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,312,"    USER_EXCEPTION(""exception generated in user code""), /* keep */
",2,0,0,1,2,0,0,0,0,3,62,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,313,"    URL_CONTAINS_NO_DATA(""URL {0} contains no data""),
",2,0,0,2,4,0,0,0,0,3,49,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,314,"    VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC(""{0} values have been added before statistic is configured""),
",2,0,0,2,4,0,0,0,0,3,103,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,315,"    VECTOR_LENGTH_MISMATCH(""vector length mismatch: got {0} but expected {1}""),
",2,0,0,3,6,0,0,0,0,3,75,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,316,"    VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT(""vector must have at least one element""),
",2,0,0,1,2,0,0,0,0,3,79,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,317,"    WEIGHT_AT_LEAST_ONE_NON_ZERO(""weigth array must contain at least one non-zero value""),
",2,0,0,1,2,0,0,0,0,3,86,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,318,"    WRONG_BLOCK_LENGTH(""wrong array shape (block length = {0}, expected {1})""),
",2,0,0,4,8,0,0,0,0,3,75,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,319,"    WRONG_NUMBER_OF_POINTS(""{0} points are required, got only {1}""),
",2,0,0,3,6,0,0,0,0,3,64,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,320,"    NUMBER_OF_POINTS(""number of points ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,54,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,321,"    ZERO_DENOMINATOR(""denominator must be different from 0""),
",2,0,0,1,2,0,0,0,0,3,57,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,322,"    ZERO_DENOMINATOR_IN_FRACTION(""zero denominator in fraction {0}/{1}""),
",2,0,0,3,6,0,0,0,0,3,69,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,323,"    ZERO_FRACTION_TO_DIVIDE_BY(""the fraction to divide by must not be zero: {0}/{1}""),
",2,0,0,3,6,0,0,0,0,3,82,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,324,"    ZERO_NORM(""zero norm""),
",2,0,0,1,2,0,0,0,0,3,23,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,325,"    ZERO_NORM_FOR_ROTATION_AXIS(""zero norm for rotation axis""),
",2,0,0,1,2,0,0,0,0,3,59,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,326,"    ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR(""zero norm for rotation defining vector""),
",2,0,0,1,2,0,0,0,0,3,81,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,327,"    ZERO_NOT_ALLOWED(""zero not allowed here"");
",2,0,0,1,2,0,0,0,0,3,42,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,39,"public enum LocalizedFormats implements Localizable {
",2,0,0,0,1,1,0,2,0,5,53,1,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,42,"        final List<Object> list = new ArrayList<Object>();
",2,0,0,1,2,1,0,8,0,11,50,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,43,"        if (array != null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,44,"            for (Object o : array) {
",4,0,0,1,3,0,0,2,0,6,24,6,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,45,"                if (o instanceof Object[]) {
",2,0,0,2,5,0,0,2,0,4,28,9,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,46,"                    for (Object oR : flatten((Object[]) o)) {
",4,0,0,4,9,0,2,4,0,10,41,10,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,47,"                        list.add(oR);
",0,0,0,1,2,0,6,0,0,6,13,13,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,50,"                    list.add(o);
",0,0,0,1,2,0,6,0,0,6,12,11,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,54,"        return list.toArray();
",0,0,0,1,2,1,4,0,0,4,22,5,0.25000,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,46,"    public VectorialPointValuePair(final double[] point, final double[] value) {
",6,0,0,3,7,3,0,0,0,9,76,2,0.20000,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,47,"        this.point = (point == null) ? null : point.clone();
",4,1,0,2,4,0,4,0,0,10,52,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,48,"        this.value = (value == null) ? null : value.clone();
",4,1,0,2,4,0,4,0,0,10,52,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,97,"        return value;
",2,0,0,0,0,1,0,0,0,2,13,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,57,"        return weight;
",2,0,0,0,0,1,0,0,0,2,14,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,64,"        return x;
",2,0,0,0,0,1,0,0,0,2,9,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,71,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,147,"            this.observations = observations.clone();
",2,0,0,1,2,0,4,0,0,7,41,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,148,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,156,"            if (parameters == null) {
",2,1,0,1,3,0,0,0,0,3,25,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,157,"                parameters = basicGuess(observations);
",2,0,0,1,2,0,4,0,0,7,38,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,159,"            return parameters.clone();
",0,0,0,1,2,1,4,0,0,4,26,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,169,"            Arrays.sort(points, createWeightedObservedPointComparator());
",0,0,0,2,4,0,8,0,0,8,61,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,170,"            double[] params = new double[3];
",2,0,0,2,4,0,0,0,0,2,32,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,172,"            int maxYIdx = findMaxY(points);
",2,0,0,1,2,0,4,0,0,6,31,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,173,"            params[0] = points[maxYIdx].getY();
",0,0,1,3,6,0,2,0,0,9,35,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,174,"            params[1] = points[maxYIdx].getX();
",0,0,1,3,6,0,2,0,0,9,35,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,178,"                double halfY = params[0] + ((params[1] - params[0]) / 2.0);
",2,3,1,5,10,0,0,0,0,11,59,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,179,"                double fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);
",2,0,0,1,2,0,8,0,0,11,60,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,185,"            params[2] = fwhmApprox / (2.0 * Math.sqrt(2.0 * Math.log(2.0)));
",2,3,1,4,8,0,8,0,0,16,64,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,187,"            return params;
",2,0,0,0,0,1,0,0,0,2,14,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,197,"            int maxYIdx = 0;
",2,0,0,0,0,0,0,0,0,2,16,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,198,"            for (int i = 1; i < points.length; i++) {
",10,1,0,1,3,0,0,0,0,12,41,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,199,"                if (points[i].getY() > points[maxYIdx].getY()) {
",0,1,1,5,11,0,4,0,0,13,48,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,200,"                    maxYIdx = i;
",4,0,0,0,0,0,0,0,0,5,12,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,203,"            return maxYIdx;
",2,0,0,0,0,1,0,0,0,2,15,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,223,"            if (idxStep == 0) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,226,"            WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);
",2,0,0,2,4,0,10,2,0,14,93,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,258,"            if (idxStep == 0) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,261,"            for (int i = startIdx;
",4,0,0,0,1,0,0,0,0,4,22,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,262,"                 (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);
",14,5,0,3,6,0,0,0,0,19,67,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,264,"                if (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {
",4,1,1,6,13,0,8,0,0,19,65,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,263,"                 i += idxStep) {
",4,0,0,0,2,0,0,0,0,5,15,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,291,"            return (value >= boundary1 && value <= boundary2) ||
",8,4,0,1,2,1,0,0,0,12,52,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,302,"            return new Comparator<WeightedObservedPoint>() {
",0,0,0,1,3,1,0,4,0,4,48,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,121,"        return fit(new Gaussian.Parametric(), guess);
",4,0,0,2,4,1,4,0,0,8,45,5,0.20000,1
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,126,"        return fit(Integer.MAX_VALUE, f, initialGuess);
",4,0,0,1,2,1,6,0,0,10,47,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,150,"        double[] target  = new double[observations.size()];
",2,0,0,3,6,0,4,0,0,6,51,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,151,"        double[] weights = new double[observations.size()];
",2,0,0,3,6,0,4,0,0,6,51,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,152,"        int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,153,"        for (WeightedObservedPoint point : observations) {
",4,0,0,1,3,0,0,2,0,6,50,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,154,"            target[i]  = point.getY();
",0,0,1,2,4,0,4,0,0,9,26,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,155,"            weights[i] = point.getWeight();
",0,0,1,2,4,0,4,0,0,9,31,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,156,"            ++i;
",2,0,0,0,0,0,0,0,0,3,4,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,157,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,160,"        VectorialPointValuePair optimum =
",2,0,0,0,0,0,0,2,0,4,33,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,42,"public class CurveFitter {
",2,0,0,0,1,1,0,0,0,3,26,1,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,177,"        public TheoreticalValuesFunction(final ParametricUnivariateRealFunction f) {
",4,0,0,1,3,2,0,2,0,8,76,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,178,"            this.f = f;
",4,0,0,0,0,0,0,0,0,5,11,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,179,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,183,"            return new MultivariateMatrixFunction() {
",0,0,0,1,3,1,0,2,0,2,41,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,200,"            final double[] values = new double[observations.size()];
",2,0,0,3,6,1,4,0,0,7,56,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,201,"            int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,202,"            for (WeightedObservedPoint observed : observations) {
",4,0,0,1,3,0,0,2,0,6,53,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,203,"                values[i++] = f.value(observed.getX(), point);
",2,0,1,3,6,0,10,0,0,16,46,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,204,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,206,"            return values;
",2,0,0,0,0,1,0,0,0,2,14,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,169,"    private class TheoreticalValuesFunction
",2,0,0,0,0,1,0,0,0,3,39,2,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,302,"            return new Comparator<WeightedObservedPoint>() {
",0,0,0,1,3,1,0,4,0,4,48,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,304,"                    if (p1 == null && p2 == null) {
",4,3,0,1,3,0,0,0,0,7,31,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,307,"                    if (p1 == null) {
",2,1,0,1,3,0,0,0,0,3,17,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,310,"                    if (p2 == null) {
",2,1,0,1,3,0,0,0,0,3,17,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,313,"                    if (p1.getX() < p2.getX()) {
",0,1,0,3,7,0,8,0,0,9,28,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,316,"                    if (p1.getX() > p2.getX()) {
",0,1,0,3,7,0,8,0,0,9,28,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,317,"                        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,183,"            return new MultivariateMatrixFunction() {
",0,0,0,1,3,1,0,2,0,2,41,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,185,"                    final double[][] jacobian = new double[observations.size()][];
",2,0,0,5,10,1,4,0,0,7,62,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,187,"                    int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,11,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,188,"                    for (WeightedObservedPoint observed : observations) {
",4,0,0,1,3,0,0,2,0,6,53,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,189,"                        jacobian[i++] = f.gradient(observed.getX(), point);
",2,0,1,3,6,0,10,0,0,16,51,12,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,190,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,192,"                    return jacobian;
",2,0,0,0,0,1,0,0,0,2,16,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,88,"        return checker;
",2,0,0,0,0,1,0,0,0,2,15,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,103,"            evaluations.incrementCount();
",0,0,0,1,2,0,4,0,0,4,29,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,106,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,107,"        return function.value(point);
",0,0,0,1,2,1,6,0,0,6,29,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,114,"        if (f == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,117,"        if (t == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,120,"        if (w == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,123,"        if (startPoint == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,126,"        if (t.length != w.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,131,"        evaluations.setMaximalCount(maxEval);
",0,0,0,1,2,0,6,0,0,6,37,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,132,"        evaluations.resetCount();
",0,0,0,1,2,0,4,0,0,4,25,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,135,"        function = f;
",4,0,0,0,0,0,0,0,0,5,13,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,136,"        target = t.clone();
",2,0,0,1,2,0,4,0,0,7,19,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,137,"        weight = w.clone();
",2,0,0,1,2,0,4,0,0,7,19,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,138,"        start = startPoint.clone();
",2,0,0,1,2,0,4,0,0,7,27,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,141,"        return doOptimize();
",0,0,0,1,2,1,2,0,0,2,20,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,165,"        return target;
",2,0,0,0,0,1,0,0,0,2,14,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,171,"        return weight;
",2,0,0,0,0,1,0,0,0,2,14,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,220,"        solvedCols  = FastMath.min(rows, cols);
",2,0,0,1,2,0,8,0,0,11,39,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,221,"        diagR       = new double[cols];
",2,0,1,1,2,0,0,0,0,5,31,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,222,"        jacNorm     = new double[cols];
",2,0,1,1,2,0,0,0,0,5,31,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,223,"        beta        = new double[cols];
",2,0,1,1,2,0,0,0,0,5,31,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,224,"        permutation = new int[cols];
",2,0,1,1,2,0,0,0,0,5,28,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,225,"        lmDir       = new double[cols];
",2,0,1,1,2,0,0,0,0,5,31,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,228,"        double   delta   = 0;
",2,0,0,0,0,0,0,0,0,2,21,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,229,"        double   xNorm   = 0;
",2,0,0,0,0,0,0,0,0,2,21,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,230,"        double[] diag    = new double[cols];
",2,0,1,2,4,0,0,0,0,4,36,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,231,"        double[] oldX    = new double[cols];
",2,0,1,2,4,0,0,0,0,4,36,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,232,"        double[] oldRes  = new double[rows];
",2,0,1,2,4,0,0,0,0,4,36,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,233,"        double[] oldObj  = new double[rows];
",2,0,1,2,4,0,0,0,0,4,36,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,234,"        double[] qtf     = new double[rows];
",2,0,1,2,4,0,0,0,0,4,36,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,235,"        double[] work1   = new double[cols];
",2,0,1,2,4,0,0,0,0,4,36,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,236,"        double[] work2   = new double[cols];
",2,0,1,2,4,0,0,0,0,4,36,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,237,"        double[] work3   = new double[cols];
",2,0,1,2,4,0,0,0,0,4,36,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,240,"        updateResidualsAndCost();
",0,0,0,1,2,0,2,0,0,2,25,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,243,"        lmPar = 0;
",2,0,0,0,0,0,0,0,0,3,10,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,244,"        boolean firstIteration = true;
",2,0,0,0,0,0,0,0,0,3,30,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,245,"        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);
",6,0,0,1,2,0,0,4,0,10,80,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,246,"        int iter = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,247,"        final ConvergenceChecker<VectorialPointValuePair> checker = getConvergenceChecker();
",2,0,0,1,2,1,2,4,0,9,84,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,249,"            ++iter;
",2,0,0,0,0,0,0,0,0,3,7,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,251,"            for (int i=0;i<rows;i++) {
",8,1,0,1,3,0,0,0,0,10,26,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,252,"                qtf[i]=weightedResiduals[i];
",0,0,1,2,4,0,0,0,0,9,28,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,256,"            VectorialPointValuePair previous = current;
",4,0,0,0,0,0,0,2,0,6,43,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,257,"            updateJacobian();
",0,0,0,1,2,0,2,0,0,2,17,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,258,"            qrDecomposition();
",0,0,0,1,2,0,2,0,0,2,18,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,261,"            qTy(qtf);
",0,0,0,1,2,0,4,0,0,4,9,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,264,"            for (int k = 0; k < solvedCols; ++k) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,265,"                int pk = permutation[k];
",2,0,1,1,2,0,0,0,0,6,24,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,266,"                weightedResidualJacobian[k][pk] = diagR[pk];
",0,0,1,3,6,0,0,0,0,11,44,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,269,"            if (firstIteration) {
",2,0,0,1,3,0,0,0,0,2,21,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,272,"                xNorm = 0;
",2,0,0,0,0,0,0,0,0,3,10,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,273,"                for (int k = 0; k < cols; ++k) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,274,"                    double dk = jacNorm[k];
",2,0,1,1,2,0,0,0,0,6,23,11,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,275,"                    if (dk == 0) {
",2,1,0,1,3,0,0,0,0,3,14,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,278,"                    double xk = dk * point[k];
",4,1,1,1,2,0,0,0,0,9,26,11,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,279,"                    xNorm  += xk * xk;
",6,1,0,0,0,0,0,0,0,8,18,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,280,"                    diag[k] = dk;
",2,0,1,1,2,0,0,0,0,7,13,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,282,"                xNorm = FastMath.sqrt(xNorm);
",2,0,0,1,2,0,6,0,0,9,29,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,285,"                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);
",10,2,0,2,4,0,0,0,0,13,81,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,289,"            double maxCosine = 0;
",2,0,0,0,0,0,0,0,0,2,21,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,290,"            if (cost != 0) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,291,"                for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,292,"                    int    pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,27,11,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,293,"                    double s  = jacNorm[pj];
",2,0,1,1,2,0,0,0,0,6,24,11,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,294,"                    if (s != 0) {
",2,1,0,1,3,0,0,0,0,3,13,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,295,"                        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,13,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,296,"                        for (int i = 0; i <= j; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,12,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,297,"                            sum += weightedResidualJacobian[i][pj] * qtf[i];
",2,1,1,3,6,0,0,0,0,14,48,14,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,299,"                        maxCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * cost));
",6,2,0,3,6,0,12,0,0,21,68,12,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,303,"            if (maxCosine <= orthoTolerance) {
",4,1,0,1,3,0,0,0,0,5,34,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,311,"            for (int j = 0; j < cols; ++j) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,312,"                diag[j] = FastMath.max(diag[j], jacNorm[j]);
",0,0,1,4,8,0,4,0,0,17,44,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,316,"            for (double ratio = 0; ratio < 1.0e-4;) {
",4,1,0,1,3,0,0,0,0,5,41,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,319,"                for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,320,"                    int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,11,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,321,"                    oldX[pj] = point[pj];
",0,0,1,2,4,0,0,0,0,9,21,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,323,"                double previousCost = cost;
",4,0,0,0,0,0,0,0,0,4,27,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,324,"                double[] tmpVec = weightedResiduals;
",4,0,0,1,2,0,0,0,0,4,36,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,325,"                weightedResiduals = oldRes;
",4,0,0,0,0,0,0,0,0,5,27,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,326,"                oldRes    = tmpVec;
",4,0,0,0,0,0,0,0,0,5,19,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,327,"                tmpVec    = objective;
",4,0,0,0,0,0,0,0,0,5,22,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,328,"                objective = oldObj;
",4,0,0,0,0,0,0,0,0,5,19,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,329,"                oldObj    = tmpVec;
",4,0,0,0,0,0,0,0,0,5,19,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,332,"                determineLMParameter(qtf, delta, diag, work1, work2, work3);
",0,0,0,1,2,0,14,0,0,14,60,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,335,"                double lmNorm = 0;
",2,0,0,0,0,0,0,0,0,2,18,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,336,"                for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,337,"                    int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,11,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,338,"                    lmDir[pj] = -lmDir[pj];
",0,0,1,2,4,0,0,0,0,10,23,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,339,"                    point[pj] = oldX[pj] + lmDir[pj];
",0,1,1,3,6,0,0,0,0,14,33,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,340,"                    double s = diag[pj] * lmDir[pj];
",2,1,1,2,4,0,0,0,0,11,32,11,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,341,"                    lmNorm  += s * s;
",6,1,0,0,0,0,0,0,0,8,17,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,343,"                lmNorm = FastMath.sqrt(lmNorm);
",2,0,0,1,2,0,6,0,0,9,31,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,345,"                if (firstIteration) {
",2,0,0,1,3,0,0,0,0,2,21,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,346,"                    delta = FastMath.min(delta, lmNorm);
",2,0,0,1,2,0,8,0,0,11,36,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,350,"                updateResidualsAndCost();
",0,0,0,1,2,0,2,0,0,2,25,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,353,"                double actRed = -1.0;
",2,0,0,0,0,0,0,0,0,3,21,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,354,"                if (0.1 * cost < previousCost) {
",4,2,0,1,3,0,0,0,0,6,32,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,355,"                    double r = cost / previousCost;
",6,1,0,0,0,0,0,0,0,7,31,11,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,356,"                    actRed = 1.0 - r * r;
",6,2,0,0,0,0,0,0,0,9,21,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,361,"                for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,362,"                    int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,11,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,363,"                    double dirJ = lmDir[pj];
",2,0,1,1,2,0,0,0,0,6,24,11,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,364,"                    work1[j] = 0;
",0,0,1,1,2,0,0,0,0,5,13,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,365,"                    for (int i = 0; i <= j; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,366,"                        work1[i] += weightedResidualJacobian[i][pj] * dirJ;
",2,1,1,3,6,0,0,0,0,14,51,12,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,369,"                double coeff1 = 0;
",2,0,0,0,0,0,0,0,0,2,18,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,370,"                for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,371,"                    coeff1 += work1[j] * work1[j];
",2,1,1,2,4,0,0,0,0,12,30,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,373,"                double pc2 = previousCost * previousCost;
",6,1,0,0,0,0,0,0,0,7,41,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,374,"                coeff1 = coeff1 / pc2;
",6,1,0,0,0,0,0,0,0,8,22,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,375,"                double coeff2 = lmPar * lmNorm * lmNorm / pc2;
",10,2,0,0,0,0,0,0,0,12,46,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,376,"                double preRed = coeff1 + 2 * coeff2;
",6,2,0,0,0,0,0,0,0,8,36,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,377,"                double dirDer = -(coeff1 + coeff2);
",6,1,0,1,2,0,0,0,0,8,35,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,380,"                ratio = (preRed == 0) ? 0 : (actRed / preRed);
",8,2,0,2,4,0,0,0,0,11,46,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,383,"                if (ratio <= 0.25) {
",2,1,0,1,3,0,0,0,0,3,20,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,392,"                    delta = 2 * lmNorm;
",4,1,0,0,0,0,0,0,0,6,19,11,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,393,"                    lmPar *= 0.5;
",2,0,0,0,0,0,0,0,0,3,13,11,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,397,"                if (ratio >= 1.0e-4) {
",2,1,0,1,3,0,0,0,0,3,22,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,399,"                    firstIteration = false;
",2,0,0,0,0,0,0,0,0,4,23,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,400,"                    xNorm = 0;
",2,0,0,0,0,0,0,0,0,3,10,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,401,"                    for (int k = 0; k < cols; ++k) {
",8,1,0,1,3,0,0,0,0,10,32,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,402,"                        double xK = diag[k] * point[k];
",2,1,1,2,4,0,0,0,0,11,31,13,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,403,"                        xNorm += xK * xK;
",6,1,0,0,0,0,0,0,0,8,17,12,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,405,"                    xNorm = FastMath.sqrt(xNorm);
",2,0,0,1,2,0,6,0,0,9,29,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,406,"                    current = new VectorialPointValuePair(point, objective);
",6,0,0,1,2,0,0,2,0,9,56,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,409,"                    if (checker != null) {
",2,1,0,1,3,0,0,0,0,3,22,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,411,"                        if (checker.converged(iter, previous, current)) {
",0,0,0,2,5,0,10,0,0,10,49,13,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,431,"                if ((FastMath.abs(actRed) <= costRelativeTolerance &&
",2,3,0,1,4,0,6,0,0,11,53,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,440,"                if ((FastMath.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {
",4,4,0,5,11,0,6,0,0,14,87,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,443,"                } else if (delta <= 2.2204e-16 * xNorm) {
",4,2,0,1,4,0,0,0,0,6,41,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,446,"                } else if (maxCosine <= 2.2204e-16)  {
",2,1,0,1,4,0,0,0,0,3,38,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,450,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,451,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,481,"        for (int j = 0; j < rank; ++j) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,482,"            lmDir[permutation[j]] = qy[j];
",0,0,1,3,6,0,0,0,0,11,30,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,484,"        for (int j = rank; j < cols; ++j) {
",10,1,0,1,3,0,0,0,0,12,35,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,487,"        for (int k = rank - 1; k >= 0; --k) {
",8,2,0,1,3,0,0,0,0,11,37,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,488,"            int pk = permutation[k];
",2,0,1,1,2,0,0,0,0,6,24,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,489,"            double ypk = lmDir[pk] / diagR[pk];
",2,1,1,2,4,0,0,0,0,11,35,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,490,"            for (int i = 0; i < k; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,491,"                lmDir[permutation[i]] -= ypk * weightedResidualJacobian[i][pk];
",2,1,1,4,8,0,0,0,0,16,63,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,493,"            lmDir[pk] = ypk;
",2,0,1,1,2,0,0,0,0,7,16,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,498,"        double dxNorm = 0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,499,"        for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,500,"            int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,501,"            double s = diag[pj] * lmDir[pj];
",2,1,1,2,4,0,0,0,0,11,32,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,502,"            work1[pj] = s;
",2,0,1,1,2,0,0,0,0,7,14,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,503,"            dxNorm += s * s;
",6,1,0,0,0,0,0,0,0,8,16,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,505,"        dxNorm = FastMath.sqrt(dxNorm);
",2,0,0,1,2,0,6,0,0,9,31,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,506,"        double fp = dxNorm - delta;
",6,1,0,0,0,0,0,0,0,7,27,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,507,"        if (fp <= 0.1 * delta) {
",4,2,0,1,3,0,0,0,0,6,24,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,508,"            lmPar = 0;
",2,0,0,0,0,0,0,0,0,3,10,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,509,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,771,"        for (int k = 0; k < cols; ++k) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,772,"            permutation[k] = k;
",2,0,1,1,2,0,0,0,0,7,19,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,773,"            double norm2 = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,774,"            for (int i = 0; i < weightedResidualJacobian.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,59,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,775,"                double akk = weightedResidualJacobian[i][k];
",2,0,1,2,4,0,0,0,0,8,44,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,776,"                norm2 += akk * akk;
",6,1,0,0,0,0,0,0,0,8,19,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,778,"            jacNorm[k] = FastMath.sqrt(norm2);
",0,0,1,2,4,0,6,0,0,11,34,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,782,"        for (int k = 0; k < cols; ++k) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,785,"            int nextColumn = -1;
",2,0,0,0,0,0,0,0,0,3,20,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,786,"            double ak2 = Double.NEGATIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,38,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,787,"            for (int i = k; i < cols; ++i) {
",10,1,0,1,3,0,0,0,0,12,32,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,788,"                double norm2 = 0;
",2,0,0,0,0,0,0,0,0,2,17,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,789,"                for (int j = k; j < weightedResidualJacobian.length; ++j) {
",12,1,0,1,3,0,0,0,0,14,59,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,790,"                    double aki = weightedResidualJacobian[j][permutation[i]];
",2,0,1,3,6,0,0,0,0,10,57,11,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,791,"                    norm2 += aki * aki;
",6,1,0,0,0,0,0,0,0,8,19,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,793,"                if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {
",0,1,0,3,7,0,12,0,0,13,54,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,797,"                if (norm2 > ak2) {
",4,1,0,1,3,0,0,0,0,5,18,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,798,"                    nextColumn = i;
",4,0,0,0,0,0,0,0,0,5,15,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,799,"                    ak2        = norm2;
",4,0,0,0,0,0,0,0,0,5,19,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,802,"            if (ak2 <= qrRankingThreshold) {
",4,1,0,1,3,0,0,0,0,5,32,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,806,"            int pk                  = permutation[nextColumn];
",2,0,1,1,2,0,0,0,0,6,50,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,807,"            permutation[nextColumn] = permutation[k];
",0,0,1,2,4,0,0,0,0,9,41,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,808,"            permutation[k]          = pk;
",2,0,1,1,2,0,0,0,0,7,29,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,811,"            double akk   = weightedResidualJacobian[k][pk];
",2,0,1,2,4,0,0,0,0,8,47,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,812,"            double alpha = (akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);
",4,1,0,3,6,0,12,0,0,18,68,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,813,"            double betak = 1.0 / (ak2 - akk * alpha);
",8,3,0,1,2,0,0,0,0,11,41,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,814,"            beta[pk]     = betak;
",2,0,1,1,2,0,0,0,0,7,21,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,817,"            diagR[pk]        = alpha;
",2,0,1,1,2,0,0,0,0,7,25,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,818,"            weightedResidualJacobian[k][pk] -= alpha;
",2,0,1,2,4,0,0,0,0,9,41,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,821,"            for (int dk = cols - 1 - k; dk > 0; --dk) {
",10,2,0,1,3,0,0,0,0,13,43,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,822,"                double gamma = 0;
",2,0,0,0,0,0,0,0,0,2,17,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,823,"                for (int j = k; j < weightedResidualJacobian.length; ++j) {
",12,1,0,1,3,0,0,0,0,14,59,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,824,"                    gamma += weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];
",6,2,1,5,10,0,0,0,0,21,92,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,826,"                gamma *= betak;
",4,0,0,0,0,0,0,0,0,5,15,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,827,"                for (int j = k; j < weightedResidualJacobian.length; ++j) {
",12,1,0,1,3,0,0,0,0,14,59,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,828,"                    weightedResidualJacobian[j][permutation[k + dk]] -= gamma * weightedResidualJacobian[j][pk];
",6,2,1,5,10,0,0,0,0,21,92,10,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,832,"        rank = solvedCols;
",4,0,0,0,0,0,0,0,0,5,18,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,833,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,841,"        for (int k = 0; k < cols; ++k) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,842,"            int pk = permutation[k];
",2,0,1,1,2,0,0,0,0,6,24,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,843,"            double gamma = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,844,"            for (int i = k; i < rows; ++i) {
",10,1,0,1,3,0,0,0,0,12,32,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,845,"                gamma += weightedResidualJacobian[i][pk] * y[i];
",2,1,1,3,6,0,0,0,0,14,48,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,847,"            gamma *= beta[pk];
",2,0,1,1,2,0,0,0,0,7,18,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,848,"            for (int i = k; i < rows; ++i) {
",10,1,0,1,3,0,0,0,0,12,32,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,849,"                y[i] -= gamma * weightedResidualJacobian[i][pk];
",2,1,1,3,6,0,0,0,0,14,48,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,852,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,102,"        ++jacobianEvaluations;
",2,0,0,0,0,0,0,0,0,3,22,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,103,"        weightedResidualJacobian = jF.value(point);
",2,0,0,1,2,0,6,0,0,9,43,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,104,"        if (weightedResidualJacobian.length != rows) {
",6,1,0,1,3,0,0,0,0,7,46,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,108,"        final double[] residualsWeights = getWeightRef();
",2,0,0,2,4,1,2,0,0,5,49,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,110,"        for (int i = 0; i < rows; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,111,"            final double[] ji = weightedResidualJacobian[i];
",2,0,1,2,4,1,0,0,0,7,48,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,112,"            double wi = FastMath.sqrt(residualsWeights[i]);
",2,0,1,2,4,0,4,0,0,10,47,7,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,113,"            for (int j = 0; j < cols; ++j) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,115,"                weightedResidualJacobian[i][j] = -ji[j]*wi;
",2,1,1,3,6,0,0,0,0,15,43,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,118,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,128,"        objective = computeObjectiveValue(point);
",2,0,0,1,2,0,4,0,0,7,41,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,129,"        if (objective.length != rows) {
",6,1,0,1,3,0,0,0,0,7,31,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,133,"        final double[] targetValues = getTargetRef();
",2,0,0,2,4,1,2,0,0,5,45,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,134,"        final double[] residualsWeights = getWeightRef();
",2,0,0,2,4,1,2,0,0,5,49,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,136,"        cost = 0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,137,"        int index = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,138,"        for (int i = 0; i < rows; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,139,"            final double residual = targetValues[i] - objective[i];
",2,1,1,2,4,1,0,0,0,12,55,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,140,"            weightedResiduals[i]= residual*FastMath.sqrt(residualsWeights[i]);
",2,1,1,3,6,0,4,0,0,16,66,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,141,"            cost += residualsWeights[i] * residual * residual;
",6,1,1,1,2,0,0,0,0,12,50,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,142,"            index += cols;
",4,0,0,0,0,0,0,0,0,5,14,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,144,"        cost = FastMath.sqrt(cost);
",2,0,0,1,2,0,6,0,0,9,27,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,145,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,237,"        jacobianEvaluations = 0;
",2,0,0,0,0,0,0,0,0,3,24,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,240,"        jF = f.jacobian();
",2,0,0,1,2,0,4,0,0,7,18,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,241,"        this.residuals = new double[target.length];
",6,0,0,1,2,0,0,0,0,7,43,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,244,"        point = startPoint.clone();
",2,0,0,1,2,0,4,0,0,7,27,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,245,"        rows = target.length;
",6,0,0,0,0,0,0,0,0,7,21,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,246,"        cols = point.length;
",6,0,0,0,0,0,0,0,0,7,20,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,248,"        weightedResidualJacobian = new double[rows][cols];
",2,0,1,2,4,0,0,0,0,7,50,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,249,"        this.weightedResiduals = new double[rows];
",2,0,1,1,2,0,0,0,0,5,42,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,251,"        cost = Double.POSITIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,7,32,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,253,"        return super.optimize(maxEval, f, target, weights, startPoint);
",12,0,0,1,2,1,0,0,0,12,63,5,0.20000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,43,"public abstract class AbstractLeastSquaresOptimizer
",2,0,0,0,0,2,0,0,0,4,51,1,0.20000,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,73,"        return relativeThreshold;
",2,0,0,0,0,1,0,0,0,2,25,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,80,"        return absoluteThreshold;
",2,0,0,0,0,1,0,0,0,2,25,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,76,"        final double[] p = previous.getValueRef();
",2,0,0,2,4,1,4,0,0,7,42,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,77,"        final double[] c = current.getValueRef();
",2,0,0,2,4,1,4,0,0,7,41,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,78,"        for (int i = 0; i < p.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.20000,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,79,"            final double pi         = p[i];
",2,0,1,1,2,1,0,0,0,7,31,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,80,"            final double ci         = c[i];
",2,0,1,1,2,1,0,0,0,7,31,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,81,"            final double difference = FastMath.abs(pi - ci);
",6,1,0,1,2,1,4,0,0,12,48,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,82,"            final double size       = FastMath.max(FastMath.abs(pi), FastMath.abs(ci));
",2,0,0,3,6,1,16,0,0,19,75,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,83,"            if (difference > size * getRelativeThreshold() &&
",4,3,0,1,3,0,2,0,0,9,49,6,0.20000,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,85,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.20000,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,34,"public class SimpleVectorialValueChecker
",2,0,0,0,0,1,0,0,0,3,40,1,0.20000,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,44,"        maximalCount = max;
",4,0,0,0,0,0,0,0,0,5,19,4,0.20000,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,84,"        if (++count > maximalCount) {
",4,1,0,1,3,0,0,0,0,6,29,4,0.20000,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,87,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,93,"        count = 0;
",2,0,0,0,0,0,0,0,0,3,10,4,0.20000,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,94,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,55,"    private static final double EXP_INT_TABLE_A[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,60,"    private static final double EXP_INT_TABLE_B[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,65,"    private static final double EXP_FRAC_TABLE_A[] = new double[1025];
",2,0,0,2,4,3,0,0,0,5,66,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,70,"    private static final double EXP_FRAC_TABLE_B[] = new double[1025];
",2,0,0,2,4,3,0,0,0,5,66,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,73,"    private static final double FACT[] = new double[20];
",2,0,0,2,4,3,0,0,0,5,52,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,76,"    private static final double LN_MANT[][] = new double[1024][];
",2,0,0,4,8,3,0,0,0,5,61,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,85,"    private static final double LN_SPLIT_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,105,"    private static final double LN_QUICK_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,118,"    private static final double LN_HI_PREC_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,51,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,128,"    private static final double SINE_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,60,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,131,"    private static final double SINE_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,60,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,134,"    private static final double COSINE_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,62,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,137,"    private static final double COSINE_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,62,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,140,"    private static final double TANGENT_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,63,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,143,"    private static final double TANGENT_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,63,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,146,"    private static final long RECIP_2PI[] = new long[] {
",2,0,0,2,5,3,0,0,0,5,52,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,167,"    private static final long PI_O_4_BITS[] = new long[] {
",2,0,0,2,5,3,0,0,0,5,54,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,175,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};
",2,0,0,2,4,3,0,0,0,5,126,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,178,"    private static final double CBRTTWO[] = { 0.6299605249474366,
",2,0,0,1,3,3,0,0,0,5,61,2,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,208,"        FACT[0] = 1.0;
",0,0,1,1,2,0,0,0,0,3,14,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,209,"        for (i = 1; i < FACT.length; i++) {
",10,1,0,1,3,0,0,0,0,13,35,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,210,"            FACT[i] = FACT[i-1] * i;
",4,2,1,2,4,0,0,0,0,13,24,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,213,"        double tmp[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,29,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,214,"        double recip[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,31,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,217,"        for (i = 0; i < 750; i++) {
",6,1,0,1,3,0,0,0,0,9,27,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,218,"            expint(i, tmp);
",0,0,0,1,2,0,6,0,0,6,15,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,219,"            EXP_INT_TABLE_A[i+750] = tmp[0];
",2,1,1,2,4,0,0,0,0,8,32,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,220,"            EXP_INT_TABLE_B[i+750] = tmp[1];
",2,1,1,2,4,0,0,0,0,8,32,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,222,"            if (i != 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,224,"                splitReciprocal(tmp, recip);
",0,0,0,1,2,0,6,0,0,6,28,9,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,225,"                EXP_INT_TABLE_A[750-i] = recip[0];
",2,1,1,2,4,0,0,0,0,8,34,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,226,"                EXP_INT_TABLE_B[750-i] = recip[1];
",2,1,1,2,4,0,0,0,0,8,34,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,231,"        for (i = 0; i < EXP_FRAC_TABLE_A.length; i++) {
",10,1,0,1,3,0,0,0,0,13,47,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,232,"            slowexp(i/1024.0, tmp);
",2,1,0,1,2,0,4,0,0,7,23,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,233,"            EXP_FRAC_TABLE_A[i] = tmp[0];
",0,0,1,2,4,0,0,0,0,7,29,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,234,"            EXP_FRAC_TABLE_B[i] = tmp[1];
",0,0,1,2,4,0,0,0,0,7,29,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,238,"        for (i = 0; i < LN_MANT.length; i++) {
",10,1,0,1,3,0,0,0,0,13,38,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,239,"            double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );
",4,2,0,4,8,0,4,0,0,10,79,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,240,"            LN_MANT[i] = slowLog(d);
",0,0,1,2,4,0,4,0,0,9,24,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,244,"        buildSinCosTables();
",0,0,0,1,2,0,2,0,0,2,20,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,245,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,277,"        return Math.sqrt(a);
",0,0,0,1,2,1,6,0,0,6,20,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,697,"        return exp(x, 0.0, null);
",0,0,0,1,2,1,4,0,0,5,25,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,716,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,717,"            intVal = (int) -x;
",4,0,0,1,2,0,0,0,0,6,18,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,719,"            if (intVal > 746) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,727,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,737,"            if (intVal == 709) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,747,"            intVal++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,749,"            intPartA = EXP_INT_TABLE_A[750-intVal];
",4,1,1,1,2,0,0,0,0,8,39,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,750,"            intPartB = EXP_INT_TABLE_B[750-intVal];
",4,1,1,1,2,0,0,0,0,8,39,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,752,"            intVal = -intVal;
",4,0,0,0,0,0,0,0,0,6,17,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,754,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,756,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,764,"            intPartA = EXP_INT_TABLE_A[750+intVal];
",4,1,1,1,2,0,0,0,0,8,39,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,765,"            intPartB = EXP_INT_TABLE_B[750+intVal];
",4,1,1,1,2,0,0,0,0,8,39,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,772,"        final int intFrac = (int) ((x - intVal) * 1024.0);
",6,2,0,3,6,1,0,0,0,9,50,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,773,"        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];
",2,0,1,1,2,1,0,0,0,7,51,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,774,"        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];
",2,0,1,1,2,1,0,0,0,7,51,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,780,"        final double epsilon = x - (intVal + intFrac / 1024.0);
",8,3,0,1,2,1,0,0,0,12,55,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,789,"        double z = 0.04168701738764507;
",2,0,0,0,0,0,0,0,0,2,31,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,790,"        z = z * epsilon + 0.1666666505023083;
",6,2,0,0,0,0,0,0,0,9,37,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,791,"        z = z * epsilon + 0.5000000000042687;
",6,2,0,0,0,0,0,0,0,9,37,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,792,"        z = z * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,22,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,793,"        z = z * epsilon + -3.940510424527919E-20;
",6,2,0,0,0,0,0,0,0,10,41,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,800,"        double tempA = intPartA * fracPartA;
",6,1,0,0,0,0,0,0,0,7,36,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,801,"        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;
",14,5,0,0,0,0,0,0,0,19,82,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,807,"        final double tempC = tempB + tempA;
",6,1,0,0,0,1,0,0,0,8,35,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,809,"        if (extra != 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,812,"            result = tempC*z + tempB + tempA;
",10,3,0,0,0,0,0,0,0,14,33,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,815,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,821,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,987,"        final double xs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,988,"        final double ys[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,989,"        final double facts[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,37,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,990,"        final double as[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,991,"        split(x, xs);
",0,0,0,1,2,0,6,0,0,6,13,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,992,"        ys[0] = ys[1] = 0.0;
",0,0,1,2,4,0,0,0,0,6,20,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,994,"        for (int i = 19; i >= 0; i--) {
",6,1,0,1,3,0,0,0,0,8,31,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,995,"            splitMult(xs, ys, as);
",0,0,0,1,2,0,8,0,0,8,22,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,996,"            ys[0] = as[0];
",0,0,1,2,4,0,0,0,0,5,14,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,997,"            ys[1] = as[1];
",0,0,1,2,4,0,0,0,0,5,14,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,999,"            split(FACT[i], as);
",0,0,1,2,4,0,4,0,0,8,19,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1000,"            splitReciprocal(as, facts);
",0,0,0,1,2,0,6,0,0,6,27,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1002,"            splitAdd(ys, facts, as);
",0,0,0,1,2,0,8,0,0,8,24,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1003,"            ys[0] = as[0];
",0,0,1,2,4,0,0,0,0,5,14,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1004,"            ys[1] = as[1];
",0,0,1,2,4,0,0,0,0,5,14,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1007,"        if (result != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1008,"            result[0] = ys[0];
",0,0,1,2,4,0,0,0,0,5,18,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1009,"            result[1] = ys[1];
",0,0,1,2,4,0,0,0,0,5,18,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1012,"        return ys[0] + ys[1];
",0,1,1,2,4,1,0,0,0,5,21,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1021,"        if (d < 8e298 && d > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1022,"            final double a = d * HEX_40000000;
",6,1,0,0,0,1,0,0,0,8,34,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1023,"            split[0] = (d + a) - a;
",6,2,1,2,4,0,0,0,0,11,23,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1024,"            split[1] = d - split[0];
",2,1,1,2,4,0,0,0,0,8,24,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1025,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1030,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1037,"        final double c = a[0] + a[1];
",2,1,1,2,4,1,0,0,0,8,29,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1038,"        final double d = -(c - a[0] - a[1]);
",4,1,1,3,6,1,0,0,0,11,36,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1040,"        if (c < 8e298 && c > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1041,"            double z = c * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,28,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1042,"            a[0] = (c + z) - z;
",6,2,1,2,4,0,0,0,0,11,19,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1043,"            a[1] = c - a[0] + d;
",4,2,1,2,4,0,0,0,0,11,20,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1044,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1045,"            double z = c * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,42,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1046,"            a[0] = (c + z - c) * HEX_40000000;
",8,3,1,2,4,0,0,0,0,14,34,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1047,"            a[1] = c - a[0] + d;
",4,2,1,2,4,0,0,0,0,11,20,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1049,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1057,"        ans[0] = a[0] * b[0];
",0,1,1,3,6,0,0,0,0,8,21,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1058,"        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];
",0,5,1,7,14,0,0,0,0,20,49,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1061,"        resplit(ans);
",0,0,0,1,2,0,4,0,0,4,13,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1062,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1070,"        ans[0] = a[0] + b[0];
",0,1,1,3,6,0,0,0,0,8,21,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1071,"        ans[1] = a[1] + b[1];
",0,1,1,3,6,0,0,0,0,8,21,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1073,"        resplit(ans);
",0,0,0,1,2,0,4,0,0,4,13,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1074,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1095,"        final double b = 1.0/4194304.0;
",2,1,0,0,0,1,0,0,0,4,31,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1096,"        final double a = 1.0 - b;
",4,1,0,0,0,1,0,0,0,6,25,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1098,"        if (in[0] == 0.0) {
",0,1,1,2,5,0,0,0,0,3,19,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1103,"        result[0] = a / in[0];
",2,1,1,2,4,0,0,0,0,8,22,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1104,"        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);
",4,7,1,9,18,0,0,0,0,26,60,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1106,"        if (result[1] != result[1]) { // can happen if result[1] is NAN
",0,1,1,4,9,0,0,0,0,5,63,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1107,"            result[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1111,"        resplit(result);
",0,0,0,1,2,0,4,0,0,4,16,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1113,"        for (int i = 0; i < 2; i++) {
",6,1,0,1,3,0,0,0,0,8,29,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1115,"            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -
",2,6,1,4,8,0,0,0,0,16,58,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1118,"            err = err * (result[0] + result[1]);
",4,2,1,3,6,0,0,0,0,11,36,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1120,"            result[1] += err;
",2,0,1,1,2,0,0,0,0,5,17,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1122,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1130,"        final double xs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1131,"        final double ys[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1132,"        final double zs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1135,"        split(a[0], xs);
",0,0,1,2,4,0,4,0,0,6,16,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1136,"        split(b[0], ys);
",0,0,1,2,4,0,4,0,0,6,16,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1137,"        splitMult(xs, ys, zs);
",0,0,0,1,2,0,8,0,0,8,22,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1139,"        result[0] = zs[0];
",0,0,1,2,4,0,0,0,0,5,18,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1140,"        result[1] = zs[1];
",0,0,1,2,4,0,0,0,0,5,18,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1143,"        split(b[1], ys);
",0,0,1,2,4,0,4,0,0,6,16,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1144,"        splitMult(xs, ys, zs);
",0,0,0,1,2,0,8,0,0,8,22,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1146,"        double tmp = result[0] + zs[0];
",2,1,1,2,4,0,0,0,0,7,31,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1147,"        result[1] = result[1] - (tmp - result[0] - zs[0]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1148,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1149,"        tmp = result[0] + zs[1];
",2,1,1,2,4,0,0,0,0,8,24,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1150,"        result[1] = result[1] - (tmp - result[0] - zs[1]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1151,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1154,"        split(a[1], xs);
",0,0,1,2,4,0,4,0,0,6,16,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1155,"        split(b[0], ys);
",0,0,1,2,4,0,4,0,0,6,16,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1156,"        splitMult(xs, ys, zs);
",0,0,0,1,2,0,8,0,0,8,22,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1158,"        tmp = result[0] + zs[0];
",2,1,1,2,4,0,0,0,0,8,24,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1159,"        result[1] = result[1] - (tmp - result[0] - zs[0]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1160,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1161,"        tmp = result[0] + zs[1];
",2,1,1,2,4,0,0,0,0,8,24,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1162,"        result[1] = result[1] - (tmp - result[0] - zs[1]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1163,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1166,"        split(a[1], xs);
",0,0,1,2,4,0,4,0,0,6,16,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1167,"        split(b[1], ys);
",0,0,1,2,4,0,4,0,0,6,16,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1168,"        splitMult(xs, ys, zs);
",0,0,0,1,2,0,8,0,0,8,22,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1170,"        tmp = result[0] + zs[0];
",2,1,1,2,4,0,0,0,0,8,24,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1171,"        result[1] = result[1] - (tmp - result[0] - zs[0]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1172,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1173,"        tmp = result[0] + zs[1];
",2,1,1,2,4,0,0,0,0,8,24,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1174,"        result[1] = result[1] - (tmp - result[0] - zs[1]);
",2,2,1,5,10,0,0,0,0,13,50,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1175,"        result[0] = tmp;
",2,0,1,1,2,0,0,0,0,5,16,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1176,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1185,"        final double xs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1186,"        final double as[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1187,"        final double ys[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1196,"        xs[0] = 2.718281828459045;
",0,0,1,1,2,0,0,0,0,3,26,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1197,"        xs[1] = 1.4456468917292502E-16;
",0,0,1,1,2,0,0,0,0,3,31,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1199,"        split(1.0, ys);
",0,0,0,1,2,0,4,0,0,4,15,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1201,"        while (p > 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1202,"            if ((p & 1) != 0) {
",2,2,0,2,5,0,0,0,0,4,19,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1203,"                quadMult(ys, xs, as);
",0,0,0,1,2,0,8,0,0,8,21,9,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1204,"                ys[0] = as[0]; ys[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1207,"            quadMult(xs, xs, as);
",0,0,0,1,2,0,8,0,0,8,21,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1208,"            xs[0] = as[0]; xs[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1210,"            p >>= 1;
",2,0,0,0,0,0,0,0,0,3,8,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1213,"        if (result != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1214,"            result[0] = ys[0];
",0,0,1,2,4,0,0,0,0,5,18,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1215,"            result[1] = ys[1];
",0,0,1,2,4,0,0,0,0,5,18,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1217,"            resplit(result);
",0,0,0,1,2,0,4,0,0,4,16,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1220,"        return ys[0] + ys[1];
",0,1,1,2,4,1,0,0,0,5,21,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1716,"        double x[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,27,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1717,"        double x2[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1718,"        double y[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,27,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1719,"        double a[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,27,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1721,"        split(xi, x);
",0,0,0,1,2,0,6,0,0,6,13,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1724,"        x[0] += 1.0;
",0,0,1,1,2,0,0,0,0,3,12,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1725,"        resplit(x);
",0,0,0,1,2,0,4,0,0,4,11,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1726,"        splitReciprocal(x, a);
",0,0,0,1,2,0,6,0,0,6,22,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1727,"        x[0] -= 2.0;
",0,0,1,1,2,0,0,0,0,3,12,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1728,"        resplit(x);
",0,0,0,1,2,0,4,0,0,4,11,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1729,"        splitMult(x, a, y);
",0,0,0,1,2,0,8,0,0,8,19,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1730,"        x[0] = y[0];
",0,0,1,2,4,0,0,0,0,5,12,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1731,"        x[1] = y[1];
",0,0,1,2,4,0,0,0,0,5,12,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1734,"        splitMult(x, x, x2);
",0,0,0,1,2,0,8,0,0,8,20,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1740,"        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];
",4,1,1,3,6,0,0,0,0,10,48,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1741,"        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];
",4,1,1,3,6,0,0,0,0,10,48,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1743,"        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,51,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1744,"            splitMult(y, x2, a);
",0,0,0,1,2,0,8,0,0,8,20,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1745,"            y[0] = a[0];
",0,0,1,2,4,0,0,0,0,5,12,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1746,"            y[1] = a[1];
",0,0,1,2,4,0,0,0,0,5,12,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1747,"            splitAdd(y, LN_SPLIT_COEF[i], a);
",0,0,1,2,4,0,6,0,0,10,33,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1748,"            y[0] = a[0];
",0,0,1,2,4,0,0,0,0,5,12,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1749,"            y[1] = a[1];
",0,0,1,2,4,0,0,0,0,5,12,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1752,"        splitMult(y, x, a);
",0,0,0,1,2,0,8,0,0,8,19,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1753,"        y[0] = a[0];
",0,0,1,2,4,0,0,0,0,5,12,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1754,"        y[1] = a[1];
",0,0,1,2,4,0,0,0,0,5,12,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1756,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1766,"        final double xs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1767,"        final double ys[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1768,"        final double facts[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,37,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1769,"        final double as[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1770,"        split(x, xs);
",0,0,0,1,2,0,6,0,0,6,13,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1771,"        ys[0] = ys[1] = 0.0;
",0,0,1,2,4,0,0,0,0,6,20,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1773,"        for (int i = 19; i >= 0; i--) {
",6,1,0,1,3,0,0,0,0,8,31,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1774,"            splitMult(xs, ys, as);
",0,0,0,1,2,0,8,0,0,8,22,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1775,"            ys[0] = as[0]; ys[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1777,"            if ( (i & 1) == 0) {
",2,2,0,2,5,0,0,0,0,4,20,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1778,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1781,"            split(FACT[i], as);
",0,0,1,2,4,0,4,0,0,8,19,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1782,"            splitReciprocal(as, facts);
",0,0,0,1,2,0,6,0,0,6,27,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1784,"            if ( (i & 2) != 0 ) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1785,"                facts[0] = -facts[0];
",0,0,1,2,4,0,0,0,0,6,21,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1786,"                facts[1] = -facts[1];
",0,0,1,2,4,0,0,0,0,6,21,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1789,"            splitAdd(ys, facts, as);
",0,0,0,1,2,0,8,0,0,8,24,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1790,"            ys[0] = as[0]; ys[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1793,"        if (result != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1794,"            result[0] = ys[0];
",0,0,1,2,4,0,0,0,0,5,18,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1795,"            result[1] = ys[1];
",0,0,1,2,4,0,0,0,0,5,18,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1798,"        return ys[0] + ys[1];
",0,1,1,2,4,1,0,0,0,5,21,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1809,"        final double xs[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1810,"        final double ys[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1811,"        final double facts[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,37,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1812,"        final double as[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,34,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1813,"        split(x, xs);
",0,0,0,1,2,0,6,0,0,6,13,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1814,"        ys[0] = ys[1] = 0.0;
",0,0,1,2,4,0,0,0,0,6,20,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1816,"        for (int i = 19; i >= 0; i--) {
",6,1,0,1,3,0,0,0,0,8,31,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1817,"            splitMult(xs, ys, as);
",0,0,0,1,2,0,8,0,0,8,22,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1818,"            ys[0] = as[0]; ys[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1820,"            if ( (i & 1) != 0) {
",2,2,0,2,5,0,0,0,0,4,20,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1821,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1824,"            split(FACT[i], as);
",0,0,1,2,4,0,4,0,0,8,19,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1825,"            splitReciprocal(as, facts);
",0,0,0,1,2,0,6,0,0,6,27,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1827,"            if ( (i & 2) != 0 ) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1828,"                facts[0] = -facts[0];
",0,0,1,2,4,0,0,0,0,6,21,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1829,"                facts[1] = -facts[1];
",0,0,1,2,4,0,0,0,0,6,21,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1832,"            splitAdd(ys, facts, as);
",0,0,0,1,2,0,8,0,0,8,24,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1833,"            ys[0] = as[0]; ys[1] = as[1];
",0,0,1,4,8,0,0,0,0,10,29,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1836,"        if (result != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1837,"            result[0] = ys[0];
",0,0,1,2,4,0,0,0,0,5,18,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1838,"            result[1] = ys[1];
",0,0,1,2,4,0,0,0,0,5,18,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1841,"        return ys[0] + ys[1];
",0,1,1,2,4,1,0,0,0,5,21,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1847,"        final double result[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1850,"        for (int i = 0; i < 7; i++) {
",6,1,0,1,3,0,0,0,0,8,29,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1851,"            double x = i / 8.0;
",4,1,0,0,0,0,0,0,0,5,19,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1853,"            slowSin(x, result);
",0,0,0,1,2,0,6,0,0,6,19,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1854,"            SINE_TABLE_A[i] = result[0];
",0,0,1,2,4,0,0,0,0,7,28,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1855,"            SINE_TABLE_B[i] = result[1];
",0,0,1,2,4,0,0,0,0,7,28,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1857,"            slowCos(x, result);
",0,0,0,1,2,0,6,0,0,6,19,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1858,"            COSINE_TABLE_A[i] = result[0];
",0,0,1,2,4,0,0,0,0,7,30,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1859,"            COSINE_TABLE_B[i] = result[1];
",0,0,1,2,4,0,0,0,0,7,30,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1863,"        for (int i = 7; i < 14; i++) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1864,"            double xs[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1865,"            double ys[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1866,"            double as[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1867,"            double bs[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1868,"            double temps[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,31,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1870,"            if ( (i & 1) == 0) {
",2,2,0,2,5,0,0,0,0,4,20,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1872,"                xs[0] = SINE_TABLE_A[i/2];
",2,1,1,2,4,0,0,0,0,8,26,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1873,"                xs[1] = SINE_TABLE_B[i/2];
",2,1,1,2,4,0,0,0,0,8,26,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1874,"                ys[0] = COSINE_TABLE_A[i/2];
",2,1,1,2,4,0,0,0,0,8,28,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1875,"                ys[1] = COSINE_TABLE_B[i/2];
",2,1,1,2,4,0,0,0,0,8,28,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1878,"                splitMult(xs, ys, result);
",0,0,0,1,2,0,8,0,0,8,26,9,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1879,"                SINE_TABLE_A[i] = result[0] * 2.0;
",0,1,1,2,4,0,0,0,0,8,34,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1880,"                SINE_TABLE_B[i] = result[1] * 2.0;
",0,1,1,2,4,0,0,0,0,8,34,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1883,"                splitMult(ys, ys, as);
",0,0,0,1,2,0,8,0,0,8,22,9,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1884,"                splitMult(xs, xs, temps);
",0,0,0,1,2,0,8,0,0,8,25,9,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1885,"                temps[0] = -temps[0];
",0,0,1,2,4,0,0,0,0,6,21,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1886,"                temps[1] = -temps[1];
",0,0,1,2,4,0,0,0,0,6,21,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1887,"                splitAdd(as, temps, result);
",0,0,0,1,2,0,8,0,0,8,28,9,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1888,"                COSINE_TABLE_A[i] = result[0];
",0,0,1,2,4,0,0,0,0,7,30,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1889,"                COSINE_TABLE_B[i] = result[1];
",0,0,1,2,4,0,0,0,0,7,30,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1891,"                xs[0] = SINE_TABLE_A[i/2];
",2,1,1,2,4,0,0,0,0,8,26,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1892,"                xs[1] = SINE_TABLE_B[i/2];
",2,1,1,2,4,0,0,0,0,8,26,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1893,"                ys[0] = COSINE_TABLE_A[i/2];
",2,1,1,2,4,0,0,0,0,8,28,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1894,"                ys[1] = COSINE_TABLE_B[i/2];
",2,1,1,2,4,0,0,0,0,8,28,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1895,"                as[0] = SINE_TABLE_A[i/2+1];
",2,2,1,2,4,0,0,0,0,9,28,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1896,"                as[1] = SINE_TABLE_B[i/2+1];
",2,2,1,2,4,0,0,0,0,9,28,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1897,"                bs[0] = COSINE_TABLE_A[i/2+1];
",2,2,1,2,4,0,0,0,0,9,30,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1898,"                bs[1] = COSINE_TABLE_B[i/2+1];
",2,2,1,2,4,0,0,0,0,9,30,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1901,"                splitMult(xs, bs, temps);
",0,0,0,1,2,0,8,0,0,8,25,9,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1902,"                splitMult(ys, as, result);
",0,0,0,1,2,0,8,0,0,8,26,9,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1903,"                splitAdd(result, temps, result);
",0,0,0,1,2,0,8,0,0,8,32,9,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1904,"                SINE_TABLE_A[i] = result[0];
",0,0,1,2,4,0,0,0,0,7,28,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1905,"                SINE_TABLE_B[i] = result[1];
",0,0,1,2,4,0,0,0,0,7,28,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1908,"                splitMult(ys, bs, result);
",0,0,0,1,2,0,8,0,0,8,26,9,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1909,"                splitMult(xs, as, temps);
",0,0,0,1,2,0,8,0,0,8,25,9,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1910,"                temps[0] = -temps[0];
",0,0,1,2,4,0,0,0,0,6,21,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1911,"                temps[1] = -temps[1];
",0,0,1,2,4,0,0,0,0,6,21,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1912,"                splitAdd(result, temps, result);
",0,0,0,1,2,0,8,0,0,8,32,9,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1913,"                COSINE_TABLE_A[i] = result[0];
",0,0,1,2,4,0,0,0,0,7,30,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1914,"                COSINE_TABLE_B[i] = result[1];
",0,0,1,2,4,0,0,0,0,7,30,8,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1919,"        for (int i = 0; i < 14; i++) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1920,"            double xs[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1921,"            double ys[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1922,"            double as[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,28,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1924,"            as[0] = COSINE_TABLE_A[i];
",0,0,1,2,4,0,0,0,0,7,26,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1925,"            as[1] = COSINE_TABLE_B[i];
",0,0,1,2,4,0,0,0,0,7,26,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1927,"            splitReciprocal(as, ys);
",0,0,0,1,2,0,6,0,0,6,24,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1929,"            xs[0] = SINE_TABLE_A[i];
",0,0,1,2,4,0,0,0,0,7,24,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1930,"            xs[1] = SINE_TABLE_B[i];
",0,0,1,2,4,0,0,0,0,7,24,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1932,"            splitMult(xs, ys, as);
",0,0,0,1,2,0,8,0,0,8,22,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1934,"            TANGENT_TABLE_A[i] = as[0];
",0,0,1,2,4,0,0,0,0,7,27,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1935,"            TANGENT_TABLE_B[i] = as[1];
",0,0,1,2,4,0,0,0,0,7,27,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1938,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3380,"        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,61,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3784,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3827,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3828,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3895,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3896,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3898,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3899,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3902,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3907,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3908,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3911,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,197,"        return norm * FastMath.exp(-xMinusMean * xMinusMean * i2s2);
",8,2,0,1,2,1,4,0,0,15,60,4,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,35,"public class Gaussian implements DifferentiableUnivariateRealFunction {
",2,0,0,0,1,1,0,2,0,5,71,1,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,114,"    public static class Parametric implements ParametricUnivariateRealFunction {
",2,0,0,0,1,2,0,2,0,6,76,2,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,128,"            validateParameters(param);
",0,0,0,1,2,0,4,0,0,4,26,6,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,130,"            final double diff = x - param[1];
",4,1,1,1,2,1,0,0,0,8,33,5,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,131,"            final double i2s2 = 1 / (2 * param[2] * param[2]);
",2,2,1,3,6,1,0,0,0,9,50,5,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,132,"            return Gaussian.value(diff, param[0], i2s2);
",0,0,1,2,4,1,8,0,0,10,44,6,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,150,"            validateParameters(param);
",0,0,0,1,2,0,4,0,0,4,26,6,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,152,"            final double norm = param[0];
",2,0,1,1,2,1,0,0,0,5,29,5,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,153,"            final double diff = x - param[1];
",4,1,1,1,2,1,0,0,0,8,33,5,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,154,"            final double sigma = param[2];
",2,0,1,1,2,1,0,0,0,5,30,5,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,155,"            final double i2s2 = 1 / (2 * sigma * sigma);
",6,2,0,1,2,1,0,0,0,9,44,5,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,157,"            final double n = Gaussian.value(diff, 1, i2s2);
",2,0,0,1,2,1,8,0,0,11,47,5,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,158,"            final double m = norm * n * 2 * i2s2 * diff;
",10,1,0,0,0,1,0,0,0,12,44,5,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,159,"            final double s = m * diff / sigma;
",8,2,0,0,0,1,0,0,0,11,34,5,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,161,"            return new double[] { n, m, s };
",6,0,0,2,4,1,0,0,0,6,32,7,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,176,"            if (param == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,179,"            if (param.length != 3) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,182,"            if (param[2] <= 0) {
",0,1,1,2,5,0,0,0,0,3,20,5,0.20000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,185,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,47,"    public WeightedObservedPoint(final double weight, final double x, final double y) {
",8,0,0,1,3,4,0,0,0,12,83,2,0.16667,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,48,"        this.weight = weight;
",4,0,0,0,0,0,0,0,0,5,21,4,0.16667,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,49,"        this.x      = x;
",4,0,0,0,0,0,0,0,0,5,16,4,0.16667,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,50,"        this.y      = y;
",4,0,0,0,0,0,0,0,0,5,16,4,0.16667,0
defect4j,math,org/apache/commons/math/optimization/fitting/WeightedObservedPoint,58,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,67,"        addObservedPoint(1.0, x, y);
",0,0,0,1,2,0,6,0,0,6,28,5,0.16667,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,80,"        observations.add(new WeightedObservedPoint(weight, x, y));
",6,0,0,2,4,0,4,2,0,12,58,5,0.16667,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,140,"        public ParameterGuesser(WeightedObservedPoint[] observations) {
",4,0,0,2,5,1,0,2,0,7,63,3,0.14286,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,141,"            if (observations == null) {
",2,1,0,1,3,0,0,0,0,3,27,5,0.14286,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,144,"            if (observations.length < 3) {
",4,1,0,1,3,0,0,0,0,5,30,5,0.14286,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,68,"        super(optimizer);
",2,0,0,1,2,0,0,0,0,2,17,4,0.14286,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,120,"        final double[] guess = (new ParameterGuesser(getObservations())).guess();
",2,0,0,5,10,1,4,2,0,9,73,4,0.14286,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,51,"    public CurveFitter(final DifferentiableMultivariateVectorialOptimizer optimizer) {
",4,0,0,1,3,2,0,2,0,8,82,2,0.14286,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,52,"        this.optimizer = optimizer;
",4,0,0,0,0,0,0,0,0,5,27,4,0.14286,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,53,"        observations = new ArrayList<WeightedObservedPoint>();
",2,0,0,1,2,0,0,4,0,7,54,4,0.14286,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,100,"        return observations.toArray(new WeightedObservedPoint[observations.size()]);
",0,0,0,3,6,1,8,2,0,10,76,5,0.14286,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,62,"        this(new SimpleVectorialValueChecker());
",0,0,0,2,4,0,0,2,0,2,40,6,0.14286,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,63,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,67,"    protected BaseAbstractVectorialOptimizer(ConvergenceChecker<VectorialPointValuePair> checker) {
",4,0,0,1,3,1,0,4,0,9,95,2,0.14286,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,44,"    protected final Incrementor evaluations = new Incrementor();
",2,0,0,1,2,2,0,4,0,8,60,2,0.14286,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,68,"        this.checker = checker;
",4,0,0,0,0,0,0,0,0,5,23,4,0.14286,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,152,"        this(100, 1e-10, 1e-10, 1e-10, MathUtils.SAFE_MIN);
",4,0,0,1,2,0,0,0,0,4,51,5,0.14286,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,153,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,208,"                                       double threshold) {
",2,0,0,0,2,0,0,0,0,2,19,3,0.14286,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,209,"        this.initialStepBoundFactor = initialStepBoundFactor;
",4,0,0,0,0,0,0,0,0,5,53,4,0.14286,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,210,"        this.costRelativeTolerance = costRelativeTolerance;
",4,0,0,0,0,0,0,0,0,5,51,4,0.14286,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,211,"        this.parRelativeTolerance = parRelativeTolerance;
",4,0,0,0,0,0,0,0,0,5,49,4,0.14286,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,212,"        this.orthoTolerance = orthoTolerance;
",4,0,0,0,0,0,0,0,0,5,37,4,0.14286,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,213,"        this.qrRankingThreshold = threshold;
",4,0,0,0,0,0,0,0,0,5,36,4,0.14286,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,214,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,78,"    protected AbstractLeastSquaresOptimizer() {}
",2,0,0,2,4,1,0,0,0,3,44,2,0.14286,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,52,"    public AbstractConvergenceChecker() {
",2,0,0,1,3,1,0,0,0,3,37,2,0.14286,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,53,"        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;
",4,0,0,0,0,0,0,0,0,5,52,4,0.14286,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,54,"        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;
",4,0,0,0,0,0,0,0,0,5,52,4,0.14286,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,55,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,39,"    public SimpleVectorialValueChecker() {}
",2,0,0,2,4,1,0,0,0,3,39,2,0.14286,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,28,"public class Incrementor {
",2,0,0,0,1,1,0,0,0,3,26,1,0.14286,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,59,"                                   final boolean copyArray) {
",2,0,0,0,2,1,0,0,0,3,26,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,60,"        this.point = copyArray ?
",4,0,0,0,0,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,63,"        this.value = copyArray ?
",4,0,0,0,0,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,72,"        return (point == null) ? null : point.clone();
",2,1,0,2,4,1,4,0,0,7,46,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,81,"        return point;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/VectorialPointValuePair,58,88,"        return (value == null) ? null : value.clone();
",2,1,0,2,4,1,4,0,0,7,46,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,142,"                throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);
",4,0,0,1,2,0,0,2,0,6,62,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,145,"                throw new NumberIsTooSmallException(observations.length, 3, true);
",4,0,0,1,2,0,0,2,0,7,66,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,180,"                double fwhmX2 = interpolateXAtY(points, maxYIdx, +1, halfY);
",2,0,0,1,2,0,8,0,0,11,60,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,181,"                fwhmApprox = fwhmX2 - fwhmX1;
",6,1,0,0,0,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,184,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,224,"                throw new ZeroException();
",0,0,0,1,2,0,0,2,0,2,26,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,227,"            WeightedObservedPoint pointA = twoPoints[0];
",2,0,1,1,2,0,0,2,0,6,44,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,228,"            WeightedObservedPoint pointB = twoPoints[1];
",2,0,1,1,2,0,0,2,0,6,44,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,229,"            if (pointA.getY() == y) {
",2,1,0,2,5,0,4,0,0,7,25,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,230,"                return pointA.getX();
",0,0,0,1,2,1,4,0,0,4,21,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,232,"            if (pointB.getY() == y) {
",2,1,0,2,5,0,4,0,0,7,25,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,233,"                return pointB.getX();
",0,0,0,1,2,1,4,0,0,4,21,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,235,"            return pointA.getX() +
",0,1,0,1,2,1,4,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,259,"                throw new ZeroException();
",0,0,0,1,2,0,0,2,0,2,26,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,265,"                    return (idxStep < 0) ?
",2,1,0,1,2,1,0,0,0,3,22,11,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,84,"        final ParametricUnivariateRealFunction f = new ParametricUnivariateRealFunction() {
",2,0,0,1,3,1,0,4,0,7,83,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,110,"        return fit(f, initialGuess);
",0,0,0,1,2,1,6,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,90,"        observations.add(observed);
",0,0,0,1,2,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,91,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,107,"        observations.clear();
",0,0,0,1,2,0,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,108,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/CurveFitter,58,165,"        return optimum.getPointRef();
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,58,41,"        super(LocalizedFormats.NULL_NOT_ALLOWED);
",4,0,0,1,2,0,0,0,0,4,41,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,58,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,58,48,"        super(specific, LocalizedFormats.NULL_NOT_ALLOWED);
",6,0,0,1,2,0,0,0,0,6,51,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NullArgumentException,58,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,52,"        this(null, general, args);
",4,0,0,1,2,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,77,"        this(cause, null, null);
",2,0,0,1,2,0,0,0,0,2,24,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,82,"        return specific;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,87,"        return general;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,92,"        return arguments.clone();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,102,"        return MessageFactory.buildMessage(locale, specific, general, arguments);
",0,0,0,1,2,1,12,0,0,12,73,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,108,"        return getMessage(Locale.US);
",4,0,0,1,2,1,2,0,0,6,29,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,114,"        return getMessage(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,81,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,88,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,64,"        super(general, wrong, arguments);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,65,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,72,"        return argument;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/ZeroException,58,37,"        this(null);
",0,0,0,1,2,0,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/ZeroException,58,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/ZeroException,58,46,"        super(specific, LocalizedFormats.ZERO_NOT_ALLOWED, 0);
",6,0,0,1,2,0,0,0,0,6,54,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/ZeroException,58,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,72,"        return lo;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,78,"        return hi;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,84,"        final ParametricUnivariateRealFunction f = new ParametricUnivariateRealFunction() {
",2,0,0,1,3,1,0,4,0,7,83,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,85,"                private final ParametricUnivariateRealFunction g = new Gaussian.Parametric();
",6,0,0,1,2,2,0,2,0,10,77,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,88,"                    double v = Double.POSITIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,36,11,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,90,"                        v = g.value(x, p);
",2,0,0,1,2,0,8,0,0,11,18,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,93,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,91,"                    } catch (NotStrictlyPositiveException e) {
",2,0,0,1,4,0,0,2,0,4,42,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,94,"                    return v;
",2,0,0,0,0,1,0,0,0,2,9,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,98,"                    double[] v = { Double.POSITIVE_INFINITY,
",6,0,0,1,3,0,0,0,0,6,40,11,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,102,"                        v = g.gradient(x, p);
",2,0,0,1,2,0,8,0,0,11,21,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,105,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,103,"                    } catch (NotStrictlyPositiveException e) {
",2,0,0,1,4,0,0,2,0,4,42,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,106,"                    return v;
",2,0,0,0,0,1,0,0,0,2,9,10,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,58,38,"        super(value, 0, false);
",2,0,0,1,2,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,58,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,58,48,"        super(specific, value, 0, false);
",4,0,0,1,2,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NotStrictlyPositiveException,58,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,305,"                        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,308,"                        return -1;
",0,0,0,0,0,1,0,0,0,1,10,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,311,"                        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,314,"                        return -1;
",0,0,0,0,0,1,0,0,0,1,10,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,319,"                    if (p1.getY() < p2.getY()) {
",0,1,0,3,7,0,8,0,0,9,28,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,320,"                        return -1;
",0,0,0,0,0,1,0,0,0,1,10,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,322,"                    if (p1.getY() > p2.getY()) {
",0,1,0,3,7,0,8,0,0,9,28,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,323,"                        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,325,"                    if (p1.getWeight() < p2.getWeight()) {
",0,1,0,3,7,0,8,0,0,9,38,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,326,"                        return -1;
",0,0,0,0,0,1,0,0,0,1,10,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,328,"                    if (p1.getWeight() > p2.getWeight()) {
",0,1,0,3,7,0,8,0,0,9,38,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,329,"                        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,331,"                    return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,73,"        return evaluations.getMaximalCount();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,78,"        return evaluations.getCount();
",0,0,0,1,2,1,4,0,0,4,30,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,83,"        this.checker = convergenceChecker;
",4,0,0,0,0,0,0,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,84,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,104,"        } catch (MaxCountExceededException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,105,"            throw new TooManyEvaluationsException(e.getMax());
",0,0,0,2,4,0,4,2,0,6,50,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,115,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,118,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,121,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,124,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,127,"            throw new DimensionMismatchException(t.length, w.length);
",8,0,0,1,2,0,0,2,0,10,57,7,0.00000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer,58,148,"        return start.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,176,"        this(100,
",0,0,0,0,1,0,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,179,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,276,"                        dk = 1.0;
",2,0,0,0,0,0,0,0,0,3,9,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,305,"                updateResidualsAndCost();
",0,0,0,1,2,0,2,0,0,2,25,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,306,"                current = new VectorialPointValuePair(point, objective);
",6,0,0,1,2,0,0,2,0,9,56,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,307,"                return current;
",2,0,0,0,0,1,0,0,0,2,15,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,384,"                    double tmp =
",2,0,0,0,0,0,0,0,0,2,12,11,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,386,"                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {
",6,4,0,3,7,0,0,0,0,10,50,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,387,"                            tmp = 0.1;
",2,0,0,0,0,0,0,0,0,3,10,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,389,"                        delta = tmp * FastMath.min(delta, 10.0 * lmNorm);
",6,2,0,1,2,0,6,0,0,15,49,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,390,"                        lmPar /= tmp;
",4,0,0,0,0,0,0,0,0,5,13,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,391,"                } else if ((lmPar == 0) || (ratio >= 0.75)) {
",4,3,0,3,8,0,0,0,0,7,45,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,412,"                            return current;
",2,0,0,0,0,1,0,0,0,2,15,14,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,417,"                    cost = previousCost;
",4,0,0,0,0,0,0,0,0,5,20,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,418,"                    for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,419,"                        int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,13,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,420,"                        point[pj] = oldX[pj];
",0,0,1,2,4,0,0,0,0,9,21,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,422,"                    tmpVec    = weightedResiduals;
",4,0,0,0,0,0,0,0,0,5,30,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,423,"                    weightedResiduals = oldRes;
",4,0,0,0,0,0,0,0,0,5,27,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,424,"                    oldRes    = tmpVec;
",4,0,0,0,0,0,0,0,0,5,19,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,425,"                    tmpVec    = objective;
",4,0,0,0,0,0,0,0,0,5,22,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,426,"                    objective = oldObj;
",4,0,0,0,0,0,0,0,0,5,19,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,427,"                    oldObj    = tmpVec;
",4,0,0,0,0,0,0,0,0,5,19,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,435,"                    return current;
",2,0,0,0,0,1,0,0,0,2,15,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,441,"                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,
",4,0,0,0,1,0,0,2,0,6,82,11,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,444,"                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,
",4,0,0,0,1,0,0,2,0,6,88,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,447,"                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,
",4,0,0,0,1,0,0,2,0,6,82,13,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,485,"            lmDir[permutation[j]] = 0;
",0,0,1,2,4,0,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,516,"        double parl = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,517,"        if (rank == solvedCols) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,518,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,519,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,520,"                work1[pj] *= diag[pj] / dxNorm;
",2,1,1,2,4,0,0,0,0,12,31,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,522,"            sum2 = 0;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,523,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,524,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,525,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,526,"                for (int i = 0; i < j; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,527,"                    sum += weightedResidualJacobian[i][pj] * work1[permutation[i]];
",2,1,1,4,8,0,0,0,0,16,63,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,529,"                double s = (work1[pj] - sum) / diagR[pj];
",4,2,1,3,6,0,0,0,0,14,41,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,530,"                work1[pj] = s;
",2,0,1,1,2,0,0,0,0,7,14,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,531,"                sum2 += s * s;
",6,1,0,0,0,0,0,0,0,8,14,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,533,"            parl = fp / (delta * sum2);
",8,2,0,1,2,0,0,0,0,11,27,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,537,"        sum2 = 0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,538,"        for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,539,"            int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,7,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,540,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,541,"            for (int i = 0; i <= j; ++i) {
",8,1,0,1,3,0,0,0,0,10,30,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,542,"                sum += weightedResidualJacobian[i][pj] * qy[i];
",2,1,1,3,6,0,0,0,0,14,47,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,544,"            sum /= diag[pj];
",2,0,1,1,2,0,0,0,0,7,16,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,545,"            sum2 += sum * sum;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,547,"        double gNorm = FastMath.sqrt(sum2);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,548,"        double paru = gNorm / delta;
",6,1,0,0,0,0,0,0,0,7,28,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,549,"        if (paru == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,551,"            paru = 2.2251e-308 / FastMath.min(delta, 0.1);
",2,1,0,1,2,0,6,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,556,"        lmPar = FastMath.min(paru, FastMath.max(lmPar, parl));
",2,0,0,2,4,0,14,0,0,17,54,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,557,"        if (lmPar == 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,558,"            lmPar = gNorm / dxNorm;
",6,1,0,0,0,0,0,0,0,8,23,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,561,"        for (int countdown = 10; countdown >= 0; --countdown) {
",6,1,0,1,3,0,0,0,0,8,55,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,564,"            if (lmPar == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,565,"                lmPar = FastMath.max(2.2251e-308, 0.001 * paru);
",4,1,0,1,2,0,4,0,0,10,48,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,567,"            double sPar = FastMath.sqrt(lmPar);
",2,0,0,1,2,0,6,0,0,8,35,7,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,568,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,569,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,570,"                work1[pj] = sPar * diag[pj];
",2,1,1,2,4,0,0,0,0,12,28,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,572,"            determineLMDirection(qy, work1, work2, work3);
",0,0,0,1,2,0,10,0,0,10,46,7,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,574,"            dxNorm = 0;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,575,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,576,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,577,"                double s = diag[pj] * lmDir[pj];
",2,1,1,2,4,0,0,0,0,11,32,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,578,"                work3[pj] = s;
",2,0,1,1,2,0,0,0,0,7,14,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,579,"                dxNorm += s * s;
",6,1,0,0,0,0,0,0,0,8,16,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,581,"            dxNorm = FastMath.sqrt(dxNorm);
",2,0,0,1,2,0,6,0,0,9,31,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,582,"            double previousFP = fp;
",4,0,0,0,0,0,0,0,0,4,23,7,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,583,"            fp = dxNorm - delta;
",6,1,0,0,0,0,0,0,0,8,20,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,587,"            if ((FastMath.abs(fp) <= 0.1 * delta) ||
",2,3,0,2,5,0,6,0,0,11,40,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,589,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,593,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,594,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,595,"                work1[pj] = work3[pj] * diag[pj] / dxNorm;
",2,2,1,3,6,0,0,0,0,17,42,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,597,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,598,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,599,"                work1[pj] /= work2[j];
",0,0,1,2,4,0,0,0,0,9,22,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,600,"                double tmp = work1[pj];
",2,0,1,1,2,0,0,0,0,6,23,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,601,"                for (int i = j + 1; i < solvedCols; ++i) {
",10,2,0,1,3,0,0,0,0,13,42,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,602,"                    work1[permutation[i]] -= weightedResidualJacobian[i][pj] * tmp;
",2,1,1,4,8,0,0,0,0,16,63,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,605,"            sum2 = 0;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,606,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,607,"                double s = work1[permutation[j]];
",2,0,1,2,4,0,0,0,0,8,33,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,608,"                sum2 += s * s;
",6,1,0,0,0,0,0,0,0,8,14,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,610,"            double correction = fp / (delta * sum2);
",8,2,0,1,2,0,0,0,0,10,40,7,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,613,"            if (fp > 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,614,"                parl = FastMath.max(parl, lmPar);
",2,0,0,1,2,0,8,0,0,11,33,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,615,"            } else if (fp < 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,616,"                paru = FastMath.min(paru, lmPar);
",2,0,0,1,2,0,8,0,0,11,33,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,620,"            lmPar = FastMath.max(parl, lmPar + correction);
",6,1,0,1,2,0,6,0,0,14,47,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,623,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,650,"        for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,651,"            int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,7,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,652,"            for (int i = j + 1; i < solvedCols; ++i) {
",10,2,0,1,3,0,0,0,0,13,42,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,653,"                weightedResidualJacobian[i][pj] = weightedResidualJacobian[j][permutation[i]];
",0,0,1,5,10,0,0,0,0,15,78,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,655,"            lmDir[j] = diagR[pj];
",0,0,1,2,4,0,0,0,0,9,21,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,656,"            work[j]  = qy[j];
",0,0,1,2,4,0,0,0,0,9,17,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,660,"        for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,664,"            int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,7,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,665,"            double dpj = diag[pj];
",2,0,1,1,2,0,0,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,666,"            if (dpj != 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,667,"                Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);
",6,1,0,1,2,0,6,0,0,13,45,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,669,"            lmDiag[j] = dpj;
",2,0,1,1,2,0,0,0,0,7,16,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,674,"            double qtbpj = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,675,"            for (int k = j; k < solvedCols; ++k) {
",10,1,0,1,3,0,0,0,0,12,38,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,676,"                int pk = permutation[k];
",2,0,1,1,2,0,0,0,0,6,24,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,680,"                if (lmDiag[k] != 0) {
",0,1,1,2,5,0,0,0,0,5,21,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,684,"                    double rkk = weightedResidualJacobian[k][pk];
",2,0,1,2,4,0,0,0,0,8,45,11,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,685,"                    if (FastMath.abs(rkk) < FastMath.abs(lmDiag[k])) {
",0,1,1,4,9,0,10,0,0,15,50,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,686,"                        final double cotan = rkk / lmDiag[k];
",4,1,1,1,2,1,0,0,0,10,37,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,687,"                        sin   = 1.0 / FastMath.sqrt(1.0 + cotan * cotan);
",6,3,0,1,2,0,4,0,0,14,49,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,688,"                        cos   = sin * cotan;
",6,1,0,0,0,0,0,0,0,8,20,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,689,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,690,"                        final double tan = lmDiag[k] / rkk;
",4,1,1,1,2,1,0,0,0,10,35,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,691,"                        cos = 1.0 / FastMath.sqrt(1.0 + tan * tan);
",6,3,0,1,2,0,4,0,0,14,43,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,692,"                        sin = cos * tan;
",6,1,0,0,0,0,0,0,0,8,16,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,697,"                    weightedResidualJacobian[k][pk] = cos * rkk + sin * lmDiag[k];
",6,3,1,3,6,0,0,0,0,20,62,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,698,"                    final double temp = cos * work[k] + sin * qtbpj;
",8,3,1,1,2,1,0,0,0,16,48,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,699,"                    qtbpj = -sin * work[k] + cos * qtbpj;
",8,3,1,1,2,0,0,0,0,17,37,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,700,"                    work[k] = temp;
",2,0,1,1,2,0,0,0,0,7,15,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,703,"                    for (int i = k + 1; i < solvedCols; ++i) {
",10,2,0,1,3,0,0,0,0,13,42,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,704,"                        double rik = weightedResidualJacobian[i][pk];
",2,0,1,2,4,0,0,0,0,8,45,13,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,705,"                        final double temp2 = cos * rik + sin * lmDiag[i];
",8,3,1,1,2,1,0,0,0,16,49,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,706,"                        lmDiag[i] = -sin * rik + cos * lmDiag[i];
",6,3,1,2,4,0,0,0,0,19,41,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,707,"                        weightedResidualJacobian[i][pk] = temp2;
",2,0,1,2,4,0,0,0,0,9,40,12,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,714,"            lmDiag[j] = weightedResidualJacobian[j][permutation[j]];
",0,0,1,4,8,0,0,0,0,13,56,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,715,"            weightedResidualJacobian[j][permutation[j]] = lmDir[j];
",0,0,1,4,8,0,0,0,0,13,55,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,720,"        int nSing = solvedCols;
",4,0,0,0,0,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,721,"        for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,722,"            if ((lmDiag[j] == 0) && (nSing == solvedCols)) {
",4,3,1,4,9,0,0,0,0,11,48,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,723,"                nSing = j;
",4,0,0,0,0,0,0,0,0,5,10,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,725,"            if (nSing < solvedCols) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,726,"                work[j] = 0;
",0,0,1,1,2,0,0,0,0,5,12,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,729,"        if (nSing > 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,730,"            for (int j = nSing - 1; j >= 0; --j) {
",8,2,0,1,3,0,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,731,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,732,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,733,"                for (int i = j + 1; i < nSing; ++i) {
",10,2,0,1,3,0,0,0,0,13,37,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,734,"                    sum += weightedResidualJacobian[i][pj] * work[i];
",2,1,1,3,6,0,0,0,0,14,49,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,736,"                work[j] = (work[j] - sum) / lmDiag[j];
",2,2,1,4,8,0,0,0,0,17,38,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,741,"        for (int j = 0; j < lmDir.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,40,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,742,"            lmDir[permutation[j]] = work[j];
",0,0,1,3,6,0,0,0,0,11,32,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,744,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,794,"                    throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,
",4,0,0,0,1,0,0,2,0,6,95,11,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,803,"                rank = k;
",4,0,0,0,0,0,0,0,0,5,9,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,58,804,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,83,"        super(checker);
",2,0,0,1,2,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,84,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,90,"        return jacobianEvaluations;
",2,0,0,0,0,1,0,0,0,2,27,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,105,"            throw new DimensionMismatchException(weightedResidualJacobian.length, rows);
",6,0,0,1,2,0,0,2,0,8,76,7,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,130,"            throw new DimensionMismatchException(objective.length, rows);
",6,0,0,1,2,0,0,2,0,8,61,7,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,158,"        return FastMath.sqrt(getChiSquare() / rows);
",2,1,0,2,4,1,6,0,0,9,44,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,168,"        return cost * cost;
",4,1,0,0,0,1,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,182,"        updateJacobian();
",0,0,0,1,2,0,2,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,185,"        double[][] jTj = new double[cols][cols];
",2,0,1,4,8,0,0,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,186,"        for (int i = 0; i < cols; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,187,"            for (int j = i; j < cols; ++j) {
",10,1,0,1,3,0,0,0,0,12,32,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,188,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,189,"                for (int k = 0; k < rows; ++k) {
",8,1,0,1,3,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,190,"                    sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
",2,1,1,4,8,0,0,0,0,16,71,10,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,192,"                jTj[i][j] = sum;
",2,0,1,2,4,0,0,0,0,9,16,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,193,"                jTj[j][i] = sum;
",2,0,1,2,4,0,0,0,0,9,16,8,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,198,"        RealMatrix inverse =
",2,0,0,0,0,0,0,2,0,4,20,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,200,"        return inverse.getData();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,217,"        if (rows <= cols) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,218,"            throw new NumberIsTooSmallException(LocalizedFormats.NO_DEGREES_OF_FREEDOM,
",4,0,0,0,1,0,0,2,0,6,75,7,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,221,"        double[] errors = new double[cols];
",2,0,1,2,4,0,0,0,0,4,35,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,222,"        final double c = FastMath.sqrt(getChiSquare() / (rows - cols));
",6,2,0,3,6,1,6,0,0,15,63,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,223,"        double[][] covar = getCovariances();
",2,0,0,3,6,0,2,0,0,4,36,5,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,224,"        for (int i = 0; i < errors.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,41,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,225,"            errors[i] = FastMath.sqrt(covar[i][i]) * c;
",2,1,1,4,8,0,4,0,0,18,43,6,0.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,58,227,"        return errors;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,58,44,"        super(specific,
",2,0,0,0,1,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,58,47,"        dimension = expected;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,58,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,58,58,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);
",8,0,0,1,2,0,0,0,0,8,67,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,58,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/DimensionMismatchException,58,65,"        return dimension;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,58,42,"        this(null, max);
",2,0,0,1,2,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,58,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,58,54,"        super(specific, LocalizedFormats.MAX_COUNT_EXCEEDED, max, args);
",10,0,0,1,2,0,0,0,0,10,64,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,58,55,"        this.max = max;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,58,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,58,62,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,58,43,"        super(null, null, specific, general, args);
",6,0,0,1,2,0,0,0,0,7,43,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,58,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,58,58,"        super(cause, null, specific, general, args);
",8,0,0,1,2,0,0,0,0,9,44,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,58,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,58,68,"        super(null, specific, LocalizedFormats.ILLEGAL_STATE, args);
",8,0,0,1,2,0,0,0,0,9,60,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,58,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,58,80,"        super(cause, specific, LocalizedFormats.ILLEGAL_STATE, args);
",10,0,0,1,2,0,0,0,0,10,61,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,58,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,58,87,"        this(null, args);
",2,0,0,1,2,0,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,58,88,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,58,37,"        super(LocalizedFormats.EVALUATIONS, max);
",6,0,0,1,2,0,0,0,0,6,41,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,58,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,58,37,"        this(null);
",0,0,0,1,2,0,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,58,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,58,45,"        this(specific,
",2,0,0,0,1,0,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,58,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,58,57,"        super(specific,
",2,0,0,0,1,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/ConvergenceException,58,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,64,"                                      final double absoluteThreshold) {
",2,0,0,0,2,1,0,0,0,3,33,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,65,"        this.relativeThreshold = relativeThreshold;
",4,0,0,0,0,0,0,0,0,5,43,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,66,"        this.absoluteThreshold = absoluteThreshold;
",4,0,0,0,0,0,0,0,0,5,43,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/AbstractConvergenceChecker,58,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,53,"        super(relativeThreshold, absoluteThreshold);
",4,0,0,1,2,0,0,0,0,4,44,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/SimpleVectorialValueChecker,58,88,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,58,46,"        this(new DummyLocalizable(specifier), parts);
",4,0,0,2,4,0,0,2,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,58,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,58,57,"        super(specifier, parts);
",4,0,0,1,2,0,0,0,0,4,24,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,58,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,58,65,"        super(cause);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/optimization/OptimizationException,58,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,58,38,"        super(LocalizedFormats.CONVERGENCE_FAILED);
",4,0,0,1,2,0,0,0,0,4,43,5,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,58,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,58,51,"        this(new DummyLocalizable(pattern), arguments);
",4,0,0,2,4,0,0,2,0,6,47,4,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,58,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,58,62,"        super(pattern, arguments);
",4,0,0,1,2,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,58,63,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,58,70,"        super(cause);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,58,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,58,84,"        this(cause, new DummyLocalizable(pattern), arguments);
",6,0,0,2,4,0,0,2,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,58,85,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,58,96,"        super(cause, pattern, arguments);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/ConvergenceException,58,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,58,"    public MathException() {
",2,0,0,1,3,1,0,0,0,3,24,2,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,59,"        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;
",6,0,0,0,0,0,0,0,0,7,49,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,60,"        this.arguments = new Object[] { """" };
",2,0,0,2,4,0,0,2,0,6,37,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,61,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,73,"      this(new DummyLocalizable(pattern), arguments);
",4,0,0,2,4,0,0,2,0,6,47,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,74,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,84,"    public MathException(Localizable pattern, Object ... arguments) {
",6,0,0,1,3,1,0,4,0,11,65,2,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,85,"      this.pattern   = pattern;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,86,"      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();
",4,1,0,3,6,0,4,2,0,12,73,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,87,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,97,"        super(rootCause);
",2,0,0,1,2,0,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,98,"        this.pattern   = LocalizedFormats.SIMPLE_MESSAGE;
",6,0,0,0,0,0,0,0,0,7,49,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,99,"        this.arguments = new Object[] { (rootCause == null) ? """" : rootCause.getMessage() };
",4,1,0,4,8,0,4,2,0,13,84,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,100,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,115,"        this(rootCause, new DummyLocalizable(pattern), arguments);
",6,0,0,2,4,0,0,2,0,8,58,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,116,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,129,"      super(rootCause);
",2,0,0,1,2,0,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,130,"      this.pattern   = pattern;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,131,"      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();
",4,1,0,3,6,0,4,2,0,12,73,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,132,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,142,"        return pattern.getSourceString();
",0,0,0,1,2,1,4,0,0,4,33,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,147,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,152,"        return pattern;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,157,"        return arguments.clone();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,168,"        if (pattern != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,169,"            return new MessageFormat(pattern.getLocalizedString(locale), locale).format(arguments);
",2,0,0,3,6,1,10,2,0,14,87,7,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,171,"        return """";
",0,0,0,0,0,1,0,0,0,1,10,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,177,"        return getMessage(Locale.US);
",4,0,0,1,2,1,2,0,0,6,29,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,183,"        return getMessage(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,191,"        printStackTrace(System.err);
",4,0,0,1,2,0,2,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,192,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,201,"        synchronized (out) {
",2,0,0,1,3,0,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,202,"            PrintWriter pw = new PrintWriter(out, false);
",4,0,0,1,2,0,0,4,0,9,45,6,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,203,"            printStackTrace(pw);
",0,0,0,1,2,0,4,0,0,4,20,7,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,205,"            pw.flush();
",0,0,0,1,2,0,4,0,0,4,11,7,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,206,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/MathException,58,207,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,346,"        return sourceFormat;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,352,"            ResourceBundle bundle =
",2,0,0,0,0,0,0,2,0,4,23,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,354,"            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {
",0,0,0,5,11,0,12,0,0,12,68,7,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,356,"                return bundle.getString(toString());
",0,0,0,2,4,1,6,0,0,6,36,9,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,361,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,359,"        } catch (MissingResourceException mre) {
",2,0,0,1,4,0,0,2,0,4,40,6,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,365,"        return sourceFormat;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/util/ArgUtils,58,32,"    private ArgUtils() {}
",2,0,0,2,4,1,0,0,0,3,21,2,0.00000,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,53,"        return maximalCount;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,62,"        return count;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,73,"        for (int i = 0; i < value; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,74,"            incrementCount();
",0,0,0,1,2,0,2,0,0,2,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/Incrementor,58,85,"            throw new MaxCountExceededException(maximalCount);
",2,0,0,1,2,0,0,2,0,4,50,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,250,"    private FastMath() {
",2,0,0,1,3,1,0,0,0,3,20,2,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,251,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,263,"        if (d > -MathUtils.SAFE_MIN && d < MathUtils.SAFE_MIN){
",12,3,0,1,3,0,0,0,0,16,55,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,264,"            return d; // These are un-normalised - don't try to convert
",2,0,0,0,0,1,0,0,0,2,59,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,266,"        long xl = Double.doubleToLongBits(d);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,267,"        xl = xl & MASK_30BITS; // Drop low order bits
",6,1,0,0,0,0,0,0,0,8,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,268,"        return Double.longBitsToDouble(xl);
",0,0,0,1,2,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,285,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,286,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,289,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,290,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,293,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,294,"          return exp(-x)/2.0;
",2,1,0,1,2,1,2,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,297,"      double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,298,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,299,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,301,"      exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,303,"      double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,304,"      double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,306,"      double temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,307,"      double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,308,"      double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,311,"      double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,312,"      temp = recip * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,313,"      double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,314,"      double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,317,"      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,319,"      recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,322,"      temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,323,"      yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,324,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,325,"      temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,326,"      yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,327,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,329,"      double result = ya + yb;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,330,"      result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,331,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,339,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,340,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,341,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,344,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,345,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,348,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,349,"          return -exp(-x)/2.0;
",2,1,0,1,2,1,2,0,0,7,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,352,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,353,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,356,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,357,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,358,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,363,"      if (x > 0.25) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,364,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,365,"          exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,367,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,368,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,370,"          double temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,371,"          double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,372,"          double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,375,"          double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,376,"          temp = recip * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,377,"          double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,378,"          double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,381,"          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,383,"          recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,385,"          recipa = -recipa;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,386,"          recipb = -recipb;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,389,"          temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,390,"          yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,391,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,392,"          temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,393,"          yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,394,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,396,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,397,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,398,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,400,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,401,"          expm1(x, hiPrec);
",0,0,0,1,2,0,6,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,403,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,404,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,407,"          double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,408,"          double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,409,"          double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,410,"          double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,411,"          double temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,35,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,412,"          double ra = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,413,"          double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,415,"          temp = denom * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,416,"          double za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,417,"          double zb = denom - za;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,419,"          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,422,"          rb += yb*denomr;                        // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,423,"          rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,426,"          temp = ya + ra;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,427,"          yb += -(temp - ya - ra);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,428,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,429,"          temp = ya + rb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,430,"          yb += -(temp - ya - rb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,431,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,433,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,434,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,437,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,438,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,441,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,449,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,451,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,452,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,455,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,456,"          return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,459,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,460,"          return -1.0;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,463,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,464,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,467,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,468,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,469,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,473,"      if (x >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,474,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,476,"          exp(x*2.0, 0.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,24,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,478,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,479,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,482,"          double na = -1.0 + ya;
",4,1,0,0,0,0,0,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,483,"          double nb = -(na + 1.0 - ya);
",6,2,0,1,2,0,0,0,0,9,29,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,484,"          double temp = na + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,485,"          nb += -(temp - na - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,486,"          na = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,489,"          double da = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,490,"          double db = -(da - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,491,"          temp = da + yb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,492,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,493,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,495,"          temp = da * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,496,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,497,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,500,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,501,"          temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,502,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,503,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,506,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,509,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,511,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,513,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,514,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,516,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,518,"          expm1(x*2.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,520,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,521,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,524,"          double na = ya;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,525,"          double nb = yb;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,528,"          double da = 2.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,529,"          double db = -(da - 2.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,530,"          double temp = da + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,531,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,532,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,534,"          temp = da * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,535,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,536,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,539,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,540,"          temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,541,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,542,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,545,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,548,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,550,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,552,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,555,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,556,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,559,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,567,"        return FastMath.log(a + FastMath.sqrt(a * a - 1));
",6,3,0,2,4,1,8,0,0,17,50,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,576,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,577,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,578,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,579,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,583,"        if (a > 0.167) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,584,"            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);
",8,3,0,2,4,0,8,0,0,20,54,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,586,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,587,"            if (a > 0.097) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,588,"                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0 - a2 * (1.0 / 15.0 - a2 * (1.0 / 17.0) * 15.0 / 16.0) * 13.0 / 14.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);
",20,33,0,9,18,0,0,0,0,54,264,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,589,"            } else if (a > 0.036) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,590,"                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0 - a2 * (1.0 / 11.0 - a2 * (1.0 / 13.0) * 11.0 / 12.0) * 9.0 / 10.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);
",16,25,0,7,14,0,0,0,0,42,196,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,591,"            } else if (a > 0.0036) {
",2,1,0,1,4,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,592,"                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0 - a2 * (1 / 7.0 - a2 * (1 / 9.0) * 7.0 / 8.0) * 5.0 / 6.0) * 3.0 / 4.0) / 2.0);
",12,17,0,5,10,0,0,0,0,30,129,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,594,"                absAsinh = a * (1 - a2 * (1 / 3.0 - a2 * (1 / 5.0) * 3.0 / 4.0) / 2.0);
",8,9,0,3,6,0,0,0,0,18,71,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,598,"        return negative ? -absAsinh : absAsinh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,608,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,609,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,610,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,611,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,615,"        if (a > 0.15) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,616,"            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));
",6,4,0,3,6,0,4,0,0,15,49,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,618,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,619,"            if (a > 0.087) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,620,"                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0 + a2 * (1.0 / 15.0 + a2 * (1.0 / 17.0)))))))));
",20,25,0,9,18,0,0,0,0,46,175,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,621,"            } else if (a > 0.031) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,622,"                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0 + a2 * (1.0 / 11.0 + a2 * (1.0 / 13.0)))))));
",16,19,0,7,14,0,0,0,0,36,135,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,623,"            } else if (a > 0.003) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,624,"                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0 + a2 * (1.0 / 7.0 + a2 * (1.0 / 9.0)))));
",12,13,0,5,10,0,0,0,0,26,95,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,626,"                absAtanh = a * (1 + a2 * (1.0 / 3.0 + a2 * (1.0 / 5.0)));
",8,7,0,3,6,0,0,0,0,16,57,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,630,"        return negative ? -absAtanh : absAtanh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,640,"        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a
",6,2,0,3,6,2,0,0,0,9,87,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,649,"        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a
",6,2,0,3,6,2,0,0,0,9,91,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,657,"        return nextAfter(a, Double.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,665,"        return nextAfter(a, Float.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,45,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,673,"        return Math.random();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,720,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,721,"                    hiPrec[0] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,722,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,724,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,729,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,730,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,731,"                    hiPrec[0] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,732,"                    hiPrec[1] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,734,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,739,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,740,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,741,"                    hiPrec[0] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,742,"                    hiPrec[1] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,744,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,757,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,758,"                    hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,759,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,761,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,810,"            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;
",20,7,0,0,0,0,0,0,0,28,63,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,817,"            hiPrec[0] = tempA;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,818,"            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;
",16,6,1,1,2,0,0,0,0,25,58,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,829,"      return expm1(x, null);
",0,0,0,1,2,1,4,0,0,5,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,838,"        if (x != x || x == 0.0) { // NaN or zero
",6,3,0,1,3,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,839,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,842,"        if (x <= -1.0 || x >= 1.0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,845,"            double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,846,"            exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,847,"            if (x > 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,848,"                return -1.0 + hiPrec[0] + hiPrec[1];
",0,1,1,2,4,1,0,0,0,6,36,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,850,"                final double ra = -1.0 + hiPrec[0];
",2,1,1,1,2,1,0,0,0,7,35,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,851,"                double rb = -(ra + 1.0 - hiPrec[0]);
",4,2,1,2,4,0,0,0,0,9,36,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,852,"                rb += hiPrec[1];
",2,0,1,1,2,0,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,853,"                return ra + rb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,860,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,862,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,863,"            x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,864,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,868,"            int intFrac = (int) (x * 1024.0);
",4,1,0,2,4,0,0,0,0,5,33,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,869,"            double tempA = EXP_FRAC_TABLE_A[intFrac] - 1.0;
",2,1,1,1,2,0,0,0,0,7,47,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,870,"            double tempB = EXP_FRAC_TABLE_B[intFrac];
",2,0,1,1,2,0,0,0,0,6,41,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,872,"            double temp = tempA + tempB;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,873,"            tempB = -(temp - tempA - tempB);
",8,1,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,874,"            tempA = temp;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,876,"            temp = tempA * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,877,"            baseA = tempA + temp - temp;
",8,2,0,0,0,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,878,"            baseB = tempB + (tempA - baseA);
",8,2,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,880,"            epsilon = x - intFrac/1024.0;
",6,2,0,0,0,0,0,0,0,9,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,885,"        double zb = 0.008336750013465571;
",2,0,0,0,0,0,0,0,0,2,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,886,"        zb = zb * epsilon + 0.041666663879186654;
",6,2,0,0,0,0,0,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,887,"        zb = zb * epsilon + 0.16666666666745392;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,888,"        zb = zb * epsilon + 0.49999999999999994;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,889,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,890,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,892,"        double za = epsilon;
",4,0,0,0,0,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,893,"        double temp = za + zb;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,894,"        zb = -(temp - za - zb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,895,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,897,"        temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,898,"        temp = za + temp - temp;
",8,2,0,0,0,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,899,"        zb += za - temp;
",6,1,0,0,0,0,0,0,0,8,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,900,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,903,"        double ya = za * baseA;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,905,"        temp = ya + za * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,906,"        double yb = -(temp - ya - za * baseB);
",10,2,0,1,2,0,0,0,0,13,38,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,907,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,909,"        temp = ya + zb * baseA;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,910,"        yb += -(temp - ya - zb * baseA);
",10,2,0,1,2,0,0,0,0,14,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,911,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,913,"        temp = ya + zb * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,914,"        yb += -(temp - ya - zb*baseB);
",10,2,0,1,2,0,0,0,0,14,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,915,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,919,"        temp = ya + baseA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,920,"        yb += -(temp - baseA - ya);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,921,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,923,"        temp = ya + za;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,925,"        yb += -(temp - ya - za);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,926,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,928,"        temp = ya + baseB;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,930,"        yb += -(temp - ya - baseB);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,931,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,933,"        temp = ya + zb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,935,"        yb += -(temp - ya - zb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,936,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,938,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,940,"            double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,941,"            double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,942,"            double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,943,"            double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,944,"            temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,945,"            final double ra = ratio + temp - temp;
",8,2,0,0,0,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,946,"            double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,948,"            temp = denom * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,949,"            za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,950,"            zb = denom - za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,952,"            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,60,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,963,"            rb += yb * denomr;                      // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,964,"            rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,967,"            ya = -ra;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,968,"            yb = -rb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,971,"        if (hiPrecOut != null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,972,"            hiPrecOut[0] = ya;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,973,"            hiPrecOut[1] = yb;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,976,"        return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1026,"            final double a = d * 9.31322574615478515625E-10;
",4,1,0,0,0,1,0,0,0,6,48,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1027,"            split[0] = (d + a - d) * HEX_40000000;
",8,3,1,2,4,0,0,0,0,14,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1028,"            split[1] = d - split[0];
",2,1,1,2,4,0,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1099,"            in[0] = in[1];
",0,0,1,2,4,0,0,0,0,5,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1100,"            in[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1231,"        return log(x, null);
",0,0,0,1,2,1,4,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1241,"        if (x==0) { // Handle special case of +0/-0
",2,1,0,1,3,0,0,0,0,3,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1242,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1244,"        long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1247,"        if ((bits & 0x8000000000000000L) != 0 || x != x) {
",6,4,0,2,5,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1248,"            if (x != 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1249,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1250,"                    hiPrec[0] = Double.NaN;
",4,0,1,1,2,0,0,0,0,7,23,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1253,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1258,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1259,"            if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1260,"                hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1263,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1267,"        int exp = (int)(bits >> 52)-1023;
",4,2,0,2,4,0,0,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1269,"        if ((bits & 0x7ff0000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1271,"            if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1273,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1274,"                    hiPrec[0] = Double.NEGATIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1277,"                return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1281,"            bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1282,"            while ( (bits & 0x0010000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,44,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1283,"                exp--;
",2,0,0,0,0,0,0,0,0,3,6,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1284,"                bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1289,"        if (exp == -1 || exp == 0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1290,"            if (x < 1.01 && x > 0.99 && hiPrec == null) {
",6,5,0,1,3,0,0,0,0,11,45,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1295,"                double xa = x - 1.0;
",4,1,0,0,0,0,0,0,0,5,20,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1296,"                double xb = xa - x + 1.0;
",6,2,0,0,0,0,0,0,0,8,25,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1297,"                double tmp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1298,"                double aa = xa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,27,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1299,"                double ab = xa - aa;
",6,1,0,0,0,0,0,0,0,7,20,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1300,"                xa = aa;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1301,"                xb = ab;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1303,"                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];
",6,1,1,2,4,0,0,0,0,9,53,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1304,"                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];
",6,1,1,2,4,0,0,0,0,9,53,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1306,"                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,53,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1308,"                    aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1309,"                    ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1311,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1312,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1313,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1316,"                    aa = ya + LN_QUICK_COEF[i][0];
",4,1,1,2,4,0,0,0,0,10,30,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1317,"                    ab = yb + LN_QUICK_COEF[i][1];
",4,1,1,2,4,0,0,0,0,10,30,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1319,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1320,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1321,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1325,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1326,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1328,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1329,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1330,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1332,"                return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1337,"        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];
",4,2,1,5,10,0,0,0,0,8,66,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1348,"        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));
",8,4,0,3,6,0,0,0,0,12,89,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1350,"        double lnza = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1351,"        double lnzb = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1353,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1355,"            double tmp = epsilon * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1356,"            double aa = epsilon + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1357,"            double ab = epsilon - aa;
",6,1,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1358,"            double xa = aa;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1359,"            double xb = ab;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1362,"            double numer = bits & 0x3ffffffffffL;
",4,1,0,0,0,0,0,0,0,5,37,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1363,"            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);
",6,2,0,1,2,0,0,0,0,8,59,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1364,"            aa = numer - xa*denom - xb * denom;
",12,4,0,0,0,0,0,0,0,17,35,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1365,"            xb += aa / denom;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1368,"            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];
",6,1,1,2,4,0,0,0,0,9,57,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1369,"            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];
",6,1,1,2,4,0,0,0,0,9,57,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1371,"            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,55,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1373,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1374,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1376,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1377,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1378,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1381,"                aa = ya + LN_HI_PREC_COEF[i][0];
",4,1,1,2,4,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1382,"                ab = yb + LN_HI_PREC_COEF[i][1];
",4,1,1,2,4,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1384,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1385,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1386,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1390,"            aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1391,"            ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1399,"            lnza = aa + ab;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1400,"            lnzb = -(lnza - aa - ab);
",8,1,0,1,2,0,0,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1401,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1404,"            lnza = -0.16624882440418567;
",2,0,0,0,0,0,0,0,0,4,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1405,"            lnza = lnza * epsilon + 0.19999954120254515;
",6,2,0,0,0,0,0,0,0,9,44,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1406,"            lnza = lnza * epsilon + -0.2499999997677497;
",6,2,0,0,0,0,0,0,0,10,44,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1407,"            lnza = lnza * epsilon + 0.3333333333332802;
",6,2,0,0,0,0,0,0,0,9,43,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1408,"            lnza = lnza * epsilon + -0.5;
",6,2,0,0,0,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1409,"            lnza = lnza * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1410,"            lnza = lnza * epsilon;
",6,1,0,0,0,0,0,0,0,8,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1427,"        double a = LN_2_A*exp;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1428,"        double b = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1429,"        double c = a+lnm[0];
",4,1,1,1,2,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1430,"        double d = -(c-a-lnm[0]);
",6,1,1,2,4,0,0,0,0,10,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1431,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1432,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1434,"        c = a + lnza;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1435,"        d = -(c - a - lnza);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1436,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1437,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1439,"        c = a + LN_2_B*exp;
",8,2,0,0,0,0,0,0,0,11,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1440,"        d = -(c - a - LN_2_B*exp);
",10,2,0,1,2,0,0,0,0,14,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1441,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1442,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1444,"        c = a + lnm[1];
",4,1,1,1,2,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1445,"        d = -(c - a - lnm[1]);
",6,1,1,2,4,0,0,0,0,11,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1446,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1447,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1449,"        c = a + lnzb;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1450,"        d = -(c - a - lnzb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1451,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1452,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1454,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1455,"            hiPrec[0] = a;
",2,0,1,1,2,0,0,0,0,5,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1456,"            hiPrec[1] = b;
",2,0,1,1,2,0,0,0,0,5,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1459,"        return a + b;
",4,1,0,0,0,1,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1467,"        double xpa = 1.0 + x;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1468,"        double xpb = -(xpa - 1.0 - x);
",6,1,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1470,"        if (x == -1) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1471,"            return x/0.0;   // -Infinity
",2,1,0,0,0,1,0,0,0,3,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1474,"        if (x > 0 && 1/x == 0) { // x = Infinity
",4,4,0,1,3,0,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1475,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1478,"        if (x>1e-6 || x<-1e-6) {
",4,3,0,1,3,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1479,"            double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1481,"            final double lores = log(xpa, hiPrec);
",2,0,0,1,2,1,6,0,0,9,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1482,"            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1483,"                return lores;
",2,0,0,0,0,1,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1488,"            double fx1 = xpb/xpa;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1490,"            double epsilon = 0.5 * fx1 + 1.0;
",4,2,0,0,0,0,0,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1491,"            epsilon = epsilon * fx1;
",6,1,0,0,0,0,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1493,"            return epsilon + hiPrec[1] + hiPrec[0];
",2,1,1,2,4,1,0,0,0,7,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1497,"        double y = x * 0.333333333333333 - 0.5;
",4,2,0,0,0,0,0,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1498,"        y = y * x + 1.0;
",6,2,0,0,0,0,0,0,0,9,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1499,"        y = y * x;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1501,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1509,"        final double hiPrec[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1511,"        final double lores = log(x, hiPrec);
",2,0,0,1,2,1,6,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1512,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1513,"            return lores;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1516,"        final double tmp = hiPrec[0] * HEX_40000000;
",4,1,1,1,2,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1517,"        final double lna = hiPrec[0] + tmp - tmp;
",6,2,1,1,2,1,0,0,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1518,"        final double lnb = hiPrec[0] - lna + hiPrec[1];
",4,2,1,2,4,1,0,0,0,11,47,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1520,"        final double rln10a = 0.4342944622039795;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1521,"        final double rln10b = 1.9699272335463627E-8;
",2,0,0,0,0,1,0,0,0,3,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1523,"        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;
",16,7,0,0,0,1,0,0,0,23,65,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1534,"        final double lns[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,35,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1536,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1537,"            return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1540,"        if (x != x) { // X is NaN
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1541,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1545,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1546,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1547,"            if ((bits & 0x8000000000000000L) != 0) {
",2,2,0,2,5,0,0,0,0,4,40,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1549,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1551,"                if (y < 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1552,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1555,"                if (y < 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1556,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1559,"                if (y > 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1560,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1564,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1565,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1567,"            if (y > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1568,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1571,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1574,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1575,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1576,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1578,"            if (y < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1579,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1581,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1585,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1586,"            if (x * x == 1.0)
",4,2,0,1,2,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1587,"              return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1589,"            if (x * x > 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1590,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1592,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1596,"        if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1597,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1598,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1601,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1602,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1603,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1604,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1607,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1610,"            if (y > 0)  {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1611,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1612,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1613,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1616,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1620,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1622,"            if (x * x == 1.0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1623,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1626,"            if (x * x < 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1627,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1629,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1634,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1636,"            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
",8,3,0,1,3,0,0,0,0,12,46,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1637,"                return pow(-x, y);
",2,0,0,1,2,1,4,0,0,7,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1640,"            if (y == (long) y) {
",4,1,0,2,5,0,0,0,0,5,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1642,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
",6,2,0,4,8,1,8,0,0,19,53,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1644,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1651,"        if (y < 8e298 && y > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1652,"            double tmp1 = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1653,"            ya = y + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,11,21,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1654,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1655,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1656,"            double tmp1 = y * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,45,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1657,"            double tmp2 = tmp1 * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,48,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1658,"            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
",12,3,0,1,2,0,0,0,0,16,56,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1659,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1663,"        final double lores = log(x, lns);
",2,0,0,1,2,1,6,0,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1664,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1665,"            return lores;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1668,"        double lna = lns[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1669,"        double lnb = lns[1];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1672,"        double tmp1 = lna * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1673,"        double tmp2 = lna + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1674,"        lnb += lna - tmp2;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1675,"        lna = tmp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1678,"        final double aa = lna * ya;
",6,1,0,0,0,1,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1679,"        final double ab = lna * yb + lnb * ya + lnb * yb;
",14,5,0,0,0,1,0,0,0,20,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1681,"        lna = aa+ab;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1682,"        lnb = -(lna - aa - ab);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1684,"        double z = 1.0 / 120.0;
",2,1,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1685,"        z = z * lnb + (1.0 / 24.0);
",6,3,0,1,2,0,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1686,"        z = z * lnb + (1.0 / 6.0);
",6,3,0,1,2,0,0,0,0,10,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1687,"        z = z * lnb + 0.5;
",6,2,0,0,0,0,0,0,0,9,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1688,"        z = z * lnb + 1.0;
",6,2,0,0,0,0,0,0,0,9,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1689,"        z = z * lnb;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1691,"        final double result = exp(lna, z, null);
",2,0,0,1,2,1,6,0,0,10,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1693,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1948,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1950,"        double p = 2.7553817452272217E-6;
",2,0,0,0,0,0,0,0,0,2,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1951,"        p = p * x2 + -1.9841269659586505E-4;
",6,2,0,0,0,0,0,0,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1952,"        p = p * x2 + 0.008333333333329196;
",6,2,0,0,0,0,0,0,0,9,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1953,"        p = p * x2 + -0.16666666666666666;
",6,2,0,0,0,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1956,"        p = p * x2 * x;
",8,1,0,0,0,0,0,0,0,10,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1958,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1968,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1970,"        double p = 2.479773539153719E-5;
",2,0,0,0,0,0,0,0,0,2,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1971,"        p = p * x2 + -0.0013888888689039883;
",6,2,0,0,0,0,0,0,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1972,"        p = p * x2 + 0.041666666666621166;
",6,2,0,0,0,0,0,0,0,9,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1973,"        p = p * x2 + -0.49999999999999994;
",6,2,0,0,0,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1974,"        p *= x2;
",4,0,0,0,0,0,0,0,0,5,8,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1976,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1987,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1988,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1991,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1992,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1993,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1994,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1997,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1998,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,1999,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2000,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2003,"        final double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,1,0,0,0,8,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2004,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2005,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2006,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2032,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2033,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2035,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2036,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2037,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2038,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2039,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2041,"        t = costA * sinEpsA;
",6,1,0,0,0,0,0,0,0,8,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2042,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2043,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2044,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2045,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2047,"        b = b + sintA * cosEpsB + costA * sinEpsB;
",12,4,0,0,0,0,0,0,0,17,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2062,"        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;
",18,6,0,0,0,0,0,0,0,25,68,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2089,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2090,"            t = ((costA + costB) * (cosEpsA + cosEpsB) -
",10,5,0,2,5,0,0,0,0,16,44,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2092,"            c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2093,"            d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2094,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2095,"            b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2098,"        result = a + b;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2100,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2111,"        final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2112,"        final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2114,"        final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2115,"        double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2116,"        b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2118,"        return sinQ(a, b);
",0,0,0,1,2,1,6,0,0,6,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2131,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2132,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2135,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2136,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2137,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2138,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2141,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2142,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2143,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2144,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2147,"        double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2148,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2149,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2150,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2175,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2176,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2179,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2180,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2181,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2182,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2183,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2185,"        t = costA*sinEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2186,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2187,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2188,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2189,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2191,"        b = b + sintA*cosEpsB + costA*sinEpsB;
",12,4,0,0,0,0,0,0,0,17,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2192,"        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;
",18,6,0,0,0,0,0,0,0,25,62,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2194,"        double sina = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2195,"        double sinb = -(sina - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2199,"        a = b = c = d = 0.0;
",8,0,0,0,0,0,0,0,0,12,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2201,"        t = costA*cosEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2202,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2203,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2204,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2205,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2207,"        t = -sintA*sinEpsA;
",6,1,0,0,0,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2208,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2209,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2210,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2211,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2213,"        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;
",16,6,0,0,0,0,0,0,0,23,54,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2214,"        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);
",16,6,0,1,2,0,0,0,0,23,56,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2216,"        double cosa = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2217,"        double cosb = -(cosa - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2219,"        if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2221,"            tmp = cosa; cosa = sina; sina = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2222,"            tmp = cosb; cosb = sinb; sinb = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2236,"        double est = sina/cosa;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2239,"        temp = est * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2240,"        double esta = (est + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2241,"        double estb =  est - esta;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2243,"        temp = cosa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2244,"        double cosaa = (cosa + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2245,"        double cosab =  cosa - cosaa;
",6,1,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2248,"        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding
",22,9,0,1,2,0,0,0,0,31,114,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2249,"        err += sinb/cosa;                     // Change in est due to sinb
",6,1,0,0,0,0,0,0,0,8,66,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2250,"        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb
",10,3,0,0,0,0,0,0,0,15,66,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2252,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2255,"            double xbadj = xb + est*est*xb;
",10,2,0,0,0,0,0,0,0,12,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2256,"            if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2257,"                xbadj = -xbadj;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2260,"            err += xbadj;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2263,"        return est+err;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2280,"        long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2281,"        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2284,"        inbits &= 0x000fffffffffffffL;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2285,"        inbits |= 0x0010000000000000L;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2288,"        exponent++;
",2,0,0,0,0,0,0,0,0,3,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2289,"        inbits <<= 11;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2295,"        int idx = exponent >> 6;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2296,"        int shift = exponent - (idx << 6);
",6,2,0,1,2,0,0,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2298,"        if (shift != 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2299,"            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);
",8,3,1,3,6,0,0,0,0,14,53,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2300,"            shpi0 |= RECIP_2PI[idx] >>> (64-shift);
",4,2,1,2,4,0,0,0,0,11,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2301,"            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));
",8,5,1,5,10,0,0,0,0,20,70,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2302,"            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));
",10,6,1,5,10,0,0,0,0,21,72,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2304,"            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];
",6,2,1,2,4,0,0,0,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2305,"            shpiA = RECIP_2PI[idx];
",2,0,1,1,2,0,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2306,"            shpiB = RECIP_2PI[idx+1];
",4,1,1,1,2,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2310,"        long a = inbits >>> 32;
",4,1,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2311,"        long b = inbits & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2313,"        long c = shpiA >>> 32;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2314,"        long d = shpiA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2316,"        long ac = a * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2317,"        long bd = b * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2318,"        long bc = b * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2319,"        long ad = a * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2321,"        long prodB = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2322,"        long prodA = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2324,"        boolean bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,47,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2325,"        boolean bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2326,"        boolean bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2329,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2331,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2334,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2335,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2337,"        prodB = prodB + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2338,"        prodA = prodA + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,28,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2340,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2343,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2345,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2349,"        c = shpiB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2350,"        d = shpiB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2351,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2352,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2353,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2356,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2358,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2359,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2360,"        prodB += ac;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2361,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2363,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2365,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2369,"        c = shpi0 >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2370,"        d = shpi0 & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2372,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2373,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2374,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2376,"        prodA += bd + ((bc + ad) << 32);
",8,3,0,2,4,0,0,0,0,12,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2388,"        int intPart = (int)(prodA >>> 62);
",4,1,0,2,4,0,0,0,0,5,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2391,"        prodA <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2392,"        prodA |= prodB >>> 62;
",4,1,0,0,0,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2393,"        prodB <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2396,"        a = prodA >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2397,"        b = prodA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2399,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2400,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2402,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2403,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2404,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2405,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2407,"        long prod2B = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2408,"        long prod2A = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2410,"        bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2411,"        bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2412,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2415,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2417,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2420,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2421,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2423,"        prod2B = prod2B + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2424,"        prod2A = prod2A + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2426,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2429,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2431,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2435,"        c = PI_O_4_BITS[1] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2436,"        d = PI_O_4_BITS[1] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2437,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2438,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2439,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2442,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2444,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2445,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2446,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2447,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2449,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2451,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2455,"        a = prodB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2456,"        b = prodB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2457,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2458,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2459,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2460,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2461,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2464,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2466,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2467,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2468,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2469,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2471,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2473,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2477,"        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits
",6,2,0,1,2,0,0,0,0,8,68,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2478,"        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits
",10,5,0,4,8,0,0,0,0,15,102,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2480,"        double sumA = tmpA + tmpB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2481,"        double sumB = -(sumA - tmpA - tmpB);
",8,1,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2484,"        result[0] = intPart;
",2,0,1,1,2,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2485,"        result[1] = sumA * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2486,"        result[2] = sumB * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2487,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2495,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2496,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2498,"        double xb = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2501,"        xa = x;
",4,0,0,0,0,0,0,0,0,5,7,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2502,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2503,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2504,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2508,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2509,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2510,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2511,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2513,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2516,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2517,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2521,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2525,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2526,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2527,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2528,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2529,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2530,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2535,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2541,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2542,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2543,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2545,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2546,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2547,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2548,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2550,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2551,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2552,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2553,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2555,"                if (remA > 0.0)
",2,1,0,1,2,0,0,0,0,3,15,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2556,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2561,"                k--;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2562,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2563,"            quadrant = k & 3;
",4,1,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2564,"            xa = remA;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2565,"            xb = remB;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2568,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2569,"            quadrant ^= 2;  // Flip bit 1
",2,0,0,0,0,0,0,0,0,3,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2572,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2574,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2576,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2578,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2580,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2582,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2592,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2595,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2596,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2597,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2600,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2601,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2605,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2606,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2610,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2611,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2612,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2613,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2614,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2615,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2620,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2626,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2627,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2628,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2630,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2631,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2632,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2633,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2635,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2636,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2637,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2638,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2640,"                if (remA > 0.0)
",2,1,0,1,2,0,0,0,0,3,15,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2641,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2646,"                k--;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2647,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2648,"            quadrant = k & 3;
",4,1,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2649,"            xa = remA;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2650,"            xb = remB;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2656,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2658,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2660,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2662,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2664,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2666,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2676,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2677,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2680,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2681,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2682,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2683,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2687,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2688,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2689,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2690,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2692,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2695,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2696,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2700,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2701,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2705,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2706,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2707,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2708,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2709,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2710,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2715,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2721,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2722,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2723,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2725,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2726,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2727,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2728,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2730,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2731,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2732,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2733,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2735,"                if (remA > 0.0)
",2,1,0,1,2,0,0,0,0,3,15,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2736,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2741,"                k--;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2742,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2743,"            quadrant = k & 3;
",4,1,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2744,"            xa = remA;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2745,"            xb = remB;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2748,"        if (xa > 1.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2750,"            final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2751,"            final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2753,"            final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2754,"            double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2755,"            b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2757,"            xa = a + b;
",6,1,0,0,0,0,0,0,0,8,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2758,"            xb = -(xa - a - b);
",8,1,0,1,2,0,0,0,0,11,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2759,"            quadrant ^= 1;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2760,"            negative ^= true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2764,"        if ((quadrant & 1) == 0) {
",2,2,0,2,5,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2765,"            result = tanQ(xa, xb, false);
",2,0,0,1,2,0,6,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2767,"            result = -tanQ(xa, xb, true);
",2,0,0,1,2,0,6,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2770,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2771,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2774,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2783,"        return atan(x, 0.0, false);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2793,"        boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2796,"        if (xa == 0.0) { // Matches +/- 0.0; return correct sign
",2,1,0,1,3,1,0,0,0,3,56,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2797,"            return leftPlane ? copySign(Math.PI, xa) : xa;
",8,0,0,1,2,1,4,0,0,12,46,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2800,"        if (xa < 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2802,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2803,"            xb = -xb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2804,"            negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2807,"        if (xa > 1.633123935319537E16) { // Very large input
",2,1,0,1,3,0,0,0,0,3,52,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2808,"            return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);
",12,3,0,3,6,1,0,0,0,16,61,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2812,"        if (xa < 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2813,"            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);
",8,4,0,4,8,0,0,0,0,14,65,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2815,"            double temp = 1.0/xa;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2816,"            idx = (int) (-((-1.7168146928204136 * temp * temp + 8.0) * temp) + 13.07);
",8,4,0,4,8,0,0,0,0,15,74,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2818,"        double epsA = xa - TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,40,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2819,"        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);
",6,2,1,2,4,0,0,0,0,13,50,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2820,"        epsB += xb - TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2822,"        double temp = epsA + epsB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2823,"        epsB = -(temp - epsA - epsB);
",8,1,0,1,2,0,0,0,0,11,29,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2824,"        epsA = temp;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2827,"        temp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2828,"        double ya = xa + temp - temp;
",8,2,0,0,0,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2829,"        double yb = xb + xa - ya;
",8,2,0,0,0,0,0,0,0,10,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2830,"        xa = ya;
",4,0,0,0,0,0,0,0,0,5,8,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2831,"        xb += yb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2834,"        if (idx == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2837,"            double denom = 1.0 / (1.0 + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
",6,5,1,5,10,0,0,0,0,19,87,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2839,"            ya = epsA * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2840,"            yb = epsB * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2841,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2842,"            double temp2 = xa * TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,41,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2843,"            double za = 1.0 + temp2;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2844,"            double zb = -(za - 1.0 - temp2);
",6,1,0,1,2,0,0,0,0,8,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2845,"            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];
",6,3,1,2,4,0,0,0,0,18,62,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2846,"            temp = za + temp2;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2847,"            zb += -(temp - za - temp2);
",8,1,0,1,2,0,0,0,0,11,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2848,"            za = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2850,"            zb += xb * TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2851,"            ya = epsA / za;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2853,"            temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2854,"            final double yaa = (ya + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2855,"            final double yab = ya - yaa;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2857,"            temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2858,"            final double zaa = (za + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2859,"            final double zab = za - zaa;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2862,"            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;
",22,9,0,1,2,0,0,0,0,32,65,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2864,"            yb += -epsA * zb / za / za;
",10,3,0,0,0,0,0,0,0,15,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2865,"            yb += epsB / za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2869,"        epsA = ya;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2870,"        epsB = yb;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2873,"        double epsA2 = epsA*epsA;
",6,1,0,0,0,0,0,0,0,7,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2884,"        yb = 0.07490822288864472;
",2,0,0,0,0,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2885,"        yb = yb * epsA2 + -0.09088450866185192;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2886,"        yb = yb * epsA2 + 0.11111095942313305;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2887,"        yb = yb * epsA2 + -0.1428571423679182;
",6,2,0,0,0,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2888,"        yb = yb * epsA2 + 0.19999999999923582;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2889,"        yb = yb * epsA2 + -0.33333333333333287;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2890,"        yb = yb * epsA2 * epsA;
",8,1,0,0,0,0,0,0,0,10,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2893,"        ya = epsA;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2895,"        temp = ya + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2896,"        yb = -(temp - ya - yb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2897,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2900,"        yb += epsB / (1.0 + epsA * epsA);
",8,3,0,1,2,0,0,0,0,12,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2906,"        double za = EIGHTHS[idx] + ya;
",4,1,1,1,2,0,0,0,0,9,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2907,"        double zb = -(za - EIGHTHS[idx] - ya);
",6,1,1,2,4,0,0,0,0,12,38,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2908,"        temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2909,"        zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2910,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2912,"        result = za + zb;
",6,1,0,0,0,0,0,0,0,8,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2913,"        resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,11,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2915,"        if (leftPlane) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2917,"            final double pia = 1.5707963267948966*2.0;
",2,1,0,0,0,1,0,0,0,4,42,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2918,"            final double pib = 6.123233995736766E-17*2.0;
",2,1,0,0,0,1,0,0,0,4,45,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2920,"            za = pia - result;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2921,"            zb = -(za - pia + result);
",8,2,0,1,2,0,0,0,0,12,26,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2922,"            zb += pib - resultb;
",6,1,0,0,0,0,0,0,0,8,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2924,"            result = za + zb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2925,"            resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2929,"        if (negate ^ leftPlane) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2930,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2933,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2943,"        if (x !=x || y != y) {
",8,3,0,1,3,0,0,0,0,11,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2944,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2947,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2948,"            double result = x*y;
",6,1,0,0,0,0,0,0,0,7,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2949,"            double invx = 1.0/x;
",4,1,0,0,0,0,0,0,0,5,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2950,"            double invy = 1.0/y;
",4,1,0,0,0,0,0,0,0,5,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2952,"            if (invx == 0.0) { // X is infinite
",2,1,0,1,3,0,0,0,0,3,35,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2953,"                if (x > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2954,"                    return y; // return +/- 0.0
",2,0,0,0,0,2,0,0,0,2,27,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2956,"                    return copySign(Math.PI, y);
",4,0,0,1,2,1,4,0,0,8,28,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2960,"            if (x < 0.0 || invx < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2961,"                if (y < 0.0 || invy < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2962,"                    return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2964,"                    return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2967,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2973,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2974,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2975,"                return Math.PI/4.0;
",4,1,0,0,0,1,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2978,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2979,"                return Math.PI*3.0/4.0;
",4,2,0,0,0,1,0,0,0,6,23,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2982,"            return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2985,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2986,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2987,"                return -Math.PI/4.0;
",4,1,0,0,0,1,0,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2990,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2991,"                return -Math.PI*3.0/4.0;
",4,2,0,0,0,1,0,0,0,7,24,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2994,"            return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2997,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2998,"            if (y > 0.0 || 1/y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,2999,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3002,"            if (y < 0.0 || 1/y < 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3003,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3007,"        if (x == Double.NEGATIVE_INFINITY)
",6,1,0,1,2,0,0,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3009,"            if (y > 0.0 || 1/y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3010,"                return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3013,"            if (y < 0.0 || 1/y < 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3014,"                return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3020,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3021,"            if (y > 0.0 || 1/y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3022,"                return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3025,"            if (y < 0.0 || 1/y < 0.0) {
",4,4,0,1,3,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3026,"                return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3031,"        final double r = y/x;
",6,1,0,0,0,1,0,0,0,8,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3032,"        if (Double.isInfinite(r)) { // bypass calculations that can create NaN
",0,0,0,2,5,0,6,0,0,6,70,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3033,"            return atan(r, 0, x < 0);
",2,1,0,1,2,1,4,0,0,7,25,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3036,"        double ra = doubleHighPart(r);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3037,"        double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3040,"        final double xa = doubleHighPart(x);
",2,0,0,1,2,1,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3041,"        final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3043,"        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
",22,9,0,1,2,0,0,0,0,32,54,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3045,"        double temp = ra + rb;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3046,"        rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3047,"        ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3049,"        if (ra == 0 && (y < 0)) { // Fix up the sign so atan works correctly
",4,3,0,2,5,0,0,0,0,7,68,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3050,"            ra = -0.0;
",2,0,0,0,0,0,0,0,0,4,10,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3054,"        double result = atan(ra, rb, x < 0);
",4,1,0,1,2,0,6,0,0,11,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3056,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3064,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3065,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3068,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3069,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3072,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3073,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3076,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3077,"          return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3080,"      if (x == 0.0) { // Matches +/- 0.0; return correct sign
",2,1,0,1,3,1,0,0,0,3,55,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3081,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3087,"      double temp = x * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3088,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3089,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3092,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3093,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3096,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3097,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3099,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3100,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3102,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3103,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3104,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3108,"      y = sqrt(za);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3109,"      temp = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3110,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3111,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3114,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3117,"      double dx = zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3120,"      double r = x/y;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3121,"      temp = r * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3122,"      double ra = r + temp - temp;
",8,2,0,0,0,0,0,0,0,10,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3123,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3125,"      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3126,"      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
",10,3,0,0,0,0,0,0,0,15,65,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3128,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3129,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3130,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3132,"      return atan(ra, rb, false);
",0,0,0,1,2,1,6,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3140,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3141,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3144,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3145,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3148,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3149,"          return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3152,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3153,"          return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3156,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3157,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3163,"      double temp = x * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3164,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3165,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3168,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3169,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3172,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3173,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3175,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3176,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3178,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3179,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3180,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3183,"      double y = sqrt(za);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3184,"      temp = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3185,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3186,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3189,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3192,"      yb += zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3193,"      y = ya+yb;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3194,"      yb = -(y - ya - yb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3197,"      double r = y/x;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3200,"      if (Double.isInfinite(r)) { // x is effectively zero
",0,0,0,2,5,0,6,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3201,"          return Math.PI/2; // so return the appropriate value
",4,1,0,0,0,2,0,0,0,5,52,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3204,"      double ra = doubleHighPart(r);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3205,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3207,"      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3208,"      rb += yb / x;  // Add in effect additional bits of sqrt.
",6,1,0,0,0,0,0,0,0,8,56,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3210,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3211,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3212,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3214,"      return atan(ra, rb, x<0);
",2,1,0,1,2,1,6,0,0,9,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3223,"      long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3224,"      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3225,"      boolean subnormal = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3227,"      if (exponent == -1023) {
",2,1,0,1,3,0,0,0,0,4,24,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3228,"          if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3229,"              return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3233,"          subnormal = true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3234,"          x *= 1.8014398509481984E16;  // 2^54
",2,0,0,0,0,0,0,0,0,3,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3235,"          inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3236,"          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,8,49,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3239,"      if (exponent == 1024) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3241,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3245,"      int exp3 = exponent / 3;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3248,"      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |
",4,2,0,1,3,0,4,0,0,10,68,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3252,"      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);
",4,2,0,2,4,1,4,0,0,11,98,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3255,"      double est = -0.010714690733195933;
",2,0,0,0,0,0,0,0,0,3,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3256,"      est = est * mant + 0.0875862700108075;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3257,"      est = est * mant + -0.3058015757857271;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3258,"      est = est * mant + 0.7249995199969751;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3259,"      est = est * mant + 0.5039018405998233;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3261,"      est *= CBRTTWO[exponent % 3 + 2];
",4,2,1,1,2,0,0,0,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3266,"      final double xs = x / (p2*p2*p2);
",10,2,0,1,2,1,0,0,0,13,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3267,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3268,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3271,"      double temp = est * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3272,"      double ya = est + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3273,"      double yb = est - ya;
",6,1,0,0,0,0,0,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3275,"      double za = ya * ya;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3276,"      double zb = ya * yb * 2.0 + yb * yb;
",10,3,0,0,0,0,0,0,0,13,36,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3277,"      temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3278,"      double temp2 = za + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3279,"      zb += za - temp2;
",6,1,0,0,0,0,0,0,0,8,17,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3280,"      za = temp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3282,"      zb = za * yb + ya * zb + zb * yb;
",14,5,0,0,0,0,0,0,0,20,33,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3283,"      za = za * ya;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3285,"      double na = xs - za;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3286,"      double nb = -(na - xs + za);
",8,2,0,1,2,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3287,"      nb -= zb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3289,"      est += (na+nb)/(3*est*est);
",10,3,0,2,4,0,0,0,0,14,27,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3292,"      est *= p2;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3294,"      if (subnormal) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3295,"          est *= 3.814697265625E-6;  // 2^-18
",2,0,0,0,0,0,0,0,0,3,35,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3298,"      return est;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3308,"        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign
",2,2,0,2,5,1,6,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3309,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3313,"        final double facta = 0.01745329052209854;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3314,"        final double factb = 1.997844754509471E-9;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3316,"        double xa = doubleHighPart(x);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3317,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3319,"        double result = xb * factb + xb * facta + xa * factb + xa * facta;
",18,7,0,0,0,0,0,0,0,25,66,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3320,"        if (result == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3321,"            result = result * x; // ensure correct sign if calculation underflows
",6,1,0,0,0,0,0,0,0,8,69,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3323,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3333,"        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign
",2,2,0,2,5,1,6,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3334,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3338,"        final double facta = 57.2957763671875;
",2,0,0,0,0,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3339,"        final double factb = 3.145894820876798E-6;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3341,"        double xa = doubleHighPart(x);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3342,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3344,"        return xb * factb + xb * facta + xa * factb + xa * facta;
",16,7,0,0,0,1,0,0,0,23,57,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3353,"        return (x < 0) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3362,"        return (x < 0l) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3371,"        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,64,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3389,"        if (Double.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3390,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3392,"        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,72,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3401,"        if (Float.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3402,"            return Float.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,31,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3404,"        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,66,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3416,"        if ((n > -1023) && (n < 1024)) {
",4,3,0,3,7,0,0,0,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3417,"            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
",4,3,0,4,8,1,4,0,0,11,62,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3421,"        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
",2,2,0,4,9,0,12,0,0,16,58,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3422,"            return d;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3424,"        if (n < -2098) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3425,"            return (d > 0) ? 0.0 : -0.0;
",2,1,0,1,2,1,0,0,0,4,28,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3427,"        if (n > 2097) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3428,"            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,69,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3432,"        final long bits = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3433,"        final long sign = bits & 0x8000000000000000L;
",4,1,0,0,0,1,0,0,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3434,"        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;
",4,2,0,3,6,0,0,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3435,"        long mantissa   = bits & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,5,45,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3438,"        int scaledExponent = exponent + n;
",6,1,0,0,0,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3440,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3442,"            if (scaledExponent > 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3444,"                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3445,"            } else if (scaledExponent > -53) {
",2,1,0,1,4,0,0,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3449,"                mantissa = mantissa | (1L << 52);
",4,2,0,1,2,0,0,0,0,7,33,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3452,"                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
",6,2,0,2,4,1,0,0,0,10,73,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3453,"                mantissa = mantissa >>> (1 - scaledExponent);
",6,2,0,1,2,0,0,0,0,9,45,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3454,"                if (mostSignificantLostBit != 0) {
",2,1,0,1,3,0,0,0,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3456,"                    mantissa++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3458,"                return Double.longBitsToDouble(sign | mantissa);
",4,1,0,1,2,1,4,0,0,9,48,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3462,"                return (sign == 0L) ? 0.0 : -0.0;
",2,1,0,1,2,1,0,0,0,4,33,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3466,"            if (exponent == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3469,"                while ((mantissa >>> 52) != 1) {
",2,2,0,2,5,0,0,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3470,"                    mantissa = mantissa << 1;
",4,1,0,0,0,0,0,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3471,"                    --scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3473,"                ++scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3474,"                mantissa = mantissa & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,6,42,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3476,"                if (scaledExponent < 2047) {
",2,1,0,1,3,0,0,0,0,3,28,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3477,"                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3479,"                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,74,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3482,"            } else if (scaledExponent < 2047) {
",2,1,0,1,4,0,0,0,0,3,35,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3483,"                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3485,"                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,74,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3500,"        if ((n > -127) && (n < 128)) {
",4,3,0,3,7,0,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3501,"            return f * Float.intBitsToFloat((n + 127) << 23);
",4,3,0,2,4,1,4,0,0,11,49,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3505,"        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
",2,2,0,4,9,0,12,0,0,16,57,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3506,"            return f;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3508,"        if (n < -277) {
",2,1,0,1,3,0,0,0,0,4,15,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3509,"            return (f > 0) ? 0.0f : -0.0f;
",2,1,0,1,2,1,0,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3511,"        if (n > 276) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3512,"            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,67,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3516,"        final int bits = Float.floatToIntBits(f);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3517,"        final int sign = bits & 0x80000000;
",4,1,0,0,0,1,0,0,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3518,"        int  exponent  = (bits >>> 23) & 0xff;
",4,2,0,1,2,0,0,0,0,6,38,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3519,"        int mantissa   = bits & 0x007fffff;
",4,1,0,0,0,0,0,0,0,5,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3522,"        int scaledExponent = exponent + n;
",6,1,0,0,0,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3524,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3526,"            if (scaledExponent > 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3528,"                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3529,"            } else if (scaledExponent > -24) {
",2,1,0,1,4,0,0,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3533,"                mantissa = mantissa | (1 << 23);
",4,2,0,1,2,0,0,0,0,7,32,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3536,"                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
",6,2,0,2,4,1,0,0,0,10,71,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3537,"                mantissa = mantissa >>> (1 - scaledExponent);
",6,2,0,1,2,0,0,0,0,9,45,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3538,"                if (mostSignificantLostBit != 0) {
",2,1,0,1,3,0,0,0,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3540,"                    mantissa++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3542,"                return Float.intBitsToFloat(sign | mantissa);
",4,1,0,1,2,1,4,0,0,9,45,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3546,"                return (sign == 0) ? 0.0f : -0.0f;
",2,1,0,1,2,1,0,0,0,4,34,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3550,"            if (exponent == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3553,"                while ((mantissa >>> 23) != 1) {
",2,2,0,2,5,0,0,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3554,"                    mantissa = mantissa << 1;
",4,1,0,0,0,0,0,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3555,"                    --scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3557,"                ++scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3558,"                mantissa = mantissa & 0x007fffff;
",4,1,0,0,0,0,0,0,0,6,33,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3560,"                if (scaledExponent < 255) {
",2,1,0,1,3,0,0,0,0,3,27,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3561,"                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3563,"                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,71,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3566,"            } else if (scaledExponent < 255) {
",2,1,0,1,4,0,0,0,0,3,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3567,"                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3569,"                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,71,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3609,"        if (Double.isNaN(d) || Double.isNaN(direction)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3610,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3611,"        } else if (d == direction) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3612,"            return direction;
",2,0,0,0,0,1,0,0,0,2,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3613,"        } else if (Double.isInfinite(d)) {
",0,0,0,2,6,0,6,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3614,"            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
",10,1,0,1,2,1,0,0,0,12,54,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3615,"        } else if (d == 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3616,"            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,62,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3621,"        final long bits = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3622,"        final long sign = bits & 0x8000000000000000L;
",4,1,0,0,0,1,0,0,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3623,"        if ((direction < d) ^ (sign == 0L)) {
",6,3,0,3,7,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3624,"            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
",4,3,0,3,6,1,4,0,0,11,74,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3626,"            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
",4,3,0,3,6,1,4,0,0,11,74,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3665,"        if (Double.isNaN(f) || Double.isNaN(direction)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3666,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3667,"        } else if (f == direction) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3668,"            return (float) direction;
",2,0,0,1,2,1,0,0,0,2,25,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3669,"        } else if (Float.isInfinite(f)) {
",0,0,0,2,6,0,6,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3670,"            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
",10,1,0,1,2,1,0,0,0,12,53,9,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3671,"        } else if (f == 0f) {
",2,1,0,1,4,0,0,0,0,3,21,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3672,"            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,60,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3677,"        final int bits = Float.floatToIntBits(f);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3678,"        final int sign = bits & 0x80000000;
",4,1,0,0,0,1,0,0,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3679,"        if ((direction < f) ^ (sign == 0)) {
",6,3,0,3,7,0,0,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3680,"            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
",4,3,0,3,6,1,4,0,0,11,62,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3682,"            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
",4,3,0,3,6,1,4,0,0,11,62,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3694,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3695,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3698,"        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {
",8,3,0,1,3,0,0,0,0,12,46,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3699,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3702,"        y = (long) x;
",4,0,0,1,2,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3703,"        if (x < 0 && y != x) {
",6,3,0,1,3,0,0,0,0,9,22,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3704,"            y--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3707,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3708,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3711,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3721,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3722,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3725,"        y = floor(x);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3726,"        if (y == x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3727,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3730,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3732,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3733,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3736,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3744,"        double y = floor(x);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3745,"        double d = x - y;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3747,"        if (d > 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3748,"            if (y == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3749,"                return -0.0; // Preserve sign of operand
",0,0,0,0,0,1,0,0,0,1,40,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3751,"            return y+1.0;
",2,1,0,0,0,1,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3753,"        if (d < 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3754,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3758,"        long z = (long) y;
",4,0,0,1,2,0,0,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3759,"        return (z & 1) == 0 ? y : y + 1.0;
",6,3,0,1,2,1,0,0,0,9,34,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3767,"        return (long) floor(x + 0.5);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3775,"        return (int) floor(x + 0.5f);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3793,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3802,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3803,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3805,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3806,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3809,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3810,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3814,"        int bits = Float.floatToRawIntBits(a);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3815,"        if (bits == 0x80000000) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3816,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3818,"        return b;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3830,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3831,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3834,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3835,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3839,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3840,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3841,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3843,"        return b;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3852,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3861,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3870,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3871,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3873,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3874,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3877,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3878,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3882,"        int bits = Float.floatToRawIntBits(a);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3883,"        if (bits == 0x80000000) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3884,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3886,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3903,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3909,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3929,"        if (Double.isInfinite(x) || Double.isInfinite(y)) {
",0,1,0,3,7,0,12,0,0,13,51,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3930,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3931,"        } else if (Double.isNaN(x) || Double.isNaN(y)) {
",0,1,0,3,8,0,12,0,0,13,48,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3932,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3935,"            final int expX = getExponent(x);
",2,0,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3936,"            final int expY = getExponent(y);
",2,0,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3937,"            if (expX > expY + 27) {
",4,2,0,1,3,0,0,0,0,6,23,7,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3939,"                return abs(x);
",0,0,0,1,2,1,4,0,0,4,14,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3940,"            } else if (expY > expX + 27) {
",4,2,0,1,4,0,0,0,0,6,30,8,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3942,"                return abs(y);
",0,0,0,1,2,1,4,0,0,4,14,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3946,"                final int middleExp = (expX + expY) / 2;
",6,2,0,1,2,1,0,0,0,9,40,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3949,"                final double scaledX = scalb(x, -middleExp);
",4,0,0,1,2,1,4,0,0,10,44,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3950,"                final double scaledY = scalb(y, -middleExp);
",4,0,0,1,2,1,4,0,0,10,44,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3953,"                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);
",10,3,0,1,2,1,2,0,0,16,67,10,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3956,"                return scalb(scaledH, middleExp);
",0,0,0,1,2,1,6,0,0,6,33,11,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3984,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation
",0,0,0,1,2,1,8,0,0,8,90,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3996,"        long m = Double.doubleToLongBits(magnitude);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3997,"        long s = Double.doubleToLongBits(sign);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3998,"        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
",8,7,0,3,7,0,0,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,3999,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,4001,"        return -magnitude; // flip sign
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,4013,"        int m = Float.floatToIntBits(magnitude);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,4014,"        int s = Float.floatToIntBits(sign);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,4015,"        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
",8,7,0,3,7,0,0,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,4016,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,4018,"        return -magnitude; // flip sign
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,4031,"        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;
",0,3,0,4,8,1,6,0,0,9,66,4,0.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,58,4044,"        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;
",0,3,0,3,6,1,6,0,0,9,55,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,89,"        return new UnivariateRealFunction() {
",0,0,0,1,3,1,0,2,0,2,37,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,92,"                final double diff = x - mean;
",6,1,0,0,0,1,0,0,0,8,29,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,93,"                final double g = Gaussian.value(diff, norm, i2s2);
",2,0,0,1,2,1,10,0,0,13,50,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,95,"                if (g == 0) {
",2,1,0,1,3,0,0,0,0,3,13,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,97,"                    return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,99,"                    return -2 * diff * i2s2 * g;
",6,1,0,0,0,1,0,0,0,8,28,11,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,53,"                    double sigma) {
",2,0,0,0,2,0,0,0,0,2,15,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,54,"        if (sigma <= 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,55,"            throw new NotStrictlyPositiveException(sigma);
",2,0,0,1,2,0,0,2,0,4,46,7,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,58,"        this.norm = norm;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,59,"        this.mean = mean;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,60,"        this.i2s2 = 1 / (2 * sigma * sigma);
",6,2,0,1,2,0,0,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,61,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,72,"        this(1 / (sigma * FastMath.sqrt(2 * Math.PI)), mean, sigma);
",10,3,0,3,6,0,4,0,0,17,60,4,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,73,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,79,"        this(0, 1);
",0,0,0,1,2,0,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,84,"        return value(x - mean, norm, i2s2);
",4,1,0,1,2,1,6,0,0,11,35,5,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,89,"        return new UnivariateRealFunction() {
",0,0,0,1,3,1,0,2,0,2,37,6,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,177,"                throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,9,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,180,"                throw new DimensionMismatchException(param.length, 3);
",4,0,0,1,2,0,0,2,0,6,54,8,0.00000,0
defect4j,math,org/apache/commons/math/analysis/function/Gaussian,58,183,"                throw new NotStrictlyPositiveException(param[2]);
",0,0,1,2,4,0,0,2,0,4,49,8,0.00000,0
