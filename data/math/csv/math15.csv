dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);
",2,0,0,1,2,1,4,0,0,7,18,9,1.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,131,"    public MersenneTwister(long seed) {
",4,0,0,1,3,1,0,0,0,5,35,2,0.02174,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,132,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.02174,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,133,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.02174,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,134,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02174,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };
",2,0,0,2,4,3,0,0,0,5,55,2,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,144,"        long longMT = seed;
",4,0,0,0,0,0,0,0,0,4,19,5,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,146,"        mt[0]= (int) longMT;
",2,0,1,2,4,0,0,0,0,5,20,4,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,147,"        for (mti = 1; mti < N; ++mti) {
",8,1,0,1,3,0,0,0,0,11,31,4,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,150,"            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;
",8,5,0,3,6,0,0,0,0,14,71,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,151,"            mt[mti]= (int) longMT;
",2,0,1,2,4,0,0,0,0,7,22,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,154,"        clear(); // Clear normal deviate cache
",0,0,0,1,2,0,2,0,0,2,38,5,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,167,"        if (seed == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,172,"        setSeed(19650218);
",0,0,0,1,2,0,2,0,0,2,18,5,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,173,"        int i = 1;
",2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,174,"        int j = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {
",10,1,0,2,5,0,6,0,0,18,57,4,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,177,"            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
",2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,178,"            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
",6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,179,"            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear
",10,5,1,5,10,0,0,0,0,19,76,7,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,180,"            mt[i]   = (int) (l & 0xffffffffl);
",2,1,1,3,6,0,0,0,0,8,34,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,181,"            i++; j++;
",4,0,0,0,0,0,0,0,0,6,9,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,182,"            if (i >= N) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,183,"                mt[0] = mt[N - 1];
",2,1,1,2,4,0,0,0,0,8,18,8,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,184,"                i = 1;
",2,0,0,0,0,0,0,0,0,3,6,8,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,186,"            if (j >= seed.length) {
",6,1,0,1,3,0,0,0,0,7,23,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,187,"                j = 0;
",2,0,0,0,0,0,0,0,0,3,6,8,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,191,"        for (int k = N - 1; k != 0; k--) {
",8,2,0,1,3,0,0,0,0,11,34,4,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,192,"            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
",2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,193,"            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
",6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,194,"            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear
",10,5,0,4,8,0,0,0,0,15,69,7,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,195,"            mt[i]   = (int) (l & 0xffffffffL);
",2,1,1,3,6,0,0,0,0,8,34,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,196,"            i++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,197,"            if (i >= N) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,198,"                mt[0] = mt[N - 1];
",2,1,1,2,4,0,0,0,0,8,18,8,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,199,"                i = 1;
",2,0,0,0,0,0,0,0,0,3,6,8,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,203,"        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array
",0,0,1,1,2,0,0,0,0,3,64,4,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,205,"        clear(); // Clear normal deviate cache
",0,0,0,1,2,0,2,0,0,2,38,5,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,207,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });
",4,2,0,7,14,0,2,0,0,8,71,5,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,217,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01389,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1541,"            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
",8,3,0,1,3,0,0,0,0,12,46,6,0.01370,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1087,"            switch (rmode) {
",2,0,0,1,3,0,0,0,0,2,16,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,202,"        this(field, (long) x);
",4,0,0,2,4,0,0,0,0,4,22,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,203,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,209,"    protected Dfp(final DfpField field, long x) {
",6,0,0,1,3,2,0,2,0,10,45,2,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,212,"        mant = new int[field.getRadixDigits()];
",2,0,0,2,4,0,4,0,0,7,39,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,213,"        nans = FINITE;
",4,0,0,0,0,0,0,0,0,5,14,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,214,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,216,"        boolean isLongMin = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,217,"        if (x == Long.MIN_VALUE) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,225,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,226,"            sign = -1;
",2,0,0,0,0,0,0,0,0,4,10,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,227,"            x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,229,"            sign = 1;
",2,0,0,0,0,0,0,0,0,3,9,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,232,"        exp = 0;
",2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,233,"        while (x != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,234,"            System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);
",12,2,0,1,2,0,10,0,0,24,76,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,235,"            mant[mant.length - 1] = (int) (x % RADIX);
",8,2,1,3,6,0,0,0,0,13,42,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,236,"            x /= RADIX;
",4,0,0,0,0,0,0,0,0,5,11,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,237,"            exp++;
",2,0,0,0,0,0,0,0,0,3,6,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,240,"        if (isLongMin) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,250,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,322,"    public Dfp(final Dfp d) {
",4,0,0,1,3,2,0,2,0,8,25,2,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,323,"        mant  = d.mant.clone();
",6,0,0,1,2,0,2,0,0,9,23,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,324,"        sign  = d.sign;
",6,0,0,0,0,0,0,0,0,7,15,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,325,"        exp   = d.exp;
",6,0,0,0,0,0,0,0,0,7,14,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,326,"        nans  = d.nans;
",6,0,0,0,0,0,0,0,0,7,15,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,327,"        field = d.field;
",6,0,0,0,0,0,0,0,0,7,16,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,328,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,334,"    protected Dfp(final DfpField field, final String s) {
",6,0,0,1,3,3,0,4,0,13,53,2,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,337,"        mant = new int[field.getRadixDigits()];
",2,0,0,2,4,0,4,0,0,7,39,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,338,"        sign = 1;
",2,0,0,0,0,0,0,0,0,3,9,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,339,"        exp = 0;
",2,0,0,0,0,0,0,0,0,3,8,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,340,"        nans = FINITE;
",4,0,0,0,0,0,0,0,0,5,14,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,341,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,343,"        boolean decimalFound = false;
",2,0,0,0,0,0,0,0,0,3,29,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,344,"        final int rsize = 4;   // size of radix in decimal digits
",2,0,0,0,0,1,0,0,0,3,57,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,345,"        final int offset = 4;  // Starting offset into Striped
",2,0,0,0,0,1,0,0,0,3,54,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,346,"        final char[] striped = new char[getRadixDigits() * rsize + offset * 2];
",6,3,0,3,6,1,2,0,0,12,71,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,349,"        if (s.equals(POS_INFINITY_STRING)) {
",0,0,0,2,5,0,6,0,0,6,36,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,355,"        if (s.equals(NEG_INFINITY_STRING)) {
",0,0,0,2,5,0,6,0,0,6,36,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,361,"        if (s.equals(NAN_STRING)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,368,"        int p = s.indexOf(""e"");
",2,0,0,1,2,0,4,0,0,7,23,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,369,"        if (p == -1) { // try upper case?
",2,1,0,1,3,0,0,0,0,4,33,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,370,"            p = s.indexOf(""E"");
",2,0,0,1,2,0,4,0,0,8,19,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,374,"        int sciexp = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,375,"        if (p != -1) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,398,"            fpdecimal = s;
",4,0,0,0,0,0,0,0,0,5,14,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,402,"        if (fpdecimal.indexOf(""-"") !=  -1) {
",0,1,0,2,5,0,4,0,0,7,36,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,407,"        p = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,410,"        int decimalPos = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,412,"            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {
",0,3,0,3,7,0,12,0,0,17,63,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,413,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,416,"            if (decimalFound && fpdecimal.charAt(p) == '0') {
",2,2,0,2,5,0,6,0,0,11,49,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,417,"                decimalPos--;
",2,0,0,0,0,0,0,0,0,3,13,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,420,"            if (fpdecimal.charAt(p) == '.') {
",0,1,0,2,5,0,6,0,0,8,33,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,421,"                decimalFound = true;
",2,0,0,0,0,0,0,0,0,4,20,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,424,"            p++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,426,"            if (p == fpdecimal.length()) {
",2,1,0,2,5,0,4,0,0,7,30,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,432,"        int q = offset;
",4,0,0,0,0,0,0,0,0,4,15,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,433,"        striped[0] = '0';
",0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,434,"        striped[1] = '0';
",0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,435,"        striped[2] = '0';
",0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,436,"        striped[3] = '0';
",0,0,1,1,2,0,0,0,0,4,17,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,437,"        int significantDigits=0;
",2,0,0,0,0,0,0,0,0,2,24,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,439,"            if (p == (fpdecimal.length())) {
",2,1,0,3,7,0,4,0,0,7,32,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,440,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,444,"            if (q == mant.length*rsize+offset+1) {
",10,4,0,1,3,0,0,0,0,14,38,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,445,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,448,"            if (fpdecimal.charAt(p) == '.') {
",0,1,0,2,5,0,6,0,0,8,33,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,449,"                decimalFound = true;
",2,0,0,0,0,0,0,0,0,4,20,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,450,"                decimalPos = significantDigits;
",4,0,0,0,0,0,0,0,0,5,31,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,451,"                p++;
",2,0,0,0,0,0,0,0,0,3,4,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,452,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,455,"            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {
",0,3,0,3,7,0,12,0,0,17,61,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,460,"            striped[q] = fpdecimal.charAt(p);
",0,0,1,2,4,0,6,0,0,11,33,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,461,"            q++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,462,"            p++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,463,"            significantDigits++;
",2,0,0,0,0,0,0,0,0,3,20,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,468,"        if (decimalFound && q != offset) {
",6,2,0,1,3,0,0,0,0,8,34,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,470,"                q--;
",2,0,0,0,0,0,0,0,0,3,4,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,471,"                if (q == offset) {
",4,1,0,1,3,0,0,0,0,5,18,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,474,"                if (striped[q] == '0') {
",0,1,1,2,5,0,0,0,0,6,24,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,475,"                    significantDigits--;
",2,0,0,0,0,0,0,0,0,3,20,10,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,483,"        if (decimalFound && significantDigits == 0) {
",4,2,0,1,3,0,0,0,0,6,45,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,488,"        if (!decimalFound) {
",2,0,0,1,3,0,0,0,0,3,20,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,493,"        q = offset;  // set q to point to first sig digit
",4,0,0,0,0,0,0,0,0,5,49,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,494,"        p = significantDigits-1+offset;
",6,2,0,0,0,0,0,0,0,9,31,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,496,"        while (p > q) {
",4,1,0,1,3,0,0,0,0,5,15,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,497,"            if (striped[p] != '0') {
",0,1,1,2,5,0,0,0,0,6,24,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,498,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,504,"        int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;
",12,4,0,2,4,0,0,0,0,16,62,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,505,"        q -= i;
",4,0,0,0,0,0,0,0,0,5,7,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,506,"        decimalPos += i;
",4,0,0,0,0,0,0,0,0,5,16,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,509,"        while ((p - q) < (mant.length * rsize)) {
",10,3,0,3,7,0,0,0,0,13,41,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,510,"            for (i = 0; i < rsize; i++) {
",8,1,0,1,3,0,0,0,0,11,29,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,511,"                striped[++p] = '0';
",2,0,1,1,2,0,0,0,0,7,19,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,517,"        for (i = mant.length - 1; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,14,40,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,518,"            mant[i] = (striped[q]   - '0') * 1000 +
",0,5,1,3,6,0,0,0,0,15,39,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,522,"            q += 4;
",2,0,0,0,0,0,0,0,0,3,7,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,526,"        exp = (decimalPos+sciexp) / rsize;
",8,2,0,1,2,0,0,0,0,11,34,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,528,"        if (q < striped.length) {
",6,1,0,1,3,0,0,0,0,7,25,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,530,"            round((striped[q] - '0')*1000);
",0,2,1,3,6,0,2,0,0,9,31,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,533,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,597,"        if (field.getRadixDigits() != d.field.getRadixDigits()) {
",4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,604,"        return new Dfp(d);
",2,0,0,1,2,1,0,2,0,4,18,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,635,"        return field;
",2,0,0,0,0,1,0,0,0,2,13,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,642,"        return field.getRadixDigits();
",0,0,0,1,2,1,4,0,0,4,30,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,649,"        return field.getZero();
",0,0,0,1,2,1,4,0,0,4,23,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,669,"        for (int i = mant.length - 1; i > 0; i--) {
",10,2,0,1,3,0,0,0,0,13,43,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,670,"            mant[i] = mant[i-1];
",2,1,1,2,4,0,0,0,0,10,20,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,672,"        mant[0] = 0;
",0,0,1,1,2,0,0,0,0,3,12,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,673,"        exp--;
",2,0,0,0,0,0,0,0,0,3,6,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,674,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,681,"        for (int i = 0; i < mant.length - 1; i++) {
",10,2,0,1,3,0,0,0,0,13,43,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,682,"            mant[i] = mant[i+1];
",2,1,1,2,4,0,0,0,0,10,20,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,684,"        mant[mant.length - 1] = 0;
",4,1,1,1,2,0,0,0,0,8,26,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,685,"        exp++;
",2,0,0,0,0,0,0,0,0,3,6,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,686,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,697,"        int lostdigit = 0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,698,"        boolean inexact = false;
",2,0,0,0,0,0,0,0,0,3,24,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,700,"        int diff = exp - e;
",6,1,0,0,0,0,0,0,0,7,19,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,702,"        int adiff = diff;
",4,0,0,0,0,0,0,0,0,4,17,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,703,"        if (adiff < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,704,"            adiff = -adiff;
",4,0,0,0,0,0,0,0,0,6,15,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,707,"        if (diff == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,708,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,711,"        if (adiff > (mant.length + 1)) {
",6,2,0,2,5,0,0,0,0,8,32,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,713,"            Arrays.fill(mant, 0);
",0,0,0,1,2,0,6,0,0,6,21,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,714,"            exp = e;
",4,0,0,0,0,0,0,0,0,5,8,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,716,"            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
",4,0,0,1,2,0,4,0,0,8,46,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,717,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);
",4,0,0,1,2,0,4,0,0,8,54,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,719,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,722,"        for (int i = 0; i < adiff; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,723,"            if (diff < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,728,"                if (lostdigit != 0) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,729,"                    inexact = true;
",2,0,0,0,0,0,0,0,0,4,15,10,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,732,"                lostdigit = mant[0];
",2,0,1,1,2,0,0,0,0,5,20,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,734,"                shiftRight();
",0,0,0,1,2,0,2,0,0,2,13,9,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,740,"        if (inexact) {
",2,0,0,1,3,0,0,0,0,2,14,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,741,"            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
",4,0,0,1,2,0,4,0,0,8,46,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,742,"            dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);
",4,0,0,1,2,0,4,0,0,8,54,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,745,"        return lostdigit;
",2,0,0,0,0,1,0,0,0,2,17,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,756,"        if (field.getRadixDigits() != x.field.getRadixDigits()) {
",4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,765,"        if (isNaN() || x.isNaN()) {
",0,1,0,3,7,0,6,0,0,7,27,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,771,"        return compare(this, x) < 0;
",0,1,0,1,2,1,4,0,0,5,28,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,781,"        if (field.getRadixDigits() != x.field.getRadixDigits()) {
",4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,790,"        if (isNaN() || x.isNaN()) {
",0,1,0,3,7,0,6,0,0,7,27,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,796,"        return compare(this, x) > 0;
",0,1,0,1,2,1,4,0,0,5,28,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,879,"        return (nans == QNAN) || (nans == SNAN);
",8,3,0,2,4,1,0,0,0,11,40,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,904,"        if (other instanceof Dfp) {
",2,0,0,1,3,0,0,2,0,4,27,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,905,"            final Dfp x = (Dfp) other;
",4,0,0,1,2,1,0,4,0,9,26,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,906,"            if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {
",4,2,0,5,11,0,12,0,0,18,81,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,910,"            return compare(this, x) == 0;
",0,1,0,1,2,1,4,0,0,5,29,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,931,"        if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {
",4,2,0,5,11,0,12,0,0,18,81,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,935,"        return greaterThan(x) || lessThan(x);
",0,1,0,2,4,1,8,0,0,9,37,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,946,"        if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&
",20,7,0,2,5,0,0,0,0,27,71,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,948,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,951,"        if (a.sign != b.sign) {
",8,1,0,1,3,0,0,0,0,9,23,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,960,"        if (a.nans == INFINITE && b.nans == FINITE) {
",12,3,0,1,3,0,0,0,0,15,45,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,964,"        if (a.nans == FINITE && b.nans == INFINITE) {
",12,3,0,1,3,0,0,0,0,15,45,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,968,"        if (a.nans == INFINITE && b.nans == INFINITE) {
",12,3,0,1,3,0,0,0,0,15,47,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,973,"        if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0) {
",20,5,0,3,7,0,0,0,0,25,67,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,974,"            if (a.exp < b.exp) {
",8,1,0,1,3,0,0,0,0,9,20,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,975,"                return -a.sign;
",4,0,0,0,0,1,0,0,0,5,15,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,978,"            if (a.exp > b.exp) {
",8,1,0,1,3,0,0,0,0,9,20,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,979,"                return a.sign;
",4,0,0,0,0,1,0,0,0,4,14,9,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,984,"        for (int i = a.mant.length - 1; i >= 0; i--) {
",12,2,0,1,3,0,0,0,0,15,46,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,985,"            if (a.mant[i] > b.mant[i]) {
",8,1,1,3,7,0,0,0,0,13,28,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,986,"                return a.sign;
",4,0,0,0,0,1,0,0,0,4,14,9,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,989,"            if (a.mant[i] < b.mant[i]) {
",8,1,1,3,7,0,0,0,0,13,28,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,990,"                return -a.sign;
",4,0,0,0,0,1,0,0,0,5,15,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,994,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1231,"        extra = RADIX-extra;
",6,1,0,0,0,0,0,0,0,8,20,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1232,"        for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1233,"            mant[i] = RADIX-mant[i]-1;
",2,1,1,2,4,0,0,0,0,12,26,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1236,"        int rh = extra / RADIX;
",6,1,0,0,0,0,0,0,0,7,23,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1237,"        extra = extra - rh * RADIX;
",8,2,0,0,0,0,0,0,0,11,27,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1238,"        for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1239,"            final int r = mant[i] + rh;
",4,1,1,1,2,1,0,0,0,10,27,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1240,"            rh = r / RADIX;
",6,1,0,0,0,0,0,0,0,8,15,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1241,"            mant[i] = r - rh * RADIX;
",6,2,1,1,2,0,0,0,0,13,25,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1244,"        return extra;
",2,0,0,0,0,1,0,0,0,2,13,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1254,"        if (field.getRadixDigits() != x.field.getRadixDigits()) {
",4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1262,"        if (nans != FINITE || x.nans != FINITE) {
",10,3,0,1,3,0,0,0,0,13,41,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1293,"        Dfp a = newInstance(this);
",2,0,0,1,2,0,2,2,0,6,26,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1294,"        Dfp b = newInstance(x);
",2,0,0,1,2,0,4,2,0,8,23,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1297,"        Dfp result = newInstance(getZero());
",2,0,0,2,4,0,4,2,0,8,36,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1300,"        final byte asign = a.sign;
",6,0,0,0,0,1,0,0,0,7,26,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1301,"        final byte bsign = b.sign;
",6,0,0,0,0,1,0,0,0,7,26,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1303,"        a.sign = 1;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1304,"        b.sign = 1;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1307,"        byte rsign = bsign;
",4,0,0,0,0,0,0,0,0,4,19,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1308,"        if (compare(a, b) > 0) {
",0,1,0,2,5,0,6,0,0,7,24,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1309,"            rsign = asign;
",4,0,0,0,0,0,0,0,0,5,14,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1315,"        if (b.mant[mant.length-1] == 0) {
",8,2,0,2,5,0,0,0,0,10,33,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1316,"            b.exp = a.exp;
",8,0,0,0,0,0,0,0,0,9,14,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1319,"        if (a.mant[mant.length-1] == 0) {
",8,2,0,2,5,0,0,0,0,10,33,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1324,"        int aextradigit = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1325,"        int bextradigit = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1326,"        if (a.exp < b.exp) {
",8,1,0,1,3,0,0,0,0,9,20,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1327,"            aextradigit = a.align(b.exp);
",6,0,0,1,2,0,4,0,0,11,29,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1329,"            bextradigit = b.align(a.exp);
",6,0,0,1,2,0,4,0,0,11,29,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1333,"        if (asign != bsign) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1334,"            if (asign == rsign) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1335,"                bextradigit = b.complement(bextradigit);
",2,0,0,1,2,0,6,0,0,9,40,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1337,"                aextradigit = a.complement(aextradigit);
",2,0,0,1,2,0,6,0,0,9,40,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1342,"        int rh = 0; /* acts as a carry */
",2,0,0,0,0,0,0,0,0,2,33,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1343,"        for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1344,"            final int r = a.mant[i]+b.mant[i]+rh;
",12,1,1,2,4,1,0,0,0,18,37,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1345,"            rh = r / RADIX;
",6,1,0,0,0,0,0,0,0,8,15,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1346,"            result.mant[i] = r - rh * RADIX;
",10,2,1,1,2,0,0,0,0,15,32,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1348,"        result.exp = a.exp;
",8,0,0,0,0,0,0,0,0,9,19,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1349,"        result.sign = rsign;
",6,0,0,0,0,0,0,0,0,7,20,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1354,"        if (rh != 0 && (asign == bsign)) {
",6,3,0,2,5,0,0,0,0,9,34,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1355,"            final int lostdigit = result.mant[0];
",6,0,0,1,2,1,0,0,0,7,37,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1356,"            result.shiftRight();
",0,0,0,1,2,0,4,0,0,4,20,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1357,"            result.mant[mant.length-1] = rh;
",10,1,0,1,2,0,0,0,0,12,32,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1358,"            final int excp = result.round(lostdigit);
",2,0,0,1,2,1,6,0,0,9,41,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1359,"            if (excp != 0) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1360,"                result = dotrap(excp, ADD_TRAP, x, result);
",2,0,0,1,2,0,10,0,0,13,43,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1365,"        for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1366,"            if (result.mant[mant.length-1] != 0) {
",8,2,0,2,5,0,0,0,0,10,38,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1367,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1369,"            result.shiftLeft();
",0,0,0,1,2,0,4,0,0,4,19,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1370,"            if (i == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1371,"                result.mant[0] = aextradigit+bextradigit;
",8,1,0,1,2,0,0,0,0,10,41,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1372,"                aextradigit = 0;
",2,0,0,0,0,0,0,0,0,3,16,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1373,"                bextradigit = 0;
",2,0,0,0,0,0,0,0,0,3,16,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1378,"        if (result.mant[mant.length-1] == 0) {
",8,2,0,2,5,0,0,0,0,10,38,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1379,"            result.exp = 0;
",4,0,0,0,0,0,0,0,0,5,15,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1381,"            if (asign != bsign) {
",4,1,0,1,3,0,0,0,0,5,21,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1383,"                result.sign = 1;  // Per IEEE 854-1987 Section 6.3
",4,0,0,0,0,0,0,0,0,5,50,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1388,"        final int excp = result.round(aextradigit + bextradigit);
",6,1,0,1,2,1,4,0,0,12,57,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1389,"        if (excp != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1390,"            result = dotrap(excp, ADD_TRAP, x, result);
",2,0,0,1,2,0,10,0,0,13,43,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1393,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1400,"        Dfp result = newInstance(this);
",2,0,0,1,2,0,2,2,0,6,31,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1401,"        result.sign = (byte) - result.sign;
",8,0,0,1,2,0,0,0,0,10,35,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1402,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1410,"        return add(x.negate());
",0,0,0,2,4,1,6,0,0,6,23,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1418,"        boolean inc = false;
",2,0,0,0,0,0,0,0,0,3,20,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1419,"        switch (field.getRoundingMode()) {
",0,0,0,2,5,0,4,0,0,4,34,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1437,"                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even
",6,6,1,3,6,0,0,0,0,15,72,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1438,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1454,"        if (inc) {
",2,0,0,1,3,0,0,0,0,2,10,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1456,"            int rh = 1;
",2,0,0,0,0,0,0,0,0,2,11,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1457,"            for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1458,"                final int r = mant[i] + rh;
",4,1,1,1,2,1,0,0,0,10,27,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1459,"                rh = r / RADIX;
",6,1,0,0,0,0,0,0,0,8,15,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1460,"                mant[i] = r - rh * RADIX;
",6,2,1,1,2,0,0,0,0,13,25,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1463,"            if (rh != 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1470,"        if (exp < MIN_EXP) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1476,"        if (exp > MAX_EXP) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1482,"        if (n != 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1484,"            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
",4,0,0,1,2,0,4,0,0,8,46,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1485,"            return DfpField.FLAG_INEXACT;
",4,0,0,0,0,1,0,0,0,4,29,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1488,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1499,"        if (field.getRadixDigits() != x.field.getRadixDigits()) {
",4,1,0,3,7,0,6,0,0,11,57,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1506,"        Dfp result = newInstance(getZero());
",2,0,0,2,4,0,4,2,0,8,36,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1509,"        if (nans != FINITE || x.nans != FINITE) {
",10,3,0,1,3,0,0,0,0,13,41,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1546,"        int[] product = new int[mant.length*2];  // Big enough to hold even the largest result
",6,1,0,2,4,0,0,0,0,7,86,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1548,"        for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1549,"            int rh = 0;  // acts as a carry
",2,0,0,0,0,0,0,0,0,2,31,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1550,"            for (int j=0; j<mant.length; j++) {
",10,1,0,1,3,0,0,0,0,12,35,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1551,"                int r = mant[i] * x.mant[j];    // multiply the 2 digits
",6,1,1,2,4,0,0,0,0,13,56,9,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1552,"                r = r + product[i+j] + rh;  // add to the product digit with carry in
",10,2,1,1,2,0,0,0,0,15,69,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1554,"                rh = r / RADIX;
",6,1,0,0,0,0,0,0,0,8,15,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1555,"                product[i+j] = r - rh * RADIX;
",10,3,1,1,2,0,0,0,0,16,30,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1557,"            product[i+mant.length] = rh;
",8,1,1,1,2,0,0,0,0,12,28,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1561,"        int md = mant.length * 2 - 1;  // default, in case result is zero
",6,2,0,0,0,0,0,0,0,8,65,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1562,"        for (int i = mant.length * 2 - 1; i >= 0; i--) {
",10,3,0,1,3,0,0,0,0,14,48,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1563,"            if (product[i] != 0) {
",0,1,1,2,5,0,0,0,0,5,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1564,"                md = i;
",4,0,0,0,0,0,0,0,0,5,7,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1565,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1570,"        for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1571,"            result.mant[mant.length - i - 1] = product[md - i];
",14,2,1,2,4,0,0,0,0,19,51,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1575,"        result.exp = exp + x.exp + md - 2 * mant.length + 1;
",16,4,0,0,0,0,0,0,0,21,52,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1576,"        result.sign = (byte)((sign == x.sign)?1:-1);
",10,1,0,3,6,0,0,0,0,13,44,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1578,"        if (result.mant[mant.length-1] == 0) {
",8,2,0,2,5,0,0,0,0,10,38,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1580,"            result.exp = 0;
",4,0,0,0,0,0,0,0,0,5,15,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1584,"        if (md > (mant.length-1)) {
",6,2,0,2,5,0,0,0,0,8,27,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1585,"            excp = result.round(product[md-mant.length]);
",8,1,1,2,4,0,4,0,0,16,45,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1590,"        if (excp != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1591,"            result = dotrap(excp, MULTIPLY_TRAP, x, result);
",2,0,0,1,2,0,10,0,0,13,48,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1594,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1683,"        int trial=0;    // trial quotient digit
",2,0,0,0,0,0,0,0,0,2,39,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1686,"        int md=0;       // most sig digit in result
",2,0,0,0,0,0,0,0,0,2,43,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1690,"        if (field.getRadixDigits() != divisor.field.getRadixDigits()) {
",4,1,0,3,7,0,6,0,0,11,63,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1697,"        Dfp result = newInstance(getZero());
",2,0,0,2,4,0,4,2,0,8,36,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1700,"        if (nans != FINITE || divisor.nans != FINITE) {
",10,3,0,1,3,0,0,0,0,13,47,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1731,"        if (divisor.mant[mant.length-1] == 0) {
",8,2,0,2,5,0,0,0,0,10,39,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1740,"        dividend = new int[mant.length+1];  // one extra digit needed
",6,1,0,1,2,0,0,0,0,8,61,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1741,"        quotient = new int[mant.length+2];  // two extra digits needed 1 for overflow, 1 for rounding
",6,1,0,1,2,0,0,0,0,8,93,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1742,"        remainder = new int[mant.length+1]; // one extra digit needed
",6,1,0,1,2,0,0,0,0,8,61,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1746,"        dividend[mant.length] = 0;
",4,0,1,1,2,0,0,0,0,7,26,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1747,"        quotient[mant.length] = 0;
",4,0,1,1,2,0,0,0,0,7,26,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1748,"        quotient[mant.length+1] = 0;
",4,1,1,1,2,0,0,0,0,8,28,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1749,"        remainder[mant.length] = 0;
",4,0,1,1,2,0,0,0,0,7,27,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1754,"        for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1755,"            dividend[i] = mant[i];
",0,0,1,2,4,0,0,0,0,9,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1756,"            quotient[i] = 0;
",0,0,1,1,2,0,0,0,0,5,16,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1757,"            remainder[i] = 0;
",0,0,1,1,2,0,0,0,0,5,17,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1761,"        nsqd = 0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1762,"        for (qd = mant.length+1; qd >= 0; qd--) {
",10,2,0,1,3,0,0,0,0,14,41,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1766,"            final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];
",12,3,1,2,4,1,0,0,0,20,71,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1767,"            int min = divMsb       / (divisor.mant[mant.length-1]+1);
",12,3,0,2,4,0,0,0,0,15,57,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1768,"            int max = (divMsb + 1) / divisor.mant[mant.length-1];
",12,3,0,2,4,0,0,0,0,15,53,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1770,"            trialgood = false;
",2,0,0,0,0,0,0,0,0,4,18,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1771,"            while (!trialgood) {
",2,0,0,1,3,0,0,0,0,3,20,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1773,"                trial = (min+max)/2;
",6,2,0,1,2,0,0,0,0,9,20,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1776,"                int rh = 0;
",2,0,0,0,0,0,0,0,0,2,11,9,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1777,"                for (int i = 0; i < mant.length + 1; i++) {
",10,2,0,1,3,0,0,0,0,13,43,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1778,"                    int dm = (i<mant.length)?divisor.mant[i]:0;
",12,1,1,2,4,0,0,0,0,15,43,11,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1779,"                    final int r = (dm * trial) + rh;
",8,2,0,1,2,1,0,0,0,11,32,10,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1780,"                    rh = r / RADIX;
",6,1,0,0,0,0,0,0,0,8,15,10,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1781,"                    remainder[i] = r - rh * RADIX;
",6,2,1,1,2,0,0,0,0,13,30,10,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1785,"                rh = 1;  // carry in to aid the subtraction
",2,0,0,0,0,0,0,0,0,3,43,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1786,"                for (int i = 0; i < mant.length + 1; i++) {
",10,2,0,1,3,0,0,0,0,13,43,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1787,"                    final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;
",6,3,1,4,8,1,0,0,0,18,60,10,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1788,"                    rh = r / RADIX;
",6,1,0,0,0,0,0,0,0,8,15,10,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1789,"                    remainder[i] = r - rh * RADIX;
",6,2,1,1,2,0,0,0,0,13,30,10,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1793,"                if (rh == 0) {
",2,1,0,1,3,0,0,0,0,3,14,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1795,"                    max = trial-1;
",4,1,0,0,0,0,0,0,0,6,14,10,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1796,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1800,"                minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];
",12,3,1,3,6,0,0,0,0,20,67,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1801,"                minadj = minadj / (divisor.mant[mant.length-1]+1);
",12,3,0,2,4,0,0,0,0,16,50,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1803,"                if (minadj >= 2) {
",2,1,0,1,3,0,0,0,0,3,18,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1804,"                    min = trial+minadj;  // update the minimum
",6,1,0,0,0,0,0,0,0,8,42,10,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1805,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1810,"                trialgood = false;  // assume false
",2,0,0,0,0,0,0,0,0,4,35,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1811,"                for (int i = mant.length - 1; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,44,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1812,"                    if (divisor.mant[i] > remainder[i]) {
",4,1,1,3,7,0,0,0,0,11,37,10,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1813,"                        trialgood = true;
",2,0,0,0,0,0,0,0,0,4,17,12,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1815,"                    if (divisor.mant[i] < remainder[i]) {
",4,1,1,3,7,0,0,0,0,11,37,10,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1816,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1820,"                if (remainder[mant.length] != 0) {
",4,1,1,2,5,0,0,0,0,7,34,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1821,"                    trialgood = false;
",2,0,0,0,0,0,0,0,0,4,18,10,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1824,"                if (trialgood == false) {
",2,1,0,1,3,0,0,0,0,4,25,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1825,"                    min = trial+1;
",4,1,0,0,0,0,0,0,0,6,14,10,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1827,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1830,"            quotient[qd] = trial;
",2,0,1,1,2,0,0,0,0,7,21,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1831,"            if (trial != 0 || nsqd != 0) {
",4,3,0,1,3,0,0,0,0,7,30,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1832,"                nsqd++;
",2,0,0,0,0,0,0,0,0,3,7,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1835,"            if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length) {
",12,3,0,2,5,0,4,0,0,19,89,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1840,"            if (nsqd > mant.length) {
",6,1,0,1,3,0,0,0,0,7,25,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1842,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1846,"            dividend[0] = 0;
",0,0,1,1,2,0,0,0,0,3,16,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1847,"            for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1848,"                dividend[i + 1] = remainder[i];
",2,1,1,2,4,0,0,0,0,10,31,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1853,"        md = mant.length;  // default
",6,0,0,0,0,0,0,0,0,7,29,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1854,"        for (int i = mant.length + 1; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,44,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1855,"            if (quotient[i] != 0) {
",0,1,1,2,5,0,0,0,0,5,23,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1856,"                md = i;
",4,0,0,0,0,0,0,0,0,5,7,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1857,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1862,"        for (int i=0; i<mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,35,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1863,"            result.mant[mant.length-i-1] = quotient[md-i];
",14,2,1,2,4,0,0,0,0,19,46,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1867,"        result.exp = exp - divisor.exp + md - mant.length;
",16,3,0,0,0,0,0,0,0,20,50,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1868,"        result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);
",10,1,0,3,6,0,0,0,0,13,55,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1870,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero
",8,2,0,2,5,0,0,0,0,10,76,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1871,"            result.exp = 0;
",4,0,0,0,0,0,0,0,0,5,15,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1874,"        if (md > (mant.length-1)) {
",6,2,0,2,5,0,0,0,0,8,27,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1875,"            excp = result.round(quotient[md-mant.length]);
",8,1,1,2,4,0,4,0,0,16,46,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1880,"        if (excp != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1881,"            result = dotrap(excp, DIVIDE_TRAP, divisor, result);
",2,0,0,1,2,0,10,0,0,13,52,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1884,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1895,"        if (nans != FINITE) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1906,"        if (divisor == 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1916,"        if (divisor < 0 || divisor >= RADIX) {
",6,3,0,1,3,0,0,0,0,9,38,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1924,"        Dfp result = newInstance(this);
",2,0,0,1,2,0,2,2,0,6,31,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1926,"        int rl = 0;
",2,0,0,0,0,0,0,0,0,2,11,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1927,"        for (int i = mant.length-1; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,42,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1928,"            final int r = rl*RADIX + result.mant[i];
",10,2,1,1,2,1,0,0,0,15,40,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1929,"            final int rh = r / divisor;
",6,1,0,0,0,1,0,0,0,8,27,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1930,"            rl = r - rh * divisor;
",8,2,0,0,0,0,0,0,0,11,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1931,"            result.mant[i] = rh;
",6,0,1,1,2,0,0,0,0,9,20,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1934,"        if (result.mant[mant.length-1] == 0) {
",8,2,0,2,5,0,0,0,0,10,38,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1936,"            result.shiftLeft();
",0,0,0,1,2,0,4,0,0,4,19,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1937,"            final int r = rl * RADIX;        // compute the next digit and put it in
",6,1,0,0,0,1,0,0,0,8,72,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1938,"            final int rh = r / divisor;
",6,1,0,0,0,1,0,0,0,8,27,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1939,"            rl = r - rh * divisor;
",8,2,0,0,0,0,0,0,0,11,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1940,"            result.mant[0] = rh;
",6,0,0,1,2,0,0,0,0,7,20,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1943,"        final int excp = result.round(rl * RADIX / divisor);  // do the rounding
",8,2,0,1,2,1,4,0,0,15,72,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1944,"        if (excp != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1945,"            result = dotrap(excp, DIVIDE_TRAP, result, result);
",2,0,0,1,2,0,10,0,0,13,51,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1948,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1963,"        if (nans == FINITE && mant[mant.length-1] == 0) {
",8,4,1,2,5,0,0,0,0,14,49,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1968,"        if (nans != FINITE) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1988,"        if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1999,"        Dfp x = newInstance(this);
",2,0,0,1,2,0,2,2,0,6,26,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2002,"        if (x.exp < -1 || x.exp > 1) {
",8,3,0,1,3,0,0,0,0,12,30,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2007,"        switch (x.mant[mant.length-1] / 2000) {
",8,2,0,2,5,0,0,0,0,10,39,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2009,"                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;
",16,4,0,2,4,0,0,0,0,21,50,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2010,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2018,"                x.mant[mant.length-1] = 3000;
",8,1,0,1,2,0,0,0,0,10,29,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2021,"        Dfp dx = newInstance(x);
",2,0,0,1,2,0,4,2,0,8,24,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2026,"        Dfp px  = getZero();
",2,0,0,1,2,0,2,2,0,6,20,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2027,"        Dfp ppx = getZero();
",2,0,0,1,2,0,2,2,0,6,20,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2028,"        while (x.unequal(px)) {
",0,0,0,2,5,0,6,0,0,6,23,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2029,"            dx = newInstance(x);
",2,0,0,1,2,0,4,0,0,7,20,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2030,"            dx.sign = -1;
",4,0,0,0,0,0,0,0,0,6,13,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2031,"            dx = dx.add(this.divide(x));
",2,0,0,2,4,0,8,0,0,11,28,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2032,"            dx = dx.divide(2);
",2,0,0,1,2,0,4,0,0,7,18,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2033,"            ppx = px;
",4,0,0,0,0,0,0,0,0,5,9,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2034,"            px = x;
",4,0,0,0,0,0,0,0,0,5,7,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2035,"            x = x.add(dx);
",2,0,0,1,2,0,6,0,0,9,14,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2037,"            if (x.equals(ppx)) {
",0,0,0,2,5,0,6,0,0,6,20,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2044,"            if (dx.mant[mant.length-1] == 0) {
",8,2,0,2,5,0,0,0,0,10,34,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2045,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2049,"        return x;
",2,0,0,0,0,1,0,0,0,2,9,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2058,"        if (nans != FINITE) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2067,"        if (exp > mant.length || exp < -1) {
",8,3,0,1,3,0,0,0,0,12,36,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2071,"        return dfp2string();
",0,0,0,1,2,1,2,0,0,2,20,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2160,"        char buffer[] = new char[mant.length*4 + 20];
",6,2,0,2,4,0,0,0,0,8,45,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2161,"        int p = 1;
",2,0,0,0,0,0,0,0,0,2,10,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2163,"        int e = exp;
",4,0,0,0,0,0,0,0,0,4,12,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2164,"        boolean pointInserted = false;
",2,0,0,0,0,0,0,0,0,3,30,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2166,"        buffer[0] = ' ';
",0,0,1,1,2,0,0,0,0,4,16,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2168,"        if (e <= 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2169,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2170,"            buffer[p++] = '.';
",2,0,1,1,2,0,0,0,0,7,18,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2171,"            pointInserted = true;
",2,0,0,0,0,0,0,0,0,4,21,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2174,"        while (e < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2182,"        for (int i = mant.length - 1; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,44,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2183,"            buffer[p++] = (char) ((mant[i] / 1000) + '0');
",2,2,1,5,10,0,0,0,0,13,46,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2184,"            buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');
",2,3,1,6,12,0,0,0,0,14,52,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2185,"            buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');
",2,3,1,6,12,0,0,0,0,14,51,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2186,"            buffer[p++] = (char) (((mant[i]) % 10) + '0');
",2,2,1,6,12,0,0,0,0,13,46,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2187,"            if (--e == 0) {
",2,1,0,1,3,0,0,0,0,4,15,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2188,"                buffer[p++] = '.';
",2,0,1,1,2,0,0,0,0,7,18,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2189,"                pointInserted = true;
",2,0,0,0,0,0,0,0,0,4,21,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2193,"        while (e > 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2201,"        if (!pointInserted) {
",2,0,0,1,3,0,0,0,0,3,21,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2207,"        q = 1;
",2,0,0,0,0,0,0,0,0,3,6,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2208,"        while (buffer[q] == '0') {
",0,1,1,2,5,0,0,0,0,6,26,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2209,"            q++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2211,"        if (buffer[q] == '.') {
",0,1,1,2,5,0,0,0,0,6,23,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2212,"            q--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2216,"        while (buffer[p-1] == '0') {
",2,2,1,2,5,0,0,0,0,7,28,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2217,"            p--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2221,"        if (sign < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2225,"        return new String(buffer, q, p - q);
",8,1,0,1,2,1,0,2,0,11,36,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2237,"        Dfp def = result;
",4,0,0,0,0,0,0,2,0,6,17,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2239,"        switch (type) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2288,"            default: def = result; break;
",4,0,0,0,0,0,0,0,0,5,29,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2291,"        return trap(type, what, oper, def, result);
",0,0,0,1,2,1,12,0,0,12,43,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2307,"        return def;
",2,0,0,0,0,1,0,0,0,2,11,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,30,"    public enum RoundingMode {
",2,0,0,0,1,1,0,0,0,3,26,2,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,33,"        ROUND_DOWN,
",2,0,0,0,0,0,0,0,0,2,11,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,36,"        ROUND_UP,
",2,0,0,0,0,0,0,0,0,2,9,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,39,"        ROUND_HALF_UP,
",2,0,0,0,0,0,0,0,0,2,14,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,42,"        ROUND_HALF_DOWN,
",2,0,0,0,0,0,0,0,0,2,16,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,47,"        ROUND_HALF_EVEN,
",2,0,0,0,0,0,0,0,0,2,16,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,50,"        ROUND_HALF_ODD,
",2,0,0,0,0,0,0,0,0,2,15,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,53,"        ROUND_CEIL,
",2,0,0,0,0,0,0,0,0,2,11,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,56,"        ROUND_FLOOR;
",2,0,0,0,0,0,0,0,0,2,12,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,177,"        this(decimalDigits, true);
",2,0,0,1,2,0,0,0,0,3,26,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,178,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,191,"    private DfpField(final int decimalDigits, final boolean computeConstants) {
",6,0,0,1,3,3,0,0,0,9,75,2,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,193,"        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;
",6,3,0,2,4,0,0,0,0,10,70,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,194,"        this.rMode       = RoundingMode.ROUND_HALF_EVEN;
",6,0,0,0,0,0,0,0,0,7,48,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,195,"        this.ieeeFlags   = 0;
",2,0,0,0,0,0,0,0,0,3,21,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,196,"        this.zero        = new Dfp(this, 0);
",2,0,0,1,2,0,0,2,0,5,36,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,197,"        this.one         = new Dfp(this, 1);
",2,0,0,1,2,0,0,2,0,5,36,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,198,"        this.two         = new Dfp(this, 2);
",2,0,0,1,2,0,0,2,0,5,36,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,200,"        if (computeConstants) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,202,"            synchronized (DfpField.class) {
",0,0,0,1,3,0,0,2,0,2,31,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,208,"                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));
",4,2,0,3,6,0,2,0,0,8,73,9,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,211,"                sqr2           = new Dfp(this, sqr2String);
",4,0,0,1,2,0,0,2,0,7,43,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,212,"                sqr2Split      = split(sqr2String);
",2,0,0,1,2,0,4,0,0,7,35,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,213,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);
",4,0,0,1,2,0,0,2,0,7,53,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,214,"                sqr3           = new Dfp(this, sqr3String);
",4,0,0,1,2,0,0,2,0,7,43,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,215,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);
",4,0,0,1,2,0,0,2,0,7,53,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,216,"                pi             = new Dfp(this, piString);
",4,0,0,1,2,0,0,2,0,7,41,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,217,"                piSplit        = split(piString);
",2,0,0,1,2,0,4,0,0,7,33,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,218,"                e              = new Dfp(this, eString);
",4,0,0,1,2,0,0,2,0,7,40,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,219,"                eSplit         = split(eString);
",2,0,0,1,2,0,4,0,0,7,32,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,220,"                ln2            = new Dfp(this, ln2String);
",4,0,0,1,2,0,0,2,0,7,42,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,221,"                ln2Split       = split(ln2String);
",2,0,0,1,2,0,4,0,0,7,34,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,222,"                ln5            = new Dfp(this, ln5String);
",4,0,0,1,2,0,0,2,0,7,42,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,223,"                ln5Split       = split(ln5String);
",2,0,0,1,2,0,4,0,0,7,34,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,224,"                ln10           = new Dfp(this, ln10String);
",4,0,0,1,2,0,0,2,0,7,43,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,226,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,229,"            sqr2           = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,230,"            sqr2Split      = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,231,"            sqr2Reciprocal = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,232,"            sqr3           = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,233,"            sqr3Reciprocal = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,234,"            pi             = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,235,"            piSplit        = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,236,"            e              = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,237,"            eSplit         = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,238,"            ln2            = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,239,"            ln2Split       = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,240,"            ln5            = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,241,"            ln5Split       = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,242,"            ln10           = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,245,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,251,"        return radixDigits;
",2,0,0,0,0,1,0,0,0,2,19,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,269,"        return rMode;
",2,0,0,0,0,1,0,0,0,2,13,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,331,"        ieeeFlags |= bits & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);
",14,2,0,1,2,0,0,0,0,17,99,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,332,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,403,"        return zero;
",2,0,0,0,0,1,0,0,0,2,12,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,530,"      Dfp result[] = new Dfp[2];
",2,0,0,2,4,0,0,4,0,6,26,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,531,"      boolean leading = true;
",2,0,0,0,0,0,0,0,0,3,23,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,532,"      int sp = 0;
",2,0,0,0,0,0,0,0,0,2,11,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,533,"      int sig = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,535,"      char[] buf = new char[a.length()];
",2,0,0,3,6,0,4,0,0,6,34,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,537,"      for (int i = 0; i < buf.length; i++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,538,"        buf[i] = a.charAt(i);
",0,0,1,2,4,0,6,0,0,11,21,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,540,"        if (buf[i] >= '1' && buf[i] <= '9') {
",0,3,1,3,7,0,0,0,0,13,37,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,541,"            leading = false;
",2,0,0,0,0,0,0,0,0,4,16,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,544,"        if (buf[i] == '.') {
",0,1,1,2,5,0,0,0,0,6,20,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,545,"          sig += (400 - sig) % 4;
",4,2,0,1,2,0,0,0,0,7,23,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,546,"          leading = false;
",2,0,0,0,0,0,0,0,0,4,16,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,549,"        if (sig == (radixDigits / 2) * 4) {
",4,3,0,2,5,0,0,0,0,7,35,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,550,"          sp = i;
",4,0,0,0,0,0,0,0,0,5,7,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,551,"          break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,554,"        if (buf[i] >= '0' && buf[i] <= '9' && !leading) {
",2,4,1,3,7,0,0,0,0,17,49,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,555,"            sig ++;
",2,0,0,0,0,0,0,0,0,3,7,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,559,"      result[0] = new Dfp(this, new String(buf, 0, sp));
",4,0,1,3,6,0,0,4,0,11,50,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,561,"      for (int i = 0; i < buf.length; i++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,562,"        buf[i] = a.charAt(i);
",0,0,1,2,4,0,6,0,0,11,21,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,563,"        if (buf[i] >= '0' && buf[i] <= '9' && i < sp) {
",4,5,1,3,7,0,0,0,0,19,47,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,564,"            buf[i] = '0';
",0,0,1,1,2,0,0,0,0,6,13,8,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,568,"      result[1] = new Dfp(this, new String(buf));
",2,0,1,3,6,0,0,4,0,9,43,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,570,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,578,"        if (sqr2String == null || sqr2String.length() < highPrecisionDecimalDigits - 3) {
",4,4,0,2,5,0,4,0,0,12,81,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,581,"            final DfpField highPrecisionField = new DfpField(highPrecisionDecimalDigits, false);
",4,0,0,1,2,1,0,4,0,10,84,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,582,"            final Dfp highPrecisionOne        = new Dfp(highPrecisionField, 1);
",4,0,0,1,2,1,0,4,0,9,67,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,583,"            final Dfp highPrecisionTwo        = new Dfp(highPrecisionField, 2);
",4,0,0,1,2,1,0,4,0,9,67,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,584,"            final Dfp highPrecisionThree      = new Dfp(highPrecisionField, 3);
",4,0,0,1,2,1,0,4,0,9,67,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,586,"            final Dfp highPrecisionSqr2 = highPrecisionTwo.sqrt();
",2,0,0,1,2,1,4,2,0,9,54,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,587,"            sqr2String           = highPrecisionSqr2.toString();
",2,0,0,1,2,0,4,0,0,7,52,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,588,"            sqr2ReciprocalString = highPrecisionOne.divide(highPrecisionSqr2).toString();
",2,0,0,2,4,0,8,0,0,11,77,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,590,"            final Dfp highPrecisionSqr3 = highPrecisionThree.sqrt();
",2,0,0,1,2,1,4,2,0,9,56,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,591,"            sqr3String           = highPrecisionSqr3.toString();
",2,0,0,1,2,0,4,0,0,7,52,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,592,"            sqr3ReciprocalString = highPrecisionOne.divide(highPrecisionSqr3).toString();
",2,0,0,2,4,0,8,0,0,11,77,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,594,"            piString   = computePi(highPrecisionOne, highPrecisionTwo, highPrecisionThree).toString();
",2,0,0,2,4,0,10,0,0,13,90,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,595,"            eString    = computeExp(highPrecisionOne, highPrecisionOne).toString();
",2,0,0,2,4,0,8,0,0,11,71,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,596,"            ln2String  = computeLn(highPrecisionTwo, highPrecisionOne, highPrecisionTwo).toString();
",2,0,0,2,4,0,10,0,0,13,88,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,597,"            ln5String  = computeLn(new Dfp(highPrecisionField, 5),  highPrecisionOne, highPrecisionTwo).toString();
",4,0,0,3,6,0,8,2,0,15,103,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,598,"            ln10String = computeLn(new Dfp(highPrecisionField, 10), highPrecisionOne, highPrecisionTwo).toString();
",4,0,0,3,6,0,8,2,0,15,103,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,601,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,611,"        Dfp sqrt2   = two.sqrt();
",2,0,0,1,2,0,4,2,0,8,25,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,612,"        Dfp yk      = sqrt2.subtract(one);
",2,0,0,1,2,0,6,2,0,10,34,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,613,"        Dfp four    = two.add(two);
",2,0,0,1,2,0,6,2,0,10,27,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,614,"        Dfp two2kp3 = two;
",4,0,0,0,0,0,0,2,0,6,18,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,615,"        Dfp ak      = two.multiply(three.subtract(two.multiply(sqrt2)));
",2,0,0,3,6,0,14,2,0,18,64,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,623,"        for (int i = 1; i < 20; i++) {
",6,1,0,1,3,0,0,0,0,8,30,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,624,"            final Dfp ykM1 = yk;
",4,0,0,0,0,1,0,2,0,7,20,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,626,"            final Dfp y2         = yk.multiply(yk);
",2,0,0,1,2,1,6,2,0,11,39,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,627,"            final Dfp oneMinusY4 = one.subtract(y2.multiply(y2));
",2,0,0,2,4,1,10,2,0,15,53,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,628,"            final Dfp s          = oneMinusY4.sqrt().sqrt();
",2,0,0,2,4,1,6,2,0,11,48,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,629,"            yk = one.subtract(s).divide(one.add(s));
",2,0,0,3,6,0,14,0,0,17,40,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,631,"            two2kp3 = two2kp3.multiply(four);
",2,0,0,1,2,0,6,0,0,9,33,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,633,"            final Dfp p = one.add(yk);
",2,0,0,1,2,1,6,2,0,11,26,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,634,"            final Dfp p2 = p.multiply(p);
",2,0,0,1,2,1,6,2,0,11,29,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,635,"            ak = ak.multiply(p2.multiply(p2)).subtract(two2kp3.multiply(yk).multiply(one.add(yk).add(yk.multiply(yk))));
",2,0,0,8,16,0,34,0,0,37,108,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,637,"            if (yk.equals(ykM1)) {
",0,0,0,2,5,0,6,0,0,6,22,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,638,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,642,"        return one.divide(ak);
",0,0,0,1,2,1,6,0,0,6,22,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,653,"        Dfp y  = new Dfp(one);
",4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,654,"        Dfp py = new Dfp(one);
",4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,655,"        Dfp f  = new Dfp(one);
",4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,656,"        Dfp fi = new Dfp(one);
",4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,657,"        Dfp x  = new Dfp(one);
",4,0,0,1,2,0,0,4,0,8,22,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,659,"        for (int i = 0; i < 10000; i++) {
",6,1,0,1,3,0,0,0,0,8,33,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,660,"            x = x.multiply(a);
",2,0,0,1,2,0,6,0,0,9,18,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,661,"            y = y.add(x.divide(f));
",2,0,0,2,4,0,10,0,0,13,23,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,662,"            fi = fi.add(one);
",2,0,0,1,2,0,6,0,0,9,17,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,663,"            f = f.multiply(fi);
",2,0,0,1,2,0,6,0,0,9,19,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,664,"            if (y.equals(py)) {
",0,0,0,2,5,0,6,0,0,6,19,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,665,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,667,"            py = new Dfp(y);
",4,0,0,1,2,0,0,2,0,7,16,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,670,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,736,"        int den = 1;
",2,0,0,0,0,0,0,0,0,2,12,5,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,737,"        Dfp x = a.add(new Dfp(a.getField(), -1)).divide(a.add(one));
",2,0,0,5,10,0,16,4,0,23,60,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,739,"        Dfp y = new Dfp(x);
",4,0,0,1,2,0,0,4,0,8,19,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,740,"        Dfp num = new Dfp(x);
",4,0,0,1,2,0,0,4,0,8,21,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,741,"        Dfp py = new Dfp(y);
",4,0,0,1,2,0,0,4,0,8,20,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,742,"        for (int i = 0; i < 10000; i++) {
",6,1,0,1,3,0,0,0,0,8,33,4,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,743,"            num = num.multiply(x);
",2,0,0,1,2,0,6,0,0,9,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,744,"            num = num.multiply(x);
",2,0,0,1,2,0,6,0,0,9,22,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,745,"            den = den + 2;
",4,1,0,0,0,0,0,0,0,6,14,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,746,"            Dfp t = num.divide(den);
",2,0,0,1,2,0,6,2,0,10,24,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,747,"            y = y.add(t);
",2,0,0,1,2,0,6,0,0,9,13,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,748,"            if (y.equals(py)) {
",0,0,0,2,5,0,6,0,0,6,19,7,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,749,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,751,"            py = new Dfp(y);
",4,0,0,1,2,0,0,2,0,7,16,6,0.01351,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,754,"        return y.multiply(two);
",0,0,0,1,2,1,6,0,0,6,23,5,0.01351,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1489,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1501,"        if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1525,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1539,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1556,"        if (y < 8e298 && y > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1557,"            double tmp1 = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1558,"            ya = y + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,11,21,6,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1559,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1560,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1568,"        final double lores = log(x, lns);
",2,0,0,1,2,1,6,0,0,9,33,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1569,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1573,"        double lna = lns[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1574,"        double lnb = lns[1];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1577,"        double tmp1 = lna * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1578,"        double tmp2 = lna + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1579,"        lnb += lna - tmp2;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1580,"        lna = tmp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1583,"        final double aa = lna * ya;
",6,1,0,0,0,1,0,0,0,8,27,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1584,"        final double ab = lna * yb + lnb * ya + lnb * yb;
",14,5,0,0,0,1,0,0,0,20,49,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1586,"        lna = aa+ab;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1587,"        lnb = -(lna - aa - ab);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1589,"        double z = 1.0 / 120.0;
",2,1,0,0,0,0,0,0,0,3,23,5,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1590,"        z = z * lnb + (1.0 / 24.0);
",6,3,0,1,2,0,0,0,0,10,27,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1591,"        z = z * lnb + (1.0 / 6.0);
",6,3,0,1,2,0,0,0,0,10,26,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1592,"        z = z * lnb + 0.5;
",6,2,0,0,0,0,0,0,0,9,18,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1593,"        z = z * lnb + 1.0;
",6,2,0,0,0,0,0,0,0,9,18,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1594,"        z = z * lnb;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1596,"        final double result = exp(lna, z, null);
",2,0,0,1,2,1,6,0,0,10,40,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1598,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00319,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1478,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00318,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1442,"        final double lns[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,35,4,0.00313,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1444,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00313,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1448,"        if (x != x) { // X is NaN
",4,1,0,1,3,0,0,0,0,5,25,4,0.00313,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1453,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00313,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,897,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00273,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,898,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00273,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,887,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.00269,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,889,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00269,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,945,"            result = tempC*z + tempB + tempA;
",10,3,0,0,0,0,0,0,0,14,33,6,0.00257,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1245,"            double tmp = epsilon * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,36,7,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1246,"            double aa = epsilon + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1247,"            double ab = epsilon - aa;
",6,1,0,0,0,0,0,0,0,7,25,7,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1248,"            double xa = aa;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1249,"            double xb = ab;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1252,"            final double numer = bits & 0x3ffffffffffL;
",4,1,0,0,0,1,0,0,0,6,43,6,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1253,"            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);
",6,2,0,1,2,1,0,0,0,9,65,6,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1254,"            aa = numer - xa*denom - xb * denom;
",12,4,0,0,0,0,0,0,0,17,35,6,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1255,"            xb += aa / denom;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1258,"            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
",6,1,1,2,4,1,0,0,0,10,71,6,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1259,"            double ya = lnCoef_last[0];
",2,0,1,1,2,0,0,0,0,4,27,7,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1260,"            double yb = lnCoef_last[1];
",2,0,1,1,2,0,0,0,0,4,27,7,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1262,"            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,55,6,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1264,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1265,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1267,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1268,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1269,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1272,"                final double[] lnCoef_i = LN_HI_PREC_COEF[i];
",2,0,1,2,4,1,0,0,0,7,45,8,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1273,"                aa = ya + lnCoef_i[0];
",4,1,1,1,2,0,0,0,0,8,22,8,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1274,"                ab = yb + lnCoef_i[1];
",4,1,1,1,2,0,0,0,0,8,22,8,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1276,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1277,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1278,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1282,"            aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,6,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1283,"            ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,6,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1291,"            lnza = aa + ab;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1292,"            lnzb = -(lnza - aa - ab);
",8,1,0,1,2,0,0,0,0,11,25,6,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1293,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1347,"            hiPrec[0] = a;
",2,0,1,1,2,0,0,0,0,5,14,6,0.00252,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1348,"            hiPrec[1] = b;
",2,0,1,1,2,0,0,0,0,5,14,6,0.00252,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,35,"    public BitsStreamGenerator() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.00251,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,36,"        nextGaussian = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,26,4,0.00251,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00251,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,165,"        nextGaussian = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,26,4,0.00251,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,166,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00251,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1178,"            if (x < 1.01 && x > 0.99 && hiPrec == null) {
",6,5,0,1,3,0,0,0,0,11,45,6,0.00241,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3487,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00209,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,905,"        final int intFrac = (int) ((x - intVal) * 1024.0);
",6,2,0,3,6,1,0,0,0,9,50,4,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,906,"        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,907,"        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,913,"        final double epsilon = x - (intVal + intFrac / 1024.0);
",8,3,0,1,2,1,0,0,0,12,55,4,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,922,"        double z = 0.04168701738764507;
",2,0,0,0,0,0,0,0,0,2,31,5,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,923,"        z = z * epsilon + 0.1666666505023083;
",6,2,0,0,0,0,0,0,0,9,37,4,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,924,"        z = z * epsilon + 0.5000000000042687;
",6,2,0,0,0,0,0,0,0,9,37,4,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,925,"        z = z * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,22,4,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,926,"        z = z * epsilon + -3.940510424527919E-20;
",6,2,0,0,0,0,0,0,0,10,41,4,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,933,"        double tempA = intPartA * fracPartA;
",6,1,0,0,0,0,0,0,0,7,36,5,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,934,"        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;
",14,5,0,0,0,0,0,0,0,19,82,5,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,940,"        final double tempC = tempB + tempA;
",6,1,0,0,0,1,0,0,0,8,35,4,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,942,"        if (extra != 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,948,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,954,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,15,6142,"        return EXP_INT_A.clone();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,15,6150,"        return EXP_INT_B.clone();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3703,"    private static class ExpIntTable {
",2,0,0,0,1,2,0,0,0,4,34,2,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3735,"                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();
",2,0,0,1,2,0,4,0,0,7,54,7,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3736,"                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();
",2,0,0,1,2,0,4,0,0,7,54,7,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3738,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00174,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,15,6158,"        return EXP_FRAC_A.clone();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00173,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,15,6166,"        return EXP_FRAC_B.clone();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00173,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3742,"    private static class ExpFracTable {
",2,0,0,0,1,2,0,0,0,4,35,2,0.00173,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3768,"                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();
",2,0,0,1,2,0,4,0,0,7,56,7,0.00173,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3769,"                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();
",2,0,0,1,2,0,4,0,0,7,56,7,0.00173,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3771,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00173,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,849,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00168,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1227,"        final double[] lnm = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];
",8,2,0,5,10,1,0,0,0,11,79,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1238,"        final double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));
",8,4,0,3,6,1,0,0,0,13,95,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1240,"        double lnza = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1241,"        double lnzb = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1243,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1319,"        double a = LN_2_A*exp;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1320,"        double b = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1321,"        double c = a+lnm[0];
",4,1,1,1,2,0,0,0,0,7,20,5,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1322,"        double d = -(c-a-lnm[0]);
",6,1,1,2,4,0,0,0,0,10,25,5,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1323,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1324,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1326,"        c = a + lnza;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1327,"        d = -(c - a - lnza);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1328,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1329,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1331,"        c = a + LN_2_B*exp;
",8,2,0,0,0,0,0,0,0,11,19,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1332,"        d = -(c - a - LN_2_B*exp);
",10,2,0,1,2,0,0,0,0,14,26,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1333,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1334,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1336,"        c = a + lnm[1];
",4,1,1,1,2,0,0,0,0,8,15,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1337,"        d = -(c - a - lnm[1]);
",6,1,1,2,4,0,0,0,0,11,22,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1338,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1339,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1341,"        c = a + lnzb;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1342,"        d = -(c - a - lnzb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1343,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1344,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1346,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1351,"        return a + b;
",4,1,0,0,0,1,0,0,0,5,13,4,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,15,6174,"        return LN_MANT.clone();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3775,"    private static class lnMant {
",2,0,0,0,1,2,0,0,0,4,29,2,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3789,"                LN_MANT = FastMathLiteralArrays.loadLnMant();
",2,0,0,1,2,0,4,0,0,7,45,7,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3791,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1155,"        int exp = (int)(bits >> 52)-1023;
",4,2,0,2,4,0,0,0,0,6,33,5,0.00160,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1157,"        if ((bits & 0x7ff0000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,40,4,0.00160,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1177,"        if (exp == -1 || exp == 0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.00160,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1132,"        long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00159,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1135,"        if ((bits & 0x8000000000000000L) != 0 || x != x) {
",6,4,0,2,5,0,0,0,0,10,50,4,0.00159,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1146,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00159,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1129,"        if (x==0) { // Handle special case of +0/-0
",2,1,0,1,3,0,0,0,0,3,43,4,0.00159,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,15,29,"    private static final double[] EXP_INT_A = new double[] {
",2,0,0,2,5,3,0,0,0,5,56,2,0.00142,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,15,1535,"    private static final double[] EXP_INT_B = new double[] {
",2,0,0,2,5,3,0,0,0,5,56,2,0.00142,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,15,3043,"    private static final double[] EXP_FRAC_A = new double[] {
",2,0,0,2,5,3,0,0,0,5,57,2,0.00142,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,15,4074,"    private static final double[] EXP_FRAC_B = new double[] {
",2,0,0,2,5,3,0,0,0,5,57,2,0.00142,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,15,5103,"    private static final double[][] LN_MANT = new double[][] {
",2,0,0,4,9,3,0,0,0,5,58,2,0.00142,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,82,"    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);
",6,0,0,1,2,3,4,0,0,13,77,2,0.00041,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,115,"    private static final double LN_QUICK_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,0.00041,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,128,"    private static final double LN_HI_PREC_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,51,2,0.00041,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,141,"    private static final double SINE_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,44,2,0.00041,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,160,"    private static final double SINE_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,44,2,0.00041,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,179,"    private static final double COSINE_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,46,2,0.00041,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,198,"    private static final double COSINE_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,46,2,0.00041,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,218,"    private static final double TANGENT_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,47,2,0.00041,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,237,"    private static final double TANGENT_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,47,2,0.00041,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,256,"    private static final long RECIP_2PI[] = new long[] {
",2,0,0,2,5,3,0,0,0,5,52,2,0.00041,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,277,"    private static final long PI_O_4_BITS[] = new long[] {
",2,0,0,2,5,3,0,0,0,5,54,2,0.00041,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,285,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};
",2,0,0,2,4,3,0,0,0,5,126,2,0.00041,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,288,"    private static final double CBRTTWO[] = { 0.6299605249474366,
",2,0,0,1,3,3,0,0,0,5,61,2,0.00041,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,352,"    private FastMath() {}
",2,0,0,2,4,1,0,0,0,3,21,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,364,"        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){
",12,3,0,1,3,0,0,0,0,16,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,365,"            return d; // These are un-normalised - don't try to convert
",2,0,0,0,0,1,0,0,0,2,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,367,"        long xl = Double.doubleToLongBits(d);
",2,0,0,1,2,0,6,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,368,"        xl = xl & MASK_30BITS; // Drop low order bits
",6,1,0,0,0,0,0,0,0,8,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,369,"        return Double.longBitsToDouble(xl);
",0,0,0,1,2,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,378,"        return Math.sqrt(a);
",0,0,0,1,2,1,6,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,386,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,387,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,395,"      if (x > 20) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,396,"          if (x >= LOG_MAX_VALUE) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,398,"              final double t = exp(0.5 * x);
",4,1,0,1,2,1,2,0,0,8,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,399,"              return (0.5 * t) * t;
",4,2,0,1,2,1,0,0,0,6,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,401,"              return 0.5 * exp(x);
",0,1,0,1,2,1,4,0,0,5,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,403,"      } else if (x < -20) {
",2,1,0,1,4,0,0,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,404,"          if (x <= -LOG_MAX_VALUE) {
",4,1,0,1,3,0,0,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,406,"              final double t = exp(-0.5 * x);
",4,1,0,1,2,1,2,0,0,9,31,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,407,"              return (0.5 * t) * t;
",4,2,0,1,2,1,0,0,0,6,21,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,409,"              return 0.5 * exp(-x);
",2,1,0,1,2,1,2,0,0,6,21,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,413,"      final double hiPrec[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,414,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,415,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,417,"      exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,419,"      double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,420,"      double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,422,"      double temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,423,"      double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,424,"      double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,427,"      double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,428,"      temp = recip * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,429,"      double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,430,"      double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,433,"      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,435,"      recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,438,"      temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,439,"      yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,440,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,441,"      temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,442,"      yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,443,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,445,"      double result = ya + yb;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,446,"      result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,447,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,455,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,456,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,457,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,465,"      if (x > 20) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,466,"          if (x >= LOG_MAX_VALUE) {
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,468,"              final double t = exp(0.5 * x);
",4,1,0,1,2,1,2,0,0,8,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,469,"              return (0.5 * t) * t;
",4,2,0,1,2,1,0,0,0,6,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,471,"              return 0.5 * exp(x);
",0,1,0,1,2,1,4,0,0,5,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,473,"      } else if (x < -20) {
",2,1,0,1,4,0,0,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,474,"          if (x <= -LOG_MAX_VALUE) {
",4,1,0,1,3,0,0,0,0,6,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,476,"              final double t = exp(-0.5 * x);
",4,1,0,1,2,1,2,0,0,9,31,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,477,"              return (-0.5 * t) * t;
",4,2,0,1,2,1,0,0,0,7,22,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,479,"              return -0.5 * exp(-x);
",2,1,0,1,2,1,2,0,0,7,22,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,483,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,484,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,487,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,488,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,489,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,494,"      if (x > 0.25) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,495,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,496,"          exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,498,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,499,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,501,"          double temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,502,"          double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,503,"          double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,506,"          double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,507,"          temp = recip * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,508,"          double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,509,"          double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,512,"          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,514,"          recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,516,"          recipa = -recipa;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,517,"          recipb = -recipb;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,520,"          temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,521,"          yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,522,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,523,"          temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,524,"          yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,525,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,527,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,528,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,529,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,531,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,532,"          expm1(x, hiPrec);
",0,0,0,1,2,0,6,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,534,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,535,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,538,"          double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,539,"          double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,540,"          double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,541,"          double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,542,"          double temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,543,"          double ra = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,544,"          double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,546,"          temp = denom * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,547,"          double za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,548,"          double zb = denom - za;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,550,"          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,553,"          rb += yb*denomr;                        // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,554,"          rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,557,"          temp = ya + ra;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,558,"          yb += -(temp - ya - ra);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,559,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,560,"          temp = ya + rb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,561,"          yb += -(temp - ya - rb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,562,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,564,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,565,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,568,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,569,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,572,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,580,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,582,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,583,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,592,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,593,"          return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,596,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,597,"          return -1.0;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,600,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,601,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,604,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,605,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,606,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,610,"      if (x >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,611,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,613,"          exp(x*2.0, 0.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,615,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,616,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,619,"          double na = -1.0 + ya;
",4,1,0,0,0,0,0,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,620,"          double nb = -(na + 1.0 - ya);
",6,2,0,1,2,0,0,0,0,9,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,621,"          double temp = na + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,622,"          nb += -(temp - na - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,623,"          na = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,626,"          double da = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,627,"          double db = -(da - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,628,"          temp = da + yb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,629,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,630,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,632,"          temp = da * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,633,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,634,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,637,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,638,"          temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,639,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,640,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,643,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,646,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,648,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,650,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,651,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,653,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,655,"          expm1(x*2.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,657,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,658,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,661,"          double na = ya;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,662,"          double nb = yb;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,665,"          double da = 2.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,666,"          double db = -(da - 2.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,667,"          double temp = da + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,668,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,669,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,671,"          temp = da * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,672,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,673,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,676,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,677,"          temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,678,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,679,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,682,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,685,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,687,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,689,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,692,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,693,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,696,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,704,"        return FastMath.log(a + FastMath.sqrt(a * a - 1));
",6,3,0,2,4,1,8,0,0,17,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,712,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,713,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,714,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,715,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,719,"        if (a > 0.167) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,720,"            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);
",8,3,0,2,4,0,8,0,0,20,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,722,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,723,"            if (a > 0.097) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,724,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",52,17,0,8,16,0,0,0,0,70,212,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,725,"            } else if (a > 0.036) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,726,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",40,13,0,6,12,0,0,0,0,54,160,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,727,"            } else if (a > 0.0036) {
",2,1,0,1,4,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,728,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",28,9,0,4,8,0,0,0,0,38,109,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,730,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);
",16,5,0,2,4,0,0,0,0,22,63,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,734,"        return negative ? -absAsinh : absAsinh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,742,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,743,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,744,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,745,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,749,"        if (a > 0.15) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,750,"            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));
",6,4,0,3,6,0,4,0,0,15,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,752,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,753,"            if (a > 0.087) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,754,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));
",36,17,0,8,16,0,0,0,0,54,141,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,755,"            } else if (a > 0.031) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,756,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));
",28,13,0,6,12,0,0,0,0,42,109,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,757,"            } else if (a > 0.003) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,758,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));
",20,9,0,4,8,0,0,0,0,30,77,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,760,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));
",12,5,0,2,4,0,0,0,0,18,47,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,764,"        return negative ? -absAtanh : absAtanh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,773,"        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a
",6,2,0,3,6,2,0,0,0,9,87,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,782,"        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a
",6,2,0,3,6,2,0,0,0,9,91,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,790,"        return nextAfter(a, Double.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,798,"        return nextAfter(a, Float.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,806,"        return Math.random();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,830,"        return exp(x, 0.0, null);
",0,0,0,1,2,1,4,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,850,"            intVal = (int) -x;
",4,0,0,1,2,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,852,"            if (intVal > 746) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,853,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,854,"                    hiPrec[0] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,855,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,857,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,860,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,862,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,863,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,864,"                    hiPrec[0] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,865,"                    hiPrec[1] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,867,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,870,"            if (intVal == 709) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,872,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,873,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,874,"                    hiPrec[0] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,875,"                    hiPrec[1] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,877,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,880,"            intVal++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,882,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,883,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,885,"            intVal = -intVal;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,890,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,891,"                    hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,892,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,894,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,943,"            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;
",20,7,0,0,0,0,0,0,0,28,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,950,"            hiPrec[0] = tempA;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,951,"            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;
",16,6,1,1,2,0,0,0,0,25,58,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,962,"      return expm1(x, null);
",0,0,0,1,2,1,4,0,0,5,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,971,"        if (x != x || x == 0.0) { // NaN or zero
",6,3,0,1,3,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,972,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,975,"        if (x <= -1.0 || x >= 1.0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,978,"            double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,979,"            exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,980,"            if (x > 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,981,"                return -1.0 + hiPrec[0] + hiPrec[1];
",0,1,1,2,4,1,0,0,0,6,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,983,"                final double ra = -1.0 + hiPrec[0];
",2,1,1,1,2,1,0,0,0,7,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,984,"                double rb = -(ra + 1.0 - hiPrec[0]);
",4,2,1,2,4,0,0,0,0,9,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,985,"                rb += hiPrec[1];
",2,0,1,1,2,0,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,986,"                return ra + rb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,993,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,995,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,996,"            x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,997,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1001,"            int intFrac = (int) (x * 1024.0);
",4,1,0,2,4,0,0,0,0,5,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1002,"            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;
",6,1,1,1,2,0,0,0,0,9,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1003,"            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,0,0,0,0,8,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1005,"            double temp = tempA + tempB;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1006,"            tempB = -(temp - tempA - tempB);
",8,1,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1007,"            tempA = temp;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1009,"            temp = tempA * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1010,"            baseA = tempA + temp - temp;
",8,2,0,0,0,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1011,"            baseB = tempB + (tempA - baseA);
",8,2,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1013,"            epsilon = x - intFrac/1024.0;
",6,2,0,0,0,0,0,0,0,9,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1018,"        double zb = 0.008336750013465571;
",2,0,0,0,0,0,0,0,0,2,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1019,"        zb = zb * epsilon + 0.041666663879186654;
",6,2,0,0,0,0,0,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1020,"        zb = zb * epsilon + 0.16666666666745392;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1021,"        zb = zb * epsilon + 0.49999999999999994;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1022,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1023,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1025,"        double za = epsilon;
",4,0,0,0,0,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1026,"        double temp = za + zb;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1027,"        zb = -(temp - za - zb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1028,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1030,"        temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1031,"        temp = za + temp - temp;
",8,2,0,0,0,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1032,"        zb += za - temp;
",6,1,0,0,0,0,0,0,0,8,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1033,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1036,"        double ya = za * baseA;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1038,"        temp = ya + za * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1039,"        double yb = -(temp - ya - za * baseB);
",10,2,0,1,2,0,0,0,0,13,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1040,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1042,"        temp = ya + zb * baseA;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1043,"        yb += -(temp - ya - zb * baseA);
",10,2,0,1,2,0,0,0,0,14,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1044,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1046,"        temp = ya + zb * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1047,"        yb += -(temp - ya - zb*baseB);
",10,2,0,1,2,0,0,0,0,14,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1048,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1052,"        temp = ya + baseA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1053,"        yb += -(temp - baseA - ya);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1054,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1056,"        temp = ya + za;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1058,"        yb += -(temp - ya - za);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1059,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1061,"        temp = ya + baseB;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1063,"        yb += -(temp - ya - baseB);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1064,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1066,"        temp = ya + zb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1068,"        yb += -(temp - ya - zb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1069,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1071,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1073,"            double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1074,"            double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1075,"            double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1076,"            double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1077,"            temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1078,"            final double ra = ratio + temp - temp;
",8,2,0,0,0,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1079,"            double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1081,"            temp = denom * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1082,"            za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1083,"            zb = denom - za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1085,"            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1096,"            rb += yb * denomr;                      // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1097,"            rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1100,"            ya = -ra;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1101,"            yb = -rb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1104,"        if (hiPrecOut != null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1105,"            hiPrecOut[0] = ya;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1106,"            hiPrecOut[1] = yb;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1109,"        return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1119,"        return log(x, null);
",0,0,0,1,2,1,4,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1130,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1136,"            if (x != 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1137,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1138,"                    hiPrec[0] = Double.NaN;
",4,0,1,1,2,0,0,0,0,7,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1141,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1147,"            if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1148,"                hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1151,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1159,"            if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1161,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1162,"                    hiPrec[0] = Double.NEGATIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1165,"                return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1169,"            bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1170,"            while ( (bits & 0x0010000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1171,"                --exp;
",2,0,0,0,0,0,0,0,0,3,6,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1172,"                bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1183,"                double xa = x - 1.0;
",4,1,0,0,0,0,0,0,0,5,20,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1184,"                double xb = xa - x + 1.0;
",6,2,0,0,0,0,0,0,0,8,25,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1185,"                double tmp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1186,"                double aa = xa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1187,"                double ab = xa - aa;
",6,1,0,0,0,0,0,0,0,7,20,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1188,"                xa = aa;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1189,"                xb = ab;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1191,"                final double[] lnCoef_last = LN_QUICK_COEF[LN_QUICK_COEF.length - 1];
",6,1,1,2,4,1,0,0,0,10,69,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1192,"                double ya = lnCoef_last[0];
",2,0,1,1,2,0,0,0,0,4,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1193,"                double yb = lnCoef_last[1];
",2,0,1,1,2,0,0,0,0,4,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1195,"                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,53,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1197,"                    aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1198,"                    ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1200,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1201,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1202,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1205,"                    final double[] lnCoef_i = LN_QUICK_COEF[i];
",2,0,1,2,4,1,0,0,0,7,43,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1206,"                    aa = ya + lnCoef_i[0];
",4,1,1,1,2,0,0,0,0,8,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1207,"                    ab = yb + lnCoef_i[1];
",4,1,1,1,2,0,0,0,0,8,22,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1209,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1210,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1211,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1215,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1216,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1218,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1219,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1220,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1222,"                return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1296,"            lnza = -0.16624882440418567;
",2,0,0,0,0,0,0,0,0,4,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1297,"            lnza = lnza * epsilon + 0.19999954120254515;
",6,2,0,0,0,0,0,0,0,9,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1298,"            lnza = lnza * epsilon + -0.2499999997677497;
",6,2,0,0,0,0,0,0,0,10,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1299,"            lnza = lnza * epsilon + 0.3333333333332802;
",6,2,0,0,0,0,0,0,0,9,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1300,"            lnza = lnza * epsilon + -0.5;
",6,2,0,0,0,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1301,"            lnza = lnza * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1302,"            lnza = lnza * epsilon;
",6,1,0,0,0,0,0,0,0,8,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1361,"        if (x == -1) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1362,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1365,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1366,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1369,"        if (x > 1e-6 ||
",2,2,0,0,1,0,0,0,0,4,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1371,"            final double xpa = 1 + x;
",4,1,0,0,0,1,0,0,0,6,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1372,"            final double xpb = -(xpa - 1 - x);
",6,1,0,1,2,1,0,0,0,9,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1374,"            final double[] hiPrec = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1375,"            final double lores = log(xpa, hiPrec);
",2,0,0,1,2,1,6,0,0,9,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1376,"            if (Double.isInfinite(lores)) { // Don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1377,"                return lores;
",2,0,0,0,0,1,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1382,"            final double fx1 = xpb / xpa;
",6,1,0,0,0,1,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1383,"            final double epsilon = 0.5 * fx1 + 1;
",4,2,0,0,0,1,0,0,0,7,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1384,"            return epsilon * fx1 + hiPrec[1] + hiPrec[0];
",4,3,1,2,4,1,0,0,0,11,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1387,"            final double y = (x * F_1_3 - F_1_2) * x + 1;
",10,4,0,1,2,1,0,0,0,15,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1388,"            return y * x;
",4,1,0,0,0,1,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1397,"        final double hiPrec[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1399,"        final double lores = log(x, hiPrec);
",2,0,0,1,2,1,6,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1400,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1401,"            return lores;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1404,"        final double tmp = hiPrec[0] * HEX_40000000;
",4,1,1,1,2,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1405,"        final double lna = hiPrec[0] + tmp - tmp;
",6,2,1,1,2,1,0,0,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1406,"        final double lnb = hiPrec[0] - lna + hiPrec[1];
",4,2,1,2,4,1,0,0,0,11,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1408,"        final double rln10a = 0.4342944622039795;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1409,"        final double rln10b = 1.9699272335463627E-8;
",2,0,0,0,0,1,0,0,0,3,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1411,"        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;
",16,7,0,0,0,1,0,0,0,23,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1431,"        return log(x) / log(base);
",0,1,0,2,4,1,8,0,0,9,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1445,"            return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1449,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1454,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1455,"            if ((bits & 0x8000000000000000L) != 0) {
",2,2,0,2,5,0,0,0,0,4,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1457,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1459,"                if (y < 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1460,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1463,"                if (y > 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1464,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1468,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1469,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1471,"            if (y > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1472,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1475,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1479,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1480,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1482,"            if (y < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1483,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1485,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1490,"            if (x * x == 1.0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1491,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1494,"            if (x * x > 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1495,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1497,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1502,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1503,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1506,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1507,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1508,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1509,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1512,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1515,"            if (y > 0)  {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1516,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1517,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1518,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1521,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1527,"            if (x * x == 1.0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1528,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1531,"            if (x * x < 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1532,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1534,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1545,"            if (y == (long) y) {
",4,1,0,2,5,0,0,0,0,5,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1547,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
",6,2,0,4,8,1,8,0,0,19,53,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1549,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1561,"            double tmp1 = y * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,45,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1562,"            double tmp2 = tmp1 * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1563,"            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
",12,3,0,1,2,0,0,0,0,16,56,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1564,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1570,"            return lores;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1611,"        if (e == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1612,"            return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1613,"        } else if (e < 0) {
",2,1,0,1,4,0,0,0,0,3,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1614,"            e = -e;
",4,0,0,0,0,0,0,0,0,6,7,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1615,"            d = 1.0 / d;
",4,1,0,0,0,0,0,0,0,6,12,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1620,"        final int splitFactor = 0x8000001;
",2,0,0,0,0,1,0,0,0,3,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1621,"        final double cd       = splitFactor * d;
",6,1,0,0,0,1,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1622,"        final double d1High   = cd - (cd - d);
",8,2,0,1,2,1,0,0,0,11,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1623,"        final double d1Low    = d - d1High;
",6,1,0,0,0,1,0,0,0,8,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1626,"        double resultHigh = 1;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1627,"        double resultLow  = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1630,"        double d2p     = d;
",4,0,0,0,0,0,0,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1631,"        double d2pHigh = d1High;
",4,0,0,0,0,0,0,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1632,"        double d2pLow  = d1Low;
",4,0,0,0,0,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1634,"        while (e != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1636,"            if ((e & 0x1) != 0) {
",2,2,0,2,5,0,0,0,0,4,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1639,"                final double tmpHigh = resultHigh * d2p;
",6,1,0,0,0,1,0,0,0,8,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1640,"                final double cRH     = splitFactor * resultHigh;
",6,1,0,0,0,1,0,0,0,8,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1641,"                final double rHH     = cRH - (cRH - resultHigh);
",8,2,0,1,2,1,0,0,0,11,48,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1642,"                final double rHL     = resultHigh - rHH;
",6,1,0,0,0,1,0,0,0,8,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1643,"                final double tmpLow  = rHL * d2pLow - (((tmpHigh - rHH * d2pHigh) - rHL * d2pHigh) - rHH * d2pLow);
",20,8,0,3,6,1,0,0,0,29,99,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1644,"                resultHigh = tmpHigh;
",4,0,0,0,0,0,0,0,0,5,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1645,"                resultLow  = resultLow * d2p + tmpLow;
",8,2,0,0,0,0,0,0,0,11,38,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1650,"            final double tmpHigh = d2pHigh * d2p;
",6,1,0,0,0,1,0,0,0,8,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1651,"            final double cD2pH   = splitFactor * d2pHigh;
",6,1,0,0,0,1,0,0,0,8,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1652,"            final double d2pHH   = cD2pH - (cD2pH - d2pHigh);
",8,2,0,1,2,1,0,0,0,11,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1653,"            final double d2pHL   = d2pHigh - d2pHH;
",6,1,0,0,0,1,0,0,0,8,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1654,"            final double tmpLow  = d2pHL * d2pLow - (((tmpHigh - d2pHH * d2pHigh) - d2pHL * d2pHigh) - d2pHH * d2pLow);
",20,8,0,3,6,1,0,0,0,29,107,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1655,"            final double cTmpH   = splitFactor * tmpHigh;
",6,1,0,0,0,1,0,0,0,8,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1656,"            d2pHigh = cTmpH - (cTmpH - tmpHigh);
",8,2,0,1,2,0,0,0,0,11,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1657,"            d2pLow  = d2pLow * d2p + tmpLow + (tmpHigh - d2pHigh);
",12,4,0,1,2,0,0,0,0,17,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1658,"            d2p     = d2pHigh + d2pLow;
",6,1,0,0,0,0,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1660,"            e = e >> 1;
",4,1,0,0,0,0,0,0,0,6,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1662,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1664,"        return resultHigh + resultLow;
",4,1,0,0,0,1,0,0,0,5,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1676,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1678,"        double p = 2.7553817452272217E-6;
",2,0,0,0,0,0,0,0,0,2,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1679,"        p = p * x2 + -1.9841269659586505E-4;
",6,2,0,0,0,0,0,0,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1680,"        p = p * x2 + 0.008333333333329196;
",6,2,0,0,0,0,0,0,0,9,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1681,"        p = p * x2 + -0.16666666666666666;
",6,2,0,0,0,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1684,"        p = p * x2 * x;
",8,1,0,0,0,0,0,0,0,10,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1686,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1696,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1698,"        double p = 2.479773539153719E-5;
",2,0,0,0,0,0,0,0,0,2,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1699,"        p = p * x2 + -0.0013888888689039883;
",6,2,0,0,0,0,0,0,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1700,"        p = p * x2 + 0.041666666666621166;
",6,2,0,0,0,0,0,0,0,9,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1701,"        p = p * x2 + -0.49999999999999994;
",6,2,0,0,0,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1702,"        p *= x2;
",4,0,0,0,0,0,0,0,0,5,8,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1704,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1715,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1716,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1719,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1720,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1721,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1722,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1725,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1726,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1727,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1728,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1731,"        final double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,1,0,0,0,8,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1732,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1733,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1734,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1760,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1761,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1763,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1764,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1765,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1766,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1767,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1769,"        t = costA * sinEpsA;
",6,1,0,0,0,0,0,0,0,8,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1770,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1771,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1772,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1773,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1775,"        b = b + sintA * cosEpsB + costA * sinEpsB;
",12,4,0,0,0,0,0,0,0,17,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1790,"        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;
",18,6,0,0,0,0,0,0,0,25,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1817,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1818,"            t = ((costA + costB) * (cosEpsA + cosEpsB) -
",10,5,0,2,5,0,0,0,0,16,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1820,"            c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1821,"            d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1822,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1823,"            b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1826,"        result = a + b;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1828,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1839,"        final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1840,"        final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1842,"        final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1843,"        double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1844,"        b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1846,"        return sinQ(a, b);
",0,0,0,1,2,1,6,0,0,6,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1859,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1860,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1863,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1864,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1865,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1866,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1869,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1870,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1871,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1872,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1875,"        double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1876,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1877,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1878,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1903,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1904,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1907,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1908,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1909,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1910,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1911,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1913,"        t = costA*sinEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1914,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1915,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1916,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1917,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1919,"        b = b + sintA*cosEpsB + costA*sinEpsB;
",12,4,0,0,0,0,0,0,0,17,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1920,"        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;
",18,6,0,0,0,0,0,0,0,25,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1922,"        double sina = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1923,"        double sinb = -(sina - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1927,"        a = b = c = d = 0.0;
",8,0,0,0,0,0,0,0,0,12,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1929,"        t = costA*cosEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1930,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1931,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1932,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1933,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1935,"        t = -sintA*sinEpsA;
",6,1,0,0,0,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1936,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1937,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1938,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1939,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1941,"        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;
",16,6,0,0,0,0,0,0,0,23,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1942,"        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);
",16,6,0,1,2,0,0,0,0,23,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1944,"        double cosa = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1945,"        double cosb = -(cosa - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1947,"        if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1949,"            tmp = cosa; cosa = sina; sina = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1950,"            tmp = cosb; cosb = sinb; sinb = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1964,"        double est = sina/cosa;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1967,"        temp = est * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1968,"        double esta = (est + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1969,"        double estb =  est - esta;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1971,"        temp = cosa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1972,"        double cosaa = (cosa + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1973,"        double cosab =  cosa - cosaa;
",6,1,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1976,"        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding
",22,9,0,1,2,0,0,0,0,31,114,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1977,"        err += sinb/cosa;                     // Change in est due to sinb
",6,1,0,0,0,0,0,0,0,8,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1978,"        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb
",10,3,0,0,0,0,0,0,0,15,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1980,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1983,"            double xbadj = xb + est*est*xb;
",10,2,0,0,0,0,0,0,0,12,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1984,"            if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1985,"                xbadj = -xbadj;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1988,"            err += xbadj;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1991,"        return est+err;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2008,"        long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2009,"        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2012,"        inbits &= 0x000fffffffffffffL;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2013,"        inbits |= 0x0010000000000000L;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2016,"        exponent++;
",2,0,0,0,0,0,0,0,0,3,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2017,"        inbits <<= 11;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2023,"        int idx = exponent >> 6;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2024,"        int shift = exponent - (idx << 6);
",6,2,0,1,2,0,0,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2026,"        if (shift != 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2027,"            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);
",8,3,1,3,6,0,0,0,0,14,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2028,"            shpi0 |= RECIP_2PI[idx] >>> (64-shift);
",4,2,1,2,4,0,0,0,0,11,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2029,"            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));
",8,5,1,5,10,0,0,0,0,20,70,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2030,"            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));
",10,6,1,5,10,0,0,0,0,21,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2032,"            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];
",6,2,1,2,4,0,0,0,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2033,"            shpiA = RECIP_2PI[idx];
",2,0,1,1,2,0,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2034,"            shpiB = RECIP_2PI[idx+1];
",4,1,1,1,2,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2038,"        long a = inbits >>> 32;
",4,1,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2039,"        long b = inbits & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2041,"        long c = shpiA >>> 32;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2042,"        long d = shpiA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2044,"        long ac = a * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2045,"        long bd = b * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2046,"        long bc = b * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2047,"        long ad = a * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2049,"        long prodB = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2050,"        long prodA = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2052,"        boolean bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2053,"        boolean bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2054,"        boolean bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2057,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2059,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2062,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2063,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2065,"        prodB = prodB + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2066,"        prodA = prodA + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2068,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2071,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2073,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2077,"        c = shpiB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2078,"        d = shpiB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2079,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2080,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2081,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2084,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2086,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2087,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2088,"        prodB += ac;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2089,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2091,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2093,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2097,"        c = shpi0 >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2098,"        d = shpi0 & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2100,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2101,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2102,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2104,"        prodA += bd + ((bc + ad) << 32);
",8,3,0,2,4,0,0,0,0,12,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2116,"        int intPart = (int)(prodA >>> 62);
",4,1,0,2,4,0,0,0,0,5,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2119,"        prodA <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2120,"        prodA |= prodB >>> 62;
",4,1,0,0,0,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2121,"        prodB <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2124,"        a = prodA >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2125,"        b = prodA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2127,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2128,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2130,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2131,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2132,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2133,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2135,"        long prod2B = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2136,"        long prod2A = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2138,"        bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2139,"        bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2140,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2143,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2145,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2148,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2149,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2151,"        prod2B = prod2B + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2152,"        prod2A = prod2A + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2154,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2157,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2159,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2163,"        c = PI_O_4_BITS[1] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2164,"        d = PI_O_4_BITS[1] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2165,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2166,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2167,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2170,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2172,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2173,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2174,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2175,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2177,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2179,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2183,"        a = prodB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2184,"        b = prodB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2185,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2186,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2187,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2188,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2189,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2192,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2194,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2195,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2196,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2197,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2199,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2201,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2205,"        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits
",6,2,0,1,2,0,0,0,0,8,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2206,"        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits
",10,5,0,4,8,0,0,0,0,15,102,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2208,"        double sumA = tmpA + tmpB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2209,"        double sumB = -(sumA - tmpA - tmpB);
",8,1,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2212,"        result[0] = intPart;
",2,0,1,1,2,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2213,"        result[1] = sumA * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2214,"        result[2] = sumB * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2215,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2224,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2225,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2227,"        double xb = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2230,"        xa = x;
",4,0,0,0,0,0,0,0,0,5,7,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2231,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2232,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2233,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2237,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2238,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2239,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2240,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2242,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2245,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2246,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2250,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2254,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2255,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2256,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2257,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2258,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2259,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2260,"            final CodyWaite cw = new CodyWaite(xa, xb);
",6,0,0,1,2,1,0,4,0,11,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2261,"            quadrant = cw.getK() & 3;
",2,1,0,1,2,0,4,0,0,8,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2262,"            xa = cw.getRemA();
",2,0,0,1,2,0,4,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2263,"            xb = cw.getRemB();
",2,0,0,1,2,0,4,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2266,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2267,"            quadrant ^= 2;  // Flip bit 1
",2,0,0,0,0,0,0,0,0,3,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2270,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2272,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2274,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2276,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2278,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2280,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2291,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2294,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2295,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2296,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2299,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2300,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2304,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2305,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2309,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2310,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2311,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2312,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2313,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2314,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2315,"            final CodyWaite cw = new CodyWaite(xa, xb);
",6,0,0,1,2,1,0,4,0,11,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2316,"            quadrant = cw.getK() & 3;
",2,1,0,1,2,0,4,0,0,8,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2317,"            xa = cw.getRemA();
",2,0,0,1,2,0,4,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2318,"            xb = cw.getRemB();
",2,0,0,1,2,0,4,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2324,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2326,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2328,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2330,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2332,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2334,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2345,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2346,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2349,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2350,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2351,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2352,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2356,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2357,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2358,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2359,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2361,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2364,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2365,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2369,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2370,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2374,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2375,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2376,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2377,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2378,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2379,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2380,"            final CodyWaite cw = new CodyWaite(xa, xb);
",6,0,0,1,2,1,0,4,0,11,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2381,"            quadrant = cw.getK() & 3;
",2,1,0,1,2,0,4,0,0,8,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2382,"            xa = cw.getRemA();
",2,0,0,1,2,0,4,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2383,"            xb = cw.getRemB();
",2,0,0,1,2,0,4,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2386,"        if (xa > 1.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2388,"            final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2389,"            final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2391,"            final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2392,"            double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2393,"            b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2395,"            xa = a + b;
",6,1,0,0,0,0,0,0,0,8,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2396,"            xb = -(xa - a - b);
",8,1,0,1,2,0,0,0,0,11,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2397,"            quadrant ^= 1;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2398,"            negative ^= true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2402,"        if ((quadrant & 1) == 0) {
",2,2,0,2,5,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2403,"            result = tanQ(xa, xb, false);
",2,0,0,1,2,0,6,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2405,"            result = -tanQ(xa, xb, true);
",2,0,0,1,2,0,6,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2408,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2409,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2412,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2421,"        return atan(x, 0.0, false);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2431,"        boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2434,"        if (xa == 0.0) { // Matches +/- 0.0; return correct sign
",2,1,0,1,3,1,0,0,0,3,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2435,"            return leftPlane ? copySign(Math.PI, xa) : xa;
",8,0,0,1,2,1,4,0,0,12,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2438,"        if (xa < 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2440,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2441,"            xb = -xb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2442,"            negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2445,"        if (xa > 1.633123935319537E16) { // Very large input
",2,1,0,1,3,0,0,0,0,3,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2446,"            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);
",16,3,0,3,6,1,0,0,0,20,69,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2450,"        if (xa < 1) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2451,"            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);
",8,4,0,4,8,0,0,0,0,14,65,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2453,"            final double oneOverXa = 1 / xa;
",4,1,0,0,0,1,0,0,0,6,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2454,"            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);
",8,4,0,4,8,0,0,0,0,15,89,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2456,"        double epsA = xa - TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2457,"        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);
",6,2,1,2,4,0,0,0,0,13,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2458,"        epsB += xb - TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2460,"        double temp = epsA + epsB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2461,"        epsB = -(temp - epsA - epsB);
",8,1,0,1,2,0,0,0,0,11,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2462,"        epsA = temp;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2465,"        temp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2466,"        double ya = xa + temp - temp;
",8,2,0,0,0,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2467,"        double yb = xb + xa - ya;
",8,2,0,0,0,0,0,0,0,10,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2468,"        xa = ya;
",4,0,0,0,0,0,0,0,0,5,8,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2469,"        xb += yb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2472,"        if (idx == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2475,"            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
",6,5,1,5,10,1,0,0,0,20,91,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2477,"            ya = epsA * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2478,"            yb = epsB * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2479,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2480,"            double temp2 = xa * TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2481,"            double za = 1d + temp2;
",4,1,0,0,0,0,0,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2482,"            double zb = -(za - 1d - temp2);
",6,1,0,1,2,0,0,0,0,8,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2483,"            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];
",6,3,1,2,4,0,0,0,0,18,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2484,"            temp = za + temp2;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2485,"            zb += -(temp - za - temp2);
",8,1,0,1,2,0,0,0,0,11,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2486,"            za = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2488,"            zb += xb * TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2489,"            ya = epsA / za;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2491,"            temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2492,"            final double yaa = (ya + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2493,"            final double yab = ya - yaa;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2495,"            temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2496,"            final double zaa = (za + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2497,"            final double zab = za - zaa;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2500,"            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;
",22,9,0,1,2,0,0,0,0,32,65,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2502,"            yb += -epsA * zb / za / za;
",10,3,0,0,0,0,0,0,0,15,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2503,"            yb += epsB / za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2507,"        epsA = ya;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2508,"        epsB = yb;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2511,"        final double epsA2 = epsA * epsA;
",6,1,0,0,0,1,0,0,0,8,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2522,"        yb = 0.07490822288864472;
",2,0,0,0,0,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2523,"        yb = yb * epsA2 + -0.09088450866185192;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2524,"        yb = yb * epsA2 + 0.11111095942313305;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2525,"        yb = yb * epsA2 + -0.1428571423679182;
",6,2,0,0,0,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2526,"        yb = yb * epsA2 + 0.19999999999923582;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2527,"        yb = yb * epsA2 + -0.33333333333333287;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2528,"        yb = yb * epsA2 * epsA;
",8,1,0,0,0,0,0,0,0,10,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2531,"        ya = epsA;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2533,"        temp = ya + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2534,"        yb = -(temp - ya - yb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2535,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2538,"        yb += epsB / (1d + epsA * epsA);
",8,3,0,1,2,0,0,0,0,12,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2541,"        double za = EIGHTHS[idx] + ya;
",4,1,1,1,2,0,0,0,0,9,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2542,"        double zb = -(za - EIGHTHS[idx] - ya);
",6,1,1,2,4,0,0,0,0,12,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2543,"        temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2544,"        zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2545,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2547,"        double result = za + zb;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2548,"        double resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,10,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2550,"        if (leftPlane) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2552,"            final double pia = 1.5707963267948966 * 2;
",2,1,0,0,0,1,0,0,0,4,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2553,"            final double pib = 6.123233995736766E-17 * 2;
",2,1,0,0,0,1,0,0,0,4,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2555,"            za = pia - result;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2556,"            zb = -(za - pia + result);
",8,2,0,1,2,0,0,0,0,12,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2557,"            zb += pib - resultb;
",6,1,0,0,0,0,0,0,0,8,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2559,"            result = za + zb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2560,"            resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2564,"        if (negate ^ leftPlane) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2565,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2568,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2578,"        if (x != x || y != y) {
",8,3,0,1,3,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2579,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2582,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2583,"            final double result = x * y;
",6,1,0,0,0,1,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2584,"            final double invx = 1d / x;
",4,1,0,0,0,1,0,0,0,6,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2585,"            final double invy = 1d / y;
",4,1,0,0,0,1,0,0,0,6,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2587,"            if (invx == 0) { // X is infinite
",2,1,0,1,3,0,0,0,0,3,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2588,"                if (x > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2589,"                    return y; // return +/- 0.0
",2,0,0,0,0,2,0,0,0,2,27,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2591,"                    return copySign(Math.PI, y);
",4,0,0,1,2,1,4,0,0,8,28,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2595,"            if (x < 0 || invx < 0) {
",4,3,0,1,3,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2596,"                if (y < 0 || invy < 0) {
",4,3,0,1,3,0,0,0,0,7,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2597,"                    return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2599,"                    return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2602,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2608,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2609,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2610,"                return Math.PI * F_1_4;
",6,1,0,0,0,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2613,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2614,"                return Math.PI * F_3_4;
",6,1,0,0,0,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2617,"            return Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2620,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2621,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2622,"                return -Math.PI * F_1_4;
",6,1,0,0,0,1,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2625,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2626,"                return -Math.PI * F_3_4;
",6,1,0,0,0,1,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2629,"            return -Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2632,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2633,"            if (y > 0 || 1 / y > 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2634,"                return 0d;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2637,"            if (y < 0 || 1 / y < 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2638,"                return -0d;
",0,0,0,0,0,1,0,0,0,1,11,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2642,"        if (x == Double.NEGATIVE_INFINITY)
",6,1,0,1,2,0,0,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2644,"            if (y > 0.0 || 1 / y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2645,"                return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2648,"            if (y < 0 || 1 / y < 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2649,"                return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2655,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2656,"            if (y > 0 || 1 / y > 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2657,"                return Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2660,"            if (y < 0 || 1 / y < 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2661,"                return -Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2666,"        final double r = y / x;
",6,1,0,0,0,1,0,0,0,8,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2667,"        if (Double.isInfinite(r)) { // bypass calculations that can create NaN
",0,0,0,2,5,0,6,0,0,6,70,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2668,"            return atan(r, 0, x < 0);
",2,1,0,1,2,1,4,0,0,7,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2671,"        double ra = doubleHighPart(r);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2672,"        double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2675,"        final double xa = doubleHighPart(x);
",2,0,0,1,2,1,4,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2676,"        final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2678,"        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
",22,9,0,1,2,0,0,0,0,32,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2680,"        final double temp = ra + rb;
",6,1,0,0,0,1,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2681,"        rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2682,"        ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2684,"        if (ra == 0) { // Fix up the sign so atan works correctly
",2,1,0,1,3,0,0,0,0,3,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2685,"            ra = copySign(0d, y);
",2,0,0,1,2,0,4,0,0,7,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2689,"        final double result = atan(ra, rb, x < 0);
",4,1,0,1,2,1,6,0,0,12,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2691,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2699,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2700,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2703,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2704,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2707,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2708,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2711,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2712,"          return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2715,"      if (x == 0.0) { // Matches +/- 0.0; return correct sign
",2,1,0,1,3,1,0,0,0,3,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2716,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2722,"      double temp = x * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2723,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2724,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2727,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2728,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2731,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2732,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2734,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2735,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2737,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2738,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2739,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2743,"      y = sqrt(za);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2744,"      temp = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2745,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2746,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2749,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2752,"      double dx = zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2755,"      double r = x/y;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2756,"      temp = r * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2757,"      double ra = r + temp - temp;
",8,2,0,0,0,0,0,0,0,10,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2758,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2760,"      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2761,"      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
",10,3,0,0,0,0,0,0,0,15,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2763,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2764,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2765,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2767,"      return atan(ra, rb, false);
",0,0,0,1,2,1,6,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2775,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2776,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2779,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2780,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2783,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2784,"          return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2787,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2788,"          return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2791,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2792,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2798,"      double temp = x * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2799,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2800,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2803,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2804,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2807,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2808,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2810,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2811,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2813,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2814,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2815,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2818,"      double y = sqrt(za);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2819,"      temp = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2820,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2821,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2824,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2827,"      yb += zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2828,"      y = ya+yb;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2829,"      yb = -(y - ya - yb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2832,"      double r = y/x;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2835,"      if (Double.isInfinite(r)) { // x is effectively zero
",0,0,0,2,5,0,6,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2836,"          return Math.PI/2; // so return the appropriate value
",4,1,0,0,0,2,0,0,0,5,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2839,"      double ra = doubleHighPart(r);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2840,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2842,"      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2843,"      rb += yb / x;  // Add in effect additional bits of sqrt.
",6,1,0,0,0,0,0,0,0,8,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2845,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2846,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2847,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2849,"      return atan(ra, rb, x<0);
",2,1,0,1,2,1,6,0,0,9,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2858,"      long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2859,"      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2860,"      boolean subnormal = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2862,"      if (exponent == -1023) {
",2,1,0,1,3,0,0,0,0,4,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2863,"          if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2864,"              return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2868,"          subnormal = true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2869,"          x *= 1.8014398509481984E16;  // 2^54
",2,0,0,0,0,0,0,0,0,3,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2870,"          inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2871,"          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,8,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2874,"      if (exponent == 1024) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2876,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2880,"      int exp3 = exponent / 3;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2883,"      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |
",4,2,0,1,3,0,4,0,0,10,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2887,"      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);
",4,2,0,2,4,1,4,0,0,11,98,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2890,"      double est = -0.010714690733195933;
",2,0,0,0,0,0,0,0,0,3,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2891,"      est = est * mant + 0.0875862700108075;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2892,"      est = est * mant + -0.3058015757857271;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2893,"      est = est * mant + 0.7249995199969751;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2894,"      est = est * mant + 0.5039018405998233;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2896,"      est *= CBRTTWO[exponent % 3 + 2];
",4,2,1,1,2,0,0,0,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2901,"      final double xs = x / (p2*p2*p2);
",10,2,0,1,2,1,0,0,0,13,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2902,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2903,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2906,"      double temp = est * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2907,"      double ya = est + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2908,"      double yb = est - ya;
",6,1,0,0,0,0,0,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2910,"      double za = ya * ya;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2911,"      double zb = ya * yb * 2.0 + yb * yb;
",10,3,0,0,0,0,0,0,0,13,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2912,"      temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2913,"      double temp2 = za + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2914,"      zb += za - temp2;
",6,1,0,0,0,0,0,0,0,8,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2915,"      za = temp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2917,"      zb = za * yb + ya * zb + zb * yb;
",14,5,0,0,0,0,0,0,0,20,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2918,"      za = za * ya;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2920,"      double na = xs - za;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2921,"      double nb = -(na - xs + za);
",8,2,0,1,2,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2922,"      nb -= zb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2924,"      est += (na+nb)/(3*est*est);
",10,3,0,2,4,0,0,0,0,14,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2927,"      est *= p2;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2929,"      if (subnormal) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2930,"          est *= 3.814697265625E-6;  // 2^-18
",2,0,0,0,0,0,0,0,0,3,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2933,"      return est;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2943,"        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign
",2,2,0,2,5,1,6,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2944,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2948,"        final double facta = 0.01745329052209854;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2949,"        final double factb = 1.997844754509471E-9;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2951,"        double xa = doubleHighPart(x);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2952,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2954,"        double result = xb * factb + xb * facta + xa * factb + xa * facta;
",18,7,0,0,0,0,0,0,0,25,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2955,"        if (result == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2956,"            result = result * x; // ensure correct sign if calculation underflows
",6,1,0,0,0,0,0,0,0,8,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2958,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2968,"        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign
",2,2,0,2,5,1,6,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2969,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2973,"        final double facta = 57.2957763671875;
",2,0,0,0,0,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2974,"        final double factb = 3.145894820876798E-6;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2976,"        double xa = doubleHighPart(x);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2977,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2979,"        return xb * factb + xb * facta + xa * factb + xa * facta;
",16,7,0,0,0,1,0,0,0,23,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2988,"        return (x < 0) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,2997,"        return (x < 0l) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3006,"        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3015,"        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,61,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3024,"        if (Double.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3025,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3027,"        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,72,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3036,"        if (Float.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3037,"            return Float.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3039,"        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3051,"        if ((n > -1023) && (n < 1024)) {
",4,3,0,3,7,0,0,0,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3052,"            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
",4,3,0,4,8,1,4,0,0,11,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3056,"        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
",2,2,0,4,9,0,12,0,0,16,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3057,"            return d;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3059,"        if (n < -2098) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3060,"            return (d > 0) ? 0.0 : -0.0;
",2,1,0,1,2,1,0,0,0,4,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3062,"        if (n > 2097) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3063,"            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,69,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3067,"        final long bits = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3068,"        final long sign = bits & 0x8000000000000000L;
",4,1,0,0,0,1,0,0,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3069,"        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;
",4,2,0,3,6,0,0,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3070,"        long mantissa   = bits & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,5,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3073,"        int scaledExponent = exponent + n;
",6,1,0,0,0,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3075,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3077,"            if (scaledExponent > 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3079,"                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3080,"            } else if (scaledExponent > -53) {
",2,1,0,1,4,0,0,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3084,"                mantissa = mantissa | (1L << 52);
",4,2,0,1,2,0,0,0,0,7,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3087,"                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
",6,2,0,2,4,1,0,0,0,10,73,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3088,"                mantissa = mantissa >>> (1 - scaledExponent);
",6,2,0,1,2,0,0,0,0,9,45,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3089,"                if (mostSignificantLostBit != 0) {
",2,1,0,1,3,0,0,0,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3091,"                    mantissa++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3093,"                return Double.longBitsToDouble(sign | mantissa);
",4,1,0,1,2,1,4,0,0,9,48,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3097,"                return (sign == 0L) ? 0.0 : -0.0;
",2,1,0,1,2,1,0,0,0,4,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3101,"            if (exponent == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3104,"                while ((mantissa >>> 52) != 1) {
",2,2,0,2,5,0,0,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3105,"                    mantissa = mantissa << 1;
",4,1,0,0,0,0,0,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3106,"                    --scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3108,"                ++scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3109,"                mantissa = mantissa & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,6,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3111,"                if (scaledExponent < 2047) {
",2,1,0,1,3,0,0,0,0,3,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3112,"                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3114,"                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,74,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3117,"            } else if (scaledExponent < 2047) {
",2,1,0,1,4,0,0,0,0,3,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3118,"                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3120,"                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,74,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3135,"        if ((n > -127) && (n < 128)) {
",4,3,0,3,7,0,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3136,"            return f * Float.intBitsToFloat((n + 127) << 23);
",4,3,0,2,4,1,4,0,0,11,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3140,"        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
",2,2,0,4,9,0,12,0,0,16,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3141,"            return f;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3143,"        if (n < -277) {
",2,1,0,1,3,0,0,0,0,4,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3144,"            return (f > 0) ? 0.0f : -0.0f;
",2,1,0,1,2,1,0,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3146,"        if (n > 276) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3147,"            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,67,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3151,"        final int bits = Float.floatToIntBits(f);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3152,"        final int sign = bits & 0x80000000;
",4,1,0,0,0,1,0,0,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3153,"        int  exponent  = (bits >>> 23) & 0xff;
",4,2,0,1,2,0,0,0,0,6,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3154,"        int mantissa   = bits & 0x007fffff;
",4,1,0,0,0,0,0,0,0,5,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3157,"        int scaledExponent = exponent + n;
",6,1,0,0,0,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3159,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3161,"            if (scaledExponent > 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3163,"                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3164,"            } else if (scaledExponent > -24) {
",2,1,0,1,4,0,0,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3168,"                mantissa = mantissa | (1 << 23);
",4,2,0,1,2,0,0,0,0,7,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3171,"                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
",6,2,0,2,4,1,0,0,0,10,71,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3172,"                mantissa = mantissa >>> (1 - scaledExponent);
",6,2,0,1,2,0,0,0,0,9,45,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3173,"                if (mostSignificantLostBit != 0) {
",2,1,0,1,3,0,0,0,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3175,"                    mantissa++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3177,"                return Float.intBitsToFloat(sign | mantissa);
",4,1,0,1,2,1,4,0,0,9,45,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3181,"                return (sign == 0) ? 0.0f : -0.0f;
",2,1,0,1,2,1,0,0,0,4,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3185,"            if (exponent == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3188,"                while ((mantissa >>> 23) != 1) {
",2,2,0,2,5,0,0,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3189,"                    mantissa = mantissa << 1;
",4,1,0,0,0,0,0,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3190,"                    --scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3192,"                ++scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3193,"                mantissa = mantissa & 0x007fffff;
",4,1,0,0,0,0,0,0,0,6,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3195,"                if (scaledExponent < 255) {
",2,1,0,1,3,0,0,0,0,3,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3196,"                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3198,"                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,71,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3201,"            } else if (scaledExponent < 255) {
",2,1,0,1,4,0,0,0,0,3,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3202,"                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3204,"                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,71,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3244,"        if (Double.isNaN(d) || Double.isNaN(direction)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3245,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3246,"        } else if (d == direction) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3247,"            return direction;
",2,0,0,0,0,1,0,0,0,2,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3248,"        } else if (Double.isInfinite(d)) {
",0,0,0,2,6,0,6,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3249,"            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
",10,1,0,1,2,1,0,0,0,12,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3250,"        } else if (d == 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3251,"            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3256,"        final long bits = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3257,"        final long sign = bits & 0x8000000000000000L;
",4,1,0,0,0,1,0,0,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3258,"        if ((direction < d) ^ (sign == 0L)) {
",6,3,0,3,7,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3259,"            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
",4,3,0,3,6,1,4,0,0,11,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3261,"            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
",4,3,0,3,6,1,4,0,0,11,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3300,"        if (Double.isNaN(f) || Double.isNaN(direction)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3301,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3302,"        } else if (f == direction) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3303,"            return (float) direction;
",2,0,0,1,2,1,0,0,0,2,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3304,"        } else if (Float.isInfinite(f)) {
",0,0,0,2,6,0,6,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3305,"            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
",10,1,0,1,2,1,0,0,0,12,53,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3306,"        } else if (f == 0f) {
",2,1,0,1,4,0,0,0,0,3,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3307,"            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,60,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3312,"        final int bits = Float.floatToIntBits(f);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3313,"        final int sign = bits & 0x80000000;
",4,1,0,0,0,1,0,0,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3314,"        if ((direction < f) ^ (sign == 0)) {
",6,3,0,3,7,0,0,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3315,"            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
",4,3,0,3,6,1,4,0,0,11,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3317,"            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
",4,3,0,3,6,1,4,0,0,11,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3329,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3330,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3333,"        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {
",8,3,0,1,3,0,0,0,0,12,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3334,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3337,"        y = (long) x;
",4,0,0,1,2,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3338,"        if (x < 0 && y != x) {
",6,3,0,1,3,0,0,0,0,9,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3339,"            y--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3342,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3343,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3346,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3356,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3357,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3360,"        y = floor(x);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3361,"        if (y == x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3362,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3365,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3367,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3368,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3371,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3379,"        double y = floor(x);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3380,"        double d = x - y;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3382,"        if (d > 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3383,"            if (y == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3384,"                return -0.0; // Preserve sign of operand
",0,0,0,0,0,1,0,0,0,1,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3386,"            return y+1.0;
",2,1,0,0,0,1,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3388,"        if (d < 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3389,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3393,"        long z = (long) y;
",4,0,0,1,2,0,0,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3394,"        return (z & 1) == 0 ? y : y + 1.0;
",6,3,0,1,2,1,0,0,0,9,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3402,"        return (long) floor(x + 0.5);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3410,"        return (int) floor(x + 0.5f);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3419,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3428,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3437,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3438,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3440,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3441,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3444,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3445,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3449,"        int bits = Float.floatToRawIntBits(a);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3450,"        if (bits == 0x80000000) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3451,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3453,"        return b;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3462,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3463,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3465,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3466,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3469,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3470,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3474,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3475,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3476,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3478,"        return b;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3496,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3505,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3506,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3508,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3509,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3512,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3513,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3517,"        int bits = Float.floatToRawIntBits(a);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3518,"        if (bits == 0x80000000) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3519,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3521,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3530,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3531,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3533,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3534,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3537,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3538,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3542,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3543,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3544,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3546,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3564,"        if (Double.isInfinite(x) || Double.isInfinite(y)) {
",0,1,0,3,7,0,12,0,0,13,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3565,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3566,"        } else if (Double.isNaN(x) || Double.isNaN(y)) {
",0,1,0,3,8,0,12,0,0,13,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3567,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3570,"            final int expX = getExponent(x);
",2,0,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3571,"            final int expY = getExponent(y);
",2,0,0,1,2,1,4,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3572,"            if (expX > expY + 27) {
",4,2,0,1,3,0,0,0,0,6,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3574,"                return abs(x);
",0,0,0,1,2,1,4,0,0,4,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3575,"            } else if (expY > expX + 27) {
",4,2,0,1,4,0,0,0,0,6,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3577,"                return abs(y);
",0,0,0,1,2,1,4,0,0,4,14,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3581,"                final int middleExp = (expX + expY) / 2;
",6,2,0,1,2,1,0,0,0,9,40,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3584,"                final double scaledX = scalb(x, -middleExp);
",4,0,0,1,2,1,4,0,0,10,44,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3585,"                final double scaledY = scalb(y, -middleExp);
",4,0,0,1,2,1,4,0,0,10,44,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3588,"                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);
",10,3,0,1,2,1,2,0,0,16,67,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3591,"                return scalb(scaledH, middleExp);
",0,0,0,1,2,1,6,0,0,6,33,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3619,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation
",0,0,0,1,2,1,8,0,0,8,90,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3631,"        long m = Double.doubleToLongBits(magnitude);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3632,"        long s = Double.doubleToLongBits(sign);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3633,"        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
",8,7,0,3,7,0,0,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3634,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3636,"        return -magnitude; // flip sign
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3648,"        int m = Float.floatToIntBits(magnitude);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3649,"        int s = Float.floatToIntBits(sign);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3650,"        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
",8,7,0,3,7,0,0,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3651,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3653,"        return -magnitude; // flip sign
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3666,"        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;
",0,3,0,4,8,1,6,0,0,9,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3679,"        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;
",0,3,0,3,6,1,6,0,0,9,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3688,"        PrintStream out = System.out;
",6,0,0,0,0,0,0,2,0,8,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3689,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);
",4,0,0,1,2,0,8,0,0,13,96,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3690,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);
",4,0,0,1,2,0,8,0,0,13,96,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3691,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);
",4,0,0,1,2,0,8,0,0,13,100,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3692,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);
",4,0,0,1,2,0,8,0,0,13,100,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3693,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);
",4,0,0,1,2,0,8,0,0,13,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3694,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,75,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3695,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,75,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3696,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3697,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3698,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,81,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3699,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,81,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3700,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3808,"                  double xb) {
",2,0,0,0,2,0,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3811,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3817,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3818,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3819,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3821,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3822,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3823,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3824,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3826,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3827,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3828,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3829,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3831,"                if (remA > 0) {
",2,1,0,1,3,0,0,0,0,3,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3832,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3838,"                --k;
",2,0,0,0,0,0,0,0,0,3,4,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3839,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3841,"            this.finalK = k;
",4,0,0,0,0,0,0,0,0,5,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3842,"            this.finalRemA = remA;
",4,0,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3843,"            this.finalRemB = remB;
",4,0,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3844,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3850,"            return finalK;
",2,0,0,0,0,1,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3856,"            return finalRemA;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,3862,"            return finalRemB;
",2,0,0,0,0,1,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMathLiteralArrays,15,6134,"    private FastMathLiteralArrays() {}
",2,0,0,2,4,1,0,0,0,3,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,61,"        return next(1) != 0;
",0,1,0,1,2,1,2,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,66,"        int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,67,"        final int iEnd = bytes.length - 3;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,68,"        while (i < iEnd) {
",4,1,0,1,3,0,0,0,0,5,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,69,"            final int random = next(32);
",2,0,0,1,2,1,2,0,0,5,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,70,"            bytes[i]     = (byte) (random & 0xff);
",2,1,1,3,6,0,0,0,0,8,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,71,"            bytes[i + 1] = (byte) ((random >>  8) & 0xff);
",4,3,1,4,8,0,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,72,"            bytes[i + 2] = (byte) ((random >> 16) & 0xff);
",4,3,1,4,8,0,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,73,"            bytes[i + 3] = (byte) ((random >> 24) & 0xff);
",4,3,1,4,8,0,0,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,74,"            i += 4;
",2,0,0,0,0,0,0,0,0,3,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,75,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,76,"        int random = next(32);
",2,0,0,1,2,0,2,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,77,"        while (i < bytes.length) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,78,"            bytes[i++] = (byte) (random & 0xff);
",4,1,1,3,6,0,0,0,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,79,"            random     = random >> 8;
",4,1,0,0,0,0,0,0,0,6,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,85,"        final long high = ((long) next(26)) << 26;
",2,1,0,3,6,1,2,0,0,6,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,86,"        final int  low  = next(26);
",2,0,0,1,2,1,2,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,87,"        return (high | low) * 0x1.0p-52d;
",4,2,0,1,2,1,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,92,"        return next(23) * 0x1.0p-23f;
",0,1,0,1,2,1,2,0,0,3,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,99,"        if (Double.isNaN(nextGaussian)) {
",0,0,0,2,5,0,6,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,101,"            final double x = nextDouble();
",2,0,0,1,2,1,2,0,0,5,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,102,"            final double y = nextDouble();
",2,0,0,1,2,1,2,0,0,5,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,103,"            final double alpha = 2 * FastMath.PI * x;
",8,1,0,0,0,1,0,0,0,10,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,104,"            final double r      = FastMath.sqrt(-2 * FastMath.log(y));
",2,1,0,2,4,1,10,0,0,15,58,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,105,"            random       = r * FastMath.cos(alpha);
",4,1,0,1,2,0,6,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,106,"            nextGaussian = r * FastMath.sin(alpha);
",4,1,0,1,2,0,6,0,0,12,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,107,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,109,"            random = nextGaussian;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,110,"            nextGaussian = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,113,"        return random;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,119,"        return next(32);
",0,0,0,1,2,1,2,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,138,"        if (n > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,139,"            if ((n & -n) == n) {
",6,2,0,2,5,0,0,0,0,9,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,140,"                return (int) ((n * (long) next(31)) >> 31);
",2,2,0,5,10,1,2,0,0,6,43,10,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,145,"                bits = next(31);
",2,0,0,1,2,0,2,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,146,"                val = bits % n;
",6,1,0,0,0,0,0,0,0,8,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,147,"            } while (bits - val + (n - 1) < 0);
",6,4,0,2,5,0,0,0,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,148,"            return val;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,150,"        throw new NotStrictlyPositiveException(n);
",2,0,0,1,2,0,0,2,0,4,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,155,"        final long high  = ((long) next(32)) << 32;
",2,1,0,3,6,1,2,0,0,6,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,156,"        final long  low  = ((long) next(32)) & 0xffffffffL;
",2,1,0,3,6,1,2,0,0,6,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,15,157,"        return high | low;
",4,1,0,0,0,1,0,0,0,5,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,106,"    public MersenneTwister() {
",2,0,0,1,3,1,0,0,0,3,26,2,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,107,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,108,"        setSeed(System.currentTimeMillis() + System.identityHashCode(this));
",0,1,0,3,6,0,10,0,0,11,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,109,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,114,"    public MersenneTwister(int seed) {
",4,0,0,1,3,1,0,0,0,5,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,115,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,116,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,123,"    public MersenneTwister(int[] seed) {
",4,0,0,2,5,1,0,0,0,5,36,2,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,124,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,125,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,126,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,168,"            setSeed(System.currentTimeMillis() + System.identityHashCode(this));
",0,1,0,3,6,0,10,0,0,11,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,169,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,233,"        if (mti >= N) { // generate N words at one time
",4,1,0,1,3,0,0,0,0,5,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,234,"            int mtNext = mt[0];
",2,0,1,1,2,0,0,0,0,4,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,235,"            for (int k = 0; k < N - M; ++k) {
",10,2,0,1,3,0,0,0,0,13,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,236,"                int mtCurr = mtNext;
",4,0,0,0,0,0,0,0,0,4,20,9,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,237,"                mtNext = mt[k + 1];
",4,1,1,1,2,0,0,0,0,8,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,238,"                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);
",6,3,0,2,4,0,0,0,0,10,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,239,"                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];
",8,4,1,4,8,0,0,0,0,21,47,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,241,"            for (int k = N - M; k < N - 1; ++k) {
",12,3,0,1,3,0,0,0,0,16,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,242,"                int mtCurr = mtNext;
",4,0,0,0,0,0,0,0,0,4,20,9,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,243,"                mtNext = mt[k + 1];
",4,1,1,1,2,0,0,0,0,8,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,244,"                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);
",6,3,0,2,4,0,0,0,0,10,50,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,245,"                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];
",10,5,1,5,10,0,0,0,0,24,53,8,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,247,"            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);
",4,3,1,3,6,0,0,0,0,10,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,248,"            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];
",8,5,1,4,8,0,0,0,0,20,51,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,250,"            mti = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,253,"        y = mt[mti++];
",4,0,1,1,2,0,0,0,0,8,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,256,"        y ^=  y >>> 11;
",4,1,0,0,0,0,0,0,0,6,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,257,"        y ^= (y <<   7) & 0x9d2c5680;
",4,2,0,1,2,0,0,0,0,7,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,258,"        y ^= (y <<  15) & 0xefc60000;
",4,2,0,1,2,0,0,0,0,7,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,259,"        y ^=  y >>> 18;
",4,1,0,0,0,0,0,0,0,6,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,261,"        return y >>> (32 - bits);
",4,2,0,1,2,1,0,0,0,6,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,15,38,"        super(value, 0, false);
",2,0,0,1,2,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,15,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,15,48,"        super(specific, value, 0, false);
",4,0,0,1,2,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotStrictlyPositiveException,15,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,15,50,"        this(boundIsAllowed ?
",2,0,0,0,1,0,0,0,0,2,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,15,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,15,68,"        super(specific, wrong, min);
",6,0,0,1,2,0,0,0,0,6,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,15,70,"        this.min = min;
",4,0,0,0,0,0,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,15,71,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,15,72,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,15,78,"        return boundIsAllowed;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NumberIsTooSmallException,15,85,"        return min;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,15,46,"        super(pattern, wrong, arguments);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,15,47,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,15,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,15,54,"        return argument;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,15,44,"                                        Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,15,45,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,15,46,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,15,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,15,51,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,15,57,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,15,63,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,181,"    protected Dfp(final DfpField field) {
",4,0,0,1,3,2,0,2,0,8,37,2,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,182,"        mant = new int[field.getRadixDigits()];
",2,0,0,2,4,0,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,183,"        sign = 1;
",2,0,0,0,0,0,0,0,0,3,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,184,"        exp = 0;
",2,0,0,0,0,0,0,0,0,3,8,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,185,"        nans = FINITE;
",4,0,0,0,0,0,0,0,0,5,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,186,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,187,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,194,"        this(field, (long) x);
",4,0,0,2,4,0,0,0,0,4,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,195,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,220,"            isLongMin = true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,221,"            ++x;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,243,"            for (int i = 0; i < mant.length - 1; i++) {
",10,2,0,1,3,0,0,0,0,13,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,244,"                if (mant[i] != 0) {
",0,1,1,2,5,0,0,0,0,5,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,245,"                    mant[i]++;
",0,0,1,1,2,0,0,0,0,5,10,10,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,246,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,256,"    protected Dfp(final DfpField field, double x) {
",6,0,0,1,3,2,0,2,0,10,47,2,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,259,"        mant = new int[field.getRadixDigits()];
",2,0,0,2,4,0,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,260,"        sign = 1;
",2,0,0,0,0,0,0,0,0,3,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,261,"        exp = 0;
",2,0,0,0,0,0,0,0,0,3,8,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,262,"        nans = FINITE;
",4,0,0,0,0,0,0,0,0,5,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,263,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,265,"        long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,266,"        long mantissa = bits & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,5,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,267,"        int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;
",4,3,0,3,6,0,0,0,0,7,65,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,269,"        if (exponent == -1023) {
",2,1,0,1,3,0,0,0,0,4,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,271,"            if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,273,"                if ((bits & 0x8000000000000000L) != 0) {
",2,2,0,2,5,0,0,0,0,4,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,274,"                    sign = -1;
",2,0,0,0,0,0,0,0,0,4,10,10,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,276,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,279,"            exponent++;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,282,"            while ( (mantissa & 0x0010000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,283,"                exponent--;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,284,"                mantissa <<= 1;
",2,0,0,0,0,0,0,0,0,3,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,286,"            mantissa &= 0x000fffffffffffffL;
",2,0,0,0,0,0,0,0,0,3,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,289,"        if (exponent == 1024) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,291,"            if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,292,"                sign = (byte) 1;
",2,0,0,1,2,0,0,0,0,3,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,293,"                nans = QNAN;
",4,0,0,0,0,0,0,0,0,5,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,294,"            } else if (x < 0) {
",2,1,0,1,4,0,0,0,0,3,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,295,"                sign = (byte) -1;
",2,0,0,1,2,0,0,0,0,4,17,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,296,"                nans = INFINITE;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,298,"                sign = (byte) 1;
",2,0,0,1,2,0,0,0,0,3,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,299,"                nans = INFINITE;
",4,0,0,0,0,0,0,0,0,5,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,301,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,304,"        Dfp xdfp = new Dfp(field, mantissa);
",6,0,0,1,2,0,0,4,0,10,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,305,"        xdfp = xdfp.divide(new Dfp(field, 4503599627370496l)).add(field.getOne());  // Divide by 2^52, then add one
",4,0,0,4,8,0,10,2,0,17,107,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,306,"        xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));
",2,0,0,3,6,0,14,0,0,17,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,308,"        if ((bits & 0x8000000000000000L) != 0) {
",2,2,0,2,5,0,0,0,0,4,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,309,"            xdfp = xdfp.negate();
",2,0,0,1,2,0,4,0,0,7,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,312,"        System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);
",8,0,0,1,2,0,6,0,0,14,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,313,"        sign = xdfp.sign;
",6,0,0,0,0,0,0,0,0,7,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,314,"        exp  = xdfp.exp;
",6,0,0,0,0,0,0,0,0,7,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,315,"        nans = xdfp.nans;
",6,0,0,0,0,0,0,0,0,7,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,317,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,350,"            sign = (byte) 1;
",2,0,0,1,2,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,351,"            nans = INFINITE;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,352,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,356,"            sign = (byte) -1;
",2,0,0,1,2,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,357,"            nans = INFINITE;
",4,0,0,0,0,0,0,0,0,5,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,358,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,362,"            sign = (byte) 1;
",2,0,0,1,2,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,363,"            nans = QNAN;
",4,0,0,0,0,0,0,0,0,5,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,364,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,377,"            fpdecimal = s.substring(0, p);
",2,0,0,1,2,0,6,0,0,9,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,378,"            String fpexp = s.substring(p+1);
",4,1,0,1,2,0,4,2,0,11,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,379,"            boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,381,"            for (int i=0; i<fpexp.length(); i++)
",6,1,0,2,4,0,4,0,0,12,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,383,"                if (fpexp.charAt(i) == '-')
",0,1,0,2,4,0,6,0,0,8,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,385,"                    negative = true;
",2,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,386,"                    continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,388,"                if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {
",0,3,0,3,7,0,12,0,0,17,55,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,389,"                    sciexp = sciexp * 10 + fpexp.charAt(i) - '0';
",4,3,0,1,2,0,6,0,0,15,45,10,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,393,"            if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,394,"                sciexp = -sciexp;
",4,0,0,0,0,0,0,0,0,6,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,396,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,403,"            sign = -1;
",2,0,0,0,0,0,0,0,0,4,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,427,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,456,"                p++;
",2,0,0,0,0,0,0,0,0,3,4,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,457,"                continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,472,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,484,"            decimalPos = 0;
",2,0,0,0,0,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,489,"            decimalPos = q-offset;
",6,1,0,0,0,0,0,0,0,8,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,500,"            p--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,541,"    protected Dfp(final DfpField field, final byte sign, final byte nans) {
",8,0,0,1,3,4,0,2,0,14,71,2,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,542,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,543,"        this.mant    = new int[field.getRadixDigits()];
",2,0,0,2,4,0,4,0,0,7,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,544,"        this.sign    = sign;
",4,0,0,0,0,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,545,"        this.exp     = 0;
",2,0,0,0,0,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,546,"        this.nans    = nans;
",4,0,0,0,0,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,547,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,554,"        return new Dfp(getField());
",0,0,0,2,4,1,2,2,0,4,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,562,"        return new Dfp(getField(), x);
",2,0,0,2,4,1,2,2,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,570,"        return new Dfp(getField(), x);
",2,0,0,2,4,1,2,2,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,578,"        return new Dfp(getField(), x);
",2,0,0,2,4,1,2,2,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,586,"        return new Dfp(getField(), x);
",2,0,0,2,4,1,2,2,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,598,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,599,"            final Dfp result = newInstance(getZero());
",2,0,0,2,4,1,4,2,0,9,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,600,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,601,"            return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);
",4,0,0,1,2,1,8,0,0,12,67,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,614,"        return new Dfp(field, s);
",4,0,0,1,2,1,0,2,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,624,"        return field.newDfp(sig, code);
",0,0,0,1,2,1,8,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,656,"        return field.getOne();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,663,"        return field.getTwo();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,736,"                shiftLeft();
",0,0,0,1,2,0,2,0,0,2,12,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,757,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,758,"            final Dfp result = newInstance(getZero());
",2,0,0,2,4,1,4,2,0,9,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,759,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,760,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);
",4,0,0,1,2,0,8,0,0,12,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,761,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,766,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,767,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));
",4,0,0,3,6,0,10,0,0,14,73,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,768,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,782,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,783,"            final Dfp result = newInstance(getZero());
",2,0,0,2,4,1,4,2,0,9,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,784,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,785,"            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);
",4,0,0,1,2,0,8,0,0,12,60,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,786,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,791,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,792,"            dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));
",4,0,0,3,6,0,10,0,0,14,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,793,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,804,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,805,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,806,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));
",4,0,0,3,6,0,8,0,0,12,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,807,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,810,"        return (sign < 0) || ((mant[mant.length - 1] == 0) && !isInfinite());
",6,5,1,5,10,1,2,0,0,16,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,819,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,820,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,821,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));
",4,0,0,3,6,0,8,0,0,12,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,822,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,825,"        return (sign < 0) && ((mant[mant.length - 1] != 0) || isInfinite());
",6,5,1,5,10,1,2,0,0,15,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,834,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,835,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,836,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));
",4,0,0,3,6,0,8,0,0,12,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,837,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,840,"        return (sign > 0) || ((mant[mant.length - 1] == 0) && !isInfinite());
",6,5,1,5,10,1,2,0,0,16,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,849,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,850,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,851,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));
",4,0,0,3,6,0,8,0,0,12,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,852,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,855,"        return (sign > 0) && ((mant[mant.length - 1] != 0) || isInfinite());
",6,5,1,5,10,1,2,0,0,15,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,863,"        Dfp result = newInstance(this);
",2,0,0,1,2,0,2,2,0,6,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,864,"        result.sign = 1;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,865,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,872,"        return nans == INFINITE;
",4,1,0,0,0,1,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,887,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,888,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,889,"            dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, this, newInstance(getZero()));
",4,0,0,3,6,0,8,0,0,12,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,890,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,893,"        return (mant[mant.length - 1] == 0) && !isInfinite();
",4,3,1,3,6,1,2,0,0,12,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,907,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,913,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,923,"        return 17 + (sign << 8) + (nans << 16) + exp + Arrays.hashCode(mant);
",6,3,0,3,6,1,6,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,932,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,952,"            if (a.sign == -1) {
",4,1,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,953,"                return -1;
",0,0,0,0,0,1,0,0,0,1,10,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,955,"                return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,961,"            return a.sign;
",4,0,0,0,0,1,0,0,0,4,14,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,965,"            return -b.sign;
",4,0,0,0,0,1,0,0,0,5,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,969,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1004,"        return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);
",6,0,0,1,2,1,2,0,0,8,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1012,"        return trunc(DfpField.RoundingMode.ROUND_FLOOR);
",6,0,0,1,2,1,2,0,0,8,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1020,"        return trunc(DfpField.RoundingMode.ROUND_CEIL);
",6,0,0,1,2,1,2,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1029,"        final Dfp result = this.subtract(this.divide(d).rint().multiply(d));
",2,0,0,4,8,1,12,2,0,17,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1032,"        if (result.mant[mant.length-1] == 0) {
",8,2,0,2,5,0,0,0,0,10,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1033,"            result.sign = sign;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1036,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1045,"        boolean changed = false;
",2,0,0,0,0,0,0,0,0,3,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1047,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1048,"            return newInstance(this);
",0,0,0,1,2,1,2,0,0,2,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1051,"        if (nans == INFINITE) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1052,"            return newInstance(this);
",0,0,0,1,2,1,2,0,0,2,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1055,"        if (mant[mant.length-1] == 0) {
",4,2,1,2,5,0,0,0,0,8,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1057,"            return newInstance(this);
",0,0,0,1,2,1,2,0,0,2,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1062,"        if (exp < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1063,"            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1064,"            Dfp result = newInstance(getZero());
",2,0,0,2,4,0,4,2,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1065,"            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);
",6,0,0,1,2,0,6,0,0,13,65,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1066,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1073,"        if (exp >= mant.length) {
",6,1,0,1,3,0,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1074,"            return newInstance(this);
",0,0,0,1,2,1,2,0,0,2,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1080,"        Dfp result = newInstance(this);
",2,0,0,1,2,0,2,2,0,6,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1081,"        for (int i = 0; i < mant.length-result.exp; i++) {
",14,2,0,1,3,0,0,0,0,17,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1082,"            changed |= result.mant[i] != 0;
",6,1,1,1,2,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1083,"            result.mant[i] = 0;
",4,0,1,1,2,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1086,"        if (changed) {
",2,0,0,1,3,0,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1087,"            switch (rmode) {
",2,0,0,1,3,0,0,0,0,2,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1089,"                    if (result.sign == -1) {
",4,1,0,1,3,0,0,0,0,6,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1091,"                        result = result.add(newInstance(-1));
",2,0,0,2,4,0,6,0,0,10,37,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1096,"                    if (result.sign == 1) {
",4,1,0,1,3,0,0,0,0,5,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1098,"                        result = result.add(getOne());
",2,0,0,2,4,0,6,0,0,9,30,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1104,"                    final Dfp half = newInstance(""0.5"");
",2,0,0,1,2,1,2,2,0,8,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1105,"                    Dfp a = subtract(result);  // difference between this and result
",2,0,0,1,2,0,4,2,0,8,64,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1106,"                    a.sign = 1;            // force positive (take abs)
",4,0,0,1,2,0,0,0,0,5,51,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1107,"                    if (a.greaterThan(half)) {
",0,0,0,2,5,0,6,0,0,6,26,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1108,"                        a = newInstance(getOne());
",2,0,0,2,4,0,4,0,0,7,26,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1109,"                        a.sign = sign;
",6,0,0,0,0,0,0,0,0,7,14,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1110,"                        result = result.add(a);
",2,0,0,1,2,0,6,0,0,9,23,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1114,"                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {
",16,6,0,4,9,0,6,0,0,28,87,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1115,"                        a = newInstance(getOne());
",2,0,0,2,4,0,4,0,0,7,26,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1116,"                        a.sign = sign;
",6,0,0,0,0,0,0,0,0,7,14,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1117,"                        result = result.add(a);
",2,0,0,1,2,0,6,0,0,9,23,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1122,"            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);  // signal inexact
",4,0,0,1,2,0,4,0,0,8,65,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1123,"            result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);
",6,0,0,1,2,0,6,0,0,13,65,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1124,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1127,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1136,"        int result = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1138,"        rounded = rint();
",2,0,0,1,2,0,2,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1140,"        if (rounded.greaterThan(newInstance(2147483647))) {
",0,0,0,3,7,0,6,0,0,6,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1141,"            return 2147483647;
",0,0,0,0,0,1,0,0,0,0,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1144,"        if (rounded.lessThan(newInstance(-2147483648))) {
",0,0,0,3,7,0,6,0,0,6,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1145,"            return -2147483648;
",0,0,0,0,0,1,0,0,0,0,19,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1148,"        for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--) {
",18,3,0,1,3,0,0,0,0,22,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1149,"            result = result * RADIX + rounded.mant[i];
",10,2,1,1,2,0,0,0,0,15,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1152,"        if (rounded.sign == -1) {
",4,1,0,1,3,0,0,0,0,6,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1153,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1156,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1165,"        return exp - 1;
",2,1,0,0,0,1,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1173,"        Dfp d = newInstance(getOne());
",2,0,0,2,4,0,4,2,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1174,"        d.exp = e + 1;
",6,1,0,0,0,0,0,0,0,8,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1175,"        return d;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1182,"        if (mant[mant.length-1] > 1000) {
",4,2,1,2,5,0,0,0,0,8,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1183,"            return exp * 4 - 1;
",2,2,0,0,0,1,0,0,0,4,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1185,"        if (mant[mant.length-1] > 100) {
",4,2,1,2,5,0,0,0,0,8,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1186,"            return exp * 4 - 2;
",2,2,0,0,0,1,0,0,0,4,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1188,"        if (mant[mant.length-1] > 10) {
",4,2,1,2,5,0,0,0,0,8,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1189,"            return exp * 4 - 3;
",2,2,0,0,0,1,0,0,0,4,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1191,"        return exp * 4 - 4;
",2,2,0,0,0,1,0,0,0,4,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1199,"        Dfp d = newInstance(getOne());
",2,0,0,2,4,0,4,2,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1201,"        if (e >= 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1202,"            d.exp = e / 4 + 1;
",6,2,0,0,0,0,0,0,0,9,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1204,"            d.exp = (e + 1) / 4;
",6,2,0,1,2,0,0,0,0,9,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1207,"        switch ((e % 4 + 4) % 4) {
",2,3,0,2,5,0,0,0,0,5,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1209,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1211,"                d = d.multiply(10);
",2,0,0,1,2,0,4,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1212,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1214,"                d = d.multiply(100);
",2,0,0,1,2,0,4,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1215,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1217,"                d = d.multiply(1000);
",2,0,0,1,2,0,4,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1220,"        return d;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1255,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1256,"            final Dfp result = newInstance(getZero());
",2,0,0,2,4,1,4,2,0,9,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1257,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1258,"            return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);
",4,0,0,1,2,1,8,0,0,12,58,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1263,"            if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1264,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1267,"            if (x.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,16,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1268,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1271,"            if (nans == INFINITE && x.nans == FINITE) {
",10,3,0,1,3,0,0,0,0,13,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1272,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1275,"            if (x.nans == INFINITE && nans == FINITE) {
",10,3,0,1,3,0,0,0,0,13,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1276,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1279,"            if (x.nans == INFINITE && nans == INFINITE && sign == x.sign) {
",16,5,0,1,3,0,0,0,0,21,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1280,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1283,"            if (x.nans == INFINITE && nans == INFINITE && sign != x.sign) {
",16,5,0,1,3,0,0,0,0,21,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1284,"                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1285,"                Dfp result = newInstance(getZero());
",2,0,0,2,4,0,4,2,0,8,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1286,"                result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1287,"                result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);
",6,0,0,1,2,0,8,0,0,15,60,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1288,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1320,"            a.exp = b.exp;
",8,0,0,0,0,0,0,0,0,9,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1421,"                inc = false;
",2,0,0,0,0,0,0,0,0,4,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1422,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1425,"                inc = n != 0;       // round up if n!=0
",4,1,0,0,0,0,0,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1426,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1429,"                inc = n >= 5000;  // round half up
",4,1,0,0,0,0,0,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1430,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1433,"                inc = n > 5000;  // round half down
",4,1,0,0,0,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1434,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1441,"                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd
",6,6,1,3,6,0,0,0,0,15,71,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1442,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1445,"                inc = sign == 1 && n != 0;  // round ceil
",6,3,0,0,0,0,0,0,0,10,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1446,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1450,"                inc = sign == -1 && n != 0;  // round floor
",6,3,0,0,0,0,0,0,0,11,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1464,"                shiftRight();
",0,0,0,1,2,0,2,0,0,2,13,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1465,"                mant[mant.length-1] = rh;
",6,1,1,1,2,0,0,0,0,10,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1472,"            field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);
",4,0,0,1,2,0,4,0,0,8,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1473,"            return DfpField.FLAG_UNDERFLOW;
",4,0,0,0,0,1,0,0,0,4,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1478,"            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);
",4,0,0,1,2,0,4,0,0,8,47,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1479,"            return DfpField.FLAG_OVERFLOW;
",4,0,0,0,0,1,0,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1500,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1501,"            final Dfp result = newInstance(getZero());
",2,0,0,2,4,1,4,2,0,9,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1502,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1503,"            return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);
",4,0,0,1,2,1,8,0,0,12,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1510,"            if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1511,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1514,"            if (x.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,16,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1515,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1518,"            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {
",18,6,0,2,5,0,0,0,0,24,73,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1519,"                result = newInstance(this);
",2,0,0,1,2,0,2,0,0,5,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1520,"                result.sign = (byte) (sign * x.sign);
",10,1,0,2,4,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1521,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1524,"            if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {
",14,6,1,2,5,0,0,0,0,22,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1525,"                result = newInstance(x);
",2,0,0,1,2,0,4,0,0,7,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1526,"                result.sign = (byte) (sign * x.sign);
",10,1,0,2,4,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1527,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1530,"            if (x.nans == INFINITE && nans == INFINITE) {
",10,3,0,1,3,0,0,0,0,13,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1531,"                result = newInstance(this);
",2,0,0,1,2,0,2,0,0,5,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1532,"                result.sign = (byte) (sign * x.sign);
",10,1,0,2,4,0,0,0,0,12,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1533,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1536,"            if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||
",14,7,1,2,5,0,0,0,0,23,74,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1538,"                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1539,"                result = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1540,"                result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1541,"                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);
",6,0,0,1,2,0,8,0,0,15,65,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1542,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1587,"            excp = result.round(0); // has no effect except to check status
",2,0,0,1,2,0,4,0,0,7,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1603,"        if (x >= 0 && x < RADIX) {
",6,3,0,1,3,0,0,0,0,9,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1604,"            return multiplyFast(x);
",0,0,0,1,2,1,4,0,0,4,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1606,"            return multiply(newInstance(x));
",0,0,0,2,4,1,6,0,0,6,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1616,"        Dfp result = newInstance(this);
",2,0,0,1,2,0,2,2,0,6,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1619,"        if (nans != FINITE) {
",4,1,0,1,3,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1620,"            if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1621,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1624,"            if (nans == INFINITE && x != 0) {
",6,3,0,1,3,0,0,0,0,9,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1625,"                result = newInstance(this);
",2,0,0,1,2,0,2,0,0,5,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1626,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1629,"            if (nans == INFINITE && x == 0) {
",6,3,0,1,3,0,0,0,0,9,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1630,"                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1631,"                result = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1632,"                result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1633,"                result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);
",6,0,0,3,6,0,10,0,0,17,86,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1634,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1639,"        if (x < 0 || x >= RADIX) {
",6,3,0,1,3,0,0,0,0,9,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1640,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1641,"            result = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1642,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1643,"            result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);
",6,0,0,1,2,0,8,0,0,15,70,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1644,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1647,"        int rh = 0;
",2,0,0,0,0,0,0,0,0,2,11,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1648,"        for (int i = 0; i < mant.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1649,"            final int r = mant[i] * x + rh;
",6,2,1,1,2,1,0,0,0,13,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1650,"            rh = r / RADIX;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1651,"            result.mant[i] = r - rh * RADIX;
",10,2,1,1,2,0,0,0,0,15,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1654,"        int lostdigit = 0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1655,"        if (rh != 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1656,"            lostdigit = result.mant[0];
",6,0,0,1,2,0,0,0,0,7,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1657,"            result.shiftRight();
",0,0,0,1,2,0,4,0,0,4,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1658,"            result.mant[mant.length-1] = rh;
",10,1,0,1,2,0,0,0,0,12,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1661,"        if (result.mant[mant.length-1] == 0) { // if result is zero, set exp to zero
",8,2,0,2,5,0,0,0,0,10,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1662,"            result.exp = 0;
",4,0,0,0,0,0,0,0,0,5,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1665,"        final int excp = result.round(lostdigit);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1666,"        if (excp != 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1667,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);
",2,0,0,1,2,0,10,0,0,13,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1670,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1691,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1692,"            final Dfp result = newInstance(getZero());
",2,0,0,2,4,1,4,2,0,9,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1693,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1694,"            return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);
",4,0,0,1,2,1,8,0,0,12,67,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1701,"            if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1702,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1705,"            if (divisor.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1706,"                return divisor;
",2,0,0,0,0,1,0,0,0,2,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1709,"            if (nans == INFINITE && divisor.nans == FINITE) {
",10,3,0,1,3,0,0,0,0,13,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1710,"                result = newInstance(this);
",2,0,0,1,2,0,2,0,0,5,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1711,"                result.sign = (byte) (sign * divisor.sign);
",10,1,0,2,4,0,0,0,0,12,43,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1712,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1715,"            if (divisor.nans == INFINITE && nans == FINITE) {
",10,3,0,1,3,0,0,0,0,13,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1716,"                result = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1717,"                result.sign = (byte) (sign * divisor.sign);
",10,1,0,2,4,0,0,0,0,12,43,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1718,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1721,"            if (divisor.nans == INFINITE && nans == INFINITE) {
",10,3,0,1,3,0,0,0,0,13,51,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1722,"                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1723,"                result = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1724,"                result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1725,"                result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);
",6,0,0,1,2,0,8,0,0,15,69,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1726,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1732,"            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);
",4,0,0,1,2,0,4,0,0,8,47,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1733,"            result = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1734,"            result.sign = (byte) (sign * divisor.sign);
",10,1,0,2,4,0,0,0,0,12,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1735,"            result.nans = INFINITE;
",6,0,0,0,0,0,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1736,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);
",6,0,0,1,2,0,8,0,0,15,70,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1737,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1837,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1877,"            excp = result.round(0);
",2,0,0,1,2,0,4,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1896,"            if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1897,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1900,"            if (nans == INFINITE) {
",4,1,0,1,3,0,0,0,0,5,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1901,"                return newInstance(this);
",0,0,0,1,2,1,2,0,0,2,25,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1907,"            field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);
",4,0,0,1,2,0,4,0,0,8,47,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1908,"            Dfp result = newInstance(getZero());
",2,0,0,2,4,0,4,2,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1909,"            result.sign = sign;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1910,"            result.nans = INFINITE;
",6,0,0,0,0,0,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1911,"            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);
",6,0,0,2,4,0,8,0,0,15,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1912,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1917,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1918,"            Dfp result = newInstance(getZero());
",2,0,0,2,4,0,4,2,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1919,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1920,"            result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);
",6,0,0,1,2,0,8,0,0,15,68,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1921,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1954,"        return field.getOne().divide(this);
",0,0,0,2,4,1,6,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1965,"            return newInstance(this);
",0,0,0,1,2,1,2,0,0,2,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1969,"            if (nans == INFINITE && sign == 1) {
",6,3,0,1,3,0,0,0,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1971,"                return newInstance(this);
",0,0,0,1,2,1,2,0,0,2,25,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1974,"            if (nans == QNAN) {
",4,1,0,1,3,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1975,"                return newInstance(this);
",0,0,0,1,2,1,2,0,0,2,25,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1978,"            if (nans == SNAN) {
",4,1,0,1,3,0,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1981,"                field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1982,"                result = newInstance(this);
",2,0,0,1,2,0,2,0,0,5,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1983,"                result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);
",6,0,0,1,2,0,6,0,0,14,64,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1984,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1992,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1993,"            result = newInstance(this);
",2,0,0,1,2,0,2,0,0,5,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1994,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1995,"            result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);
",6,0,0,1,2,0,6,0,0,14,64,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,1996,"            return result;
",2,0,0,0,0,1,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2003,"            x.exp = this.exp / 2;
",6,1,0,0,0,0,0,0,0,8,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2012,"                x.mant[mant.length-1] = 1500;
",8,1,0,1,2,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2013,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2015,"                x.mant[mant.length-1] = 2200;
",8,1,0,1,2,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2016,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2039,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2060,"            if (nans == INFINITE) {
",4,1,0,1,3,0,0,0,0,5,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2061,"                return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;
",6,1,0,1,2,1,0,0,0,7,62,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2063,"                return NAN_STRING;
",2,0,0,0,0,1,0,0,0,2,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2068,"            return dfp2sci();
",0,0,0,1,2,1,2,0,0,2,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2079,"        char rawdigits[]    = new char[mant.length * 4];
",6,1,0,2,4,0,0,0,0,7,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2080,"        char outputbuffer[] = new char[mant.length * 4 + 20];
",6,2,0,2,4,0,0,0,0,8,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2088,"        p = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2089,"        for (int i = mant.length - 1; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2090,"            rawdigits[p++] = (char) ((mant[i] / 1000) + '0');
",2,2,1,5,10,0,0,0,0,13,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2091,"            rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');
",2,3,1,6,12,0,0,0,0,14,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2092,"            rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');
",2,3,1,6,12,0,0,0,0,14,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2093,"            rawdigits[p++] = (char) (((mant[i]) % 10) + '0');
",2,2,1,6,12,0,0,0,0,13,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2097,"        for (p = 0; p < rawdigits.length; p++) {
",10,1,0,1,3,0,0,0,0,13,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2098,"            if (rawdigits[p] != '0') {
",0,1,1,2,5,0,0,0,0,6,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2099,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2102,"        shf = p;
",4,0,0,0,0,0,0,0,0,5,8,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2105,"        q = 0;
",2,0,0,0,0,0,0,0,0,3,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2106,"        if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2107,"            outputbuffer[q++] = '-';
",2,0,1,1,2,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2110,"        if (p != rawdigits.length) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2112,"            outputbuffer[q++] = rawdigits[p++];
",4,0,1,2,4,0,0,0,0,11,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2113,"            outputbuffer[q++] = '.';
",2,0,1,1,2,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2115,"            while (p<rawdigits.length) {
",6,1,0,1,3,0,0,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2116,"                outputbuffer[q++] = rawdigits[p++];
",4,0,1,2,4,0,0,0,0,11,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2119,"            outputbuffer[q++] = '0';
",2,0,1,1,2,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2120,"            outputbuffer[q++] = '.';
",2,0,1,1,2,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2121,"            outputbuffer[q++] = '0';
",2,0,1,1,2,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2122,"            outputbuffer[q++] = 'e';
",2,0,1,1,2,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2123,"            outputbuffer[q++] = '0';
",2,0,1,1,2,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2124,"            return new String(outputbuffer, 0, 5);
",2,0,0,1,2,1,0,2,0,4,38,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2127,"        outputbuffer[q++] = 'e';
",2,0,1,1,2,0,0,0,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2131,"        e = exp * 4 - shf - 1;
",6,3,0,0,0,0,0,0,0,10,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2132,"        ae = e;
",4,0,0,0,0,0,0,0,0,5,7,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2133,"        if (e < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2134,"            ae = -e;
",4,0,0,0,0,0,0,0,0,6,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2138,"        for (p = 1000000000; p > ae; p /= 10) {
",8,1,0,1,3,0,0,0,0,11,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2142,"        if (e < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2143,"            outputbuffer[q++] = '-';
",2,0,1,1,2,0,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2146,"        while (p > 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2147,"            outputbuffer[q++] = (char)(ae / p + '0');
",6,2,1,3,6,0,0,0,0,13,41,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2148,"            ae = ae % p;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2149,"            p = p / 10;
",4,1,0,0,0,0,0,0,0,6,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2152,"        return new String(outputbuffer, 0, q);
",4,0,0,1,2,1,0,2,0,6,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2175,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2176,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2177,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2178,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2179,"            e++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2194,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2195,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2196,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2197,"            buffer[p++] = '0';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2198,"            e--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2203,"            buffer[p++] = '.';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2222,"            buffer[--q] = '-';
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2241,"                def = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2242,"                def.sign = result.sign;
",8,0,0,0,0,0,0,0,0,9,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2243,"                def.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2244,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2247,"                if (nans == FINITE && mant[mant.length-1] != 0) {
",8,4,1,2,5,0,0,0,0,14,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2249,"                    def = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2250,"                    def.sign = (byte)(sign*oper.sign);
",10,1,0,2,4,0,0,0,0,12,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2251,"                    def.nans = INFINITE;
",6,0,0,0,0,0,0,0,0,7,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2254,"                if (nans == FINITE && mant[mant.length-1] == 0) {
",8,4,1,2,5,0,0,0,0,14,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2256,"                    def = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2257,"                    def.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,16,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2260,"                if (nans == INFINITE || nans == QNAN) {
",8,3,0,1,3,0,0,0,0,11,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2261,"                    def = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2262,"                    def.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,16,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2265,"                if (nans == INFINITE || nans == SNAN) {
",8,3,0,1,3,0,0,0,0,11,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2266,"                    def = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2267,"                    def.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,16,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2272,"                if ( (result.exp+mant.length) < MIN_EXP) {
",10,2,0,2,5,0,0,0,0,12,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2273,"                    def = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2274,"                    def.sign = result.sign;
",8,0,0,0,0,0,0,0,0,9,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2276,"                    def = newInstance(result);  // gradual underflow
",2,0,0,1,2,0,4,0,0,7,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2278,"                result.exp = result.exp + ERR_SCALE;
",10,1,0,0,0,0,0,0,0,12,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2279,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2282,"                result.exp = result.exp - ERR_SCALE;
",10,1,0,0,0,0,0,0,0,12,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2283,"                def = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2284,"                def.sign = result.sign;
",8,0,0,0,0,0,0,0,0,9,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2285,"                def.nans = INFINITE;
",6,0,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2286,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2314,"        return nans;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2324,"        Dfp result = x.newInstance(x);
",2,0,0,1,2,0,6,2,0,10,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2325,"        result.sign = y.sign;
",8,0,0,0,0,0,0,0,0,9,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2326,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2337,"        if (field.getRadixDigits() != x.field.getRadixDigits()) {
",4,1,0,3,7,0,6,0,0,11,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2338,"            field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2339,"            final Dfp result = newInstance(getZero());
",2,0,0,2,4,1,4,2,0,9,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2340,"            result.nans = QNAN;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2341,"            return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);
",4,0,0,1,2,1,8,0,0,12,65,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2345,"        boolean up = false;
",2,0,0,0,0,0,0,0,0,3,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2346,"        if (this.lessThan(x)) {
",0,0,0,2,5,0,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2347,"            up = true;
",2,0,0,0,0,0,0,0,0,4,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2350,"        if (compare(this, x) == 0) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2351,"            return newInstance(x);
",0,0,0,1,2,1,4,0,0,4,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2354,"        if (lessThan(getZero())) {
",0,0,0,3,7,0,4,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2355,"            up = !up;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2360,"        if (up) {
",2,0,0,1,3,0,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2361,"            inc = newInstance(getOne());
",2,0,0,2,4,0,4,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2362,"            inc.exp = this.exp-mant.length+1;
",10,2,0,0,0,0,0,0,0,13,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2363,"            inc.sign = this.sign;
",6,0,0,0,0,0,0,0,0,7,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2365,"            if (this.equals(getZero())) {
",0,0,0,3,7,0,4,0,0,4,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2366,"                inc.exp = MIN_EXP-mant.length;
",10,1,0,0,0,0,0,0,0,12,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2369,"            result = add(inc);
",2,0,0,1,2,0,4,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2371,"            inc = newInstance(getOne());
",2,0,0,2,4,0,4,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2372,"            inc.exp = this.exp;
",6,0,0,0,0,0,0,0,0,7,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2373,"            inc.sign = this.sign;
",6,0,0,0,0,0,0,0,0,7,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2375,"            if (this.equals(inc)) {
",0,0,0,2,5,0,4,0,0,4,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2376,"                inc.exp = this.exp-mant.length;
",10,1,0,0,0,0,0,0,0,12,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2378,"                inc.exp = this.exp-mant.length+1;
",10,2,0,0,0,0,0,0,0,13,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2381,"            if (this.equals(getZero())) {
",0,0,0,3,7,0,4,0,0,4,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2382,"                inc.exp = MIN_EXP-mant.length;
",10,1,0,0,0,0,0,0,0,12,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2385,"            result = this.subtract(inc);
",2,0,0,1,2,0,4,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2388,"        if (result.classify() == INFINITE && this.classify() != INFINITE) {
",4,3,0,3,7,0,6,0,0,13,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2389,"            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2390,"            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);
",6,0,0,1,2,0,8,0,0,15,67,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2393,"        if (result.equals(getZero()) && this.equals(getZero()) == false) {
",0,2,0,5,11,0,10,0,0,13,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2394,"            field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);
",4,0,0,1,2,0,4,0,0,8,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2395,"            result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);
",6,0,0,1,2,0,8,0,0,15,67,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2398,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2408,"        if (isInfinite()) {
",0,0,0,2,5,0,2,0,0,2,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2409,"            if (lessThan(getZero())) {
",0,0,0,3,7,0,4,0,0,4,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2410,"                return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2412,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2416,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2417,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2420,"        Dfp y = this;
",2,0,0,0,0,0,0,2,0,4,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2421,"        boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2422,"        int cmp0 = compare(this, getZero());
",2,0,0,2,4,0,4,0,0,6,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2423,"        if (cmp0 == 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2424,"            return sign < 0 ? -0.0 : +0.0;
",2,1,0,0,0,1,0,0,0,5,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2425,"        } else if (cmp0 < 0) {
",2,1,0,1,4,0,0,0,0,3,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2426,"            y = negate();
",2,0,0,1,2,0,2,0,0,5,13,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2427,"            negate = true;
",2,0,0,0,0,0,0,0,0,4,14,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2432,"        int exponent = (int)(y.log10() * 3.32);
",2,1,0,3,6,0,4,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2433,"        if (exponent < 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2434,"            exponent--;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2437,"        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);
",2,0,0,2,4,0,8,2,0,12,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2438,"        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {
",0,1,0,3,7,0,12,0,0,13,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2439,"            tempDfp = tempDfp.multiply(2);
",2,0,0,1,2,0,4,0,0,7,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2440,"            exponent++;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2442,"        exponent--;
",2,0,0,0,0,0,0,0,0,3,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2446,"        y = y.divide(DfpMath.pow(getTwo(), exponent));
",2,0,0,3,6,0,12,0,0,15,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2447,"        if (exponent > -1023) {
",2,1,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2448,"            y = y.subtract(getOne());
",2,0,0,2,4,0,6,0,0,9,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2451,"        if (exponent < -1074) {
",2,1,0,1,3,0,0,0,0,4,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2452,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2455,"        if (exponent > 1023) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2456,"            return negate ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;
",10,0,0,0,0,1,0,0,0,10,68,7,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2460,"        y = y.multiply(newInstance(4503599627370496l)).rint();
",2,0,0,3,6,0,8,0,0,11,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2461,"        String str = y.toString();
",2,0,0,1,2,0,4,2,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2462,"        str = str.substring(0, str.length()-1);
",2,1,0,2,4,0,8,0,0,12,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2463,"        long mantissa = Long.parseLong(str);
",2,0,0,1,2,0,6,0,0,8,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2465,"        if (mantissa == 4503599627370496L) {
",2,1,0,1,3,0,0,0,0,3,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2467,"            mantissa = 0;
",2,0,0,0,0,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2468,"            exponent++;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2472,"        if (exponent <= -1023) {
",2,1,0,1,3,0,0,0,0,4,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2473,"            exponent--;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2476,"        while (exponent < -1023) {
",2,1,0,1,3,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2477,"            exponent++;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2478,"            mantissa >>>= 1;
",2,0,0,0,0,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2481,"        long bits = mantissa | ((exponent + 1023L) << 52);
",6,3,0,2,4,0,0,0,0,9,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2482,"        double x = Double.longBitsToDouble(bits);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2484,"        if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2485,"            x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2488,"        return x;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2497,"        double split[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2498,"        long mask = 0xffffffffc0000000L;
",2,0,0,0,0,0,0,0,0,2,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2500,"        split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);
",2,1,1,4,8,0,10,0,0,16,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2501,"        split[1] = subtract(newInstance(split[0])).toDouble();
",0,0,1,5,10,0,6,0,0,11,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,2503,"        return split;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,15,96,"public class Dfp implements FieldElement<Dfp> {
",2,0,0,0,1,1,0,4,0,7,47,1,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,262,"        rMode = mode;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,263,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,284,"        return ieeeFlags;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,298,"        ieeeFlags = 0;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,299,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,313,"        ieeeFlags = flags & (FLAG_INVALID | FLAG_DIV_ZERO | FLAG_OVERFLOW | FLAG_UNDERFLOW | FLAG_INEXACT);
",14,2,0,1,2,0,0,0,0,17,99,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,314,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,338,"        return new Dfp(this);
",0,0,0,1,2,1,0,2,0,2,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,346,"        return new Dfp(this, x);
",2,0,0,1,2,1,0,2,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,354,"        return new Dfp(this, x);
",2,0,0,1,2,1,0,2,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,362,"        return new Dfp(this, x);
",2,0,0,1,2,1,0,2,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,370,"        return new Dfp(this, x);
",2,0,0,1,2,1,0,2,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,378,"        return new Dfp(d);
",2,0,0,1,2,1,0,2,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,386,"        return new Dfp(this, s);
",2,0,0,1,2,1,0,2,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,396,"        return new Dfp(this, sign, nans);
",4,0,0,1,2,1,0,2,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,410,"        return one;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,415,"        return Dfp.class;
",0,0,0,0,0,1,0,2,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,422,"        return two;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,429,"        return sqr2;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,436,"        return sqr2Split.clone();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,443,"        return sqr2Reciprocal;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,450,"        return sqr3;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,457,"        return sqr3Reciprocal;
",2,0,0,0,0,1,0,0,0,2,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,464,"        return pi;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,471,"        return piSplit.clone();
",0,0,0,1,2,1,4,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,478,"        return e;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,485,"        return eSplit.clone();
",0,0,0,1,2,1,4,0,0,4,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,492,"        return ln2;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,499,"        return ln2Split.clone();
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,506,"        return ln5;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,513,"        return ln5Split.clone();
",0,0,0,1,2,1,4,0,0,4,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,520,"        return ln10;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/dfp/DfpField,15,27,"public class DfpField implements Field<Dfp> {
",2,0,0,0,1,1,0,4,0,7,45,1,0.00000,0
