dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math3/util/FastMath,32,2480,"            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
",6,5,1,5,10,1,0,0,0,20,91,6,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2482,"            ya = epsA * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2483,"            yb = epsB * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2484,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,1.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,81,"        this(p1, p2.subtract(p1).crossProduct(p3.subtract(p1)));
",2,0,0,4,8,0,14,0,0,16,56,4,0.50000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,82,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,204,"                final SubHyperplane.SplitSubHyperplane<S> split = other.split(inserted);
",6,0,0,1,2,1,6,2,0,15,72,7,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,205,"                plusList.add(split.getPlus());
",0,0,0,2,4,0,8,0,0,8,30,8,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,206,"                minusList.add(split.getMinus());
",0,0,0,2,4,0,8,0,0,8,32,8,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,207,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,324,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,406,"        return originOffset + (sameOrientationAs(plane) ? -plane.originOffset : plane.originOffset);
",10,1,0,2,4,1,4,0,0,16,92,4,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,427,"        return (((Plane) other).w).dotProduct(w) > 0.0;
",4,1,0,4,8,1,4,2,0,11,47,4,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,63,"            final double global = otherPlane.getOffset(thisPlane);
",2,0,0,1,2,1,6,0,0,9,54,6,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,64,"            return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
",16,2,0,3,6,1,0,0,0,19,88,7,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,105,"            final double global = otherPlane.getOffset(thisPlane);
",2,0,0,1,2,1,6,0,0,9,54,6,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,106,"            return (global < -1.0e-10) ?
",2,1,0,1,2,1,0,0,0,4,28,8,0.33333,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,674,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,675,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,676,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,677,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,678,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,679,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,682,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,683,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,686,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,687,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,688,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,689,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,690,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,691,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,694,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,695,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,698,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,699,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,700,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,704,"        double result = s12High + (prod1Low + prod2Low + s12Low);
",10,2,0,1,2,0,0,0,0,12,57,5,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,706,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,712,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,754,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,755,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,756,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,757,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,758,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,759,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,762,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,763,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,766,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,767,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,768,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,769,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,770,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,771,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,774,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,775,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,778,"        final double ca3        = SPLIT_FACTOR * a3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,779,"        final double a3High     = ca3 - (ca3 - a3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,780,"        final double a3Low      = a3 - a3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,781,"        final double cb3        = SPLIT_FACTOR * b3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,782,"        final double b3High     = cb3 - (cb3 - b3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,783,"        final double b3Low      = b3 - b3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,786,"        final double prod3High  = a3 * b3;
",6,1,0,0,0,1,0,0,0,8,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,787,"        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,790,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,791,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,792,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,795,"        final double s123High   = s12High + prod3High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,796,"        final double s123Prime  = s123High - prod3High;
",6,1,0,0,0,1,0,0,0,8,47,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,797,"        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);
",12,4,0,3,6,1,0,0,0,17,87,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,801,"        double result = s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);
",14,2,0,1,2,0,0,0,0,16,79,5,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,803,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,809,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,50,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,395,"        if (barycenter == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,398,"        return barycenter;
",2,0,0,0,0,1,0,0,0,2,18,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,482,"            final SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);
",6,0,0,1,2,1,6,2,0,15,72,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,485,"            recurseSides(node.getPlus(), split.getPlus(), sides);
",0,0,0,3,6,0,12,0,0,12,53,6,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,488,"            if (!(sides.plusFound() && sides.minusFound())) {
",0,1,0,4,9,0,8,0,0,10,49,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,489,"                recurseSides(node.getMinus(), split.getMinus(), sides);
",0,0,0,3,6,0,12,0,0,12,55,8,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,503,"                    sides.rememberMinusFound();
",0,0,0,1,2,0,4,0,0,4,27,10,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,95,"    public Vector3D(double x, double y, double z) {
",8,0,0,1,3,1,0,0,0,9,47,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,96,"        this.x = x;
",4,0,0,0,0,0,0,0,0,5,11,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,97,"        this.y = y;
",4,0,0,0,0,0,0,0,0,5,11,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,98,"        this.z = z;
",4,0,0,0,0,0,0,0,0,5,11,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,99,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,137,"    public Vector3D(double a, Vector3D u) {
",6,0,0,1,3,1,0,2,0,9,39,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,138,"        this.x = a * u.x;
",8,1,0,0,0,0,0,0,0,10,17,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,139,"        this.y = a * u.y;
",8,1,0,0,0,0,0,0,0,10,17,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,140,"        this.z = a * u.z;
",8,1,0,0,0,0,0,0,0,10,17,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,141,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {
",10,0,0,1,3,1,0,4,0,15,65,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);
",10,0,0,1,2,0,8,0,0,19,58,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);
",10,0,0,1,2,0,8,0,0,19,58,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);
",10,0,0,1,2,0,8,0,0,19,58,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,168,"                    double a3, Vector3D u3) {
",4,0,0,0,2,0,0,2,0,6,25,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,169,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x);
",14,0,0,1,2,0,10,0,0,25,68,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,170,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y);
",14,0,0,1,2,0,10,0,0,25,68,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,171,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z);
",14,0,0,1,2,0,10,0,0,25,68,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,172,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);
",2,0,0,1,2,3,0,4,0,10,62,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,53,"    public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);
",2,0,0,1,2,3,0,4,0,10,62,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,56,"    public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);
",2,0,0,1,2,3,0,4,0,9,60,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,59,"    public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);
",2,0,0,1,2,3,0,4,0,10,62,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,63,"    public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);
",14,0,0,1,2,3,0,4,0,21,84,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,67,"    public static final Vector3D POSITIVE_INFINITY =
",2,0,0,0,0,3,0,2,0,7,48,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,71,"    public static final Vector3D NEGATIVE_INFINITY =
",2,0,0,0,0,3,0,2,0,7,48,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,198,"        return x;
",2,0,0,0,0,1,0,0,0,2,9,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,206,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,214,"        return z;
",2,0,0,0,0,1,0,0,0,2,9,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,243,"        return FastMath.sqrt (x * x + y * y + z * z);
",12,5,0,1,2,1,4,0,0,21,45,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,249,"        return x * x + y * y + z * z;
",12,5,0,0,0,1,0,0,0,17,29,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,275,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,276,"        return new Vector3D(x + v3.x, y + v3.y, z + v3.z);
",18,3,0,1,2,1,0,2,0,23,50,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,286,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);
",18,3,0,1,2,1,0,2,0,23,50,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,321,"        double threshold = 0.6 * getNorm();
",2,1,0,1,2,0,2,0,0,5,35,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,322,"        if (threshold == 0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,326,"        if ((x >= -threshold) && (x <= threshold)) {
",8,3,0,3,7,0,0,0,0,12,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,327,"            double inverse  = 1 / FastMath.sqrt(y * y + z * z);
",10,4,0,1,2,0,4,0,0,18,51,7,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,328,"            return new Vector3D(0, inverse * z, -inverse * y);
",8,2,0,1,2,1,0,2,0,13,50,7,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,329,"        } else if ((y >= -threshold) && (y <= threshold)) {
",8,3,0,3,8,0,0,0,0,12,51,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,330,"            double inverse  = 1 / FastMath.sqrt(x * x + z * z);
",10,4,0,1,2,0,4,0,0,18,51,8,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,331,"            return new Vector3D(-inverse * z, 0, inverse * x);
",8,2,0,1,2,1,0,2,0,13,50,8,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,453,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,454,"        return MathArrays.linearCombination(x, v3.x, y, v3.y, z, v3.z);
",12,0,0,1,2,1,10,0,0,22,63,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,462,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,463,"        return new Vector3D(MathArrays.linearCombination(y, v3.z, -z, v3.y),
",10,0,0,1,3,1,6,2,0,19,68,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,519,"        return v1.crossProduct(v2);
",0,0,0,1,2,1,6,0,0,6,27,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,118,"        getTree(true).visit(new FacetsContributionVisitor());
",0,0,0,3,6,0,4,2,0,7,53,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,42,"public class PolyhedronsSet extends AbstractRegion<Euclidean3D, Euclidean2D> {
",2,0,0,0,1,1,0,6,0,9,78,1,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,54,"    public Line(final Vector3D p1, final Vector3D p2) {
",6,0,0,1,3,3,0,4,0,13,51,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,55,"        reset(p1, p2);
",0,0,0,1,2,0,6,0,0,6,14,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,74,"        final Vector3D delta = p2.subtract(p1);
",2,0,0,1,2,1,6,2,0,11,39,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,75,"        final double norm2 = delta.getNormSq();
",2,0,0,1,2,1,4,0,0,7,39,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,76,"        if (norm2 == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);
",4,1,0,2,4,0,6,2,0,14,65,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);
",8,1,0,2,4,0,6,2,0,19,67,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,94,"        return direction;
",2,0,0,0,0,1,0,0,0,2,17,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,120,"        return new Vector3D(1.0, zero, abscissa, direction);
",6,0,0,1,2,1,0,2,0,8,52,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,134,"        return pointAt(((Vector1D) point).getX());
",2,0,0,4,8,1,4,2,0,8,42,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,55,"    public Plane(final Vector3D normal) {
",4,0,0,1,3,2,0,2,0,8,37,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,56,"        setNormal(normal);
",0,0,0,1,2,0,4,0,0,4,18,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,57,"        originOffset = 0;
",2,0,0,0,0,0,0,0,0,3,17,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,58,"        setFrame();
",0,0,0,1,2,0,2,0,0,2,11,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,66,"    public Plane(final Vector3D p, final Vector3D normal) {
",6,0,0,1,3,3,0,4,0,13,55,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,67,"        setNormal(normal);
",0,0,0,1,2,0,4,0,0,4,18,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,68,"        originOffset = -p.dotProduct(w);
",2,0,0,1,2,0,6,0,0,10,32,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,69,"        setFrame();
",0,0,0,1,2,0,2,0,0,2,11,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,90,"    public Plane(final Plane plane) {
",4,0,0,1,3,2,0,2,0,8,33,2,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,91,"        originOffset = plane.originOffset;
",6,0,0,0,0,0,0,0,0,7,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,92,"        origin = plane.origin;
",6,0,0,0,0,0,0,0,0,7,22,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,93,"        u      = plane.u;
",6,0,0,0,0,0,0,0,0,7,17,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,94,"        v      = plane.v;
",6,0,0,0,0,0,0,0,0,7,17,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,95,"        w      = plane.w;
",6,0,0,0,0,0,0,0,0,7,17,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,96,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,105,"        return new Plane(this);
",0,0,0,1,2,1,0,2,0,2,23,6,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,137,"        final double norm = normal.getNorm();
",2,0,0,1,2,1,4,0,0,7,37,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,138,"        if (norm < 1.0e-10) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,141,"        w = new Vector3D(1.0 / norm, normal);
",6,1,0,1,2,0,0,2,0,10,37,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,142,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,147,"        origin = new Vector3D(-originOffset, w);
",6,0,0,1,2,0,0,2,0,10,40,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,148,"        u = w.orthogonal();
",2,0,0,1,2,0,4,0,0,7,19,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,149,"        v = Vector3D.crossProduct(w, u);
",2,0,0,1,2,0,8,0,0,11,32,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,150,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,171,"        return w;
",2,0,0,0,0,1,0,0,0,2,9,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,225,"        return new Vector2D(point.dotProduct(u), point.dotProduct(v));
",0,0,0,3,6,1,12,2,0,14,62,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,235,"        final Vector2D p2D = (Vector2D) point;
",4,0,0,1,2,1,0,4,0,9,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,236,"        return new Vector3D(p2D.getX(), u, p2D.getY(), v, -originOffset, w);
",8,0,0,3,6,1,8,2,0,19,68,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,322,"        final Vector3D direction = Vector3D.crossProduct(w, other.w);
",6,0,0,1,2,1,6,2,0,15,61,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,323,"        if (direction.getNorm() < 1.0e-10) {
",0,1,0,2,5,0,4,0,0,5,36,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,326,"        final Vector3D point = intersection(this, other, new Plane(direction));
",4,0,0,2,4,1,4,4,0,13,71,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,327,"        return new Line(point, point.add(direction));
",2,0,0,2,4,1,6,2,0,10,45,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,339,"        final double a1 = plane1.w.getX();
",6,0,0,1,2,1,2,0,0,9,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,340,"        final double b1 = plane1.w.getY();
",6,0,0,1,2,1,2,0,0,9,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,341,"        final double c1 = plane1.w.getZ();
",6,0,0,1,2,1,2,0,0,9,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,342,"        final double d1 = plane1.originOffset;
",6,0,0,0,0,1,0,0,0,7,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,344,"        final double a2 = plane2.w.getX();
",6,0,0,1,2,1,2,0,0,9,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,345,"        final double b2 = plane2.w.getY();
",6,0,0,1,2,1,2,0,0,9,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,346,"        final double c2 = plane2.w.getZ();
",6,0,0,1,2,1,2,0,0,9,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,347,"        final double d2 = plane2.originOffset;
",6,0,0,0,0,1,0,0,0,7,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,349,"        final double a3 = plane3.w.getX();
",6,0,0,1,2,1,2,0,0,9,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,350,"        final double b3 = plane3.w.getY();
",6,0,0,1,2,1,2,0,0,9,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,351,"        final double c3 = plane3.w.getZ();
",6,0,0,1,2,1,2,0,0,9,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,352,"        final double d3 = plane3.originOffset;
",6,0,0,0,0,1,0,0,0,7,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,356,"        final double a23         = b2 * c3 - b3 * c2;
",10,3,0,0,0,1,0,0,0,14,45,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,357,"        final double b23         = c2 * a3 - c3 * a2;
",10,3,0,0,0,1,0,0,0,14,45,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,358,"        final double c23         = a2 * b3 - a3 * b2;
",10,3,0,0,0,1,0,0,0,14,45,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,359,"        final double determinant = a1 * a23 + b1 * b23 + c1 * c23;
",14,5,0,0,0,1,0,0,0,20,58,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,360,"        if (FastMath.abs(determinant) < 1.0e-10) {
",0,1,0,2,5,0,6,0,0,7,42,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,364,"        final double r = 1.0 / determinant;
",4,1,0,0,0,1,0,0,0,6,35,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,365,"        return new Vector3D(
",0,0,0,0,1,1,0,2,0,2,20,6,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,376,"        return new SubPlane(this, new PolygonsSet());
",0,0,0,2,4,1,0,4,0,4,45,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,34,"public class Plane implements Hyperplane<Euclidean3D>, Embedding<Euclidean3D, Euclidean2D> {
",2,0,0,0,1,1,0,10,0,13,92,1,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,42,"        super(hyperplane, remainingRegion);
",4,0,0,1,2,0,0,0,0,4,35,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,49,"        return new SubPlane(hyperplane, remainingRegion);
",4,0,0,1,2,1,0,2,0,6,49,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,56,"        final Plane otherPlane = (Plane) hyperplane;
",4,0,0,1,2,1,0,4,0,9,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,57,"        final Plane thisPlane  = (Plane) getHyperplane();
",2,0,0,2,4,1,2,4,0,9,49,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,58,"        final Line  inter      = otherPlane.intersection(thisPlane);
",2,0,0,1,2,1,6,2,0,11,60,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,60,"        if (inter == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,74,"        Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));
",6,0,0,2,4,0,8,2,0,16,64,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,75,"        Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));
",6,0,0,2,4,0,8,2,0,16,63,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,76,"        Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());
",2,0,0,3,6,0,12,2,0,16,85,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,77,"        if (crossP.dotProduct(otherPlane.getNormal()) < 0) {
",0,1,0,3,7,0,8,0,0,9,52,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,78,"            final Vector2D tmp = p;
",4,0,0,0,0,1,0,2,0,7,23,6,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,79,"            p           = q;
",4,0,0,0,0,0,0,0,0,5,16,6,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,80,"            q           = tmp;
",4,0,0,0,0,0,0,0,0,5,18,6,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,82,"        final org.apache.commons.math3.geometry.euclidean.twod.Line line2D =
",18,0,0,0,0,1,0,0,0,19,68,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,86,"        return getRemainingRegion().side(line2D);
",0,0,0,2,4,1,6,0,0,6,41,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,99,"        final Plane otherPlane = (Plane) hyperplane;
",4,0,0,1,2,1,0,4,0,9,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,100,"        final Plane thisPlane  = (Plane) getHyperplane();
",2,0,0,2,4,1,2,4,0,9,49,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,101,"        final Line  inter      = otherPlane.intersection(thisPlane);
",2,0,0,1,2,1,6,2,0,11,60,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,103,"        if (inter == null) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,112,"        Vector2D p = thisPlane.toSubSpace(inter.toSpace(Vector1D.ZERO));
",6,0,0,2,4,0,8,2,0,16,64,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,113,"        Vector2D q = thisPlane.toSubSpace(inter.toSpace(Vector1D.ONE));
",6,0,0,2,4,0,8,2,0,16,63,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,114,"        Vector3D crossP = Vector3D.crossProduct(inter.getDirection(), thisPlane.getNormal());
",2,0,0,3,6,0,12,2,0,16,85,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,115,"        if (crossP.dotProduct(otherPlane.getNormal()) < 0) {
",0,1,0,3,7,0,8,0,0,9,52,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,116,"            final Vector2D tmp = p;
",4,0,0,0,0,1,0,2,0,7,23,6,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,117,"            p           = q;
",4,0,0,0,0,0,0,0,0,5,16,6,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,118,"            q           = tmp;
",4,0,0,0,0,0,0,0,0,5,18,6,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,120,"        final SubHyperplane<Euclidean2D> l2DMinus =
",2,0,0,0,0,1,0,4,0,7,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,122,"        final SubHyperplane<Euclidean2D> l2DPlus =
",2,0,0,0,0,1,0,4,0,7,42,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,125,"        final BSPTree<Euclidean2D> splitTree = getRemainingRegion().getTree(false).split(l2DMinus);
",2,0,0,3,6,1,8,4,0,16,91,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,126,"        final BSPTree<Euclidean2D> plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?
",2,0,0,3,6,1,8,4,0,15,90,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,131,"        final BSPTree<Euclidean2D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?
",2,0,0,3,6,1,8,4,0,15,91,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,136,"        return new SplitSubHyperplane<Euclidean3D>(new SubPlane(thisPlane.copySelf(), new PolygonsSet(plusTree)),
",2,0,0,3,7,1,4,8,0,14,105,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,137,"        public FacetsContributionVisitor() {
",2,0,0,1,3,1,0,0,0,3,36,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,138,"            setSize(0);
",0,0,0,1,2,0,2,0,0,2,11,6,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,139,"            setBarycenter(new Vector3D(0, 0, 0));
",0,0,0,2,4,0,2,2,0,4,37,6,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,140,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,144,"            return Order.MINUS_SUB_PLUS;
",4,0,0,0,0,1,0,0,0,4,28,6,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,150,"            final BoundaryAttribute<Euclidean3D> attribute =
",2,0,0,0,0,1,0,4,0,7,48,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,152,"            if (attribute.getPlusOutside() != null) {
",0,1,0,2,5,0,4,0,0,5,41,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,153,"                addContribution(attribute.getPlusOutside(), false);
",0,0,0,2,4,0,6,0,0,7,51,8,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,155,"            if (attribute.getPlusInside() != null) {
",0,1,0,2,5,0,4,0,0,5,40,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,158,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,162,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,170,"            final Region<Euclidean2D> polygon = ((SubPlane) facet).getRemainingRegion();
",4,0,0,3,6,1,2,6,0,13,76,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,171,"            final double area    = polygon.getSize();
",2,0,0,1,2,1,4,0,0,7,41,5,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,173,"            if (Double.isInfinite(area)) {
",0,0,0,2,5,0,6,0,0,6,30,6,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,178,"                final Plane    plane  = (Plane) facet.getHyperplane();
",2,0,0,2,4,1,4,4,0,11,54,7,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,179,"                final Vector3D facetB = plane.toSpace(polygon.getBarycenter());
",2,0,0,2,4,1,8,2,0,13,63,7,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,180,"                double   scaled = area * facetB.dotProduct(plane.getNormal());
",4,1,0,2,4,0,8,0,0,13,62,8,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,181,"                if (reversed) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,185,"                setSize(getSize() + scaled);
",2,1,0,2,4,0,4,0,0,7,28,8,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,186,"                setBarycenter(new Vector3D(1.0, (Vector3D) getBarycenter(), scaled, facetB));
",4,0,0,4,8,0,4,4,0,12,77,8,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,190,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2456,"            idx = (int) (((-1.7168146928204136 * xa * xa + 8.0) * xa) + 0.5);
",8,4,0,4,8,0,0,0,0,14,65,6,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,242,"        final Line otherL = (Line) other;
",4,0,0,1,2,1,0,4,0,9,33,4,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,243,"        return (sin * otherL.sin + cos * otherL.cos) >= 0.0;
",12,4,0,1,2,1,0,0,0,16,52,4,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,132,"        final Vector2D[][] v = getVertices();
",2,0,0,3,6,1,2,2,0,7,37,4,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,134,"        if (v.length == 0) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,151,"            double sum  = 0;
",2,0,0,0,0,0,0,0,0,2,16,8,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,152,"            double sumX = 0;
",2,0,0,0,0,0,0,0,0,2,16,8,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,153,"            double sumY = 0;
",2,0,0,0,0,0,0,0,0,2,16,8,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,155,"            for (Vector2D[] loop : v) {
",4,0,0,2,5,0,0,2,0,6,27,7,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,156,"                double x1 = loop[loop.length - 1].getX();
",6,1,1,2,4,0,2,0,0,11,41,10,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,157,"                double y1 = loop[loop.length - 1].getY();
",6,1,1,2,4,0,2,0,0,11,41,10,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,158,"                for (final Vector2D point : loop) {
",4,0,0,1,3,1,0,2,0,7,35,9,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,159,"                    final double x0 = x1;
",4,0,0,0,0,1,0,0,0,5,21,11,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,160,"                    final double y0 = y1;
",4,0,0,0,0,1,0,0,0,5,21,11,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,161,"                    x1 = point.getX();
",2,0,0,1,2,0,4,0,0,7,18,11,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,162,"                    y1 = point.getY();
",2,0,0,1,2,0,4,0,0,7,18,11,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,163,"                    final double factor = x0 * y1 - y0 * x1;
",10,3,0,0,0,1,0,0,0,14,40,11,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,164,"                    sum  += factor;
",4,0,0,0,0,0,0,0,0,5,15,11,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,165,"                    sumX += factor * (x0 + x1);
",8,2,0,1,2,0,0,0,0,11,27,11,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,166,"                    sumY += factor * (y0 + y1);
",8,2,0,1,2,0,0,0,0,11,27,11,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,170,"            if (sum < 0) {
",2,1,0,1,3,0,0,0,0,3,14,7,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,175,"                setSize(sum / 2);
",2,1,0,1,2,0,2,0,0,5,17,10,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,176,"                setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));
",8,4,0,4,8,0,2,2,0,16,64,10,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,181,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,510,"                    final Skew s = right.left.skew;
",8,0,0,0,0,1,0,2,0,11,31,9,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,511,"                    right.rotateCW();
",0,0,0,1,2,0,4,0,0,4,17,10,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,512,"                    rotateCCW();
",0,0,0,1,2,0,2,0,0,2,12,10,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,513,"                    switch (s) {
",2,0,0,1,3,0,0,0,0,2,12,9,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,523,"                        left.skew  = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,10,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,524,"                        right.skew = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,10,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,526,"                    skew = Skew.BALANCED;
",6,0,0,0,0,0,0,0,0,7,21,9,0.16667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,527,"                    return true;
",0,0,0,0,0,1,0,0,0,1,12,9,0.16667,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2458,"            final double oneOverXa = 1 / xa;
",4,1,0,0,0,1,0,0,0,6,32,6,0.12500,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2459,"            idx = (int) (-((-1.7168146928204136 * oneOverXa * oneOverXa + 8.0) * oneOverXa) + 13.07);
",8,4,0,4,8,0,0,0,0,15,89,6,0.12500,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2570,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.12500,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,198,"                plusList.add(other);
",0,0,0,1,2,0,6,0,0,6,20,8,0.12500,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,199,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.12500,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,500,"                    rotateCCW();
",0,0,0,1,2,0,2,0,0,2,12,9,0.12500,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,501,"                    skew      = Skew.BALANCED;
",6,0,0,0,0,0,0,0,0,7,26,8,0.12500,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,502,"                    left.skew = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,26,8,0.12500,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,503,"                    return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.12500,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,504,"                } else if (right.skew == Skew.BALANCED) {
",8,1,0,1,4,0,0,0,0,9,41,7,0.12500,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2445,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2446,"            xb = -xb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2447,"            negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2557,"            final double pia = 1.5707963267948966 * 2;
",2,1,0,0,0,1,0,0,0,4,42,6,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2558,"            final double pib = 6.123233995736766E-17 * 2;
",2,1,0,0,0,1,0,0,0,4,45,6,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2560,"            za = pia - result;
",6,1,0,0,0,0,0,0,0,8,18,6,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2561,"            zb = -(za - pia + result);
",8,2,0,1,2,0,0,0,0,12,26,6,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2562,"            zb += pib - resultb;
",6,1,0,0,0,0,0,0,0,8,20,6,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2564,"            result = za + zb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2565,"            resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,11,30,6,0.11111,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,443,"                skew = Skew.BALANCED;
",6,0,0,0,0,0,0,0,0,7,21,6,0.11111,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,444,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.11111,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,461,"                    rotateCCW();
",0,0,0,1,2,0,2,0,0,2,12,9,0.11111,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,462,"                    skew      = Skew.BALANCED;
",6,0,0,0,0,0,0,0,0,7,26,8,0.11111,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,463,"                    left.skew = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,26,8,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,361,"        if (d > -Precision.SAFE_MIN && d < Precision.SAFE_MIN){
",12,3,0,1,3,0,0,0,0,16,55,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,364,"        long xl = Double.doubleToLongBits(d);
",2,0,0,1,2,0,6,0,0,8,37,5,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,365,"        xl = xl & MASK_30BITS; // Drop low order bits
",6,1,0,0,0,0,0,0,0,8,45,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,366,"        return Double.longBitsToDouble(xl);
",0,0,0,1,2,1,6,0,0,6,35,5,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2306,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2436,"        boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2439,"        if (xa == 0.0) { // Matches +/- 0.0; return correct sign
",2,1,0,1,3,1,0,0,0,3,56,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2443,"        if (xa < 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2450,"        if (xa > 1.633123935319537E16) { // Very large input
",2,1,0,1,3,0,0,0,0,3,52,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2455,"        if (xa < 1) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2461,"        double epsA = xa - TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,40,5,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2462,"        double epsB = -(epsA - xa + TANGENT_TABLE_A[idx]);
",6,2,1,2,4,0,0,0,0,13,50,5,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2463,"        epsB += xb - TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,34,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2465,"        double temp = epsA + epsB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2466,"        epsB = -(temp - epsA - epsB);
",8,1,0,1,2,0,0,0,0,11,29,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2467,"        epsA = temp;
",4,0,0,0,0,0,0,0,0,5,12,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2470,"        temp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2471,"        double ya = xa + temp - temp;
",8,2,0,0,0,0,0,0,0,10,29,5,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2472,"        double yb = xb + xa - ya;
",8,2,0,0,0,0,0,0,0,10,25,5,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2473,"        xa = ya;
",4,0,0,0,0,0,0,0,0,5,8,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2474,"        xb += yb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2477,"        if (idx == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2485,"            double temp2 = xa * TANGENT_TABLE_A[idx];
",4,1,1,1,2,0,0,0,0,9,41,7,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2486,"            double za = 1d + temp2;
",4,1,0,0,0,0,0,0,0,5,23,7,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2487,"            double zb = -(za - 1d - temp2);
",6,1,0,1,2,0,0,0,0,8,31,7,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2488,"            temp2 = xb * TANGENT_TABLE_A[idx] + xa * TANGENT_TABLE_B[idx];
",6,3,1,2,4,0,0,0,0,18,62,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2489,"            temp = za + temp2;
",6,1,0,0,0,0,0,0,0,8,18,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2490,"            zb += -(temp - za - temp2);
",8,1,0,1,2,0,0,0,0,11,27,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2491,"            za = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2493,"            zb += xb * TANGENT_TABLE_B[idx];
",4,1,1,1,2,0,0,0,0,10,32,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2494,"            ya = epsA / za;
",6,1,0,0,0,0,0,0,0,8,15,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2496,"            temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2497,"            final double yaa = (ya + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2498,"            final double yab = ya - yaa;
",6,1,0,0,0,1,0,0,0,8,28,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2500,"            temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2501,"            final double zaa = (za + temp) - temp;
",8,2,0,1,2,1,0,0,0,11,38,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2502,"            final double zab = za - zaa;
",6,1,0,0,0,1,0,0,0,8,28,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2505,"            yb = (epsA - yaa * zaa - yaa * zab - yab * zaa - yab * zab) / za;
",22,9,0,1,2,0,0,0,0,32,65,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2507,"            yb += -epsA * zb / za / za;
",10,3,0,0,0,0,0,0,0,15,27,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2508,"            yb += epsB / za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2512,"        epsA = ya;
",4,0,0,0,0,0,0,0,0,5,10,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2513,"        epsB = yb;
",4,0,0,0,0,0,0,0,0,5,10,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2516,"        final double epsA2 = epsA * epsA;
",6,1,0,0,0,1,0,0,0,8,33,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2527,"        yb = 0.07490822288864472;
",2,0,0,0,0,0,0,0,0,3,25,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2528,"        yb = yb * epsA2 + -0.09088450866185192;
",6,2,0,0,0,0,0,0,0,10,39,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2529,"        yb = yb * epsA2 + 0.11111095942313305;
",6,2,0,0,0,0,0,0,0,9,38,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2530,"        yb = yb * epsA2 + -0.1428571423679182;
",6,2,0,0,0,0,0,0,0,10,38,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2531,"        yb = yb * epsA2 + 0.19999999999923582;
",6,2,0,0,0,0,0,0,0,9,38,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2532,"        yb = yb * epsA2 + -0.33333333333333287;
",6,2,0,0,0,0,0,0,0,10,39,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2533,"        yb = yb * epsA2 * epsA;
",8,1,0,0,0,0,0,0,0,10,23,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2536,"        ya = epsA;
",4,0,0,0,0,0,0,0,0,5,10,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2538,"        temp = ya + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2539,"        yb = -(temp - ya - yb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2540,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2543,"        yb += epsB / (1d + epsA * epsA);
",8,3,0,1,2,0,0,0,0,12,32,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2546,"        double za = EIGHTHS[idx] + ya;
",4,1,1,1,2,0,0,0,0,9,30,5,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2547,"        double zb = -(za - EIGHTHS[idx] - ya);
",6,1,1,2,4,0,0,0,0,12,38,5,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2548,"        temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2549,"        zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2550,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2552,"        double result = za + zb;
",6,1,0,0,0,0,0,0,0,7,24,5,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2553,"        double resultb = -(result - za - zb);
",8,1,0,1,2,0,0,0,0,10,37,5,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2555,"        if (leftPlane) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2569,"        if (negate ^ leftPlane) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2573,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2671,"        final double r = y / x;
",6,1,0,0,0,1,0,0,0,8,23,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2672,"        if (Double.isInfinite(r)) { // bypass calculations that can create NaN
",0,0,0,2,5,0,6,0,0,6,70,5,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2676,"        double ra = doubleHighPart(r);
",2,0,0,1,2,0,4,0,0,6,30,5,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2677,"        double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2680,"        final double xa = doubleHighPart(x);
",2,0,0,1,2,1,4,0,0,7,36,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2681,"        final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2683,"        rb += (y - ra * xa - ra * xb - rb * xa - rb * xb) / x;
",22,9,0,1,2,0,0,0,0,32,54,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2685,"        final double temp = ra + rb;
",6,1,0,0,0,1,0,0,0,8,28,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2686,"        rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2687,"        ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2689,"        if (ra == 0) { // Fix up the sign so atan works correctly
",2,1,0,1,3,0,0,0,0,3,57,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2694,"        final double result = atan(ra, rb, x < 0);
",4,1,0,1,2,1,6,0,0,12,42,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2696,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3056,"        if ((n > -1023) && (n < 1024)) {
",4,3,0,3,7,0,0,0,0,8,32,4,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3057,"            return d * Double.longBitsToDouble(((long) (n + 1023)) << 52);
",4,3,0,4,8,1,4,0,0,11,62,6,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3586,"                final int middleExp = (expX + expY) / 2;
",6,2,0,1,2,1,0,0,0,9,40,10,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3589,"                final double scaledX = scalb(x, -middleExp);
",4,0,0,1,2,1,4,0,0,10,44,10,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3590,"                final double scaledY = scalb(y, -middleExp);
",4,0,0,1,2,1,4,0,0,10,44,10,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3593,"                final double scaledH = sqrt(scaledX * scaledX + scaledY * scaledY);
",10,3,0,1,2,1,2,0,0,16,67,10,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3596,"                return scalb(scaledH, middleExp);
",0,0,0,1,2,1,6,0,0,6,33,11,0.10000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,436,"                        left.skew  = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,9,0.10000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,437,"                        right.skew = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,9,0.10000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2221,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.09091,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,397,"                    parentTree.plus = merged;
",6,0,0,0,0,0,0,0,0,7,25,11,0.09091,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,419,"                    rotateCW();
",0,0,0,1,2,0,2,0,0,2,11,9,0.09091,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,420,"                    skew       = Skew.BALANCED;
",6,0,0,0,0,0,0,0,0,7,27,8,0.09091,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,421,"                    right.skew = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,8,0.09091,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,423,"                    final Skew s = left.right.skew;
",8,0,0,0,0,1,0,2,0,11,31,8,0.09091,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,424,"                    left.rotateCCW();
",0,0,0,1,2,0,4,0,0,4,17,9,0.09091,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,425,"                    rotateCW();
",0,0,0,1,2,0,2,0,0,2,11,9,0.09091,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,426,"                    switch(s) {
",2,0,0,1,3,0,0,0,0,2,11,8,0.09091,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,439,"                    skew = Skew.BALANCED;
",6,0,0,0,0,0,0,0,0,7,21,8,0.09091,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,499,"                if (right.skew == Skew.RIGHT_HIGH) {
",8,1,0,1,3,0,0,0,0,9,36,6,0.09091,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,125,"        return new PolygonsSet(tree);
",2,0,0,1,2,1,0,2,0,4,29,5,0.07692,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,42,"public class PolygonsSet extends AbstractRegion<Euclidean2D, Euclidean1D> {
",2,0,0,0,1,1,0,6,0,9,75,1,0.07692,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,453,"                if (!isEmpty(node.getMinus())) {
",0,0,0,3,7,0,6,0,0,7,32,7,0.07692,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,454,"                    sides.rememberPlusFound();
",0,0,0,1,2,0,4,0,0,4,26,10,0.07692,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,502,"                if ((node.getPlus().getCut() != null) || ((Boolean) node.getPlus().getAttribute())) {
",0,2,0,8,17,0,12,2,0,16,85,7,0.07692,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,505,"                if ((node.getMinus().getCut() != null) || ((Boolean) node.getMinus().getAttribute())) {
",0,2,0,8,17,0,12,2,0,16,87,7,0.07692,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,506,"                    sides.rememberPlusFound();
",0,0,0,1,2,0,4,0,0,4,26,10,0.07692,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,156,"                    return candidate;
",2,0,0,0,0,1,0,0,0,2,17,10,0.07692,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,288,"            Node node = this;
",2,0,0,0,0,0,0,2,0,4,17,5,0.07692,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,289,"            while (node.right != null) {
",4,1,0,1,3,0,0,0,0,5,28,5,0.07692,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,292,"            return node;
",2,0,0,0,0,1,0,0,0,2,12,5,0.07692,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2662,"                return Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,7,23,8,0.07143,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2665,"            if (y < 0 || 1 / y < 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.07143,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2666,"                return -Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,8,24,8,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,87,"        super(boundary);
",2,0,0,1,2,0,0,0,0,2,16,4,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,88,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,89,"    protected AbstractRegion(final Collection<SubHyperplane<S>> boundary) {
",4,0,0,1,3,2,0,6,0,12,71,2,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,91,"        if (boundary.size() == 0) {
",0,1,0,2,5,0,4,0,0,5,27,4,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,101,"            final TreeSet<SubHyperplane<S>> ordered = new TreeSet<SubHyperplane<S>>(new Comparator<SubHyperplane<S>>() {
",2,0,0,1,4,1,0,18,0,21,108,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,108,"            ordered.addAll(boundary);
",0,0,0,1,2,0,6,0,0,6,25,7,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,111,"            tree = new BSPTree<S>();
",2,0,0,1,2,0,0,4,0,7,24,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,112,"            insertCuts(tree, ordered);
",0,0,0,1,2,0,6,0,0,6,26,7,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,115,"            tree.visit(new BSPTreeVisitor<S>() {
",0,0,0,1,4,0,4,4,0,8,36,7,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,135,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,176,"        final Iterator<SubHyperplane<S>> iterator = boundary.iterator();
",2,0,0,1,2,1,4,6,0,13,64,4,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,179,"        Hyperplane<S> inserted = null;
",2,0,0,0,0,0,0,4,0,6,30,4,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,180,"        while ((inserted == null) && iterator.hasNext()) {
",2,2,0,3,7,0,4,0,0,8,50,4,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,181,"            inserted = iterator.next().getHyperplane();
",2,0,0,2,4,0,6,0,0,9,43,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,182,"            if (!node.insertCut(inserted.copySelf())) {
",0,0,0,3,7,0,8,0,0,9,43,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,187,"        if (!iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,5,26,4,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,188,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,192,"        final ArrayList<SubHyperplane<S>> plusList  = new ArrayList<SubHyperplane<S>>();
",2,0,0,1,2,1,0,12,0,15,80,4,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,193,"        final ArrayList<SubHyperplane<S>> minusList = new ArrayList<SubHyperplane<S>>();
",2,0,0,1,2,1,0,12,0,15,80,4,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,194,"        while (iterator.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,28,5,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,195,"            final SubHyperplane<S> other = iterator.next();
",2,0,0,1,2,1,4,4,0,11,47,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,196,"            switch (other.side(inserted)) {
",0,0,0,2,5,0,6,0,0,6,31,7,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,201,"                minusList.add(other);
",0,0,0,1,2,0,6,0,0,6,21,8,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,202,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,211,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,214,"        insertCuts(node.getPlus(),  plusList);
",0,0,0,2,4,0,8,0,0,8,38,5,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,215,"        insertCuts(node.getMinus(), minusList);
",0,0,0,2,4,0,8,0,0,8,39,5,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,217,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,317,"                final Characterization<S> minusChar = new Characterization<S>();
",2,0,0,1,2,1,0,8,0,11,64,8,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,318,"                characterize(node.getMinus(), plusChar.getIn(), minusChar);
",0,0,0,3,6,0,12,0,0,12,59,9,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,319,"                if (minusChar.hasOut()) {
",0,0,0,2,5,0,4,0,0,4,25,9,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,354,"                characterize(node.getPlus(), sub, characterization);
",0,0,0,2,4,0,10,0,0,10,52,8,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,355,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,217,"        return parent;
",2,0,0,0,0,1,0,0,0,2,14,4,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,531,"            final SubHyperplane.SplitSubHyperplane<S> cutParts = cut.split(sHyperplane);
",6,0,0,1,2,1,6,2,0,15,76,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,532,"            final SubHyperplane.SplitSubHyperplane<S> subParts = sub.split(cHyperplane);
",6,0,0,1,2,1,6,2,0,15,76,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,533,"            final BSPTree<S> split =
",2,0,0,0,0,1,0,4,0,7,24,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,536,"            split.plus.cut          = cutParts.getPlus();
",6,0,0,1,2,0,4,0,0,11,45,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,537,"            split.minus.cut         = cutParts.getMinus();
",6,0,0,1,2,0,4,0,0,11,46,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,538,"            final BSPTree<S> tmp    = split.plus.minus;
",8,0,0,0,0,1,0,4,0,13,43,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,539,"            split.plus.minus        = split.minus.plus;
",12,0,0,0,0,0,0,0,0,13,43,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,540,"            split.plus.minus.parent = split.plus;
",12,0,0,0,0,0,0,0,0,13,37,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,541,"            split.minus.plus        = tmp;
",8,0,0,0,0,0,0,0,0,9,30,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,542,"            split.minus.plus.parent = split.minus;
",12,0,0,0,0,0,0,0,0,13,38,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,543,"            split.plus.condense();
",4,0,0,1,2,0,2,0,0,6,22,7,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,544,"            split.minus.condense();
",4,0,0,1,2,0,2,0,0,6,23,7,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,545,"            return split;
",2,0,0,0,0,1,0,0,0,2,13,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,101,"            final TreeSet<SubHyperplane<S>> ordered = new TreeSet<SubHyperplane<S>>(new Comparator<SubHyperplane<S>>() {
",2,0,0,1,4,1,0,18,0,21,108,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,103,"                    final double size1 = o1.getSize();
",2,0,0,1,2,1,4,0,0,7,34,13,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,104,"                    final double size2 = o2.getSize();
",2,0,0,1,2,1,4,0,0,7,34,13,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,105,"                    return (size2 < size1) ? -1 : ((o1 == o2) ? 0 : +1);
",8,2,0,3,6,1,0,0,0,12,52,14,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,418,"                if (left.skew == Skew.LEFT_HIGH) {
",8,1,0,1,3,0,0,0,0,9,34,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,441,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,457,"                skew = Skew.BALANCED;
",6,0,0,0,0,0,0,0,0,7,21,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,458,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,460,"                if (right.skew == Skew.RIGHT_HIGH) {
",8,1,0,1,3,0,0,0,0,9,36,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,483,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,597,"                left.parent = this;
",4,0,0,0,0,0,0,0,0,5,19,7,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,115,"            tree.visit(new BSPTreeVisitor<S>() {
",0,0,0,1,4,0,4,4,0,8,36,7,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,119,"                    return Order.PLUS_SUB_MINUS;
",4,0,0,0,0,1,0,0,0,4,28,13,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,124,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,128,"                    node.setAttribute((node == node.getParent().getPlus()) ?
",2,1,0,3,7,0,10,0,0,13,56,13,0.07143,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,130,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2661,"            if (y > 0 || 1 / y > 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.06667,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3582,"                return abs(y);
",0,0,0,1,2,1,4,0,0,4,14,11,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,63,"        super(tree);
",2,0,0,1,2,0,0,0,0,2,12,4,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,457,"                if (!isEmpty(node.getMinus())) {
",0,0,0,3,7,0,6,0,0,7,32,7,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,458,"                    sides.rememberMinusFound();
",0,0,0,1,2,0,4,0,0,4,27,10,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,506,"                split.minus =
",4,0,0,0,0,0,0,0,0,5,13,8,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,508,"                split.minus.condense();
",4,0,0,1,2,0,2,0,0,6,23,9,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,509,"                split.minus.parent = split;
",8,0,0,0,0,0,0,0,0,9,27,8,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,615,"            cut = cut.split(hyperplane).getPlus();
",2,0,0,2,4,0,8,0,0,11,38,6,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,616,"            plus.chopOffMinus(hyperplane);
",0,0,0,1,2,0,6,0,0,6,30,7,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,617,"            minus.chopOffMinus(hyperplane);
",0,0,0,1,2,0,6,0,0,6,31,7,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,164,"                node = node.left;
",6,0,0,0,0,0,0,0,0,7,17,8,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,139,"        if (getTree(false).getCut() == null) {
",0,1,0,3,7,0,4,0,0,7,38,4,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,143,"            double size = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,7,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,144,"            double sum = 0.0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,145,"            for (final Interval interval : asList()) {
",2,0,0,2,5,1,2,2,0,7,42,6,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,146,"                size += interval.getLength();
",2,0,0,1,2,0,4,0,0,7,29,8,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,147,"                sum  += interval.getLength() * interval.getMidPoint();
",2,1,0,2,4,0,8,0,0,12,54,8,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,148,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,149,"            setSize(size);
",0,0,0,1,2,0,4,0,0,4,14,7,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,150,"            if (Double.isInfinite(size)) {
",0,0,0,2,5,0,6,0,0,6,30,7,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,152,"            } else if (size >= Precision.SAFE_MIN) {
",6,1,0,1,4,0,0,0,0,7,40,7,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,153,"                setBarycenter(new Vector1D(sum / size));
",4,1,0,2,4,0,2,2,0,9,40,10,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,158,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Interval,32,60,"        return upper - lower;
",4,1,0,0,0,1,0,0,0,5,21,4,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Interval,32,67,"        return 0.5 * (lower + upper);
",4,2,0,1,2,1,0,0,0,6,29,4,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,405,"                    leftShrunk = node == node.parent.left;
",10,1,0,0,0,0,0,0,0,12,38,9,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,406,"                    node = node.parent;
",6,0,0,0,0,0,0,0,0,7,19,9,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,496,"                skew = Skew.BALANCED;
",6,0,0,0,0,0,0,0,0,7,21,6,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,497,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.06667,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,452,"            if (node.getCut().side(sub.getHyperplane()) == Side.PLUS) {
",4,1,0,4,9,0,10,0,0,15,59,5,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,461,"            if (!(sides.plusFound() && sides.minusFound())) {
",0,1,0,4,9,0,8,0,0,10,49,5,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,462,"                recurseSides(node.getPlus(), sub, sides);
",0,0,0,2,4,0,10,0,0,10,41,8,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,182,"            final double global = otherLine.getOffset(thisLine);
",2,0,0,1,2,1,6,0,0,9,52,6,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,183,"            return (global < -1.0e-10) ?
",2,1,0,1,2,1,0,0,0,4,28,8,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,158,"                node = node.right;
",6,0,0,0,0,0,0,0,0,7,18,8,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,47,"        super(buildTree(lower, upper));
",0,0,0,2,4,0,6,0,0,6,31,5,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,94,"        if (Double.isInfinite(lower) && (lower < 0)) {
",2,2,0,3,7,0,6,0,0,10,46,4,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,107,"        final SubHyperplane<Euclidean1D> lowerCut =
",2,0,0,0,0,1,0,4,0,7,43,4,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,109,"        if (Double.isInfinite(upper) && (upper > 0)) {
",2,2,0,3,7,0,6,0,0,10,46,4,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,118,"        final SubHyperplane<Euclidean1D> upperCut =
",2,0,0,0,0,1,0,4,0,7,43,4,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,120,"        return new BSPTree<Euclidean1D>(lowerCut,
",2,0,0,0,1,1,0,4,0,6,41,5,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,530,"                skew = Skew.RIGHT_HIGH;
",6,0,0,0,0,0,0,0,0,7,23,6,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,531,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,586,"            final T tmpElt       = element;
",4,0,0,0,0,1,0,2,0,7,31,5,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,587,"            element              = left.element;
",6,0,0,0,0,0,0,0,0,7,36,5,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,588,"            left.element         = tmpElt;
",6,0,0,0,0,0,0,0,0,7,30,5,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,590,"            final Node tmpNode   = left;
",4,0,0,0,0,1,0,2,0,7,28,5,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,591,"            left                 = tmpNode.left;
",6,0,0,0,0,0,0,0,0,7,36,5,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,592,"            tmpNode.left         = tmpNode.right;
",8,0,0,0,0,0,0,0,0,9,37,5,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,593,"            tmpNode.right        = right;
",6,0,0,0,0,0,0,0,0,7,29,5,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,594,"            right                = tmpNode;
",4,0,0,0,0,0,0,0,0,5,31,5,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,596,"            if (left != null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,599,"            if (right.right != null) {
",4,1,0,1,3,0,0,0,0,5,26,5,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,603,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,224,"                        loops.add(loop);
",0,0,0,1,2,0,6,0,0,6,16,13,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,233,"                    if (loop.size() < 2) {
",0,1,0,2,5,0,4,0,0,5,22,10,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,270,"                        final Vector2D[] array = new Vector2D[loop.size()];
",2,0,0,3,6,1,4,4,0,11,51,13,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,271,"                        int j = 0;
",2,0,0,0,0,0,0,0,0,2,10,14,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,272,"                        for (Segment segment : loop) {
",4,0,0,1,3,0,0,2,0,6,30,13,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,273,"                            array[j++] = segment.getStart();
",2,0,1,2,4,0,4,0,0,10,32,15,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,274,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,275,"                        vertices[i++] = array;
",4,0,1,1,2,0,0,0,0,8,22,13,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,277,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,344,"        if ((end == null) && !open) {
",4,2,0,2,5,0,0,0,0,7,29,4,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,348,"        return loop;
",2,0,0,0,0,1,0,0,0,2,12,4,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,357,"                characterize(node.getMinus(), sub, characterization);
",0,0,0,2,4,0,10,0,0,10,53,8,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,358,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,494,"            if (node.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())) {
",0,0,0,5,11,0,12,0,0,12,75,6,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,495,"                if ((node.getPlus().getCut() != null) || ((Boolean) node.getPlus().getAttribute())) {
",0,2,0,8,17,0,12,2,0,16,85,7,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,498,"                if ((node.getMinus().getCut() != null) || ((Boolean) node.getMinus().getAttribute())) {
",0,2,0,8,17,0,12,2,0,16,87,7,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,499,"                    sides.rememberMinusFound();
",0,0,0,1,2,0,4,0,0,4,27,10,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,295,"                s = s.split(tree.parent.cut.getHyperplane()).getPlus();
",8,0,0,3,6,0,8,0,0,17,55,8,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,339,"            attribute = (plus.attribute == null) ? minus.attribute : plus.attribute;
",14,1,0,1,2,0,0,0,0,16,72,6,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,340,"            cut       = null;
",2,0,0,0,0,0,0,0,0,3,17,6,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,341,"            plus      = null;
",2,0,0,0,0,0,0,0,0,3,17,6,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,342,"            minus     = null;
",2,0,0,0,0,0,0,0,0,3,17,6,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,592,"                    cut = cut.split(hyperplane).getMinus();
",2,0,0,2,4,0,8,0,0,11,39,10,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,593,"                    plus.chopOffPlus(hyperplane);
",0,0,0,1,2,0,6,0,0,6,29,11,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,594,"                    minus.chopOffPlus(hyperplane);
",0,0,0,1,2,0,6,0,0,6,30,11,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,628,"        if (cut != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,633,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,431,"                addContribution(attribute.getPlusOutside(), false);
",0,0,0,2,4,0,6,0,0,7,51,8,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,460,"                    sorted.insert(new ComparableSegment(start, end, line));
",6,0,0,2,4,0,4,2,0,12,55,10,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,155,"                if (node.right == null) {
",4,1,0,1,3,0,0,0,0,5,25,8,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,276,"                node = node.left;
",6,0,0,0,0,0,0,0,0,7,17,7,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,328,"                final Node node = right.getSmallest();
",2,0,0,1,2,1,4,2,0,9,38,7,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,329,"                if (node != null) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,330,"                    return node;
",2,0,0,0,0,1,0,0,0,2,12,9,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,335,"                if (node != node.parent.right) {
",8,1,0,1,3,0,0,0,0,9,32,7,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,351,"                if (left == null) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,352,"                    left = new Node(newElement, this);
",4,0,0,1,2,0,0,2,0,7,34,9,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,353,"                    return rebalanceLeftGrown();
",0,0,0,1,2,1,2,0,0,2,28,10,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,355,"                return left.insert(newElement) ? rebalanceLeftGrown() : false;
",0,0,0,2,4,1,8,0,0,9,62,8,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,363,"            return right.insert(newElement) ? rebalanceRightGrown() : false;
",0,0,0,2,4,1,8,0,0,9,64,6,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,380,"                    node       = this;
",2,0,0,0,0,0,0,0,0,3,18,9,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,381,"                    element    = null;
",2,0,0,0,0,0,0,0,0,3,18,9,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,382,"                    leftShrunk = node == node.parent.left;
",10,1,0,0,0,0,0,0,0,12,38,9,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,383,"                    child      = null;
",2,0,0,0,0,0,0,0,0,3,18,9,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,385,"                    node       = (left != null) ? left.getLargest() : right.getSmallest();
",4,1,0,3,6,0,8,0,0,14,70,9,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,386,"                    element    = node.element;
",6,0,0,0,0,0,0,0,0,7,26,9,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,387,"                    leftShrunk = node == node.parent.left;
",10,1,0,0,0,0,0,0,0,12,38,9,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,388,"                    child      = (node.left != null) ? node.left : node.right;
",14,1,0,1,2,0,0,0,0,16,58,9,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,393,"                    node.left = child;
",6,0,0,0,0,0,0,0,0,7,18,9,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,416,"            switch (skew) {
",2,0,0,1,3,0,0,0,0,2,15,5,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,446,"                skew = Skew.LEFT_HIGH;
",6,0,0,0,0,0,0,0,0,7,22,6,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,447,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,494,"            switch (skew) {
",2,0,0,1,3,0,0,0,0,2,15,5,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,611,"            final T tmpElt        = element;
",4,0,0,0,0,1,0,2,0,7,32,5,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,612,"            element               = right.element;
",6,0,0,0,0,0,0,0,0,7,38,5,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,613,"            right.element         = tmpElt;
",6,0,0,0,0,0,0,0,0,7,31,5,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,615,"            final Node tmpNode    = right;
",4,0,0,0,0,1,0,2,0,7,30,5,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,616,"            right                 = tmpNode.right;
",6,0,0,0,0,0,0,0,0,7,38,5,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,617,"            tmpNode.right         = tmpNode.left;
",8,0,0,0,0,0,0,0,0,9,37,5,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,618,"            tmpNode.left          = left;
",6,0,0,0,0,0,0,0,0,7,29,5,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,619,"            left                  = tmpNode;
",4,0,0,0,0,0,0,0,0,5,32,5,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,621,"            if (right != null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,622,"                right.parent = this;
",4,0,0,0,0,0,0,0,0,5,20,7,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,624,"            if (left.left != null) {
",4,1,0,1,3,0,0,0,0,5,24,5,0.05882,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,628,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2149,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.05556,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2150,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.05556,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2153,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.05556,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2601,"                if (y < 0 || invy < 0) {
",4,3,0,1,3,0,0,0,0,7,24,8,0.05556,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2602,"                    return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,10,0.05556,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2607,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.05556,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3424,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.05556,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3492,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,364,"            super(start, end, line);
",6,0,0,1,2,0,0,0,0,6,24,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,365,"            sortingKey = (start == null) ?
",4,1,0,1,2,0,0,0,0,6,30,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,368,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,380,"            super(null, null, null);
",0,0,0,1,2,0,0,0,0,1,24,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,381,"            sortingKey = new OrderedTuple(start.getX() + dx, start.getY() + dy);
",6,2,0,3,6,0,8,2,0,19,68,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,382,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,386,"            return sortingKey.compareTo(o.sortingKey);
",4,0,0,1,2,1,4,0,0,8,42,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,353,"    private static class ComparableSegment extends Segment implements Comparable<ComparableSegment> {
",2,0,0,0,1,2,0,6,0,10,97,2,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Segment,32,40,"    public Segment(final Vector2D start, final Vector2D end, final Line line) {
",8,0,0,1,3,4,0,6,0,18,75,2,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Segment,32,41,"        this.start  = start;
",4,0,0,0,0,0,0,0,0,5,20,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Segment,32,42,"        this.end    = end;
",4,0,0,0,0,0,0,0,0,5,18,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Segment,32,43,"        this.line   = line;
",4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Segment,32,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Segment,32,50,"        return start;
",2,0,0,0,0,1,0,0,0,2,13,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Segment,32,57,"        return end;
",2,0,0,0,0,1,0,0,0,2,11,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,261,"        Vector2D p3 = (Vector2D) p;
",4,0,0,1,2,0,0,4,0,8,27,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,262,"        final double dx = p3.x - x;
",8,1,0,0,0,1,0,0,0,10,27,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,263,"        final double dy = p3.y - y;
",8,1,0,0,0,1,0,0,0,10,27,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,264,"        return FastMath.sqrt(dx * dx + dy * dy);
",8,3,0,1,2,1,4,0,0,15,40,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,207,"        if (vertices == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,208,"            if (getTree(false).getCut() == null) {
",0,1,0,3,7,0,4,0,0,7,38,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,213,"                final SegmentsBuilder visitor = new SegmentsBuilder();
",2,0,0,1,2,1,0,4,0,7,54,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,214,"                getTree(true).visit(visitor);
",0,0,0,2,4,0,6,0,0,7,29,9,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,215,"                final AVLTree<ComparableSegment> sorted = visitor.getSorted();
",2,0,0,1,2,1,4,4,0,11,62,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,219,"                final ArrayList<List<ComparableSegment>> loops = new ArrayList<List<ComparableSegment>>();
",2,0,0,1,2,1,0,12,0,15,90,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,220,"                while (!sorted.isEmpty()) {
",0,0,0,2,5,0,4,0,0,5,27,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,221,"                    final AVLTree<ComparableSegment>.Node node = sorted.getSmallest();
",4,0,0,1,2,1,4,4,0,13,66,10,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,222,"                    final List<ComparableSegment> loop = followLoop(node, sorted);
",2,0,0,1,2,1,6,4,0,13,62,10,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,223,"                    if (loop != null) {
",2,1,0,1,3,0,0,0,0,3,19,10,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,226,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,229,"                vertices = new Vector2D[loops.size()][];
",2,0,0,3,6,0,4,2,0,9,40,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,230,"                int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,9,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,232,"                for (final List<ComparableSegment> loop : loops) {
",4,0,0,1,3,1,0,4,0,9,50,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,282,"        return vertices.clone();
",0,0,0,1,2,1,4,0,0,4,24,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,296,"        final ArrayList<ComparableSegment> loop = new ArrayList<ComparableSegment>();
",2,0,0,1,2,1,0,8,0,11,77,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,297,"        ComparableSegment segment = node.getElement();
",2,0,0,1,2,0,4,2,0,8,46,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,298,"        loop.add(segment);
",0,0,0,1,2,0,6,0,0,6,18,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,299,"        final Vector2D globalStart = segment.getStart();
",2,0,0,1,2,1,4,2,0,9,48,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,300,"        Vector2D end = segment.getEnd();
",2,0,0,1,2,0,4,2,0,8,32,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,301,"        node.delete();
",0,0,0,1,2,0,4,0,0,4,14,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,304,"        final boolean open = segment.getStart() == null;
",2,1,0,1,2,1,4,0,0,8,48,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,306,"        while ((end != null) && (open || (globalStart.distance(end) > 1.0e-10))) {
",4,4,0,5,11,0,6,0,0,14,74,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,309,"            AVLTree<ComparableSegment>.Node selectedNode = null;
",4,0,0,0,0,0,0,4,0,8,52,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,310,"            ComparableSegment       selectedSegment  = null;
",2,0,0,0,0,0,0,2,0,4,48,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,311,"            double                  selectedDistance = Double.POSITIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,68,7,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,312,"            final ComparableSegment lowerLeft        = new ComparableSegment(end, -1.0e-10, -1.0e-10);
",4,0,0,1,2,1,0,4,0,11,90,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,313,"            final ComparableSegment upperRight       = new ComparableSegment(end, +1.0e-10, +1.0e-10);
",4,0,0,1,2,1,0,4,0,11,90,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,314,"            for (AVLTree<ComparableSegment>.Node n = sorted.getNotSmaller(lowerLeft);
",4,0,0,1,3,0,6,4,0,14,73,7,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,315,"                 (n != null) && (n.getElement().compareTo(upperRight) <= 0);
",2,3,0,4,8,0,8,0,0,13,59,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,317,"                segment = n.getElement();
",2,0,0,1,2,0,4,0,0,7,25,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,318,"                final double distance = end.distance(segment.getStart());
",2,0,0,2,4,1,8,0,0,11,57,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,319,"                if (distance < selectedDistance) {
",4,1,0,1,3,0,0,0,0,5,34,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,320,"                    selectedNode     = n;
",4,0,0,0,0,0,0,0,0,5,21,10,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,321,"                    selectedSegment  = segment;
",4,0,0,0,0,0,0,0,0,5,27,10,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,322,"                    selectedDistance = distance;
",4,0,0,0,0,0,0,0,0,5,28,10,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,316,"                 n = n.getNext()) {
",2,0,0,1,4,0,4,0,0,7,18,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,326,"            if (selectedDistance > 1.0e-10) {
",2,1,0,1,3,0,0,0,0,3,33,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,333,"            end = selectedSegment.getEnd();
",2,0,0,1,2,0,4,0,0,7,31,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,334,"            loop.add(selectedSegment);
",0,0,0,1,2,0,6,0,0,6,26,7,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,335,"            selectedNode.delete();
",0,0,0,1,2,0,4,0,0,4,22,7,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,337,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,339,"        if ((loop.size() == 2) && !open) {
",2,2,0,3,7,0,4,0,0,9,34,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,308,"                    plusOutside = minusChar.getIn();
",2,0,0,1,2,0,4,0,0,7,32,10,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,390,"            return leafMerger.merge(tree, this, parentTree, isPlusChild, false);
",0,0,0,1,2,1,10,0,0,11,68,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,395,"                merged.parent = parentTree;
",6,0,0,0,0,0,0,0,0,7,27,9,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,396,"                if (isPlusChild) {
",2,0,0,1,3,0,0,0,0,2,18,9,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,417,"        public SegmentsBuilder() {
",2,0,0,1,3,1,0,0,0,3,26,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,418,"            sorted = new AVLTree<ComparableSegment>();
",2,0,0,1,2,0,0,4,0,7,42,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,419,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,423,"            return Order.MINUS_SUB_PLUS;
",4,0,0,0,0,1,0,0,0,4,28,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,429,"            final BoundaryAttribute<Euclidean2D> attribute = (BoundaryAttribute<Euclidean2D>) node.getAttribute();
",2,0,0,2,4,1,4,8,0,15,102,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,430,"            if (attribute.getPlusOutside() != null) {
",0,1,0,2,5,0,4,0,0,5,41,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,433,"            if (attribute.getPlusInside() != null) {
",0,1,0,2,5,0,4,0,0,5,40,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,436,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,440,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,448,"            final AbstractSubHyperplane<Euclidean2D, Euclidean1D> absSub =
",2,0,0,0,0,1,0,6,0,9,62,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,450,"            final Line line      = (Line) sub.getHyperplane();
",2,0,0,2,4,1,4,4,0,11,50,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,451,"            final List<Interval> intervals = ((IntervalsSet) absSub.getRemainingRegion()).asList();
",2,0,0,4,8,1,6,6,0,15,87,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,452,"            for (final Interval i : intervals) {
",4,0,0,1,3,1,0,2,0,7,36,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,453,"                final Vector2D start = Double.isInfinite(i.getLower()) ?
",2,0,0,2,4,1,8,2,0,13,56,7,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,455,"                final Vector2D end   = Double.isInfinite(i.getUpper()) ?
",2,0,0,2,4,1,8,2,0,13,56,7,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,457,"                if (reversed) {
",2,0,0,1,3,0,0,0,0,2,15,7,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,462,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,463,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,469,"            return sorted;
",2,0,0,0,0,1,0,0,0,2,14,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,54,"    public AVLTree() {
",2,0,0,1,3,1,0,0,0,3,18,2,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,55,"        top = null;
",2,0,0,0,0,0,0,0,0,3,11,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,62,"        if (element != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,63,"            if (top == null) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,64,"                top = new Node(element, null);
",4,0,0,1,2,0,0,2,0,8,30,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,66,"                top.insert(element);
",0,0,0,1,2,0,6,0,0,6,20,9,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,103,"        return top == null;
",2,1,0,0,0,1,0,0,0,3,19,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,124,"        return (top == null) ? null : top.getSmallest();
",2,1,0,2,4,1,4,0,0,7,48,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,152,"        Node candidate = null;
",2,0,0,0,0,0,0,2,0,4,22,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,153,"        for (Node node = top; node != null;) {
",6,1,0,1,3,0,0,2,0,9,38,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,154,"            if (node.element.compareTo(reference) < 0) {
",4,1,0,2,5,0,4,0,0,9,44,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,160,"                candidate = node;
",4,0,0,0,0,0,0,0,0,5,17,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,161,"                if (node.left == null) {
",4,1,0,1,3,0,0,0,0,5,24,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,162,"                    return candidate;
",2,0,0,0,0,1,0,0,0,2,17,10,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,47,"public class AVLTree<T extends Comparable<T>> {
",4,0,0,0,1,1,0,4,0,9,47,1,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,202,"    private static enum Skew {
",2,0,0,0,1,2,0,0,0,4,26,2,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,204,"        LEFT_HIGH,
",2,0,0,0,0,0,0,0,0,2,10,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,207,"        RIGHT_HIGH,
",2,0,0,0,0,0,0,0,0,2,11,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,210,"        BALANCED;
",2,0,0,0,0,0,0,0,0,2,9,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,426,"                    switch(s) {
",2,0,0,1,3,0,0,0,0,2,11,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,132,"    public OrderedTuple(final double ... components) {
",4,0,0,1,3,2,0,0,0,6,50,2,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,133,"        this.components = components.clone();
",2,0,0,1,2,0,4,0,0,7,37,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,134,"        int msb = Integer.MIN_VALUE;
",6,0,0,0,0,0,0,0,0,6,28,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,135,"        lsb     = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,7,28,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,136,"        posInf  = false;
",2,0,0,0,0,0,0,0,0,4,16,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,137,"        negInf  = false;
",2,0,0,0,0,0,0,0,0,4,16,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,138,"        nan     = false;
",2,0,0,0,0,0,0,0,0,4,16,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,139,"        for (int i = 0; i < components.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,45,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,140,"            if (Double.isInfinite(components[i])) {
",0,0,1,3,7,0,4,0,0,8,39,7,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,146,"            } else if (Double.isNaN(components[i])) {
",0,0,1,3,8,0,4,0,0,8,41,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,149,"                final long b = Double.doubleToLongBits(components[i]);
",2,0,1,2,4,1,4,0,0,11,54,9,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,150,"                final long m = mantissa(b);
",2,0,0,1,2,1,4,0,0,7,27,9,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,151,"                if (m != 0) {
",2,1,0,1,3,0,0,0,0,3,13,9,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,152,"                    final int e = exponent(b);
",2,0,0,1,2,1,4,0,0,7,26,11,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,153,"                    msb = FastMath.max(msb, e + computeMSB(m));
",4,1,0,2,4,0,10,0,0,16,43,11,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,154,"                    lsb = FastMath.min(lsb, e + computeLSB(m));
",4,1,0,2,4,0,10,0,0,16,43,11,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,159,"        if (posInf && negInf) {
",4,1,0,1,3,0,0,0,0,5,23,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,166,"        if (lsb <= msb) {
",4,1,0,1,3,0,0,0,0,5,17,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,168,"            encode(msb + 16);
",2,1,0,1,2,0,2,0,0,5,17,7,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,175,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,184,"        offset  = minOffset + 31;
",4,1,0,0,0,0,0,0,0,6,25,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,185,"        offset -= offset % 32;
",4,1,0,0,0,0,0,0,0,6,22,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,187,"        if ((encoding != null) && (encoding.length == 1) && (encoding[0] == 0x0L)) {
",6,4,1,5,11,0,0,0,0,12,76,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,194,"        final int neededBits  = offset + 1 - lsb;
",6,2,0,0,0,1,0,0,0,9,41,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,195,"        final int neededLongs = (neededBits + 62) / 63;
",4,2,0,1,2,1,0,0,0,7,47,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,196,"        encoding = new long[components.length * neededLongs];
",8,1,0,1,2,0,0,0,0,10,53,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,199,"        int  eIndex = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,200,"        int  shift  = 62;
",2,0,0,0,0,0,0,0,0,2,17,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,201,"        long word   = 0x0L;
",2,0,0,0,0,0,0,0,0,2,19,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,202,"        for (int k = offset; eIndex < encoding.length; --k) {
",12,1,0,1,3,0,0,0,0,14,53,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,203,"            for (int vIndex = 0; vIndex < components.length; ++vIndex) {
",10,1,0,1,3,0,0,0,0,12,60,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,204,"                if (getBit(vIndex, k) != 0) {
",0,1,0,2,5,0,6,0,0,7,29,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,205,"                    word |= 0x1L << shift;
",4,1,0,0,0,0,0,0,0,6,22,10,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,207,"                if (shift-- == 0) {
",2,1,0,1,3,0,0,0,0,4,19,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,208,"                    encoding[eIndex++] = word;
",4,0,1,1,2,0,0,0,0,8,26,10,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,209,"                    word  = 0x0L;
",2,0,0,0,0,0,0,0,0,3,13,10,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,210,"                    shift = 62;
",2,0,0,0,0,0,0,0,0,3,11,10,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,215,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,248,"        if (components.length == ot.components.length) {
",10,1,0,1,3,0,0,0,0,11,48,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,249,"            if (nan) {
",2,0,0,1,3,0,0,0,0,2,10,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,251,"            } else if (ot.nan) {
",4,0,0,1,4,0,0,0,0,4,20,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,253,"            } else if (negInf || ot.posInf) {
",6,1,0,1,4,0,0,0,0,7,33,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,255,"            } else if (posInf || ot.negInf) {
",6,1,0,1,4,0,0,0,0,7,33,9,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,259,"                if (offset < ot.offset) {
",6,1,0,1,3,0,0,0,0,7,25,11,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,261,"                } else if (offset > ot.offset) {
",6,1,0,1,4,0,0,0,0,7,32,12,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,265,"                final int limit = FastMath.min(encoding.length, ot.encoding.length);
",12,0,0,1,2,1,4,0,0,17,68,11,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,266,"                for (int i = 0; i < limit; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,11,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,267,"                    if (encoding[i] < ot.encoding[i]) {
",4,1,1,3,7,0,0,0,0,11,35,13,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,268,"                        return -1;
",0,0,0,0,0,1,0,0,0,1,10,15,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,269,"                    } else if (encoding[i] > ot.encoding[i]) {
",4,1,1,3,8,0,0,0,0,11,42,14,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,270,"                        return +1;
",0,0,0,0,0,1,0,0,0,1,10,16,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,324,"        return bits & SIGN_MASK;
",4,1,0,0,0,1,0,0,0,5,24,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,332,"        return ((int) ((bits & EXPONENT_MASK) >> 52)) - 1075;
",4,3,0,4,8,1,0,0,0,7,53,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,340,"        return ((bits & EXPONENT_MASK) == 0) ?
",4,2,0,2,4,1,0,0,0,6,38,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,353,"        long ll = l;
",4,0,0,0,0,0,0,0,0,4,12,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,354,"        long mask  = 0xffffffffL;
",2,0,0,0,0,0,0,0,0,2,25,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,355,"        int  scale = 32;
",2,0,0,0,0,0,0,0,0,2,16,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,356,"        int  msb   = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,358,"        while (scale != 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,359,"            if ((ll & mask) != ll) {
",6,2,0,2,5,0,0,0,0,8,24,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,360,"                msb |= scale;
",4,0,0,0,0,0,0,0,0,5,13,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,361,"                ll = ll >> scale;
",6,1,0,0,0,0,0,0,0,8,17,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,363,"            scale = scale >> 1;
",4,1,0,0,0,0,0,0,0,6,19,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,364,"            mask  = mask >> scale;
",6,1,0,0,0,0,0,0,0,8,22,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,367,"        return msb;
",2,0,0,0,0,1,0,0,0,2,11,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,379,"        long ll = l;
",4,0,0,0,0,0,0,0,0,4,12,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,380,"        long mask  = 0xffffffff00000000L;
",2,0,0,0,0,0,0,0,0,2,33,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,381,"        int  scale = 32;
",2,0,0,0,0,0,0,0,0,2,16,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,382,"        int  lsb   = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,384,"        while (scale != 0) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,385,"            if ((ll & mask) == ll) {
",6,2,0,2,5,0,0,0,0,8,24,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,386,"                lsb |= scale;
",4,0,0,0,0,0,0,0,0,5,13,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,387,"                ll = ll >> scale;
",6,1,0,0,0,0,0,0,0,8,17,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,389,"            scale = scale >> 1;
",4,1,0,0,0,0,0,0,0,6,19,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,390,"            mask  = mask >> scale;
",6,1,0,0,0,0,0,0,0,8,22,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,393,"        return lsb;
",2,0,0,0,0,1,0,0,0,2,11,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,404,"        final long bits = Double.doubleToLongBits(components[i]);
",2,0,1,2,4,1,4,0,0,11,57,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,405,"        final int e = exponent(bits);
",2,0,0,1,2,1,4,0,0,7,29,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,406,"        if ((k < e) || (k > offset)) {
",8,3,0,3,7,0,0,0,0,11,30,4,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,407,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,408,"        } else if (k == offset) {
",4,1,0,1,4,0,0,0,0,5,25,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,409,"            return (sign(bits) == 0L) ? 1 : 0;
",0,1,0,2,4,1,4,0,0,5,34,9,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,410,"        } else if (k > (e + 52)) {
",4,2,0,2,6,0,0,0,0,6,26,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,411,"            return (sign(bits) == 0L) ? 0 : 1;
",0,1,0,2,4,1,4,0,0,5,34,10,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,413,"            final long m = (sign(bits) == 0L) ? mantissa(bits) : -mantissa(bits);
",2,1,0,4,8,1,12,0,0,17,69,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,414,"            return (int) ((m >> (k - e)) & 0x1L);
",6,3,0,4,8,1,0,0,0,9,37,10,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,245,"        Node(final T element, final Node parent) {
",6,0,0,1,3,2,0,4,0,12,42,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,246,"            this.element = element;
",4,0,0,0,0,0,0,0,0,5,23,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,247,"            left         = null;
",2,0,0,0,0,0,0,0,0,3,20,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,248,"            right        = null;
",2,0,0,0,0,0,0,0,0,3,20,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,249,"            this.parent  = parent;
",4,0,0,0,0,0,0,0,0,5,22,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,250,"            skew         = Skew.BALANCED;
",6,0,0,0,0,0,0,0,0,7,29,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,251,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,257,"            return element;
",2,0,0,0,0,1,0,0,0,2,15,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,274,"            Node node = this;
",2,0,0,0,0,0,0,2,0,4,17,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,275,"            while (node.left != null) {
",4,1,0,1,3,0,0,0,0,5,27,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,278,"            return node;
",2,0,0,0,0,1,0,0,0,2,12,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,327,"            if (right != null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,334,"            for (Node node = this; node.parent != null; node = node.parent) {
",12,1,0,1,3,0,0,2,0,16,65,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,340,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,349,"            if (newElement.compareTo(this.element) < 0) {
",2,1,0,2,5,0,4,0,0,7,45,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,359,"            if (right == null) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,360,"                right = new Node(newElement, this);
",4,0,0,1,2,0,0,2,0,7,35,7,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,361,"                return rebalanceRightGrown();
",0,0,0,1,2,1,2,0,0,2,29,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,370,"            if ((parent == null) && (left == null) && (right == null)) {
",6,4,0,4,9,0,0,0,0,10,60,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,372,"                element = null;
",2,0,0,0,0,0,0,0,0,3,15,7,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,373,"                top     = null;
",2,0,0,0,0,0,0,0,0,3,15,7,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,379,"                if ((left == null) && (right == null)) {
",4,3,0,3,7,0,0,0,0,7,40,7,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,391,"                node = node.parent;
",6,0,0,0,0,0,0,0,0,7,19,7,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,392,"                if (leftShrunk) {
",2,0,0,1,3,0,0,0,0,2,17,7,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,395,"                    node.right = child;
",6,0,0,0,0,0,0,0,0,7,19,9,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,397,"                if (child != null) {
",2,1,0,1,3,0,0,0,0,3,20,7,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,401,"                while (leftShrunk ? node.rebalanceLeftShrunk() : node.rebalanceRightShrunk()) {
",2,0,0,3,7,0,8,0,0,10,79,8,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,402,"                    if (node.parent == null) {
",4,1,0,1,3,0,0,0,0,5,26,9,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,403,"                        return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,410,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,455,"            switch (skew) {
",2,0,0,1,3,0,0,0,0,2,15,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,485,"                skew = Skew.RIGHT_HIGH;
",6,0,0,0,0,0,0,0,0,7,23,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,486,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,539,"            switch (skew) {
",2,0,0,1,3,0,0,0,0,2,15,5,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,541,"                skew = Skew.BALANCED;
",6,0,0,0,0,0,0,0,0,7,21,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,542,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.05556,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,224,"    public class Node {
",2,0,0,0,1,1,0,0,0,3,19,2,0.05556,0
defect4j,math,org/apache/commons/math3/util/Precision,32,63,"        EPSILON = Double.longBitsToDouble((EXPONENT_OFFSET - 53l) << 52);
",4,2,0,2,4,0,4,0,0,11,65,4,0.05263,0
defect4j,math,org/apache/commons/math3/util/Precision,32,70,"        SAFE_MIN = Double.longBitsToDouble((EXPONENT_OFFSET - 1022l) << 52);
",4,2,0,2,4,0,4,0,0,11,68,4,0.05263,0
defect4j,math,org/apache/commons/math3/util/Precision,32,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,187,"        final double abscissa = ((Vector1D) point).getX();
",4,0,0,3,6,1,2,2,0,9,50,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,188,"        return new Vector2D(abscissa * cos - originOffset * sin,
",8,3,0,0,1,1,0,2,0,13,56,5,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,281,"            recurseBuildBoundary(tree);
",0,0,0,1,2,0,4,0,0,4,27,7,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,290,"        if (node.getCut() != null) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,292,"            SubHyperplane<S> plusOutside = null;
",2,0,0,0,0,0,0,4,0,6,36,6,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,293,"            SubHyperplane<S> plusInside  = null;
",2,0,0,0,0,0,0,4,0,6,36,6,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,297,"            final Characterization<S> plusChar = new Characterization<S>();
",2,0,0,1,2,1,0,8,0,11,63,6,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,298,"            characterize(node.getPlus(), node.getCut().copySelf(), plusChar);
",0,0,0,4,8,0,14,0,0,14,65,7,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,300,"            if (plusChar.hasOut()) {
",0,0,0,2,5,0,4,0,0,4,24,7,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,305,"                final Characterization<S> minusChar = new Characterization<S>();
",2,0,0,1,2,1,0,8,0,11,64,8,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,306,"                characterize(node.getMinus(), plusChar.getOut(), minusChar);
",0,0,0,3,6,0,12,0,0,12,60,9,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,307,"                if (minusChar.hasIn()) {
",0,0,0,2,5,0,4,0,0,4,24,9,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,312,"            if (plusChar.hasIn()) {
",0,0,0,2,5,0,4,0,0,4,23,7,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,324,"            node.setAttribute(new BoundaryAttribute<S>(plusOutside, plusInside));
",4,0,0,2,4,0,4,4,0,12,69,7,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,325,"            recurseBuildBoundary(node.getPlus());
",0,0,0,2,4,0,6,0,0,6,37,7,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,326,"            recurseBuildBoundary(node.getMinus());
",0,0,0,2,4,0,6,0,0,6,38,7,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,329,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,346,"        if (node.getCut() == null) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,348,"            final boolean inside = (Boolean) node.getAttribute();
",2,0,0,2,4,1,4,2,0,9,53,6,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,349,"            characterization.add(sub, inside);
",0,0,0,1,2,0,8,0,0,8,34,7,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,350,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,351,"            final Hyperplane<S> hyperplane = node.getCut().getHyperplane();
",2,0,0,2,4,1,6,4,0,13,63,6,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,352,"            switch (sub.side(hyperplane)) {
",0,0,0,2,5,0,6,0,0,6,31,7,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,360,"                final SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);
",6,0,0,1,2,1,6,2,0,15,72,7,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,361,"                characterize(node.getPlus(),  split.getPlus(),  characterization);
",0,0,0,3,6,0,12,0,0,12,66,8,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,362,"                characterize(node.getMinus(), split.getMinus(), characterization);
",0,0,0,3,6,0,12,0,0,12,66,8,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,363,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,369,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,468,"                if (!isEmpty(node.getPlus())) {
",0,0,0,3,7,0,6,0,0,7,31,7,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,82,"    public BSPTree() {
",2,0,0,1,3,1,0,0,0,3,18,2,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,83,"        cut       = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,84,"        plus      = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,85,"        minus     = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,86,"        parent    = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,87,"        attribute = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,88,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,150,"        if (cut != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,155,"        final SubHyperplane<S> chopped = fitToCell(hyperplane.wholeHyperplane());
",2,0,0,2,4,1,6,4,0,13,73,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,156,"        if (chopped.isEmpty()) {
",0,0,0,2,5,0,4,0,0,4,24,5,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,163,"        cut          = chopped;
",4,0,0,0,0,0,0,0,0,5,23,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,164,"        plus         = new BSPTree<S>();
",2,0,0,1,2,0,0,4,0,7,32,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,165,"        plus.parent  = this;
",4,0,0,0,0,0,0,0,0,5,20,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,166,"        minus        = new BSPTree<S>();
",2,0,0,1,2,0,0,4,0,7,32,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,167,"        minus.parent = this;
",4,0,0,0,0,0,0,0,0,5,20,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,168,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,185,"        return new BSPTree<S>(cut.copySelf(), plus.copySelf(), minus.copySelf(),
",0,0,0,3,7,1,12,4,0,16,72,5,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,262,"                minus.visit(visitor);
",0,0,0,1,2,0,6,0,0,6,21,8,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,263,"                visitor.visitInternalNode(this);
",0,0,0,1,2,0,4,0,0,4,32,8,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,264,"                plus.visit(visitor);
",0,0,0,1,2,0,6,0,0,6,20,8,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,265,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,317,"        final double offset = cut.getHyperplane().getOffset(point);
",2,0,0,2,4,1,8,0,0,11,59,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,319,"        if (FastMath.abs(offset) < 1.0e-10) {
",0,1,0,2,5,0,6,0,0,7,37,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,321,"        } else if (offset <= 0) {
",2,1,0,1,4,0,0,0,0,3,25,5,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,323,"            return minus.getCell(point);
",0,0,0,1,2,1,6,0,0,6,28,8,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,548,"            return cHyperplane.sameOrientationAs(sHyperplane) ?
",0,0,0,1,2,1,6,0,0,6,51,7,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,89,"        return remainingRegion.getSize();
",0,0,0,1,2,1,4,0,0,4,33,5,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Interval,32,46,"        return lower;
",2,0,0,0,0,1,0,0,0,2,13,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Interval,32,53,"        return upper;
",2,0,0,0,0,1,0,0,0,2,13,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Characterization,32,36,"    public Characterization() {
",2,0,0,1,3,1,0,0,0,3,27,2,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Characterization,32,37,"        in  = null;
",2,0,0,0,0,0,0,0,0,3,11,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Characterization,32,38,"        out = null;
",2,0,0,0,0,0,0,0,0,3,11,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Characterization,32,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Characterization,32,45,"        return (in != null) && (!in.isEmpty());
",2,2,0,3,6,1,4,0,0,9,39,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Characterization,32,52,"        return in;
",2,0,0,0,0,1,0,0,0,2,10,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Characterization,32,59,"        return (out != null) && (!out.isEmpty());
",2,2,0,3,6,1,4,0,0,9,41,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Characterization,32,66,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Characterization,32,75,"        if (inside) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Characterization,32,76,"            if (in == null) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Characterization,32,77,"                in = sub;
",4,0,0,0,0,0,0,0,0,5,9,8,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Characterization,32,82,"            if (out == null) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Characterization,32,83,"                out = sub;
",4,0,0,0,0,0,0,0,0,5,10,8,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Characterization,32,85,"                out = out.reunite(sub);
",2,0,0,1,2,0,6,0,0,9,23,8,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Characterization,32,88,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundaryAttribute,32,57,"                             final SubHyperplane<S> plusInside) {
",2,0,0,0,2,1,0,4,0,7,36,3,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundaryAttribute,32,58,"        this.plusOutside = plusOutside;
",4,0,0,0,0,0,0,0,0,5,31,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundaryAttribute,32,59,"        this.plusInside  = plusInside;
",4,0,0,0,0,0,0,0,0,5,30,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundaryAttribute,32,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundaryAttribute,32,70,"        return plusOutside;
",2,0,0,0,0,1,0,0,0,2,19,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundaryAttribute,32,81,"        return plusInside;
",2,0,0,0,0,1,0,0,0,2,18,4,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,166,"                leaf.insertInTree(parentTree, isPlusChild);
",0,0,0,1,2,0,8,0,0,8,43,8,0.05263,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,167,"                return leaf;
",2,0,0,0,0,1,0,0,0,2,12,7,0.05263,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,375,"        return Math.sqrt(a);
",0,0,0,1,2,1,6,0,0,6,20,5,0.05000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2202,"                k--;
",2,0,0,0,0,0,0,0,0,3,4,9,0.05000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2203,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2288,"                k--;
",2,0,0,0,0,0,0,0,0,3,4,9,0.05000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2289,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2588,"            final double result = x * y;
",6,1,0,0,0,1,0,0,0,8,28,6,0.05000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2589,"            final double invx = 1d / x;
",4,1,0,0,0,1,0,0,0,6,27,6,0.05000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2590,"            final double invy = 1d / y;
",4,1,0,0,0,1,0,0,0,6,27,6,0.05000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2592,"            if (invx == 0) { // X is infinite
",2,1,0,1,3,0,0,0,0,3,33,6,0.05000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2600,"            if (x < 0 || invx < 0) {
",4,3,0,1,3,0,0,0,0,7,24,6,0.05000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3579,"                return abs(x);
",0,0,0,1,2,1,4,0,0,4,14,10,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,62,"public class Line implements Hyperplane<Euclidean2D>, Embedding<Euclidean2D, Euclidean1D> {
",2,0,0,0,1,1,0,10,0,13,91,1,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,380,"        if (barycenter == null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,381,"            computeGeometricalProperties();
",0,0,0,1,2,0,2,0,0,2,31,7,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,383,"        return size;
",2,0,0,0,0,1,0,0,0,2,12,4,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,390,"        this.size = size;
",4,0,0,0,0,0,0,0,0,5,17,4,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,391,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,405,"        this.barycenter = barycenter;
",4,0,0,0,0,0,0,0,0,5,29,4,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,406,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,297,"                s = s.split(tree.parent.cut.getHyperplane()).getMinus();
",8,0,0,3,6,0,8,0,0,17,56,8,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,408,"                merged.cut =
",4,0,0,0,0,0,0,0,0,5,12,9,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,501,"                split.plus =
",4,0,0,0,0,0,0,0,0,5,12,8,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,503,"                split.plus.condense();
",4,0,0,1,2,0,2,0,0,6,22,9,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,504,"                split.plus.parent = split;
",8,0,0,0,0,0,0,0,0,9,26,8,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,580,"            for (BSPTree<S> tree = this; tree.parent != null; tree = tree.parent) {
",12,1,0,1,3,0,0,4,0,18,71,6,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,583,"                final Hyperplane<S> hyperplane = tree.parent.cut.getHyperplane();
",8,0,0,1,2,1,2,4,0,15,65,8,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,587,"                if (tree == tree.parent.plus) {
",8,1,0,1,3,0,0,0,0,9,31,8,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,588,"                    cut = cut.split(hyperplane).getPlus();
",2,0,0,2,4,0,8,0,0,11,38,10,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,589,"                    plus.chopOffMinus(hyperplane);
",0,0,0,1,2,0,6,0,0,6,30,11,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,590,"                    minus.chopOffMinus(hyperplane);
",0,0,0,1,2,0,6,0,0,6,31,11,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,601,"            condense();
",0,0,0,1,2,0,2,0,0,2,11,7,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,614,"        if (cut != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,619,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,95,"        AbstractSubHyperplane<S, T> o = (AbstractSubHyperplane<S, T>) other;
",4,0,0,1,2,0,0,12,0,16,68,4,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,96,"        return buildNew(hyperplane,
",0,0,0,0,1,1,4,0,0,4,27,5,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,32,65,"        final double global = hyperplane.getOffset(((OrientedPoint) getHyperplane()).getLocation());
",2,0,0,5,10,1,8,2,0,13,92,4,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,32,66,"        return (global < -1.0e-10) ?
",2,1,0,1,2,1,0,0,0,4,28,6,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,133,"        return new IntervalsSet(tree);
",2,0,0,1,2,1,0,2,0,4,30,5,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,32,"public class IntervalsSet extends AbstractRegion<Euclidean1D, Euclidean1D> {
",2,0,0,0,1,1,0,6,0,9,76,1,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,234,"            return Order.PLUS_SUB_MINUS;
",4,0,0,0,0,1,0,0,0,4,28,6,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,239,"            node.setAttribute(null);
",0,0,0,1,2,0,4,0,0,4,24,6,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,240,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,75,"        final BSPTree<S> tree =
",2,0,0,0,0,1,0,4,0,7,23,4,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,77,"        tree.visit(nodeCleaner);
",0,0,0,1,2,0,6,0,0,6,24,5,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,78,"        return region1.buildNew(tree);
",0,0,0,1,2,1,6,0,0,6,30,5,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,159,"    private class UnionMerger implements BSPTree.LeafMerger<S> {
",6,0,0,0,1,1,0,2,0,9,60,2,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,164,"            if ((Boolean) leaf.getAttribute()) {
",0,0,0,3,7,0,4,2,0,6,36,6,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,170,"            tree.insertInTree(parentTree, isPlusChild);
",0,0,0,1,2,0,8,0,0,8,43,6,0.05000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,171,"            return tree;
",2,0,0,0,0,1,0,0,0,2,12,5,0.05000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2302,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.04762,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2583,"        if (x != x || y != y) {
",8,3,0,1,3,0,0,0,0,11,23,4,0.04762,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2587,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.04762,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2613,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.04762,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2625,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.04762,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2637,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.04762,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2647,"        if (x == Double.NEGATIVE_INFINITY)
",6,1,0,1,2,0,0,0,0,7,34,4,0.04762,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2660,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.04762,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3569,"        if (Double.isInfinite(x) || Double.isInfinite(y)) {
",0,1,0,3,7,0,12,0,0,13,51,4,0.04762,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3571,"        } else if (Double.isNaN(x) || Double.isNaN(y)) {
",0,1,0,3,8,0,12,0,0,13,48,5,0.04762,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3575,"            final int expX = getExponent(x);
",2,0,0,1,2,1,4,0,0,7,32,7,0.04762,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3576,"            final int expY = getExponent(y);
",2,0,0,1,2,1,4,0,0,7,32,7,0.04762,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3577,"            if (expX > expY + 27) {
",4,2,0,1,3,0,0,0,0,6,23,7,0.04762,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3580,"            } else if (expY > expX + 27) {
",4,2,0,1,4,0,0,0,0,6,30,8,0.04762,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3671,"        return (int) ((Double.doubleToLongBits(d) >>> 52) & 0x7ff) - 1023;
",0,3,0,4,8,1,6,0,0,9,66,4,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,81,"    public Line(final Vector2D p1, final Vector2D p2) {
",6,0,0,1,3,3,0,4,0,13,51,2,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,82,"        reset(p1, p2);
",0,0,0,1,2,0,6,0,0,6,14,5,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,83,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,129,"        final double dx = p2.getX() - p1.getX();
",2,1,0,2,4,1,8,0,0,12,40,4,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,130,"        final double dy = p2.getY() - p1.getY();
",2,1,0,2,4,1,8,0,0,12,40,4,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,131,"        final double d = FastMath.hypot(dx, dy);
",2,0,0,1,2,1,8,0,0,11,40,4,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,132,"        if (d == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,138,"            angle        = FastMath.PI + FastMath.atan2(-dy, -dx);
",10,1,0,1,2,0,4,0,0,18,54,6,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,139,"            cos          = FastMath.cos(angle);
",2,0,0,1,2,0,6,0,0,9,35,6,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,140,"            sin          = FastMath.sin(angle);
",2,0,0,1,2,0,6,0,0,9,35,6,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,141,"            originOffset = (p2.getX() * p1.getY() - p1.getX() * p2.getY()) / d;
",4,4,0,5,10,0,16,0,0,25,67,6,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,143,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,200,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,230,"        return originOffset +
",2,1,0,0,0,1,0,0,0,3,21,4,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,294,"            if (tree == tree.parent.plus) {
",8,1,0,1,3,0,0,0,0,9,31,6,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,499,"            final BSPTree<S> split = plus.split(sub);
",2,0,0,1,2,1,6,4,0,13,41,6,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,500,"            if (cut.side(sHyperplane) == Side.PLUS) {
",4,1,0,2,5,0,6,0,0,11,41,6,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,511,"            return split;
",2,0,0,0,0,1,0,0,0,2,13,6,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,161,"            final double global = otherLine.getOffset(thisLine);
",2,0,0,1,2,1,6,0,0,9,52,6,0.04762,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,162,"            return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
",16,2,0,3,6,1,0,0,0,19,88,7,0.04762,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,113,"    private static final double LN_QUICK_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,126,"    private static final double LN_HI_PREC_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,51,2,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,139,"    private static final double SINE_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,44,2,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,158,"    private static final double SINE_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,44,2,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,177,"    private static final double COSINE_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,46,2,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,196,"    private static final double COSINE_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,46,2,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,216,"    private static final double TANGENT_TABLE_A[] =
",2,0,0,1,2,3,0,0,0,5,47,2,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,235,"    private static final double TANGENT_TABLE_B[] =
",2,0,0,1,2,3,0,0,0,5,47,2,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,254,"    private static final long RECIP_2PI[] = new long[] {
",2,0,0,2,5,3,0,0,0,5,52,2,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,275,"    private static final long PI_O_4_BITS[] = new long[] {
",2,0,0,2,5,3,0,0,0,5,54,2,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,283,"    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};
",2,0,0,2,4,3,0,0,0,5,126,2,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,286,"    private static final double CBRTTWO[] = { 0.6299605249474366,
",2,0,0,1,3,3,0,0,0,5,61,2,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1588,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1590,"        double p = 2.7553817452272217E-6;
",2,0,0,0,0,0,0,0,0,2,33,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1591,"        p = p * x2 + -1.9841269659586505E-4;
",6,2,0,0,0,0,0,0,0,10,36,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1592,"        p = p * x2 + 0.008333333333329196;
",6,2,0,0,0,0,0,0,0,9,34,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1593,"        p = p * x2 + -0.16666666666666666;
",6,2,0,0,0,0,0,0,0,10,34,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1596,"        p = p * x2 * x;
",8,1,0,0,0,0,0,0,0,10,15,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1598,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1608,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1610,"        double p = 2.479773539153719E-5;
",2,0,0,0,0,0,0,0,0,2,32,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1611,"        p = p * x2 + -0.0013888888689039883;
",6,2,0,0,0,0,0,0,0,10,36,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1612,"        p = p * x2 + 0.041666666666621166;
",6,2,0,0,0,0,0,0,0,9,34,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1613,"        p = p * x2 + -0.49999999999999994;
",6,2,0,0,0,0,0,0,0,10,34,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1614,"        p *= x2;
",4,0,0,0,0,0,0,0,0,5,8,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1616,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1627,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1628,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1631,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1632,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1633,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1634,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1637,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1638,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1639,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1640,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1643,"        final double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,1,0,0,0,8,43,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1644,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1645,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1646,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1672,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1673,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1675,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1676,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1677,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1678,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1679,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1681,"        t = costA * sinEpsA;
",6,1,0,0,0,0,0,0,0,8,20,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1682,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1683,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1684,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1685,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1687,"        b = b + sintA * cosEpsB + costA * sinEpsB;
",12,4,0,0,0,0,0,0,0,17,42,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1702,"        b = b + sintB + costB * sinEpsA + sintB * cosEpsB + costB * sinEpsB;
",18,6,0,0,0,0,0,0,0,25,68,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1729,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1730,"            t = ((costA + costB) * (cosEpsA + cosEpsB) -
",10,5,0,2,5,0,0,0,0,16,44,6,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1732,"            c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,6,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1733,"            d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,6,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1734,"            a = c;
",4,0,0,0,0,0,0,0,0,5,6,6,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1735,"            b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,6,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1738,"        result = a + b;
",6,1,0,0,0,0,0,0,0,8,15,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1740,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1751,"        final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1752,"        final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1754,"        final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1755,"        double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1756,"        b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1758,"        return sinQ(a, b);
",0,0,0,1,2,1,6,0,0,6,18,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2135,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2136,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2138,"        double xb = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2141,"        xa = x;
",4,0,0,0,0,0,0,0,0,5,7,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2142,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2143,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2144,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2148,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2156,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2161,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2175,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,8,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2181,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,10,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2182,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2183,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2185,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2186,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,10,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2187,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2188,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2190,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2191,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2192,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2193,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2195,"                if (remA > 0.0) {
",2,1,0,1,3,0,0,0,0,3,17,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2196,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2204,"            quadrant = k & 3;
",4,1,0,0,0,0,0,0,0,6,17,7,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2205,"            xa = remA;
",4,0,0,0,0,0,0,0,0,5,10,7,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2206,"            xb = remB;
",4,0,0,0,0,0,0,0,0,5,10,7,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2209,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2210,"            quadrant ^= 2;  // Flip bit 1
",2,0,0,0,0,0,0,0,0,3,29,6,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2213,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2215,"                return sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2217,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2219,"                return -sinQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2233,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2236,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2237,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2241,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2246,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2247,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2261,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,8,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2267,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,10,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2268,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2269,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2271,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2272,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,10,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2273,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2274,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2276,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2277,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2278,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2279,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2281,"                if (remA > 0.0) {
",2,1,0,1,3,0,0,0,0,3,17,9,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2282,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2290,"            quadrant = k & 3;
",4,1,0,0,0,0,0,0,0,6,17,7,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2291,"            xa = remA;
",4,0,0,0,0,0,0,0,0,5,10,7,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2292,"            xb = remB;
",4,0,0,0,0,0,0,0,0,5,10,7,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2298,"        switch (quadrant) {
",2,0,0,1,3,0,0,0,0,2,19,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2300,"                return cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,6,20,6,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2304,"                return -cosQ(xa, xb);
",0,0,0,1,2,1,6,0,0,7,21,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3020,"        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,61,5,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3334,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3338,"        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {
",8,3,0,1,3,0,0,0,0,12,46,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3342,"        y = (long) x;
",4,0,0,1,2,0,0,0,0,5,13,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3343,"        if (x < 0 && y != x) {
",6,3,0,1,3,0,0,0,0,9,22,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3347,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.04545,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3348,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.04545,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,91,"         return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);
",14,5,0,2,4,1,4,0,0,23,72,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,68,"    public Vector2D(double x, double y) {
",6,0,0,1,3,1,0,0,0,7,37,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,69,"        this.x = x;
",4,0,0,0,0,0,0,0,0,5,11,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,70,"        this.y = y;
",4,0,0,0,0,0,0,0,0,5,11,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,37,"    public static final Vector2D ZERO   = new Vector2D(0, 0);
",2,0,0,1,2,3,0,4,0,9,57,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,41,"    public static final Vector2D NaN = new Vector2D(Double.NaN, Double.NaN);
",10,0,0,1,2,3,0,4,0,17,72,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,45,"    public static final Vector2D POSITIVE_INFINITY =
",2,0,0,0,0,3,0,2,0,7,48,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,49,"    public static final Vector2D NEGATIVE_INFINITY =
",2,0,0,0,0,3,0,2,0,7,48,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,150,"        return x;
",2,0,0,0,0,1,0,0,0,2,9,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,158,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,111,"    public Line(final Line line) {
",4,0,0,1,3,2,0,2,0,8,30,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,112,"        angle        = MathUtils.normalizeAngle(line.angle, FastMath.PI);
",10,0,0,1,2,0,4,0,0,15,65,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,113,"        cos          = FastMath.cos(angle);
",2,0,0,1,2,0,6,0,0,9,35,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,114,"        sin          = FastMath.sin(angle);
",2,0,0,1,2,0,6,0,0,9,35,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,115,"        originOffset = line.originOffset;
",6,0,0,0,0,0,0,0,0,7,33,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,116,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,120,"        return new Line(this);
",0,0,0,1,2,1,0,2,0,2,22,6,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,181,"        Vector2D p2 = (Vector2D) point;
",4,0,0,1,2,0,0,4,0,8,31,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,182,"        return new Vector1D(cos * p2.getX() + sin * p2.getY());
",4,3,0,3,6,1,8,2,0,17,55,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,198,"        final double d = sin * other.cos - other.sin * cos;
",14,3,0,0,0,1,0,0,0,18,51,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,199,"        if (FastMath.abs(d) < 1.0e-10) {
",0,1,0,2,5,0,6,0,0,7,32,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,202,"        return new Vector2D((cos * other.originOffset - other.cos * originOffset) / d,
",14,4,0,1,3,1,0,2,0,20,78,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,208,"        return new SubLine(this, new IntervalsSet());
",0,0,0,2,4,1,0,4,0,4,45,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,286,"        return MathUtils.normalizeAngle(angle, FastMath.PI);
",4,0,0,1,2,1,6,0,0,10,52,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,50,"    protected AbstractRegion() {
",2,0,0,1,3,1,0,0,0,3,28,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,51,"        tree = new BSPTree<S>(Boolean.TRUE);
",6,0,0,1,2,0,0,4,0,11,36,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,66,"    protected AbstractRegion(final BSPTree<S> tree) {
",4,0,0,1,3,2,0,4,0,10,49,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,67,"        this.tree = tree;
",4,0,0,0,0,0,0,0,0,5,17,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,226,"        return isEmpty(tree);
",0,0,0,1,2,1,4,0,0,4,21,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,236,"        if (node.getCut() == null) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,238,"            return !((Boolean) node.getAttribute());
",0,0,0,3,6,1,4,2,0,7,40,6,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,242,"        return isEmpty(node.getMinus()) && isEmpty(node.getPlus());
",0,1,0,4,8,1,12,0,0,13,59,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,264,"        final BSPTree<S> cell = node.getCell(point);
",2,0,0,1,2,1,6,4,0,13,44,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,265,"        if (cell.getCut() == null) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,267,"            return ((Boolean) cell.getAttribute()) ? Location.INSIDE : Location.OUTSIDE;
",8,0,0,3,6,1,4,2,0,14,76,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,279,"        if (includeBoundaryAttributes && (tree.getCut() != null) && (tree.getAttribute() == null)) {
",2,3,0,5,11,0,8,0,0,13,92,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,283,"        return tree;
",2,0,0,0,0,1,0,0,0,2,12,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,415,"        final Sides sides = new Sides();
",2,0,0,1,2,1,0,4,0,7,32,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,416,"        recurseSides(tree, hyperplane.wholeHyperplane(), sides);
",0,0,0,2,4,0,10,0,0,10,56,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,417,"        return sides.plusFound() ?
",0,0,0,1,2,1,4,0,0,4,26,6,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,439,"        if (node.getCut() == null) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,440,"            if ((Boolean) node.getAttribute()) {
",0,0,0,3,7,0,4,2,0,6,36,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,442,"                sides.rememberPlusFound();
",0,0,0,1,2,0,4,0,0,4,26,9,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,443,"                sides.rememberMinusFound();
",0,0,0,1,2,0,4,0,0,4,27,9,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,445,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,448,"        final Hyperplane<S> hyperplane = node.getCut().getHyperplane();
",2,0,0,2,4,1,6,4,0,13,63,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,449,"        switch (sub.side(hyperplane)) {
",0,0,0,2,5,0,6,0,0,6,31,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,467,"            if (node.getCut().side(sub.getHyperplane()) == Side.PLUS) {
",4,1,0,4,9,0,10,0,0,15,59,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,472,"                if (!isEmpty(node.getPlus())) {
",0,0,0,3,7,0,6,0,0,7,31,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,476,"            if (!(sides.plusFound() && sides.minusFound())) {
",0,1,0,4,9,0,8,0,0,10,49,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,477,"                recurseSides(node.getMinus(), sub, sides);
",0,0,0,2,4,0,10,0,0,10,42,8,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,511,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,93,"    public BSPTree(final Object attribute) {
",4,0,0,1,3,2,0,2,0,8,40,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,94,"        cut    = null;
",2,0,0,0,0,0,0,0,0,3,14,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,95,"        plus   = null;
",2,0,0,0,0,0,0,0,0,3,14,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,96,"        minus  = null;
",2,0,0,0,0,0,0,0,0,3,14,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,97,"        parent = null;
",2,0,0,0,0,0,0,0,0,3,14,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,98,"        this.attribute = attribute;
",4,0,0,0,0,0,0,0,0,5,27,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,99,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,115,"                   final Object attribute) {
",2,0,0,0,2,1,0,2,0,5,25,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,116,"        this.cut       = cut;
",4,0,0,0,0,0,0,0,0,5,21,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,117,"        this.plus      = plus;
",4,0,0,0,0,0,0,0,0,5,22,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,118,"        this.minus     = minus;
",4,0,0,0,0,0,0,0,0,5,23,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,119,"        this.parent    = null;
",2,0,0,0,0,0,0,0,0,3,22,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,120,"        this.attribute = attribute;
",4,0,0,0,0,0,0,0,0,5,27,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,121,"        plus.parent    = this;
",4,0,0,0,0,0,0,0,0,5,22,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,122,"        minus.parent   = this;
",4,0,0,0,0,0,0,0,0,5,22,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,123,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,181,"        if (cut == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,182,"            return new BSPTree<S>(attribute);
",2,0,0,1,2,1,0,4,0,6,33,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,194,"        return cut;
",2,0,0,0,0,1,0,0,0,2,11,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,202,"        return plus;
",2,0,0,0,0,1,0,0,0,2,12,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,210,"        return minus;
",2,0,0,0,0,1,0,0,0,2,13,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,225,"        this.attribute = attribute;
",4,0,0,0,0,0,0,0,0,5,27,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,226,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,235,"        return attribute;
",2,0,0,0,0,1,0,0,0,2,17,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,242,"        if (cut == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,243,"            visitor.visitLeafNode(this);
",0,0,0,1,2,0,4,0,0,4,28,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,245,"            switch (visitor.visitOrder(this)) {
",0,0,0,2,5,0,4,0,0,4,35,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,252,"                plus.visit(visitor);
",0,0,0,1,2,0,6,0,0,6,20,8,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,253,"                visitor.visitInternalNode(this);
",0,0,0,1,2,0,4,0,0,4,32,8,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,254,"                minus.visit(visitor);
",0,0,0,1,2,0,6,0,0,6,21,8,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,255,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,281,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,292,"        SubHyperplane<S> s = sub;
",4,0,0,0,0,0,0,4,0,8,25,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,293,"        for (BSPTree<S> tree = this; tree.parent != null; tree = tree.parent) {
",12,1,0,1,3,0,0,4,0,18,71,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,300,"        return s;
",2,0,0,0,0,1,0,0,0,2,9,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,312,"        if (cut == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,313,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,336,"        if ((cut != null) && (plus.cut == null) && (minus.cut == null) &&
",10,4,0,3,7,0,0,0,0,14,65,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,344,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,365,"        return merge(tree, leafMerger, null, false);
",0,0,0,1,2,1,6,0,0,8,44,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,385,"        if (cut == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,387,"            return leafMerger.merge(this, tree, parentTree, isPlusChild, true);
",0,0,0,1,2,1,10,0,0,11,67,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,388,"        } else if (tree.cut == null) {
",4,1,0,1,4,0,0,0,0,5,30,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,393,"            final BSPTree<S> merged = tree.split(cut);
",2,0,0,1,2,1,6,4,0,13,42,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,394,"            if (parentTree != null) {
",2,1,0,1,3,0,0,0,0,3,25,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,404,"            plus.merge(merged.plus, leafMerger, merged, true);
",4,0,0,1,2,0,8,0,0,13,50,8,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,405,"            minus.merge(merged.minus, leafMerger, merged, false);
",4,0,0,1,2,0,8,0,0,13,53,8,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,406,"            merged.condense();
",0,0,0,1,2,0,4,0,0,4,18,8,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,407,"            if (merged.cut != null) {
",4,1,0,1,3,0,0,0,0,5,25,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,412,"            return merged;
",2,0,0,0,0,1,0,0,0,2,14,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,489,"        if (cut == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,490,"            return new BSPTree<S>(sub, copySelf(),
",2,0,0,1,3,1,2,4,0,8,38,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,494,"        final Hyperplane<S> cHyperplane = cut.getHyperplane();
",2,0,0,1,2,1,4,4,0,11,54,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,495,"        final Hyperplane<S> sHyperplane = sub.getHyperplane();
",2,0,0,1,2,1,4,4,0,11,54,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,496,"        switch (sub.side(cHyperplane)) {
",0,0,0,2,5,0,6,0,0,6,32,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,515,"            final BSPTree<S> split = minus.split(sub);
",2,0,0,1,2,1,6,4,0,13,42,6,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,516,"            if (cut.side(sHyperplane) == Side.PLUS) {
",4,1,0,2,5,0,6,0,0,11,41,6,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,517,"                split.plus =
",4,0,0,0,0,0,0,0,0,5,12,8,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,519,"                split.plus.condense();
",4,0,0,1,2,0,2,0,0,6,22,9,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,520,"                split.plus.parent = split;
",8,0,0,0,0,0,0,0,0,9,26,8,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,522,"                split.minus =
",4,0,0,0,0,0,0,0,0,5,13,8,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,524,"                split.minus.condense();
",4,0,0,1,2,0,2,0,0,6,23,9,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,525,"                split.minus.parent = split;
",8,0,0,0,0,0,0,0,0,9,27,8,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,527,"            return split;
",2,0,0,0,0,1,0,0,0,2,13,6,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,567,"        parent = parentTree;
",4,0,0,0,0,0,0,0,0,5,20,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,568,"        if (parentTree != null) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,569,"            if (isPlusChild) {
",2,0,0,1,3,0,0,0,0,2,18,6,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,570,"                parentTree.plus = this;
",4,0,0,0,0,0,0,0,0,5,23,8,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,572,"                parentTree.minus = this;
",4,0,0,0,0,0,0,0,0,5,24,8,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,577,"        if (cut != null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,605,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Region,32,50,"    public static enum Location {
",2,0,0,0,1,2,0,0,0,4,29,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Region,32,52,"        INSIDE,
",2,0,0,0,0,0,0,0,0,2,7,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Region,32,55,"        OUTSIDE,
",2,0,0,0,0,0,0,0,0,2,8,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Region,32,58,"        BOUNDARY;
",2,0,0,0,0,0,0,0,0,2,9,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Side,32,24,"public enum Side {
",2,0,0,0,1,1,0,0,0,3,18,1,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Side,32,27,"    PLUS,
",2,0,0,0,0,0,0,0,0,2,5,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Side,32,30,"    MINUS,
",2,0,0,0,0,0,0,0,0,2,6,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Side,32,33,"    BOTH,
",2,0,0,0,0,0,0,0,0,2,5,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Side,32,36,"    HYPER;
",2,0,0,0,0,0,0,0,0,2,6,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,48,"        super(hyperplane, remainingRegion);
",4,0,0,1,2,0,0,0,0,4,35,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,148,"        return new SubLine(hyperplane, remainingRegion);
",4,0,0,1,2,1,0,2,0,6,48,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,155,"        final Line    thisLine  = (Line) getHyperplane();
",2,0,0,2,4,1,2,4,0,9,49,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,156,"        final Line    otherLine = (Line) hyperplane;
",4,0,0,1,2,1,0,4,0,9,44,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,157,"        final Vector2D crossing  = thisLine.intersection(otherLine);
",2,0,0,1,2,1,6,2,0,11,60,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,159,"        if (crossing == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,166,"        final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;
",2,2,0,3,6,1,12,0,0,17,84,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,167,"        final Vector1D x = thisLine.toSubSpace(crossing);
",2,0,0,1,2,1,6,2,0,11,49,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,168,"        return getRemainingRegion().side(new OrientedPoint(x, direct));
",4,0,0,3,6,1,4,2,0,10,63,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,176,"        final Line    thisLine  = (Line) getHyperplane();
",2,0,0,2,4,1,2,4,0,9,49,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,177,"        final Line    otherLine = (Line) hyperplane;
",4,0,0,1,2,1,0,4,0,9,44,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,178,"        final Vector2D crossing  = thisLine.intersection(otherLine);
",2,0,0,1,2,1,6,2,0,11,60,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,180,"        if (crossing == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,189,"        final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;
",2,2,0,3,6,1,12,0,0,17,84,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,190,"        final Vector1D x      = thisLine.toSubSpace(crossing);
",2,0,0,1,2,1,6,2,0,11,54,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,191,"        final SubHyperplane<Euclidean1D> subPlus  = new OrientedPoint(x, !direct).wholeHyperplane();
",6,0,0,2,4,1,2,6,0,16,92,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,192,"        final SubHyperplane<Euclidean1D> subMinus = new OrientedPoint(x,  direct).wholeHyperplane();
",6,0,0,2,4,1,2,6,0,15,92,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,194,"        final BSPTree<Euclidean1D> splitTree = getRemainingRegion().getTree(false).split(subMinus);
",2,0,0,3,6,1,8,4,0,16,91,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,195,"        final BSPTree<Euclidean1D> plusTree  = getRemainingRegion().isEmpty(splitTree.getPlus()) ?
",2,0,0,3,6,1,8,4,0,15,90,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,199,"        final BSPTree<Euclidean1D> minusTree = getRemainingRegion().isEmpty(splitTree.getMinus()) ?
",2,0,0,3,6,1,8,4,0,15,91,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,204,"        return new SplitSubHyperplane<Euclidean2D>(new SubLine(thisLine.copySelf(), new IntervalsSet(plusTree)),
",2,0,0,3,7,1,4,8,0,14,104,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,51,"                                    final Region<T> remainingRegion) {
",2,0,0,0,2,1,0,4,0,7,34,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,52,"        this.hyperplane      = hyperplane;
",4,0,0,0,0,0,0,0,0,5,34,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,53,"        this.remainingRegion = remainingRegion;
",4,0,0,0,0,0,0,0,0,5,39,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,66,"        return buildNew(hyperplane, remainingRegion);
",0,0,0,1,2,1,6,0,0,6,45,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,73,"        return hyperplane;
",2,0,0,0,0,1,0,0,0,2,18,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,84,"        return remainingRegion;
",2,0,0,0,0,1,0,0,0,2,23,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,156,"        return remainingRegion.isEmpty();
",0,0,0,1,2,1,4,0,0,4,33,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,37,"public abstract class AbstractSubHyperplane<S extends Space, T extends Space>
",6,0,0,0,0,2,0,4,0,12,77,1,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/SubHyperplane,32,104,"                                  final SubHyperplane<U> minus) {
",2,0,0,0,2,1,0,4,0,7,31,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/SubHyperplane,32,105,"            this.plus  = plus;
",4,0,0,0,0,0,0,0,0,5,18,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/SubHyperplane,32,106,"            this.minus = minus;
",4,0,0,0,0,0,0,0,0,5,19,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/SubHyperplane,32,107,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/SubHyperplane,32,113,"            return plus;
",2,0,0,0,0,1,0,0,0,2,12,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/SubHyperplane,32,120,"            return minus;
",2,0,0,0,0,1,0,0,0,2,13,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,65,"    public Vector1D(double x) {
",4,0,0,1,3,1,0,0,0,5,27,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,66,"        this.x = x;
",4,0,0,0,0,0,0,0,0,5,11,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,36,"    public static final Vector1D ZERO = new Vector1D(0.0);
",2,0,0,1,2,3,0,4,0,9,54,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,39,"    public static final Vector1D ONE  = new Vector1D(1.0);
",2,0,0,1,2,3,0,4,0,9,54,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,43,"    public static final Vector1D NaN = new Vector1D(Double.NaN);
",6,0,0,1,2,3,0,4,0,13,60,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,47,"    public static final Vector1D POSITIVE_INFINITY =
",2,0,0,0,0,3,0,2,0,7,48,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,51,"    public static final Vector1D NEGATIVE_INFINITY =
",2,0,0,0,0,3,0,2,0,7,48,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,128,"        return x;
",2,0,0,0,0,1,0,0,0,2,9,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTreeVisitor,32,54,"    enum Order {
",2,0,0,0,1,0,0,0,0,2,12,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTreeVisitor,32,58,"        PLUS_MINUS_SUB,
",2,0,0,0,0,0,0,0,0,2,15,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTreeVisitor,32,63,"        PLUS_SUB_MINUS,
",2,0,0,0,0,0,0,0,0,2,15,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTreeVisitor,32,68,"        MINUS_PLUS_SUB,
",2,0,0,0,0,0,0,0,0,2,15,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTreeVisitor,32,73,"        MINUS_SUB_PLUS,
",2,0,0,0,0,0,0,0,0,2,15,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTreeVisitor,32,78,"        SUB_PLUS_MINUS,
",2,0,0,0,0,0,0,0,0,2,15,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTreeVisitor,32,83,"        SUB_MINUS_PLUS;
",2,0,0,0,0,0,0,0,0,2,15,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,32,42,"    public OrientedPoint(final Vector1D location, final boolean direct) {
",6,0,0,1,3,3,0,2,0,11,69,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,32,43,"        this.location = location;
",4,0,0,0,0,0,0,0,0,5,25,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,32,44,"        this.direct   = direct;
",4,0,0,0,0,0,0,0,0,5,23,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,32,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,32,58,"        final double delta = ((Vector1D) point).getX() - location.getX();
",4,1,0,4,8,1,6,2,0,14,65,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,32,59,"        return direct ? delta : -delta;
",6,0,0,0,0,1,0,0,0,7,31,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,32,74,"        return new SubOrientedPoint(this, null);
",0,0,0,1,2,1,0,2,0,3,40,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,32,87,"        return !(direct ^ ((OrientedPoint) other).direct);
",6,1,0,3,6,1,0,2,0,10,50,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,32,94,"        return location;
",2,0,0,0,0,1,0,0,0,2,16,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,32,102,"        return direct;
",2,0,0,0,0,1,0,0,0,2,14,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,32,29,"public class OrientedPoint implements Hyperplane<Euclidean1D> {
",2,0,0,0,1,1,0,4,0,7,63,1,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,32,39,"        super(hyperplane, remainingRegion);
",4,0,0,1,2,0,0,0,0,4,35,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,32,40,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,32,52,"        return new SubOrientedPoint(hyperplane, remainingRegion);
",4,0,0,1,2,1,0,2,0,6,57,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,32,58,"        final double global = hyperplane.getOffset(((OrientedPoint) getHyperplane()).getLocation());
",2,0,0,5,10,1,8,2,0,13,92,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,32,59,"        return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
",16,2,0,3,6,1,0,0,0,19,88,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,37,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,60,"        super(tree);
",2,0,0,1,2,0,0,0,0,2,12,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,61,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,208,"        final List<Interval> list = new ArrayList<Interval>();
",2,0,0,1,2,1,0,8,0,11,54,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,209,"        recurseList(getTree(false), list,
",0,0,0,1,3,0,6,0,0,7,33,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,211,"        return list;
",2,0,0,0,0,1,0,0,0,2,12,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,224,"        if (node.getCut() == null) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,225,"            if ((Boolean) node.getAttribute()) {
",0,0,0,3,7,0,4,2,0,6,36,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,227,"                list.add(new Interval(lower, upper));
",4,0,0,2,4,0,4,2,0,10,37,9,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,230,"            final OrientedPoint op  = (OrientedPoint) node.getCut().getHyperplane();
",2,0,0,3,6,1,6,4,0,13,72,6,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,231,"            final Vector1D       loc = op.getLocation();
",2,0,0,1,2,1,4,2,0,9,44,6,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,232,"            double              x   = loc.getX();
",2,0,0,1,2,0,4,0,0,6,37,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,235,"            final BSPTree<Euclidean1D> low  =
",2,0,0,0,0,1,0,4,0,7,33,6,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,237,"            final BSPTree<Euclidean1D> high =
",2,0,0,0,0,1,0,4,0,7,33,6,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,240,"            recurseList(low, list, lower, x);
",0,0,0,1,2,0,10,0,0,10,33,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,241,"            if ((checkPoint(low,  loc) == Location.INSIDE) &&
",4,2,0,2,5,0,6,0,0,12,49,6,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,246,"            recurseList(high, list, x, upper);
",0,0,0,1,2,0,10,0,0,10,34,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,250,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Interval,32,37,"    public Interval(final double lower, final double upper) {
",6,0,0,1,3,3,0,0,0,9,57,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Interval,32,38,"        this.lower = lower;
",4,0,0,0,0,0,0,0,0,5,19,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Interval,32,39,"        this.upper = upper;
",4,0,0,0,0,0,0,0,0,5,19,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Interval,32,40,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,496,"        switch (sub.side(cHyperplane)) {
",0,0,0,2,5,0,6,0,0,6,32,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,245,"            switch (visitor.visitOrder(this)) {
",0,0,0,2,5,0,4,0,0,4,35,7,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,230,"    private class NodesCleaner implements  BSPTreeVisitor<S> {
",2,0,0,0,1,1,0,4,0,7,58,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,244,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,524,"        public Sides() {
",2,0,0,1,3,1,0,0,0,3,16,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,525,"            plusFound  = false;
",2,0,0,0,0,0,0,0,0,4,19,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,526,"            minusFound = false;
",2,0,0,0,0,0,0,0,0,4,19,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,527,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,532,"            plusFound = true;
",2,0,0,0,0,0,0,0,0,4,17,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,533,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,539,"            return plusFound;
",2,0,0,0,0,1,0,0,0,2,17,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,545,"            minusFound = true;
",2,0,0,0,0,0,0,0,0,4,18,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,546,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,552,"            return minusFound;
",2,0,0,0,0,1,0,0,0,2,18,5,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,35,"    public RegionFactory() {
",2,0,0,1,3,1,0,0,0,3,24,2,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,36,"        nodeCleaner = new NodesCleaner();
",2,0,0,1,2,0,0,2,0,5,33,4,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04545,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,196,"            switch (other.side(inserted)) {
",0,0,0,2,5,0,6,0,0,6,31,7,0.04545,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,32,41,"        this(LocalizedFormats.NULL_NOT_ALLOWED);
",4,0,0,1,2,0,0,0,0,4,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,32,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,32,50,"        super(pattern, arguments);
",4,0,0,1,2,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NullArgumentException,32,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,32,44,"                                        Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,32,45,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,32,46,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,32,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,32,51,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,32,57,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalArgumentException,32,63,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,32,44,"        super(specific, wrong, expected);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,32,45,"        dimension = expected;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,32,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,32,56,"        this(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, wrong, expected);
",8,0,0,1,2,0,0,0,0,8,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,32,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/DimensionMismatchException,32,63,"        return dimension;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,32,46,"        super(pattern, wrong, arguments);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,32,47,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,32,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalNumberException,32,54,"        return argument;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,32,43,"    public MathArithmeticException() {
",2,0,0,1,3,1,0,0,0,3,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,32,44,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,32,45,"        context.addMessage(LocalizedFormats.ARITHMETIC_EXCEPTION);
",4,0,0,1,2,0,4,0,0,8,58,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,32,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,32,56,"                                   Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,32,57,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,32,58,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,32,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,32,63,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,32,69,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathArithmeticException,32,75,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,32,37,"    public MathInternalError() {
",2,0,0,1,3,1,0,0,0,3,28,2,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,32,38,"        getContext().addMessage(LocalizedFormats.INTERNAL_ERROR, REPORT_URL);
",4,0,0,2,4,0,6,0,0,10,69,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,32,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,32,46,"        super(cause, LocalizedFormats.INTERNAL_ERROR, REPORT_URL);
",8,0,0,1,2,0,0,0,0,8,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,32,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,32,56,"        super(pattern, args);
",4,0,0,1,2,0,0,0,0,4,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathInternalError,32,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,32,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,32,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,32,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,32,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,32,60,"        super(cause);
",2,0,0,1,2,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,32,61,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,32,62,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,32,63,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,32,69,"        this(LocalizedFormats.ILLEGAL_STATE);
",4,0,0,1,2,0,0,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,32,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,32,74,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,32,80,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,32,86,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,32,61,"        this(wrong, previous, index, MathArrays.OrderDirection.INCREASING, true);
",12,0,0,1,2,0,0,0,0,13,73,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,32,62,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,32,80,"        super(direction == MathArrays.OrderDirection.INCREASING ?
",8,1,0,0,1,0,0,0,0,9,57,5,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,32,89,"        this.direction = direction;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,32,90,"        this.strict = strict;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,32,91,"        this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,32,92,"        this.previous = previous;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,32,93,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,32,99,"        return direction;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,32,105,"        return strict;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,32,113,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NonMonotonicSequenceException,32,119,"        return previous;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,143,"    public static enum OrderDirection {
",2,0,0,0,1,2,0,0,0,4,35,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,145,"        INCREASING,
",2,0,0,0,0,0,0,0,0,2,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,147,"        DECREASING
",2,0,0,0,0,0,0,0,0,2,10,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,32,40,"        this(LocalizedFormats.NOT_FINITE_NUMBER, wrong, args);
",8,0,0,1,2,0,0,0,0,8,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,32,41,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,32,53,"        super(specific, wrong, args);
",6,0,0,1,2,0,0,0,0,6,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/exception/NotFiniteNumberException,32,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3780,"    private static class lnMant {
",2,0,0,0,1,2,0,0,0,4,29,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3794,"                LN_MANT = FastMathLiteralArrays.loadLnMant();
",2,0,0,1,2,0,4,0,0,7,45,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3796,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,349,"    private FastMath() {}
",2,0,0,2,4,1,0,0,0,3,21,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,362,"            return d; // These are un-normalised - don't try to convert
",2,0,0,0,0,1,0,0,0,2,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,383,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,384,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,392,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,393,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,396,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,397,"          return exp(-x)/2.0;
",2,1,0,1,2,1,2,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,400,"      double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,401,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,402,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,404,"      exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,406,"      double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,407,"      double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,409,"      double temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,410,"      double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,411,"      double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,414,"      double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,415,"      temp = recip * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,416,"      double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,417,"      double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,420,"      recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,422,"      recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,425,"      temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,426,"      yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,427,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,428,"      temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,429,"      yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,430,"      ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,432,"      double result = ya + yb;
",6,1,0,0,0,0,0,0,0,7,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,433,"      result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,434,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,442,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,443,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,444,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,452,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,453,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,456,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,457,"          return -exp(-x)/2.0;
",2,1,0,1,2,1,2,0,0,7,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,460,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,461,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,464,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,465,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,466,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,471,"      if (x > 0.25) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,472,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,473,"          exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,475,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,476,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,478,"          double temp = ya * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,479,"          double yaa = ya + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,480,"          double yab = ya - yaa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,483,"          double recip = 1.0/ya;
",4,1,0,0,0,0,0,0,0,5,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,484,"          temp = recip * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,485,"          double recipa = recip + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,486,"          double recipb = recip - recipa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,489,"          recipb += (1.0 - yaa*recipa - yaa*recipb - yab*recipa - yab*recipb) * recip;
",20,9,0,1,2,0,0,0,0,30,76,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,491,"          recipb += -yb * recip * recip;
",8,1,0,0,0,0,0,0,0,11,30,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,493,"          recipa = -recipa;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,494,"          recipb = -recipb;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,497,"          temp = ya + recipa;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,498,"          yb += -(temp - ya - recipa);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,499,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,500,"          temp = ya + recipb;
",6,1,0,0,0,0,0,0,0,8,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,501,"          yb += -(temp - ya - recipb);
",8,1,0,1,2,0,0,0,0,11,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,502,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,504,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,505,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,506,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,508,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,509,"          expm1(x, hiPrec);
",0,0,0,1,2,0,6,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,511,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,512,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,515,"          double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,516,"          double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,517,"          double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,518,"          double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,519,"          double temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,520,"          double ra = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,521,"          double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,523,"          temp = denom * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,524,"          double za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,525,"          double zb = denom - za;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,527,"          rb += (ya - za*ra - za*rb - zb*ra - zb*rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,530,"          rb += yb*denomr;                        // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,531,"          rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,534,"          temp = ya + ra;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,535,"          yb += -(temp - ya - ra);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,536,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,537,"          temp = ya + rb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,538,"          yb += -(temp - ya - rb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,539,"          ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,541,"          result = ya + yb;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,542,"          result *= 0.5;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,545,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,546,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,549,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,557,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,559,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,560,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,569,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,570,"          return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,573,"      if (x < -20) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,574,"          return -1.0;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,577,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,578,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,581,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,582,"          x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,583,"          negate = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,587,"      if (x >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,588,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,590,"          exp(x*2.0, 0.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,592,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,593,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,596,"          double na = -1.0 + ya;
",4,1,0,0,0,0,0,0,0,6,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,597,"          double nb = -(na + 1.0 - ya);
",6,2,0,1,2,0,0,0,0,9,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,598,"          double temp = na + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,599,"          nb += -(temp - na - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,600,"          na = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,603,"          double da = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,604,"          double db = -(da - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,605,"          temp = da + yb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,606,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,607,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,609,"          temp = da * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,610,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,611,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,614,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,615,"          temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,616,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,617,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,620,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,623,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,625,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,627,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,628,"      }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,630,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,632,"          expm1(x*2.0, hiPrec);
",2,1,0,1,2,0,4,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,634,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,635,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,638,"          double na = ya;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,639,"          double nb = yb;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,642,"          double da = 2.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,643,"          double db = -(da - 2.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,644,"          double temp = da + yb;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,645,"          db += -(temp - da - yb);
",8,1,0,1,2,0,0,0,0,11,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,646,"          da = temp;
",4,0,0,0,0,0,0,0,0,5,10,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,648,"          temp = da * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,649,"          double daa = da + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,650,"          double dab = da - daa;
",6,1,0,0,0,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,653,"          double ratio = na/da;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,654,"          temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,655,"          double ratioa = ratio + temp - temp;
",8,2,0,0,0,0,0,0,0,10,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,656,"          double ratiob = ratio - ratioa;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,659,"          ratiob += (na - daa*ratioa - daa*ratiob - dab*ratioa - dab*ratiob) / da;
",22,9,0,1,2,0,0,0,0,32,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,662,"          ratiob += nb / da;
",6,1,0,0,0,0,0,0,0,8,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,664,"          ratiob += -db * na / da / da;
",10,3,0,0,0,0,0,0,0,15,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,666,"          result = ratioa + ratiob;
",6,1,0,0,0,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,669,"      if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,670,"          result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,673,"      return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,681,"        return FastMath.log(a + FastMath.sqrt(a * a - 1));
",6,3,0,2,4,1,8,0,0,17,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,689,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,690,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,691,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,692,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,696,"        if (a > 0.167) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,697,"            absAsinh = FastMath.log(FastMath.sqrt(a * a + 1) + a);
",8,3,0,2,4,0,8,0,0,20,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,699,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,700,"            if (a > 0.097) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,701,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * (F_1_13 - a2 * (F_1_15 - a2 * F_1_17 * F_15_16) * F_13_14) * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",52,17,0,8,16,0,0,0,0,70,212,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,702,"            } else if (a > 0.036) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,703,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * (F_1_9 - a2 * (F_1_11 - a2 * F_1_13 * F_11_12) * F_9_10) * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",40,13,0,6,12,0,0,0,0,54,160,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,704,"            } else if (a > 0.0036) {
",2,1,0,1,4,0,0,0,0,3,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,705,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * (F_1_5 - a2 * (F_1_7 - a2 * F_1_9 * F_7_8) * F_5_6) * F_3_4) * F_1_2);
",28,9,0,4,8,0,0,0,0,38,109,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,707,"                absAsinh = a * (1 - a2 * (F_1_3 - a2 * F_1_5 * F_3_4) * F_1_2);
",16,5,0,2,4,0,0,0,0,22,63,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,711,"        return negative ? -absAsinh : absAsinh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,719,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,720,"        if (a < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,721,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,722,"            a = -a;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,726,"        if (a > 0.15) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,727,"            absAtanh = 0.5 * FastMath.log((1 + a) / (1 - a));
",6,4,0,3,6,0,4,0,0,15,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,729,"            final double a2 = a * a;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,730,"            if (a > 0.087) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,731,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * (F_1_13 + a2 * (F_1_15 + a2 * F_1_17))))))));
",36,17,0,8,16,0,0,0,0,54,141,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,732,"            } else if (a > 0.031) {
",2,1,0,1,4,0,0,0,0,3,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,733,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * (F_1_9 + a2 * (F_1_11 + a2 * F_1_13))))));
",28,13,0,6,12,0,0,0,0,42,109,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,734,"            } else if (a > 0.003) {
",2,1,0,1,4,0,0,0,0,3,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,735,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * (F_1_5 + a2 * (F_1_7 + a2 * F_1_9))));
",20,9,0,4,8,0,0,0,0,30,77,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,737,"                absAtanh = a * (1 + a2 * (F_1_3 + a2 * F_1_5));
",12,5,0,2,4,0,0,0,0,18,47,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,741,"        return negative ? -absAtanh : absAtanh;
",6,0,0,0,0,1,0,0,0,7,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,750,"        return (a < 0.0) ? -1.0 : ((a > 0.0) ? 1.0 : a); // return +0.0/-0.0/NaN depending on a
",6,2,0,3,6,2,0,0,0,9,87,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,759,"        return (a < 0.0f) ? -1.0f : ((a > 0.0f) ? 1.0f : a); // return +0.0/-0.0/NaN depending on a
",6,2,0,3,6,2,0,0,0,9,91,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,767,"        return nextAfter(a, Double.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,775,"        return nextAfter(a, Float.POSITIVE_INFINITY);
",4,0,0,1,2,1,4,0,0,8,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,783,"        return Math.random();
",0,0,0,1,2,1,4,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,807,"        return exp(x, 0.0, null);
",0,0,0,1,2,1,4,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,826,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,827,"            intVal = (int) -x;
",4,0,0,1,2,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,829,"            if (intVal > 746) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,830,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,831,"                    hiPrec[0] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,832,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,834,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,837,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,839,"                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,840,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,841,"                    hiPrec[0] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,842,"                    hiPrec[1] /= 285040095144011776.0;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,844,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,847,"            if (intVal == 709) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,849,"                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;
",4,2,0,1,2,1,6,0,0,13,79,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,850,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,851,"                    hiPrec[0] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,852,"                    hiPrec[1] /= 4.455505956692756620;
",0,0,1,1,2,0,0,0,0,3,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,854,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,857,"            intVal++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,859,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,860,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,862,"            intVal = -intVal;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,864,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,866,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,867,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,868,"                    hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,869,"                    hiPrec[1] = 0.0;
",0,0,1,1,2,0,0,0,0,3,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,871,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,874,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,875,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,882,"        final int intFrac = (int) ((x - intVal) * 1024.0);
",6,2,0,3,6,1,0,0,0,9,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,883,"        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,884,"        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,890,"        final double epsilon = x - (intVal + intFrac / 1024.0);
",8,3,0,1,2,1,0,0,0,12,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,899,"        double z = 0.04168701738764507;
",2,0,0,0,0,0,0,0,0,2,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,900,"        z = z * epsilon + 0.1666666505023083;
",6,2,0,0,0,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,901,"        z = z * epsilon + 0.5000000000042687;
",6,2,0,0,0,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,902,"        z = z * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,903,"        z = z * epsilon + -3.940510424527919E-20;
",6,2,0,0,0,0,0,0,0,10,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,910,"        double tempA = intPartA * fracPartA;
",6,1,0,0,0,0,0,0,0,7,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,911,"        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;
",14,5,0,0,0,0,0,0,0,19,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,917,"        final double tempC = tempB + tempA;
",6,1,0,0,0,1,0,0,0,8,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,919,"        if (extra != 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,920,"            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;
",20,7,0,0,0,0,0,0,0,28,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,922,"            result = tempC*z + tempB + tempA;
",10,3,0,0,0,0,0,0,0,14,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,925,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,927,"            hiPrec[0] = tempA;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,928,"            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;
",16,6,1,1,2,0,0,0,0,25,58,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,931,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,939,"      return expm1(x, null);
",0,0,0,1,2,1,4,0,0,5,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,948,"        if (x != x || x == 0.0) { // NaN or zero
",6,3,0,1,3,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,949,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,952,"        if (x <= -1.0 || x >= 1.0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,955,"            double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,956,"            exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,957,"            if (x > 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,958,"                return -1.0 + hiPrec[0] + hiPrec[1];
",0,1,1,2,4,1,0,0,0,6,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,960,"                final double ra = -1.0 + hiPrec[0];
",2,1,1,1,2,1,0,0,0,7,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,961,"                double rb = -(ra + 1.0 - hiPrec[0]);
",4,2,1,2,4,0,0,0,0,9,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,962,"                rb += hiPrec[1];
",2,0,1,1,2,0,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,963,"                return ra + rb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,970,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,972,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,973,"            x = -x;
",4,0,0,0,0,0,0,0,0,6,7,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,974,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,978,"            int intFrac = (int) (x * 1024.0);
",4,1,0,2,4,0,0,0,0,5,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,979,"            double tempA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac] - 1.0;
",6,1,1,1,2,0,0,0,0,9,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,980,"            double tempB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,0,0,0,0,8,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,982,"            double temp = tempA + tempB;
",6,1,0,0,0,0,0,0,0,7,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,983,"            tempB = -(temp - tempA - tempB);
",8,1,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,984,"            tempA = temp;
",4,0,0,0,0,0,0,0,0,5,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,986,"            temp = tempA * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,987,"            baseA = tempA + temp - temp;
",8,2,0,0,0,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,988,"            baseB = tempB + (tempA - baseA);
",8,2,0,1,2,0,0,0,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,990,"            epsilon = x - intFrac/1024.0;
",6,2,0,0,0,0,0,0,0,9,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,995,"        double zb = 0.008336750013465571;
",2,0,0,0,0,0,0,0,0,2,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,996,"        zb = zb * epsilon + 0.041666663879186654;
",6,2,0,0,0,0,0,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,997,"        zb = zb * epsilon + 0.16666666666745392;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,998,"        zb = zb * epsilon + 0.49999999999999994;
",6,2,0,0,0,0,0,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,999,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1000,"        zb = zb * epsilon;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1002,"        double za = epsilon;
",4,0,0,0,0,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1003,"        double temp = za + zb;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1004,"        zb = -(temp - za - zb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1005,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1007,"        temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1008,"        temp = za + temp - temp;
",8,2,0,0,0,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1009,"        zb += za - temp;
",6,1,0,0,0,0,0,0,0,8,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1010,"        za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1013,"        double ya = za * baseA;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1015,"        temp = ya + za * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1016,"        double yb = -(temp - ya - za * baseB);
",10,2,0,1,2,0,0,0,0,13,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1017,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1019,"        temp = ya + zb * baseA;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1020,"        yb += -(temp - ya - zb * baseA);
",10,2,0,1,2,0,0,0,0,14,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1021,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1023,"        temp = ya + zb * baseB;
",8,2,0,0,0,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1024,"        yb += -(temp - ya - zb*baseB);
",10,2,0,1,2,0,0,0,0,14,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1025,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1029,"        temp = ya + baseA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1030,"        yb += -(temp - baseA - ya);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1031,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1033,"        temp = ya + za;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1035,"        yb += -(temp - ya - za);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1036,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1038,"        temp = ya + baseB;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1040,"        yb += -(temp - ya - baseB);
",8,1,0,1,2,0,0,0,0,11,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1041,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1043,"        temp = ya + zb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1045,"        yb += -(temp - ya - zb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1046,"        ya = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1048,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1050,"            double denom = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1051,"            double denomr = 1.0 / denom;
",4,1,0,0,0,0,0,0,0,5,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1052,"            double denomb = -(denom - 1.0 - ya) + yb;
",8,2,0,1,2,0,0,0,0,11,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1053,"            double ratio = ya * denomr;
",6,1,0,0,0,0,0,0,0,7,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1054,"            temp = ratio * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1055,"            final double ra = ratio + temp - temp;
",8,2,0,0,0,1,0,0,0,11,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1056,"            double rb = ratio - ra;
",6,1,0,0,0,0,0,0,0,7,23,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1058,"            temp = denom * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1059,"            za = denom + temp - temp;
",8,2,0,0,0,0,0,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1060,"            zb = denom - za;
",6,1,0,0,0,0,0,0,0,8,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1062,"            rb += (ya - za * ra - za * rb - zb * ra - zb * rb) * denomr;
",22,9,0,1,2,0,0,0,0,32,60,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1073,"            rb += yb * denomr;                      // numerator
",6,1,0,0,0,0,0,0,0,8,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1074,"            rb += -ya * denomb * denomr * denomr;   // denominator
",10,1,0,0,0,0,0,0,0,13,54,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1077,"            ya = -ra;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1078,"            yb = -rb;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1081,"        if (hiPrecOut != null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1082,"            hiPrecOut[0] = ya;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1083,"            hiPrecOut[1] = yb;
",2,0,1,1,2,0,0,0,0,5,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1086,"        return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1096,"        return log(x, null);
",0,0,0,1,2,1,4,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1106,"        if (x==0) { // Handle special case of +0/-0
",2,1,0,1,3,0,0,0,0,3,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1107,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1109,"        long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1112,"        if ((bits & 0x8000000000000000L) != 0 || x != x) {
",6,4,0,2,5,0,0,0,0,10,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1113,"            if (x != 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1114,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1115,"                    hiPrec[0] = Double.NaN;
",4,0,1,1,2,0,0,0,0,7,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1118,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1123,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1124,"            if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1125,"                hiPrec[0] = Double.POSITIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1128,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1132,"        int exp = (int)(bits >> 52)-1023;
",4,2,0,2,4,0,0,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1134,"        if ((bits & 0x7ff0000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1136,"            if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1138,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1139,"                    hiPrec[0] = Double.NEGATIVE_INFINITY;
",4,0,1,1,2,0,0,0,0,7,37,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1142,"                return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1146,"            bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1147,"            while ( (bits & 0x0010000000000000L) == 0) {
",2,2,0,2,5,0,0,0,0,4,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1148,"                exp--;
",2,0,0,0,0,0,0,0,0,3,6,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1149,"                bits <<= 1;
",2,0,0,0,0,0,0,0,0,3,11,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1154,"        if (exp == -1 || exp == 0) {
",4,3,0,1,3,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1155,"            if (x < 1.01 && x > 0.99 && hiPrec == null) {
",6,5,0,1,3,0,0,0,0,11,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1160,"                double xa = x - 1.0;
",4,1,0,0,0,0,0,0,0,5,20,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1161,"                double xb = xa - x + 1.0;
",6,2,0,0,0,0,0,0,0,8,25,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1162,"                double tmp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1163,"                double aa = xa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1164,"                double ab = xa - aa;
",6,1,0,0,0,0,0,0,0,7,20,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1165,"                xa = aa;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1166,"                xb = ab;
",4,0,0,0,0,0,0,0,0,5,8,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1168,"                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];
",6,1,1,2,4,0,0,0,0,9,53,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1169,"                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];
",6,1,1,2,4,0,0,0,0,9,53,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1171,"                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,53,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1173,"                    aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1174,"                    ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1176,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1177,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1178,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1181,"                    aa = ya + LN_QUICK_COEF[i][0];
",4,1,1,2,4,0,0,0,0,10,30,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1182,"                    ab = yb + LN_QUICK_COEF[i][1];
",4,1,1,2,4,0,0,0,0,10,30,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1184,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1185,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1186,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1190,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1191,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1193,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1194,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1195,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1197,"                return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1202,"        double lnm[] = lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];
",8,2,0,5,10,0,0,0,0,10,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1213,"        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));
",8,4,0,3,6,0,0,0,0,12,89,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1215,"        double lnza = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1216,"        double lnzb = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1218,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1220,"            double tmp = epsilon * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1221,"            double aa = epsilon + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1222,"            double ab = epsilon - aa;
",6,1,0,0,0,0,0,0,0,7,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1223,"            double xa = aa;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1224,"            double xb = ab;
",4,0,0,0,0,0,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1227,"            double numer = bits & 0x3ffffffffffL;
",4,1,0,0,0,0,0,0,0,5,37,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1228,"            double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);
",6,2,0,1,2,0,0,0,0,8,59,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1229,"            aa = numer - xa*denom - xb * denom;
",12,4,0,0,0,0,0,0,0,17,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1230,"            xb += aa / denom;
",6,1,0,0,0,0,0,0,0,8,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1233,"            double ya = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][0];
",6,1,1,2,4,0,0,0,0,9,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1234,"            double yb = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1][1];
",6,1,1,2,4,0,0,0,0,9,57,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1236,"            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1238,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1239,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1241,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1242,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1243,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1246,"                aa = ya + LN_HI_PREC_COEF[i][0];
",4,1,1,2,4,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1247,"                ab = yb + LN_HI_PREC_COEF[i][1];
",4,1,1,2,4,0,0,0,0,10,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1249,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1250,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1251,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1255,"            aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1256,"            ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1264,"            lnza = aa + ab;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1265,"            lnzb = -(lnza - aa - ab);
",8,1,0,1,2,0,0,0,0,11,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1266,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1269,"            lnza = -0.16624882440418567;
",2,0,0,0,0,0,0,0,0,4,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1270,"            lnza = lnza * epsilon + 0.19999954120254515;
",6,2,0,0,0,0,0,0,0,9,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1271,"            lnza = lnza * epsilon + -0.2499999997677497;
",6,2,0,0,0,0,0,0,0,10,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1272,"            lnza = lnza * epsilon + 0.3333333333332802;
",6,2,0,0,0,0,0,0,0,9,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1273,"            lnza = lnza * epsilon + -0.5;
",6,2,0,0,0,0,0,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1274,"            lnza = lnza * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1275,"            lnza = lnza * epsilon;
",6,1,0,0,0,0,0,0,0,8,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1292,"        double a = LN_2_A*exp;
",6,1,0,0,0,0,0,0,0,7,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1293,"        double b = 0.0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1294,"        double c = a+lnm[0];
",4,1,1,1,2,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1295,"        double d = -(c-a-lnm[0]);
",6,1,1,2,4,0,0,0,0,10,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1296,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1297,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1299,"        c = a + lnza;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1300,"        d = -(c - a - lnza);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1301,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1302,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1304,"        c = a + LN_2_B*exp;
",8,2,0,0,0,0,0,0,0,11,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1305,"        d = -(c - a - LN_2_B*exp);
",10,2,0,1,2,0,0,0,0,14,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1306,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1307,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1309,"        c = a + lnm[1];
",4,1,1,1,2,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1310,"        d = -(c - a - lnm[1]);
",6,1,1,2,4,0,0,0,0,11,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1311,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1312,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1314,"        c = a + lnzb;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1315,"        d = -(c - a - lnzb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1316,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1317,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1319,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1320,"            hiPrec[0] = a;
",2,0,1,1,2,0,0,0,0,5,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1321,"            hiPrec[1] = b;
",2,0,1,1,2,0,0,0,0,5,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1324,"        return a + b;
",4,1,0,0,0,1,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1333,"        if (x == -1) {
",2,1,0,1,3,0,0,0,0,4,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1334,"            return x/0.0;   // -Infinity
",2,1,0,0,0,1,0,0,0,3,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1337,"        if (x > 0 && 1/x == 0) { // x = Infinity
",4,4,0,1,3,0,0,0,0,8,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1338,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1341,"        if (x>1e-6 || x<-1e-6) {
",4,3,0,1,3,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1342,"            double xpa = 1.0 + x;
",4,1,0,0,0,0,0,0,0,5,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1343,"            double xpb = -(xpa - 1.0 - x);
",6,1,0,1,2,0,0,0,0,8,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1345,"            double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1347,"            final double lores = log(xpa, hiPrec);
",2,0,0,1,2,1,6,0,0,9,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1348,"            if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1349,"                return lores;
",2,0,0,0,0,1,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1354,"            double fx1 = xpb/xpa;
",6,1,0,0,0,0,0,0,0,7,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1356,"            double epsilon = 0.5 * fx1 + 1.0;
",4,2,0,0,0,0,0,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1357,"            epsilon = epsilon * fx1;
",6,1,0,0,0,0,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1359,"            return epsilon + hiPrec[1] + hiPrec[0];
",2,1,1,2,4,1,0,0,0,7,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1363,"        double y = x * F_1_3 - F_1_2;
",8,2,0,0,0,0,0,0,0,10,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1364,"        y = y * x + 1.0;
",6,2,0,0,0,0,0,0,0,9,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1365,"        y = y * x;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1367,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1375,"        final double hiPrec[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1377,"        final double lores = log(x, hiPrec);
",2,0,0,1,2,1,6,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1378,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1379,"            return lores;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1382,"        final double tmp = hiPrec[0] * HEX_40000000;
",4,1,1,1,2,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1383,"        final double lna = hiPrec[0] + tmp - tmp;
",6,2,1,1,2,1,0,0,0,11,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1384,"        final double lnb = hiPrec[0] - lna + hiPrec[1];
",4,2,1,2,4,1,0,0,0,11,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1386,"        final double rln10a = 0.4342944622039795;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1387,"        final double rln10b = 1.9699272335463627E-8;
",2,0,0,0,0,1,0,0,0,3,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1389,"        return rln10b * lnb + rln10b * lna + rln10a * lnb + rln10a * lna;
",16,7,0,0,0,1,0,0,0,23,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1409,"        return log(x) / log(base);
",0,1,0,2,4,1,8,0,0,9,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1420,"        final double lns[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1422,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1423,"            return 1.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1426,"        if (x != x) { // X is NaN
",4,1,0,1,3,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1427,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1431,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1432,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1433,"            if ((bits & 0x8000000000000000L) != 0) {
",2,2,0,2,5,0,0,0,0,4,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1435,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1437,"                if (y < 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1438,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1441,"                if (y > 0 && y == yi && (yi & 1) == 1) {
",8,6,0,2,5,0,0,0,0,14,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1442,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1446,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1447,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1449,"            if (y > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1450,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1453,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1456,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1457,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1458,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1460,"            if (y < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1461,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1463,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1467,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1468,"            if (x * x == 1.0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1469,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1472,"            if (x * x > 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1473,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1475,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1479,"        if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1480,"            if (y != y) { // y is NaN
",4,1,0,1,3,0,0,0,0,5,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1481,"                return y;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1484,"            if (y < 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1485,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1486,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1487,"                    return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1490,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1493,"            if (y > 0)  {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1494,"                long yi = (long) y;
",4,0,0,1,2,0,0,0,0,4,19,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1495,"                if (y == yi && (yi & 1) == 1) {
",6,4,0,2,5,0,0,0,0,10,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1496,"                    return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1499,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1503,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1505,"            if (x * x == 1.0) {
",4,2,0,1,3,0,0,0,0,6,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1506,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1509,"            if (x * x < 1.0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1510,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1512,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1517,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1519,"            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {
",8,3,0,1,3,0,0,0,0,12,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1520,"                return pow(-x, y);
",2,0,0,1,2,1,4,0,0,7,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1523,"            if (y == (long) y) {
",4,1,0,2,5,0,0,0,0,5,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1525,"                return ((long)y & 1) == 0 ? pow(-x, y) : -pow(-x, y);
",6,2,0,4,8,1,8,0,0,19,53,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1527,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1534,"        if (y < 8e298 && y > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1535,"            double tmp1 = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1536,"            ya = y + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,11,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1537,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1538,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1539,"            double tmp1 = y * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,45,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1540,"            double tmp2 = tmp1 * 9.31322574615478515625E-10;
",4,1,0,0,0,0,0,0,0,5,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1541,"            ya = (tmp1 + tmp2 - tmp1) * HEX_40000000 * HEX_40000000;
",12,3,0,1,2,0,0,0,0,16,56,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1542,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1546,"        final double lores = log(x, lns);
",2,0,0,1,2,1,6,0,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1547,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1548,"            return lores;
",2,0,0,0,0,1,0,0,0,2,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1551,"        double lna = lns[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1552,"        double lnb = lns[1];
",2,0,1,1,2,0,0,0,0,4,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1555,"        double tmp1 = lna * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1556,"        double tmp2 = lna + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1557,"        lnb += lna - tmp2;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1558,"        lna = tmp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1561,"        final double aa = lna * ya;
",6,1,0,0,0,1,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1562,"        final double ab = lna * yb + lnb * ya + lnb * yb;
",14,5,0,0,0,1,0,0,0,20,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1564,"        lna = aa+ab;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1565,"        lnb = -(lna - aa - ab);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1567,"        double z = 1.0 / 120.0;
",2,1,0,0,0,0,0,0,0,3,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1568,"        z = z * lnb + (1.0 / 24.0);
",6,3,0,1,2,0,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1569,"        z = z * lnb + (1.0 / 6.0);
",6,3,0,1,2,0,0,0,0,10,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1570,"        z = z * lnb + 0.5;
",6,2,0,0,0,0,0,0,0,9,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1571,"        z = z * lnb + 1.0;
",6,2,0,0,0,0,0,0,0,9,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1572,"        z = z * lnb;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1574,"        final double result = exp(lna, z, null);
",2,0,0,1,2,1,6,0,0,10,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1576,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1771,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1772,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1775,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1776,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1777,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1778,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1781,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1782,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1783,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1784,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1787,"        double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1788,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1789,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1790,"        sinEpsA = temp2;
",4,0,0,0,0,0,0,0,0,5,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1815,"        double a = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1816,"        double b = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1819,"        double t = sintA;
",4,0,0,0,0,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1820,"        double c = a + t;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1821,"        double d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,10,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1822,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1823,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1825,"        t = costA*sinEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1826,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1827,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1828,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1829,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1831,"        b = b + sintA*cosEpsB + costA*sinEpsB;
",12,4,0,0,0,0,0,0,0,17,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1832,"        b = b + sintB + costB*sinEpsA + sintB*cosEpsB + costB*sinEpsB;
",18,6,0,0,0,0,0,0,0,25,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1834,"        double sina = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1835,"        double sinb = -(sina - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1839,"        a = b = c = d = 0.0;
",8,0,0,0,0,0,0,0,0,12,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1841,"        t = costA*cosEpsA;
",6,1,0,0,0,0,0,0,0,8,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1842,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1843,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1844,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1845,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1847,"        t = -sintA*sinEpsA;
",6,1,0,0,0,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1848,"        c = a + t;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1849,"        d = -(c - a - t);
",8,1,0,1,2,0,0,0,0,11,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1850,"        a = c;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1851,"        b = b + d;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1853,"        b = b + costB*cosEpsA + costA*cosEpsB + costB*cosEpsB;
",16,6,0,0,0,0,0,0,0,23,54,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1854,"        b = b - (sintB*sinEpsA + sintA*sinEpsB + sintB*sinEpsB);
",16,6,0,1,2,0,0,0,0,23,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1856,"        double cosa = a + b;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1857,"        double cosb = -(cosa - a - b);
",8,1,0,1,2,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1859,"        if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1861,"            tmp = cosa; cosa = sina; sina = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1862,"            tmp = cosb; cosb = sinb; sinb = tmp;
",12,0,0,0,0,0,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1876,"        double est = sina/cosa;
",6,1,0,0,0,0,0,0,0,7,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1879,"        temp = est * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1880,"        double esta = (est + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1881,"        double estb =  est - esta;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1883,"        temp = cosa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1884,"        double cosaa = (cosa + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1885,"        double cosab =  cosa - cosaa;
",6,1,0,0,0,0,0,0,0,7,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1888,"        double err = (sina - esta*cosaa - esta*cosab - estb*cosaa - estb*cosab)/cosa;  // Correction for division rounding
",22,9,0,1,2,0,0,0,0,31,114,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1889,"        err += sinb/cosa;                     // Change in est due to sinb
",6,1,0,0,0,0,0,0,0,8,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1890,"        err += -sina * cosb / cosa / cosa;    // Change in est due to cosb
",10,3,0,0,0,0,0,0,0,15,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1892,"        if (xb != 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1895,"            double xbadj = xb + est*est*xb;
",10,2,0,0,0,0,0,0,0,12,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1896,"            if (cotanFlag) {
",2,0,0,1,3,0,0,0,0,2,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1897,"                xbadj = -xbadj;
",4,0,0,0,0,0,0,0,0,6,15,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1900,"            err += xbadj;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1903,"        return est+err;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1920,"        long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1921,"        int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1924,"        inbits &= 0x000fffffffffffffL;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1925,"        inbits |= 0x0010000000000000L;
",2,0,0,0,0,0,0,0,0,3,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1928,"        exponent++;
",2,0,0,0,0,0,0,0,0,3,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1929,"        inbits <<= 11;
",2,0,0,0,0,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1935,"        int idx = exponent >> 6;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1936,"        int shift = exponent - (idx << 6);
",6,2,0,1,2,0,0,0,0,8,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1938,"        if (shift != 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1939,"            shpi0 = (idx == 0) ? 0 : (RECIP_2PI[idx-1] << shift);
",8,3,1,3,6,0,0,0,0,14,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1940,"            shpi0 |= RECIP_2PI[idx] >>> (64-shift);
",4,2,1,2,4,0,0,0,0,11,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1941,"            shpiA = (RECIP_2PI[idx] << shift) | (RECIP_2PI[idx+1] >>> (64-shift));
",8,5,1,5,10,0,0,0,0,20,70,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1942,"            shpiB = (RECIP_2PI[idx+1] << shift) | (RECIP_2PI[idx+2] >>> (64-shift));
",10,6,1,5,10,0,0,0,0,21,72,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1944,"            shpi0 = (idx == 0) ? 0 : RECIP_2PI[idx-1];
",6,2,1,2,4,0,0,0,0,11,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1945,"            shpiA = RECIP_2PI[idx];
",2,0,1,1,2,0,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1946,"            shpiB = RECIP_2PI[idx+1];
",4,1,1,1,2,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1950,"        long a = inbits >>> 32;
",4,1,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1951,"        long b = inbits & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1953,"        long c = shpiA >>> 32;
",4,1,0,0,0,0,0,0,0,5,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1954,"        long d = shpiA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,5,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1956,"        long ac = a * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1957,"        long bd = b * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1958,"        long bc = b * c;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1959,"        long ad = a * d;
",6,1,0,0,0,0,0,0,0,7,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1961,"        long prodB = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1962,"        long prodA = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1964,"        boolean bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1965,"        boolean bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1966,"        boolean bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1969,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1971,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1974,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1975,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1977,"        prodB = prodB + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1978,"        prodA = prodA + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1980,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1983,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1985,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1989,"        c = shpiB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1990,"        d = shpiB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1991,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1992,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1993,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1996,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1998,"        bita = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,1999,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2000,"        prodB += ac;
",4,0,0,0,0,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2001,"        bitsum = (prodB & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2003,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2005,"            prodA++;
",2,0,0,0,0,0,0,0,0,3,8,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2009,"        c = shpi0 >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2010,"        d = shpi0 & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2012,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2013,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2014,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2016,"        prodA += bd + ((bc + ad) << 32);
",8,3,0,2,4,0,0,0,0,12,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2028,"        int intPart = (int)(prodA >>> 62);
",4,1,0,2,4,0,0,0,0,5,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2031,"        prodA <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2032,"        prodA |= prodB >>> 62;
",4,1,0,0,0,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2033,"        prodB <<= 2;
",2,0,0,0,0,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2036,"        a = prodA >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2037,"        b = prodA & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2039,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2040,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2042,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2043,"        bd = b * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2044,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2045,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2047,"        long prod2B = bd + (ad << 32);
",6,2,0,1,2,0,0,0,0,8,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2048,"        long prod2A = ac + (ad >>> 32);
",6,2,0,1,2,0,0,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2050,"        bita = (bd & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2051,"        bitb = (ad & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2052,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2055,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2057,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2060,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2061,"        bitb = (bc & 0x80000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2063,"        prod2B = prod2B + (bc << 32);
",6,2,0,1,2,0,0,0,0,9,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2064,"        prod2A = prod2A + (bc >>> 32);
",6,2,0,1,2,0,0,0,0,9,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2066,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2069,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2071,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2075,"        c = PI_O_4_BITS[1] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2076,"        d = PI_O_4_BITS[1] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2077,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2078,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2079,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2082,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2084,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2085,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2086,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2087,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2089,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2091,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2095,"        a = prodB >>> 32;
",4,1,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2096,"        b = prodB & 0xffffffffL;
",4,1,0,0,0,0,0,0,0,6,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2097,"        c = PI_O_4_BITS[0] >>> 32;
",2,1,1,1,2,0,0,0,0,6,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2098,"        d = PI_O_4_BITS[0] & 0xffffffffL;
",2,1,1,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2099,"        ac = a * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2100,"        bc = b * c;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2101,"        ad = a * d;
",6,1,0,0,0,0,0,0,0,8,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2104,"        ac = ac + ((bc + ad) >>> 32);
",8,3,0,2,4,0,0,0,0,12,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2106,"        bita = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2107,"        bitb = (ac & 0x8000000000000000L ) != 0;
",4,2,0,1,2,0,0,0,0,7,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2108,"        prod2B += ac;
",4,0,0,0,0,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2109,"        bitsum = (prod2B & 0x8000000000000000L) != 0;
",4,2,0,1,2,0,0,0,0,7,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2111,"        if ( (bita && bitb) ||
",4,2,0,1,3,0,0,0,0,6,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2113,"            prod2A++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2117,"        double tmpA = (prod2A >>> 12) / TWO_POWER_52;  // High order 52 bits
",6,2,0,1,2,0,0,0,0,8,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2118,"        double tmpB = (((prod2A & 0xfffL) << 40) + (prod2B >>> 24)) / TWO_POWER_52 / TWO_POWER_52; // Low bits
",10,5,0,4,8,0,0,0,0,15,102,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2120,"        double sumA = tmpA + tmpB;
",6,1,0,0,0,0,0,0,0,7,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2121,"        double sumB = -(sumA - tmpA - tmpB);
",8,1,0,1,2,0,0,0,0,10,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2124,"        result[0] = intPart;
",2,0,1,1,2,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2125,"        result[1] = sumA * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2126,"        result[2] = sumB * 2.0;
",2,1,1,1,2,0,0,0,0,6,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2127,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2151,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2157,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2165,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2166,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2167,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2168,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2169,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2170,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2223,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2238,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2242,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2251,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2252,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2253,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2254,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2255,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2256,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2308,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2318,"        boolean negative = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2319,"        int quadrant = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2322,"        double xa = x;
",4,0,0,0,0,0,0,0,0,4,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2323,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2324,"            negative = true;
",2,0,0,0,0,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2325,"            xa = -xa;
",4,0,0,0,0,0,0,0,0,6,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2329,"        if (xa == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2330,"            long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2331,"            if (bits < 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2332,"                return -0.0;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2334,"            return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2337,"        if (xa != xa || xa == Double.POSITIVE_INFINITY) {
",10,3,0,1,3,0,0,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2338,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2342,"        double xb = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2343,"        if (xa > 3294198.0) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2347,"            double reduceResults[] = new double[3];
",2,0,0,2,4,0,0,0,0,2,39,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2348,"            reducePayneHanek(xa, reduceResults);
",0,0,0,1,2,0,6,0,0,6,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2349,"            quadrant = ((int) reduceResults[0]) & 3;
",2,1,1,3,6,0,0,0,0,6,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2350,"            xa = reduceResults[1];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2351,"            xb = reduceResults[2];
",2,0,1,1,2,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2352,"        } else if (xa > 1.5707963267948966) {
",2,1,0,1,4,0,0,0,0,3,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2357,"            int k = (int)(xa * 0.6366197723675814);
",4,1,0,2,4,0,0,0,0,5,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2363,"                double a = -k * 1.570796251296997;
",4,1,0,0,0,0,0,0,0,6,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2364,"                remA = xa + a;
",6,1,0,0,0,0,0,0,0,8,14,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2365,"                remB = -(remA - xa - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2367,"                a = -k * 7.549789948768648E-8;
",4,1,0,0,0,0,0,0,0,7,30,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2368,"                double b = remA;
",4,0,0,0,0,0,0,0,0,4,16,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2369,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2370,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2372,"                a = -k * 6.123233995736766E-17;
",4,1,0,0,0,0,0,0,0,7,31,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2373,"                b = remA;
",4,0,0,0,0,0,0,0,0,5,9,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2374,"                remA = a + b;
",6,1,0,0,0,0,0,0,0,8,13,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2375,"                remB += -(remA - b - a);
",8,1,0,1,2,0,0,0,0,11,24,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2377,"                if (remA > 0.0) {
",2,1,0,1,3,0,0,0,0,3,17,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2378,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2384,"                k--;
",2,0,0,0,0,0,0,0,0,3,4,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2385,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2386,"            quadrant = k & 3;
",4,1,0,0,0,0,0,0,0,6,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2387,"            xa = remA;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2388,"            xb = remB;
",4,0,0,0,0,0,0,0,0,5,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2391,"        if (xa > 1.5) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2393,"            final double pi2a = 1.5707963267948966;
",2,0,0,0,0,1,0,0,0,3,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2394,"            final double pi2b = 6.123233995736766E-17;
",2,0,0,0,0,1,0,0,0,3,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2396,"            final double a = pi2a - xa;
",6,1,0,0,0,1,0,0,0,8,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2397,"            double b = -(a - pi2a + xa);
",8,2,0,1,2,0,0,0,0,11,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2398,"            b += pi2b - xb;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2400,"            xa = a + b;
",6,1,0,0,0,0,0,0,0,8,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2401,"            xb = -(xa - a - b);
",8,1,0,1,2,0,0,0,0,11,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2402,"            quadrant ^= 1;
",2,0,0,0,0,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2403,"            negative ^= true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2407,"        if ((quadrant & 1) == 0) {
",2,2,0,2,5,0,0,0,0,4,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2408,"            result = tanQ(xa, xb, false);
",2,0,0,1,2,0,6,0,0,10,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2410,"            result = -tanQ(xa, xb, true);
",2,0,0,1,2,0,6,0,0,11,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2413,"        if (negative) {
",2,0,0,1,3,0,0,0,0,2,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2414,"            result = -result;
",4,0,0,0,0,0,0,0,0,6,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2417,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2426,"        return atan(x, 0.0, false);
",0,0,0,1,2,1,4,0,0,5,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2440,"            return leftPlane ? copySign(Math.PI, xa) : xa;
",8,0,0,1,2,1,4,0,0,12,46,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2451,"            return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);
",16,3,0,3,6,1,0,0,0,20,69,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2584,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2593,"                if (x > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2594,"                    return y; // return +/- 0.0
",2,0,0,0,0,2,0,0,0,2,27,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2596,"                    return copySign(Math.PI, y);
",4,0,0,1,2,1,4,0,0,8,28,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2604,"                    return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2614,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2615,"                return Math.PI * F_1_4;
",6,1,0,0,0,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2618,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2619,"                return Math.PI * F_3_4;
",6,1,0,0,0,1,0,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2622,"            return Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2626,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2627,"                return -Math.PI * F_1_4;
",6,1,0,0,0,1,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2630,"            if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2631,"                return -Math.PI * F_3_4;
",6,1,0,0,0,1,0,0,0,8,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2634,"            return -Math.PI * F_1_2;
",6,1,0,0,0,1,0,0,0,8,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2638,"            if (y > 0 || 1 / y > 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2639,"                return 0d;
",0,0,0,0,0,1,0,0,0,0,10,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2642,"            if (y < 0 || 1 / y < 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2643,"                return -0d;
",0,0,0,0,0,1,0,0,0,1,11,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2649,"            if (y > 0.0 || 1 / y > 0.0) {
",4,4,0,1,3,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2650,"                return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2653,"            if (y < 0 || 1 / y < 0) {
",4,4,0,1,3,0,0,0,0,8,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2654,"                return -Math.PI;
",4,0,0,0,0,1,0,0,0,5,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2673,"            return atan(r, 0, x < 0);
",2,1,0,1,2,1,4,0,0,7,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2690,"            ra = copySign(0d, y);
",2,0,0,1,2,0,4,0,0,7,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2704,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2705,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2708,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2709,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2712,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2713,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2716,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2717,"          return -Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,6,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2720,"      if (x == 0.0) { // Matches +/- 0.0; return correct sign
",2,1,0,1,3,1,0,0,0,3,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2721,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2727,"      double temp = x * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2728,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2729,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2732,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2733,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2736,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2737,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2739,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2740,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2742,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2743,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2744,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2748,"      y = sqrt(za);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2749,"      temp = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2750,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2751,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2754,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2757,"      double dx = zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2760,"      double r = x/y;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2761,"      temp = r * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2762,"      double ra = r + temp - temp;
",8,2,0,0,0,0,0,0,0,10,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2763,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2765,"      rb += (x - ra*ya - ra*yb - rb*ya - rb*yb) / y;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2766,"      rb += -x * dx / y / y;  // Add in effect additional bits of sqrt.
",10,3,0,0,0,0,0,0,0,15,65,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2768,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2769,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2770,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2772,"      return atan(ra, rb, false);
",0,0,0,1,2,1,6,0,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2780,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2781,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2784,"      if (x > 1.0 || x < -1.0) {
",4,3,0,1,3,0,0,0,0,8,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2785,"          return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2788,"      if (x == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2789,"          return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2792,"      if (x == 1.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2793,"          return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2796,"      if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2797,"          return Math.PI/2.0;
",4,1,0,0,0,1,0,0,0,5,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2803,"      double temp = x * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2804,"      final double xa = x + temp - temp;
",8,2,0,0,0,1,0,0,0,11,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2805,"      final double xb = x - xa;
",6,1,0,0,0,1,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2808,"      double ya = xa*xa;
",6,1,0,0,0,0,0,0,0,7,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2809,"      double yb = xa*xb*2.0 + xb*xb;
",10,3,0,0,0,0,0,0,0,13,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2812,"      ya = -ya;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2813,"      yb = -yb;
",4,0,0,0,0,0,0,0,0,6,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2815,"      double za = 1.0 + ya;
",4,1,0,0,0,0,0,0,0,5,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2816,"      double zb = -(za - 1.0 - ya);
",6,1,0,1,2,0,0,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2818,"      temp = za + yb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2819,"      zb += -(temp - za - yb);
",8,1,0,1,2,0,0,0,0,11,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2820,"      za = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2823,"      double y = sqrt(za);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2824,"      temp = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2825,"      ya = y + temp - temp;
",8,2,0,0,0,0,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2826,"      yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2829,"      yb += (za - ya*ya - 2*ya*yb - yb*yb) / (2.0*y);
",18,8,0,2,4,0,0,0,0,27,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2832,"      yb += zb / (2.0*y);
",6,2,0,1,2,0,0,0,0,9,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2833,"      y = ya+yb;
",6,1,0,0,0,0,0,0,0,8,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2834,"      yb = -(y - ya - yb);
",8,1,0,1,2,0,0,0,0,11,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2837,"      double r = y/x;
",6,1,0,0,0,0,0,0,0,7,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2840,"      if (Double.isInfinite(r)) { // x is effectively zero
",0,0,0,2,5,0,6,0,0,6,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2841,"          return Math.PI/2; // so return the appropriate value
",4,1,0,0,0,2,0,0,0,5,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2844,"      double ra = doubleHighPart(r);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2845,"      double rb = r - ra;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2847,"      rb += (y - ra*xa - ra*xb - rb*xa - rb*xb) / x;  // Correct for rounding in division
",22,9,0,1,2,0,0,0,0,32,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2848,"      rb += yb / x;  // Add in effect additional bits of sqrt.
",6,1,0,0,0,0,0,0,0,8,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2850,"      temp = ra + rb;
",6,1,0,0,0,0,0,0,0,8,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2851,"      rb = -(temp - ra - rb);
",8,1,0,1,2,0,0,0,0,11,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2852,"      ra = temp;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2854,"      return atan(ra, rb, x<0);
",2,1,0,1,2,1,6,0,0,9,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2863,"      long inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2864,"      int exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,7,53,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2865,"      boolean subnormal = false;
",2,0,0,0,0,0,0,0,0,3,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2867,"      if (exponent == -1023) {
",2,1,0,1,3,0,0,0,0,4,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2868,"          if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2869,"              return x;
",2,0,0,0,0,1,0,0,0,2,9,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2873,"          subnormal = true;
",2,0,0,0,0,0,0,0,0,4,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2874,"          x *= 1.8014398509481984E16;  // 2^54
",2,0,0,0,0,0,0,0,0,3,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2875,"          inbits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,9,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2876,"          exponent = (int) ((inbits >> 52) & 0x7ff) - 1023;
",4,3,0,3,6,0,0,0,0,8,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2879,"      if (exponent == 1024) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2881,"          return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2885,"      int exp3 = exponent / 3;
",4,1,0,0,0,0,0,0,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2888,"      double p2 = Double.longBitsToDouble((inbits & 0x8000000000000000L) |
",4,2,0,1,3,0,4,0,0,10,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2892,"      final double mant = Double.longBitsToDouble((inbits & 0x000fffffffffffffL) | 0x3ff0000000000000L);
",4,2,0,2,4,1,4,0,0,11,98,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2895,"      double est = -0.010714690733195933;
",2,0,0,0,0,0,0,0,0,3,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2896,"      est = est * mant + 0.0875862700108075;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2897,"      est = est * mant + -0.3058015757857271;
",6,2,0,0,0,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2898,"      est = est * mant + 0.7249995199969751;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2899,"      est = est * mant + 0.5039018405998233;
",6,2,0,0,0,0,0,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2901,"      est *= CBRTTWO[exponent % 3 + 2];
",4,2,1,1,2,0,0,0,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2906,"      final double xs = x / (p2*p2*p2);
",10,2,0,1,2,1,0,0,0,13,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2907,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2908,"      est += (xs - est*est*est) / (3*est*est);
",14,4,0,2,4,0,0,0,0,19,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2911,"      double temp = est * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2912,"      double ya = est + temp - temp;
",8,2,0,0,0,0,0,0,0,10,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2913,"      double yb = est - ya;
",6,1,0,0,0,0,0,0,0,7,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2915,"      double za = ya * ya;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2916,"      double zb = ya * yb * 2.0 + yb * yb;
",10,3,0,0,0,0,0,0,0,13,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2917,"      temp = za * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2918,"      double temp2 = za + temp - temp;
",8,2,0,0,0,0,0,0,0,10,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2919,"      zb += za - temp2;
",6,1,0,0,0,0,0,0,0,8,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2920,"      za = temp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2922,"      zb = za * yb + ya * zb + zb * yb;
",14,5,0,0,0,0,0,0,0,20,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2923,"      za = za * ya;
",6,1,0,0,0,0,0,0,0,8,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2925,"      double na = xs - za;
",6,1,0,0,0,0,0,0,0,7,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2926,"      double nb = -(na - xs + za);
",8,2,0,1,2,0,0,0,0,11,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2927,"      nb -= zb;
",4,0,0,0,0,0,0,0,0,5,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2929,"      est += (na+nb)/(3*est*est);
",10,3,0,2,4,0,0,0,0,14,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2932,"      est *= p2;
",4,0,0,0,0,0,0,0,0,5,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2934,"      if (subnormal) {
",2,0,0,1,3,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2935,"          est *= 3.814697265625E-6;  // 2^-18
",2,0,0,0,0,0,0,0,0,3,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2938,"      return est;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2948,"        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign
",2,2,0,2,5,1,6,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2949,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2953,"        final double facta = 0.01745329052209854;
",2,0,0,0,0,1,0,0,0,3,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2954,"        final double factb = 1.997844754509471E-9;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2956,"        double xa = doubleHighPart(x);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2957,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2959,"        double result = xb * factb + xb * facta + xa * factb + xa * facta;
",18,7,0,0,0,0,0,0,0,25,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2960,"        if (result == 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2961,"            result = result * x; // ensure correct sign if calculation underflows
",6,1,0,0,0,0,0,0,0,8,69,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2963,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2973,"        if (Double.isInfinite(x) || x == 0.0) { // Matches +/- 0.0; return correct sign
",2,2,0,2,5,1,6,0,0,10,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2974,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2978,"        final double facta = 57.2957763671875;
",2,0,0,0,0,1,0,0,0,3,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2979,"        final double factb = 3.145894820876798E-6;
",2,0,0,0,0,1,0,0,0,3,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2981,"        double xa = doubleHighPart(x);
",2,0,0,1,2,0,4,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2982,"        double xb = x - xa;
",6,1,0,0,0,0,0,0,0,7,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2984,"        return xb * factb + xb * facta + xa * factb + xa * facta;
",16,7,0,0,0,1,0,0,0,23,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2993,"        return (x < 0) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3002,"        return (x < 0l) ? -x : x;
",6,1,0,1,2,1,0,0,0,8,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3011,"        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,64,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3029,"        if (Double.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3030,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3032,"        return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,72,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3041,"        if (Float.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3042,"            return Float.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3044,"        return abs(x - Float.intBitsToFloat(Float.floatToIntBits(x) ^ 1));
",2,2,0,3,6,1,12,0,0,16,66,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3061,"        if (Double.isNaN(d) || Double.isInfinite(d) || (d == 0)) {
",2,2,0,4,9,0,12,0,0,16,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3062,"            return d;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3064,"        if (n < -2098) {
",2,1,0,1,3,0,0,0,0,4,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3065,"            return (d > 0) ? 0.0 : -0.0;
",2,1,0,1,2,1,0,0,0,4,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3067,"        if (n > 2097) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3068,"            return (d > 0) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,69,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3072,"        final long bits = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3073,"        final long sign = bits & 0x8000000000000000L;
",4,1,0,0,0,1,0,0,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3074,"        int  exponent   = ((int) (bits >>> 52)) & 0x7ff;
",4,2,0,3,6,0,0,0,0,6,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3075,"        long mantissa   = bits & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,5,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3078,"        int scaledExponent = exponent + n;
",6,1,0,0,0,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3080,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3082,"            if (scaledExponent > 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3084,"                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3085,"            } else if (scaledExponent > -53) {
",2,1,0,1,4,0,0,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3089,"                mantissa = mantissa | (1L << 52);
",4,2,0,1,2,0,0,0,0,7,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3092,"                final long mostSignificantLostBit = mantissa & (1L << (-scaledExponent));
",6,2,0,2,4,1,0,0,0,10,73,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3093,"                mantissa = mantissa >>> (1 - scaledExponent);
",6,2,0,1,2,0,0,0,0,9,45,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3094,"                if (mostSignificantLostBit != 0) {
",2,1,0,1,3,0,0,0,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3096,"                    mantissa++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3098,"                return Double.longBitsToDouble(sign | mantissa);
",4,1,0,1,2,1,4,0,0,9,48,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3102,"                return (sign == 0L) ? 0.0 : -0.0;
",2,1,0,1,2,1,0,0,0,4,33,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3106,"            if (exponent == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3109,"                while ((mantissa >>> 52) != 1) {
",2,2,0,2,5,0,0,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3110,"                    mantissa = mantissa << 1;
",4,1,0,0,0,0,0,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3111,"                    --scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3113,"                ++scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3114,"                mantissa = mantissa & 0x000fffffffffffffL;
",4,1,0,0,0,0,0,0,0,6,42,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3116,"                if (scaledExponent < 2047) {
",2,1,0,1,3,0,0,0,0,3,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3117,"                    return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3119,"                    return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,74,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3122,"            } else if (scaledExponent < 2047) {
",2,1,0,1,4,0,0,0,0,3,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3123,"                return Double.longBitsToDouble(sign | (((long) scaledExponent) << 52) | mantissa);
",6,2,0,4,8,1,4,0,0,12,82,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3125,"                return (sign == 0L) ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,74,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3140,"        if ((n > -127) && (n < 128)) {
",4,3,0,3,7,0,0,0,0,8,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3141,"            return f * Float.intBitsToFloat((n + 127) << 23);
",4,3,0,2,4,1,4,0,0,11,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3145,"        if (Float.isNaN(f) || Float.isInfinite(f) || (f == 0f)) {
",2,2,0,4,9,0,12,0,0,16,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3146,"            return f;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3148,"        if (n < -277) {
",2,1,0,1,3,0,0,0,0,4,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3149,"            return (f > 0) ? 0.0f : -0.0f;
",2,1,0,1,2,1,0,0,0,4,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3151,"        if (n > 276) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3152,"            return (f > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,67,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3156,"        final int bits = Float.floatToIntBits(f);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3157,"        final int sign = bits & 0x80000000;
",4,1,0,0,0,1,0,0,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3158,"        int  exponent  = (bits >>> 23) & 0xff;
",4,2,0,1,2,0,0,0,0,6,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3159,"        int mantissa   = bits & 0x007fffff;
",4,1,0,0,0,0,0,0,0,5,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3162,"        int scaledExponent = exponent + n;
",6,1,0,0,0,0,0,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3164,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3166,"            if (scaledExponent > 0) {
",2,1,0,1,3,0,0,0,0,3,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3168,"                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3169,"            } else if (scaledExponent > -24) {
",2,1,0,1,4,0,0,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3173,"                mantissa = mantissa | (1 << 23);
",4,2,0,1,2,0,0,0,0,7,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3176,"                final int mostSignificantLostBit = mantissa & (1 << (-scaledExponent));
",6,2,0,2,4,1,0,0,0,10,71,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3177,"                mantissa = mantissa >>> (1 - scaledExponent);
",6,2,0,1,2,0,0,0,0,9,45,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3178,"                if (mostSignificantLostBit != 0) {
",2,1,0,1,3,0,0,0,0,3,34,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3180,"                    mantissa++;
",2,0,0,0,0,0,0,0,0,3,11,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3182,"                return Float.intBitsToFloat(sign | mantissa);
",4,1,0,1,2,1,4,0,0,9,45,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3186,"                return (sign == 0) ? 0.0f : -0.0f;
",2,1,0,1,2,1,0,0,0,4,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3190,"            if (exponent == 0) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3193,"                while ((mantissa >>> 23) != 1) {
",2,2,0,2,5,0,0,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3194,"                    mantissa = mantissa << 1;
",4,1,0,0,0,0,0,0,0,6,25,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3195,"                    --scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3197,"                ++scaledExponent;
",2,0,0,0,0,0,0,0,0,3,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3198,"                mantissa = mantissa & 0x007fffff;
",4,1,0,0,0,0,0,0,0,6,33,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3200,"                if (scaledExponent < 255) {
",2,1,0,1,3,0,0,0,0,3,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3201,"                    return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3203,"                    return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,71,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3206,"            } else if (scaledExponent < 255) {
",2,1,0,1,4,0,0,0,0,3,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3207,"                return Float.intBitsToFloat(sign | (scaledExponent << 23) | mantissa);
",6,2,0,2,4,1,4,0,0,12,70,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3209,"                return (sign == 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;
",10,1,0,1,2,1,0,0,0,11,71,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3249,"        if (Double.isNaN(d) || Double.isNaN(direction)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3250,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3251,"        } else if (d == direction) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3252,"            return direction;
",2,0,0,0,0,1,0,0,0,2,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3253,"        } else if (Double.isInfinite(d)) {
",0,0,0,2,6,0,6,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3254,"            return (d < 0) ? -Double.MAX_VALUE : Double.MAX_VALUE;
",10,1,0,1,2,1,0,0,0,12,54,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3255,"        } else if (d == 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3256,"            return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,62,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3261,"        final long bits = Double.doubleToLongBits(d);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3262,"        final long sign = bits & 0x8000000000000000L;
",4,1,0,0,0,1,0,0,0,6,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3263,"        if ((direction < d) ^ (sign == 0L)) {
",6,3,0,3,7,0,0,0,0,9,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3264,"            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) + 1));
",4,3,0,3,6,1,4,0,0,11,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3266,"            return Double.longBitsToDouble(sign | ((bits & 0x7fffffffffffffffL) - 1));
",4,3,0,3,6,1,4,0,0,11,74,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3305,"        if (Double.isNaN(f) || Double.isNaN(direction)) {
",0,1,0,3,7,0,12,0,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3306,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3307,"        } else if (f == direction) {
",4,1,0,1,4,0,0,0,0,5,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3308,"            return (float) direction;
",2,0,0,1,2,1,0,0,0,2,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3309,"        } else if (Float.isInfinite(f)) {
",0,0,0,2,6,0,6,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3310,"            return (f < 0f) ? -Float.MAX_VALUE : Float.MAX_VALUE;
",10,1,0,1,2,1,0,0,0,12,53,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3311,"        } else if (f == 0f) {
",2,1,0,1,4,0,0,0,0,3,21,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3312,"            return (direction < 0) ? -Float.MIN_VALUE : Float.MIN_VALUE;
",10,1,0,1,2,1,0,0,0,12,60,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3317,"        final int bits = Float.floatToIntBits(f);
",2,0,0,1,2,1,6,0,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3318,"        final int sign = bits & 0x80000000;
",4,1,0,0,0,1,0,0,0,6,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3319,"        if ((direction < f) ^ (sign == 0)) {
",6,3,0,3,7,0,0,0,0,9,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3320,"            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) + 1));
",4,3,0,3,6,1,4,0,0,11,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3322,"            return Float.intBitsToFloat(sign | ((bits & 0x7fffffff) - 1));
",4,3,0,3,6,1,4,0,0,11,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3335,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3339,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3344,"            y--;
",2,0,0,0,0,0,0,0,0,3,4,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3351,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3361,"        if (x != x) { // NaN
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3362,"            return x;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3365,"        y = floor(x);
",2,0,0,1,2,0,4,0,0,7,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3366,"        if (y == x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3367,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3370,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3372,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3373,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3376,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3384,"        double y = floor(x);
",2,0,0,1,2,0,4,0,0,6,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3385,"        double d = x - y;
",6,1,0,0,0,0,0,0,0,7,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3387,"        if (d > 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3388,"            if (y == -1.0) {
",2,1,0,1,3,0,0,0,0,4,16,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3389,"                return -0.0; // Preserve sign of operand
",0,0,0,0,0,1,0,0,0,1,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3391,"            return y+1.0;
",2,1,0,0,0,1,0,0,0,3,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3393,"        if (d < 0.5) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3394,"            return y;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3398,"        long z = (long) y;
",4,0,0,1,2,0,0,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3399,"        return (z & 1) == 0 ? y : y + 1.0;
",6,3,0,1,2,1,0,0,0,9,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3407,"        return (long) floor(x + 0.5);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3415,"        return (int) floor(x + 0.5f);
",2,1,0,2,4,1,2,0,0,5,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3433,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3442,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3443,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3445,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3446,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3449,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3450,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3454,"        int bits = Float.floatToRawIntBits(a);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3455,"        if (bits == 0x80000000) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3456,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3458,"        return b;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3467,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3468,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3470,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3471,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3474,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3475,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3479,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3480,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3481,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3483,"        return b;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3501,"        return (a <= b) ? b : a;
",8,1,0,1,2,1,0,0,0,9,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3510,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3511,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3513,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3514,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3517,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3518,"            return Float.NaN;
",4,0,0,0,0,1,0,0,0,4,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3522,"        int bits = Float.floatToRawIntBits(a);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3523,"        if (bits == 0x80000000) {
",2,1,0,1,3,0,0,0,0,3,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3524,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3526,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3535,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3536,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3538,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3539,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3542,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3543,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3547,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3548,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3549,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3551,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3570,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3572,"            return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3624,"        return StrictMath.IEEEremainder(dividend, divisor); // TODO provide our own implementation
",0,0,0,1,2,1,8,0,0,8,90,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3636,"        long m = Double.doubleToLongBits(magnitude);
",2,0,0,1,2,0,6,0,0,8,44,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3637,"        long s = Double.doubleToLongBits(sign);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3638,"        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
",8,7,0,3,7,0,0,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3639,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3641,"        return -magnitude; // flip sign
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3653,"        int m = Float.floatToIntBits(magnitude);
",2,0,0,1,2,0,6,0,0,8,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3654,"        int s = Float.floatToIntBits(sign);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3655,"        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK
",8,7,0,3,7,0,0,0,0,15,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3656,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3658,"        return -magnitude; // flip sign
",2,0,0,0,0,1,0,0,0,3,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3684,"        return ((Float.floatToIntBits(f) >>> 23) & 0xff) - 127;
",0,3,0,3,6,1,6,0,0,9,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3693,"        PrintStream out = System.out;
",6,0,0,0,0,0,0,2,0,8,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3694,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_A"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_A);
",4,0,0,1,2,0,8,0,0,13,96,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3695,"        FastMathCalc.printarray(out, ""EXP_INT_TABLE_B"", EXP_INT_TABLE_LEN, ExpIntTable.EXP_INT_TABLE_B);
",4,0,0,1,2,0,8,0,0,13,96,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3696,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_A"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_A);
",4,0,0,1,2,0,8,0,0,13,100,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3697,"        FastMathCalc.printarray(out, ""EXP_FRAC_TABLE_B"", EXP_FRAC_TABLE_LEN, ExpFracTable.EXP_FRAC_TABLE_B);
",4,0,0,1,2,0,8,0,0,13,100,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3698,"        FastMathCalc.printarray(out, ""LN_MANT"",LN_MANT_LEN, lnMant.LN_MANT);
",4,0,0,1,2,0,8,0,0,13,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3699,"        FastMathCalc.printarray(out, ""SINE_TABLE_A"", SINE_TABLE_LEN, SINE_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,75,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3700,"        FastMathCalc.printarray(out, ""SINE_TABLE_B"", SINE_TABLE_LEN, SINE_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,75,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3701,"        FastMathCalc.printarray(out, ""COSINE_TABLE_A"", SINE_TABLE_LEN, COSINE_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3702,"        FastMathCalc.printarray(out, ""COSINE_TABLE_B"", SINE_TABLE_LEN, COSINE_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,79,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3703,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_A"", SINE_TABLE_LEN, TANGENT_TABLE_A);
",0,0,0,1,2,0,10,0,0,11,81,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3704,"        FastMathCalc.printarray(out, ""TANGENT_TABLE_B"", SINE_TABLE_LEN, TANGENT_TABLE_B);
",0,0,0,1,2,0,10,0,0,11,81,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3705,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,46,"    private MathArrays() {}
",2,0,0,2,4,1,0,0,0,3,23,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,56,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,57,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,58,"            sum += FastMath.abs(p1[i] - p2[i]);
",2,1,1,3,6,0,4,0,0,16,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,60,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,71,"      int sum = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,72,"      for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,73,"          sum += FastMath.abs(p1[i] - p2[i]);
",2,1,1,3,6,0,4,0,0,16,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,75,"      return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,86,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,87,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,88,"            final double dp = p1[i] - p2[i];
",2,1,1,2,4,1,0,0,0,12,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,89,"            sum += dp * dp;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,91,"        return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,102,"      double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,103,"      for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,104,"          final double dp = p1[i] - p2[i];
",2,1,1,2,4,1,0,0,0,12,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,105,"          sum += dp * dp;
",6,1,0,0,0,0,0,0,0,8,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,107,"      return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,118,"        double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,119,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,120,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));
",2,1,1,4,8,0,10,0,0,22,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,122,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,133,"        int max = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,134,"        for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,135,"            max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));
",2,1,1,4,8,0,10,0,0,22,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,137,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,162,"        T previous = val[0];
",2,0,1,1,2,0,0,2,0,6,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,163,"        final int max = val.length;
",6,0,0,0,0,1,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,164,"        for (int i = 1; i < max; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,166,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,168,"                comp = previous.compareTo(val[i]);
",2,0,1,2,4,0,4,0,0,11,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,169,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,170,"                    if (comp >= 0) {
",2,1,0,1,3,0,0,0,0,3,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,171,"                        return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,174,"                    if (comp > 0) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,175,"                        return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,180,"                comp = val[i].compareTo(previous);
",2,0,1,2,4,0,4,0,0,11,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,181,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,182,"                    if (comp >= 0) {
",2,1,0,1,3,0,0,0,0,3,16,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,183,"                        return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,186,"                    if (comp > 0) {
",2,1,0,1,3,0,0,0,0,3,15,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,187,"                       return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,193,"                throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,196,"            previous = val[i];
",2,0,1,1,2,0,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,198,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,212,"        return checkOrder(val, dir, strict, false);
",0,0,0,1,2,1,8,0,0,9,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,228,"        double previous = val[0];
",2,0,1,1,2,0,0,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,229,"        final int max = val.length;
",6,0,0,0,0,1,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,233,"        for (index = 1; index < max; index++) {
",8,1,0,1,3,0,0,0,0,11,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,234,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,236,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,237,"                    if (val[index] <= previous) {
",2,1,1,2,5,0,0,0,0,7,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,238,"                        break ITEM;
",2,0,0,0,0,0,0,0,0,2,11,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,241,"                    if (val[index] < previous) {
",2,1,1,2,5,0,0,0,0,7,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,242,"                        break ITEM;
",2,0,0,0,0,0,0,0,0,2,11,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,247,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,248,"                    if (val[index] >= previous) {
",2,1,1,2,5,0,0,0,0,7,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,249,"                        break ITEM;
",2,0,0,0,0,0,0,0,0,2,11,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,252,"                    if (val[index] > previous) {
",2,1,1,2,5,0,0,0,0,7,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,253,"                        break ITEM;
",2,0,0,0,0,0,0,0,0,2,11,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,259,"                throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,262,"            previous = val[index];
",2,0,1,1,2,0,0,0,0,7,22,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,265,"        if (index == max) {
",4,1,0,1,3,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,267,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,271,"        if (abort) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,272,"            throw new NonMonotonicSequenceException(val[index], previous, index, dir, strict);
",8,0,1,2,4,0,0,2,0,14,82,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,274,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,289,"        checkOrder(val, dir, strict, true);
",0,0,0,1,2,0,8,0,0,9,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,290,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,300,"        checkOrder(val, OrderDirection.INCREASING, true);
",4,0,0,1,2,0,4,0,0,9,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,301,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,364,"        double rdwarf = 3.834e-20;
",2,0,0,0,0,0,0,0,0,2,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,365,"        double rgiant = 1.304e+19;
",2,0,0,0,0,0,0,0,0,2,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,366,"        double s1 = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,367,"        double s2 = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,368,"        double s3 = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,369,"        double x1max = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,370,"        double x3max = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,371,"        double floatn = v.length;
",6,0,0,0,0,0,0,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,372,"        double agiant = rgiant / floatn;
",6,1,0,0,0,0,0,0,0,7,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,373,"        for (int i = 0; i < v.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,374,"            double xabs = Math.abs(v[i]);
",2,0,1,2,4,0,4,0,0,10,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,375,"            if (xabs < rdwarf || xabs > agiant) {
",8,3,0,1,3,0,0,0,0,11,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,376,"                if (xabs > rdwarf) {
",4,1,0,1,3,0,0,0,0,5,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,377,"                    if (xabs > x1max) {
",4,1,0,1,3,0,0,0,0,5,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,378,"                        double r = x1max / xabs;
",6,1,0,0,0,0,0,0,0,7,24,13,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,379,"                        s1= 1 + s1 * r * r;
",8,2,0,0,0,0,0,0,0,11,19,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,380,"                        x1max = xabs;
",4,0,0,0,0,0,0,0,0,5,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,381,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,382,"                        double r = xabs / x1max;
",6,1,0,0,0,0,0,0,0,7,24,13,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,383,"                        s1 += r * r;
",6,1,0,0,0,0,0,0,0,8,12,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,384,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,386,"                    if (xabs > x3max) {
",4,1,0,1,3,0,0,0,0,5,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,387,"                        double r = x3max / xabs;
",6,1,0,0,0,0,0,0,0,7,24,13,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,388,"                        s3= 1 + s3 * r * r;
",8,2,0,0,0,0,0,0,0,11,19,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,389,"                        x3max = xabs;
",4,0,0,0,0,0,0,0,0,5,13,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,390,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,391,"                        if (xabs != 0) {
",2,1,0,1,3,0,0,0,0,3,16,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,392,"                            double r = xabs / x3max;
",6,1,0,0,0,0,0,0,0,7,24,15,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,393,"                            s3 += r * r;
",6,1,0,0,0,0,0,0,0,8,12,14,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,394,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,398,"                s2 += xabs * xabs;
",6,1,0,0,0,0,0,0,0,8,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,402,"        if (s1 != 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,403,"            norm = x1max * Math.sqrt(s1 + (s2 / x1max) / x1max);
",12,4,0,2,4,0,4,0,0,21,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,405,"            if (s2 == 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,406,"                norm = x3max * Math.sqrt(s3);
",4,1,0,1,2,0,6,0,0,12,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,408,"                if (s2 >= x3max) {
",4,1,0,1,3,0,0,0,0,5,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,409,"                    norm = Math.sqrt(s2 * (1 + (x3max / s2) * (x3max * s3)));
",12,5,0,4,8,0,4,0,0,22,57,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,411,"                    norm = Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)));
",12,4,0,4,8,0,4,0,0,21,56,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,415,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,436,"        sortInPlace(x, OrderDirection.INCREASING, yList);
",4,0,0,1,2,0,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,437,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,459,"        if (x == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,460,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,463,"        final int len = x.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,464,"        final List<Pair<Double, double[]>> list
",2,0,0,1,2,1,0,6,0,9,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,467,"        final int yListLen = yList.length;
",6,0,0,0,0,1,0,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,468,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,469,"            final double[] yValues = new double[yListLen];
",2,0,1,2,4,1,0,0,0,5,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,470,"            for (int j = 0; j < yListLen; j++) {
",8,1,0,1,3,0,0,0,0,10,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,471,"                double[] y = yList[j];
",2,0,1,2,4,0,0,0,0,6,22,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,472,"                if (y == null) {
",2,1,0,1,3,0,0,0,0,3,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,473,"                    throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,12,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,475,"                if (y.length != len) {
",6,1,0,1,3,0,0,0,0,7,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,476,"                    throw new DimensionMismatchException(y.length, len);
",6,0,0,1,2,0,0,2,0,8,52,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,478,"                yValues[j] = y[i];
",0,0,1,2,4,0,0,0,0,9,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,480,"            list.add(new Pair<Double, double[]>(x[i], yValues));
",2,0,1,4,8,0,4,4,0,14,52,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,483,"        final Comparator<Pair<Double, double[]>> comp
",2,0,0,1,2,1,0,6,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,503,"        Collections.sort(list, comp);
",0,0,0,1,2,0,8,0,0,8,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,505,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,506,"            final Pair<Double, double[]> e = list.get(i);
",2,0,0,2,4,1,6,4,0,13,45,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,507,"            x[i] = e.getKey();
",0,0,1,2,4,0,4,0,0,9,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,508,"            final double[] yValues = e.getValue();
",2,0,0,2,4,1,4,0,0,7,38,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,509,"            for (int j = 0; j < yListLen; j++) {
",8,1,0,1,3,0,0,0,0,10,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,510,"                yList[j][i] = yValues[j];
",0,0,1,3,6,0,0,0,0,11,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,513,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,522,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,532,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,545,"         final int[] output = new int[len];
",2,0,1,2,4,1,0,0,0,5,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,546,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,547,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,560,"         final double[] output = new double[len];
",2,0,1,2,4,1,0,0,0,5,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,562,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,582,"        final int len = a.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,583,"        if (len != b.length) {
",6,1,0,1,3,0,0,0,0,7,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,584,"            throw new DimensionMismatchException(len, b.length);
",6,0,0,1,2,0,0,2,0,8,52,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,587,"        final double[] prodHigh = new double[len];
",2,0,1,2,4,1,0,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,588,"        double prodLowSum = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,590,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,591,"            final double ai = a[i];
",2,0,1,1,2,1,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,592,"            final double ca = SPLIT_FACTOR * ai;
",6,1,0,0,0,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,593,"            final double aHigh = ca - (ca - ai);
",8,2,0,1,2,1,0,0,0,11,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,594,"            final double aLow = ai - aHigh;
",6,1,0,0,0,1,0,0,0,8,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,596,"            final double bi = b[i];
",2,0,1,1,2,1,0,0,0,7,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,597,"            final double cb = SPLIT_FACTOR * bi;
",6,1,0,0,0,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,598,"            final double bHigh = cb - (cb - bi);
",8,2,0,1,2,1,0,0,0,11,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,599,"            final double bLow = bi - bHigh;
",6,1,0,0,0,1,0,0,0,8,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,600,"            prodHigh[i] = ai * bi;
",4,1,1,1,2,0,0,0,0,10,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,601,"            final double prodLow = aLow * bLow - (((prodHigh[i] -
",6,5,1,1,5,1,0,0,0,16,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,605,"            prodLowSum += prodLow;
",4,0,0,0,0,0,0,0,0,5,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,609,"        final double prodHighCur = prodHigh[0];
",2,0,1,1,2,1,0,0,0,5,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,610,"        double prodHighNext = prodHigh[1];
",2,0,1,1,2,0,0,0,0,4,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,611,"        double sHighPrev = prodHighCur + prodHighNext;
",6,1,0,0,0,0,0,0,0,7,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,612,"        double sPrime = sHighPrev - prodHighNext;
",6,1,0,0,0,0,0,0,0,7,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,613,"        double sLowSum = (prodHighNext - (sHighPrev - sPrime)) + (prodHighCur - sPrime);
",12,4,0,3,6,0,0,0,0,16,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,615,"        final int lenMinusOne = len - 1;
",4,1,0,0,0,1,0,0,0,6,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,616,"        for (int i = 1; i < lenMinusOne; i++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,617,"            prodHighNext = prodHigh[i + 1];
",4,1,1,1,2,0,0,0,0,8,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,618,"            final double sHighCur = sHighPrev + prodHighNext;
",6,1,0,0,0,1,0,0,0,8,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,619,"            sPrime = sHighCur - prodHighNext;
",6,1,0,0,0,0,0,0,0,8,33,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,620,"            sLowSum += (prodHighNext - (sHighCur - sPrime)) + (sHighPrev - sPrime);
",12,4,0,3,6,0,0,0,0,17,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,621,"            sHighPrev = sHighCur;
",4,0,0,0,0,0,0,0,0,5,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,624,"        double result = sHighPrev + (prodLowSum + sLowSum);
",8,2,0,1,2,0,0,0,0,10,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,626,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,629,"            result = 0;
",2,0,0,0,0,0,0,0,0,3,11,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,630,"            for (int i = 0; i < len; ++i) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,631,"                result += a[i] * b[i];
",2,1,1,2,4,0,0,0,0,12,22,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,635,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,709,"            result = a1 * b1 + a2 * b2;
",10,3,0,0,0,0,0,0,0,14,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,806,"            result = a1 * b1 + a2 * b2 + a3 * b3;
",14,5,0,0,0,0,0,0,0,20,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,856,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,857,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,858,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,859,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,860,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,861,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,864,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,865,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,868,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,869,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,870,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,871,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,872,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,873,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,876,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,877,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,880,"        final double ca3        = SPLIT_FACTOR * a3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,881,"        final double a3High     = ca3 - (ca3 - a3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,882,"        final double a3Low      = a3 - a3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,883,"        final double cb3        = SPLIT_FACTOR * b3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,884,"        final double b3High     = cb3 - (cb3 - b3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,885,"        final double b3Low      = b3 - b3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,888,"        final double prod3High  = a3 * b3;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,889,"        final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,892,"        final double ca4        = SPLIT_FACTOR * a4;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,893,"        final double a4High     = ca4 - (ca4 - a4);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,894,"        final double a4Low      = a4 - a4High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,895,"        final double cb4        = SPLIT_FACTOR * b4;
",6,1,0,0,0,1,0,0,0,8,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,896,"        final double b4High     = cb4 - (cb4 - b4);
",8,2,0,1,2,1,0,0,0,11,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,897,"        final double b4Low      = b4 - b4High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,900,"        final double prod4High  = a4 * b4;
",6,1,0,0,0,1,0,0,0,8,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,901,"        final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,904,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,905,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,906,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,909,"        final double s123High   = s12High + prod3High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,910,"        final double s123Prime  = s123High - prod3High;
",6,1,0,0,0,1,0,0,0,8,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,911,"        final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);
",12,4,0,3,6,1,0,0,0,17,87,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,914,"        final double s1234High  = s123High + prod4High;
",6,1,0,0,0,1,0,0,0,8,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,915,"        final double s1234Prime = s1234High - prod4High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,916,"        final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);
",12,4,0,3,6,1,0,0,0,17,91,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,920,"        double result = s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);
",18,2,0,1,2,0,0,0,0,20,102,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,922,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,925,"            result = a1 * b1 + a2 * b2 + a3 * b3 + a4 * b4;
",18,7,0,0,0,0,0,0,0,26,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,928,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,942,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,943,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,945,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,946,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,948,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,949,"            if (!Precision.equals(x[i], y[i])) {
",0,0,1,4,9,0,4,0,0,13,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,950,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,953,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,968,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,969,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,971,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,972,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,974,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,975,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {
",0,0,1,4,9,0,4,0,0,13,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,976,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,979,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,993,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,994,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,996,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,997,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,999,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1000,"            if (!Precision.equals(x[i], y[i])) {
",0,0,1,4,9,0,4,0,0,13,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1001,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1004,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1019,"        if ((x == null) || (y == null)) {
",4,3,0,3,7,0,0,0,0,7,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1020,"            return !((x == null) ^ (y == null));
",4,3,0,3,6,1,0,0,0,8,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1022,"        if (x.length != y.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1023,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1025,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1026,"            if (!Precision.equalsIncludingNaN(x[i], y[i])) {
",0,0,1,4,9,0,4,0,0,13,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1027,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1030,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1056,"         if (Double.isInfinite(normalizedSum)) {
",0,0,0,2,5,0,6,0,0,6,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1057,"             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);
",4,0,0,1,2,0,0,2,0,6,76,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1059,"         if (Double.isNaN(normalizedSum)) {
",0,0,0,2,5,0,6,0,0,6,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1060,"             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);
",4,0,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1062,"         double sum = 0d;
",2,0,0,0,0,0,0,0,0,2,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1063,"         final int len = values.length;
",6,0,0,0,0,1,0,0,0,7,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1064,"         double[] out = new double[len];
",2,0,1,2,4,0,0,0,0,4,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1065,"         for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1066,"             if (Double.isInfinite(values[i])) {
",0,0,1,3,7,0,4,0,0,8,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1067,"                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);
",6,0,1,2,4,0,0,2,0,12,94,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1069,"             if (!Double.isNaN(values[i])) {
",0,0,1,3,7,0,4,0,0,9,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1070,"                 sum += values[i];
",2,0,1,1,2,0,0,0,0,7,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1073,"         if (sum == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1074,"             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);
",4,0,0,1,2,0,0,2,0,6,71,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1076,"         for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1077,"             if (Double.isNaN(values[i])) {
",0,0,1,3,7,0,4,0,0,8,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1078,"                 out[i] = Double.NaN;
",4,0,1,1,2,0,0,0,0,9,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1080,"                 out[i] = values[i] * normalizedSum / sum;
",4,2,1,2,4,0,0,0,0,15,41,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,1083,"         return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,166,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3708,"    private static class ExpIntTable {
",2,0,0,0,1,2,0,0,0,4,34,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3740,"                EXP_INT_TABLE_A = FastMathLiteralArrays.loadExpIntA();
",2,0,0,1,2,0,4,0,0,7,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3741,"                EXP_INT_TABLE_B = FastMathLiteralArrays.loadExpIntB();
",2,0,0,1,2,0,4,0,0,7,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3743,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,76,"    private Precision() {}
",2,0,0,2,4,1,0,0,0,3,22,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,89,"        if (equals(x, y, eps)) {
",0,0,0,2,5,0,8,0,0,8,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,90,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,91,"        } else if (x < y) {
",4,1,0,1,4,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,92,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,94,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,115,"        if (equals(x, y, maxUlps)) {
",0,0,0,2,5,0,8,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,116,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,117,"        } else if (x < y) {
",4,1,0,1,4,0,0,0,0,5,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,118,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,120,"        return 1;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,132,"        return equals(x, y, 1);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,145,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, 1);
",0,2,0,4,8,1,18,0,0,20,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,159,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;
",6,3,0,2,4,1,10,0,0,19,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,174,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);
",6,3,0,3,6,1,10,0,0,19,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,196,"        int xInt = Float.floatToIntBits(x);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,197,"        int yInt = Float.floatToIntBits(y);
",2,0,0,1,2,0,6,0,0,8,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,200,"        if (xInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,201,"            xInt = SGN_MASK_FLOAT - xInt;
",6,1,0,0,0,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,203,"        if (yInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,204,"            yInt = SGN_MASK_FLOAT - yInt;
",6,1,0,0,0,0,0,0,0,8,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,207,"        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
",8,2,0,1,2,1,4,0,0,15,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,209,"        return isEqual && !Float.isNaN(x) && !Float.isNaN(y);
",2,1,0,2,4,1,12,0,0,17,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,225,"        return (Float.isNaN(x) && Float.isNaN(y)) || equals(x, y, maxUlps);
",0,2,0,4,8,1,20,0,0,22,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,237,"        return equals(x, y, 1);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,250,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, 1);
",0,2,0,4,8,1,18,0,0,20,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,265,"        return equals(x, y, 1) || FastMath.abs(y - x) <= eps;
",6,3,0,2,4,1,10,0,0,19,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,280,"        return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);
",6,3,0,3,6,1,10,0,0,19,64,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,301,"        long xInt = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,302,"        long yInt = Double.doubleToLongBits(y);
",2,0,0,1,2,0,6,0,0,8,39,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,305,"        if (xInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,306,"            xInt = SGN_MASK - xInt;
",6,1,0,0,0,0,0,0,0,8,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,308,"        if (yInt < 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,309,"            yInt = SGN_MASK - yInt;
",6,1,0,0,0,0,0,0,0,8,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,312,"        final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
",8,2,0,1,2,1,4,0,0,15,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,314,"        return isEqual && !Double.isNaN(x) && !Double.isNaN(y);
",2,1,0,2,4,1,12,0,0,17,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,330,"        return (Double.isNaN(x) && Double.isNaN(y)) || equals(x, y, maxUlps);
",0,2,0,4,8,1,20,0,0,22,69,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,343,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);
",4,0,0,1,2,1,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,365,"            return (new BigDecimal
",0,0,0,0,1,1,0,2,0,2,22,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,369,"        } catch (NumberFormatException ex) {
",2,0,0,1,4,0,0,2,0,4,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,370,"            if (Double.isInfinite(x)) {
",0,0,0,2,5,0,6,0,0,6,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,371,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,373,"                return Double.NaN;
",4,0,0,0,0,1,0,0,0,4,18,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,388,"        return round(x, scale, BigDecimal.ROUND_HALF_UP);
",4,0,0,1,2,1,6,0,0,10,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,403,"        final float sign = FastMath.copySign(1f, x);
",2,0,0,1,2,1,6,0,0,9,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,404,"        final float factor = (float) FastMath.pow(10.0f, scale) * sign;
",4,1,0,2,4,1,6,0,0,12,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,405,"        return (float) roundUnscaled(x * factor, sign, roundingMethod) / factor;
",6,2,0,2,4,1,6,0,0,14,72,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,423,"        switch (roundingMethod) {
",2,0,0,1,3,0,0,0,0,2,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,425,"            if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,426,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,428,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,430,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,432,"            unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,433,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,435,"            if (sign == -1) {
",2,1,0,1,3,0,0,0,0,4,17,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,436,"                unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,81,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,438,"                unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,440,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,442,"            unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);
",6,0,0,1,2,0,6,0,0,13,66,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,443,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,444,"            if (fraction > 0.5) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,445,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,447,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,449,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,452,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,453,"            if (fraction > 0.5) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,454,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,455,"            } else if (fraction < 0.5) {
",2,1,0,1,4,0,0,0,0,3,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,456,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,459,"                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math
",0,3,0,1,4,0,12,0,0,15,57,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,461,"                    unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,463,"                    unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,466,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,469,"            unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);
",6,0,0,1,2,0,6,0,0,13,66,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,470,"            double fraction = unscaled - FastMath.floor(unscaled);
",4,1,0,1,2,0,6,0,0,11,54,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,471,"            if (fraction >= 0.5) {
",2,1,0,1,3,0,0,0,0,3,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,472,"                unscaled = FastMath.ceil(unscaled);
",2,0,0,1,2,0,6,0,0,9,35,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,474,"                unscaled = FastMath.floor(unscaled);
",2,0,0,1,2,0,6,0,0,9,36,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,476,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,479,"            if (unscaled != FastMath.floor(unscaled)) {
",2,1,0,2,5,0,6,0,0,9,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,480,"                throw new MathArithmeticException();
",0,0,0,1,2,0,0,2,0,2,36,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,484,"            unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));
",6,0,0,2,4,0,10,0,0,17,82,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,485,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,487,"            throw new MathIllegalArgumentException(LocalizedFormats.INVALID_ROUNDING_METHOD,
",4,0,0,0,1,0,0,2,0,6,80,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,498,"        return unscaled;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/Precision,32,518,"        return x + originalDelta - x;
",6,2,0,0,0,1,0,0,0,8,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,47,"    private MathUtils() {}
",2,0,0,2,4,1,0,0,0,3,22,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,57,"        return new Double(value).hashCode();
",2,0,0,2,4,1,2,2,0,6,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,68,"        return Arrays.hashCode(value);
",0,0,0,1,2,1,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,113,"        final double p = FastMath.abs(period);
",2,0,0,1,2,1,6,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,114,"        return a - p * FastMath.floor((a - offset) / p) - offset;
",12,5,0,2,4,1,4,0,0,21,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,128,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,130,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,131,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,133,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,135,"            return (byte) -magnitude; // Flip sign.
",2,0,0,1,2,1,0,0,0,3,39,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,150,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,152,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,153,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,155,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,157,"            return (short) -magnitude; // Flip sign.
",2,0,0,1,2,1,0,0,0,3,40,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,172,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,174,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,175,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,177,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,179,"            return -magnitude; // Flip sign.
",2,0,0,0,0,1,0,0,0,3,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,194,"        if ((magnitude >= 0 && sign >= 0) ||
",4,4,0,1,3,0,0,0,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,196,"            return magnitude;
",2,0,0,0,0,1,0,0,0,2,17,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,197,"        } else if (sign >= 0 &&
",2,2,0,0,2,0,0,0,0,4,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,199,"            throw new MathArithmeticException(LocalizedFormats.OVERFLOW);
",4,0,0,1,2,0,0,2,0,6,61,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,201,"            return -magnitude; // Flip sign.
",2,0,0,0,0,1,0,0,0,3,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,212,"        if (Double.isInfinite(x) || Double.isNaN(x)) {
",0,1,0,3,7,0,12,0,0,13,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,213,"            throw new NotFiniteNumberException(x);
",2,0,0,1,2,0,0,2,0,4,38,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,215,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,225,"        for (int i = 0; i < val.length; i++) {
",10,1,0,1,3,0,0,0,0,12,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,226,"            final double x = val[i];
",2,0,1,1,2,1,0,0,0,7,24,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,227,"            if (Double.isInfinite(x) || Double.isNaN(x)) {
",0,1,0,3,7,0,12,0,0,13,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,228,"                throw new NotFiniteNumberException(LocalizedFormats.ARRAY_ELEMENT, x, i);
",8,0,0,1,2,0,0,2,0,10,73,9,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,231,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,244,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,245,"            throw new NullArgumentException(pattern, args);
",4,0,0,1,2,0,0,2,0,6,47,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,247,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,257,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,258,"            throw new NullArgumentException();
",0,0,0,1,2,0,0,2,0,2,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathUtils,32,260,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,484,"            = new Comparator<Pair<Double, double[]>>() {
",0,0,0,2,5,0,0,6,0,6,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,488,"                switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,490,"                    val = o1.getKey().compareTo(o2.getKey());
",2,0,0,3,6,0,10,0,0,13,41,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,491,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,493,"                    val = o2.getKey().compareTo(o1.getKey());
",2,0,0,3,6,0,10,0,0,13,41,11,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,494,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,497,"                    throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,499,"                return val;
",2,0,0,0,0,1,0,0,0,2,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3747,"    private static class ExpFracTable {
",2,0,0,0,1,2,0,0,0,4,35,2,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3773,"                EXP_FRAC_TABLE_A = FastMathLiteralArrays.loadExpFracA();
",2,0,0,1,2,0,4,0,0,7,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3774,"                EXP_FRAC_TABLE_B = FastMathLiteralArrays.loadExpFracB();
",2,0,0,1,2,0,4,0,0,7,56,7,0.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,3776,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,392,"            if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,393,"                return true;
",0,0,0,0,0,1,0,0,0,1,12,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,394,"            } else if (other instanceof ComparableSegment) {
",2,0,0,1,4,0,0,2,0,4,48,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,395,"                return compareTo((ComparableSegment) other) == 0;
",2,1,0,2,4,1,2,2,0,7,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,397,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,404,"            return getStart().hashCode() ^ getEnd().hashCode() ^
",0,1,0,4,8,1,8,0,0,9,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Segment,32,64,"        return line;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,79,"    public Vector2D(double[] v) throws DimensionMismatchException {
",6,0,0,2,5,1,0,0,0,7,63,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,80,"        if (v.length != 2) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,81,"            throw new DimensionMismatchException(v.length, 2);
",4,0,0,1,2,0,0,2,0,6,50,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,83,"        this.x = v[0];
",2,0,1,1,2,0,0,0,0,5,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,84,"        this.y = v[1];
",2,0,1,1,2,0,0,0,0,5,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,85,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,93,"    public Vector2D(double a, Vector2D u) {
",6,0,0,1,3,1,0,2,0,9,39,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,94,"        this.x = a * u.x;
",8,1,0,0,0,0,0,0,0,10,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,95,"        this.y = a * u.y;
",8,1,0,0,0,0,0,0,0,10,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,96,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,106,"    public Vector2D(double a1, Vector2D u1, double a2, Vector2D u2) {
",10,0,0,1,3,1,0,4,0,15,65,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,107,"        this.x = a1 * u1.x + a2 * u2.x;
",14,3,0,0,0,0,0,0,0,18,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,108,"        this.y = a1 * u1.y + a2 * u2.y;
",14,3,0,0,0,0,0,0,0,18,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,109,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,122,"                   double a3, Vector2D u3) {
",4,0,0,0,2,0,0,2,0,6,25,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,123,"        this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x;
",20,5,0,0,0,0,0,0,0,26,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,124,"        this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y;
",20,5,0,0,0,0,0,0,0,26,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,125,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,140,"                   double a3, Vector2D u3, double a4, Vector2D u4) {
",8,0,0,0,2,0,0,4,0,12,49,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,141,"        this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x + a4 * u4.x;
",26,7,0,0,0,0,0,0,0,34,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,142,"        this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y + a4 * u4.y;
",26,7,0,0,0,0,0,0,0,34,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,143,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,166,"        return new double[] { x, y };
",4,0,0,2,4,1,0,0,0,4,29,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,171,"        return Euclidean2D.getInstance();
",0,0,0,1,2,1,4,0,0,4,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,176,"        return ZERO;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,181,"        return FastMath.abs(x) + FastMath.abs(y);
",0,1,0,2,4,1,12,0,0,13,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,186,"        return FastMath.sqrt (x * x + y * y);
",8,3,0,1,2,1,4,0,0,15,37,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,191,"        return x * x + y * y;
",8,3,0,0,0,1,0,0,0,11,21,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,196,"        return FastMath.max(FastMath.abs(x), FastMath.abs(y));
",0,0,0,3,6,1,16,0,0,16,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,201,"        Vector2D v2 = (Vector2D) v;
",4,0,0,1,2,0,0,4,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,202,"        return new Vector2D(x + v2.getX(), y + v2.getY());
",4,2,0,3,6,1,8,2,0,16,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,207,"        Vector2D v2 = (Vector2D) v;
",4,0,0,1,2,0,0,4,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,208,"        return new Vector2D(x + factor * v2.getX(), y + factor * v2.getY());
",8,4,0,3,6,1,8,2,0,22,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,213,"        Vector2D p3 = (Vector2D) p;
",4,0,0,1,2,0,0,4,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,214,"        return new Vector2D(x - p3.x, y - p3.y);
",12,2,0,1,2,1,0,2,0,16,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,219,"        Vector2D v2 = (Vector2D) v;
",4,0,0,1,2,0,0,4,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,220,"        return new Vector2D(x - factor * v2.getX(), y - factor * v2.getY());
",8,4,0,3,6,1,8,2,0,22,68,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,225,"        double s = getNorm();
",2,0,0,1,2,0,2,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,226,"        if (s == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,227,"            throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
",4,0,0,1,2,0,0,2,0,6,88,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,229,"        return scalarMultiply(1 / s);
",2,1,0,1,2,1,2,0,0,5,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,233,"        return new Vector2D(-x, -y);
",4,0,0,1,2,1,0,2,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,238,"        return new Vector2D(a * x, a * y);
",8,2,0,1,2,1,0,2,0,12,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,243,"        return Double.isNaN(x) || Double.isNaN(y);
",0,1,0,2,4,1,12,0,0,13,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,248,"        return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y));
",0,2,0,4,8,1,14,0,0,17,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,253,"        Vector2D p3 = (Vector2D) p;
",4,0,0,1,2,0,0,4,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,254,"        final double dx = FastMath.abs(p3.x - x);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,255,"        final double dy = FastMath.abs(p3.y - y);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,256,"        return dx + dy;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,269,"        Vector2D p3 = (Vector2D) p;
",4,0,0,1,2,0,0,4,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,270,"        final double dx = FastMath.abs(p3.x - x);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,271,"        final double dy = FastMath.abs(p3.y - y);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,272,"        return FastMath.max(dx, dy);
",0,0,0,1,2,1,8,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,277,"        Vector2D p3 = (Vector2D) p;
",4,0,0,1,2,0,0,4,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,278,"        final double dx = p3.x - x;
",8,1,0,0,0,1,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,279,"        final double dy = p3.y - y;
",8,1,0,0,0,1,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,280,"        return dx * dx + dy * dy;
",8,3,0,0,0,1,0,0,0,11,25,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,285,"        final Vector2D v2 = (Vector2D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,286,"        return x * v2.x + y * v2.y;
",12,3,0,0,0,1,0,0,0,15,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,298,"        return p1.distance(p2);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,310,"        return p1.distanceInf(p2);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,322,"        return p1.distanceSq(p2);
",0,0,0,1,2,1,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,347,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,348,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,351,"        if (other instanceof Vector2D) {
",2,0,0,1,3,0,0,2,0,4,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,352,"            final Vector2D rhs = (Vector2D)other;
",4,0,0,1,2,1,0,4,0,9,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,353,"            if (rhs.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,354,"                return this.isNaN();
",0,0,0,1,2,1,2,0,0,2,20,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,357,"            return (x == rhs.x) && (y == rhs.y);
",12,3,0,2,4,1,0,0,0,15,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,359,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,371,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,372,"            return 542;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,374,"        return 122 * (76 * MathUtils.hash(x) +  MathUtils.hash(y));
",0,3,0,3,6,1,12,0,0,15,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,382,"        return Vector2DFormat.getInstance().format(this);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,387,"        return new Vector2DFormat(format).format(this);
",2,0,0,2,4,1,2,2,0,6,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Vector2D,32,34,"public class Vector2D implements Vector<Euclidean2D> {
",2,0,0,0,1,1,0,4,0,7,54,1,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,89,"    public Line(final Vector2D p, final double angle) {
",6,0,0,1,3,3,0,2,0,11,51,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,90,"        reset(p, angle);
",0,0,0,1,2,0,6,0,0,6,16,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,91,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,99,"    private Line(final double angle, final double cos, final double sin, final double originOffset) {
",10,0,0,1,3,5,0,0,0,15,97,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,100,"        this.angle        = angle;
",4,0,0,0,0,0,0,0,0,5,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,101,"        this.cos          = cos;
",4,0,0,0,0,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,102,"        this.sin          = sin;
",4,0,0,0,0,0,0,0,0,5,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,103,"        this.originOffset = originOffset;
",4,0,0,0,0,0,0,0,0,5,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,104,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,133,"            angle        = 0.0;
",2,0,0,0,0,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,134,"            cos          = 1.0;
",2,0,0,0,0,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,135,"            sin          = 0.0;
",2,0,0,0,0,0,0,0,0,3,19,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,136,"            originOffset = p1.getY();
",2,0,0,1,2,0,4,0,0,7,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,150,"        this.angle   = MathUtils.normalizeAngle(alpha, FastMath.PI);
",6,0,0,1,2,0,6,0,0,13,60,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,151,"        cos          = FastMath.cos(this.angle);
",4,0,0,1,2,0,4,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,152,"        sin          = FastMath.sin(this.angle);
",4,0,0,1,2,0,4,0,0,9,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,153,"        originOffset = cos * p.getY() - sin * p.getX();
",6,3,0,2,4,0,8,0,0,18,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,154,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,159,"        if (angle < FastMath.PI) {
",6,1,0,1,3,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,160,"            angle += FastMath.PI;
",6,0,0,0,0,0,0,0,0,7,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,162,"            angle -= FastMath.PI;
",6,0,0,0,0,0,0,0,0,7,21,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,164,"        cos          = -cos;
",4,0,0,0,0,0,0,0,0,6,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,165,"        sin          = -sin;
",4,0,0,0,0,0,0,0,0,6,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,166,"        originOffset = -originOffset;
",4,0,0,0,0,0,0,0,0,6,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,167,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,175,"        return new Line((angle < FastMath.PI) ? (angle + FastMath.PI) : (angle - FastMath.PI),
",18,3,0,3,7,1,0,2,0,23,86,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,216,"        return new PolygonsSet();
",0,0,0,1,2,1,0,2,0,2,25,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,236,"        Vector2D p2 = (Vector2D) point;
",4,0,0,1,2,0,0,4,0,8,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,237,"        return sin * p2.getX() - cos * p2.getY() + originOffset;
",6,4,0,2,4,1,8,0,0,18,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,253,"        final double x       = abscissa.getX();
",2,0,0,1,2,1,4,0,0,7,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,254,"        final double dOffset = offset - originOffset;
",6,1,0,0,0,1,0,0,0,8,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,255,"        return new Vector2D(x * cos + dOffset * sin, x * sin - dOffset * cos);
",16,6,0,1,2,1,0,2,0,24,70,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,263,"        return FastMath.abs(getOffset(p)) < 1.0e-10;
",0,1,0,2,4,1,8,0,0,9,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,272,"        return FastMath.abs(sin * line.cos - cos * line.sin) < 1.0e-10;
",12,4,0,1,2,1,4,0,0,20,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,279,"        originOffset = cos * p.getY() - sin * p.getX();
",6,3,0,2,4,0,8,0,0,18,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,280,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,293,"        this.angle = MathUtils.normalizeAngle(angle, FastMath.PI);
",6,0,0,1,2,0,6,0,0,13,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,294,"        cos        = FastMath.cos(this.angle);
",4,0,0,1,2,0,4,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,295,"        sin        = FastMath.sin(this.angle);
",4,0,0,1,2,0,4,0,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,296,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,302,"        return originOffset;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,309,"        originOffset = offset;
",4,0,0,0,0,0,0,0,0,5,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,310,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,327,"        return new LineTransform(transform);
",2,0,0,1,2,1,0,2,0,4,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,98,"        super(boxBoundary(xMin, xMax, yMin, yMax));
",0,0,0,2,4,0,10,0,0,10,43,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,99,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,110,"        final Vector2D minMin = new Vector2D(xMin, yMin);
",6,0,0,1,2,1,0,4,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,111,"        final Vector2D minMax = new Vector2D(xMin, yMax);
",6,0,0,1,2,1,0,4,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,112,"        final Vector2D maxMin = new Vector2D(xMax, yMin);
",6,0,0,1,2,1,0,4,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,113,"        final Vector2D maxMax = new Vector2D(xMax, yMax);
",6,0,0,1,2,1,0,4,0,11,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,114,"        return new Line[] {
",0,0,0,1,3,1,0,2,0,2,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,135,"            final BSPTree<Euclidean2D> tree = getTree(false);
",2,0,0,1,2,1,2,4,0,10,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,136,"            if ((Boolean) tree.getAttribute()) {
",0,0,0,3,7,0,4,2,0,6,36,7,0.00000,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,138,"                setSize(Double.POSITIVE_INFINITY);
",4,0,0,1,2,0,2,0,0,6,34,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,139,"                setBarycenter(Vector2D.NaN);
",4,0,0,1,2,0,2,0,0,6,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,141,"                setSize(0);
",0,0,0,1,2,0,2,0,0,2,11,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,142,"                setBarycenter(new Vector2D(0, 0));
",0,0,0,2,4,0,2,2,0,4,34,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,144,"        } else if (v[0][0] == null) {
",0,1,1,3,8,0,0,0,0,3,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,146,"            setSize(Double.POSITIVE_INFINITY);
",4,0,0,1,2,0,2,0,0,6,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,147,"            setBarycenter(Vector2D.NaN);
",4,0,0,1,2,0,2,0,0,6,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,172,"                setSize(Double.POSITIVE_INFINITY);
",4,0,0,1,2,0,2,0,0,6,34,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,173,"                setBarycenter(Vector2D.NaN);
",4,0,0,1,2,0,2,0,0,6,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,209,"                vertices = new Vector2D[0][];
",2,0,0,2,4,0,0,2,0,5,29,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,235,"                        final Line line = loop.get(0).getLine();
",2,0,0,2,4,1,6,2,0,11,40,12,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,236,"                        vertices[i++] = new Vector2D[] {
",2,0,1,2,5,0,0,2,0,8,32,12,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,241,"                    } else if (loop.get(0).getStart() == null) {
",0,1,0,3,8,0,6,0,0,7,44,11,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,243,"                        final Vector2D[] array = new Vector2D[loop.size() + 2];
",2,1,0,3,6,1,4,4,0,12,55,13,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,244,"                        int j = 0;
",2,0,0,0,0,0,0,0,0,2,10,14,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,245,"                        for (Segment segment : loop) {
",4,0,0,1,3,0,0,2,0,6,30,13,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,247,"                            if (j == 0) {
",2,1,0,1,3,0,0,0,0,3,13,15,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,249,"                                double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
",2,0,0,4,8,0,12,0,0,14,65,18,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,250,"                                x -= FastMath.max(1.0, FastMath.abs(x / 2));
",4,1,0,2,4,0,8,0,0,14,44,17,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,251,"                                array[j++] = null;
",2,0,1,1,2,0,0,0,0,6,18,17,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,252,"                                array[j++] = segment.getLine().toSpace(new Vector1D(x));
",4,0,1,4,8,0,6,2,0,16,56,17,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,255,"                            if (j < (array.length - 1)) {
",6,2,0,2,5,0,0,0,0,8,29,15,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,257,"                                array[j++] = segment.getEnd();
",2,0,1,2,4,0,4,0,0,10,30,17,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,260,"                            if (j == (array.length - 1)) {
",6,2,0,2,5,0,0,0,0,8,30,15,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,262,"                                double x = segment.getLine().toSubSpace(segment.getStart()).getX();
",2,0,0,4,8,0,12,0,0,14,67,18,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,263,"                                x += FastMath.max(1.0, FastMath.abs(x / 2));
",4,1,0,2,4,0,8,0,0,14,44,17,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,264,"                                array[j++] = segment.getLine().toSpace(new Vector1D(x));
",4,0,1,4,8,0,6,2,0,16,56,17,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,267,"                        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,268,"                        vertices[i++] = array;
",4,0,1,1,2,0,0,0,0,8,22,13,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,269,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,330,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,341,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,345,"            throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,94,"            tree = new BSPTree<S>(Boolean.TRUE);
",6,0,0,1,2,0,0,4,0,11,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,141,"    public AbstractRegion(final Hyperplane<S>[] hyperplanes) {
",4,0,0,2,5,2,0,4,0,10,58,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,142,"        if ((hyperplanes == null) || (hyperplanes.length == 0)) {
",6,3,0,3,7,0,0,0,0,9,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,143,"            tree = new BSPTree<S>(Boolean.FALSE);
",6,0,0,1,2,0,0,4,0,11,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,147,"            tree = hyperplanes[0].wholeSpace().getTree(false);
",2,0,1,3,6,0,4,0,0,10,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,150,"            BSPTree<S> node = tree;
",4,0,0,0,0,0,0,4,0,8,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,151,"            node.setAttribute(Boolean.TRUE);
",4,0,0,1,2,0,4,0,0,8,32,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,152,"            for (final Hyperplane<S> hyperplane : hyperplanes) {
",4,0,0,1,3,1,0,4,0,9,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,153,"                if (node.insertCut(hyperplane)) {
",0,0,0,2,5,0,6,0,0,6,33,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,154,"                    node.setAttribute(null);
",0,0,0,1,2,0,4,0,0,4,24,11,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,155,"                    node.getPlus().setAttribute(Boolean.FALSE);
",4,0,0,2,4,0,6,0,0,10,43,11,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,156,"                    node = node.getMinus();
",2,0,0,1,2,0,4,0,0,7,23,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,157,"                    node.setAttribute(Boolean.TRUE);
",4,0,0,1,2,0,4,0,0,8,32,11,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,163,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,183,"                inserted = null;
",2,0,0,0,0,0,0,0,0,3,16,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,221,"        return buildNew(tree.copySelf());
",0,0,0,2,4,1,6,0,0,6,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,248,"        return new RegionFactory<S>().difference(region, this).isEmpty();
",0,0,0,3,6,1,6,4,0,10,65,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,253,"        return checkPoint(tree, point);
",0,0,0,1,2,1,6,0,0,6,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,271,"        final Location minusCode = checkPoint(cell.getMinus(), point);
",2,0,0,2,4,1,8,2,0,13,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,272,"        final Location plusCode  = checkPoint(cell.getPlus(),  point);
",2,0,0,2,4,1,8,2,0,13,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,273,"        return (minusCode == plusCode) ? minusCode : Location.BOUNDARY;
",10,1,0,1,2,1,0,0,0,11,63,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,320,"                    plusInside = minusChar.getOut();
",2,0,0,1,2,0,4,0,0,7,32,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,366,"                throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,373,"        final BoundarySizeVisitor<S> visitor = new BoundarySizeVisitor<S>();
",2,0,0,1,2,1,0,8,0,11,68,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,374,"        getTree(true).visit(visitor);
",0,0,0,2,4,0,6,0,0,7,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,375,"        return visitor.getSize();
",0,0,0,1,2,1,4,0,0,4,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,396,"            computeGeometricalProperties();
",0,0,0,1,2,0,2,0,0,2,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,469,"                    sides.rememberPlusFound();
",0,0,0,1,2,0,4,0,0,4,26,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,473,"                    sides.rememberMinusFound();
",0,0,0,1,2,0,4,0,0,4,27,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,496,"                    sides.rememberPlusFound();
",0,0,0,1,2,0,4,0,0,4,26,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,559,"        return recurseIntersection(tree, sub);
",0,0,0,1,2,1,6,0,0,6,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,570,"        if (node.getCut() == null) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,571,"            return (Boolean) node.getAttribute() ? sub.copySelf() : null;
",0,0,0,3,6,1,8,2,0,10,61,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,574,"        final Hyperplane<S> hyperplane = node.getCut().getHyperplane();
",2,0,0,2,4,1,6,4,0,13,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,575,"        switch (sub.side(hyperplane)) {
",0,0,0,2,5,0,6,0,0,6,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,577,"            return recurseIntersection(node.getPlus(), sub);
",0,0,0,2,4,1,8,0,0,8,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,579,"            return recurseIntersection(node.getMinus(), sub);
",0,0,0,2,4,1,8,0,0,8,49,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,581,"            final SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);
",6,0,0,1,2,1,6,2,0,15,72,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,582,"            final SubHyperplane<S> plus  = recurseIntersection(node.getPlus(),  split.getPlus());
",2,0,0,3,6,1,10,4,0,17,85,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,583,"            final SubHyperplane<S> minus = recurseIntersection(node.getMinus(), split.getMinus());
",2,0,0,3,6,1,10,4,0,17,86,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,584,"            if (plus == null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,585,"                return minus;
",2,0,0,0,0,1,0,0,0,2,13,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,586,"            } else if (minus == null) {
",2,1,0,1,4,0,0,0,0,3,27,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,587,"                return plus;
",2,0,0,0,0,1,0,0,0,2,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,589,"                return plus.reunite(minus);
",0,0,0,1,2,1,6,0,0,6,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,592,"            return recurseIntersection(node.getPlus(),
",0,0,0,1,3,1,6,0,0,6,42,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,609,"        return buildNew(recurseTransform(getTree(false), transform));
",0,0,0,3,6,1,8,0,0,9,61,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,620,"        if (node.getCut() == null) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,621,"            return new BSPTree<S>(node.getAttribute());
",0,0,0,2,4,1,4,4,0,8,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,624,"        final SubHyperplane<S>  sub = node.getCut();
",2,0,0,1,2,1,4,4,0,11,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,625,"        final SubHyperplane<S> tSub = ((AbstractSubHyperplane<S, T>) sub).applyTransform(transform);
",4,0,0,3,6,1,4,10,0,19,92,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,626,"        BoundaryAttribute<S> attribute = (BoundaryAttribute<S>) node.getAttribute();
",2,0,0,2,4,0,4,8,0,14,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,627,"        if (attribute != null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,628,"            final SubHyperplane<S> tPO = (attribute.getPlusOutside() == null) ?
",2,1,0,2,4,1,4,4,0,12,67,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,630,"            final SubHyperplane<S> tPI = (attribute.getPlusInside()  == null) ?
",2,1,0,2,4,1,4,4,0,12,67,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,632,"            attribute = new BoundaryAttribute<S>(tPO, tPI);
",6,0,0,1,2,0,0,4,0,11,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,635,"        return new BSPTree<S>(tSub,
",2,0,0,0,1,1,0,4,0,6,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,37,"public abstract class AbstractRegion<S extends Space, T extends Space> implements Region<S> {
",6,0,0,0,1,2,0,8,0,16,93,1,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,151,"            plus.parent  = null;
",4,0,0,0,0,0,0,0,0,5,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,152,"            minus.parent = null;
",4,0,0,0,0,0,0,0,0,5,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,157,"            cut          = null;
",2,0,0,0,0,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,158,"            plus         = null;
",2,0,0,0,0,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,159,"            minus        = null;
",2,0,0,0,0,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,160,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,247,"                plus.visit(visitor);
",0,0,0,1,2,0,6,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,248,"                minus.visit(visitor);
",0,0,0,1,2,0,6,0,0,6,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,249,"                visitor.visitInternalNode(this);
",0,0,0,1,2,0,4,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,250,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,257,"                minus.visit(visitor);
",0,0,0,1,2,0,6,0,0,6,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,258,"                plus.visit(visitor);
",0,0,0,1,2,0,6,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,259,"                visitor.visitInternalNode(this);
",0,0,0,1,2,0,4,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,260,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,267,"                visitor.visitInternalNode(this);
",0,0,0,1,2,0,4,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,268,"                plus.visit(visitor);
",0,0,0,1,2,0,6,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,269,"                minus.visit(visitor);
",0,0,0,1,2,0,6,0,0,6,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,270,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,272,"                visitor.visitInternalNode(this);
",0,0,0,1,2,0,4,0,0,4,32,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,273,"                minus.visit(visitor);
",0,0,0,1,2,0,6,0,0,6,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,274,"                plus.visit(visitor);
",0,0,0,1,2,0,6,0,0,6,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,275,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,277,"                throw new MathInternalError();
",0,0,0,1,2,0,0,2,0,2,30,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,320,"            return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,326,"            return plus.getCell(point);
",0,0,0,1,2,1,6,0,0,6,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,399,"                    parentTree.minus = merged;
",6,0,0,0,0,0,0,0,0,7,26,11,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,629,"            cut = cut.split(hyperplane).getMinus();
",2,0,0,2,4,0,8,0,0,11,39,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,630,"            plus.chopOffPlus(hyperplane);
",0,0,0,1,2,0,6,0,0,6,29,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,32,631,"            minus.chopOffPlus(hyperplane);
",0,0,0,1,2,0,6,0,0,6,30,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,56,"        super(new Line(start, end), buildIntervalSet(start, end));
",4,0,0,3,6,0,6,2,0,12,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,63,"        super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));
",0,0,0,5,10,0,14,0,0,14,81,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,82,"        final Line line = (Line) getHyperplane();
",2,0,0,2,4,1,2,4,0,9,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,83,"        final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();
",2,0,0,4,8,1,4,6,0,13,75,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,84,"        final List<Segment> segments = new ArrayList<Segment>();
",2,0,0,1,2,1,0,8,0,11,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,86,"        for (final Interval interval : list) {
",4,0,0,1,3,1,0,2,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,87,"            final Vector2D start = line.toSpace(new Vector1D(interval.getLower()));
",2,0,0,3,6,1,8,4,0,15,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,88,"            final Vector2D end   = line.toSpace(new Vector1D(interval.getUpper()));
",2,0,0,3,6,1,8,4,0,15,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,89,"            segments.add(new Segment(start, end, line));
",6,0,0,2,4,0,4,2,0,12,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,90,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,92,"        return segments;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,113,"        Line line1 = (Line) getHyperplane();
",2,0,0,2,4,0,2,4,0,8,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,114,"        Line line2 = (Line) subLine.getHyperplane();
",2,0,0,2,4,0,4,4,0,10,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,117,"        Vector2D v2D = line1.intersection(line2);
",2,0,0,1,2,0,6,2,0,10,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,120,"        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
",2,0,0,3,6,0,10,2,0,14,71,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,123,"        Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
",2,0,0,3,6,0,12,2,0,16,79,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,125,"        if (includeEndPoints) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,126,"            return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;
",14,3,0,3,6,1,0,0,0,17,79,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,128,"            return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;
",14,3,0,3,6,1,0,0,0,17,77,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,139,"        final Line line = new Line(start, end);
",6,0,0,1,2,1,0,4,0,11,39,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,32,140,"        return new IntervalsSet(line.toSubSpace(start).getX(),
",0,0,0,2,5,1,8,2,0,10,54,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,111,"        final Hyperplane<S> tHyperplane = transform.apply(hyperplane);
",2,0,0,1,2,1,6,4,0,13,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,112,"        final BSPTree<T> tTree =
",2,0,0,0,0,1,0,4,0,7,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,114,"        return buildNew(tHyperplane, remainingRegion.buildNew(tTree));
",0,0,0,2,4,1,10,0,0,10,62,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,126,"        if (node.getCut() == null) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,127,"            return new BSPTree<T>(node.getAttribute());
",0,0,0,2,4,1,4,4,0,8,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,131,"        BoundaryAttribute<T> attribute =
",2,0,0,0,0,0,0,4,0,6,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,133,"        if (attribute != null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,134,"            final SubHyperplane<T> tPO = (attribute.getPlusOutside() == null) ?
",2,1,0,2,4,1,4,4,0,12,67,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,136,"            final SubHyperplane<T> tPI = (attribute.getPlusInside() == null) ?
",2,1,0,2,4,1,4,4,0,12,66,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,138,"            attribute = new BoundaryAttribute<T>(tPO, tPI);
",6,0,0,1,2,0,0,4,0,11,47,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractSubHyperplane,32,141,"        return new BSPTree<T>(transform.apply(node.getCut(), hyperplane, transformed),
",0,0,0,2,5,1,12,4,0,16,78,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,75,"    public Vector1D(double a, Vector1D u) {
",6,0,0,1,3,1,0,2,0,9,39,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,76,"        this.x = a * u.x;
",8,1,0,0,0,0,0,0,0,10,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,77,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,87,"    public Vector1D(double a1, Vector1D u1, double a2, Vector1D u2) {
",10,0,0,1,3,1,0,4,0,15,65,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,88,"        this.x = a1 * u1.x + a2 * u2.x;
",14,3,0,0,0,0,0,0,0,18,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,89,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,102,"                   double a3, Vector1D u3) {
",4,0,0,0,2,0,0,2,0,6,25,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,103,"        this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x;
",20,5,0,0,0,0,0,0,0,26,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,104,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,119,"                   double a3, Vector1D u3, double a4, Vector1D u4) {
",8,0,0,0,2,0,0,4,0,12,49,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,120,"        this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x + a4 * u4.x;
",26,7,0,0,0,0,0,0,0,34,55,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,121,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,133,"        return Euclidean1D.getInstance();
",0,0,0,1,2,1,4,0,0,4,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,138,"        return ZERO;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,143,"        return FastMath.abs(x);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,148,"        return FastMath.abs(x);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,153,"        return x * x;
",4,1,0,0,0,1,0,0,0,5,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,158,"        return FastMath.abs(x);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,163,"        Vector1D v1 = (Vector1D) v;
",4,0,0,1,2,0,0,4,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,164,"        return new Vector1D(x + v1.getX());
",2,1,0,2,4,1,4,2,0,9,35,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,169,"        Vector1D v1 = (Vector1D) v;
",4,0,0,1,2,0,0,4,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,170,"        return new Vector1D(x + factor * v1.getX());
",4,2,0,2,4,1,4,2,0,12,44,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,175,"        Vector1D p3 = (Vector1D) p;
",4,0,0,1,2,0,0,4,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,176,"        return new Vector1D(x - p3.x);
",6,1,0,1,2,1,0,2,0,9,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,181,"        Vector1D v1 = (Vector1D) v;
",4,0,0,1,2,0,0,4,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,182,"        return new Vector1D(x - factor * v1.getX());
",4,2,0,2,4,1,4,2,0,12,44,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,187,"        double s = getNorm();
",2,0,0,1,2,0,2,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,188,"        if (s == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,189,"            throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
",4,0,0,1,2,0,0,2,0,6,88,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,191,"        return scalarMultiply(1 / s);
",2,1,0,1,2,1,2,0,0,5,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,195,"        return new Vector1D(-x);
",2,0,0,1,2,1,0,2,0,5,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,200,"        return new Vector1D(a * x);
",4,1,0,1,2,1,0,2,0,7,27,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,205,"        return Double.isNaN(x);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,210,"        return !isNaN() && Double.isInfinite(x);
",0,1,0,2,4,1,8,0,0,10,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,215,"        Vector1D p3 = (Vector1D) p;
",4,0,0,1,2,0,0,4,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,216,"        final double dx = FastMath.abs(p3.x - x);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,217,"        return dx;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,222,"        Vector1D p3 = (Vector1D) p;
",4,0,0,1,2,0,0,4,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,223,"        final double dx = p3.x - x;
",8,1,0,0,0,1,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,224,"        return FastMath.abs(dx);
",0,0,0,1,2,1,6,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,229,"        Vector1D p3 = (Vector1D) p;
",4,0,0,1,2,0,0,4,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,230,"        final double dx = FastMath.abs(p3.x - x);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,231,"        return dx;
",2,0,0,0,0,1,0,0,0,2,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,236,"        Vector1D p3 = (Vector1D) p;
",4,0,0,1,2,0,0,4,0,8,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,237,"        final double dx = p3.x - x;
",8,1,0,0,0,1,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,238,"        return dx * dx;
",4,1,0,0,0,1,0,0,0,5,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,243,"        final Vector1D v1 = (Vector1D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,244,"        return x * v1.x;
",6,1,0,0,0,1,0,0,0,7,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,256,"        return p1.distance(p2);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,268,"        return p1.distanceInf(p2);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,280,"        return p1.distanceSq(p2);
",0,0,0,1,2,1,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,305,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,306,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,309,"        if (other instanceof Vector1D) {
",2,0,0,1,3,0,0,2,0,4,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,310,"            final Vector1D rhs = (Vector1D)other;
",4,0,0,1,2,1,0,4,0,9,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,311,"            if (rhs.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,312,"                return this.isNaN();
",0,0,0,1,2,1,2,0,0,2,20,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,315,"            return x == rhs.x;
",6,1,0,0,0,1,0,0,0,7,18,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,317,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,329,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,330,"            return 7785;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,332,"        return 997 * MathUtils.hash(x);
",0,1,0,1,2,1,6,0,0,7,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,340,"        return Vector1DFormat.getInstance().format(this);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,345,"        return new Vector1DFormat(format).format(this);
",2,0,0,2,4,1,2,2,0,6,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/Vector1D,32,33,"public class Vector1D implements Vector<Euclidean1D> {
",2,0,0,0,1,1,0,4,0,7,54,1,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,434,"                addContribution(attribute.getPlusInside(), true);
",0,0,0,2,4,0,6,0,0,7,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,458,"                    sorted.insert(new ComparableSegment(end, start, line.getReverse()));
",4,0,0,3,6,0,8,2,0,14,68,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,82,"        if (element != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,83,"            for (Node node = getNotSmaller(element); node != null; node = node.getNext()) {
",6,1,0,3,7,0,8,2,0,19,79,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,86,"                if (node.element == element) {
",6,1,0,1,3,0,0,0,0,7,30,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,87,"                    node.delete();
",0,0,0,1,2,0,4,0,0,4,14,11,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,88,"                    return true;
",0,0,0,0,0,1,0,0,0,1,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,89,"                } else if (node.element.compareTo(element) > 0) {
",4,1,0,2,6,0,4,0,0,9,49,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,92,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,11,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,96,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,111,"        return (top == null) ? 0 : top.size();
",2,1,0,2,4,1,4,0,0,7,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,137,"        return (top == null) ? null : top.getLargest();
",2,1,0,2,4,1,4,0,0,7,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,167,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,183,"        Node candidate = null;
",2,0,0,0,0,0,0,2,0,4,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,184,"        for (Node node = top; node != null;) {
",6,1,0,1,3,0,0,2,0,9,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,185,"            if (node.element.compareTo(reference) > 0) {
",4,1,0,2,5,0,4,0,0,9,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,186,"                if (node.left == null) {
",4,1,0,1,3,0,0,0,0,5,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,187,"                    return candidate;
",2,0,0,0,0,1,0,0,0,2,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,189,"                node = node.left;
",6,0,0,0,0,0,0,0,0,7,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,191,"                candidate = node;
",4,0,0,0,0,0,0,0,0,5,17,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,192,"                if (node.right == null) {
",4,1,0,1,3,0,0,0,0,5,25,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,193,"                    return candidate;
",2,0,0,0,0,1,0,0,0,2,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,195,"                node = node.right;
",6,0,0,0,0,0,0,0,0,7,18,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,198,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,358,"        public LineTransform(final AffineTransform transform) throws MathIllegalArgumentException {
",6,0,0,1,3,2,0,2,0,10,91,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,360,"            final double[] m = new double[6];
",2,0,0,2,4,1,0,0,0,3,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,361,"            transform.getMatrix(m);
",0,0,0,1,2,0,6,0,0,6,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,362,"            cXX = m[0];
",2,0,1,1,2,0,0,0,0,5,11,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,363,"            cXY = m[2];
",2,0,1,1,2,0,0,0,0,5,11,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,364,"            cX1 = m[4];
",2,0,1,1,2,0,0,0,0,5,11,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,365,"            cYX = m[1];
",2,0,1,1,2,0,0,0,0,5,11,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,366,"            cYY = m[3];
",2,0,1,1,2,0,0,0,0,5,11,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,367,"            cY1 = m[5];
",2,0,1,1,2,0,0,0,0,5,11,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,369,"            c1Y = cXY * cY1 - cYY * cX1;
",10,3,0,0,0,0,0,0,0,14,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,370,"            c1X = cXX * cY1 - cYX * cX1;
",10,3,0,0,0,0,0,0,0,14,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,371,"            c11 = cXX * cYY - cYX * cXY;
",10,3,0,0,0,0,0,0,0,14,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,373,"            if (FastMath.abs(c11) < 1.0e-20) {
",0,1,0,2,5,0,6,0,0,7,34,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,374,"                throw new MathIllegalArgumentException(LocalizedFormats.NON_INVERTIBLE_TRANSFORM);
",4,0,0,1,2,0,0,2,0,6,82,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,377,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,381,"            final Vector2D p2D = (Vector2D) point;
",4,0,0,1,2,1,0,4,0,9,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,382,"            final double  x   = p2D.getX();
",2,0,0,1,2,1,4,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,383,"            final double  y   = p2D.getY();
",2,0,0,1,2,1,4,0,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,384,"            return new Vector2D(cXX * x + cXY * y + cX1,
",10,4,0,0,1,1,0,2,0,16,44,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,390,"            final Line   line    = (Line) hyperplane;
",4,0,0,1,2,1,0,4,0,9,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,391,"            final double rOffset = c1X * line.cos + c1Y * line.sin + c11 * line.originOffset;
",20,5,0,0,0,1,0,0,0,26,81,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,392,"            final double rCos    = cXX * line.cos + cXY * line.sin;
",14,3,0,0,0,1,0,0,0,18,55,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,393,"            final double rSin    = cYX * line.cos + cYY * line.sin;
",14,3,0,0,0,1,0,0,0,18,55,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,394,"            final double inv     = 1.0 / FastMath.sqrt(rSin * rSin + rCos * rCos);
",10,4,0,1,2,1,4,0,0,19,70,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,395,"            return new Line(FastMath.PI + FastMath.atan2(-rSin, -rCos),
",8,1,0,1,3,1,4,2,0,17,59,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,404,"            final OrientedPoint op     = (OrientedPoint) sub.getHyperplane();
",2,0,0,2,4,1,4,4,0,11,65,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,405,"            final Line originalLine    = (Line) original;
",4,0,0,1,2,1,0,4,0,9,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,406,"            final Line transformedLine = (Line) transformed;
",4,0,0,1,2,1,0,4,0,9,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,407,"            final Vector1D newLoc =
",2,0,0,0,0,1,0,2,0,5,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,409,"            return new OrientedPoint(newLoc, op.isDirect()).wholeHyperplane();
",2,0,0,3,6,1,6,2,0,10,66,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/Line,32,337,"    private static class LineTransform implements Transform<Euclidean2D, Euclidean1D> {
",2,0,0,0,1,2,0,6,0,10,83,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,32,53,"        return this;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,32,82,"        return new IntervalsSet();
",0,0,0,1,2,1,0,2,0,2,26,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,32,108,"        direct = !direct;
",4,0,0,0,0,0,0,0,0,6,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/OrientedPoint,32,109,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,32,45,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,83,"        super(boundary);
",2,0,0,1,2,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,84,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,95,"            if (Double.isInfinite(upper) && (upper > 0)) {
",2,2,0,3,7,0,6,0,0,10,46,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,97,"                return new BSPTree<Euclidean1D>(Boolean.TRUE);
",4,0,0,1,2,1,0,4,0,8,46,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,100,"            final SubHyperplane<Euclidean1D> upperCut =
",2,0,0,0,0,1,0,4,0,7,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,102,"            return new BSPTree<Euclidean1D>(upperCut,
",2,0,0,0,1,1,0,4,0,6,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,111,"            return new BSPTree<Euclidean1D>(lowerCut,
",2,0,0,0,1,1,0,4,0,6,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,140,"            setBarycenter(Vector1D.NaN);
",4,0,0,1,2,0,2,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,141,"            setSize(((Boolean) getTree(false).getAttribute()) ? Double.POSITIVE_INFINITY : 0);
",4,0,0,5,10,0,6,2,0,13,82,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,151,"                setBarycenter(Vector1D.NaN);
",4,0,0,1,2,0,2,0,0,6,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,155,"                setBarycenter(((OrientedPoint) getTree(false).getCut().getHyperplane()).getLocation());
",0,0,0,7,14,0,10,2,0,13,87,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,167,"        BSPTree<Euclidean1D> node = getTree(false);
",2,0,0,1,2,0,2,4,0,9,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,168,"        double  inf  = Double.POSITIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,169,"        while (node.getCut() != null) {
",0,1,0,2,5,0,4,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,170,"            final OrientedPoint op = (OrientedPoint) node.getCut().getHyperplane();
",2,0,0,3,6,1,6,4,0,13,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,171,"            inf  = op.getLocation().getX();
",2,0,0,2,4,0,6,0,0,9,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,172,"            node = op.isDirect() ? node.getMinus() : node.getPlus();
",2,0,0,3,6,0,12,0,0,15,56,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,173,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,174,"        return ((Boolean) node.getAttribute()) ? Double.NEGATIVE_INFINITY : inf;
",6,0,0,3,6,1,4,2,0,12,72,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,184,"        BSPTree<Euclidean1D> node = getTree(false);
",2,0,0,1,2,0,2,4,0,9,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,185,"        double  sup  = Double.NEGATIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,186,"        while (node.getCut() != null) {
",0,1,0,2,5,0,4,0,0,5,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,187,"            final OrientedPoint op = (OrientedPoint) node.getCut().getHyperplane();
",2,0,0,3,6,1,6,4,0,13,71,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,188,"            sup  = op.getLocation().getX();
",2,0,0,2,4,0,6,0,0,9,31,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,189,"            node = op.isDirect() ? node.getPlus() : node.getMinus();
",2,0,0,3,6,0,12,0,0,15,56,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,190,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,191,"        return ((Boolean) node.getAttribute()) ? Double.POSITIVE_INFINITY : sup;
",6,0,0,3,6,1,4,2,0,12,72,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,32,244,"                x = list.remove(list.size() - 1).getLower();
",2,1,0,3,6,0,10,0,0,14,44,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,107,"    public Vector3D(double[] v) throws DimensionMismatchException {
",6,0,0,2,5,1,0,0,0,7,63,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,108,"        if (v.length != 3) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,109,"            throw new DimensionMismatchException(v.length, 3);
",4,0,0,1,2,0,0,2,0,6,50,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,111,"        this.x = v[0];
",2,0,1,1,2,0,0,0,0,5,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,112,"        this.y = v[1];
",2,0,1,1,2,0,0,0,0,5,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,113,"        this.z = v[2];
",2,0,1,1,2,0,0,0,0,5,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,114,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,124,"    public Vector3D(double alpha, double delta) {
",6,0,0,1,3,1,0,0,0,7,45,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,125,"        double cosDelta = FastMath.cos(delta);
",2,0,0,1,2,0,6,0,0,8,38,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,126,"        this.x = FastMath.cos(alpha) * cosDelta;
",4,1,0,1,2,0,6,0,0,12,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,127,"        this.y = FastMath.sin(alpha) * cosDelta;
",4,1,0,1,2,0,6,0,0,12,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,128,"        this.z = FastMath.sin(delta);
",2,0,0,1,2,0,6,0,0,9,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,129,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,187,"                    double a3, Vector3D u3, double a4, Vector3D u4) {
",8,0,0,0,2,0,0,4,0,12,49,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,188,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x, a3, u3.x, a4, u4.x);
",18,0,0,1,2,0,12,0,0,31,78,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,189,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y, a3, u3.y, a4, u4.y);
",18,0,0,1,2,0,12,0,0,31,78,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,190,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z, a3, u3.z, a4, u4.z);
",18,0,0,1,2,0,12,0,0,31,78,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,191,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,222,"        return new double[] { x, y, z };
",6,0,0,2,4,1,0,0,0,6,32,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,227,"        return Euclidean3D.getInstance();
",0,0,0,1,2,1,4,0,0,4,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,232,"        return ZERO;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,237,"        return FastMath.abs(x) + FastMath.abs(y) + FastMath.abs(z);
",0,1,0,3,6,1,18,0,0,19,59,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,254,"        return FastMath.max(FastMath.max(FastMath.abs(x), FastMath.abs(y)), FastMath.abs(z));
",0,0,0,5,10,1,26,0,0,26,85,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,262,"        return FastMath.atan2(y, x);
",0,0,0,1,2,1,8,0,0,8,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,270,"        return FastMath.asin(z / getNorm());
",2,1,0,2,4,1,6,0,0,9,36,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,281,"        return new Vector3D(1, this, factor, (Vector3D) v);
",4,0,0,2,4,1,0,4,0,8,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,292,"        return new Vector3D(1, this, -factor, (Vector3D) v);
",4,0,0,2,4,1,0,4,0,9,52,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,297,"        double s = getNorm();
",2,0,0,1,2,0,2,0,0,4,21,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,298,"        if (s == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,299,"            throw new MathArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
",4,0,0,1,2,0,0,2,0,6,88,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,301,"        return scalarMultiply(1 / s);
",2,1,0,1,2,1,2,0,0,5,29,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,323,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,333,"        double inverse  = 1 / FastMath.sqrt(x * x + y * y);
",10,4,0,1,2,0,4,0,0,18,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,334,"        return new Vector3D(inverse * y, -inverse * x, 0);
",8,2,0,1,2,1,0,2,0,13,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,351,"        double normProduct = v1.getNorm() * v2.getNorm();
",2,1,0,2,4,0,8,0,0,11,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,352,"        if (normProduct == 0) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,353,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,356,"        double dot = v1.dotProduct(v2);
",2,0,0,1,2,0,6,0,0,8,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,357,"        double threshold = normProduct * 0.9999;
",4,1,0,0,0,0,0,0,0,5,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,358,"        if ((dot < -threshold) || (dot > threshold)) {
",8,3,0,3,7,0,0,0,0,12,46,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,360,"            Vector3D v3 = crossProduct(v1, v2);
",2,0,0,1,2,0,6,2,0,10,35,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,361,"            if (dot >= 0) {
",2,1,0,1,3,0,0,0,0,3,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,362,"                return FastMath.asin(v3.getNorm() / normProduct);
",2,1,0,2,4,1,8,0,0,11,49,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,364,"            return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);
",6,2,0,2,4,1,8,0,0,16,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,368,"        return FastMath.acos(dot / normProduct);
",4,1,0,1,2,1,4,0,0,9,40,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,374,"        return new Vector3D(-x, -y, -z);
",6,0,0,1,2,1,0,2,0,11,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,379,"        return new Vector3D(a * x, a * y, a * z);
",12,3,0,1,2,1,0,2,0,17,41,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,384,"        return Double.isNaN(x) || Double.isNaN(y) || Double.isNaN(z);
",0,1,0,3,6,1,18,0,0,19,61,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,389,"        return !isNaN() && (Double.isInfinite(x) || Double.isInfinite(y) || Double.isInfinite(z));
",0,2,0,5,10,1,20,0,0,23,90,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,414,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,415,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,418,"        if (other instanceof Vector3D) {
",2,0,0,1,3,0,0,2,0,4,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,419,"            final Vector3D rhs = (Vector3D)other;
",4,0,0,1,2,1,0,4,0,9,37,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,420,"            if (rhs.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,421,"                return this.isNaN();
",0,0,0,1,2,1,2,0,0,2,20,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,424,"            return (x == rhs.x) && (y == rhs.y) && (z == rhs.z);
",18,4,0,3,6,1,0,0,0,22,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,426,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,438,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,439,"            return 642;
",0,0,0,0,0,1,0,0,0,0,11,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,441,"        return 643 * (164 * MathUtils.hash(x) +  3 * MathUtils.hash(y) +  MathUtils.hash(z));
",0,5,0,4,8,1,18,0,0,23,85,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,470,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,471,"        final double dx = FastMath.abs(v3.x - x);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,472,"        final double dy = FastMath.abs(v3.y - y);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,473,"        final double dz = FastMath.abs(v3.z - z);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,474,"        return dx + dy + dz;
",6,1,0,0,0,1,0,0,0,7,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,479,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,480,"        final double dx = v3.x - x;
",8,1,0,0,0,1,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,481,"        final double dy = v3.y - y;
",8,1,0,0,0,1,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,482,"        final double dz = v3.z - z;
",8,1,0,0,0,1,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,483,"        return FastMath.sqrt(dx * dx + dy * dy + dz * dz);
",12,5,0,1,2,1,4,0,0,21,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,488,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,489,"        final double dx = FastMath.abs(v3.x - x);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,490,"        final double dy = FastMath.abs(v3.y - y);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,491,"        final double dz = FastMath.abs(v3.z - z);
",8,1,0,1,2,1,4,0,0,14,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,492,"        return FastMath.max(FastMath.max(dx, dy), dz);
",0,0,0,2,4,1,14,0,0,14,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,497,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,498,"        final double dx = v3.x - x;
",8,1,0,0,0,1,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,499,"        final double dy = v3.y - y;
",8,1,0,0,0,1,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,500,"        final double dz = v3.z - z;
",8,1,0,0,0,1,0,0,0,10,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,501,"        return dx * dx + dy * dy + dz * dz;
",12,5,0,0,0,1,0,0,0,17,35,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,510,"        return v1.dotProduct(v2);
",0,0,0,1,2,1,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,531,"        return v1.distance1(v2);
",0,0,0,1,2,1,6,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,543,"        return v1.distance(v2);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,555,"        return v1.distanceInf(v2);
",0,0,0,1,2,1,6,0,0,6,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,567,"        return v1.distanceSq(v2);
",0,0,0,1,2,1,6,0,0,6,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,575,"        return Vector3DFormat.getInstance().format(this);
",0,0,0,2,4,1,6,0,0,6,49,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,580,"        return new Vector3DFormat(format).format(this);
",2,0,0,2,4,1,2,2,0,6,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,32,38,"public class Vector3D implements Serializable, Vector<Euclidean3D> {
",2,0,0,0,1,1,0,6,0,9,68,1,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,47,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,60,"        super(tree);
",2,0,0,1,2,0,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,61,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,83,"        super(boundary);
",2,0,0,1,2,0,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,84,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,98,"        this(new RegionFactory<Euclidean3D>().buildConvex(
",0,0,0,1,4,0,2,4,0,6,50,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,105,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,110,"        return new PolyhedronsSet(tree);
",2,0,0,1,2,1,0,2,0,4,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,120,"        if (getSize() < 0) {
",0,1,0,2,5,0,2,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,123,"            setSize(Double.POSITIVE_INFINITY);
",4,0,0,1,2,0,2,0,0,6,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,124,"            setBarycenter(Vector3D.NaN);
",4,0,0,1,2,0,2,0,0,6,28,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,127,"            setSize(getSize() / 3.0);
",0,1,0,2,4,0,4,0,0,5,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,128,"            setBarycenter(new Vector3D(1.0 / (4 * getSize()), (Vector3D) getBarycenter()));
",0,2,0,6,12,0,6,4,0,12,79,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,131,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,202,"        return recurseFirstIntersection(getTree(true), point, line);
",0,0,0,2,4,1,8,0,0,9,60,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,217,"        final SubHyperplane<Euclidean3D> cut = node.getCut();
",2,0,0,1,2,1,4,4,0,11,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,218,"        if (cut == null) {
",2,1,0,1,3,0,0,0,0,3,18,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,219,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,221,"        final BSPTree<Euclidean3D> minus = node.getMinus();
",2,0,0,1,2,1,4,4,0,11,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,222,"        final BSPTree<Euclidean3D> plus  = node.getPlus();
",2,0,0,1,2,1,4,4,0,11,50,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,223,"        final Plane               plane = (Plane) cut.getHyperplane();
",2,0,0,2,4,1,4,4,0,11,62,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,226,"        final double offset = plane.getOffset(point);
",2,0,0,1,2,1,6,0,0,9,45,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,227,"        final boolean in    = FastMath.abs(offset) < 1.0e-10;
",2,1,0,1,2,1,6,0,0,10,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,230,"        if (offset < 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,231,"            near = minus;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,232,"            far  = plus;
",4,0,0,0,0,0,0,0,0,5,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,234,"            near = plus;
",4,0,0,0,0,0,0,0,0,5,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,235,"            far  = minus;
",4,0,0,0,0,0,0,0,0,5,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,238,"        if (in) {
",2,0,0,1,3,0,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,240,"            final SubHyperplane<Euclidean3D> facet = boundaryFacet(point, node);
",2,0,0,1,2,1,6,4,0,13,68,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,241,"            if (facet != null) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,242,"                return facet;
",2,0,0,0,0,1,0,0,0,2,13,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,247,"        final SubHyperplane<Euclidean3D> crossed = recurseFirstIntersection(near, point, line);
",2,0,0,1,2,1,8,4,0,15,87,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,248,"        if (crossed != null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,249,"            return crossed;
",2,0,0,0,0,1,0,0,0,2,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,252,"        if (!in) {
",2,0,0,1,3,0,0,0,0,3,10,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,254,"            final Vector3D hit3D = plane.intersection(line);
",2,0,0,1,2,1,6,2,0,11,48,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,255,"            if (hit3D != null) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,256,"                final SubHyperplane<Euclidean3D> facet = boundaryFacet(hit3D, node);
",2,0,0,1,2,1,6,4,0,13,68,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,257,"                if (facet != null) {
",2,1,0,1,3,0,0,0,0,3,20,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,258,"                    return facet;
",2,0,0,0,0,1,0,0,0,2,13,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,264,"        return recurseFirstIntersection(far, point, line);
",0,0,0,1,2,1,8,0,0,8,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,276,"        final Vector2D point2D = ((Plane) node.getCut().getHyperplane()).toSubSpace(point);
",2,0,0,5,10,1,10,4,0,17,83,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,278,"        final BoundaryAttribute<Euclidean3D> attribute =
",2,0,0,0,0,1,0,4,0,7,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,280,"        if ((attribute.getPlusOutside() != null) &&
",0,2,0,2,5,0,4,0,0,6,43,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,282,"            return attribute.getPlusOutside();
",0,0,0,1,2,1,4,0,0,4,34,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,284,"        if ((attribute.getPlusInside() != null) &&
",0,2,0,2,5,0,4,0,0,6,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,286,"            return attribute.getPlusInside();
",0,0,0,1,2,1,4,0,0,4,33,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,288,"        return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,298,"        return (PolyhedronsSet) applyTransform(new RotationTransform(center, rotation));
",4,0,0,3,6,1,2,4,0,10,80,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,371,"        return (PolyhedronsSet) applyTransform(new TranslationTransform(translation));
",2,0,0,3,6,1,2,4,0,8,78,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,63,"    public Line(final Line line) {
",4,0,0,1,3,2,0,2,0,8,30,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,64,"        this.direction = line.direction;
",6,0,0,0,0,0,0,0,0,7,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,65,"        this.zero      = line.zero;
",6,0,0,0,0,0,0,0,0,7,27,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,77,"            throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,67,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,87,"        return new Line(zero, zero.subtract(direction));
",2,0,0,2,4,1,6,2,0,10,48,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,101,"        return zero;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,112,"        return point.subtract(zero).dotProduct(direction);
",0,0,0,2,4,1,10,0,0,10,50,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,127,"        return new Vector1D(getAbscissa((Vector3D) point));
",2,0,0,3,6,1,2,4,0,8,51,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,145,"        final double angle = Vector3D.angle(direction, line.direction);
",6,0,0,1,2,1,6,0,0,13,63,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,146,"        return ((angle < 1.0e-10) || (angle > (FastMath.PI - 1.0e-10))) && contains(line.zero);
",12,5,0,5,10,1,2,0,0,19,87,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,154,"        return distance(p) < 1.0e-10;
",0,1,0,1,2,1,4,0,0,5,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,162,"        final Vector3D d = p.subtract(zero);
",2,0,0,1,2,1,6,2,0,11,36,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,163,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);
",6,0,0,2,4,1,6,4,0,18,77,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,164,"        return n.getNorm();
",0,0,0,1,2,1,4,0,0,4,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,173,"        final Vector3D normal = Vector3D.crossProduct(direction, line.direction);
",6,0,0,1,2,1,6,2,0,15,73,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,174,"        final double n = normal.getNorm();
",2,0,0,1,2,1,4,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,175,"        if (n < Precision.SAFE_MIN) {
",6,1,0,1,3,0,0,0,0,7,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,177,"            return distance(line.zero);
",4,0,0,1,2,1,2,0,0,6,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,181,"        final double offset = line.zero.subtract(zero).dotProduct(normal) / n;
",8,1,0,2,4,1,8,0,0,18,70,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,183,"        return FastMath.abs(offset);
",0,0,0,1,2,1,6,0,0,6,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,193,"        final double cos = direction.dotProduct(line.direction);
",6,0,0,1,2,1,4,0,0,11,56,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,194,"        final double n = 1 - cos * cos;
",6,2,0,0,0,1,0,0,0,9,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,195,"        if (n < Precision.EPSILON) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,197,"            return zero;
",2,0,0,0,0,1,0,0,0,2,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,200,"        final Vector3D delta0 = line.zero.subtract(zero);
",6,0,0,1,2,1,4,2,0,13,49,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,201,"        final double a        = delta0.dotProduct(direction);
",2,0,0,1,2,1,6,0,0,9,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,202,"        final double b        = delta0.dotProduct(line.direction);
",6,0,0,1,2,1,4,0,0,11,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,204,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);
",12,3,0,2,4,1,0,2,0,17,59,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,214,"        final Vector3D closest = closestPoint(line);
",2,0,0,1,2,1,4,2,0,9,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,215,"        return line.contains(closest) ? closest : null;
",2,0,0,1,2,1,6,0,0,8,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,222,"        return new SubLine(this, new IntervalsSet());
",0,0,0,2,4,1,0,4,0,4,45,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,32,41,"public class Line implements Embedding<Euclidean3D, Euclidean1D> {
",2,0,0,0,1,1,0,6,0,9,66,1,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,113,"        setNormal(normal);
",0,0,0,1,2,0,4,0,0,4,18,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,114,"        originOffset = -p.dotProduct(w);
",2,0,0,1,2,0,6,0,0,10,32,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,115,"        setFrame();
",0,0,0,1,2,0,2,0,0,2,11,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,116,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,125,"        originOffset = original.originOffset;
",6,0,0,0,0,0,0,0,0,7,37,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,126,"        origin       = original.origin;
",6,0,0,0,0,0,0,0,0,7,31,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,127,"        u            = original.u;
",6,0,0,0,0,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,128,"        v            = original.v;
",6,0,0,0,0,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,129,"        w            = original.w;
",6,0,0,0,0,0,0,0,0,7,26,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,130,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,139,"            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
",4,0,0,1,2,0,0,2,0,6,62,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,159,"        return origin;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,183,"        return u;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,195,"        return v;
",2,0,0,0,0,1,0,0,0,2,9,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,210,"        final Vector3D tmp = u;
",4,0,0,0,0,1,0,2,0,7,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,211,"        u = v;
",4,0,0,0,0,0,0,0,0,5,6,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,212,"        v = tmp;
",4,0,0,0,0,0,0,0,0,5,8,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,213,"        w = w.negate();
",2,0,0,1,2,0,4,0,0,7,15,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,214,"        originOffset = -originOffset;
",4,0,0,0,0,0,0,0,0,6,29,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,215,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,247,"        return new Vector3D(inPlane.getX(), u, inPlane.getY(), v, offset - originOffset, w);
",10,1,0,3,6,1,8,2,0,21,84,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,258,"        final double angle = Vector3D.angle(w, plane.w);
",6,0,0,1,2,1,6,0,0,13,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,259,"        return ((angle < 1.0e-10) && (FastMath.abs(originOffset - plane.originOffset) < 1.0e-10)) ||
",8,5,0,4,8,1,4,0,0,17,92,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,271,"        final Vector3D delta = origin.subtract(center);
",2,0,0,1,2,1,6,2,0,11,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,272,"        final Plane plane = new Plane(center.add(rotation.applyTo(delta)),
",2,0,0,2,5,1,10,4,0,17,66,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,276,"        plane.u = rotation.applyTo(u);
",4,0,0,1,2,0,6,0,0,11,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,277,"        plane.v = rotation.applyTo(v);
",4,0,0,1,2,0,6,0,0,11,30,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,279,"        return plane;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,290,"        final Plane plane = new Plane(origin.add(translation), w);
",4,0,0,2,4,1,6,4,0,15,58,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,293,"        plane.u = u;
",6,0,0,0,0,0,0,0,0,7,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,294,"        plane.v = v;
",6,0,0,0,0,0,0,0,0,7,12,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,296,"        return plane;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,306,"        final Vector3D direction = line.getDirection();
",2,0,0,1,2,1,4,2,0,9,47,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,307,"        final double   dot       = w.dotProduct(direction);
",2,0,0,1,2,1,6,0,0,9,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,308,"        if (FastMath.abs(dot) < 1.0e-10) {
",0,1,0,2,5,0,6,0,0,7,34,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,309,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,311,"        final Vector3D point = line.toSpace(Vector1D.ZERO);
",6,0,0,1,2,1,4,2,0,13,51,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,312,"        final double   k     = -(originOffset + w.dotProduct(point)) / dot;
",6,2,0,2,4,1,6,0,0,16,67,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,313,"        return new Vector3D(1.0, point, k, direction);
",6,0,0,1,2,1,0,2,0,8,46,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,361,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,384,"        return new PolyhedronsSet();
",0,0,0,1,2,1,0,2,0,2,28,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,392,"        return FastMath.abs(getOffset(p)) < 1.0e-10;
",0,1,0,2,4,1,8,0,0,9,44,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,418,"        return point.dotProduct(w) + originOffset;
",2,1,0,1,2,1,6,0,0,9,42,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,320,"        public RotationTransform(final Vector3D center, final Rotation rotation) {
",6,0,0,1,3,3,0,4,0,13,74,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,321,"            this.center   = center;
",4,0,0,0,0,0,0,0,0,5,23,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,322,"            this.rotation = rotation;
",4,0,0,0,0,0,0,0,0,5,25,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,323,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,327,"            final Vector3D delta = ((Vector3D) point).subtract(center);
",4,0,0,3,6,1,4,4,0,13,59,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,328,"            return new Vector3D(1.0, center, 1.0, rotation.applyTo(delta));
",2,0,0,2,4,1,6,2,0,10,63,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,333,"            return ((Plane) hyperplane).rotate(center, rotation);
",2,0,0,3,6,1,6,2,0,10,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,340,"            if (original != cachedOriginal) {
",4,1,0,1,3,0,0,0,0,5,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,343,"                final Plane    oPlane = (Plane) original;
",4,0,0,1,2,1,0,4,0,9,41,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,344,"                final Plane    tPlane = (Plane) transformed;
",4,0,0,1,2,1,0,4,0,9,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,345,"                final Vector3D p00    = oPlane.getOrigin();
",2,0,0,1,2,1,4,2,0,9,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,346,"                final Vector3D p10    = oPlane.toSpace(new Vector2D(1.0, 0.0));
",2,0,0,2,4,1,4,4,0,11,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,347,"                final Vector3D p01    = oPlane.toSpace(new Vector2D(0.0, 1.0));
",2,0,0,2,4,1,4,4,0,11,63,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,348,"                final Vector2D  tP00   = tPlane.toSubSpace(apply(p00));
",2,0,0,2,4,1,8,2,0,13,55,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,349,"                final Vector2D  tP10   = tPlane.toSubSpace(apply(p10));
",2,0,0,2,4,1,8,2,0,13,55,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,350,"                final Vector2D  tP01   = tPlane.toSubSpace(apply(p01));
",2,0,0,2,4,1,8,2,0,13,55,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,351,"                final AffineTransform at =
",2,0,0,0,0,1,0,2,0,5,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,356,"                cachedOriginal  = (Plane) original;
",4,0,0,1,2,0,0,2,0,7,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,357,"                cachedTransform = org.apache.commons.math3.geometry.euclidean.twod.Line.getTransform(at);
",18,0,0,1,2,0,4,0,0,23,89,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,360,"            return ((SubLine) sub).applyTransform(cachedTransform);
",2,0,0,3,6,1,4,2,0,8,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,302,"    private static class RotationTransform implements Transform<Euclidean3D, Euclidean2D> {
",2,0,0,0,1,2,0,6,0,10,87,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,156,"                addContribution(attribute.getPlusInside(), true);
",0,0,0,2,4,0,6,0,0,7,49,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,174,"                setSize(Double.POSITIVE_INFINITY);
",4,0,0,1,2,0,2,0,0,6,34,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,175,"                setBarycenter(Vector3D.NaN);
",4,0,0,1,2,0,2,0,0,6,28,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,182,"                    scaled = -scaled;
",4,0,0,0,0,0,0,0,0,6,17,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,389,"        public TranslationTransform(final Vector3D translation) {
",4,0,0,1,3,2,0,2,0,8,57,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,390,"            this.translation = translation;
",4,0,0,0,0,0,0,0,0,5,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,391,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,395,"            return new Vector3D(1.0, (Vector3D) point, 1.0, translation);
",4,0,0,2,4,1,0,4,0,8,61,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,400,"            return ((Plane) hyperplane).translate(translation);
",2,0,0,3,6,1,4,2,0,8,51,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,407,"            if (original != cachedOriginal) {
",4,1,0,1,3,0,0,0,0,5,33,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,410,"                final Plane   oPlane = (Plane) original;
",4,0,0,1,2,1,0,4,0,9,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,411,"                final Plane   tPlane = (Plane) transformed;
",4,0,0,1,2,1,0,4,0,9,43,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,412,"                final Vector2D shift  = tPlane.toSubSpace(apply(oPlane.getOrigin()));
",2,0,0,3,6,1,10,2,0,15,69,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,413,"                final AffineTransform at =
",2,0,0,0,0,1,0,2,0,5,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,416,"                cachedOriginal  = (Plane) original;
",4,0,0,1,2,0,0,2,0,7,35,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,417,"                cachedTransform =
",2,0,0,0,0,0,0,0,0,3,17,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,422,"            return ((SubLine) sub).applyTransform(cachedTransform);
",2,0,0,3,6,1,4,2,0,8,55,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSet,32,375,"    private static class TranslationTransform implements Transform<Euclidean3D, Euclidean2D> {
",2,0,0,0,1,2,0,6,0,10,90,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/Characterization,32,79,"                in = in.reunite(sub);
",2,0,0,1,2,0,6,0,0,9,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,193,"    private class XorMerger implements BSPTree.LeafMerger<S> {
",6,0,0,0,1,1,0,2,0,9,58,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,198,"            BSPTree<S> t = tree;
",4,0,0,0,0,0,0,4,0,8,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,199,"            if ((Boolean) leaf.getAttribute()) {
",0,0,0,3,7,0,4,2,0,6,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,201,"                t = recurseComplement(t);
",2,0,0,1,2,0,4,0,0,7,25,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,203,"            t.insertInTree(parentTree, isPlusChild);
",0,0,0,1,2,0,8,0,0,8,40,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,204,"            return t;
",2,0,0,0,0,1,0,0,0,2,9,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,176,"    private class IntersectionMerger implements BSPTree.LeafMerger<S> {
",6,0,0,0,1,1,0,2,0,9,67,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,181,"            if ((Boolean) leaf.getAttribute()) {
",0,0,0,3,7,0,4,2,0,6,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,183,"                tree.insertInTree(parentTree, isPlusChild);
",0,0,0,1,2,0,8,0,0,8,43,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,184,"                return tree;
",2,0,0,0,0,1,0,0,0,2,12,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,187,"            leaf.insertInTree(parentTree, isPlusChild);
",0,0,0,1,2,0,8,0,0,8,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,188,"            return leaf;
",2,0,0,0,0,1,0,0,0,2,12,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,44,"        if ((hyperplanes == null) || (hyperplanes.length == 0)) {
",6,3,0,3,7,0,0,0,0,9,57,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,45,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,49,"        final Region<S> region = hyperplanes[0].wholeSpace();
",2,0,1,2,4,1,2,4,0,11,53,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,52,"        BSPTree<S> node = region.getTree(false);
",2,0,0,1,2,0,4,4,0,11,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,53,"        node.setAttribute(Boolean.TRUE);
",4,0,0,1,2,0,4,0,0,8,32,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,54,"        for (final Hyperplane<S> hyperplane : hyperplanes) {
",4,0,0,1,3,1,0,4,0,9,52,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,55,"            if (node.insertCut(hyperplane)) {
",0,0,0,2,5,0,6,0,0,6,33,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,56,"                node.setAttribute(null);
",0,0,0,1,2,0,4,0,0,4,24,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,57,"                node.getPlus().setAttribute(Boolean.FALSE);
",4,0,0,2,4,0,6,0,0,10,43,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,58,"                node = node.getMinus();
",2,0,0,1,2,0,4,0,0,7,23,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,59,"                node.setAttribute(Boolean.TRUE);
",4,0,0,1,2,0,4,0,0,8,32,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,63,"        return region;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,89,"        final BSPTree<S> tree =
",2,0,0,0,0,1,0,4,0,7,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,91,"        tree.visit(nodeCleaner);
",0,0,0,1,2,0,6,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,92,"        return region1.buildNew(tree);
",0,0,0,1,2,1,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,103,"        final BSPTree<S> tree =
",2,0,0,0,0,1,0,4,0,7,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,105,"        tree.visit(nodeCleaner);
",0,0,0,1,2,0,6,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,106,"        return region1.buildNew(tree);
",0,0,0,1,2,1,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,117,"        final BSPTree<S> tree =
",2,0,0,0,0,1,0,4,0,7,23,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,119,"        tree.visit(nodeCleaner);
",0,0,0,1,2,0,6,0,0,6,24,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,120,"        return region1.buildNew(tree);
",0,0,0,1,2,1,6,0,0,6,30,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,129,"        return region.buildNew(recurseComplement(region.getTree(false)));
",0,0,0,3,6,1,10,0,0,11,65,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,137,"        if (node.getCut() == null) {
",0,1,0,2,5,0,4,0,0,5,28,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,138,"            return new BSPTree<S>(((Boolean) node.getAttribute()) ? Boolean.FALSE : Boolean.TRUE);
",8,0,0,4,8,1,4,6,0,18,86,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,142,"        BoundaryAttribute<S> attribute = (BoundaryAttribute<S>) node.getAttribute();
",2,0,0,2,4,0,4,8,0,14,76,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,143,"        if (attribute != null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,144,"            final SubHyperplane<S> plusOutside =
",2,0,0,0,0,1,0,4,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,146,"            final SubHyperplane<S> plusInside  =
",2,0,0,0,0,1,0,4,0,7,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,148,"            attribute = new BoundaryAttribute<S>(plusOutside, plusInside);
",6,0,0,1,2,0,0,4,0,11,62,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,151,"        return new BSPTree<S>(node.getCut().copySelf(),
",0,0,0,2,5,1,6,4,0,10,47,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,28,"public class RegionFactory<S extends Space> {
",4,0,0,0,1,1,0,2,0,7,45,1,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,141,"                if (components[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,24,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,142,"                    negInf = true;
",2,0,0,0,0,0,0,0,0,4,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,144,"                    posInf = true;
",2,0,0,0,0,0,0,0,0,4,14,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,147,"                nan = true;
",2,0,0,0,0,0,0,0,0,4,11,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,161,"            posInf = false;
",2,0,0,0,0,0,0,0,0,4,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,162,"            negInf = false;
",2,0,0,0,0,0,0,0,0,4,15,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,163,"            nan    = true;
",2,0,0,0,0,0,0,0,0,4,14,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,170,"            encoding = new long[] {
",2,0,0,1,3,0,0,0,0,3,23,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,189,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,250,"                return +1;
",0,0,0,0,0,1,0,0,0,1,10,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,252,"                return -1;
",0,0,0,0,0,1,0,0,0,1,10,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,254,"                return -1;
",0,0,0,0,0,1,0,0,0,1,10,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,256,"                return +1;
",0,0,0,0,0,1,0,0,0,1,10,11,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,260,"                    encode(ot.offset);
",4,0,0,1,2,0,2,0,0,6,18,14,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,262,"                    ot.encode(offset);
",0,0,0,1,2,0,6,0,0,6,18,15,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,274,"                if (encoding.length < ot.encoding.length) {
",10,1,0,1,3,0,0,0,0,11,43,11,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,275,"                    return -1;
",0,0,0,0,0,1,0,0,0,1,10,13,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,276,"                } else if (encoding.length > ot.encoding.length) {
",10,1,0,1,4,0,0,0,0,11,50,12,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,277,"                    return +1;
",0,0,0,0,0,1,0,0,0,1,10,14,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,279,"                    return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,285,"        return components.length - ot.components.length;
",10,1,0,0,0,1,0,0,0,11,48,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,292,"        if (this == other) {
",2,1,0,1,3,0,0,0,0,3,20,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,293,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,294,"        } else if (other instanceof OrderedTuple) {
",2,0,0,1,4,0,0,2,0,4,43,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,295,"            return compareTo((OrderedTuple) other) == 0;
",2,1,0,2,4,1,2,2,0,7,44,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,297,"            return false;
",0,0,0,0,0,1,0,0,0,1,13,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,304,"        return Arrays.hashCode(components)   ^
",0,1,0,1,2,1,6,0,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,316,"        return components.clone();
",0,0,0,1,2,1,4,0,0,4,26,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/OrderedTuple,32,94,"public class OrderedTuple implements Comparable<OrderedTuple> {
",2,0,0,0,1,1,0,4,0,7,63,1,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,264,"            return 1 + ((left  == null) ? 0 : left.size()) + ((right == null) ? 0 : right.size());
",4,3,0,6,12,1,8,0,0,15,86,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,290,"                node = node.right;
",6,0,0,0,0,0,0,0,0,7,18,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,302,"            if (left != null) {
",2,1,0,1,3,0,0,0,0,3,19,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,303,"                final Node node = left.getLargest();
",2,0,0,1,2,1,4,2,0,9,36,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,304,"                if (node != null) {
",2,1,0,1,3,0,0,0,0,3,19,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,305,"                    return node;
",2,0,0,0,0,1,0,0,0,2,12,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,309,"            for (Node node = this; node.parent != null; node = node.parent) {
",12,1,0,1,3,0,0,2,0,16,65,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,310,"                if (node != node.parent.left) {
",8,1,0,1,3,0,0,0,0,9,31,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,311,"                    return node.parent;
",4,0,0,0,0,1,0,0,0,4,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,315,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,336,"                    return node.parent;
",4,0,0,0,0,1,0,0,0,4,19,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,398,"                    child.parent = node;
",6,0,0,0,0,0,0,0,0,7,20,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,428,"                        left.skew  = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,429,"                        right.skew = Skew.RIGHT_HIGH;
",8,0,0,0,0,0,0,0,0,9,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,430,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,432,"                        left.skew  = Skew.LEFT_HIGH;
",8,0,0,0,0,0,0,0,0,9,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,433,"                        right.skew = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,434,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,465,"                    final Skew s = right.left.skew;
",8,0,0,0,0,1,0,2,0,11,31,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,466,"                    right.rotateCW();
",0,0,0,1,2,0,4,0,0,4,17,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,467,"                    rotateCCW();
",0,0,0,1,2,0,2,0,0,2,12,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,468,"                    switch (s) {
",2,0,0,1,3,0,0,0,0,2,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,470,"                        left.skew  = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,471,"                        right.skew = Skew.RIGHT_HIGH;
",8,0,0,0,0,0,0,0,0,9,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,472,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,474,"                        left.skew  = Skew.LEFT_HIGH;
",8,0,0,0,0,0,0,0,0,9,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,475,"                        right.skew = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,476,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,478,"                        left.skew  = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,479,"                        right.skew = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,481,"                    skew = Skew.BALANCED;
",6,0,0,0,0,0,0,0,0,7,21,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,505,"                    rotateCCW();
",0,0,0,1,2,0,2,0,0,2,12,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,506,"                    skew      = Skew.LEFT_HIGH;
",6,0,0,0,0,0,0,0,0,7,27,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,507,"                    left.skew = Skew.RIGHT_HIGH;
",8,0,0,0,0,0,0,0,0,9,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,508,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,515,"                        left.skew  = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,516,"                        right.skew = Skew.RIGHT_HIGH;
",8,0,0,0,0,0,0,0,0,9,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,517,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,519,"                        left.skew  = Skew.LEFT_HIGH;
",8,0,0,0,0,0,0,0,0,9,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,520,"                        right.skew = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,521,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,544,"                if (left.skew == Skew.LEFT_HIGH) {
",8,1,0,1,3,0,0,0,0,9,34,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,545,"                    rotateCW();
",0,0,0,1,2,0,2,0,0,2,11,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,546,"                    skew       = Skew.BALANCED;
",6,0,0,0,0,0,0,0,0,7,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,547,"                    right.skew = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,548,"                    return true;
",0,0,0,0,0,1,0,0,0,1,12,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,549,"                } else if (left.skew == Skew.BALANCED) {
",8,1,0,1,4,0,0,0,0,9,40,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,550,"                    rotateCW();
",0,0,0,1,2,0,2,0,0,2,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,551,"                    skew       = Skew.RIGHT_HIGH;
",6,0,0,0,0,0,0,0,0,7,29,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,552,"                    right.skew = Skew.LEFT_HIGH;
",8,0,0,0,0,0,0,0,0,9,28,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,553,"                    return false;
",0,0,0,0,0,1,0,0,0,1,13,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,555,"                    final Skew s = left.right.skew;
",8,0,0,0,0,1,0,2,0,11,31,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,556,"                    left.rotateCCW();
",0,0,0,1,2,0,4,0,0,4,17,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,557,"                    rotateCW();
",0,0,0,1,2,0,2,0,0,2,11,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,558,"                    switch (s) {
",2,0,0,1,3,0,0,0,0,2,12,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,560,"                        left.skew  = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,561,"                        right.skew = Skew.RIGHT_HIGH;
",8,0,0,0,0,0,0,0,0,9,29,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,562,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,564,"                        left.skew  = Skew.LEFT_HIGH;
",8,0,0,0,0,0,0,0,0,9,28,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,565,"                        right.skew = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,566,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,568,"                        left.skew  = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,569,"                        right.skew = Skew.BALANCED;
",8,0,0,0,0,0,0,0,0,9,27,10,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,571,"                    skew = Skew.BALANCED;
",6,0,0,0,0,0,0,0,0,7,21,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,572,"                    return true;
",0,0,0,0,0,1,0,0,0,1,12,9,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,575,"                skew = Skew.LEFT_HIGH;
",6,0,0,0,0,0,0,0,0,7,22,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,576,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,600,"                right.right.parent = right;
",8,0,0,0,0,0,0,0,0,9,27,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/utilities/AVLTree,32,625,"                left.left.parent = left;
",8,0,0,0,0,0,0,0,0,9,24,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,209,"    private class DifferenceMerger implements BSPTree.LeafMerger<S> {
",6,0,0,0,1,1,0,2,0,9,65,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,214,"            if ((Boolean) leaf.getAttribute()) {
",0,0,0,3,7,0,4,2,0,6,36,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,216,"                final BSPTree<S> argTree =
",2,0,0,0,0,1,0,4,0,7,26,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,218,"                argTree.insertInTree(parentTree, isPlusChild);
",0,0,0,1,2,0,8,0,0,8,46,8,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,219,"                return argTree;
",2,0,0,0,0,1,0,0,0,2,15,7,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,222,"            final BSPTree<S> instanceTree =
",2,0,0,0,0,1,0,4,0,7,31,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,224,"            instanceTree.insertInTree(parentTree, isPlusChild);
",0,0,0,1,2,0,8,0,0,8,51,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/RegionFactory,32,225,"            return instanceTree;
",2,0,0,0,0,1,0,0,0,2,20,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundarySizeVisitor,32,33,"    public BoundarySizeVisitor() {
",2,0,0,1,3,1,0,0,0,3,30,2,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundarySizeVisitor,32,34,"        boundarySize = 0;
",2,0,0,0,0,0,0,0,0,3,17,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundarySizeVisitor,32,35,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundarySizeVisitor,32,39,"        return Order.MINUS_SUB_PLUS;
",4,0,0,0,0,1,0,0,0,4,28,5,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundarySizeVisitor,32,45,"        final BoundaryAttribute<S> attribute =
",2,0,0,0,0,1,0,4,0,7,38,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundarySizeVisitor,32,47,"        if (attribute.getPlusOutside() != null) {
",0,1,0,2,5,0,4,0,0,5,41,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundarySizeVisitor,32,48,"            boundarySize += attribute.getPlusOutside().getSize();
",2,0,0,2,4,0,6,0,0,9,53,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundarySizeVisitor,32,50,"        if (attribute.getPlusInside() != null) {
",0,1,0,2,5,0,4,0,0,5,40,4,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundarySizeVisitor,32,51,"            boundarySize += attribute.getPlusInside().getSize();
",2,0,0,2,4,0,6,0,0,9,52,6,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundarySizeVisitor,32,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundarySizeVisitor,32,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BoundarySizeVisitor,32,63,"        return boundarySize;
",2,0,0,0,0,1,0,0,0,2,20,4,0.00000,0
