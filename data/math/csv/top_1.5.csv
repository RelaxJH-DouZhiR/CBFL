dataset,project,path,version,codeLine,statement,varTotal,optTotal,array,bracketDepth,bracketTotal,keywordTotal,methodTotal,typeTotal,logic,lengthEle,lengthWord,depth,suspicious,accuracy
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,53,"        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);
",10,0,0,1,2,0,0,0,0,10,66,4,1,0
defect4j,math,org/apache/commons/math3/fraction/FractionConversionException,1,54,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,48,"                                Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.80000,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,49,"        getContext().addMessage(pattern, args);
",0,0,0,2,4,0,8,0,0,8,39,5,0.80000,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,1,50,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.80000,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,306,"                throw new FractionConversionException(value, p2, q2);
",6,0,0,1,2,0,0,2,0,8,53,9,0.50000,1
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,332,"            numerator   = BigInteger.valueOf(p1);
",2,0,0,1,2,0,6,0,0,9,37,6,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,333,"            denominator = BigInteger.valueOf(q1);
",2,0,0,1,2,0,6,0,0,9,37,6,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,356,"        this(value, 0, maxDenominator, 100);
",4,0,0,1,2,0,0,0,0,4,36,4,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,357,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,144,"       this(value, 0, maxDenominator, 100);
",4,0,0,1,2,0,0,0,0,4,36,4,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,145,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,215,"                throw new FractionConversionException(value, p2, q2);
",6,0,0,1,2,0,0,2,0,8,53,9,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,239,"            this.numerator = (int) p1;
",4,0,0,1,2,0,0,0,0,5,26,6,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,1,240,"            this.denominator = (int) q1;
",4,0,0,1,2,0,0,0,0,5,28,6,0.50000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,69,"        this(LocalizedFormats.ILLEGAL_STATE);
",4,0,0,1,2,0,0,0,0,4,37,5,0.23529,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.23529,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,74,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.23529,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.22222,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.22222,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.22222,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,1,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.22222,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,329,"            numerator   = BigInteger.valueOf(p2);
",2,0,0,1,2,0,6,0,0,9,37,6,0.20000,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,330,"            denominator = BigInteger.valueOf(q2);
",2,0,0,1,2,0,6,0,0,9,37,6,0.20000,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,328,"        if (q2 < maxDenominator) {
",4,1,0,1,3,0,0,0,0,5,26,4,0.16667,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,335,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,271,"        throws FractionConversionException {
",2,0,0,0,1,0,0,0,0,2,36,2,0.14286,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,272,"        long overflow = Integer.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,34,5,0.14286,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,273,"        double r0 = value;
",4,0,0,0,0,0,0,0,0,4,18,5,0.14286,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,274,"        long a0 = (long) FastMath.floor(r0);
",2,0,0,2,4,0,6,0,0,8,36,5,0.14286,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,275,"        if (a0 > overflow) {
",4,1,0,1,3,0,0,0,0,5,20,4,0.14286,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,281,"        if (FastMath.abs(a0 - value) < epsilon) {
",6,2,0,2,5,0,4,0,0,12,41,4,0.14286,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,287,"        long p0 = 1;
",2,0,0,0,0,0,0,0,0,2,12,5,0.14286,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,288,"        long q0 = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.14286,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,289,"        long p1 = a0;
",4,0,0,0,0,0,0,0,0,4,13,5,0.14286,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,290,"        long q1 = 1;
",2,0,0,0,0,0,0,0,0,2,12,5,0.14286,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,292,"        long p2 = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.14286,0
defect4j,math,org/apache/commons/math3/fraction/BigFraction,1,293,"        long q2 = 1;
",2,0,0,0,0,0,0,0,0,2,12,5,0.14286,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,193,"        return inverseCumulativeProbability(random.nextDouble());
",0,0,0,2,4,1,6,0,0,6,57,5,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,86,"        final int indexRm1 = iRm1[index];
",2,0,1,1,2,1,0,0,0,7,33,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,87,"        final int indexRm2 = iRm2[index];
",2,0,1,1,2,1,0,0,0,7,33,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,89,"        final int v0       = v[index];
",2,0,1,1,2,1,0,0,0,7,30,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,90,"        final int vM1      = v[i1[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,91,"        final int vM2      = v[i2[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,92,"        final int vM3      = v[i3[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,94,"        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);
",2,3,1,4,8,1,0,0,0,14,71,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,95,"        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));
",10,5,0,4,8,1,0,0,0,16,57,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,96,"        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));
",8,4,0,3,6,1,0,0,0,13,49,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,97,"        final int z3 = z1      ^ z2;
",6,1,0,0,0,1,0,0,0,8,28,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,98,"        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));
",16,7,0,6,12,0,0,0,0,23,72,5,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,100,"        v[index]     = z3;
",2,0,1,1,2,0,0,0,0,7,18,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,101,"        v[indexRm1]  = z4;
",2,0,1,1,2,0,0,0,0,7,18,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,102,"        v[indexRm2] &= 0x80000000;
",0,0,1,1,2,0,0,0,0,5,26,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,103,"        index        = indexRm1;
",4,0,0,0,0,0,0,0,0,5,24,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,108,"        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);
",6,3,0,2,4,0,0,0,0,10,36,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,109,"        z4 = z4 ^ ((z4 << 15) & 0x9b868000);
",6,3,0,2,4,0,0,0,0,10,36,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,2,111,"        return z4 >>> (32 - bits);
",4,2,0,1,2,1,0,0,0,6,26,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,90,"        final long high = ((long) next(26)) << 26;
",2,1,0,3,6,1,2,0,0,6,42,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,91,"        final int  low  = next(26);
",2,0,0,1,2,1,2,0,0,5,27,4,1.00000,0
defect4j,math,org/apache/commons/math3/random/BitsStreamGenerator,2,92,"        return (high | low) * 0x1.0p-52d;
",4,2,0,1,2,1,0,0,0,6,33,4,1.00000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,130,"            double k = FastMath.sqrt((1.0 - p) / p);
",6,2,0,2,4,0,4,0,0,12,40,7,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,131,"            double tmp = mu - k * sigma;
",8,2,0,0,0,0,0,0,0,10,28,7,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,132,"            if (tmp > lower) {
",4,1,0,1,3,0,0,0,0,5,18,6,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,135,"            k = 1.0 / k;
",4,1,0,0,0,0,0,0,0,6,12,6,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,136,"            tmp = mu + k * sigma;
",8,2,0,0,0,0,0,0,0,11,21,6,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,137,"            if (tmp < upper) {
",4,1,0,1,3,0,0,0,0,5,18,6,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,138,"                upper = ((int) Math.ceil(tmp)) - 1;
",2,1,0,3,6,0,6,0,0,10,35,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,2,385,"        return Math.sqrt(a);
",0,0,0,1,2,1,6,0,0,6,20,5,0.20000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,2,125,"        final double mu = getNumericalMean();
",2,0,0,1,2,1,2,0,0,5,37,4,0.20000,0
defect4j,math,org/apache/commons/math3/distribution/HypergeometricDistribution,2,268,"        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
",0,2,0,6,12,1,6,0,0,8,90,4,0.16667,1
defect4j,math,org/apache/commons/math3/util/MathArrays,3,816,"        final int len = a.length;
",6,0,0,0,0,1,0,0,0,7,25,4,0.09091,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,817,"        if (len != b.length) {
",6,1,0,1,3,0,0,0,0,7,22,4,0.09091,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,823,"        final double[] prodHigh = new double[len];
",2,0,1,2,4,1,0,0,0,5,42,4,0.09091,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,824,"        double prodLowSum = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.09091,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,826,"        for (int i = 0; i < len; i++) {
",8,1,0,1,3,0,0,0,0,10,31,4,0.09091,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,827,"            final double ai = a[i];
",2,0,1,1,2,1,0,0,0,7,23,6,0.09091,0
defect4j,math,org/apache/commons/math3/util/MathArrays,3,828,"            final double ca = SPLIT_FACTOR * ai;
",6,1,0,0,0,1,0,0,0,8,36,6,0.09091,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,113,"        Line line1 = (Line) getHyperplane();
",2,0,0,2,4,0,2,4,0,8,36,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,114,"        Line line2 = (Line) subLine.getHyperplane();
",2,0,0,2,4,0,4,4,0,10,44,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,117,"        Vector2D v2D = line1.intersection(line2);
",2,0,0,1,2,0,6,2,0,10,41,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,120,"        Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
",2,0,0,3,6,0,10,2,0,14,71,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,56,"        this(new Line(start, end), buildIntervalSet(start, end));
",4,0,0,3,6,0,6,2,0,12,57,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,113,"        Vector3D v1D = line.intersection(subLine.line);
",6,0,0,1,2,0,4,2,0,12,47,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,116,"        Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));
",2,0,0,2,4,0,10,2,0,14,65,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,156,"        return distance(p) < 1.0e-10;
",0,1,0,1,2,1,4,0,0,5,29,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,164,"        final Vector3D d = p.subtract(zero);
",2,0,0,1,2,1,6,2,0,11,36,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,165,"        final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);
",6,0,0,2,4,1,6,4,0,18,77,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,166,"        return n.getNorm();
",0,0,0,1,2,1,4,0,0,4,19,5,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,195,"        final double cos = direction.dotProduct(line.direction);
",6,0,0,1,2,1,4,0,0,11,56,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,196,"        final double n = 1 - cos * cos;
",6,2,0,0,0,1,0,0,0,9,31,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,197,"        if (n < Precision.EPSILON) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,202,"        final Vector3D delta0 = line.zero.subtract(zero);
",6,0,0,1,2,1,4,2,0,13,49,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,203,"        final double a        = delta0.dotProduct(direction);
",2,0,0,1,2,1,6,0,0,9,53,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,204,"        final double b        = delta0.dotProduct(line.direction);
",6,0,0,1,2,1,4,0,0,11,58,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,206,"        return new Vector3D(1, zero, (a - b * cos) / n, direction);
",12,3,0,2,4,1,0,2,0,17,59,5,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,216,"        final Vector3D closest = closestPoint(line);
",2,0,0,1,2,1,4,2,0,9,44,4,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,217,"        return line.contains(closest) ? closest : null;
",2,0,0,1,2,1,6,0,0,8,47,5,0.14286,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,56,"        super(new Line(start, end), buildIntervalSet(start, end));
",4,0,0,3,6,0,6,2,0,12,58,4,0.12500,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,57,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,137,"        final Line line = new Line(start, end);
",6,0,0,1,2,1,0,4,0,11,39,4,0.12500,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubLine,4,138,"        return new IntervalsSet(line.toSubSpace(start).getX(),
",0,0,0,2,5,1,8,2,0,10,54,5,0.12500,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,114,"        return point.subtract(zero).dotProduct(direction);
",0,0,0,2,4,1,10,0,0,10,50,5,0.12500,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,4,129,"        return new Vector1D(getAbscissa((Vector3D) point));
",2,0,0,3,6,1,2,4,0,8,51,5,0.12500,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,118,"        final SubHyperplane<Euclidean1D> upperCut =
",2,0,0,0,0,1,0,4,0,7,43,4,0.12121,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,120,"        return new BSPTree<Euclidean1D>(lowerCut,
",2,0,0,0,1,1,0,4,0,6,41,5,0.12121,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,107,"        final SubHyperplane<Euclidean1D> lowerCut =
",2,0,0,0,0,1,0,4,0,7,43,4,0.11429,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,109,"        if (Double.isInfinite(upper) && (upper > 0)) {
",2,2,0,3,7,0,6,0,0,10,46,4,0.11429,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,139,"        final Line line = new Line(start, end);
",6,0,0,1,2,1,0,4,0,11,39,4,0.11111,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/SubLine,4,140,"        return new IntervalsSet(line.toSubSpace(start).getX(),
",0,0,0,2,5,1,8,2,0,10,54,5,0.11111,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,47,"        super(buildTree(lower, upper));
",0,0,0,2,4,0,6,0,0,6,31,5,0.10811,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10811,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/IntervalsSet,4,94,"        if (Double.isInfinite(lower) && (lower < 0)) {
",2,2,0,3,7,0,6,0,0,10,46,4,0.10811,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,115,"                   final Object attribute) {
",2,0,0,0,2,1,0,2,0,5,25,3,0.08696,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,116,"        this.cut       = cut;
",4,0,0,0,0,0,0,0,0,5,21,4,0.08696,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,117,"        this.plus      = plus;
",4,0,0,0,0,0,0,0,0,5,22,4,0.08696,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,118,"        this.minus     = minus;
",4,0,0,0,0,0,0,0,0,5,23,4,0.08696,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,119,"        this.parent    = null;
",2,0,0,0,0,0,0,0,0,3,22,4,0.08696,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,120,"        this.attribute = attribute;
",4,0,0,0,0,0,0,0,0,5,27,4,0.08696,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,121,"        plus.parent    = this;
",4,0,0,0,0,0,0,0,0,5,22,4,0.08696,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,122,"        minus.parent   = this;
",4,0,0,0,0,0,0,0,0,5,22,4,0.08696,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/BSPTree,4,123,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08696,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,39,"        super(hyperplane, remainingRegion);
",4,0,0,1,2,0,0,0,0,4,35,4,0.08696,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/oned/SubOrientedPoint,4,40,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08696,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,304,"        if (real == 0.0 && imaginary == 0.0) {
",4,3,0,1,3,0,0,0,0,7,38,4,0.25000,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,300,"        if (isNaN) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.20000,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,348,"                return (real == c.real) && (imaginary == c.imaginary);
",12,3,0,2,4,1,0,0,0,15,54,8,0.02439,0
defect4j,math,org/apache/commons/math3/complex/Complex,5,305,"            return NaN;
",2,0,0,0,0,1,0,0,0,2,11,6,0.00000,1
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,451,"                if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {
",8,1,0,2,5,0,0,0,0,10,62,9,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,233,"        if (mti >= N) { // generate N words at one time
",4,1,0,1,3,0,0,0,0,5,47,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,234,"            int mtNext = mt[0];
",2,0,1,1,2,0,0,0,0,4,19,7,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,235,"            for (int k = 0; k < N - M; ++k) {
",10,2,0,1,3,0,0,0,0,13,33,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,236,"                int mtCurr = mtNext;
",4,0,0,0,0,0,0,0,0,4,20,9,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,237,"                mtNext = mt[k + 1];
",4,1,1,1,2,0,0,0,0,8,19,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,238,"                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);
",6,3,0,2,4,0,0,0,0,10,50,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,239,"                mt[k] = mt[k + M] ^ (y >>> 1) ^ MAG01[y & 0x1];
",8,4,1,4,8,0,0,0,0,21,47,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,241,"            for (int k = N - M; k < N - 1; ++k) {
",12,3,0,1,3,0,0,0,0,16,37,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,242,"                int mtCurr = mtNext;
",4,0,0,0,0,0,0,0,0,4,20,9,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,243,"                mtNext = mt[k + 1];
",4,1,1,1,2,0,0,0,0,8,19,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,244,"                y = (mtCurr & 0x80000000) | (mtNext & 0x7fffffff);
",6,3,0,2,4,0,0,0,0,10,50,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,245,"                mt[k] = mt[k + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];
",10,5,1,5,10,0,0,0,0,24,53,8,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,247,"            y = (mtNext & 0x80000000) | (mt[0] & 0x7fffffff);
",4,3,1,3,6,0,0,0,0,10,49,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,248,"            mt[N - 1] = mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];
",8,5,1,4,8,0,0,0,0,20,51,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,250,"            mti = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,253,"        y = mt[mti++];
",4,0,1,1,2,0,0,0,0,8,14,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,256,"        y ^=  y >>> 11;
",4,1,0,0,0,0,0,0,0,6,15,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,257,"        y ^= (y <<   7) & 0x9d2c5680;
",4,2,0,1,2,0,0,0,0,7,29,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,258,"        y ^= (y <<  15) & 0xefc60000;
",4,2,0,1,2,0,0,0,0,7,29,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,259,"        y ^=  y >>> 18;
",4,1,0,0,0,0,0,0,0,6,15,4,1,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,6,261,"        return y >>> (32 - bits);
",4,2,0,1,2,1,0,0,0,6,25,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,843,"        DoubleIndex(double value, int index) {
",6,0,0,1,3,0,0,0,0,6,38,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,844,"            this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,845,"            this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,846,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,850,"            return Double.compare(value, o.value);
",4,0,0,1,2,1,6,0,0,10,38,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,833,"    private static class DoubleIndex implements Comparable<DoubleIndex> {
",2,0,0,0,1,2,0,4,0,8,69,2,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,892,"        public FitnessFunction() {
",2,0,0,1,3,1,0,0,0,3,26,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,893,"            valueRange = 1;
",2,0,0,0,0,0,0,0,0,3,15,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,894,"            isRepairMode = true;
",2,0,0,0,0,0,0,0,0,4,20,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,895,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,903,"            if (isRepairMode) {
",2,0,0,1,3,0,0,0,0,2,19,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,904,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,905,"                value = CMAESOptimizer.this.computeObjectiveValue(repaired) +
",4,1,0,1,2,0,4,0,0,10,61,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,907,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,910,"            return isMinimize ? value : -value;
",6,0,0,0,0,1,0,0,0,7,35,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,936,"            this.valueRange = valueRange;
",4,0,0,0,0,0,0,0,0,5,29,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,937,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,944,"            final double[] lB = CMAESOptimizer.this.getLowerBound();
",4,0,0,2,4,1,2,0,0,7,56,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,945,"            final double[] uB = CMAESOptimizer.this.getUpperBound();
",4,0,0,2,4,1,2,0,0,7,56,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,947,"            final double[] repaired = new double[x.length];
",6,0,0,2,4,1,0,0,0,7,47,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,948,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,949,"                if (x[i] < lB[i]) {
",0,1,1,3,7,0,0,0,0,9,19,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,951,"                } else if (x[i] > uB[i]) {
",0,1,1,3,8,0,0,0,0,9,26,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,954,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,957,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,966,"            double penalty = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,967,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,968,"                double diff = Math.abs(x[i] - repaired[i]);
",2,1,1,3,6,0,4,0,0,15,43,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,969,"                penalty += diff * valueRange;
",6,1,0,0,0,0,0,0,0,8,29,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,971,"            return isMinimize ? penalty : -penalty;
",6,0,0,0,0,1,0,0,0,7,39,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,881,"    private class FitnessFunction {
",2,0,0,0,1,1,0,0,0,3,31,2,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,370,"        isMinimize = getGoalType().equals(GoalType.MINIMIZE);
",6,0,0,2,4,0,4,0,0,11,53,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,371,"        final FitnessFunction fitfun = new FitnessFunction();
",2,0,0,1,2,1,0,4,0,7,53,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,372,"        final double[] guess = getStartPoint();
",2,0,0,2,4,1,2,0,0,5,39,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,374,"        dimension = guess.length;
",6,0,0,0,0,0,0,0,0,7,25,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,375,"        initializeCMA(guess);
",0,0,0,1,2,0,4,0,0,4,21,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,376,"        iterations = 0;
",2,0,0,0,0,0,0,0,0,3,15,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,377,"        double bestValue = fitfun.value(guess);
",2,0,0,1,2,0,6,0,0,8,39,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,378,"        push(fitnessHistory, bestValue);
",0,0,0,1,2,0,6,0,0,6,32,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,379,"        PointValuePair optimum
",2,0,0,0,0,0,0,2,0,4,22,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,382,"        PointValuePair lastResult = null;
",2,0,0,0,0,0,0,2,0,4,33,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,387,"        for (iterations = 1; iterations <= maxIterations; iterations++) {
",8,1,0,1,3,0,0,0,0,11,65,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,390,"            final RealMatrix arz = randn1(dimension, lambda);
",2,0,0,1,2,1,6,2,0,11,49,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,391,"            final RealMatrix arx = zeros(dimension, lambda);
",2,0,0,1,2,1,6,2,0,11,48,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,392,"            final double[] fitness = new double[lambda];
",2,0,1,2,4,1,0,0,0,5,44,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,394,"            for (int k = 0; k < lambda; k++) {
",8,1,0,1,3,0,0,0,0,10,34,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,395,"                RealMatrix arxk = null;
",2,0,0,0,0,0,0,2,0,4,23,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,396,"                for (int i = 0; i < checkFeasableCount + 1; i++) {
",8,2,0,1,3,0,0,0,0,11,50,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,397,"                    if (diagonalOnly <= 0) {
",2,1,0,1,3,0,0,0,0,3,24,11,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,404,"                    if (i >= checkFeasableCount ||
",4,2,0,0,1,0,0,0,0,6,30,11,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,411,"                copyColumn(arxk, 0, arx, k);
",0,0,0,1,2,0,8,0,0,8,28,10,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,413,"                    fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness
",0,0,1,3,6,0,10,0,0,15,63,11,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,416,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,419,"            final int[] arindex = sortedIndices(fitness);
",2,0,0,2,4,1,4,0,0,7,45,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,421,"            final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)
",4,0,0,2,4,1,0,2,0,7,65,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,422,"            final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));
",2,0,0,2,4,1,12,2,0,17,78,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,423,"            xmean = bestArx.multiply(weights);
",2,0,0,1,2,0,6,0,0,9,34,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,424,"            final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));
",2,0,0,2,4,1,12,2,0,17,78,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,425,"            final RealMatrix zmean = bestArz.multiply(weights);
",2,0,0,1,2,1,6,2,0,11,51,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,426,"            final boolean hsig = updateEvolutionPaths(zmean, xold);
",2,0,0,1,2,1,6,0,0,9,55,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,427,"            if (diagonalOnly <= 0) {
",2,1,0,1,3,0,0,0,0,3,24,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,433,"            sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps));
",10,4,0,3,6,0,8,0,0,23,63,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,434,"            final double bestFitness = fitness[arindex[0]];
",2,0,1,2,4,1,0,0,0,7,47,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,435,"            final double worstFitness = fitness[arindex[arindex.length - 1]];
",6,1,1,2,4,1,0,0,0,12,65,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,436,"            if (bestValue > bestFitness) {
",4,1,0,1,3,0,0,0,0,5,30,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,437,"                bestValue = bestFitness;
",4,0,0,0,0,0,0,0,0,5,24,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,438,"                lastResult = optimum;
",4,0,0,0,0,0,0,0,0,5,21,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,439,"                optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),
",2,0,0,2,5,0,8,2,0,13,65,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,441,"                if (getConvergenceChecker() != null &&
",0,2,0,1,3,0,2,0,0,5,38,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,450,"            if (stopFitness != 0) { // only if stopFitness is defined
",2,1,0,1,3,0,0,0,0,3,57,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,455,"            final double[] sqrtDiagC = sqrt(diagC).getColumn(0);
",2,0,0,3,6,1,6,0,0,9,52,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,456,"            final double[] pcCol = pc.getColumn(0);
",2,0,0,2,4,1,4,0,0,7,39,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,457,"            for (int i = 0; i < dimension; i++) {
",8,1,0,1,3,0,0,0,0,10,37,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,458,"                if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {
",4,2,1,5,11,0,8,0,0,22,68,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,459,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,465,"            for (int i = 0; i < dimension; i++) {
",8,1,0,1,3,0,0,0,0,10,37,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,466,"                if (sigma * sqrtDiagC[i] > stopTolUpX) {
",4,2,1,2,5,0,0,0,0,10,40,9,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,470,"            final double historyBest = min(fitnessHistory);
",2,0,0,1,2,1,4,0,0,7,47,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,471,"            final double historyWorst = max(fitnessHistory);
",2,0,0,1,2,1,4,0,0,7,48,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,472,"            if (iterations > 2 &&
",2,2,0,0,1,0,0,0,0,4,21,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,477,"            if (iterations > fitnessHistory.length &&
",6,2,0,0,1,0,0,0,0,8,41,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,482,"            if (max(diagD) / min(diagD) > 1e7) {
",0,2,0,3,7,0,8,0,0,10,36,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,486,"            if (getConvergenceChecker() != null) {
",0,1,0,2,5,0,2,0,0,4,38,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,497,"            if (bestValue == fitness[arindex[(int)(0.1+lambda/4.)]]) {
",4,3,1,5,11,0,0,0,0,11,58,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,500,"            if (iterations > 2 && Math.max(historyWorst, bestFitness) -
",2,3,0,1,3,0,8,0,0,13,59,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,505,"            push(fitnessHistory,bestFitness);
",0,0,0,1,2,0,6,0,0,6,33,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,506,"            fitfun.setValueRange(worstFitness-bestFitness);
",4,1,0,1,2,0,4,0,0,9,47,8,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,507,"            if (generateStatistics) {
",2,0,0,1,3,0,0,0,0,2,25,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,514,"        return optimum;
",2,0,0,0,0,1,0,0,0,2,15,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,546,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,566,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,574,"        if (lambda <= 0) {
",2,1,0,1,3,0,0,0,0,3,18,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,578,"        final double[][] sigmaArray = new double[guess.length][1];
",6,0,0,4,8,1,0,0,0,7,58,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,579,"        for (int i = 0; i < guess.length; i++) {
",10,1,0,1,3,0,0,0,0,12,40,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,580,"            sigmaArray[i][0] = inputSigma[i];
",0,0,1,3,6,0,0,0,0,9,33,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,582,"        final RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);
",4,0,0,1,2,1,0,4,0,10,71,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,583,"        sigma = max(insigma); // overall standard deviation
",2,0,0,1,2,0,4,0,0,7,51,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,586,"        stopTolUpX = 1e3 * max(insigma);
",2,1,0,1,2,0,4,0,0,8,32,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,587,"        stopTolX = 1e-11 * max(insigma);
",2,1,0,1,2,0,4,0,0,8,32,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,588,"        stopTolFun = 1e-12;
",2,0,0,0,0,0,0,0,0,3,19,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,589,"        stopTolHistFun = 1e-13;
",2,0,0,0,0,0,0,0,0,3,23,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,592,"        mu = lambda / 2; // number of parents/points for recombination
",4,1,0,0,0,0,0,0,0,6,62,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,593,"        logMu2 = Math.log(mu + 0.5);
",4,1,0,1,2,0,4,0,0,10,28,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,594,"        weights = log(sequence(1, mu, 1)).scalarMultiply(-1).scalarAdd(logMu2);
",2,0,0,4,8,0,12,0,0,16,71,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,595,"        double sumw = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,596,"        double sumwq = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,597,"        for (int i = 0; i < mu; i++) {
",8,1,0,1,3,0,0,0,0,10,30,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,598,"            double w = weights.getEntry(i, 0);
",2,0,0,1,2,0,6,0,0,8,34,7,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,599,"            sumw += w;
",4,0,0,0,0,0,0,0,0,5,10,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,600,"            sumwq += w * w;
",6,1,0,0,0,0,0,0,0,8,15,6,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,602,"        weights = weights.scalarMultiply(1 / sumw);
",4,1,0,1,2,0,4,0,0,10,43,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,603,"        mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i
",8,2,0,0,0,0,0,0,0,11,69,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,606,"        cc = (4 + mueff / dimension) /
",6,3,0,1,2,0,0,0,0,10,30,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,608,"        cs = (mueff + 2) / (dimension + mueff + 3.);
",8,3,0,2,4,0,0,0,0,12,44,4,1,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer,6,609,"        damps = (1 + 2 * Math.max(0, Math.sqrt((mueff - 1) /
",4,7,0,1,5,0,8,0,0,20,52,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3367,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3369,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,7,3373,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.11111,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,351,"                    handler.handleStep(interpolator, isLastStep);
",0,0,0,1,2,0,8,0,0,8,45,9,0.11111,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,352,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,224,"                    return xB;
",2,0,0,0,0,1,0,0,0,2,10,9,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,239,"                final int p = agingA - MAXIMAL_AGING;
",6,1,0,0,0,1,0,0,0,8,37,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,240,"                final double weightA = (1 << p) - 1;
",4,2,0,1,2,1,0,0,0,7,36,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,241,"                final double weightB = p + 1;
",4,1,0,0,0,1,0,0,0,6,29,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,242,"                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);
",16,5,0,2,4,0,0,0,0,22,81,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,243,"            } else if (agingB >= MAXIMAL_AGING) {
",4,1,0,1,4,0,0,0,0,5,37,7,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,342,"                xA = nextX;
",4,0,0,0,0,0,0,0,0,5,11,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,343,"                yA = nextY;
",4,0,0,0,0,0,0,0,0,5,11,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,344,"                absYA = FastMath.abs(yA);
",2,0,0,1,2,0,6,0,0,9,25,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,345,"                agingA = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,346,"                ++agingB;
",2,0,0,0,0,0,0,0,0,3,9,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,349,"                signChangeIndex++;
",2,0,0,0,0,0,0,0,0,3,18,8,0.11111,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,218,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.11111,0
defect4j,math,org/apache/commons/math3/ode/events/EventState,7,348,"            handler.resetState(t, y);
",0,0,0,1,2,0,8,0,0,8,25,7,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,182,"            y[2] = computeObjectiveValue(x[2]);
",0,0,1,3,6,0,2,0,0,7,35,6,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,183,"            if (Precision.equals(y[2], 0.0, 1)) {
",0,0,1,3,7,0,4,0,0,6,37,7,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,188,"            if (y[1] * y[2] < 0) {
",0,2,1,3,7,0,0,0,0,6,22,6,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,190,"                nbPoints        = 3;
",2,0,0,0,0,0,0,0,0,3,20,8,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,191,"                signChangeIndex = 2;
",2,0,0,0,0,0,0,0,0,3,20,8,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,300,"            if ((nbPoints > 2) && (end - start != nbPoints)) {
",8,4,0,3,7,0,0,0,0,12,50,6,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,309,"            } else  if (nbPoints == x.length) {
",6,1,0,1,4,0,0,0,0,7,35,7,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,326,"            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);
",6,2,0,1,2,0,10,0,0,18,89,7,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,327,"            x[signChangeIndex] = nextX;
",2,0,1,1,2,0,0,0,0,7,27,6,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,328,"            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);
",6,2,0,1,2,0,10,0,0,18,89,7,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,329,"            y[signChangeIndex] = nextY;
",2,0,1,1,2,0,0,0,0,7,27,6,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,330,"            ++nbPoints;
",2,0,0,0,0,0,0,0,0,3,11,6,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,333,"            if (nextY * yA <= 0) {
",4,2,0,1,3,0,0,0,0,6,22,6,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,335,"                xB = nextX;
",4,0,0,0,0,0,0,0,0,5,11,8,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,336,"                yB = nextY;
",4,0,0,0,0,0,0,0,0,5,11,8,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,337,"                absYB = FastMath.abs(yB);
",2,0,0,1,2,0,6,0,0,9,25,8,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,338,"                ++agingA;
",2,0,0,0,0,0,0,0,0,3,9,8,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,339,"                agingB = 0;
",2,0,0,0,0,0,0,0,0,3,11,8,0.10000,0
defect4j,math,org/apache/commons/math3/analysis/solvers/BracketingNthOrderBrentSolver,7,353,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,367,"                    System.arraycopy(eventY, 0, y, 0, y.length);
",4,0,0,1,2,0,8,0,0,12,44,9,0.07692,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,368,"                    computeDerivatives(eventT, y, yDot);
",0,0,0,1,2,0,8,0,0,8,36,9,0.07692,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,369,"                    resetOccurred = true;
",2,0,0,0,0,0,0,0,0,4,21,8,0.07692,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,370,"                    for (final EventState remaining : occuringEvents) {
",4,0,0,1,3,1,0,2,0,7,51,8,0.07692,0
defect4j,math,org/apache/commons/math3/ode/AbstractIntegrator,7,372,"                    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,157,"        final double randomValue = random.nextDouble();
",2,0,0,1,2,1,4,0,0,7,47,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,158,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,160,"        for (int i = 0; i < probabilities.length; i++) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,161,"            sum += probabilities[i];
",2,0,1,1,2,0,0,0,0,7,24,6,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,162,"            if (randomValue < sum) {
",4,1,0,1,3,0,0,0,0,5,24,6,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,163,"                return singletons.get(i);
",0,0,0,1,2,1,6,0,0,6,25,9,0.50000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,86,"        final int indexRm1 = iRm1[index];
",2,0,1,1,2,1,0,0,0,7,33,4,0.50000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,87,"        final int indexRm2 = iRm2[index];
",2,0,1,1,2,1,0,0,0,7,33,4,0.50000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,89,"        final int v0       = v[index];
",2,0,1,1,2,1,0,0,0,7,30,4,0.50000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,90,"        final int vM1      = v[i1[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,0.50000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,91,"        final int vM2      = v[i2[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,0.50000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,92,"        final int vM3      = v[i3[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,0.50000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,94,"        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);
",2,3,1,4,8,1,0,0,0,14,71,4,0.50000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,8,95,"        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));
",10,5,0,4,8,1,0,0,0,16,57,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/DiscreteDistribution,8,187,"        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
",10,0,0,6,12,1,10,4,0,25,99,4,0.00000,1
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,95,"        return direction;
",2,0,0,0,0,1,0,0,0,2,17,4,0.11111,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,54,"    public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {
",8,0,0,1,3,3,0,4,0,15,87,2,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,55,"        reset(p1, p2);
",0,0,0,1,2,0,6,0,0,6,14,5,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,74,"        final Vector3D delta = p2.subtract(p1);
",2,0,0,1,2,1,6,2,0,11,39,4,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,75,"        final double norm2 = delta.getNormSq();
",2,0,0,1,2,1,4,0,0,7,39,4,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,76,"        if (norm2 == 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,79,"        this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);
",4,1,0,2,4,0,6,2,0,14,65,4,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,80,"        zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);
",8,1,0,2,4,0,6,2,0,19,67,4,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,249,"        return x * x + y * y + z * z;
",12,5,0,0,0,1,0,0,0,17,29,4,0.03846,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,151,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {
",10,0,0,1,3,1,0,4,0,15,65,2,0.03571,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,152,"        this.x = MathArrays.linearCombination(a1, u1.x, a2, u2.x);
",10,0,0,1,2,0,8,0,0,19,58,4,0.03571,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,153,"        this.y = MathArrays.linearCombination(a1, u1.y, a2, u2.y);
",10,0,0,1,2,0,8,0,0,19,58,4,0.03571,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,154,"        this.z = MathArrays.linearCombination(a1, u1.z, a2, u2.z);
",10,0,0,1,2,0,8,0,0,19,58,4,0.03571,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,286,"        final Vector3D v3 = (Vector3D) v;
",4,0,0,1,2,1,0,4,0,9,33,4,0.03333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,287,"        return new Vector3D(x - v3.x, y - v3.y, z - v3.z);
",18,3,0,1,2,1,0,2,0,23,50,5,0.03333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,95,"    public Vector3D(double x, double y, double z) {
",8,0,0,1,3,1,0,0,0,9,47,2,0.02941,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,96,"        this.x = x;
",4,0,0,0,0,0,0,0,0,5,11,4,0.02941,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,97,"        this.y = y;
",4,0,0,0,0,0,0,0,0,5,11,4,0.02941,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,98,"        this.z = z;
",4,0,0,0,0,0,0,0,0,5,11,4,0.02941,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,99,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02941,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,137,"    public Vector3D(double a, Vector3D u) {
",6,0,0,1,3,1,0,2,0,9,39,2,0.02941,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,138,"        this.x = a * u.x;
",8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,139,"        this.y = a * u.y;
",8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,140,"        this.z = a * u.z;
",8,1,0,0,0,0,0,0,0,10,17,4,0.02941,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,141,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02941,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,41,"    public static final Vector3D ZERO   = new Vector3D(0, 0, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.02941,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,44,"    public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.02941,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,47,"    public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);
",2,0,0,1,2,3,0,4,0,10,62,2,0.02941,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Vector3D,9,50,"    public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.02941,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Line,9,87,"        final Line reverted = new Line(zero, zero.subtract(direction));
",4,0,0,2,4,1,6,4,0,15,63,4,0.00000,1
defect4j,math,org/apache/commons/math3/util/FastMath,10,2477,"            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
",6,5,1,5,10,1,0,0,0,20,91,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2479,"            ya = epsA * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2480,"            yb = epsB * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2481,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1387,"        double[] tmp1 = new double[getSize()];
",2,0,0,3,6,0,2,0,0,4,38,5,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1388,"        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2
",0,0,0,1,2,0,12,0,0,12,54,5,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1389,"        double[] tmp2 = new double[getSize()];
",2,0,0,3,6,0,2,0,0,4,38,5,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1390,"        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2
",0,0,0,1,2,0,12,0,0,12,54,5,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1391,"        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2
",0,0,0,1,2,0,8,0,0,8,60,5,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1392,"        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)
",0,0,0,2,4,0,6,0,0,6,70,5,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1394,"        if (x[xOffset] >= 0) {
",0,1,1,2,5,0,0,0,0,5,22,4,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1397,"            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x
",0,0,0,1,2,0,10,0,0,10,52,7,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1398,"            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)
",0,0,0,2,4,0,10,0,0,10,57,7,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1399,"            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))
",0,0,0,3,6,0,6,0,0,6,64,7,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1400,"            for (int i = 0; i < tmp2.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1401,"                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
",4,2,1,4,8,0,0,0,0,13,64,8,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1420,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,756,"        y.compiler.checkCompatibility(x.compiler);
",8,0,0,1,2,0,2,0,0,10,42,5,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,757,"        final DerivativeStructure result = new DerivativeStructure(y.compiler);
",6,0,0,1,2,1,0,4,0,11,71,4,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,758,"        y.compiler.atan2(y.data, 0, x.data, 0, result.data, 0);
",16,0,0,1,2,0,2,0,0,18,55,5,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DerivativeStructure,10,759,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.50000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1347,"                double v = 0;
",2,0,0,0,0,0,0,0,0,2,13,9,0.33333,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1348,"                q[n - 1] = -n * q[n - 2];
",6,3,1,2,4,0,0,0,0,15,25,8,0.33333,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1349,"                for (int k = n - 1; k >= 0; k -= 2) {
",8,2,0,1,3,0,0,0,0,11,37,8,0.33333,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1350,"                    v = v * x2 + q[k];
",6,2,1,1,2,0,0,0,0,13,18,10,0.33333,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1351,"                    if (k > 2) {
",2,1,0,1,3,0,0,0,0,3,12,10,0.33333,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1353,"                    } else if (k == 2) {
",2,1,0,1,4,0,0,0,0,3,20,11,0.33333,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1357,"                if ((n & 0x1) == 0) {
",2,2,0,2,5,0,0,0,0,4,21,8,0.33333,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1358,"                    v *= x;
",4,0,0,0,0,0,0,0,0,5,7,10,0.33333,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1361,"                coeff *= f;
",4,0,0,0,0,0,0,0,0,5,11,8,0.33333,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1362,"                function[n] = coeff * v;
",4,1,1,1,2,0,0,0,0,10,24,8,0.33333,0
defect4j,math,org/apache/commons/math3/util/FastMath,10,2423,"        return atan(x, 0.0, false);
",0,0,0,1,2,1,4,0,0,5,27,5,0.25000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1327,"        double[] function = new double[1 + order];
",4,1,0,2,4,0,0,0,0,5,42,5,0.25000,0
defect4j,math,org/apache/commons/math3/analysis/differentiation/DSCompiler,10,1328,"        final double x = operand[operandOffset];
",2,0,1,1,2,1,0,0,0,7,40,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,178,"        final int dim = getDimension();
",2,0,0,1,2,1,2,0,0,5,31,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,179,"        if (vals.length != dim) {
",6,1,0,1,3,0,0,0,0,7,25,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,183,"        return FastMath.pow(2 * FastMath.PI, -dim / 2) *
",6,3,0,1,2,1,4,0,0,14,48,4,0.50000,1
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,229,"        final double[] centered = new double[values.length];
",6,0,0,2,4,1,0,0,0,7,52,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,230,"        for (int i = 0; i < centered.length; i++) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,231,"            centered[i] = values[i] - getMeans()[i];
",0,1,1,4,8,0,2,0,0,14,40,6,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,233,"        final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);
",2,0,0,2,4,1,6,0,0,9,77,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,234,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,235,"        for (int i = 0; i < preMultiplied.length; i++) {
",10,1,0,1,3,0,0,0,0,12,48,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,236,"            sum += preMultiplied[i] * centered[i];
",2,1,1,2,4,0,0,0,0,12,38,6,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/MultivariateNormalDistribution,11,238,"        return FastMath.exp(-0.5 * sum);
",2,1,0,1,2,1,4,0,0,8,32,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,831,"        return exp(x, 0.0, null);
",0,0,0,1,2,1,4,0,0,5,25,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,850,"        if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,851,"            intVal = (int) -x;
",4,0,0,1,2,0,0,0,0,6,18,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,853,"            if (intVal > 746) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,861,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,871,"            if (intVal == 709) {
",2,1,0,1,3,0,0,0,0,3,20,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,881,"            intVal++;
",2,0,0,0,0,0,0,0,0,3,9,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,883,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,884,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,886,"            intVal = -intVal;
",4,0,0,0,0,0,0,0,0,6,17,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,888,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,890,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,898,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,899,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,906,"        final int intFrac = (int) ((x - intVal) * 1024.0);
",6,2,0,3,6,1,0,0,0,9,50,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,907,"        final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,908,"        final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];
",6,0,1,1,2,1,0,0,0,9,64,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,914,"        final double epsilon = x - (intVal + intFrac / 1024.0);
",8,3,0,1,2,1,0,0,0,12,55,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,923,"        double z = 0.04168701738764507;
",2,0,0,0,0,0,0,0,0,2,31,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,924,"        z = z * epsilon + 0.1666666505023083;
",6,2,0,0,0,0,0,0,0,9,37,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,925,"        z = z * epsilon + 0.5000000000042687;
",6,2,0,0,0,0,0,0,0,9,37,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,926,"        z = z * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,22,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,927,"        z = z * epsilon + -3.940510424527919E-20;
",6,2,0,0,0,0,0,0,0,10,41,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,934,"        double tempA = intPartA * fracPartA;
",6,1,0,0,0,0,0,0,0,7,36,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,935,"        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;
",14,5,0,0,0,0,0,0,0,19,82,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,941,"        final double tempC = tempB + tempA;
",6,1,0,0,0,1,0,0,0,8,35,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,943,"        if (extra != 0.0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,946,"            result = tempC*z + tempB + tempA;
",10,3,0,0,0,0,0,0,0,14,33,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,949,"        if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,955,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1179,"            if (x < 1.01 && x > 0.99 && hiPrec == null) {
",6,5,0,1,3,0,0,0,0,11,45,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1246,"            double tmp = epsilon * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,36,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1247,"            double aa = epsilon + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,32,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1248,"            double ab = epsilon - aa;
",6,1,0,0,0,0,0,0,0,7,25,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1249,"            double xa = aa;
",4,0,0,0,0,0,0,0,0,4,15,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1250,"            double xb = ab;
",4,0,0,0,0,0,0,0,0,4,15,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1253,"            final double numer = bits & 0x3ffffffffffL;
",4,1,0,0,0,1,0,0,0,6,43,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1254,"            final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);
",6,2,0,1,2,1,0,0,0,9,65,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1255,"            aa = numer - xa*denom - xb * denom;
",12,4,0,0,0,0,0,0,0,17,35,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1256,"            xb += aa / denom;
",6,1,0,0,0,0,0,0,0,8,17,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1259,"            final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];
",6,1,1,2,4,1,0,0,0,10,71,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1260,"            double ya = lnCoef_last[0];
",2,0,1,1,2,0,0,0,0,4,27,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1261,"            double yb = lnCoef_last[1];
",2,0,1,1,2,0,0,0,0,4,27,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1263,"            for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,55,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1265,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1266,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1268,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1269,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1270,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1273,"                final double[] lnCoef_i = LN_HI_PREC_COEF[i];
",2,0,1,2,4,1,0,0,0,7,45,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1274,"                aa = ya + lnCoef_i[0];
",4,1,1,1,2,0,0,0,0,8,22,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1275,"                ab = yb + lnCoef_i[1];
",4,1,1,1,2,0,0,0,0,8,22,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1277,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1278,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1279,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1283,"            aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1284,"            ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1292,"            lnza = aa + ab;
",6,1,0,0,0,0,0,0,0,8,15,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1293,"            lnzb = -(lnza - aa - ab);
",8,1,0,1,2,0,0,0,0,11,25,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1294,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1348,"            hiPrec[0] = a;
",2,0,1,1,2,0,0,0,0,5,14,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1349,"            hiPrec[1] = b;
",2,0,1,1,2,0,0,0,0,5,14,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1443,"        final double lns[] = new double[2];
",2,0,0,2,4,1,0,0,0,3,35,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1445,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1449,"        if (x != x) { // X is NaN
",4,1,0,1,3,0,0,0,0,5,25,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1454,"        if (x == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1479,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1490,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1502,"        if (x == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1526,"        if (y == Double.NEGATIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1540,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1557,"        if (y < 8e298 && y > -8e298) {
",4,3,0,1,3,0,0,0,0,8,30,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1558,"            double tmp1 = y * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,7,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1559,"            ya = y + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,11,21,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1560,"            yb = y - ya;
",6,1,0,0,0,0,0,0,0,8,12,6,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1561,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1569,"        final double lores = log(x, lns);
",2,0,0,1,2,1,6,0,0,9,33,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1570,"        if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN
",0,0,0,2,5,0,6,0,0,6,73,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1574,"        double lna = lns[0];
",2,0,1,1,2,0,0,0,0,4,20,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1575,"        double lnb = lns[1];
",2,0,1,1,2,0,0,0,0,4,20,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1578,"        double tmp1 = lna * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,33,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1579,"        double tmp2 = lna + tmp1 - tmp1;
",8,2,0,0,0,0,0,0,0,10,32,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1580,"        lnb += lna - tmp2;
",6,1,0,0,0,0,0,0,0,8,18,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1581,"        lna = tmp2;
",4,0,0,0,0,0,0,0,0,5,11,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1584,"        final double aa = lna * ya;
",6,1,0,0,0,1,0,0,0,8,27,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1585,"        final double ab = lna * yb + lnb * ya + lnb * yb;
",14,5,0,0,0,1,0,0,0,20,49,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1587,"        lna = aa+ab;
",6,1,0,0,0,0,0,0,0,8,12,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1588,"        lnb = -(lna - aa - ab);
",8,1,0,1,2,0,0,0,0,11,23,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1590,"        double z = 1.0 / 120.0;
",2,1,0,0,0,0,0,0,0,3,23,5,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1591,"        z = z * lnb + (1.0 / 24.0);
",6,3,0,1,2,0,0,0,0,10,27,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1592,"        z = z * lnb + (1.0 / 6.0);
",6,3,0,1,2,0,0,0,0,10,26,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1593,"        z = z * lnb + 0.5;
",6,2,0,0,0,0,0,0,0,9,18,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1594,"        z = z * lnb + 1.0;
",6,2,0,0,0,0,0,0,0,9,18,4,0.50000,0
defect4j,math,org/apache/commons/math3/util/FastMath,11,1595,"        z = z * lnb;
",6,1,0,0,0,0,0,0,0,8,12,4,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,246,"        random.setSeed(seed);
",0,0,0,1,2,0,6,0,0,6,21,5,0.42857,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,247,"        randomData.reSeed(seed);
",0,0,0,1,2,0,6,0,0,6,24,5,0.42857,0
defect4j,math,org/apache/commons/math3/distribution/AbstractRealDistribution,12,248,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.42857,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,461,"        delegate.reSeed(seed);
",0,0,0,1,2,0,6,0,0,6,22,5,0.33333,0
defect4j,math,org/apache/commons/math3/random/RandomDataImpl,12,462,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,648,"       getRan().setSeed(seed);
",0,0,0,2,4,0,6,0,0,6,23,5,0.33333,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,649,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,374,"        if (shape < 1) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.33333,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,413,"        final double d = shape - 0.333333333333333333;
",4,1,0,0,0,1,0,0,0,6,46,4,0.33333,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,414,"        final double c = 1 / (3 * FastMath.sqrt(d));
",2,2,0,2,4,1,6,0,0,11,44,4,0.33333,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,417,"            final double x = random.nextGaussian();
",2,0,0,1,2,1,4,0,0,7,39,6,0.33333,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,418,"            final double v = (1 + c * x) * (1 + c * x) * (1 + c * x);
",14,7,0,3,6,1,0,0,0,22,57,6,0.33333,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,420,"            if (v <= 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,0.33333,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,424,"            final double x2 = x * x;
",6,1,0,0,0,1,0,0,0,8,24,6,0.33333,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,425,"            final double u = random.nextDouble();
",2,0,0,1,2,1,4,0,0,7,37,6,0.33333,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,428,"            if (u < 1 - 0.0331 * x2 * x2) {
",6,3,0,1,3,0,0,0,0,9,31,6,0.33333,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,429,"                return scale * d * v;
",6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,432,"            if (FastMath.log(u) < 0.5 * x2 + d * (1 - v + FastMath.log(v))) {
",6,6,0,4,9,0,12,0,0,24,65,6,0.33333,0
defect4j,math,org/apache/commons/math3/distribution/GammaDistribution,12,433,"                return scale * d * v;
",6,1,0,0,0,1,0,0,0,7,21,8,0.33333,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,311,"        final double n = random.nextGaussian();
",2,0,0,1,2,1,4,0,0,7,39,4,0.33333,0
defect4j,math,org/apache/commons/math3/distribution/LogNormalDistribution,12,312,"        return FastMath.exp(scale + shape * n);
",6,2,0,1,2,1,4,0,0,12,39,5,0.33333,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,79,"        super(K, M1, M2, M3, seed);
",10,0,0,1,2,0,0,0,0,10,27,4,0.31034,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.31034,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,714,"        if (rand == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.31034,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,715,"            initRan();
",0,0,0,1,2,0,2,0,0,2,10,7,0.31034,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,717,"        return rand;
",2,0,0,0,0,1,0,0,0,2,12,4,0.31034,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,725,"        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));
",2,1,0,3,6,0,8,2,0,14,82,4,0.31034,0
defect4j,math,org/apache/commons/math3/random/RandomDataGenerator,12,726,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.31034,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,132,"        this(k, m1, m2, m3, new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });
",12,2,0,7,14,0,0,0,0,14,83,4,0.25000,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,12,133,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,86,"        final int indexRm1 = iRm1[index];
",2,0,1,1,2,1,0,0,0,7,33,4,0.22500,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,87,"        final int indexRm2 = iRm2[index];
",2,0,1,1,2,1,0,0,0,7,33,4,0.22500,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,89,"        final int v0       = v[index];
",2,0,1,1,2,1,0,0,0,7,30,4,0.22500,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,90,"        final int vM1      = v[i1[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,0.22500,0
defect4j,math,org/apache/commons/math3/random/Well19937c,12,91,"        final int vM2      = v[i2[index]];
",2,0,1,2,4,1,0,0,0,9,34,4,0.22500,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,63,"        super(optimizer);
",2,0,0,1,2,0,0,0,0,2,17,4,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,64,"        degree = -1; // To avoid compilation error until the instance variable is removed.
",2,0,0,0,0,0,0,0,0,4,82,4,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,65,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/fitting/PolynomialFitter,13,110,"        return fit(new PolynomialFunction.Parametric(), guess);
",4,0,0,2,4,1,4,0,0,8,55,5,0.20000,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,69,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.20000,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,70,"        MathUtils.checkNotNull(c);
",0,0,0,1,2,0,6,0,0,6,26,5,0.20000,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,71,"        int n = c.length;
",6,0,0,0,0,0,0,0,0,6,17,5,0.20000,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,72,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.20000,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,75,"        while ((n > 1) && (c[n - 1] == 0)) {
",4,4,1,4,9,0,0,0,0,10,36,4,0.20000,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,78,"        this.coefficients = new double[n];
",2,0,1,1,2,0,0,0,0,5,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);
",2,0,0,1,2,0,8,0,0,10,48,5,0.20000,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,94,"       return evaluate(coefficients, x);
",0,0,0,1,2,1,6,0,0,6,33,5,0.20000,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,395,"    public static class Parametric implements ParametricUnivariateFunction {
",2,0,0,0,1,2,0,2,0,6,72,2,0.12500,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,130,"        MathUtils.checkNotNull(coefficients);
",0,0,0,1,2,0,6,0,0,6,37,5,0.12500,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,131,"        int n = coefficients.length;
",6,0,0,0,0,0,0,0,0,6,28,5,0.12500,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,132,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.12500,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,135,"        double result = coefficients[n - 1];
",4,1,1,1,2,0,0,0,0,7,36,5,0.12500,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,136,"        for (int j = n - 2; j >= 0; j--) {
",8,2,0,1,3,0,0,0,0,11,34,4,0.12500,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,13,139,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,153,"        return fit(Integer.MAX_VALUE, f, initialGuess);
",4,0,0,1,2,1,6,0,0,10,47,5,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,210,"        public OldTheoreticalValuesFunction(final ParametricUnivariateFunction f) {
",4,0,0,1,3,2,0,2,0,8,75,3,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,211,"            this.f = f;
",4,0,0,0,0,0,0,0,0,5,11,5,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,212,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,176,"        double[] target  = new double[observations.size()];
",2,0,0,3,6,0,4,0,0,6,51,5,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,177,"        double[] weights = new double[observations.size()];
",2,0,0,3,6,0,4,0,0,6,51,5,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,178,"        int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,179,"        for (WeightedObservedPoint point : observations) {
",4,0,0,1,3,0,0,2,0,6,50,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,180,"            target[i]  = point.getY();
",0,0,1,2,4,0,4,0,0,9,26,6,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,181,"            weights[i] = point.getWeight();
",0,0,1,2,4,0,4,0,0,9,31,6,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,182,"            ++i;
",2,0,0,0,0,0,0,0,0,3,4,6,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,183,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,187,"        if (optimizer == null) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,189,"            optimum = oldOptimizer.optimize(maxEval, new OldTheoreticalValuesFunction(f),
",4,0,0,1,3,0,6,2,0,13,77,6,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,59,"        return weight;
",2,0,0,0,0,1,0,0,0,2,14,4,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,423,"        return optimizeInternal(maxEval,
",0,0,0,0,1,1,4,0,0,4,32,5,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer,13,62,"@Deprecated
",2,0,0,0,0,0,0,0,0,2,11,2,0.04348,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,109,"        observations.add(new WeightedObservedPoint(weight, x, y));
",6,0,0,2,4,0,4,2,0,12,58,5,0.04167,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,110,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04167,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,73,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.04167,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,49,"    public WeightedObservedPoint(final double weight, final double x, final double y) {
",8,0,0,1,3,4,0,0,0,12,83,2,0.04000,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,50,"        this.weight = weight;
",4,0,0,0,0,0,0,0,0,5,21,4,0.04000,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,51,"        this.x      = x;
",4,0,0,0,0,0,0,0,0,5,16,4,0.04000,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,52,"        this.y      = y;
",4,0,0,0,0,0,0,0,0,5,16,4,0.04000,0
defect4j,math,org/apache/commons/math3/optimization/fitting/WeightedObservedPoint,13,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04000,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,69,"    public CurveFitter(final DifferentiableMultivariateVectorOptimizer optimizer) {
",4,0,0,1,3,2,0,2,0,8,79,2,0.03846,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,70,"        this.oldOptimizer = optimizer;
",4,0,0,0,0,0,0,0,0,5,30,4,0.03846,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,71,"        this.optimizer    = null;
",2,0,0,0,0,0,0,0,0,3,25,4,0.03846,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,72,"        observations      = new ArrayList<WeightedObservedPoint>();
",2,0,0,1,2,0,0,4,0,7,59,4,0.03846,0
defect4j,math,org/apache/commons/math3/optimization/fitting/CurveFitter,13,73,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,158,"        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);
",4,0,0,1,2,0,0,0,0,4,51,5,0.02381,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,159,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02381,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,270,"        super(null); // No custom convergence criterion.
",0,0,0,1,2,0,0,0,0,1,48,3,0.01639,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,271,"        this.initialStepBoundFactor = initialStepBoundFactor;
",4,0,0,0,0,0,0,0,0,5,53,4,0.01639,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,272,"        this.costRelativeTolerance = costRelativeTolerance;
",4,0,0,0,0,0,0,0,0,5,51,4,0.01639,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,273,"        this.parRelativeTolerance = parRelativeTolerance;
",4,0,0,0,0,0,0,0,0,5,49,4,0.01639,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,274,"        this.orthoTolerance = orthoTolerance;
",4,0,0,0,0,0,0,0,0,5,37,4,0.01639,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,275,"        this.qrRankingThreshold = threshold;
",4,0,0,0,0,0,0,0,0,5,36,4,0.01639,0
defect4j,math,org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer,13,276,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01639,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,401,"                final double mij = matrix.getEntry(i, j);
",2,0,0,1,2,1,8,0,0,11,41,8,0.01266,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,402,"                final double mji = matrix.getEntry(j, i);
",2,0,0,1,2,1,8,0,0,11,41,8,0.01266,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,403,"                if (FastMath.abs(mij - mji) >
",4,2,0,1,3,0,4,0,0,10,29,8,0.01266,0
defect4j,math,org/apache/commons/math3/util/FastMath,13,3532,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.01220,0
defect4j,math,org/apache/commons/math3/util/FastMath,13,3535,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.01220,0
defect4j,math,org/apache/commons/math3/util/FastMath,13,3539,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.01220,0
defect4j,math,org/apache/commons/math3/util/FastMath,13,3544,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.01220,0
defect4j,math,org/apache/commons/math3/util/FastMath,13,3545,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.01220,0
defect4j,math,org/apache/commons/math3/util/FastMath,13,3548,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.01220,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,56,"    protected AbstractRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,33,2,0.01205,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,47,"    private static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance(Locale.US);
",6,0,0,1,2,3,4,2,0,15,95,2,0.01205,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,50,"        DEFAULT_FORMAT.getFormat().setMinimumFractionDigits(1);
",0,0,0,2,4,0,6,0,0,6,55,5,0.01205,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01205,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,13,616,"        return getColumnDimension() == getRowDimension();
",0,1,0,2,4,1,4,0,0,5,49,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealLinearOperator,13,53,"public abstract class RealLinearOperator {
",2,0,0,0,1,2,0,0,0,4,42,1,0.01205,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,52,"    public static final RealMatrixFormat DEFAULT_FORMAT = RealMatrixFormat.getInstance();
",2,0,0,1,2,3,4,2,0,11,85,2,0.01205,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,58,"    public static final RealMatrixFormat OCTAVE_FORMAT = new RealMatrixFormat(""["", ""]"", """", """", ""; "", "", "");
",2,0,0,2,4,3,0,4,0,15,104,2,0.01205,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,391,"        final int rows = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,42,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,392,"        if (rows != matrix.getColumnDimension()) {
",2,1,0,2,5,0,4,0,0,7,42,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,399,"        for (int i = 0; i < rows; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,400,"            for (int j = i + 1; j < rows; j++) {
",10,2,0,1,3,0,0,0,0,13,36,6,0.01205,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,413,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,440,"        return isSymmetricInternal(matrix, eps, false);
",0,0,0,1,2,1,6,0,0,7,47,5,0.01205,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,455,"        checkRowIndex(m, row);
",0,0,0,1,2,0,6,0,0,6,22,5,0.01205,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,456,"        checkColumnIndex(m, column);
",0,0,0,1,2,0,6,0,0,6,28,5,0.01205,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,457,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01205,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,468,"        if (row < 0 ||
",2,2,0,0,1,0,0,0,0,4,14,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,473,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01205,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,484,"        if (column < 0 || column >= m.getColumnDimension()) {
",4,3,0,2,5,0,4,0,0,11,53,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,13,488,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,99,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,
",8,0,0,0,1,0,0,0,0,8,76,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,101,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,115,"        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,
",12,0,0,0,1,0,0,0,0,12,73,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,117,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,133,"                            final NumberFormat format) {
",2,0,0,0,2,1,0,2,0,5,28,3,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,134,"        this.prefix            = prefix;
",4,0,0,0,0,0,0,0,0,5,32,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,135,"        this.suffix            = suffix;
",4,0,0,0,0,0,0,0,0,5,32,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,136,"        this.rowPrefix         = rowPrefix;
",4,0,0,0,0,0,0,0,0,5,35,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,137,"        this.rowSuffix         = rowSuffix;
",4,0,0,0,0,0,0,0,0,5,35,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,138,"        this.rowSeparator      = rowSeparator;
",4,0,0,0,0,0,0,0,0,5,38,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,139,"        this.columnSeparator   = columnSeparator;
",4,0,0,0,0,0,0,0,0,5,41,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,140,"        this.format            = format;
",4,0,0,0,0,0,0,0,0,5,32,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,142,"        this.format.setGroupingUsed(false);
",2,0,0,1,2,0,2,0,0,5,35,5,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,143,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,207,"        return format;
",2,0,0,0,0,1,0,0,0,2,14,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,215,"        return getInstance(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,40,5,0.01205,0
defect4j,math,org/apache/commons/math3/linear/RealMatrixFormat,13,224,"        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));
",0,0,0,2,4,1,6,2,0,8,76,5,0.01205,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,67,"    public DiagonalMatrix(final double[] d) {
",4,0,0,2,5,2,0,0,0,6,41,2,0.01205,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,68,"        data = d.clone();
",2,0,0,1,2,0,4,0,0,7,17,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01205,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,107,"        return new DiagonalMatrix(data);
",2,0,0,1,2,1,0,2,0,4,32,5,0.01205,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,203,"        final int dim = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,34,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,204,"        final double[][] out = new double[dim][dim];
",2,0,1,4,8,1,0,0,0,7,44,4,0.01205,0
defect4j,math,org/apache/commons/math3/linear/DiagonalMatrix,13,237,"        MatrixUtils.checkMatrixIndex(this, row, column);
",0,0,0,1,2,0,8,0,0,8,48,5,0.01205,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,37,"        super(optimizer);
",2,0,0,1,2,0,0,0,0,2,17,4,0.12500,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,38,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,math,org/apache/commons/math3/fitting/PolynomialFitter,14,68,"        return fit(new PolynomialFunction.Parametric(), guess);
",4,0,0,2,4,1,4,0,0,8,55,5,0.12500,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,69,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.12500,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,70,"        MathUtils.checkNotNull(c);
",0,0,0,1,2,0,6,0,0,6,26,5,0.12500,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,71,"        int n = c.length;
",6,0,0,0,0,0,0,0,0,6,17,5,0.12500,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,72,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.12500,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,75,"        while ((n > 1) && (c[n - 1] == 0)) {
",4,4,1,4,9,0,0,0,0,10,36,4,0.12500,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,78,"        this.coefficients = new double[n];
",2,0,1,1,2,0,0,0,0,5,34,4,0.12500,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,79,"        System.arraycopy(c, 0, this.coefficients, 0, n);
",2,0,0,1,2,0,8,0,0,10,48,5,0.12500,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,94,"       return evaluate(coefficients, x);
",0,0,0,1,2,1,6,0,0,6,33,5,0.12500,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,395,"    public static class Parametric implements ParametricUnivariateFunction {
",2,0,0,0,1,2,0,2,0,6,72,2,0.09091,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,130,"        MathUtils.checkNotNull(coefficients);
",0,0,0,1,2,0,6,0,0,6,37,5,0.09091,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,131,"        int n = coefficients.length;
",6,0,0,0,0,0,0,0,0,6,28,5,0.09091,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,132,"        if (n == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.09091,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,135,"        double result = coefficients[n - 1];
",4,1,1,1,2,0,0,0,0,7,36,5,0.09091,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,136,"        for (int j = n - 2; j >= 0; j--) {
",8,2,0,1,3,0,0,0,0,11,34,4,0.09091,0
defect4j,math,org/apache/commons/math3/analysis/polynomials/PolynomialFunction,14,139,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.09091,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,136,"        return fit(Integer.MAX_VALUE, f, initialGuess);
",4,0,0,1,2,1,6,0,0,10,47,5,0.04348,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,98,"        super(rows, columns);
",4,0,0,1,2,0,0,0,0,4,21,4,0.04348,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,99,"        this.rows = rows;
",4,0,0,0,0,0,0,0,0,5,17,4,0.04348,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,100,"        this.columns = columns;
",4,0,0,0,0,0,0,0,0,5,23,4,0.04348,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,103,"        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,49,4,0.04348,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,104,"        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,0,0,0,0,12,55,4,0.04348,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,107,"        blocks = createBlocksLayout(rows, columns);
",2,0,0,1,2,0,6,0,0,9,43,4,0.04348,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,258,"        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,62,4,0.04000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,259,"        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;
",8,3,0,1,2,1,0,0,0,12,65,4,0.04000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,261,"        final double[][] blocks = new double[blockRows * blockColumns][];
",6,1,0,4,8,1,0,0,0,8,65,4,0.04000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,262,"        int blockIndex = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.04000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,263,"        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {
",8,1,0,1,3,0,0,0,0,10,52,4,0.04000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,264,"            final int pStart = iBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,6,0.04000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,265,"            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
",6,1,0,1,2,1,6,0,0,14,57,6,0.04000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,266,"            final int iHeight = pEnd - pStart;
",6,1,0,0,0,1,0,0,0,8,34,6,0.04000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,267,"            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {
",8,1,0,1,3,0,0,0,0,10,55,6,0.04000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,268,"                final int qStart = jBlock * BLOCK_SIZE;
",6,1,0,0,0,1,0,0,0,8,39,8,0.04000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,269,"                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
",6,1,0,1,2,1,6,0,0,14,60,8,0.04000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,270,"                final int jWidth = qEnd - qStart;
",6,1,0,0,0,1,0,0,0,8,33,8,0.04000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,271,"                blocks[blockIndex] = new double[iHeight * jWidth];
",4,1,1,2,4,0,0,0,0,10,50,8,0.04000,0
defect4j,math,org/apache/commons/math3/linear/BlockRealMatrix,14,272,"                ++blockIndex;
",2,0,0,0,0,0,0,0,0,3,13,8,0.04000,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,159,"        double[] target  = new double[observations.size()];
",2,0,0,3,6,0,4,0,0,6,51,5,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,160,"        double[] weights = new double[observations.size()];
",2,0,0,3,6,0,4,0,0,6,51,5,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,161,"        int i = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,162,"        for (WeightedObservedPoint point : observations) {
",4,0,0,1,3,0,0,2,0,6,50,4,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,163,"            target[i]  = point.getY();
",0,0,1,2,4,0,4,0,0,9,26,6,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,164,"            weights[i] = point.getWeight();
",0,0,1,2,4,0,4,0,0,9,31,6,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,165,"            ++i;
",2,0,0,0,0,0,0,0,0,3,4,6,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,166,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,169,"        final TheoreticalValuesFunction model = new TheoreticalValuesFunction(f);
",4,0,0,1,2,1,0,4,0,9,73,4,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,172,"        final PointVectorValuePair optimum
",2,0,0,0,0,1,0,2,0,5,34,4,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,57,"        return weight;
",2,0,0,0,0,1,0,0,0,2,14,4,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,"            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {
",0,0,0,1,4,1,0,4,0,4,67,6,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,191,"        public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {
",4,0,0,1,3,2,0,2,0,8,72,3,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,192,"            this.f = f;
",4,0,0,0,0,0,0,0,0,5,11,5,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,193,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,"            return new ModelFunction(new MultivariateVectorFunction() {
",0,0,0,1,4,1,0,4,0,4,59,6,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,218,"            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {
",0,0,0,1,4,1,0,4,0,4,67,6,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,199,"            return new ModelFunction(new MultivariateVectorFunction() {
",0,0,0,1,4,1,0,4,0,4,59,6,0.03846,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,92,"        observations.add(new WeightedObservedPoint(weight, x, y));
",6,0,0,2,4,0,4,2,0,12,58,5,0.03704,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,93,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03704,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,75,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.03704,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,45,"    public WeightedObservedPoint(final double weight, final double x, final double y) {
",8,0,0,1,3,4,0,0,0,12,83,2,0.03571,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,46,"        this.weight = weight;
",4,0,0,0,0,0,0,0,0,5,21,4,0.03571,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,47,"        this.x      = x;
",4,0,0,0,0,0,0,0,0,5,16,4,0.03571,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,48,"        this.y      = y;
",4,0,0,0,0,0,0,0,0,5,16,4,0.03571,0
defect4j,math,org/apache/commons/math3/fitting/WeightedObservedPoint,14,49,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,63,"    public CurveFitter(final MultivariateVectorOptimizer optimizer) {
",4,0,0,1,3,2,0,2,0,8,65,2,0.03448,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,64,"        this.optimizer = optimizer;
",4,0,0,0,0,0,0,0,0,5,27,4,0.03448,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,65,"        observations = new ArrayList<WeightedObservedPoint>();
",2,0,0,1,2,0,0,4,0,7,54,4,0.03448,0
defect4j,math,org/apache/commons/math3/fitting/CurveFitter,14,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03448,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,156,"        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);
",4,0,0,1,2,0,0,0,0,4,51,5,0.02381,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,157,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02381,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,268,"        super(null); // No custom convergence criterion.
",0,0,0,1,2,0,0,0,0,1,48,3,0.01639,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,269,"        this.initialStepBoundFactor = initialStepBoundFactor;
",4,0,0,0,0,0,0,0,0,5,53,4,0.01639,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,270,"        this.costRelativeTolerance = costRelativeTolerance;
",4,0,0,0,0,0,0,0,0,5,51,4,0.01639,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,271,"        this.parRelativeTolerance = parRelativeTolerance;
",4,0,0,0,0,0,0,0,0,5,49,4,0.01639,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,272,"        this.orthoTolerance = orthoTolerance;
",4,0,0,0,0,0,0,0,0,5,37,4,0.01639,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,273,"        this.qrRankingThreshold = threshold;
",4,0,0,0,0,0,0,0,0,5,36,4,0.01639,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer,14,274,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01639,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,35,"    public ModelFunctionJacobian(MultivariateMatrixFunction j) {
",4,0,0,1,3,1,0,2,0,7,60,2,0.01176,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,36,"        jacobian = j;
",4,0,0,0,0,0,0,0,0,5,13,4,0.01176,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian,14,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01176,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,35,"    public ModelFunction(MultivariateVectorFunction m) {
",4,0,0,1,3,1,0,2,0,7,52,2,0.01163,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,36,"        model = m;
",4,0,0,0,0,0,0,0,0,5,10,4,0.01163,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/ModelFunction,14,37,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01163,0
defect4j,math,org/apache/commons/math3/util/FastMath,14,3421,"        return (a <= b) ? a : b;
",8,1,0,1,2,1,0,0,0,9,24,5,0.01163,0
defect4j,math,org/apache/commons/math3/util/MathUtils,14,264,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.01163,0
defect4j,math,org/apache/commons/math3/util/MathUtils,14,267,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01163,0
defect4j,math,org/apache/commons/math3/util/CompositeFormat,14,43,"        return getDefaultNumberFormat(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,51,5,0.01163,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,41,"    public Weight(double[] weight) {
",4,0,0,2,5,1,0,0,0,5,32,2,0.01163,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,42,"        final int dim = weight.length;
",6,0,0,0,0,1,0,0,0,7,30,4,0.01163,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Weight,14,43,"        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);
",14,0,0,1,2,0,6,0,0,21,86,4,0.01163,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,38,"    public Target(double[] observations) {
",4,0,0,2,5,1,0,0,0,5,38,2,0.01163,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,39,"        target = observations.clone();
",2,0,0,1,2,0,4,0,0,7,30,4,0.01163,0
defect4j,math,org/apache/commons/math3/optim/nonlinear/vector/Target,14,40,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01163,0
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,35,"    public MaxEval(int max) {
",4,0,0,1,3,1,0,0,0,5,25,2,0.01163,0
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,36,"        if (max <= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.01163,0
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,40,"        maxEval = max;
",4,0,0,0,0,0,0,0,0,5,14,4,0.01163,0
defect4j,math,org/apache/commons/math3/optim/MaxEval,14,41,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01163,0
defect4j,math,org/apache/commons/math3/util/FastMath,15,1542,"                return pow(-x, y);
",2,0,0,1,2,1,4,0,0,7,18,9,1.00000,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,131,"    public MersenneTwister(long seed) {
",4,0,0,1,3,1,0,0,0,5,35,2,0.02174,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,132,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.02174,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,133,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.02174,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,134,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02174,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };
",2,0,0,2,4,3,0,0,0,5,55,2,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,144,"        long longMT = seed;
",4,0,0,0,0,0,0,0,0,4,19,5,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,146,"        mt[0]= (int) longMT;
",2,0,1,2,4,0,0,0,0,5,20,4,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,147,"        for (mti = 1; mti < N; ++mti) {
",8,1,0,1,3,0,0,0,0,11,31,4,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,150,"            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;
",8,5,0,3,6,0,0,0,0,14,71,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,151,"            mt[mti]= (int) longMT;
",2,0,1,2,4,0,0,0,0,7,22,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,154,"        clear(); // Clear normal deviate cache
",0,0,0,1,2,0,2,0,0,2,38,5,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,167,"        if (seed == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,172,"        setSeed(19650218);
",0,0,0,1,2,0,2,0,0,2,18,5,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,173,"        int i = 1;
",2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,174,"        int j = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {
",10,1,0,2,5,0,6,0,0,18,57,4,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,177,"            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
",2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,178,"            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
",6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,179,"            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear
",10,5,1,5,10,0,0,0,0,19,76,7,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,180,"            mt[i]   = (int) (l & 0xffffffffl);
",2,1,1,3,6,0,0,0,0,8,34,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,181,"            i++; j++;
",4,0,0,0,0,0,0,0,0,6,9,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,182,"            if (i >= N) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,183,"                mt[0] = mt[N - 1];
",2,1,1,2,4,0,0,0,0,8,18,8,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,184,"                i = 1;
",2,0,0,0,0,0,0,0,0,3,6,8,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,186,"            if (j >= seed.length) {
",6,1,0,1,3,0,0,0,0,7,23,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,187,"                j = 0;
",2,0,0,0,0,0,0,0,0,3,6,8,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,191,"        for (int k = N - 1; k != 0; k--) {
",8,2,0,1,3,0,0,0,0,11,34,4,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,192,"            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
",2,3,1,5,10,0,0,0,0,13,73,7,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,193,"            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
",6,5,1,5,10,0,0,0,0,15,73,7,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,194,"            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear
",10,5,0,4,8,0,0,0,0,15,69,7,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,195,"            mt[i]   = (int) (l & 0xffffffffL);
",2,1,1,3,6,0,0,0,0,8,34,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,196,"            i++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,197,"            if (i >= N) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,198,"                mt[0] = mt[N - 1];
",2,1,1,2,4,0,0,0,0,8,18,8,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,199,"                i = 1;
",2,0,0,0,0,0,0,0,0,3,6,8,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,203,"        mt[0] = 0x80000000; // MSB is 1; assuring non-zero initial array
",0,0,1,1,2,0,0,0,0,3,64,4,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,205,"        clear(); // Clear normal deviate cache
",0,0,0,1,2,0,2,0,0,2,38,5,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,207,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,216,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });
",4,2,0,7,14,0,2,0,0,8,71,5,0.01389,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,15,217,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01389,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,384,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,393,"      if (x > 20) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.15385,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,870,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.13333,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,874,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,0.13333,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,395,"              return 0.5 * exp(x);
",0,1,0,1,2,1,4,0,0,5,20,6,0.09091,0
defect4j,math,org/apache/commons/math3/util/FastMath,16,399,"              return 0.5 * exp(-x);
",2,1,0,1,2,1,2,0,0,6,21,6,0.09091,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,131,"    public MersenneTwister(long seed) {
",4,0,0,1,3,1,0,0,0,5,35,2,0.09091,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,132,"        mt = new int[N];
",2,0,1,1,2,0,0,0,0,5,16,4,0.09091,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,133,"        setSeed(seed);
",0,0,0,1,2,0,4,0,0,4,14,5,0.09091,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,134,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.09091,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,94,"    private static final int[] MAG01 = { 0x0, 0x9908b0df };
",2,0,0,2,4,3,0,0,0,5,55,2,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,144,"        long longMT = seed;
",4,0,0,0,0,0,0,0,0,4,19,5,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,146,"        mt[0]= (int) longMT;
",2,0,1,2,4,0,0,0,0,5,20,4,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,147,"        for (mti = 1; mti < N; ++mti) {
",8,1,0,1,3,0,0,0,0,11,31,4,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,150,"            longMT = (1812433253l * (longMT ^ (longMT >> 30)) + mti) & 0xffffffffL;
",8,5,0,3,6,0,0,0,0,14,71,6,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,151,"            mt[mti]= (int) longMT;
",2,0,1,2,4,0,0,0,0,7,22,6,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,154,"        clear(); // Clear normal deviate cache
",0,0,0,1,2,0,2,0,0,2,38,5,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,155,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,167,"        if (seed == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,172,"        setSeed(19650218);
",0,0,0,1,2,0,2,0,0,2,18,5,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,173,"        int i = 1;
",2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,174,"        int j = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,176,"        for (int k = FastMath.max(N, seed.length); k != 0; k--) {
",10,1,0,2,5,0,6,0,0,18,57,4,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,177,"            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
",2,3,1,5,10,0,0,0,0,13,73,7,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,178,"            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
",6,5,1,5,10,0,0,0,0,15,73,7,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,179,"            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1664525l)) + seed[j] + j; // non linear
",10,5,1,5,10,0,0,0,0,19,76,7,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,180,"            mt[i]   = (int) (l & 0xffffffffl);
",2,1,1,3,6,0,0,0,0,8,34,6,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,181,"            i++; j++;
",4,0,0,0,0,0,0,0,0,6,9,6,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,182,"            if (i >= N) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,183,"                mt[0] = mt[N - 1];
",2,1,1,2,4,0,0,0,0,8,18,8,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,184,"                i = 1;
",2,0,0,0,0,0,0,0,0,3,6,8,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,186,"            if (j >= seed.length) {
",6,1,0,1,3,0,0,0,0,7,23,6,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,187,"                j = 0;
",2,0,0,0,0,0,0,0,0,3,6,8,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,191,"        for (int k = N - 1; k != 0; k--) {
",8,2,0,1,3,0,0,0,0,11,34,4,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,192,"            long l0 = (mt[i] & 0x7fffffffl)   | ((mt[i]   < 0) ? 0x80000000l : 0x0l);
",2,3,1,5,10,0,0,0,0,13,73,7,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,193,"            long l1 = (mt[i-1] & 0x7fffffffl) | ((mt[i-1] < 0) ? 0x80000000l : 0x0l);
",6,5,1,5,10,0,0,0,0,15,73,7,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,194,"            long l  = (l0 ^ ((l1 ^ (l1 >> 30)) * 1566083941l)) - i; // non linear
",10,5,0,4,8,0,0,0,0,15,69,7,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,195,"            mt[i]   = (int) (l & 0xffffffffL);
",2,1,1,3,6,0,0,0,0,8,34,6,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,196,"            i++;
",2,0,0,0,0,0,0,0,0,3,4,6,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,197,"            if (i >= N) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,198,"                mt[0] = mt[N - 1];
",2,1,1,2,4,0,0,0,0,8,18,8,0.05714,0
defect4j,math,org/apache/commons/math3/random/MersenneTwister,16,199,"                i = 1;
",2,0,0,0,0,0,0,0,0,3,6,8,0.05714,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1510,"            if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,7,1.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1511,"                return this;
",0,0,0,0,0,1,0,0,0,0,12,3,1.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1514,"            if (x.isNaN()) {
",0,0,0,2,5,0,4,0,0,4,16,7,1.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1515,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,8,1.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1518,"            if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {
",18,6,0,2,5,0,0,0,0,24,73,6,1.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1519,"                result = newInstance(this);
",2,0,0,1,2,0,2,0,0,5,27,8,1.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1520,"                result.sign = (byte) (sign * x.sign);
",10,1,0,2,4,0,0,0,0,12,37,8,1.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1521,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,1.00000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1478,"            field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);
",4,0,0,1,2,0,4,0,0,8,47,7,0.33333,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1479,"            return DfpField.FLAG_OVERFLOW;
",4,0,0,0,0,1,0,0,0,4,30,7,0.33333,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,1663,"            result = dotrap(excp, MULTIPLY_TRAP, result, result);
",2,0,0,1,2,0,10,0,0,13,53,6,0.25000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2278,"                result.exp = result.exp - ERR_SCALE;
",10,1,0,0,0,0,0,0,0,12,36,5,0.25000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2279,"                def = newInstance(getZero());
",2,0,0,2,4,0,4,0,0,7,29,5,0.25000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2280,"                def.sign = result.sign;
",8,0,0,0,0,0,0,0,0,9,23,5,0.25000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2281,"                def.nans = INFINITE;
",6,0,0,0,0,0,0,0,0,7,20,5,0.25000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2282,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.25000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2268,"                if ( (result.exp+mant.length) < MIN_EXP) {
",10,2,0,2,5,0,0,0,0,12,42,5,0.20000,0
defect4j,math,org/apache/commons/math3/dfp/Dfp,17,2272,"                    def = newInstance(result);  // gradual underflow
",2,0,0,1,2,0,4,0,0,7,48,7,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,583,"            lambda = 4 + (int) (3. * Math.log(dimension));
",2,2,0,3,6,0,6,0,0,11,46,6,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,751,"                    negccov = negcovMax;
",4,0,0,0,0,0,0,0,0,5,20,10,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,246,"        this(0);
",0,0,0,1,2,0,0,0,0,0,8,3,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,247,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,
",6,0,0,0,1,0,0,0,0,6,62,4,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,256,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,929,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,930,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,931,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,932,"                res[i] = (x[i] - boundaries[0][i]) / diff;
",2,2,1,5,10,0,0,0,0,17,42,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,934,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,955,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,956,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,957,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,958,"                res[i] = diff * x[i] + boundaries[0][i];
",2,2,1,4,8,0,0,0,0,17,40,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,960,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,970,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,971,"                value = CMAESOptimizer.this
",4,0,0,0,0,0,0,0,0,5,27,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,974,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1014,"            double[] repaired = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,41,6,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1015,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1016,"                if (x[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1018,"                } else if (x[i] > 1.0) {
",0,1,1,2,6,0,0,0,0,5,24,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1021,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1024,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1033,"            double penalty = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1034,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1035,"                double diff = Math.abs(x[i] - repaired[i]);
",2,1,1,3,6,0,4,0,0,15,43,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1036,"                penalty += diff * valueRange;
",6,1,0,0,0,0,0,0,0,8,29,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,1038,"            return isMinimize ? penalty : -penalty;
",6,0,0,0,0,1,0,0,0,7,39,6,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,459,"                    break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,9,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,535,"                boundaries = new double[2][];
",2,0,0,2,4,0,0,0,0,3,29,8,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,536,"                boundaries[0] = lB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,537,"                boundaries[1] = uB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,540,"                for (int i = 0; i < lB.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,541,"                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {
",0,1,1,6,13,0,4,0,0,13,61,11,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,128,"            lowerBound = lower.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,136,"            upperBound = upper.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,514,"                hasFiniteBounds = true;
",2,0,0,0,0,0,0,0,0,4,23,8,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,515,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,521,"            for (int i = 0; i < lB.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,522,"                if (Double.isInfinite(lB[i]) ||
",0,1,1,2,5,0,4,0,0,9,31,8,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,529,"            if (hasInfiniteBounds) {
",2,0,0,1,3,0,0,0,0,2,24,6,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,109,"            if (upper.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,112,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,113,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,114,"                final double hi = upper[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,115,"                if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,100,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.11111,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,101,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.11111,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,102,"                final double lo = lower[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.11111,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,103,"                if (v < lo) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.11111,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,18,97,"            if (lower.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.10000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,927,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,7,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,953,"                return x;
",2,0,0,0,0,1,0,0,0,2,9,7,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,18,975,"                value = CMAESOptimizer.this
",4,0,0,0,0,0,0,0,0,5,27,7,0.07143,0
defect4j,math,org/apache/commons/math3/util/FastMath,18,3514,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.07143,0
defect4j,math,org/apache/commons/math3/util/FastMath,18,3519,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,0.07143,0
defect4j,math,org/apache/commons/math3/util/FastMath,18,3520,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,0.07143,0
defect4j,math,org/apache/commons/math3/util/FastMath,18,3523,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,0.07143,0
defect4j,math,org/apache/commons/math3/linear/RealVector,18,60,"public abstract class RealVector {
",2,0,0,0,1,2,0,0,0,4,34,1,0.06667,0
defect4j,math,org/apache/commons/math3/linear/RealVector,18,1141,"    protected class SparseEntryIterator implements Iterator<Entry> {
",2,0,0,0,1,1,0,4,0,7,64,2,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,521,"        MatrixUtils.checkColumnIndex(this, column);
",0,0,0,1,2,0,6,0,0,6,43,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,522,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,523,"        if (vector.getDimension() != nRows) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,527,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,528,"            setEntry(i, column, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,40,7,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,530,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,534,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,535,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,536,"        final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,537,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,538,"            out[i] = getEntry(row, i);
",0,0,1,2,4,0,6,0,0,11,26,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,541,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,18,616,"        return getColumnDimension() == getRowDimension();
",0,1,0,2,4,1,4,0,0,5,49,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,85,"    public ArrayRealVector(double[] d) {
",4,0,0,2,5,1,0,0,0,5,36,2,0.06667,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,86,"        data = d.clone();
",2,0,0,1,2,0,4,0,0,7,17,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,87,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,43,"    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();
",2,0,0,1,2,3,4,2,0,11,86,2,0.06667,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,600,"            return data[index];
",0,0,1,1,2,1,0,0,0,4,19,7,0.06667,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,18,610,"        return data.length;
",4,0,0,0,0,1,0,0,0,4,19,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,79,"        throws DimensionMismatchException, NoDataException, NullArgumentException {
",6,0,0,0,1,0,0,0,0,6,75,2,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,80,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,254,"        return copyOut();
",0,0,0,1,2,1,2,0,0,2,17,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,272,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,273,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,276,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,279,"            MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,7,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,280,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,281,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,285,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,286,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,289,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,290,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,291,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,294,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,296,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,300,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,528,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,529,"        final double[][] out = new double[nRows][this.getColumnDimension()];
",2,0,1,5,10,1,2,0,0,7,68,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,531,"        for (int i = 0; i < nRows; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,532,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);
",2,0,1,4,8,0,4,0,0,18,56,7,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,534,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,547,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,0.06667,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,18,548,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,115,"        throws MathArithmeticException {
",2,0,0,0,1,0,0,0,0,2,32,2,0.06667,0
defect4j,math,org/apache/commons/math3/linear/EigenDecomposition,18,81,"    private byte maxIter = 30;
",2,0,0,0,0,1,0,0,0,3,26,2,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,246,"        this(0);
",0,0,0,1,2,0,0,0,0,0,8,3,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,247,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,253,"        this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,
",6,0,0,0,1,0,0,0,0,6,62,4,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,256,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,570,"            lambda = 4 + (int) (3. * Math.log(dimension));
",2,2,0,3,6,0,6,0,0,11,46,6,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,916,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,917,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,918,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,919,"                res[i] = (x[i] - boundaries[0][i]) / diff;
",2,2,1,5,10,0,0,0,0,17,42,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,921,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,942,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,943,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,944,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,945,"                res[i] = diff * x[i] + boundaries[0][i];
",2,2,1,4,8,0,0,0,0,17,40,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,947,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,957,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,958,"                value = CMAESOptimizer.this
",4,0,0,0,0,0,0,0,0,5,27,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,999,"            double[] repaired = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,41,6,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1000,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1001,"                if (x[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,15,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1003,"                } else if (x[i] > 1.0) {
",0,1,1,2,6,0,0,0,0,5,24,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1006,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,1009,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,535,"                boundaries = new double[2][];
",2,0,0,2,4,0,0,0,0,3,29,8,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,536,"                boundaries[0] = lB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,537,"                boundaries[1] = uB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,128,"            lowerBound = lower.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,136,"            upperBound = upper.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,514,"                hasFiniteBounds = true;
",2,0,0,0,0,0,0,0,0,4,23,8,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,515,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,521,"            for (int i = 0; i < lB.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,522,"                if (Double.isInfinite(lB[i]) ||
",0,1,1,2,5,0,4,0,0,9,31,8,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,19,529,"            if (hasInfiniteBounds) {
",2,0,0,1,3,0,0,0,0,2,24,6,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,109,"            if (upper.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,112,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,113,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,114,"                final double hi = upper[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,115,"                if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,100,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,101,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,102,"                final double lo = lower[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,19,103,"                if (v < lo) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,423,"                            break generationLoop;
",2,0,0,0,0,0,0,0,0,2,21,13,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,995,"                    repaired[i] = 1.0;
",0,0,1,1,2,0,0,0,0,5,18,10,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,908,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,909,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,910,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,911,"                res[i] = (x[i] - boundaries[0][i]) / diff;
",2,2,1,5,10,0,0,0,0,17,42,7,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,913,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,933,"            double[] res = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,36,6,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,934,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,935,"                double diff = boundaries[1][i] - boundaries[0][i];
",2,1,1,4,8,0,0,0,0,11,50,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,936,"                res[i] = diff * x[i] + boundaries[0][i];
",2,2,1,4,8,0,0,0,0,17,40,7,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,938,"            return res;
",2,0,0,0,0,1,0,0,0,2,11,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,948,"                double[] repaired = repair(point);
",2,0,0,2,4,0,4,0,0,6,34,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,949,"                value = CMAESOptimizer.this
",4,0,0,0,0,0,0,0,0,5,27,7,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,952,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,990,"            double[] repaired = new double[x.length];
",6,0,0,2,4,0,0,0,0,6,41,6,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,991,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,992,"                if (x[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,15,7,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,994,"                } else if (x[i] > 1.0) {
",0,1,1,2,6,0,0,0,0,5,24,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,997,"                    repaired[i] = x[i];
",0,0,1,2,4,0,0,0,0,9,19,10,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1000,"            return repaired;
",2,0,0,0,0,1,0,0,0,2,16,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1009,"            double penalty = 0;
",2,0,0,0,0,0,0,0,0,2,19,6,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1010,"            for (int i = 0; i < x.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,5,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1011,"                double diff = Math.abs(x[i] - repaired[i]);
",2,1,1,3,6,0,4,0,0,15,43,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1012,"                penalty += diff * valueRange;
",6,1,0,0,0,0,0,0,0,8,29,7,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1014,"            return isMinimize ? penalty : -penalty;
",6,0,0,0,0,1,0,0,0,7,39,6,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,529,"                boundaries = new double[2][];
",2,0,0,2,4,0,0,0,0,3,29,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,530,"                boundaries[0] = lB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,531,"                boundaries[1] = uB;
",2,0,1,1,2,0,0,0,0,5,19,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,508,"                hasFiniteBounds = true;
",2,0,0,0,0,0,0,0,0,4,23,8,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,509,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,515,"            for (int i = 0; i < lB.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,6,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,516,"                if (Double.isInfinite(lB[i]) ||
",0,1,1,2,5,0,4,0,0,9,31,8,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,523,"            if (hasInfiniteBounds) {
",2,0,0,1,3,0,0,0,0,2,24,6,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,128,"            lowerBound = lower.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,136,"            upperBound = upper.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,109,"            if (upper.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,112,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,113,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,114,"                final double hi = upper[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,115,"                if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.16667,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,100,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,101,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,102,"                final double lo = lower[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,103,"                if (v < lo) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.14286,0
defect4j,math,org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,20,97,"            if (lower.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,378,"                            arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))
",2,0,0,2,5,0,14,0,0,17,52,13,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,407,"                    updateCovariance(hsig, bestArx, arz, arindex, xold);
",0,0,0,1,2,0,12,0,0,12,52,10,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,696,"        double negccov = 0;
",2,0,0,0,0,0,0,0,0,2,19,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,697,"        if (ccov1 + ccovmu > 0) {
",4,2,0,1,3,0,0,0,0,6,25,4,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,698,"            RealMatrix arpos = bestArx.subtract(repmat(xold, 1, mu))
",2,0,0,2,4,0,10,2,0,14,56,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,700,"            RealMatrix roneu = pc.multiply(pc.transpose())
",2,0,0,2,4,0,8,2,0,12,46,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,703,"            double oldFac = hsig ? 0 : ccov1 * cc * (2. - cc);
",10,2,0,1,2,0,0,0,0,12,50,7,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,704,"            oldFac += 1. - ccov1 - ccovmu;
",6,1,0,0,0,0,0,0,0,8,30,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,705,"            if (isActiveCMA) {
",2,0,0,1,3,0,0,0,0,2,18,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,707,"                negccov = (1. - ccovmu) * 0.25 * mueff /
",6,3,0,1,2,0,0,0,0,10,40,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,709,"                double negminresidualvariance = 0.66;
",2,0,0,0,0,0,0,0,0,2,37,9,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,712,"                double negalphaold = 0.5; // where to make up for the variance
",2,0,0,0,0,0,0,0,0,2,62,9,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,715,"                int[] arReverseIndex = reverse(arindex);
",2,0,0,2,4,0,4,0,0,6,40,9,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,716,"                RealMatrix arzneg
",2,0,0,0,0,0,0,2,0,4,17,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,718,"                RealMatrix arnorms = sqrt(sumRows(square(arzneg)));
",2,0,0,3,6,0,8,2,0,12,51,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,719,"                int[] idxnorms = sortedIndices(arnorms.getRow(0));
",2,0,0,3,6,0,6,0,0,8,50,9,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,720,"                RealMatrix arnormsSorted = selectColumns(arnorms, idxnorms);
",2,0,0,1,2,0,6,2,0,10,60,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,721,"                int[] idxReverse = reverse(idxnorms);
",2,0,0,2,4,0,4,0,0,6,37,9,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,722,"                RealMatrix arnormsReverse = selectColumns(arnorms, idxReverse);
",2,0,0,1,2,0,6,2,0,10,63,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,723,"                arnorms = divide(arnormsReverse, arnormsSorted);
",2,0,0,1,2,0,6,0,0,9,48,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,724,"                int[] idxInv = inverse(idxnorms);
",2,0,0,2,4,0,4,0,0,6,33,9,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,725,"                RealMatrix arnormsInv = selectColumns(arnorms, idxInv);
",2,0,0,1,2,0,6,2,0,10,55,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,727,"                double negcovMax = (1. - negminresidualvariance) /
",4,2,0,1,2,0,0,0,0,6,50,9,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,729,"                if (negccov > negcovMax) {
",4,1,0,1,3,0,0,0,0,5,26,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,732,"                arzneg = times(arzneg, repmat(arnormsInv, dimension, 1));
",2,0,0,2,4,0,10,0,0,13,57,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,733,"                RealMatrix artmp = BD.multiply(arzneg);
",2,0,0,1,2,0,6,2,0,10,39,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,734,"                RealMatrix Cneg = artmp.multiply(diag(weights)).multiply(
",2,0,0,2,5,0,10,2,0,14,57,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,736,"                oldFac += negalphaold * negccov;
",6,1,0,0,0,0,0,0,0,8,32,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,737,"                C = C.scalarMultiply(oldFac)
",2,0,0,1,2,0,6,0,0,9,28,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,748,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,759,"        updateBD(negccov);
",0,0,0,1,2,0,4,0,0,4,18,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,760,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,768,"        if (ccov1 + ccovmu + negccov > 0 &&
",6,3,0,0,1,0,0,0,0,9,35,4,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,771,"            C = triu(C, 0).add(triu(C, 1).transpose());
",2,0,0,4,8,0,12,0,0,15,43,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,773,"            EigenDecomposition eig = new EigenDecomposition(C);
",4,0,0,1,2,0,0,4,0,8,51,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,774,"            B = eig.getV(); // eigen decomposition, B==normalized eigenvectors
",2,0,0,1,2,0,4,0,0,7,66,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,775,"            D = eig.getD();
",2,0,0,1,2,0,4,0,0,7,15,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,776,"            diagD = diag(D);
",2,0,0,1,2,0,4,0,0,7,16,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,777,"            if (min(diagD) <= 0) {
",0,1,0,2,5,0,4,0,0,5,22,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,787,"            if (max(diagD) > 1e14 * min(diagD)) {
",0,2,0,3,7,0,8,0,0,10,37,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,792,"            diagC = diag(C);
",2,0,0,1,2,0,4,0,0,7,16,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,793,"            diagD = sqrt(diagD); // D contains standard deviations now
",2,0,0,1,2,0,4,0,0,7,58,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,794,"            BD = times(B, repmat(diagD.transpose(), dimension, 1)); // O(n^2)
",2,0,0,4,8,0,12,0,0,15,65,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,796,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1085,"        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
",2,0,0,6,12,0,8,0,0,10,71,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1086,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1087,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1088,"                d[r][c] = m.getEntry(r, c) / n.getEntry(r, c);
",0,1,1,4,8,0,16,0,0,24,46,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1091,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1115,"        double[][] d = new double[m.getRowDimension()][m.getColumnDimension()];
",2,0,0,6,12,0,8,0,0,10,71,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1116,"        for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,4,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1117,"            for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1118,"                d[r][c] = r <= c - k ? m.getEntry(r, c) : 0;
",6,2,1,3,6,0,8,0,0,23,44,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1121,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1129,"        double[][] d = new double[1][m.getColumnDimension()];
",2,0,0,5,10,0,4,0,0,6,53,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1130,"        for (int c = 0; c < m.getColumnDimension(); c++) {
",6,1,0,2,5,0,4,0,0,12,50,4,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1131,"            double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1132,"            for (int r = 0; r < m.getRowDimension(); r++) {
",6,1,0,2,5,0,4,0,0,12,47,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1133,"                sum += m.getEntry(r, c);
",2,0,0,1,2,0,8,0,0,11,24,8,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1135,"            d[0][c] = sum;
",2,0,1,2,4,0,0,0,0,7,14,6,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,1137,"        return new Array2DRowRealMatrix(d, false);
",2,0,0,1,2,1,0,2,0,5,42,5,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/direct/CMAESOptimizer,20,921,"            return
",0,0,0,0,0,1,0,0,0,0,6,3,0.06667,1
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,97,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,99,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,100,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,101,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,102,"        for (int row = 0; row < rowCount; ++row) {
",8,1,0,1,3,0,0,0,0,10,42,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,103,"            for (int col = 0; col < columnCount; ++col) {
",8,1,0,1,3,0,0,0,0,10,45,6,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,104,"                out.setEntry(row, col, getEntry(row, col) - m.getEntry(row, col));
",0,1,0,3,6,0,22,0,0,23,66,9,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,108,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,456,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,457,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,458,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,459,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,460,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,461,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,1,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,21,464,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,130,"        if (data == null ||
",2,2,0,0,1,0,0,0,0,4,19,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,134,"        return (data.length * data[0].length <= 4096) ?
",6,2,1,2,4,1,0,0,0,10,47,6,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,523,"        if ((left.getRowDimension()    != right.getRowDimension()) ||
",0,2,0,3,7,0,8,0,0,10,61,4,1,0
defect4j,math,org/apache/commons/math3/linear/MatrixUtils,21,528,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,241,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,256,"                this.endRow = endRow;
",4,0,0,0,0,0,0,0,0,5,21,10,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,257,"                columnSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,258,"                maxColSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,259,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,263,"                columnSum += FastMath.abs(value);
",2,0,0,1,2,0,6,0,0,9,33,10,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,264,"                if (row == endRow) {
",4,1,0,1,3,0,0,0,0,5,20,10,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,265,"                    maxColSum = FastMath.max(maxColSum, columnSum);
",2,0,0,1,2,0,8,0,0,11,47,12,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,266,"                    columnSum = 0;
",2,0,0,0,0,0,0,0,0,3,14,12,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,268,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,21,272,"                return maxColSum;
",2,0,0,0,0,1,0,0,0,2,17,10,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3508,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3511,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3514,"        if (a != b) {
",4,1,0,1,3,0,0,0,0,5,13,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3519,"        long bits = Double.doubleToRawLongBits(a);
",2,0,0,1,2,0,6,0,0,8,42,5,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3520,"        if (bits == 0x8000000000000000L) {
",2,1,0,1,3,0,0,0,0,3,34,4,1,0
defect4j,math,org/apache/commons/math3/util/FastMath,21,3523,"        return a;
",2,0,0,0,0,1,0,0,0,2,9,4,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,63,"        throws NonPositiveDefiniteMatrixException {
",2,0,0,0,1,0,0,0,0,2,43,2,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,65,"        final int order = matrix.getRowDimension();
",2,0,0,1,2,1,4,0,0,7,43,4,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,66,"        final double[][] c = matrix.getData();
",2,0,0,3,6,1,4,0,0,7,38,4,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,67,"        final double[][] b = new double[order][order];
",2,0,1,4,8,1,0,0,0,7,46,4,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,69,"        int[] swap  = new int[order];
",2,0,1,2,4,0,0,0,0,4,29,5,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,70,"        int[] index = new int[order];
",2,0,1,2,4,0,0,0,0,4,29,5,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,71,"        for (int i = 0; i < order; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,72,"            index[i] = i;
",2,0,1,1,2,0,0,0,0,7,13,6,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,75,"        int r = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,76,"        for (boolean loop = true; loop;) {
",4,0,0,1,3,0,0,0,0,5,34,4,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,79,"            swap[r] = r;
",2,0,1,1,2,0,0,0,0,7,12,6,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,80,"            for (int i = r + 1; i < order; ++i) {
",10,2,0,1,3,0,0,0,0,13,37,6,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,81,"                int ii  = index[i];
",2,0,1,1,2,0,0,0,0,6,19,9,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,82,"                int isi = index[swap[i]];
",2,0,1,2,4,0,0,0,0,8,25,9,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,83,"                if (c[ii][ii] > c[isi][isi]) {
",0,1,1,5,11,0,0,0,0,13,30,8,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,84,"                    swap[r] = i;
",2,0,1,1,2,0,0,0,0,7,12,10,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,90,"            if (swap[r] != r) {
",2,1,1,2,5,0,0,0,0,7,19,6,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,91,"                int tmp = index[r];
",2,0,1,1,2,0,0,0,0,6,19,9,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,92,"                index[r] = index[swap[r]];
",0,0,1,3,6,0,0,0,0,11,26,8,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,93,"                index[swap[r]] = tmp;
",2,0,1,2,4,0,0,0,0,9,21,8,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,97,"            int ir = index[r];
",2,0,1,1,2,0,0,0,0,6,18,7,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,98,"            if (c[ir][ir] < small) {
",2,1,1,3,7,0,0,0,0,9,24,6,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,121,"                final double sqrt = FastMath.sqrt(c[ir][ir]);
",2,0,1,3,6,1,4,0,0,13,45,8,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,122,"                b[r][r] = sqrt;
",2,0,1,2,4,0,0,0,0,9,15,8,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,123,"                final double inverse  = 1 / sqrt;
",4,1,0,0,0,1,0,0,0,6,33,8,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,124,"                for (int i = r + 1; i < order; ++i) {
",10,2,0,1,3,0,0,0,0,13,37,8,1,1
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,125,"                    final int ii = index[i];
",2,0,1,1,2,1,0,0,0,7,24,10,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,126,"                    final double e = inverse * c[ii][ir];
",4,1,1,2,4,1,0,0,0,12,37,10,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,127,"                    b[i][r] = e;
",2,0,1,2,4,0,0,0,0,9,12,10,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,128,"                    c[ii][ii] -= e * e;
",4,1,1,2,4,0,0,0,0,12,19,10,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,129,"                    for (int j = r + 1; j < i; ++j) {
",10,2,0,1,3,0,0,0,0,13,33,10,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,130,"                        final int ij = index[j];
",2,0,1,1,2,1,0,0,0,7,24,12,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,131,"                        final double f = c[ii][ij] - e * b[j][r];
",4,2,1,4,8,1,0,0,0,19,41,12,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,132,"                        c[ii][ij] = f;
",2,0,1,2,4,0,0,0,0,9,14,12,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,133,"                        c[ij][ii] = f;
",2,0,1,2,4,0,0,0,0,9,14,12,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,138,"                loop = ++r < order;
",6,1,0,0,0,0,0,0,0,9,19,8,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,140,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,143,"        rank = r;
",4,0,0,0,0,0,0,0,0,5,9,4,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,144,"        root = MatrixUtils.createRealMatrix(order, r);
",2,0,0,1,2,0,8,0,0,11,46,4,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,145,"        for (int i = 0; i < order; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,146,"            for (int j = 0; j < r; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,6,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,147,"                root.setEntry(index[i], j, b[i][j]);
",0,0,1,4,8,0,6,0,0,16,36,9,1,0
defect4j,math,org/apache/commons/math3/linear/RectangularCholeskyDecomposition,21,151,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,275,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1.00000,1
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,184,"        return false;
",0,0,0,0,0,1,0,0,0,1,13,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,1107,"            return Double.NEGATIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.50000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,129,"        final double nhalf = numeratorDegreesOfFreedom / 2;
",4,1,0,0,0,1,0,0,0,6,51,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,130,"        final double mhalf = denominatorDegreesOfFreedom / 2;
",4,1,0,0,0,1,0,0,0,6,53,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,131,"        final double logx = FastMath.log(x);
",2,0,0,1,2,1,6,0,0,9,36,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,132,"        final double logn = FastMath.log(numeratorDegreesOfFreedom);
",2,0,0,1,2,1,6,0,0,9,60,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,133,"        final double logm = FastMath.log(denominatorDegreesOfFreedom);
",2,0,0,1,2,1,6,0,0,9,62,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,134,"        final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +
",6,2,0,0,1,1,4,0,0,13,66,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,136,"        return FastMath.exp(nhalf * logn + nhalf * logx - logx +
",10,8,0,0,1,1,4,0,0,22,56,5,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,109,"        if (x < lower || x > upper) {
",8,3,0,1,3,0,0,0,0,11,29,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,112,"        return 1 / (upper - lower);
",4,2,0,1,2,1,0,0,0,6,27,4,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/UniformRealDistribution,22,174,"        return upper;
",2,0,0,0,0,1,0,0,0,2,13,4,0.25000,0
defect4j,math,org/apache/commons/math3/special/Beta,22,170,"        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);
",4,0,0,1,2,1,8,0,0,12,57,5,0.25000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,22,258,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.14286,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,864,"            intVal = (int) x;
",4,0,0,1,2,0,0,0,0,5,17,6,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,866,"            if (intVal > 709) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,874,"            intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.11111,0
defect4j,math,org/apache/commons/math3/util/FastMath,22,875,"            intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];
",10,1,0,1,2,0,0,0,0,12,71,6,0.11111,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,72,"        this(k, m1, m2, m3, null);
",8,0,0,1,2,0,0,0,0,8,26,4,0.08696,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,73,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08696,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,155,"            setSeed(System.currentTimeMillis() + System.identityHashCode(this));
",0,1,0,3,6,0,10,0,0,11,68,7,0.08696,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,156,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.08696,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,179,"        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });
",4,2,0,7,14,0,2,0,0,8,71,5,0.08696,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,180,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08696,0
defect4j,math,org/apache/commons/math3/random/Well19937c,22,57,"        super(K, M1, M2, M3);
",8,0,0,1,2,0,0,0,0,8,21,4,0.08696,0
defect4j,math,org/apache/commons/math3/random/Well19937c,22,58,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08696,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,94,"    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {
",12,0,0,2,5,6,0,0,0,18,97,2,0.08511,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,99,"        final int w = 32;
",2,0,0,0,0,1,0,0,0,3,17,4,0.08511,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,100,"        final int r = (k + w - 1) / w;
",8,3,0,1,2,1,0,0,0,12,30,4,0.08511,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,101,"        this.v      = new int[r];
",2,0,1,1,2,0,0,0,0,5,25,4,0.08511,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,102,"        this.index  = 0;
",2,0,0,0,0,0,0,0,0,3,16,4,0.08511,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,106,"        iRm1 = new int[r];
",2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0
defect4j,math,org/apache/commons/math3/random/AbstractWell,22,107,"        iRm2 = new int[r];
",2,0,1,1,2,0,0,0,0,5,18,4,0.08511,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,234,"        double previous = val[0];
",2,0,1,1,2,0,0,0,0,4,25,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,235,"        final int max = val.length;
",6,0,0,0,0,1,0,0,0,7,27,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,239,"        for (index = 1; index < max; index++) {
",8,1,0,1,3,0,0,0,0,11,39,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,240,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,7,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,242,"                if (strict) {
",2,0,0,1,3,0,0,0,0,2,13,8,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,243,"                    if (val[index] <= previous) {
",2,1,1,2,5,0,0,0,0,7,29,10,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,268,"            previous = val[index];
",2,0,1,1,2,0,0,0,0,7,22,7,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,271,"        if (index == max) {
",4,1,0,1,3,0,0,0,0,5,19,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,273,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,295,"        checkOrder(val, dir, strict, true);
",0,0,0,1,2,0,8,0,0,9,35,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,296,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,306,"        checkOrder(val, OrderDirection.INCREASING, true);
",4,0,0,1,2,0,4,0,0,9,49,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,307,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,143,"    public static enum OrderDirection {
",2,0,0,0,1,2,0,0,0,4,35,2,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,145,"        INCREASING,
",2,0,0,0,0,0,0,0,0,2,11,3,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,147,"        DECREASING
",2,0,0,0,0,0,0,0,0,2,10,3,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,23,166,"            switch (dir) {
",2,0,0,1,3,0,0,0,0,2,14,6,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,"        return new UnivariateFunction() {
",0,0,0,1,3,1,0,2,0,2,33,6,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,141,"        return new UnivariateFunction() {
",0,0,0,1,3,1,0,2,0,2,33,6,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,144,"                double r = f[0].value(x);
",2,0,1,2,4,0,4,0,0,8,25,10,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,145,"                for (int i = 1; i < f.length; i++) {
",10,1,0,1,3,0,0,0,0,12,36,9,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,146,"                    r += f[i].value(x);
",2,0,1,2,4,0,4,0,0,11,19,11,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/FunctionUtils,23,148,"                return r;
",2,0,0,0,0,1,0,0,0,2,9,9,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,64,"               DimensionMismatchException {
",2,0,0,0,1,0,0,0,0,2,28,2,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,65,"        if (x == null ||
",2,2,0,0,1,0,0,0,0,4,16,4,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,69,"        if (x.length == 0 ||
",4,2,0,0,1,0,0,0,0,6,20,4,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,73,"        if (y.length != x.length) {
",8,1,0,1,3,0,0,0,0,9,27,4,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,76,"        MathArrays.checkOrder(x);
",0,0,0,1,2,0,6,0,0,6,25,5,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,78,"        abscissa = MathArrays.copyOf(x);
",2,0,0,1,2,0,6,0,0,9,32,4,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,79,"        ordinate = MathArrays.copyOf(y);
",2,0,0,1,2,0,6,0,0,9,32,4,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,80,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,84,"        int index = Arrays.binarySearch(abscissa, x);
",2,0,0,1,2,0,8,0,0,10,45,5,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,85,"        double fx = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,87,"        if (index < -1) {
",2,1,0,1,3,0,0,0,0,4,17,4,1.00000,0
defect4j,math,org/apache/commons/math3/analysis/function/StepFunction,23,89,"            fx = ordinate[-index-2];
",4,1,1,1,2,0,0,0,0,9,24,6,1.00000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,532,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.25000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,560,"         final double[] output = new double[len];
",2,0,1,2,4,1,0,0,0,5,40,4,0.25000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,561,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.25000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,24,562,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.25000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,33,"public class Sin implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
",2,0,0,0,1,1,0,4,0,7,88,1,0.25000,0
defect4j,math,org/apache/commons/math3/analysis/function/Sin,24,36,"        return FastMath.sin(x);
",0,0,0,1,2,1,6,0,0,6,23,5,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,183,"                            if (x <= m) {
",4,1,0,1,3,0,0,0,0,5,13,14,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,184,"                                d = tol1;
",4,0,0,0,0,0,0,0,0,5,9,16,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1653,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1655,"        double p = 2.7553817452272217E-6;
",2,0,0,0,0,0,0,0,0,2,33,5,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1656,"        p = p * x2 + -1.9841269659586505E-4;
",6,2,0,0,0,0,0,0,0,10,36,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1657,"        p = p * x2 + 0.008333333333329196;
",6,2,0,0,0,0,0,0,0,9,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1658,"        p = p * x2 + -0.16666666666666666;
",6,2,0,0,0,0,0,0,0,10,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1661,"        p = p * x2 * x;
",8,1,0,0,0,0,0,0,0,10,15,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1663,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1673,"        double x2 = x*x;
",6,1,0,0,0,0,0,0,0,7,16,5,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1675,"        double p = 2.479773539153719E-5;
",2,0,0,0,0,0,0,0,0,2,32,5,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1676,"        p = p * x2 + -0.0013888888689039883;
",6,2,0,0,0,0,0,0,0,10,36,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1677,"        p = p * x2 + 0.041666666666621166;
",6,2,0,0,0,0,0,0,0,9,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1678,"        p = p * x2 + -0.49999999999999994;
",6,2,0,0,0,0,0,0,0,10,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1679,"        p *= x2;
",4,0,0,0,0,0,0,0,0,5,8,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1681,"        return p;
",2,0,0,0,0,1,0,0,0,2,9,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1692,"        int idx = (int) ((xa * 8.0) + 0.5);
",4,2,0,3,6,0,0,0,0,6,35,5,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1693,"        final double epsilon = xa - EIGHTHS[idx]; //idx*0.125;
",4,1,1,1,2,1,0,0,0,10,54,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1696,"        final double sintA = SINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1697,"        final double sintB = SINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,39,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1698,"        final double costA = COSINE_TABLE_A[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1699,"        final double costB = COSINE_TABLE_B[idx];
",2,0,1,1,2,1,0,0,0,7,41,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1702,"        double sinEpsA = epsilon;
",4,0,0,0,0,0,0,0,0,4,25,5,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1703,"        double sinEpsB = polySine(epsilon);
",2,0,0,1,2,0,4,0,0,6,35,5,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1704,"        final double cosEpsA = 1.0;
",2,0,0,0,0,1,0,0,0,3,27,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1705,"        final double cosEpsB = polyCosine(epsilon);
",2,0,0,1,2,1,4,0,0,7,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1708,"        final double temp = sinEpsA * HEX_40000000;
",6,1,0,0,0,1,0,0,0,8,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1709,"        double temp2 = (sinEpsA + temp) - temp;
",8,2,0,1,2,0,0,0,0,10,39,5,0.20000,0
defect4j,math,org/apache/commons/math3/util/FastMath,24,1710,"        sinEpsB +=  sinEpsA - temp2;
",6,1,0,0,0,0,0,0,0,8,28,4,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/univariate/BrentOptimizer,24,267,"                return current;
",2,0,0,0,0,1,0,0,0,2,15,8,0.11111,1
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,326,"                a = FastMath.sqrt(c1 / c2);
",6,1,0,1,2,0,4,0,0,12,27,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,327,"                omega = FastMath.sqrt(c2 / c3);
",6,1,0,1,2,0,4,0,0,12,31,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,201,"            this.observations = observations.clone();
",2,0,0,1,2,0,4,0,0,7,41,5,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,202,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,215,"            sortObservations();
",0,0,0,1,2,0,2,0,0,2,19,6,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,216,"            guessAOmega();
",0,0,0,1,2,0,2,0,0,2,14,6,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,217,"            guessPhi();
",0,0,0,1,2,0,2,0,0,2,11,6,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/fitting/HarmonicFitter,25,218,"            return new double[] { a, omega, phi };
",6,0,0,2,4,1,0,0,0,6,38,7,0.25000,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,48,"                                Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,1.00000,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,49,"        getContext().addMessage(pattern, args);
",0,0,0,2,4,0,8,0,0,8,39,5,1.00000,0
defect4j,math,org/apache/commons/math3/exception/ConvergenceException,26,50,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,69,"        this(LocalizedFormats.ILLEGAL_STATE);
",4,0,0,1,2,0,0,0,0,4,37,5,0.16667,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.16667,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,74,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,0.16667,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.14286,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.14286,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.14286,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,26,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,188,"            this.numerator = (int) a0;
",4,0,0,1,2,0,0,0,0,5,26,6,0.04545,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,189,"            this.denominator = 1;
",2,0,0,0,0,0,0,0,0,3,21,6,0.04545,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,190,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.04545,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,215,"                p0 = p1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,216,"                p1 = p2;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,217,"                q0 = q1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,218,"                q1 = q2;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,219,"                a0 = a1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,220,"                r0 = r1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.03846,0
defect4j,math,org/apache/commons/math3/util/FastMath,26,3255,"            return x*y;
",4,1,0,0,0,1,0,0,0,5,11,6,0.02000,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,193,"        long p0 = 1;
",2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,194,"        long q0 = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,195,"        long p1 = a0;
",4,0,0,0,0,0,0,0,0,4,13,5,0.01961,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,196,"        long q1 = 1;
",2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,198,"        long p2 = 0;
",2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,199,"        long q2 = 1;
",2,0,0,0,0,0,0,0,0,2,12,5,0.01961,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,201,"        int n = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.01961,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,202,"        boolean stop = false;
",2,0,0,0,0,0,0,0,0,3,21,5,0.01961,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,204,"            ++n;
",2,0,0,0,0,0,0,0,0,3,4,6,0.01961,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,205,"            double r1 = 1.0 / (r0 - a0);
",6,2,0,1,2,0,0,0,0,8,28,7,0.01961,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,206,"            long a1 = (long)FastMath.floor(r1);
",2,0,0,2,4,0,6,0,0,8,35,7,0.01961,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,207,"            p2 = (a1 * p1) + p0;
",8,2,0,1,2,0,0,0,0,11,20,6,0.01961,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,208,"            q2 = (a1 * q1) + q0;
",8,2,0,1,2,0,0,0,0,11,20,6,0.01961,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,209,"            if ((p2 > overflow) || (q2 > overflow)) {
",8,3,0,3,7,0,0,0,0,11,41,6,0.01961,1
defect4j,math,org/apache/commons/math3/fraction/Fraction,26,213,"            double convergent = (double)p2 / (double)q2;
",6,1,0,2,4,0,0,0,0,7,44,7,0.01961,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,597,"        return multiply(100).doubleValue();
",0,0,0,2,4,1,4,0,0,4,35,5,1.00000,1
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,555,"        return new Fraction(numerator * i, denominator);
",6,1,0,1,2,1,0,2,0,9,48,5,0.50000,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,319,"        return (double)numerator / (double)denominator;
",4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,256,"    public Fraction(int num, int den) {
",6,0,0,1,3,1,0,0,0,7,35,2,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,257,"        if (den == 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,261,"        if (den < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,271,"        final int d = ArithmeticUtils.gcd(num, den);
",2,0,0,1,2,1,8,0,0,11,44,4,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,272,"        if (d > 1) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,273,"            num /= d;
",4,0,0,0,0,0,0,0,0,5,9,6,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,274,"            den /= d;
",4,0,0,0,0,0,0,0,0,5,9,6,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,278,"        if (den < 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,282,"        this.numerator   = num;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,283,"        this.denominator = den;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,284,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,42,"    public static final Fraction TWO = new Fraction(2, 1);
",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,45,"    public static final Fraction ONE = new Fraction(1, 1);
",2,0,0,1,2,3,0,4,0,9,54,2,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,48,"    public static final Fraction ZERO = new Fraction(0, 1);
",2,0,0,1,2,3,0,4,0,9,55,2,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,51,"    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);
",2,0,0,1,2,3,0,4,0,9,62,2,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,54,"    public static final Fraction ONE_FIFTH = new Fraction(1, 5);
",2,0,0,1,2,3,0,4,0,9,60,2,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,57,"    public static final Fraction ONE_HALF = new Fraction(1, 2);
",2,0,0,1,2,3,0,4,0,9,59,2,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,60,"    public static final Fraction ONE_QUARTER = new Fraction(1, 4);
",2,0,0,1,2,3,0,4,0,9,62,2,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,63,"    public static final Fraction ONE_THIRD = new Fraction(1, 3);
",2,0,0,1,2,3,0,4,0,9,60,2,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,66,"    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);
",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,69,"    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);
",2,0,0,1,2,3,0,4,0,9,65,2,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,72,"    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);
",2,0,0,1,2,3,0,4,0,9,61,2,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,75,"    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);
",2,0,0,1,2,3,0,4,0,9,63,2,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,78,"    public static final Fraction TWO_THIRDS = new Fraction(2, 3);
",2,0,0,1,2,3,0,4,0,9,61,2,0.00488,0
defect4j,math,org/apache/commons/math3/fraction/Fraction,27,81,"    public static final Fraction MINUS_ONE = new Fraction(-1, 1);
",2,0,0,1,2,3,0,4,0,10,61,2,0.00488,0
defect4j,math,org/apache/commons/math3/util/FastMath,27,113,"    private static final double LN_QUICK_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,0.00488,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,138,"                Integer minRow = null;
",2,0,0,0,0,0,0,2,0,4,22,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,139,"                int minIndex = tableau.getWidth();
",2,0,0,1,2,0,4,0,0,6,34,8,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,140,"                for (Integer row : minRatioPositions) {
",4,0,0,1,3,0,0,2,0,6,39,7,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,141,"                    int i = tableau.getNumObjectiveFunctions();
",2,0,0,1,2,0,4,0,0,6,43,10,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,142,"                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
",8,4,0,2,5,0,4,0,0,17,58,9,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,143,"                        if (row == tableau.getBasicRow(i)) {
",2,1,0,2,5,0,6,0,0,9,36,11,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,144,"                            if (i < minIndex) {
",4,1,0,1,3,0,0,0,0,5,19,13,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,145,"                                minIndex = i;
",4,0,0,0,0,0,0,0,0,5,13,15,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,146,"                                minRow = row;
",4,0,0,0,0,0,0,0,0,5,13,15,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,150,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,151,"                return minRow;
",2,0,0,0,0,1,0,0,0,2,14,7,0.33333,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.25000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,0.25000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,0.25000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,28,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,127,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.20000,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,121,"                        int column = i + tableau.getArtificialVariableOffset();
",4,1,0,1,2,0,4,0,0,9,55,12,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,122,"                        final double entry = tableau.getEntry(row, column);
",2,0,0,1,2,1,8,0,0,11,51,11,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,123,"                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
",0,1,0,4,9,0,18,0,0,19,86,11,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,124,"                            return row;
",2,0,0,0,0,1,0,0,0,2,11,13,0.12500,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,104,"                    minRatioPositions.add(i);
",0,0,0,1,2,0,6,0,0,6,25,11,0.11111,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,119,"                for (Integer row : minRatioPositions) {
",4,0,0,1,3,0,0,2,0,6,39,7,0.11111,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,120,"                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
",6,1,0,2,5,0,4,0,0,12,63,9,0.11111,0
defect4j,math,org/apache/commons/math3/util/Precision,28,117,"            return -1;
",0,0,0,0,0,1,0,0,0,1,10,7,0.07692,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,231,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess
",2,1,0,2,4,0,8,0,0,13,74,10,0.07143,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,227,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.06667,0
defect4j,math,org/apache/commons/math3/util/Precision,28,115,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.06250,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,257,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.05556,0
defect4j,math,org/apache/commons/math3/util/MathUtils,28,260,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {
",6,0,0,0,1,0,0,0,0,6,75,2,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,75,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,262,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,263,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,266,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,269,"            MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,7,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,270,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,271,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,275,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,276,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,279,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,280,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,281,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,286,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,290,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,526,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,0.05556,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,28,527,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,52,"    protected AbstractRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,33,2,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,209,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,337,"        Set<Integer> columnsToDrop = new TreeSet<Integer>();
",2,0,0,1,2,0,0,8,0,10,52,4,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,338,"        columnsToDrop.add(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,341,"        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
",6,1,0,3,7,0,4,0,0,12,82,4,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,342,"            final double entry = tableau.getEntry(0, i);
",2,0,0,1,2,1,6,0,0,9,44,6,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,343,"            if (Precision.compareTo(entry, 0d, epsilon) > 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,349,"        for (int i = 0; i < getNumArtificialVariables(); i++) {
",6,1,0,2,5,0,2,0,0,10,55,4,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,350,"            int col = i + getArtificialVariableOffset();
",4,1,0,1,2,0,2,0,0,7,44,7,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,351,"            if (getBasicRow(col) == null) {
",0,1,0,2,5,0,4,0,0,6,31,6,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,352,"                columnsToDrop.add(col);
",0,0,0,1,2,0,6,0,0,6,23,9,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,356,"        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
",2,2,0,7,14,0,8,0,0,12,83,5,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,357,"        for (int i = 1; i < getHeight(); i++) {
",6,1,0,2,5,0,2,0,0,10,39,4,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,358,"            int col = 0;
",2,0,0,0,0,0,0,0,0,2,12,7,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,359,"            for (int j = 0; j < getWidth(); j++) {
",6,1,0,2,5,0,2,0,0,10,38,6,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,360,"                if (!columnsToDrop.contains(j)) {
",0,0,0,2,5,0,6,0,0,7,33,8,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,361,"                    matrix[i - 1][col++] = tableau.getEntry(i, j);
",4,1,1,3,6,0,8,0,0,17,46,10,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,367,"        Integer[] drop = columnsToDrop.toArray(new Integer[columnsToDrop.size()]);
",2,0,0,4,8,0,8,4,0,14,74,4,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,368,"        for (int i = drop.length - 1; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,44,4,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,369,"            columnLabels.remove((int) drop[i]);
",0,0,1,3,6,0,4,0,0,8,35,7,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,372,"        this.tableau = new Array2DRowRealMatrix(matrix);
",4,0,0,1,2,0,0,2,0,7,48,4,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,373,"        this.numArtificialVariables = 0;
",2,0,0,0,0,0,0,0,0,3,32,4,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,374,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,28,202,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.05000,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,28,325,"        return row;
",2,0,0,0,0,1,0,0,0,2,11,4,0.05000,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,486,"        return new ArrayRealVector(getRow(row), false);
",0,0,0,2,4,1,4,2,0,7,47,5,0.04762,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,491,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.04762,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,492,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.04762,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,493,"        if (vector.getDimension() != nCols) {
",2,1,0,2,5,0,4,0,0,7,37,4,0.04762,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,497,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.04762,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,498,"            setEntry(row, i, vector.getEntry(i));
",0,0,0,2,4,0,12,0,0,12,37,7,0.04762,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,500,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04762,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,522,"        MatrixUtils.checkRowIndex(this, row);
",0,0,0,1,2,0,6,0,0,6,37,5,0.04762,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,523,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.04762,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,524,"        final double[] out = new double[nCols];
",2,0,1,2,4,1,0,0,0,5,39,4,0.04762,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,525,"        for (int i = 0; i < nCols; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.04762,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,526,"            out[i] = getEntry(row, i);
",0,0,1,2,4,0,6,0,0,11,26,6,0.04762,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,28,529,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.04762,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,64,"    public ArrayRealVector(int size) {
",4,0,0,1,3,1,0,0,0,5,34,2,0.04762,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,65,"        data = new double[size];
",2,0,1,1,2,0,0,0,0,5,24,4,0.04762,0
defect4j,math,org/apache/commons/math3/linear/ArrayRealVector,28,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04762,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,361,"        OpenMapRealVector res = new OpenMapRealVector(this);
",2,0,0,1,2,0,0,4,0,6,52,4,1,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,362,"        Iterator iter = entries.iterator();
",2,0,0,1,2,0,4,2,0,8,35,4,1,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,363,"        while (iter.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,24,5,1,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,364,"            iter.advance();
",0,0,0,1,2,0,4,0,0,4,15,7,1,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,365,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));
",0,1,0,5,10,0,20,0,0,21,64,7,1,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,374,"        return res;
",2,0,0,0,0,1,0,0,0,2,11,4,1,1
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,281,"                j = probe(perturb, j);
",2,0,0,1,2,0,6,0,0,9,22,8,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,282,"                index = j & mask;
",6,1,0,0,0,0,0,0,0,8,17,8,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,283,"                perturb >>= PERTURB_SHIFT;
",4,0,0,0,0,0,0,0,0,5,26,8,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,285,"                if (states[index] != FULL || keys[index] == key) {
",4,3,1,3,7,0,0,0,0,15,50,8,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,292,"            return index;
",2,0,0,0,0,1,0,0,0,2,13,6,1,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,360,"        checkVectorDimensions(v.getDimension());
",0,0,0,2,4,0,6,0,0,6,40,5,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,277,"        int perturb = perturb(hash);
",2,0,0,1,2,0,4,0,0,6,28,5,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,278,"        int j = index;
",4,0,0,0,0,0,0,0,0,4,14,5,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,279,"        if (states[index] == FULL) {
",2,1,1,2,5,0,0,0,0,7,28,4,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,291,"        if (states[index] == FREE) {
",2,1,1,2,5,0,0,0,0,7,28,4,1,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,247,"        return hash & 0x7fffffff;
",2,1,0,0,0,1,0,0,0,3,25,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,323,"        return (j << 2) + j + perturb + 1;
",6,2,0,1,2,1,0,0,0,8,34,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,351,"        final int hash  = hashOf(key);
",2,0,0,1,2,1,4,0,0,7,30,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,352,"        int index = hash & mask;
",6,1,0,0,0,0,0,0,0,7,24,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,353,"        if (containsKey(key, index)) {
",0,0,0,2,5,0,6,0,0,6,30,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,354,"            return doRemove(index);
",0,0,0,1,2,1,4,0,0,4,23,7,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,391,"        keys[index]   = 0;
",0,0,1,1,2,0,0,0,0,5,18,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,392,"        states[index] = REMOVED;
",2,0,1,1,2,0,0,0,0,7,24,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,393,"        final double previous = values[index];
",2,0,1,1,2,1,0,0,0,7,38,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,394,"        values[index] = missingEntries;
",2,0,1,1,2,0,0,0,0,7,31,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,395,"        --size;
",2,0,0,0,0,0,0,0,0,3,7,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,396,"        ++count;
",2,0,0,0,0,0,0,0,0,3,8,4,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,397,"        return previous;
",2,0,0,0,0,1,0,0,0,2,16,4,1.00000,0
defect4j,math,org/apache/commons/math3/linear/OpenMapRealVector,29,592,"            entries.remove(index);
",0,0,0,1,2,0,6,0,0,6,22,8,1.00000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,210,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.90000,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,421,"                growTable();
",0,0,0,1,2,0,2,0,0,2,12,9,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,434,"        final int oldLength      = states.length;
",6,0,0,0,0,1,0,0,0,7,41,4,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,435,"        final int[] oldKeys      = keys;
",4,0,0,1,2,1,0,0,0,5,32,4,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,436,"        final double[] oldValues = values;
",4,0,0,1,2,1,0,0,0,5,34,4,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,437,"        final byte[] oldStates   = states;
",4,0,0,1,2,1,0,0,0,5,34,4,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,439,"        final int newLength = RESIZE_MULTIPLIER * oldLength;
",6,1,0,0,0,1,0,0,0,8,52,4,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,440,"        final int[] newKeys = new int[newLength];
",2,0,1,2,4,1,0,0,0,5,41,4,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,441,"        final double[] newValues = new double[newLength];
",2,0,1,2,4,1,0,0,0,5,49,4,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,442,"        final byte[] newStates = new byte[newLength];
",2,0,1,2,4,1,0,0,0,5,45,4,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,443,"        final int newMask = newLength - 1;
",4,1,0,0,0,1,0,0,0,6,34,4,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,444,"        for (int i = 0; i < oldLength; ++i) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,445,"            if (oldStates[i] == FULL) {
",2,1,1,2,5,0,0,0,0,7,27,6,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,446,"                final int key = oldKeys[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,447,"                final int index = findInsertionIndex(newKeys, newStates, key, newMask);
",2,0,0,1,2,1,10,0,0,13,71,8,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,448,"                newKeys[index]   = key;
",2,0,1,1,2,0,0,0,0,7,23,8,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,449,"                newValues[index] = oldValues[i];
",0,0,1,2,4,0,0,0,0,9,32,8,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,450,"                newStates[index] = FULL;
",2,0,1,1,2,0,0,0,0,7,24,8,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,454,"        mask   = newMask;
",4,0,0,0,0,0,0,0,0,5,17,4,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,455,"        keys   = newKeys;
",4,0,0,0,0,0,0,0,0,5,17,4,0.81818,0
defect4j,math,org/apache/commons/math3/util/OpenIntToDoubleHashMap,29,456,"        values = newValues;
",4,0,0,0,0,0,0,0,0,5,19,4,0.81818,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,45,"    private static final double[] LANCZOS = {
",2,0,0,1,3,3,0,0,0,5,41,2,1.00000,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,63,"    private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);
",6,2,0,1,2,3,4,0,0,15,82,2,1.00000,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,154,"        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {
",4,3,0,5,11,0,12,0,0,19,68,4,1.00000,0
defect4j,math,org/apache/commons/math3/special/Gamma,30,186,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0
defect4j,math,org/apache/commons/math3/special/Erf,30,67,"        if (FastMath.abs(x) > 40) {
",0,1,0,2,5,0,6,0,0,7,27,4,1.00000,0
defect4j,math,org/apache/commons/math3/special/Erf,30,70,"        final double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);
",6,1,0,1,2,1,4,0,0,12,71,4,1.00000,0
defect4j,math,org/apache/commons/math3/special/Erf,30,71,"        return x < 0 ? -ret : ret;
",6,1,0,0,0,1,0,0,0,8,26,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,375,"        return Math.sqrt(a);
",0,0,0,1,2,1,6,0,0,6,20,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3020,"        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,61,5,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,30,3535,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,82,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,90,"        final double[] z = new double[x.length + y.length];
",10,1,0,2,4,1,0,0,0,12,51,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,92,"        System.arraycopy(x, 0, z, 0, x.length);
",4,0,0,1,2,0,8,0,0,12,39,5,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,93,"        System.arraycopy(y, 0, z, x.length, y.length);
",8,0,0,1,2,0,8,0,0,16,46,5,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,95,"        return z;
",2,0,0,0,0,1,0,0,0,2,9,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,129,"        ensureDataConformance(x, y);
",0,0,0,1,2,0,6,0,0,6,28,5,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,131,"        final double[] z = concatenateSamples(x, y);
",2,0,0,2,4,1,6,0,0,9,44,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,132,"        final double[] ranks = naturalRanking.rank(z);
",2,0,0,2,4,1,6,0,0,9,46,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,134,"        double sumRankX = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,140,"        for (int i = 0; i < x.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,36,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,141,"            sumRankX += ranks[i];
",2,0,1,1,2,0,0,0,0,7,21,6,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,148,"        final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;
",12,4,0,2,4,1,0,0,0,17,61,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,153,"        final double U2 = x.length * y.length - U1;
",12,2,0,0,0,1,0,0,0,15,43,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,155,"        return FastMath.max(U1, U2);
",0,0,0,1,2,1,8,0,0,8,28,5,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,173,"        final int n1n2prod = n1 * n2;
",6,1,0,0,0,1,0,0,0,8,29,4,1.00000,1
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,176,"        final double EU = n1n2prod / 2.0;
",4,1,0,0,0,1,0,0,0,6,33,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,177,"        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
",8,3,0,1,2,1,0,0,0,12,52,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,179,"        final double z = (Umin - EU) / FastMath.sqrt(VarU);
",6,2,0,2,4,1,6,0,0,15,51,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,181,"        final NormalDistribution standardNormal = new NormalDistribution(0, 1);
",2,0,0,1,2,1,0,4,0,7,71,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,183,"        return 2 * standardNormal.cumulativeProbability(z);
",0,1,0,1,2,1,6,0,0,7,51,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,224,"        final double Umax = mannWhitneyU(x, y);
",2,0,0,1,2,1,6,0,0,9,39,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,229,"        final double Umin = x.length * y.length - Umax;
",12,2,0,0,0,1,0,0,0,15,47,4,1.00000,0
defect4j,math,org/apache/commons/math3/stat/inference/MannWhitneyUTest,30,231,"        return calculateAsymptoticPValue(Umin, x.length, y.length);
",8,0,0,1,2,1,4,0,0,12,59,5,1.00000,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,432,"        public IntDoublePair(double value, int position) {
",6,0,0,1,3,1,0,0,0,7,50,3,1.00000,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,433,"            this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,5,1.00000,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,434,"            this.position = position;
",4,0,0,0,0,0,0,0,0,5,25,5,1.00000,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,435,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,445,"            return Double.compare(value, other.value);
",4,0,0,1,2,1,6,0,0,10,42,6,1.00000,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,453,"            return value;
",2,0,0,0,0,1,0,0,0,2,13,5,1.00000,0
defect4j,math,org/apache/commons/math3/stat/ranking/NaturalRanking,30,461,"            return position;
",2,0,0,0,0,1,0,0,0,2,16,5,1.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,80,"        return context.getMessage();
",0,0,0,1,2,1,4,0,0,4,28,5,1.00000,0
defect4j,math,org/apache/commons/math3/exception/MathIllegalStateException,31,86,"        return context.getLocalizedMessage();
",0,0,0,1,2,1,4,0,0,4,37,5,1.00000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,178,"        return solverAbsoluteAccuracy;
",2,0,0,0,0,1,0,0,0,2,30,4,0.20000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,194,"            return denominatorDF / (denominatorDF - 2);
",4,2,0,1,2,1,0,0,0,6,43,6,0.20000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,230,"            final double numeratorDF = getNumeratorDegreesOfFreedom();
",2,0,0,1,2,1,2,0,0,5,58,6,0.20000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,231,"            final double denomDFMinusTwo = denominatorDF - 2;
",4,1,0,0,0,1,0,0,0,6,49,6,0.20000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,233,"            return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) /
",8,5,0,3,6,1,0,0,0,13,84,6,0.20000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,145,"            ret = 0;
",2,0,0,0,0,0,0,0,0,3,8,6,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,163,"        return numeratorDegreesOfFreedom;
",2,0,0,0,0,1,0,0,0,2,33,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,191,"        final double denominatorDF = getDenominatorDegreesOfFreedom();
",2,0,0,1,2,1,2,0,0,5,62,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,193,"        if (denominatorDF > 2) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,214,"        if (!numericalVarianceIsCalculated) {
",2,0,0,1,3,0,0,0,0,3,37,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,215,"            numericalVariance = calculateNumericalVariance();
",2,0,0,1,2,0,2,0,0,5,49,6,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,216,"            numericalVarianceIsCalculated = true;
",2,0,0,0,0,0,0,0,0,4,37,6,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,218,"        return numericalVariance;
",2,0,0,0,0,1,0,0,0,2,25,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,227,"        final double denominatorDF = getDenominatorDegreesOfFreedom();
",2,0,0,1,2,1,2,0,0,5,62,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,229,"        if (denominatorDF > 4) {
",2,1,0,1,3,0,0,0,0,3,24,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,248,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,260,"        return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,5,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,114,"        return numberOfTrials * probabilityOfSuccess;
",4,1,0,0,0,1,0,0,0,5,45,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,124,"        final double p = probabilityOfSuccess;
",4,0,0,0,0,1,0,0,0,5,38,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,125,"        return numberOfTrials * p * (1 - p);
",6,2,0,1,2,1,0,0,0,8,36,4,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,137,"        return probabilityOfSuccess < 1.0 ? 0 : numberOfTrials;
",4,1,0,0,0,1,0,0,0,5,55,5,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,149,"        return probabilityOfSuccess > 0.0 ? numberOfTrials : 0;
",4,1,0,0,0,1,0,0,0,5,55,5,0.16667,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,172,"        return denominatorDegreesOfFreedom;
",2,0,0,0,0,1,0,0,0,2,35,4,0.14286,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,96,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.14286,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,98,"        } else if (x >= numberOfTrials) {
",4,1,0,1,4,0,0,0,0,5,33,5,0.14286,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,101,"            ret = 1.0 - Beta.regularizedBeta(probabilityOfSuccess,
",2,1,0,0,1,0,6,0,0,10,54,7,0.14286,0
defect4j,math,org/apache/commons/math3/special/Beta,31,129,"            ret = 1.0 - regularizedBeta(1.0 - x, b, a, epsilon, maxIterations);
",4,2,0,1,2,0,10,0,0,17,67,7,0.10256,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,147,"            double n = numeratorDegreesOfFreedom;
",4,0,0,0,0,0,0,0,0,4,37,7,0.10000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,148,"            double m = denominatorDegreesOfFreedom;
",4,0,0,0,0,0,0,0,0,4,39,7,0.10000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,150,"            ret = Beta.regularizedBeta((n * x) / (m + n * x),
",12,4,0,2,5,0,4,0,0,21,49,6,0.10000,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,49,"    public BinomialDistribution(int trials, double p) {
",6,0,0,1,3,1,0,0,0,7,51,2,0.10000,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,50,"        if (trials < 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,0.10000,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,54,"        if (p < 0 || p > 1) {
",4,3,0,1,3,0,0,0,0,7,21,4,0.10000,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,58,"        probabilityOfSuccess = p;
",4,0,0,0,0,0,0,0,0,5,25,4,0.10000,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,59,"        numberOfTrials = trials;
",4,0,0,0,0,0,0,0,0,5,24,4,0.10000,0
defect4j,math,org/apache/commons/math3/distribution/BinomialDistribution,31,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,144,"        if (x <= 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.09091,0
defect4j,math,org/apache/commons/math3/distribution/FDistribution,31,154,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.09091,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,104,"            double k = FastMath.sqrt((1.0 - p) / p);
",6,2,0,2,4,0,4,0,0,12,40,7,0.08333,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,105,"            double tmp = mu - k * sigma;
",8,2,0,0,0,0,0,0,0,10,28,7,0.08333,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,106,"            if (tmp > lower) {
",4,1,0,1,3,0,0,0,0,5,18,6,0.08333,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,107,"                lower = ((int) Math.ceil(tmp)) - 1;
",2,1,0,3,6,0,6,0,0,10,35,8,0.08333,0
defect4j,math,org/apache/commons/math3/distribution/AbstractIntegerDistribution,31,109,"            k = 1.0 / k;
",4,1,0,0,0,0,0,0,0,6,12,6,0.08333,0
defect4j,math,org/apache/commons/math3/util/ContinuedFraction,31,189,"            q1 = q2;
",4,0,0,0,0,0,0,0,0,5,8,6,0.04082,1
defect4j,math,org/apache/commons/math3/util/FastMath,32,2480,"            final double denom = 1d / (1d + (xa + xb) * (TANGENT_TABLE_A[idx] + TANGENT_TABLE_B[idx]));
",6,5,1,5,10,1,0,0,0,20,91,6,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2482,"            ya = epsA * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2483,"            yb = epsB * denom;
",6,1,0,0,0,0,0,0,0,8,18,6,1.00000,0
defect4j,math,org/apache/commons/math3/util/FastMath,32,2484,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,1.00000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,81,"        this(p1, p2.subtract(p1).crossProduct(p3.subtract(p1)));
",2,0,0,4,8,0,14,0,0,16,56,4,0.50000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,82,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,204,"                final SubHyperplane.SplitSubHyperplane<S> split = other.split(inserted);
",6,0,0,1,2,1,6,2,0,15,72,7,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,205,"                plusList.add(split.getPlus());
",0,0,0,2,4,0,8,0,0,8,30,8,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,206,"                minusList.add(split.getMinus());
",0,0,0,2,4,0,8,0,0,8,32,8,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/partitioning/AbstractRegion,32,207,"                break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,324,"            return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,406,"        return originOffset + (sameOrientationAs(plane) ? -plane.originOffset : plane.originOffset);
",10,1,0,2,4,1,4,0,0,16,92,4,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/Plane,32,427,"        return (((Plane) other).w).dotProduct(w) > 0.0;
",4,1,0,4,8,1,4,2,0,11,47,4,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,63,"            final double global = otherPlane.getOffset(thisPlane);
",2,0,0,1,2,1,6,0,0,9,54,6,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,64,"            return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
",16,2,0,3,6,1,0,0,0,19,88,7,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,105,"            final double global = otherPlane.getOffset(thisPlane);
",2,0,0,1,2,1,6,0,0,9,54,6,0.33333,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/threed/SubPlane,32,106,"            return (global < -1.0e-10) ?
",2,1,0,1,2,1,0,0,0,4,28,8,0.33333,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,674,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,675,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,676,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,677,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,678,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,679,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,682,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,683,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,686,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,687,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,688,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,689,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,690,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,691,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,694,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,695,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,698,"        final double s12High    = prod1High + prod2High;
",6,1,0,0,0,1,0,0,0,8,48,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,699,"        final double s12Prime   = s12High - prod2High;
",6,1,0,0,0,1,0,0,0,8,46,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,700,"        final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
",12,4,0,3,6,1,0,0,0,17,86,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,704,"        double result = s12High + (prod1Low + prod2Low + s12Low);
",10,2,0,1,2,0,0,0,0,12,57,5,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,706,"        if (Double.isNaN(result)) {
",0,0,0,2,5,0,6,0,0,6,27,5,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,712,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,754,"        final double ca1        = SPLIT_FACTOR * a1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,755,"        final double a1High     = ca1 - (ca1 - a1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,756,"        final double a1Low      = a1 - a1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,757,"        final double cb1        = SPLIT_FACTOR * b1;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,758,"        final double b1High     = cb1 - (cb1 - b1);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,759,"        final double b1Low      = b1 - b1High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,762,"        final double prod1High  = a1 * b1;
",6,1,0,0,0,1,0,0,0,8,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,763,"        final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,766,"        final double ca2        = SPLIT_FACTOR * a2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,767,"        final double a2High     = ca2 - (ca2 - a2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,768,"        final double a2Low      = a2 - a2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,769,"        final double cb2        = SPLIT_FACTOR * b2;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,770,"        final double b2High     = cb2 - (cb2 - b2);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,771,"        final double b2Low      = b2 - b2High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,774,"        final double prod2High  = a2 * b2;
",6,1,0,0,0,1,0,0,0,8,34,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,775,"        final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
",20,8,0,3,6,1,0,0,0,29,110,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,778,"        final double ca3        = SPLIT_FACTOR * a3;
",6,1,0,0,0,1,0,0,0,8,44,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,779,"        final double a3High     = ca3 - (ca3 - a3);
",8,2,0,1,2,1,0,0,0,11,43,4,0.20000,0
defect4j,math,org/apache/commons/math3/util/MathArrays,32,780,"        final double a3Low      = a3 - a3High;
",6,1,0,0,0,1,0,0,0,8,38,4,0.20000,0
defect4j,math,org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet,32,136,"            if ((Boolean) tree.getAttribute()) {
",0,0,0,3,7,0,4,2,0,6,36,7,0.00000,1
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,59,"            return GEQ;
",2,0,0,0,0,1,0,0,0,2,11,5,1.00000,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,406,"            coefficients[i] = 0;
",0,0,1,1,2,0,0,0,0,5,20,8,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,407,"            continue;
",0,0,0,0,0,0,0,0,0,0,9,3,0.50000,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,261,"            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),
",0,0,0,2,5,1,6,2,0,9,73,7,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,339,"                columnsToDrop.add(i);
",0,0,0,1,2,0,6,0,0,6,21,9,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,"        switch (this) {
",0,0,0,1,3,0,0,0,0,0,15,3,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/linear/Relationship,33,57,"        switch (this) {
",0,0,0,1,3,0,0,0,0,0,15,3,0.25000,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,226,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess
",2,1,0,2,4,0,8,0,0,13,74,10,0.08333,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,67,"        final double[] p = getKey();
",2,0,0,2,4,1,2,0,0,5,28,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,68,"        return p == null ? null : p.clone();
",2,1,0,1,2,1,4,0,0,7,36,5,0.06667,0
defect4j,math,org/apache/commons/math3/util/Pair,33,63,"        return key;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,162,"        columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);
",0,0,0,1,2,0,6,0,0,6,44,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,199,"            matrix.setEntry(zIndex, getSlackVariableOffset() - 1,
",0,1,0,1,3,0,8,0,0,9,53,7,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,215,"                matrix.setEntry(row, getSlackVariableOffset() - 1,
",0,1,0,1,3,0,8,0,0,9,50,9,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,298,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,299,"        for (double coefficient : coefficients.toArray()) {
",2,0,0,2,5,0,4,0,0,6,51,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,300,"            sum -= coefficient;
",4,0,0,0,0,0,0,0,0,5,19,6,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,302,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,0.06667,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,347,"            columnsToDrop.add(col);
",0,0,0,1,2,0,6,0,0,6,23,9,0.06250,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,181,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,224,"                matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);  // slack
",2,1,0,2,4,0,8,0,0,12,73,9,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,332,"        List<Integer> columnsToDrop = new ArrayList<Integer>();
",2,0,0,1,2,0,0,8,0,10,55,4,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,333,"        columnsToDrop.add(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,336,"        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
",6,1,0,3,7,0,4,0,0,12,82,4,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,337,"            final double entry = tableau.getEntry(0, i);
",2,0,0,1,2,1,6,0,0,9,44,6,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.05882,1
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,344,"        for (int i = 0; i < getNumArtificialVariables(); i++) {
",6,1,0,2,5,0,2,0,0,10,55,4,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,345,"          int col = i + getArtificialVariableOffset();
",4,1,0,1,2,0,2,0,0,7,44,7,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,346,"          if (getBasicRow(col) == null) {
",0,1,0,2,5,0,4,0,0,6,31,6,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,351,"        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
",2,2,0,7,14,0,8,0,0,12,83,5,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,352,"        for (int i = 1; i < getHeight(); i++) {
",6,1,0,2,5,0,2,0,0,10,39,4,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,353,"          int col = 0;
",2,0,0,0,0,0,0,0,0,2,12,7,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,354,"          for (int j = 0; j < getWidth(); j++) {
",6,1,0,2,5,0,2,0,0,10,38,6,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,355,"            if (!columnsToDrop.contains(j)) {
",0,0,0,2,5,0,6,0,0,7,33,8,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);
",4,1,1,3,6,0,8,0,0,17,46,10,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,361,"        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
",6,2,0,2,5,0,4,0,0,13,53,4,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,362,"          columnLabels.remove((int) columnsToDrop.get(i));
",0,0,0,3,6,0,10,0,0,10,48,7,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,365,"        this.tableau = new Array2DRowRealMatrix(matrix);
",4,0,0,1,2,0,0,2,0,7,48,4,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,366,"        this.numArtificialVariables = 0;
",2,0,0,0,0,0,0,0,0,3,32,4,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,367,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0
defect4j,math,org/apache/commons/math3/util/MathUtils,33,257,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.05882,0
defect4j,math,org/apache/commons/math3/util/MathUtils,33,260,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,74,"        throws DimensionMismatchException, NoDataException, NullArgumentException {
",6,0,0,0,1,0,0,0,0,6,75,2,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,75,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,76,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,262,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,263,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,266,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,269,"            MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,7,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,270,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,271,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,275,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,276,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,279,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,280,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,281,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,284,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,286,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,290,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,526,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,0.05882,0
defect4j,math,org/apache/commons/math3/linear/Array2DRowRealMatrix,33,527,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexSolver,33,174,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.05556,0
defect4j,math,org/apache/commons/math3/linear/AbstractRealMatrix,33,44,"    protected AbstractRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,33,2,0.05556,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,41,"        this(point, value, true);
",4,0,0,1,2,0,0,0,0,5,25,4,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,42,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,55,"        super(copyArray ? ((point == null) ? null :
",4,1,0,1,4,0,0,0,0,6,43,3,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/PointValuePair,33,59,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,math,org/apache/commons/math3/util/Pair,33,42,"    public Pair(K k, V v) {
",6,0,0,1,3,1,0,4,0,11,23,2,0.05263,0
defect4j,math,org/apache/commons/math3/util/Pair,33,43,"        key = k;
",4,0,0,0,0,0,0,0,0,5,8,4,0.05263,0
defect4j,math,org/apache/commons/math3/util/Pair,33,44,"        value = v;
",4,0,0,0,0,0,0,0,0,5,10,4,0.05263,0
defect4j,math,org/apache/commons/math3/util/Pair,33,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,317,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,320,"        return row;
",2,0,0,0,0,1,0,0,0,2,11,4,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,397,"      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
",2,0,0,1,2,0,6,0,0,8,72,5,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,398,"      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
",4,1,0,1,2,0,4,2,0,12,92,4,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,399,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
",4,1,0,2,4,0,6,0,0,13,102,5,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,401,"      Set<Integer> basicRows = new HashSet<Integer>();
",2,0,0,1,2,0,0,8,0,10,48,4,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,402,"      double[] coefficients = new double[getOriginalNumDecisionVariables()];
",2,0,0,3,6,0,2,0,0,4,70,5,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,403,"      for (int i = 0; i < coefficients.length; i++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,404,"          int colIndex = columnLabels.indexOf(""x"" + i);
",4,1,0,1,2,0,4,0,0,10,45,7,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,405,"          if (colIndex < 0) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,409,"          Integer basicRow = getBasicRow(colIndex);
",2,0,0,1,2,0,4,2,0,8,41,6,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,410,"          if (basicRow != null && basicRow == 0) {
",4,3,0,1,3,0,0,0,0,7,40,6,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,415,"          } else if (basicRows.contains(basicRow)) {
",0,0,0,2,6,0,6,0,0,6,42,8,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,420,"              basicRows.add(basicRow);
",0,0,0,1,2,0,6,0,0,6,24,10,0.05263,0
defect4j,math,org/apache/commons/math3/optimization/linear/SimplexTableau,33,421,"              coefficients[i] =
",0,0,1,1,2,0,0,0,0,5,17,9,0.05263,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,112,"        this.chromosomes.addAll(chromosomeColl);
",2,0,0,1,2,0,4,0,0,6,40,5,1.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,113,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,34,209,"        return chromosomes.iterator();
",0,0,0,1,2,1,4,0,0,4,30,5,1.00000,1
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,36,"    private double elitismRate = 0.9;
",2,0,0,0,0,1,0,0,0,3,33,2,1,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,50,"    public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {
",6,0,0,1,3,3,0,4,0,13,86,2,0.80000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,51,"        if (chromosomes.size() > populationLimit) {
",2,1,0,2,5,0,4,0,0,7,43,4,0.80000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,55,"        if (populationLimit <= 0) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.80000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,59,"        this.chromosomes = chromosomes;
",4,0,0,0,0,0,0,0,0,5,31,4,0.80000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,60,"        this.populationLimit = populationLimit;
",4,0,0,0,0,0,0,0,0,5,39,4,0.80000,0
defect4j,math,org/apache/commons/math3/genetics/ListPopulation,35,61,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.80000,0
defect4j,math,org/apache/commons/math3/genetics/ElitisticListPopulation,35,65,"        this.elitismRate = elitismRate;
",4,0,0,0,0,0,0,0,0,5,31,4,0.40000,1
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,732,"        float result = numerator.floatValue() / denominator.floatValue();
",2,1,0,2,4,0,8,0,0,11,65,5,0.50000,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,735,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.50000,1
defect4j,math,org/apache/commons/math/util/MathUtils,36,244,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.05405,0
defect4j,math,org/apache/commons/math/util/MathUtils,36,247,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05405,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,119,"    public BigFraction(BigInteger num, BigInteger den) {
",6,0,0,1,3,1,0,4,0,11,52,2,0.05405,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,120,"        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);
",4,0,0,1,2,0,6,0,0,10,56,5,0.05405,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,121,"        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);
",4,0,0,1,2,0,6,0,0,10,58,5,0.05405,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,122,"        if (BigInteger.ZERO.equals(den)) {
",4,0,0,2,5,0,4,0,0,8,34,5,0.05405,0
defect4j,math,org/apache/commons/math/fraction/BigFraction,36,125,"        if (BigInteger.ZERO.equals(num)) {
",4,0,0,2,5,0,4,0,0,8,34,5,0.05405,0
defect4j,math,org/apache/commons/math/util/FastMath,37,393,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,453,"          return exp(x)/2.0;
",0,1,0,1,2,1,4,0,0,5,18,6,1,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1178,"        if (Double.isNaN(realPart) ||
",0,1,0,1,3,0,6,0,0,7,29,4,1,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1182,"        return new Complex(realPart, imaginaryPart);
",4,0,0,1,2,1,0,2,0,6,44,5,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,867,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,871,"                return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,9,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,383,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,392,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,442,"      boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,443,"      if (x != x) {
",4,1,0,1,3,0,0,0,0,5,13,4,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,452,"      if (x > 20.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,1,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1022,"        double real2 = 2.0 * real;
",4,1,0,0,0,0,0,0,0,5,26,5,1,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1023,"        double imaginary2 = 2.0 * imaginary;
",4,1,0,0,0,0,0,0,0,5,36,5,1,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1024,"        double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);
",2,1,0,2,4,0,12,0,0,15,59,5,1,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1026,"        return createComplex(FastMath.sin(real2) / d,
",2,1,0,1,3,1,8,0,0,11,45,5,1,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1066,"        double real2 = 2.0 * real;
",4,1,0,0,0,0,0,0,0,5,26,5,1,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1067,"        double imaginary2 = 2.0 * imaginary;
",4,1,0,0,0,0,0,0,0,5,36,5,1,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1068,"        double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);
",2,1,0,2,4,0,12,0,0,15,59,5,1,0
defect4j,math,org/apache/commons/math/complex/Complex,37,1070,"        return createComplex(FastMath.sinh(real2) / d,
",2,1,0,1,3,1,8,0,0,11,46,5,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,807,"        return exp(x, 0.0, null);
",0,0,0,1,2,1,4,0,0,5,25,4,1,0
defect4j,math,org/apache/commons/math/util/FastMath,37,464,"      if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,4,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,37,471,"      if (x > 0.25) {
",2,1,0,1,3,0,0,0,0,3,15,4,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,37,472,"          double hiPrec[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,32,7,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,37,473,"          exp(x, 0.0, hiPrec);
",0,0,0,1,2,0,6,0,0,6,20,7,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,37,475,"          double ya = hiPrec[0] + hiPrec[1];
",2,1,1,2,4,0,0,0,0,7,34,7,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,37,476,"          double yb = -(ya - hiPrec[0] - hiPrec[1]);
",4,1,1,3,6,0,0,0,0,10,42,7,1.00000,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,2413,"            initialTrustRegionRadius = minDiff / 3.0;
",4,1,0,0,0,0,0,0,0,6,41,6,0.50000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,126,"            lowerBound = lower.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.50000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,134,"            upperBound = upper.clone();
",2,0,0,1,2,0,4,0,0,7,27,6,0.50000,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,98,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,99,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,100,"                final double lo = lower[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,101,"                if (v < lo) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,107,"            if (upper.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,110,"            for (int i = 0; i < dim; i++) {
",8,1,0,1,3,0,0,0,0,10,31,6,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,111,"                final double v = startPoint[i];
",2,0,1,1,2,1,0,0,0,7,31,8,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,112,"                final double hi = upper[i];
",2,0,1,1,2,1,0,0,0,7,27,8,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,113,"                if (v > hi) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.33333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateSimpleBoundsOptimizer,38,95,"            if (lower.length != dim) {
",6,1,0,1,3,0,0,0,0,7,26,6,0.25000,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,44,"    public RealPointValuePair(final double[] point, final double value) {
",6,0,0,2,5,3,0,0,0,9,69,2,0.08333,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,45,"        this.point = (point == null) ? null : point.clone();
",4,1,0,2,4,0,4,0,0,10,52,4,0.08333,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,46,"        this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,4,0.08333,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,38,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1640,"                    stepa = interpolationPoints.getEntry(nfx, nfxm);
",2,0,0,1,2,0,8,0,0,11,48,11,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1641,"                    stepb = -initialTrustRegionRadius;
",4,0,0,0,0,0,0,0,0,6,34,11,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1642,"                    if (lowerDifference.getEntry(nfxm) == ZERO) {
",2,1,0,2,5,0,6,0,0,9,45,11,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1646,"                    if (upperDifference.getEntry(nfxm) == ZERO) {
",2,1,0,2,5,0,6,0,0,9,45,11,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1650,"                    interpolationPoints.setEntry(nfm, nfxm, stepb);
",0,0,0,1,2,0,10,0,0,10,47,12,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1713,"                    final int ih = nfx * (nfx + 1) / 2 - 1;
",6,4,0,1,2,1,0,0,0,11,39,11,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1714,"                    final double tmp = (f - fbeg) / stepb;
",8,2,0,1,2,1,0,0,0,11,38,11,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1715,"                    final double diff = stepb - stepa;
",6,1,0,0,0,1,0,0,0,8,34,11,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1716,"                    modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);
",6,3,0,3,6,0,12,0,0,21,107,12,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1717,"                    gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);
",8,4,0,3,6,0,12,0,0,24,118,12,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1718,"                    if (stepa * stepb < ZERO) {
",6,2,0,1,3,0,0,0,0,8,27,11,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1719,"                        if (f < fAtInterpolationPoints.getEntry(nfm - n)) {
",6,2,0,2,5,0,4,0,0,12,51,13,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1720,"                            fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));
",4,1,0,2,4,0,10,0,0,15,79,16,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1721,"                            fAtInterpolationPoints.setEntry(nfm - n, f);
",4,1,0,1,2,0,6,0,0,11,44,16,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1722,"                            if (trustRegionCenterInterpolationPointIndex == nfm) {
",4,1,0,1,3,0,0,0,0,5,54,15,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1725,"                            interpolationPoints.setEntry(nfm - n, nfxm, stepb);
",4,1,0,1,2,0,8,0,0,13,51,16,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1726,"                            interpolationPoints.setEntry(nfm, nfxm, stepa);
",0,0,0,1,2,0,10,0,0,10,47,16,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1729,"                    bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));
",8,3,0,3,6,0,6,0,0,18,62,12,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1730,"                    bMatrix.setEntry(nfm, nfxm, -HALF / interpolationPoints.getEntry(nfm - n, nfxm));
",6,2,0,2,4,0,14,0,0,23,81,12,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1731,"                    bMatrix.setEntry(nfm - n, nfxm,
",4,1,0,0,1,0,6,0,0,11,31,12,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1733,"                    zMatrix.setEntry(0, nfxm, Math.sqrt(TWO) / (stepa * stepb));
",4,2,0,3,6,0,12,0,0,18,60,12,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1734,"                    zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) / rhosq);
",2,1,0,2,4,0,14,0,0,17,53,12,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1736,"                    zMatrix.setEntry(nfm - n, nfxm,
",4,1,0,0,1,0,6,0,0,11,31,12,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1738,"                }
",0,0,0,0,1,0,0,0,0,0,1,3,0.08333,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,76,"        return evaluations.getCount();
",0,0,0,1,2,1,4,0,0,4,30,5,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,94,"            evaluations.incrementCount();
",0,0,0,1,2,0,4,0,0,4,29,7,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,97,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,98,"        return function.value(point);
",0,0,0,1,2,1,6,0,0,6,29,5,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BaseAbstractMultivariateOptimizer,38,132,"        return goal;
",2,0,0,0,0,1,0,0,0,2,12,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,241,"        isMinimize = (getGoalType() == GoalType.MINIMIZE);
",6,1,0,2,4,0,2,0,0,10,50,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,242,"        currentBest = new ArrayRealVector(getStartPoint());
",2,0,0,2,4,0,2,2,0,7,51,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,244,"        final double value = bobyqa(lowerBound, upperBound);
",2,0,0,1,2,1,6,0,0,9,52,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,287,"        printMethod(); // XXX
",0,0,0,1,2,0,2,0,0,2,21,5,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,289,"        final int n = currentBest.getDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,298,"        for (int j = 0; j < n; j++) {
",8,1,0,1,3,0,0,0,0,10,29,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,299,"            final double boundDiff = boundDifference[j];
",2,0,1,1,2,1,0,0,0,7,44,6,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,300,"            lowerDifference.setEntry(j, lowerBound[j] - currentBest.getEntry(j));
",0,1,1,3,6,0,12,0,0,17,69,7,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,301,"            upperDifference.setEntry(j, upperBound[j] - currentBest.getEntry(j));
",0,1,1,3,6,0,12,0,0,17,69,7,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,302,"            if (lowerDifference.getEntry(j) >= -initialTrustRegionRadius) {
",2,1,0,2,5,0,6,0,0,10,63,6,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,314,"            } else if (upperDifference.getEntry(j) <= initialTrustRegionRadius) {
",2,1,0,2,6,0,6,0,0,9,69,7,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,332,"        return bobyqb(lowerBound, upperBound);
",0,0,0,1,2,1,6,0,0,6,38,5,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,376,"        printMethod(); // XXX
",0,0,0,1,2,0,2,0,0,2,21,5,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,378,"        final int n = currentBest.getDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,379,"        final int npt = numberOfInterpolationPoints;
",4,0,0,0,0,1,0,0,0,5,44,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,380,"        final int np = n + 1;
",4,1,0,0,0,1,0,0,0,6,21,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,381,"        final int nptm = npt - np;
",6,1,0,0,0,1,0,0,0,8,26,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,382,"        final int nh = n * np / 2;
",6,2,0,0,0,1,0,0,0,9,26,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,384,"        final ArrayRealVector work1 = new ArrayRealVector(n);
",4,0,0,1,2,1,0,4,0,9,53,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,385,"        final ArrayRealVector work2 = new ArrayRealVector(npt);
",4,0,0,1,2,1,0,4,0,9,55,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,386,"        final ArrayRealVector work3 = new ArrayRealVector(npt);
",4,0,0,1,2,1,0,4,0,9,55,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,388,"        double cauchy = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,27,5,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,389,"        double alpha = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,26,5,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,390,"        double dsq = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,24,5,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,391,"        double crvmin = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,27,5,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,405,"        trustRegionCenterInterpolationPointIndex = 0;
",2,0,0,0,0,0,0,0,0,3,45,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,407,"        prelim(lowerBound, upperBound);
",0,0,0,1,2,0,6,0,0,6,31,5,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1584,"        printMethod(); // XXX
",0,0,0,1,2,0,2,0,0,2,21,5,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1586,"        final int n = currentBest.getDimension();
",2,0,0,1,2,1,4,0,0,7,41,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1587,"        final int npt = numberOfInterpolationPoints;
",4,0,0,0,0,1,0,0,0,5,44,4,0.07692,0
defect4j,math,org/apache/commons/math/optimization/direct/BOBYQAOptimizer,38,1752,"                throw new PathIsExploredException(); // XXX
",0,0,0,1,2,0,0,2,0,2,43,10,0.00000,1
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,244,"    super(interpolator);
",2,0,0,1,2,0,0,0,0,2,20,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,246,"    if (interpolator.currentState == null) {
",4,1,0,1,3,0,0,0,0,5,40,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,248,"      yDotKLast = null;
",2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,249,"      v         = null;
",2,0,0,0,0,0,0,0,0,3,17,6,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,250,"      vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,6,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,273,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,278,"    return new DormandPrince853StepInterpolator(this);
",0,0,0,1,2,1,0,2,0,2,50,6,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,288,"    super.reinitialize(integrator, y, yDotK, forward, primaryMapper, secondaryMappers);
",14,0,0,1,2,0,0,0,0,14,83,5,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,290,"    final int dimension = currentState.length;
",6,0,0,0,0,1,0,0,0,7,42,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,292,"    yDotKLast = new double[3][];
",2,0,0,2,4,0,0,0,0,3,28,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,293,"    for (int k = 0; k < yDotKLast.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,44,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,294,"      yDotKLast[k] = new double[dimension];
",0,0,1,2,4,0,0,0,0,7,37,6,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,297,"    v = new double[7][];
",2,0,0,2,4,0,0,0,0,3,20,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,298,"    for (int k = 0; k < v.length; ++k) {
",10,1,0,1,3,0,0,0,0,12,36,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,299,"      v[k]  = new double[dimension];
",0,0,1,2,4,0,0,0,0,7,30,6,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,302,"    vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,304,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,309,"    super.storeTime(t);
",4,0,0,1,2,0,0,0,0,4,19,5,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,310,"    vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,311,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,407,"    if (currentState == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,409,"      return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.03571,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,220,"    super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B,
",8,0,0,0,1,0,0,0,0,9,54,4,0.03448,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,223,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03448,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,231,"    super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.03125,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,232,"    yDotKLast = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.03125,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,233,"    v         = null;
",2,0,0,0,0,0,0,0,0,3,17,4,0.03125,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,234,"    vectorsInitialized = false;
",2,0,0,0,0,0,0,0,0,4,27,4,0.03125,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,235,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03125,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853StepInterpolator,39,180,"    private static final double[][] D = {
",2,0,0,2,5,3,0,0,0,5,37,2,0.03125,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,63,"  private static final double[] STATIC_C = {
",2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,70,"  private static final double[][] STATIC_A = {
",2,0,0,2,5,3,0,0,0,5,44,2,0.03125,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,137,"  private static final double[] STATIC_B = {
",2,0,0,1,3,3,0,0,0,5,42,2,0.03125,0
defect4j,math,org/apache/commons/math/ode/nonstiff/DormandPrince853Integrator,39,247,"    return 8;
",0,0,0,0,0,1,0,0,0,0,9,3,0.03125,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3473,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.02703,0
defect4j,math,org/apache/commons/math/util/FastMath,39,3474,"            return a;
",2,0,0,0,0,1,0,0,0,2,9,6,0.02703,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,37,"        super(max);
",2,0,0,1,2,0,0,0,0,2,11,4,1.00000,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,38,"        getContext().addMessage(LocalizedFormats.EVALUATIONS);
",4,0,0,2,4,0,4,0,0,8,54,5,1.00000,0
defect4j,math,org/apache/commons/math/exception/TooManyEvaluationsException,40,39,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,42,"        this(LocalizedFormats.MAX_COUNT_EXCEEDED, max);
",6,0,0,1,2,0,0,0,0,6,47,4,1.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,43,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,53,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,1.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,54,"        getContext().addMessage(specific, max, args);
",0,0,0,2,4,0,10,0,0,10,45,5,1.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,55,"        this.max = max;
",4,0,0,0,0,0,0,0,0,5,15,4,1.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,56,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/exception/MaxCountExceededException,40,62,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,45,"                                     Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,1.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,46,"        context = new ExceptionContext(this);
",2,0,0,1,2,0,0,2,0,5,37,4,1.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,47,"        context.addMessage(pattern, args);
",0,0,0,1,2,0,8,0,0,8,34,5,1.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,69,"        this(LocalizedFormats.ILLEGAL_STATE);
",4,0,0,1,2,0,0,0,0,4,37,5,1.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalStateException,40,74,"        return context;
",2,0,0,0,0,1,0,0,0,2,15,4,1.00000,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,151,"            maxCountCallback.trigger(maximalCount);
",0,0,0,1,2,0,6,0,0,6,39,7,1.00000,0
defect4j,math,org/apache/commons/math/util/Incrementor,40,65,"                     throw new MaxCountExceededException(max);
",2,0,0,1,2,0,0,2,0,4,41,10,1.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,393,"        this.allowed = allowedSolution;
",4,0,0,0,0,0,0,0,0,5,31,4,1.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,394,"        return super.solve(maxEval, f, min, max, startValue);
",12,0,0,1,2,1,0,0,0,12,53,5,1.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,295,"        } catch (MaxCountExceededException e) {
",2,0,0,1,4,0,0,2,0,4,39,6,1.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,40,296,"            throw new TooManyEvaluationsException(e.getMax());
",0,0,0,2,4,0,4,2,0,6,50,8,1.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,128,"        this.maximalOrder = maximalOrder;
",4,0,0,0,0,0,0,0,0,5,33,4,0.33333,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,129,"        this.allowed = AllowedSolution.ANY_SIDE;
",6,0,0,0,0,0,0,0,0,7,40,4,0.33333,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,130,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,124,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);
",6,0,0,1,2,0,0,0,0,6,65,4,0.25000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,125,"        if (maximalOrder < 2) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.25000,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,59,"        super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);
",6,0,0,1,2,0,0,0,0,6,65,4,0.25000,0
defect4j,math,org/apache/commons/math/analysis/solvers/AbstractUnivariateRealSolver,40,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,40,238,"                targetY = -REDUCTION_FACTOR * yA;
",6,1,0,0,0,0,0,0,0,9,33,9,0.00000,1
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,370,"        return evaluate(values, weights, 0, values.length);
",4,0,0,1,2,1,6,0,0,10,51,5,1.00000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,222,"        return test(values, weights, begin, length, false);
",0,0,0,1,2,1,10,0,0,11,51,5,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,258,"        if (weights == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,262,"        if (weights.length != values.length) {
",8,1,0,1,3,0,0,0,0,9,38,4,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,266,"        boolean containsPositiveWeight = false;
",2,0,0,0,0,0,0,0,0,3,39,5,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,267,"        for (int i = begin; i < begin + length; i++) {
",12,2,0,1,3,0,0,0,0,15,46,4,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,268,"            if (Double.isNaN(weights[i])) {
",0,0,1,3,7,0,4,0,0,8,31,7,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,271,"            if (Double.isInfinite(weights[i])) {
",0,0,1,3,7,0,4,0,0,8,36,7,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,274,"            if (weights[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,21,6,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,277,"            if (!containsPositiveWeight && weights[i] > 0.0) {
",2,2,1,2,5,0,0,0,0,9,50,6,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,278,"                containsPositiveWeight = true;
",2,0,0,0,0,0,0,0,0,4,30,8,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,282,"        if (!containsPositiveWeight) {
",2,0,0,1,3,0,0,0,0,3,30,4,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,41,286,"        return test(values, begin, length, allowEmpty);
",0,0,0,1,2,1,10,0,0,10,47,5,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,316,"        double var = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,24,5,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,318,"        if (test(values, weights,begin, length)) {
",0,0,0,2,5,0,10,0,0,10,42,5,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,319,"            clear();
",0,0,0,1,2,0,2,0,0,2,8,7,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,320,"            if (length == 1) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,322,"            } else if (length > 1) {
",2,1,0,1,4,0,0,0,0,3,24,7,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,323,"                Mean mean = new Mean();
",2,0,0,1,2,0,0,4,0,6,23,9,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,324,"                double m = mean.evaluate(values, weights, begin, length);
",2,0,0,1,2,0,12,0,0,14,57,10,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,325,"                var = evaluate(values, weights, m, begin, length);
",2,0,0,1,2,0,12,0,0,15,50,9,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,328,"        return var;
",2,0,0,0,0,1,0,0,0,2,11,4,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,504,"        double var = Double.NaN;
",6,0,0,0,0,0,0,0,0,6,24,5,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,506,"        if (test(values, weights, begin, length)) {
",0,0,0,2,5,0,10,0,0,10,43,5,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,507,"            if (length == 1) {
",2,1,0,1,3,0,0,0,0,3,18,6,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,509,"            } else if (length > 1) {
",2,1,0,1,4,0,0,0,0,3,24,7,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,510,"                double accum = 0.0;
",2,0,0,0,0,0,0,0,0,2,19,10,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,511,"                double dev = 0.0;
",2,0,0,0,0,0,0,0,0,2,17,10,0.50000,0
defect4j,math,org/apache/commons/math/stat/descriptive/moment/Variance,41,520,"                for (int i = 0; i < weights.length; i++) {
",10,1,0,1,3,0,0,0,0,12,42,9,0.50000,1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,68,"        return (point == null) ? null : point.clone();
",2,1,0,2,4,1,4,0,0,7,46,5,0.07143,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,181,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06667,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,347,"            columnsToDrop.add(col);
",0,0,0,1,2,0,6,0,0,6,23,9,0.06667,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,73,"        throws DimensionMismatchException, NoDataException, NullArgumentException {
",6,0,0,0,1,0,0,0,0,6,75,2,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,74,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,261,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,262,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,265,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,268,"            MathUtils.checkNotNull(subMatrix);
",0,0,0,1,2,0,6,0,0,6,34,7,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,269,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,270,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,274,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,275,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,278,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,279,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,280,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,283,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,285,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,289,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,525,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,0.06250,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,42,526,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,332,"        List<Integer> columnsToDrop = new ArrayList<Integer>();
",2,0,0,1,2,0,0,8,0,10,55,4,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,333,"        columnsToDrop.add(0);
",0,0,0,1,2,0,4,0,0,4,21,5,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,336,"        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
",6,1,0,3,7,0,4,0,0,12,82,4,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,337,"            final double entry = tableau.getEntry(0, i);
",2,0,0,1,2,1,6,0,0,9,44,6,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,338,"            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,344,"        for (int i = 0; i < getNumArtificialVariables(); i++) {
",6,1,0,2,5,0,2,0,0,10,55,4,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,345,"          int col = i + getArtificialVariableOffset();
",4,1,0,1,2,0,2,0,0,7,44,7,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,346,"          if (getBasicRow(col) == null) {
",0,1,0,2,5,0,4,0,0,6,31,6,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,351,"        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
",2,2,0,7,14,0,8,0,0,12,83,5,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,352,"        for (int i = 1; i < getHeight(); i++) {
",6,1,0,2,5,0,2,0,0,10,39,4,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,353,"          int col = 0;
",2,0,0,0,0,0,0,0,0,2,12,7,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,354,"          for (int j = 0; j < getWidth(); j++) {
",6,1,0,2,5,0,2,0,0,10,38,6,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,355,"            if (!columnsToDrop.contains(j)) {
",0,0,0,2,5,0,6,0,0,7,33,8,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,356,"              matrix[i - 1][col++] = tableau.getEntry(i, j);
",4,1,1,3,6,0,8,0,0,17,46,10,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,361,"        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
",6,2,0,2,5,0,4,0,0,13,53,4,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,362,"          columnLabels.remove((int) columnsToDrop.get(i));
",0,0,0,3,6,0,10,0,0,10,48,7,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,365,"        this.tableau = new Array2DRowRealMatrix(matrix);
",4,0,0,1,2,0,0,2,0,7,48,4,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,366,"        this.numArtificialVariables = 0;
",2,0,0,0,0,0,0,0,0,3,32,4,0.06250,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,367,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math/util/MathUtils,42,330,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.06250,0
defect4j,math,org/apache/commons/math/util/MathUtils,42,333,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06250,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,42,44,"    protected AbstractRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,33,2,0.05882,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,174,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.05882,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,447,"        if (v instanceof ArrayRealVector) {
",2,0,0,1,3,0,0,2,0,4,35,5,0.05556,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,448,"            final double[] vData = ((ArrayRealVector) v).data;
",6,0,0,3,6,1,0,2,0,9,50,6,0.05556,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,449,"            checkVectorDimensions(vData.length);
",4,0,0,1,2,0,2,0,0,6,36,7,0.05556,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,450,"            double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,7,0.05556,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,451,"            for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.05556,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,452,"                dot += data[i] * vData[i];
",2,1,1,2,4,0,0,0,0,12,26,8,0.05556,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,42,454,"            return dot;
",2,0,0,0,0,1,0,0,0,2,11,6,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,173,"        while (!tableau.isOptimal()) {
",0,0,0,2,5,0,4,0,0,5,30,4,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,178,"        if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {
",0,0,0,4,9,0,14,0,0,15,82,4,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,197,"        return tableau.getSolution();
",0,0,0,1,2,1,4,0,0,4,29,5,0.05556,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,44,"    public RealPointValuePair(final double[] point, final double value) {
",6,0,0,2,5,3,0,0,0,9,69,2,0.05556,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,45,"        this.point = (point == null) ? null : point.clone();
",4,1,0,2,4,0,4,0,0,10,52,4,0.05556,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,46,"        this.value = value;
",4,0,0,0,0,0,0,0,0,5,19,4,0.05556,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,42,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,42,92,"        return coefficients.dotProduct(new ArrayRealVector(point, false)) + constantTerm;
",4,1,0,2,4,1,4,2,0,12,81,4,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,317,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,320,"        return row;
",2,0,0,0,0,1,0,0,0,2,11,4,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,397,"      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
",2,0,0,1,2,0,6,0,0,8,72,5,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,398,"      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
",4,1,0,1,2,0,4,2,0,12,92,4,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,399,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
",4,1,0,2,4,0,6,0,0,13,102,5,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,401,"      Set<Integer> basicRows = new HashSet<Integer>();
",2,0,0,1,2,0,0,8,0,10,48,4,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,402,"      double[] coefficients = new double[getOriginalNumDecisionVariables()];
",2,0,0,3,6,0,2,0,0,4,70,5,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,403,"      for (int i = 0; i < coefficients.length; i++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,404,"          int colIndex = columnLabels.indexOf(""x"" + i);
",4,1,0,1,2,0,4,0,0,10,45,7,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,405,"          if (colIndex < 0) {
",2,1,0,1,3,0,0,0,0,3,19,6,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,409,"          Integer basicRow = getBasicRow(colIndex);
",2,0,0,1,2,0,4,2,0,8,41,6,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,413,"          if (basicRows.contains(basicRow)) {
",0,0,0,2,5,0,6,0,0,6,35,7,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,418,"              basicRows.add(basicRow);
",0,0,0,1,2,0,6,0,0,6,24,9,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,419,"              coefficients[i] =
",0,0,1,1,2,0,0,0,0,5,17,8,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,42,424,"      return new RealPointValuePair(coefficients, f.getValue(coefficients));
",2,0,0,2,4,1,6,2,0,10,70,5,0.05556,0
defect4j,math,org/apache/commons/math/util/Precision,42,92,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.05556,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,192,"        tableau.dropPhase1Objective();
",0,0,0,1,2,0,4,0,0,4,30,5,0.05263,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,194,"        while (!tableau.isOptimal()) {
",0,0,0,2,5,0,4,0,0,5,30,4,0.05263,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,98,"        if (++iterations > maxIterations) {
",4,1,0,1,3,0,0,0,0,6,35,4,0.05000,0
defect4j,math,org/apache/commons/math/optimization/linear/AbstractLinearOptimizer,42,101,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,70,"        double minValue = 0;
",2,0,0,0,0,0,0,0,0,2,20,5,0.05000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,71,"        Integer minPos = null;
",2,0,0,0,0,0,0,2,0,4,22,4,0.05000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,72,"        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
",6,2,0,3,7,0,8,0,0,17,83,4,0.05000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,73,"            final double entry = tableau.getEntry(0, i);
",2,0,0,1,2,1,6,0,0,9,44,6,0.05000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,74,"            if (Precision.compareTo(entry, minValue, maxUlps) < 0) {
",0,1,0,2,5,0,10,0,0,11,56,6,0.05000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,42,75,"                minValue = entry;
",4,0,0,0,0,0,0,0,0,5,17,8,0.05000,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,647,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,643,"        if (n > 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1160,"                double xa = x - 1.0;
",4,1,0,0,0,0,0,0,0,5,20,9,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1161,"                double xb = xa - x + 1.0;
",6,2,0,0,0,0,0,0,0,8,25,9,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1162,"                double tmp = xa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,7,31,9,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1163,"                double aa = xa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,10,27,9,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1164,"                double ab = xa - aa;
",6,1,0,0,0,0,0,0,0,7,20,9,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1165,"                xa = aa;
",4,0,0,0,0,0,0,0,0,5,8,8,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1166,"                xb = ab;
",4,0,0,0,0,0,0,0,0,5,8,8,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1168,"                double ya = LN_QUICK_COEF[LN_QUICK_COEF.length-1][0];
",6,1,1,2,4,0,0,0,0,9,53,9,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1169,"                double yb = LN_QUICK_COEF[LN_QUICK_COEF.length-1][1];
",6,1,1,2,4,0,0,0,0,9,53,9,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1171,"                for (int i = LN_QUICK_COEF.length - 2; i >= 0; i--) {
",10,2,0,1,3,0,0,0,0,13,53,8,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1173,"                    aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,10,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1174,"                    ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,10,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1176,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1177,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1178,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1181,"                    aa = ya + LN_QUICK_COEF[i][0];
",4,1,1,2,4,0,0,0,0,10,30,10,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1182,"                    ab = yb + LN_QUICK_COEF[i][1];
",4,1,1,2,4,0,0,0,0,10,30,10,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1184,"                    tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,10,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1185,"                    ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,10,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1186,"                    yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,10,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1190,"                aa = ya * xa;
",6,1,0,0,0,0,0,0,0,8,13,8,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1191,"                ab = ya * xb + yb * xa + yb * xb;
",14,5,0,0,0,0,0,0,0,20,33,8,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1193,"                tmp = aa * HEX_40000000;
",6,1,0,0,0,0,0,0,0,8,24,8,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1194,"                ya = aa + tmp - tmp;
",8,2,0,0,0,0,0,0,0,11,20,8,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1195,"                yb = aa - ya + ab;
",8,2,0,0,0,0,0,0,0,11,18,8,1,0
defect4j,math,org/apache/commons/math/util/FastMath,43,1197,"                return ya + yb;
",4,1,0,0,0,1,0,0,0,5,15,8,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,163,"        if (values == null) {
",2,1,0,1,3,0,0,0,0,3,21,4,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,167,"        if (begin < 0) {
",2,1,0,1,3,0,0,0,0,3,16,4,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,171,"        if (length < 0) {
",2,1,0,1,3,0,0,0,0,3,17,4,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,175,"        if (begin + length > values.length) {
",8,2,0,1,3,0,0,0,0,10,37,4,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,180,"        if (length == 0 && !allowEmpty) {
",4,2,0,1,3,0,0,0,0,7,33,4,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/AbstractUnivariateStatistic,43,184,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0
defect4j,math,org/apache/commons/math/stat/descriptive/SummaryStatistics,43,164,"        if (!(geoMeanImpl instanceof GeometricMean)) {
",2,0,0,2,5,0,0,2,0,5,46,4,0.81818,1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,209,"    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {
",8,3,0,3,7,0,0,0,0,11,65,4,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,212,"      initialStep = initialStepSize;
",4,0,0,0,0,0,0,0,0,5,30,6,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,214,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,44,252,"      return forward ? initialStep : -initialStep;
",6,0,0,0,0,1,0,0,0,7,44,7,0.50000,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3373,"        y += 1.0;
",2,0,0,0,0,0,0,0,0,3,9,4,0.16667,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3375,"        if (y == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,0.16667,0
defect4j,math,org/apache/commons/math/util/FastMath,44,3379,"        return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.16667,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,334,"            handler.resetState(t, y);
",0,0,0,1,2,0,8,0,0,8,25,7,0.11111,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,172,"            nbPoints        = 2;
",2,0,0,0,0,0,0,0,0,3,20,6,0.09091,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,173,"            signChangeIndex = 1;
",2,0,0,0,0,0,0,0,0,3,20,6,0.09091,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,340,"                    System.arraycopy(eventY, 0, y, 0, y.length);
",4,0,0,1,2,0,8,0,0,12,44,9,0.08333,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,341,"                    computeDerivatives(eventT, y, yDot);
",0,0,0,1,2,0,8,0,0,8,36,9,0.08333,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,342,"                    resetOccurred = true;
",2,0,0,0,0,0,0,0,0,4,21,8,0.08333,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,343,"                    return eventT;
",2,0,0,0,0,1,0,0,0,2,14,8,0.08333,1
defect4j,math,org/apache/commons/math/ode/events/EventState,44,329,"        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {
",8,3,0,4,9,0,4,0,0,16,77,4,0.07143,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,333,"        if (nextAction == EventHandler.Action.RESET_STATE) {
",8,1,0,1,3,0,0,0,0,9,52,4,0.07143,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,336,"        pendingEvent      = false;
",2,0,0,0,0,0,0,0,0,4,26,4,0.07143,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,337,"        pendingEventTime  = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.07143,0
defect4j,math,org/apache/commons/math/ode/events/EventState,44,339,"        return (nextAction == EventHandler.Action.RESET_STATE) ||
",8,2,0,1,2,1,0,0,0,10,57,4,0.07143,0
defect4j,math,org/apache/commons/math/ode/AbstractIntegrator,44,337,"                if (currentEvent.reset(eventT, eventY)) {
",0,0,0,2,5,0,8,0,0,8,41,7,0.07143,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,287,"                return nextX;
",2,0,0,0,0,1,0,0,0,2,13,8,0.07143,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,146,"        final double[] x = new double[maximalOrder + 1];
",4,1,0,2,4,1,0,0,0,6,48,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,147,"        final double[] y = new double[maximalOrder + 1];
",4,1,0,2,4,1,0,0,0,6,48,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,148,"        x[0] = getMin();
",0,0,1,2,4,0,2,0,0,5,16,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,149,"        x[1] = getStartValue();
",0,0,1,2,4,0,2,0,0,5,23,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,150,"        x[2] = getMax();
",0,0,1,2,4,0,2,0,0,5,16,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,151,"        verifySequence(x[0], x[1], x[2]);
",0,0,1,4,8,0,2,0,0,8,33,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,154,"        y[1] = computeObjectiveValue(x[1]);
",0,0,1,3,6,0,2,0,0,7,35,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,155,"        if (Precision.equals(y[1], 0.0, 1)) {
",0,0,1,3,7,0,4,0,0,6,37,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,161,"        y[0] = computeObjectiveValue(x[0]);
",0,0,1,3,6,0,2,0,0,7,35,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,162,"        if (Precision.equals(y[0], 0.0, 1)) {
",0,0,1,3,7,0,4,0,0,6,37,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,169,"        if (y[0] * y[1] < 0) {
",0,2,1,3,7,0,0,0,0,6,22,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,195,"        final double[] tmpX = new double[x.length];
",6,0,0,2,4,1,0,0,0,7,43,4,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,198,"        double xA    = x[signChangeIndex - 1];
",4,1,1,1,2,0,0,0,0,7,38,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,199,"        double yA    = y[signChangeIndex - 1];
",4,1,1,1,2,0,0,0,0,7,38,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,200,"        double absYA = FastMath.abs(yA);
",2,0,0,1,2,0,6,0,0,8,32,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,201,"        int agingA   = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,202,"        double xB    = x[signChangeIndex];
",2,0,1,1,2,0,0,0,0,6,34,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,203,"        double yB    = y[signChangeIndex];
",2,0,1,1,2,0,0,0,0,6,34,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,204,"        double absYB = FastMath.abs(yB);
",2,0,0,1,2,0,6,0,0,8,32,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,205,"        int agingB   = 0;
",2,0,0,0,0,0,0,0,0,2,17,5,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,211,"            final double xTol = getAbsoluteAccuracy() +
",2,1,0,1,2,1,2,0,0,6,43,6,0.06667,0
defect4j,math,org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver,44,213,"            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {
",6,4,0,6,13,0,10,0,0,20,87,6,0.06667,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,49,"        super(rowDimension, columnDimension);
",4,0,0,1,2,0,0,0,0,4,37,4,0.03333,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,50,"        this.rows = rowDimension;
",4,0,0,0,0,0,0,0,0,5,25,4,0.03333,1
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,51,"        this.columns = columnDimension;
",4,0,0,0,0,0,0,0,0,5,31,4,0.03333,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,52,"        this.entries = new OpenIntToDoubleHashMap(0.0);
",2,0,0,1,2,0,0,2,0,5,47,4,0.03333,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealMatrix,45,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03333,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,57,"        if (columnDimension < 1) {
",2,1,0,1,3,0,0,0,0,3,26,4,0.00388,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,60,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00388,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,53,"    protected AbstractRealMatrix(final int rowDimension, final int columnDimension) {
",6,0,0,1,3,3,0,0,0,9,81,2,0.00386,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,54,"        if (rowDimension < 1) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.00386,0
defect4j,math,org/apache/commons/math/linear/RealLinearOperator,45,52,"public abstract class RealLinearOperator {
",2,0,0,0,1,2,0,0,0,4,42,1,0.00315,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,345,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,358,"                this.startRow    = startRow;
",4,0,0,0,0,0,0,0,0,5,28,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,359,"                this.startColumn = startColumn;
",4,0,0,0,0,0,0,0,0,5,31,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,360,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,365,"                destination[row - startRow][column - startColumn] = value;
",10,2,1,2,4,0,0,0,0,15,58,10,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,366,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,44,"    protected AbstractRealMatrix() {}
",2,0,0,2,4,1,0,0,0,3,33,2,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,55,"            throw new NotStrictlyPositiveException(rowDimension);
",2,0,0,1,2,0,0,2,0,4,53,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,58,"            throw new NotStrictlyPositiveException(columnDimension);
",2,0,0,1,2,0,0,2,0,4,56,7,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,71,"        MatrixUtils.checkAdditionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,45,5,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,73,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,74,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,45,75,"        final RealMatrix out = createMatrix(rowCount, columnCount);
",2,0,0,1,2,1,6,2,0,11,59,4,0.00000,0
defect4j,math,org/apache/commons/math/complex/Complex,46,260,"            return isZero ? NaN : INF;
",6,0,0,0,0,1,0,0,0,6,26,7,1,0
defect4j,math,org/apache/commons/math/complex/Complex,46,1183,"        return ""("" + real + "", "" + imaginary + "")"";
",4,1,0,1,2,1,0,0,0,8,43,4,1.00000,0
defect4j,math,org/apache/commons/math/complex/Complex,46,587,"        return this.add(I).divide(I.subtract(this)).log()
",0,0,0,4,8,1,12,0,0,12,49,6,0.33333,0
defect4j,math,org/apache/commons/math/complex/Complex,46,258,"        if (divisor.isZero) {
",4,0,0,1,3,0,0,0,0,4,21,5,0.30769,0
defect4j,math,org/apache/commons/math/complex/Complex,46,253,"        MathUtils.checkNotNull(divisor);
",0,0,0,1,2,0,6,0,0,6,32,5,0.26667,0
defect4j,math,org/apache/commons/math/complex/Complex,46,254,"        if (isNaN || divisor.isNaN) {
",6,1,0,1,3,0,0,0,0,7,29,4,0.26667,0
defect4j,math,org/apache/commons/math/complex/Complex,46,583,"        if (isNaN) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.25000,0
defect4j,math,org/apache/commons/math/util/FastMath,46,1284,"            if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,6,0.25000,0
defect4j,math,org/apache/commons/math/util/FastMath,46,1288,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.25000,0
defect4j,math,org/apache/commons/math/util/FastMath,46,3004,"            if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,6,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,46,3005,"                return Math.PI/4.0;
",4,1,0,0,0,1,0,0,0,5,19,8,0.20000,0
defect4j,math,org/apache/commons/math/complex/Complex,46,329,"                return isNaN;
",2,0,0,0,0,1,0,0,0,2,13,8,0.16667,0
defect4j,math,org/apache/commons/math/complex/Complex,46,430,"            return INF;
",2,0,0,0,0,1,0,0,0,2,11,6,0.14286,0
defect4j,math,org/apache/commons/math/complex/Complex,46,276,"            double q = d / c;
",6,1,0,0,0,0,0,0,0,7,17,7,0.11111,0
defect4j,math,org/apache/commons/math/complex/Complex,46,277,"            double denominator = d * q + c;
",8,2,0,0,0,0,0,0,0,10,31,7,0.11111,0
defect4j,math,org/apache/commons/math/complex/Complex,46,278,"            return createComplex((imaginary * q + real) / denominator,
",8,3,0,1,3,1,2,0,0,13,58,7,0.11111,0
defect4j,math,org/apache/commons/math/complex/Complex,46,122,"            return Double.POSITIVE_INFINITY;
",4,0,0,0,0,1,0,0,0,4,32,7,0.09091,0
defect4j,math,org/apache/commons/math/complex/Complex,46,263,"        if (divisor.isInfinite() && !isInfinite()) {
",0,1,0,3,7,0,6,0,0,8,44,4,0.08333,0
defect4j,math,org/apache/commons/math/complex/Complex,46,267,"        final double c = divisor.getReal();
",2,0,0,1,2,1,4,0,0,7,35,4,0.08333,0
defect4j,math,org/apache/commons/math/complex/Complex,46,268,"        final double d = divisor.getImaginary();
",2,0,0,1,2,1,4,0,0,7,40,4,0.08333,0
defect4j,math,org/apache/commons/math/complex/Complex,46,270,"        if (FastMath.abs(c) < FastMath.abs(d)) {
",0,1,0,3,7,0,12,0,0,13,40,4,0.08333,0
defect4j,math,org/apache/commons/math/util/MathUtils,46,2337,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06780,0
defect4j,math,org/apache/commons/math/complex/Complex,46,754,"        return createComplex(FastMath.log(abs()),
",0,0,0,2,5,1,8,0,0,8,41,5,0.06667,0
defect4j,math,org/apache/commons/math/util/FastMath,46,1256,"        return log(x, null);
",0,0,0,1,2,1,4,0,0,5,20,4,0.06667,0
defect4j,math,org/apache/commons/math/util/MathUtils,46,2334,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.06667,0
defect4j,math,org/apache/commons/math/util/FastMath,46,1269,"        long bits = Double.doubleToLongBits(x);
",2,0,0,1,2,0,6,0,0,8,39,5,0.05556,0
defect4j,math,org/apache/commons/math/util/FastMath,46,1272,"        if ((bits & 0x8000000000000000L) != 0 || x != x) {
",6,4,0,2,5,0,0,0,0,10,50,4,0.05556,0
defect4j,math,org/apache/commons/math/util/FastMath,46,1283,"        if (x == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.05556,0
defect4j,math,org/apache/commons/math/complex/Complex,46,164,"        return createComplex(real + addend.getReal(),
",2,1,0,1,3,1,6,0,0,9,45,5,0.05263,0
defect4j,math,org/apache/commons/math/util/FastMath,46,1266,"        if (x==0) { // Handle special case of +0/-0
",2,1,0,1,3,0,0,0,0,3,43,4,0.05263,0
defect4j,math,org/apache/commons/math/util/FastMath,46,3003,"        if (y == Double.POSITIVE_INFINITY) {
",6,1,0,1,3,0,0,0,0,7,36,4,0.05263,0
defect4j,math,org/apache/commons/math/util/MathUtils,46,85,"    private static final long[] FACTORIALS = new long[] {
",2,0,0,2,5,3,0,0,0,5,53,2,0.05000,0
defect4j,math,org/apache/commons/math/complex/Complex,46,379,"        return isNaN;
",2,0,0,0,0,1,0,0,0,2,13,4,0.04762,0
defect4j,math,org/apache/commons/math/complex/Complex,46,750,"        if (isNaN) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.04762,0
defect4j,math,org/apache/commons/math/util/FastMath,46,2977,"        if (y == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.04762,0
defect4j,math,org/apache/commons/math/complex/Complex,46,497,"        return createComplex(real - subtrahend.getReal(),
",2,1,0,1,3,1,6,0,0,9,49,5,0.04545,0
defect4j,math,org/apache/commons/math/util/FastMath,46,2973,"        if (x !=x || y != y) {
",8,3,0,1,3,0,0,0,0,11,22,4,0.04545,0
defect4j,math,org/apache/commons/math/complex/Complex,46,159,"        MathUtils.checkNotNull(addend);
",0,0,0,1,2,0,6,0,0,6,31,5,0.04348,0
defect4j,math,org/apache/commons/math/complex/Complex,46,160,"        if (isNaN || addend.isNaN) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.04348,0
defect4j,math,org/apache/commons/math/complex/Complex,46,492,"        MathUtils.checkNotNull(subtrahend);
",0,0,0,1,2,0,6,0,0,6,35,5,0.04000,0
defect4j,math,org/apache/commons/math/complex/Complex,46,297,"            return isZero ? NaN : INF;
",6,0,0,0,0,1,0,0,0,6,26,7,0.00000,1
defect4j,math,org/apache/commons/math/complex/Complex,47,257,"            return NaN;
",2,0,0,0,0,1,0,0,0,2,11,6,1,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2991,"                if (y < 0.0 || invy < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,8,0.50000,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2994,"                    return Math.PI;
",4,0,0,0,0,1,0,0,0,4,15,11,0.50000,0
defect4j,math,org/apache/commons/math/complex/Complex,47,583,"        return this.add(I).divide(I.subtract(this)).log()
",0,0,0,4,8,1,12,0,0,12,49,6,0.33333,0
defect4j,math,org/apache/commons/math/complex/Complex,47,256,"        if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {
",0,3,0,3,7,0,8,0,0,11,64,4,0.30769,0
defect4j,math,org/apache/commons/math/complex/Complex,47,251,"        MathUtils.checkNotNull(divisor);
",0,0,0,1,2,0,6,0,0,6,32,5,0.26667,0
defect4j,math,org/apache/commons/math/complex/Complex,47,252,"        if (isNaN || divisor.isNaN) {
",6,1,0,1,3,0,0,0,0,7,29,4,0.26667,0
defect4j,math,org/apache/commons/math/complex/Complex,47,579,"        if (isNaN) {
",2,0,0,1,3,0,0,0,0,2,12,4,0.25000,0
defect4j,math,org/apache/commons/math/complex/Complex,47,268,"            double q = c / d;
",6,1,0,0,0,0,0,0,0,7,17,7,0.20000,0
defect4j,math,org/apache/commons/math/complex/Complex,47,269,"            double denominator = c * q + d;
",8,2,0,0,0,0,0,0,0,10,31,7,0.20000,0
defect4j,math,org/apache/commons/math/complex/Complex,47,270,"            return createComplex((real * q + imaginary) / denominator,
",8,3,0,1,3,1,2,0,0,13,58,7,0.20000,0
defect4j,math,org/apache/commons/math/util/FastMath,47,1315,"            if (x < 1.01 && x > 0.99 && hiPrec == null) {
",6,5,0,1,3,0,0,0,0,11,45,6,0.14286,0
defect4j,math,org/apache/commons/math/complex/Complex,47,747,"            return NaN;
",2,0,0,0,0,1,0,0,0,2,11,6,0.14286,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2990,"            if (x < 0.0 || invx < 0.0) {
",4,3,0,1,3,0,0,0,0,7,28,6,0.12500,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2997,"                return result;
",2,0,0,0,0,1,0,0,0,2,14,8,0.12500,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2978,"            double result = x*y;
",6,1,0,0,0,0,0,0,0,7,20,7,0.11111,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2979,"            double invx = 1.0/x;
",4,1,0,0,0,0,0,0,0,5,20,7,0.11111,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2980,"            double invy = 1.0/y;
",4,1,0,0,0,0,0,0,0,5,20,7,0.11111,0
defect4j,math,org/apache/commons/math/util/FastMath,47,2982,"            if (invx == 0.0) { // X is infinite
",2,1,0,1,3,0,0,0,0,3,35,6,0.11111,0
defect4j,math,org/apache/commons/math/complex/Complex,47,273,"            double q = d / c;
",6,1,0,0,0,0,0,0,0,7,17,7,0.11111,0
defect4j,math,org/apache/commons/math/complex/Complex,47,274,"            double denominator = d * q + c;
",8,2,0,0,0,0,0,0,0,10,31,7,0.11111,0
defect4j,math,org/apache/commons/math/complex/Complex,47,275,"            return createComplex((imaginary * q + real) / denominator,
",8,3,0,1,3,1,2,0,0,13,58,7,0.11111,0
defect4j,math,org/apache/commons/math/util/FastMath,47,1429,"            lnza = -0.16624882440418567;
",2,0,0,0,0,0,0,0,0,4,28,6,0.09091,0
defect4j,math,org/apache/commons/math/util/FastMath,47,1430,"            lnza = lnza * epsilon + 0.19999954120254515;
",6,2,0,0,0,0,0,0,0,9,44,6,0.09091,0
defect4j,math,org/apache/commons/math/util/FastMath,47,1431,"            lnza = lnza * epsilon + -0.2499999997677497;
",6,2,0,0,0,0,0,0,0,10,44,6,0.09091,0
defect4j,math,org/apache/commons/math/util/FastMath,47,1432,"            lnza = lnza * epsilon + 0.3333333333332802;
",6,2,0,0,0,0,0,0,0,9,43,6,0.09091,0
defect4j,math,org/apache/commons/math/util/FastMath,47,1433,"            lnza = lnza * epsilon + -0.5;
",6,2,0,0,0,0,0,0,0,10,29,6,0.09091,0
defect4j,math,org/apache/commons/math/util/FastMath,47,1434,"            lnza = lnza * epsilon + 1.0;
",6,2,0,0,0,0,0,0,0,9,28,6,0.09091,0
defect4j,math,org/apache/commons/math/util/FastMath,47,1435,"            lnza = lnza * epsilon;
",6,1,0,0,0,0,0,0,0,8,22,6,0.09091,0
defect4j,math,org/apache/commons/math/complex/Complex,47,260,"        if (divisor.isInfinite() && !isInfinite()) {
",0,1,0,3,7,0,6,0,0,8,44,4,0.08333,0
defect4j,math,org/apache/commons/math/complex/Complex,47,264,"        final double c = divisor.getReal();
",2,0,0,1,2,1,4,0,0,7,35,4,0.08333,0
defect4j,math,org/apache/commons/math/complex/Complex,47,265,"        final double d = divisor.getImaginary();
",2,0,0,1,2,1,4,0,0,7,40,4,0.08333,0
defect4j,math,org/apache/commons/math/complex/Complex,47,267,"        if (FastMath.abs(c) < FastMath.abs(d)) {
",0,1,0,3,7,0,12,0,0,13,40,4,0.08333,0
defect4j,math,org/apache/commons/math/complex/Complex,47,419,"            return NaN;
",2,0,0,0,0,1,0,0,0,2,11,6,0.08333,0
defect4j,math,org/apache/commons/math/util/MathUtils,47,2337,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.06780,0
defect4j,math,org/apache/commons/math/util/MathUtils,47,2334,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.06667,0
defect4j,math,org/apache/commons/math/util/FastMath,47,1256,"        return log(x, null);
",0,0,0,1,2,1,4,0,0,5,20,4,0.06667,0
defect4j,math,org/apache/commons/math/util/FastMath,47,1362,"        double lnm[] = LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];
",4,2,1,5,10,0,0,0,0,8,66,5,0.06667,0
defect4j,math,org/apache/commons/math/util/FastMath,47,1373,"        double epsilon = (bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));
",8,4,0,3,6,0,0,0,0,12,89,5,0.06667,0
defect4j,math,org/apache/commons/math/util/FastMath,47,1375,"        double lnza = 0.0;
",2,0,0,0,0,0,0,0,0,2,18,5,0.06667,0
defect4j,math,org/apache/commons/math/complex/Complex,47,105,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02174,1
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,39,"public class ExceptionContext implements Serializable {
",2,0,0,0,1,1,0,2,0,5,55,1,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,45,"    private List<Localizable> msgPatterns = new ArrayList<Localizable>();
",2,0,0,1,2,1,0,8,0,11,69,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,51,"    private List<Object[]> msgArguments = new ArrayList<Object[]>();
",2,0,0,3,6,1,0,8,0,11,64,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,55,"    private Map<String, Object> context = new HashMap<String, Object>();
",2,0,0,1,2,1,0,12,0,15,68,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,66,"        msgPatterns.add(pattern);
",0,0,0,1,2,0,6,0,0,6,25,5,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,67,"        msgArguments.add(ArgUtils.flatten(arguments));
",0,0,0,2,4,0,10,0,0,10,46,5,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/ExceptionContext,48,68,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,355,"    private LocalizedFormats(final String sourceFormat) {
",4,0,0,1,3,2,0,2,0,8,53,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,356,"        this.sourceFormat = sourceFormat;
",4,0,0,0,0,0,0,0,0,5,33,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,357,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),
",2,0,0,5,10,0,0,0,0,3,67,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),
",2,0,0,4,8,0,0,0,0,3,94,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),
",2,0,0,1,2,0,0,0,0,3,41,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),
",2,0,0,1,2,0,0,0,0,3,95,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),
",2,0,0,1,2,0,0,0,0,3,60,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),
",2,0,0,1,2,0,0,0,0,3,54,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,50,"    BANDWIDTH(""bandwidth ({0})""),
",2,0,0,3,6,0,0,0,0,3,29,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),
",2,0,0,4,8,0,0,0,0,3,108,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),
",2,0,0,3,6,0,0,0,0,3,93,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),
",2,0,0,1,2,0,0,0,0,3,123,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),
",2,0,0,1,2,0,0,0,0,3,89,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),
",2,0,0,2,4,0,0,0,0,3,108,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),
",2,0,0,1,2,0,0,0,0,3,100,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),
",2,0,0,2,4,0,0,0,0,3,94,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),
",2,0,0,2,4,0,0,0,0,3,91,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),
",2,0,0,3,6,0,0,0,0,3,97,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),
",2,0,0,2,4,0,0,0,0,3,83,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),
",2,0,0,2,4,0,0,0,0,3,86,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),
",2,0,0,2,4,0,0,0,0,3,87,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),
",2,0,0,1,2,0,0,0,0,3,84,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),
",2,0,0,1,2,0,0,0,0,3,131,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),
",2,0,0,1,2,0,0,0,0,3,75,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),
",2,0,0,2,4,0,0,0,0,3,98,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),
",2,0,0,2,4,0,0,0,0,3,78,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),
",2,0,0,1,2,0,0,0,0,3,95,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),
",2,0,0,2,4,0,0,0,0,3,74,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),
",2,0,0,1,2,0,0,0,0,3,55,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),
",2,0,0,3,6,0,0,0,0,3,79,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),
",2,0,0,2,4,0,0,0,0,3,115,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),
",2,0,0,5,10,0,0,0,0,3,78,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,74,"    COLUMN_INDEX(""column index ({0})""), /* keep */
",2,0,0,3,6,0,0,0,0,3,46,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,75,"    CONTINUED_FRACTION_INFINITY_DIVERGENCE(""Continued fraction convergents diverged to +/- infinity for value {0}""),
",2,0,0,2,4,0,0,0,0,3,112,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,76,"    CONTINUED_FRACTION_NAN_DIVERGENCE(""Continued fraction diverged to NaN for value {0}""),
",2,0,0,2,4,0,0,0,0,3,86,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,77,"    CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(""contraction criteria ({0}) smaller than the expansion factor ({1}).  This would lead to a never ending loop of expansion and contraction as a newly expanded internal storage array would immediately satisfy the criteria for contraction.""),
",2,0,0,5,10,0,0,0,0,3,290,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,78,"    CONTRACTION_CRITERIA_SMALLER_THAN_ONE(""contraction criteria smaller than one ({0}).  This would lead to a never ending loop of expansion and contraction as an internal storage array length equal to the number of elements would satisfy the contraction criteria.""),
",2,0,0,3,6,0,0,0,0,3,263,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,79,"    CONVERGENCE_FAILED(""convergence failed""), /* keep */
",2,0,0,1,2,0,0,0,0,3,52,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,48,80,"    CROSSING_BOUNDARY_LOOPS(""some outline boundary loops cross each other""),
",2,0,0,1,2,0,0,0,0,3,72,2,0.25000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,48,189,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.16667,1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,67,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,368,"        checkVectorDimensions(v.getDimension());
",0,0,0,2,4,0,6,0,0,6,40,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,369,"        OpenMapRealVector res = new OpenMapRealVector(this);
",2,0,0,1,2,0,0,4,0,6,52,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,370,"        Iterator iter = res.entries.iterator();
",6,0,0,1,2,0,2,2,0,10,39,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,371,"        while (iter.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,24,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,372,"            iter.advance();
",0,0,0,1,2,0,4,0,0,4,15,7,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,373,"            res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));
",0,1,0,5,10,0,20,0,0,21,64,7,1.00000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,186,"        if (states[index] == FREE) {
",2,1,1,2,5,0,0,0,0,7,28,4,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,187,"            return missingEntries;
",2,0,0,0,0,1,0,0,0,2,22,6,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,354,"        final int hash  = hashOf(key);
",2,0,0,1,2,1,4,0,0,7,30,4,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,355,"        int index = hash & mask;
",6,1,0,0,0,0,0,0,0,7,24,5,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,356,"        if (containsKey(key, index)) {
",0,0,0,2,5,0,6,0,0,6,30,5,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,357,"            return doRemove(index);
",0,0,0,1,2,1,4,0,0,4,23,7,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,394,"        keys[index]   = 0;
",0,0,1,1,2,0,0,0,0,5,18,4,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,395,"        states[index] = REMOVED;
",2,0,1,1,2,0,0,0,0,7,24,4,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,396,"        final double previous = values[index];
",2,0,1,1,2,1,0,0,0,7,38,4,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,397,"        values[index] = missingEntries;
",2,0,1,1,2,0,0,0,0,7,31,4,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,398,"        --size;
",2,0,0,0,0,0,0,0,0,3,7,4,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,399,"        ++count;
",2,0,0,0,0,0,0,0,0,3,8,4,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,400,"        return previous;
",2,0,0,0,0,1,0,0,0,2,16,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,63,"        int d = getDimension();
",2,0,0,1,2,0,2,0,0,4,23,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,49,64,"        if (d != n) {
",4,1,0,1,3,0,0,0,0,5,13,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,666,"        } else if (entries.containsKey(index)) {
",0,0,0,2,6,0,6,0,0,6,40,6,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,667,"            entries.remove(index);
",0,0,0,1,2,0,6,0,0,6,22,8,0.50000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,210,"        final int hash  = hashOf(key);
",2,0,0,1,2,1,4,0,0,7,30,4,0.33333,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,211,"        int index = hash & mask;
",6,1,0,0,0,0,0,0,0,7,24,5,0.33333,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,212,"        if (containsKey(key, index)) {
",0,0,0,2,5,0,6,0,0,6,30,5,0.33333,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,213,"            return true;
",0,0,0,0,0,1,0,0,0,1,12,6,0.33333,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,33,"public class OpenMapRealVector extends AbstractRealVector
",2,0,0,0,0,1,0,2,0,5,57,1,0.33333,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,133,"    public OpenIntToDoubleHashMap(final OpenIntToDoubleHashMap source) {
",4,0,0,1,3,2,0,2,0,8,68,2,0.25000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,134,"        final int length = source.keys.length;
",8,0,0,0,0,1,0,0,0,9,38,4,0.25000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,135,"        keys = new int[length];
",2,0,1,1,2,0,0,0,0,5,23,4,0.25000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,136,"        System.arraycopy(source.keys, 0, keys, 0, length);
",4,0,0,1,2,0,8,0,0,12,50,5,0.25000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,137,"        values = new double[length];
",2,0,1,1,2,0,0,0,0,5,28,4,0.25000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,138,"        System.arraycopy(source.values, 0, values, 0, length);
",4,0,0,1,2,0,8,0,0,12,54,5,0.25000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,139,"        states = new byte[length];
",2,0,1,1,2,0,0,0,0,5,26,4,0.25000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,140,"        System.arraycopy(source.states, 0, states, 0, length);
",4,0,0,1,2,0,8,0,0,12,54,5,0.25000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,141,"        missingEntries = source.missingEntries;
",6,0,0,0,0,0,0,0,0,7,39,4,0.25000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,142,"        size  = source.size;
",6,0,0,0,0,0,0,0,0,7,20,4,0.25000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,143,"        mask  = source.mask;
",6,0,0,0,0,0,0,0,0,7,20,4,0.25000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,144,"        count = source.count;
",6,0,0,0,0,0,0,0,0,7,21,4,0.25000,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,49,145,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,74,"    public OpenMapRealVector(int dimension, double epsilon) {
",6,0,0,1,3,1,0,0,0,7,57,2,0.25000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,75,"        virtualSize = dimension;
",4,0,0,0,0,0,0,0,0,5,24,4,0.25000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,76,"        entries = new OpenIntToDoubleHashMap(0.0);
",2,0,0,1,2,0,0,2,0,5,42,4,0.25000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,77,"        this.epsilon = epsilon;
",4,0,0,0,0,0,0,0,0,5,23,4,0.25000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,78,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,179,"    public OpenMapRealVector(OpenMapRealVector v) {
",4,0,0,1,3,1,0,2,0,7,47,2,0.25000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,49,383,"        Iterator iter = res.entries.iterator();
",6,0,0,1,2,0,2,2,0,10,39,4,0.00000,1
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,239,"                    return x1;
",2,0,0,0,0,1,0,0,0,2,10,9,0.20000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,187,"                    if (x == x1) {
",4,1,0,1,3,0,0,0,0,5,14,9,0.16667,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);
",6,0,0,1,2,0,0,0,0,6,54,4,0.12500,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,50,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,237,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.05000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));
",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,205,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,171,"            if (f1 * fx < 0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,174,"                x0 = x1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,175,"                f0 = f1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,176,"                inverted = !inverted;
",4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,198,"            x1 = x;
",4,0,0,0,0,0,0,0,0,5,7,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,199,"            f1 = fx;
",4,0,0,0,0,0,0,0,0,5,8,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,204,"            if (FastMath.abs(f1) <= ftol) {
",2,1,0,2,5,0,6,0,0,9,31,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,235,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,252,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,68,"        super(absoluteAccuracy);
",2,0,0,1,2,0,0,0,0,2,24,4,0.04167,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,69,"        this.allowed = AllowedSolution.ANY_SIDE;
",6,0,0,0,0,0,0,0,0,7,40,4,0.04167,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,70,"        this.method = method;
",4,0,0,0,0,0,0,0,0,5,21,4,0.04167,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04167,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,149,"        final double ftol = getFunctionValueAccuracy();
",2,0,0,1,2,1,2,0,0,5,47,4,0.04000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,150,"        final double atol = getAbsoluteAccuracy();
",2,0,0,1,2,1,2,0,0,5,42,4,0.04000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,151,"        final double rtol = getRelativeAccuracy();
",2,0,0,1,2,1,2,0,0,5,42,4,0.04000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,155,"        boolean inverted = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.04000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,160,"            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
",14,5,0,4,8,1,0,0,0,20,53,6,0.04000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,161,"            final double fx = computeObjectiveValue(x);
",2,0,0,1,2,1,4,0,0,7,43,6,0.04000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,166,"            if (fx == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.04000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,128,"        return absoluteAccuracy;
",2,0,0,0,0,1,0,0,0,2,24,4,0.03704,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,134,"        return relativeAccuracy;
",2,0,0,0,0,1,0,0,0,2,24,4,0.03704,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,140,"        return functionValueAccuracy;
",2,0,0,0,0,1,0,0,0,2,29,4,0.03704,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,283,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03704,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,50,380,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,50,3410,"        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,61,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,50,3925,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,50,3928,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,50,3929,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.03704,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,146,"        verifyBracketing(x0, x1);
",0,0,0,1,2,0,6,0,0,6,25,5,0.03571,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,50,282,"        UnivariateRealSolverUtils.verifyBracketing(function, lower, upper);
",0,0,0,1,2,0,10,0,0,10,67,5,0.03226,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,116,"        this.allowed = allowedSolution;
",4,0,0,0,0,0,0,0,0,5,31,4,0.03226,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,117,"        return super.solve(maxEval, f, min, max, startValue);
",12,0,0,1,2,1,0,0,0,12,53,5,0.03226,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,130,"        double x0 = getMin();
",2,0,0,1,2,0,2,0,0,4,21,5,0.03226,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,131,"        double x1 = getMax();
",2,0,0,1,2,0,2,0,0,4,21,5,0.03226,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,132,"        double f0 = computeObjectiveValue(x0);
",2,0,0,1,2,0,4,0,0,6,38,5,0.03226,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,50,133,"        double f1 = computeObjectiveValue(x1);
",2,0,0,1,2,0,4,0,0,6,38,5,0.03226,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,43,"        super(DEFAULT_ABSOLUTE_ACCURACY, Method.REGULA_FALSI);
",6,0,0,1,2,0,0,0,0,6,54,4,0.12500,0
defect4j,math,org/apache/commons/math/analysis/solvers/RegulaFalsiSolver,51,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,124,"        return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
",4,0,0,1,2,1,12,0,0,16,73,5,0.08333,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,199,"                switch (allowed) {
",2,0,0,1,3,0,0,0,0,2,18,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,171,"            if (f1 * fx < 0) {
",4,2,0,1,3,0,0,0,0,6,18,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,174,"                x0 = x1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,175,"                f0 = f1;
",4,0,0,0,0,0,0,0,0,5,8,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,176,"                inverted = !inverted;
",4,0,0,0,0,0,0,0,0,6,21,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,178,"                switch (method) {
",2,0,0,1,3,0,0,0,0,2,17,8,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,192,"            x1 = x;
",4,0,0,0,0,0,0,0,0,5,7,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,193,"            f1 = fx;
",4,0,0,0,0,0,0,0,0,5,8,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,198,"            if (FastMath.abs(f1) <= ftol) {
",2,1,0,2,5,0,6,0,0,9,31,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,229,"            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
",6,3,0,2,6,0,14,0,0,23,65,6,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,246,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,195,"        return solve(maxEval, f, min, max, min + 0.5 * (max - min));
",6,3,0,2,4,1,10,0,0,19,60,5,0.04762,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,68,"        super(absoluteAccuracy);
",2,0,0,1,2,0,0,0,0,2,24,4,0.04167,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,69,"        this.allowed = AllowedSolution.ANY_SIDE;
",6,0,0,0,0,0,0,0,0,7,40,4,0.04167,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,70,"        this.method = method;
",4,0,0,0,0,0,0,0,0,5,21,4,0.04167,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,71,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.04167,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,149,"        final double ftol = getFunctionValueAccuracy();
",2,0,0,1,2,1,2,0,0,5,47,4,0.04000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,150,"        final double atol = getAbsoluteAccuracy();
",2,0,0,1,2,1,2,0,0,5,42,4,0.04000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,151,"        final double rtol = getRelativeAccuracy();
",2,0,0,1,2,1,2,0,0,5,42,4,0.04000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,155,"        boolean inverted = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.04000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,160,"            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
",14,5,0,4,8,1,0,0,0,20,53,6,0.04000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,161,"            final double fx = computeObjectiveValue(x);
",2,0,0,1,2,1,4,0,0,7,43,6,0.04000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,166,"            if (fx == 0.0) {
",2,1,0,1,3,0,0,0,0,3,16,6,0.04000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,128,"        return absoluteAccuracy;
",2,0,0,0,0,1,0,0,0,2,24,4,0.03704,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,134,"        return relativeAccuracy;
",2,0,0,0,0,1,0,0,0,2,24,4,0.03704,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,140,"        return functionValueAccuracy;
",2,0,0,0,0,1,0,0,0,2,29,4,0.03704,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseAbstractUnivariateRealSolver,51,283,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03704,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,51,380,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,51,3410,"        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0
",8,2,0,2,4,1,0,0,0,11,61,5,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,51,3925,"        if (a > b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,51,3928,"        if (a < b) {
",4,1,0,1,3,0,0,0,0,5,12,4,0.03704,0
defect4j,math,org/apache/commons/math/util/FastMath,51,3929,"            return b;
",2,0,0,0,0,1,0,0,0,2,9,6,0.03704,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,146,"        verifyBracketing(x0, x1);
",0,0,0,1,2,0,6,0,0,6,25,5,0.03571,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,116,"        this.allowed = allowedSolution;
",4,0,0,0,0,0,0,0,0,5,31,4,0.03226,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,117,"        return super.solve(maxEval, f, min, max, startValue);
",12,0,0,1,2,1,0,0,0,12,53,5,0.03226,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,130,"        double x0 = getMin();
",2,0,0,1,2,0,2,0,0,4,21,5,0.03226,0
defect4j,math,org/apache/commons/math/analysis/solvers/BaseSecantSolver,51,131,"        double x1 = getMax();
",2,0,0,1,2,0,2,0,0,4,21,5,0.03226,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,313,"  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
",10,0,0,1,3,1,0,8,0,19,69,2,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,316,"  double u1u1 = u1.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,317,"  double u2u2 = u2.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,318,"  double v1v1 = v1.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,319,"  double v2v2 = v2.getNormSq();
",2,0,0,1,2,0,4,0,0,6,29,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,320,"  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
",8,5,0,5,11,0,0,0,0,13,63,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,325,"  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
",8,1,0,2,4,0,4,2,0,16,50,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,328,"  double u1u2   = u1.dotProduct(u2);
",2,0,0,1,2,0,6,0,0,8,34,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,329,"  double v1v2   = v1.dotProduct(v2);
",2,0,0,1,2,0,6,0,0,8,34,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,330,"  double coeffU = u1u2 / u1u1;
",6,1,0,0,0,0,0,0,0,7,28,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,331,"  double coeffV = v1v2 / u1u1;
",6,1,0,0,0,0,0,0,0,7,28,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,332,"  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
",14,5,0,3,6,0,4,0,0,23,79,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,333,"  double alpha  = coeffU - beta * coeffV;
",8,2,0,0,0,0,0,0,0,10,39,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,334,"  v2 = new Vector3D(alpha, v1, beta, v2);
",10,0,0,1,2,0,0,2,0,13,39,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,337,"  Vector3D uRef  = u1;
",4,0,0,0,0,0,0,2,0,6,20,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,338,"  Vector3D vRef  = v1;
",4,0,0,0,0,0,0,2,0,6,20,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,339,"  Vector3D v1Su1 = v1.subtract(u1);
",2,0,0,1,2,0,6,2,0,10,33,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,340,"  Vector3D v2Su2 = v2.subtract(u2);
",2,0,0,1,2,0,6,2,0,10,33,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,341,"  Vector3D k     = v1Su1.crossProduct(v2Su2);
",2,0,0,1,2,0,6,2,0,10,43,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,342,"  Vector3D u3    = u1.crossProduct(u2);
",2,0,0,1,2,0,6,2,0,10,37,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,343,"  double c       = k.dotProduct(u3);
",2,0,0,1,2,0,6,0,0,8,34,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,344,"  if (c == 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,378,"  c = FastMath.sqrt(c);
",2,0,0,1,2,0,6,0,0,9,21,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,379,"  double inv = 1.0 / (c + c);
",6,2,0,1,2,0,0,0,0,8,27,5,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,380,"  q1 = inv * k.getX();
",4,1,0,1,2,0,4,0,0,10,20,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,381,"  q2 = inv * k.getY();
",4,1,0,1,2,0,4,0,0,10,20,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,382,"  q3 = inv * k.getZ();
",4,1,0,1,2,0,4,0,0,10,20,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,385,"   k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
",6,3,0,2,5,0,8,2,0,20,53,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,388,"  q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
",2,2,0,3,6,0,10,0,0,15,46,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,390,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,481,"    return q0;
",2,0,0,0,0,1,0,0,0,2,10,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,224,"        return x * x + y * y + z * z;
",12,5,0,0,0,1,0,0,0,17,29,4,1.00000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,134,"    public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {
",10,0,0,1,3,1,0,4,0,15,65,2,0.10000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,135,"        this.x = MathUtils.linearCombination(a1, u1.x, a2, u2.x);
",10,0,0,1,2,0,8,0,0,19,57,4,0.10000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,136,"        this.y = MathUtils.linearCombination(a1, u1.y, a2, u2.y);
",10,0,0,1,2,0,8,0,0,19,57,4,0.10000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,137,"        this.z = MathUtils.linearCombination(a1, u1.z, a2, u2.z);
",10,0,0,1,2,0,8,0,0,19,57,4,0.10000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Vector3D,52,138,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,134,"                  boolean needsNormalization) {
",2,0,0,0,2,0,0,0,0,2,29,3,0.07143,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,136,"    if (needsNormalization) {
",2,0,0,1,3,0,0,0,0,2,25,4,0.07143,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,145,"    this.q0 = q0;
",4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,146,"    this.q1 = q1;
",4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,147,"    this.q2 = q2;
",4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,148,"    this.q3 = q3;
",4,0,0,0,0,0,0,0,0,5,13,4,0.07143,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,150,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math/geometry/euclidean/threed/Rotation,52,359,"      if (c == 0) {
",2,1,0,1,3,0,0,0,0,3,13,8,0.00000,1
defect4j,math,org/apache/commons/math/complex/Complex,53,152,"        MathUtils.checkNotNull(rhs);
",0,0,0,1,2,0,6,0,0,6,28,5,0.05263,0
defect4j,math,org/apache/commons/math/complex/Complex,53,153,"        return createComplex(real + rhs.getReal(),
",2,1,0,1,3,1,6,0,0,9,42,5,0.05263,1
defect4j,math,org/apache/commons/math/complex/Complex,53,319,"        return isNaN;
",2,0,0,0,0,1,0,0,0,2,13,4,0.04348,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,2334,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.02381,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,2331,"        if (o == null) {
",2,1,0,1,3,0,0,0,0,3,16,4,0.02326,0
defect4j,math,org/apache/commons/math/util/MathUtils,53,85,"    private static final long[] FACTORIALS = new long[] {
",2,0,0,2,5,3,0,0,0,5,53,2,0.01587,0
defect4j,math,org/apache/commons/math/complex/Complex,53,997,"        return new Complex(realPart, imaginaryPart);
",4,0,0,1,2,1,0,2,0,6,44,5,0.01449,0
defect4j,math,org/apache/commons/math/complex/Complex,53,308,"        return real;
",2,0,0,0,0,1,0,0,0,2,12,4,0.00980,0
defect4j,math,org/apache/commons/math/complex/Complex,53,299,"        return imaginary;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00971,0
defect4j,math,org/apache/commons/math/complex/Complex,53,90,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.00606,0
defect4j,math,org/apache/commons/math/complex/Complex,53,91,"        this.real = real;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00606,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2119,"            buffer[--q] = '-';
",2,0,1,1,2,0,0,0,0,7,18,6,0.08333,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1041,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,0.07143,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1234,"            a.exp = b.exp;
",8,0,0,0,0,0,0,0,0,9,14,6,0.05556,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2328,"            exponent--;
",2,0,0,0,0,0,0,0,0,3,11,6,0.05556,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,576,"        return new Dfp(getField(), x);
",2,0,0,2,4,1,2,2,0,6,30,5,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,801,"        return nans == INFINITE;
",4,1,0,0,0,1,0,0,0,5,24,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1105,"        return exp * 4 - 4;
",2,2,0,0,0,1,0,0,0,4,19,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2305,"        if (isInfinite()) {
",0,0,0,2,5,0,2,0,0,2,19,5,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2313,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2317,"        Dfp y = this;
",2,0,0,0,0,0,0,2,0,4,13,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2318,"        boolean negate = false;
",2,0,0,0,0,0,0,0,0,3,23,5,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2319,"        if (lessThan(getZero())) {
",0,0,0,3,7,0,4,0,0,4,26,5,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2326,"        int exponent = (int)(y.log10() * 3.32);
",2,1,0,3,6,0,4,0,0,7,39,5,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2327,"        if (exponent < 0) {
",2,1,0,1,3,0,0,0,0,3,19,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2331,"        Dfp tempDfp = DfpMath.pow(getTwo(), exponent);
",2,0,0,2,4,0,8,2,0,12,46,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2332,"        while (tempDfp.lessThan(y) || tempDfp.equals(y)) {
",0,1,0,3,7,0,12,0,0,13,50,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2336,"        exponent--;
",2,0,0,0,0,0,0,0,0,3,11,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2340,"        y = y.divide(DfpMath.pow(getTwo(), exponent));
",2,0,0,3,6,0,12,0,0,15,46,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2341,"        if (exponent > -1023) {
",2,1,0,1,3,0,0,0,0,4,23,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2342,"            y = y.subtract(getOne());
",2,0,0,2,4,0,6,0,0,9,25,6,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2345,"        if (exponent < -1074) {
",2,1,0,1,3,0,0,0,0,4,23,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2349,"        if (exponent > 1023) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2354,"        y = y.multiply(newInstance(4503599627370496l)).rint();
",2,0,0,3,6,0,8,0,0,11,54,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2355,"        String str = y.toString();
",2,0,0,1,2,0,4,2,0,8,26,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2356,"        str = str.substring(0, str.length()-1);
",2,1,0,2,4,0,8,0,0,12,39,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2357,"        long mantissa = Long.parseLong(str);
",2,0,0,1,2,0,6,0,0,8,36,5,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2359,"        if (mantissa == 4503599627370496L) {
",2,1,0,1,3,0,0,0,0,3,36,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2366,"        if (exponent <= -1023) {
",2,1,0,1,3,0,0,0,0,4,24,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2370,"        while (exponent < -1023) {
",2,1,0,1,3,0,0,0,0,4,26,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2375,"        long bits = mantissa | ((exponent + 1023L) << 52);
",6,3,0,2,4,0,0,0,0,9,50,5,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2376,"        double x = Double.longBitsToDouble(bits);
",2,0,0,1,2,0,6,0,0,8,41,5,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2378,"        if (negate) {
",2,0,0,1,3,0,0,0,0,2,13,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,2382,"        return x;
",2,0,0,0,0,1,0,0,0,2,9,4,0.05263,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,661,"        return field.getTwo();
",0,0,0,1,2,1,4,0,0,4,22,5,0.05000,0
defect4j,math,org/apache/commons/math/dfp/DfpField,54,414,"        return two;
",2,0,0,0,0,1,0,0,0,2,11,4,0.05000,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1096,"        if (mant[mant.length-1] > 1000) {
",4,2,1,2,5,0,0,0,0,8,33,4,0.04762,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1099,"        if (mant[mant.length-1] > 100) {
",4,2,1,2,5,0,0,0,0,8,32,4,0.04762,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,1102,"        if (mant[mant.length-1] > 10) {
",4,2,1,2,5,0,0,0,0,8,31,4,0.04762,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,539,"    protected Dfp(final DfpField field, final byte sign, final byte nans) {
",8,0,0,1,3,4,0,2,0,14,71,2,0.04167,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,540,"        this.field = field;
",4,0,0,0,0,0,0,0,0,5,19,4,0.04167,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,541,"        this.mant    = new int[field.getRadixDigits()];
",2,0,0,2,4,0,4,0,0,7,47,4,0.04167,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,542,"        this.sign    = sign;
",4,0,0,0,0,0,0,0,0,5,20,4,0.04167,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,543,"        this.exp     = 0;
",2,0,0,0,0,0,0,0,0,3,17,4,0.04167,0
defect4j,math,org/apache/commons/math/dfp/Dfp,54,273,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.00000,1
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,473,"      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);
",48,9,0,1,2,1,0,2,0,59,101,5,0.33333,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,181,"    return x;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,189,"    return y;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,197,"    return z;
",2,0,0,0,0,1,0,0,0,2,9,4,0.02564,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,93,"  public Vector3D(double x, double y, double z) {
",8,0,0,1,3,1,0,0,0,9,47,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,94,"    this.x = x;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,95,"    this.y = y;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,96,"    this.z = z;
",4,0,0,0,0,0,0,0,0,5,11,4,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,97,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,35,"  public static final Vector3D ZERO   = new Vector3D(0, 0, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,38,"  public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,41,"  public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);
",2,0,0,1,2,3,0,4,0,10,62,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,44,"  public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);
",2,0,0,1,2,3,0,4,0,9,60,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,47,"  public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);
",2,0,0,1,2,3,0,4,0,10,62,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,50,"  public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);
",2,0,0,1,2,3,0,4,0,9,60,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,53,"  public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);
",2,0,0,1,2,3,0,4,0,10,62,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,57,"  public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);
",14,0,0,1,2,3,0,4,0,21,84,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,61,"  public static final Vector3D POSITIVE_INFINITY =
",2,0,0,0,0,3,0,2,0,7,48,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,65,"  public static final Vector3D NEGATIVE_INFINITY =
",2,0,0,0,0,3,0,2,0,7,48,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3D,55,69,"  private static final Vector3DFormat DEFAULT_FORMAT =
",2,0,0,0,0,3,0,2,0,7,52,2,0.01266,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,159,"        return getInstance(Locale.getDefault());
",0,0,0,2,4,1,6,0,0,6,40,5,0.01266,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,56,"        final NumberFormat nf = NumberFormat.getInstance(locale);
",2,0,0,1,2,1,6,2,0,11,57,4,0.01149,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,57,"        nf.setMaximumFractionDigits(2);
",0,0,0,1,2,0,4,0,0,4,31,5,0.01149,0
defect4j,math,org/apache/commons/math/util/CompositeFormat,55,58,"        return nf;
",2,0,0,0,0,1,0,0,0,2,10,4,0.01149,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,80,"        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_SEPARATOR, format);
",8,0,0,1,2,0,0,0,0,8,64,4,0.01149,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,81,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.01149,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,103,"                          final String separator, final NumberFormat format) {
",4,0,0,0,2,2,0,4,0,10,52,3,0.01149,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,104,"        this.prefix      = prefix;
",4,0,0,0,0,0,0,0,0,5,26,4,0.01149,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,105,"        this.suffix      = suffix;
",4,0,0,0,0,0,0,0,0,5,26,4,0.01149,0
defect4j,math,org/apache/commons/math/geometry/Vector3DFormat,55,106,"        this.separator   = separator;
",4,0,0,0,0,0,0,0,0,5,29,4,0.01149,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,85,"        Iterator() {
",2,0,0,1,3,0,0,0,0,2,12,3,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,75,"        private final int[] counter = new int[dimension];
",2,0,1,2,4,2,0,0,0,6,49,3,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,79,"        private int count = -1;
",2,0,0,0,0,1,0,0,0,4,23,3,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,86,"            counter[last] = -1;
",0,0,1,1,2,0,0,0,0,6,19,5,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,87,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,147,"            return counter[dim];
",0,0,1,1,2,1,0,0,0,4,20,6,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,196,"        return new Iterator();
",0,0,0,1,2,1,0,2,0,2,22,6,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,205,"        return dimension;
",2,0,0,0,0,1,0,0,0,2,17,4,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,217,"        if (index < 0 ||
",2,2,0,0,1,0,0,0,0,4,16,4,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,272,"        return count + c[last];
",2,1,1,1,2,1,0,0,0,7,23,4,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,46,"public class MultidimensionalCounter implements Iterable<Integer> {
",2,0,0,0,1,1,0,4,0,7,67,1,1.00000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,260,"        if (c.length != dimension) {
",6,1,0,1,3,0,0,0,0,7,28,4,0.50000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,263,"        int count = 0;
",2,0,0,0,0,0,0,0,0,2,14,5,0.50000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,264,"        for (int i = 0; i < dimension; i++) {
",8,1,0,1,3,0,0,0,0,10,37,4,0.50000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,265,"            final int index = c[i];
",2,0,1,1,2,1,0,0,0,7,23,6,0.50000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,266,"            if (index < 0 ||
",2,2,0,0,1,0,0,0,0,4,16,6,0.50000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,270,"            count += uniCounterOffset[i] * c[i];
",2,1,1,2,4,0,0,0,0,12,36,6,0.50000,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,44,"public final class MathUtils {
",2,0,0,0,1,2,0,0,0,4,30,1,0.25000,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,89,"    private static final long[] FACTORIALS = new long[] {
",2,0,0,2,5,3,0,0,0,5,53,2,0.25000,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2220,"         return copyOf(source, source.length);
",4,0,0,1,2,1,4,0,0,8,37,5,0.25000,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2243,"         final int[] output = new int[len];
",2,0,1,2,4,1,0,0,0,5,34,4,0.25000,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2244,"         System.arraycopy(source, 0, output, 0, FastMath.min(len, source.length));
",4,0,0,2,4,0,14,0,0,18,73,5,0.25000,0
defect4j,math,org/apache/commons/math/util/MathUtils,56,2245,"         return output;
",2,0,0,0,0,1,0,0,0,2,14,4,0.25000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,165,"    public MultidimensionalCounter(int ... size) {
",4,0,0,1,3,1,0,0,0,5,46,2,0.25000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,166,"        dimension = size.length;
",6,0,0,0,0,0,0,0,0,7,24,4,0.25000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,167,"        this.size = MathUtils.copyOf(size);
",2,0,0,1,2,0,6,0,0,9,35,4,0.25000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,169,"        uniCounterOffset = new int[dimension];
",2,0,1,1,2,0,0,0,0,5,38,4,0.25000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,171,"        last = dimension - 1;
",4,1,0,0,0,0,0,0,0,6,21,4,0.25000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,172,"        int tS = size[last];
",2,0,1,1,2,0,0,0,0,6,20,5,0.25000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,173,"        for (int i = 0; i < last; i++) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.25000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,174,"            int count = 1;
",2,0,0,0,0,0,0,0,0,2,14,7,0.25000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,175,"            for (int j = i + 1; j < dimension; j++) {
",10,2,0,1,3,0,0,0,0,13,41,6,0.25000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,176,"                count *= size[j];
",2,0,1,1,2,0,0,0,0,7,17,8,0.25000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,178,"            uniCounterOffset[i] = count;
",2,0,1,1,2,0,0,0,0,7,28,6,0.25000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,179,"            tS *= size[i];
",2,0,1,1,2,0,0,0,0,7,14,6,0.25000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,181,"        uniCounterOffset[last] = 0;
",0,0,1,1,2,0,0,0,0,5,27,4,0.25000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,183,"        if (tS <= 0) {
",2,1,0,1,3,0,0,0,0,3,14,4,0.25000,0
defect4j,math,org/apache/commons/math/util/MultidimensionalCounter,56,243,"        indices[last] = idx;
",2,0,1,1,2,0,0,0,0,7,20,4,0.00000,1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,69,"        this(random, EmptyClusterStrategy.LARGEST_VARIANCE);
",6,0,0,1,2,0,0,0,0,6,52,4,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,70,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,134,"        return clusters;
",2,0,0,0,0,1,0,0,0,2,16,4,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,175,"            int sum = 0;
",2,0,0,0,0,0,0,0,0,2,12,7,0.50000,1
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,176,"            for (int i = 0; i < pointSet.size(); i++) {
",6,1,0,2,5,0,4,0,0,12,43,6,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,177,"                final T p = pointSet.get(i);
",2,0,0,1,2,1,6,2,0,11,28,8,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,178,"                final Cluster<T> nearest = getNearestCluster(resultSet, p);
",2,0,0,1,2,1,6,4,0,13,59,8,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,179,"                final double d = p.distanceFrom(nearest.getCenter());
",2,0,0,2,4,1,8,0,0,11,53,8,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,180,"                sum += d * d;
",6,1,0,0,0,0,0,0,0,8,13,8,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,181,"                dx2[i] = sum;
",2,0,1,1,2,0,0,0,0,7,13,8,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,186,"            final double r = random.nextDouble() * sum;
",4,1,0,1,2,1,4,0,0,10,43,6,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,187,"            for (int i = 0 ; i < dx2.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,6,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,188,"                if (dx2[i] >= r) {
",2,1,1,2,5,0,0,0,0,7,18,8,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,189,"                    final T p = pointSet.remove(i);
",2,0,0,1,2,1,6,2,0,11,31,10,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,190,"                    resultSet.add(new Cluster<T>(p));
",2,0,0,2,4,0,4,4,0,10,33,11,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,191,"                    break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.50000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,57,194,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,44,"public final class MathUtils {
",2,0,0,0,1,2,0,0,0,4,30,1,0.33333,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,89,"    private static final long[] FACTORIALS = new long[] {
",2,0,0,2,5,3,0,0,0,5,53,2,0.33333,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1873,"      double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.33333,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1874,"      for (int i = 0; i < p1.length; i++) {
",10,1,0,1,3,0,0,0,0,12,37,4,0.33333,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1875,"          final double dp = p1[i] - p2[i];
",2,1,1,2,4,1,0,0,0,12,32,6,0.33333,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1876,"          sum += dp * dp;
",6,1,0,0,0,0,0,0,0,8,15,6,0.33333,0
defect4j,math,org/apache/commons/math/util/MathUtils,57,1878,"      return FastMath.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,26,5,0.33333,0
defect4j,math,org/apache/commons/math/util/FastMath,57,55,"    private static final double EXP_INT_TABLE_A[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,0.33333,0
defect4j,math,org/apache/commons/math/util/FastMath,57,60,"    private static final double EXP_INT_TABLE_B[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,0.33333,0
defect4j,math,org/apache/commons/math/util/FastMath,57,65,"    private static final double EXP_FRAC_TABLE_A[] = new double[1025];
",2,0,0,2,4,3,0,0,0,5,66,2,0.33333,0
defect4j,math,org/apache/commons/math/util/FastMath,57,70,"    private static final double EXP_FRAC_TABLE_B[] = new double[1025];
",2,0,0,2,4,3,0,0,0,5,66,2,0.33333,0
defect4j,math,org/apache/commons/math/util/FastMath,57,73,"    private static final double FACT[] = new double[20];
",2,0,0,2,4,3,0,0,0,5,52,2,0.33333,0
defect4j,math,org/apache/commons/math/util/FastMath,57,76,"    private static final double LN_MANT[][] = new double[1024][];
",2,0,0,4,8,3,0,0,0,5,61,2,0.33333,0
defect4j,math,org/apache/commons/math/util/FastMath,57,85,"    private static final double LN_SPLIT_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,0.33333,0
defect4j,math,org/apache/commons/math/util/FastMath,57,105,"    private static final double LN_QUICK_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,0.33333,0
defect4j,math,org/apache/commons/math/util/FastMath,57,118,"    private static final double LN_HI_PREC_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,51,2,0.33333,0
defect4j,math,org/apache/commons/math/util/FastMath,57,128,"    private static final double SINE_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,60,2,0.33333,0
defect4j,math,org/apache/commons/math/util/FastMath,57,131,"    private static final double SINE_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,60,2,0.33333,0
defect4j,math,org/apache/commons/math/util/FastMath,57,134,"    private static final double COSINE_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,62,2,0.33333,0
defect4j,math,org/apache/commons/math/util/FastMath,57,137,"    private static final double COSINE_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,62,2,0.33333,0
defect4j,math,org/apache/commons/math/util/FastMath,57,140,"    private static final double TANGENT_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,63,2,0.33333,0
defect4j,math,org/apache/commons/math/util/FastMath,57,143,"    private static final double TANGENT_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,63,2,0.33333,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,182,"            } catch (OutOfRangeException e) {
",2,0,0,1,4,0,0,2,0,4,33,7,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,183,"                fwhmApprox = points[points.length - 1].getX() - points[0].getX();
",6,2,1,4,8,0,4,0,0,17,65,8,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,271,"            double minY = Double.POSITIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,39,6,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,272,"            double maxY = Double.NEGATIVE_INFINITY;
",6,0,0,0,0,0,0,0,0,6,39,6,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,273,"            for (final WeightedObservedPoint point : points) {
",4,0,0,1,3,1,0,2,0,7,50,5,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,274,"                minY = Math.min(minY, point.getY());
",2,0,0,2,4,0,10,0,0,13,36,7,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,275,"                maxY = Math.max(maxY, point.getY());
",2,0,0,2,4,0,10,0,0,13,36,7,0.50000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,277,"            throw new OutOfRangeException(y, minY, maxY);
",6,0,0,1,2,0,0,2,0,8,45,6,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,52,"        this(null, wrong, min, boundIsAllowed);
",6,0,0,1,2,0,0,0,0,6,39,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,53,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,67,"        super(specific,
",2,0,0,0,1,0,0,0,0,2,15,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,73,"        this.min = min;
",4,0,0,0,0,0,0,0,0,5,15,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,74,"        this.boundIsAllowed = boundIsAllowed;
",4,0,0,0,0,0,0,0,0,5,37,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/NumberIsTooSmallException,58,75,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,46,"        this(null, wrong, lo, hi);
",6,0,0,1,2,0,0,0,0,6,26,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,62,"        super(specific, LocalizedFormats.OUT_OF_RANGE_SIMPLE,
",6,0,0,0,1,0,0,0,0,6,53,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,64,"        this.lo = lo;
",4,0,0,0,0,0,0,0,0,5,13,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,65,"        this.hi = hi;
",4,0,0,0,0,0,0,0,0,5,13,4,0.50000,0
defect4j,math,org/apache/commons/math/exception/OutOfRangeException,58,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,44,"        super(null, specific, general, args);
",6,0,0,1,2,0,0,0,0,7,37,3,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,58,45,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,65,"        super(cause);
",2,0,0,1,2,0,0,0,0,2,13,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,66,"        this.specific = specific;
",4,0,0,0,0,0,0,0,0,5,25,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,67,"        this.general = general;
",4,0,0,0,0,0,0,0,0,5,23,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,68,"        this.arguments = ArgUtils.flatten(arguments);
",2,0,0,1,2,0,6,0,0,9,45,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathRuntimeException,58,69,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,50,"        super(specific, general, wrong, arguments);
",8,0,0,1,2,0,0,0,0,8,43,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,51,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,58,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,340,"    private LocalizedFormats(final String sourceFormat) {
",4,0,0,1,3,2,0,2,0,8,53,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,341,"        this.sourceFormat = sourceFormat;
",4,0,0,0,0,0,0,0,0,5,33,4,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,342,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),
",2,0,0,5,10,0,0,0,0,3,67,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),
",2,0,0,4,8,0,0,0,0,3,94,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),
",2,0,0,1,2,0,0,0,0,3,41,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),
",2,0,0,1,2,0,0,0,0,3,95,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),
",2,0,0,1,2,0,0,0,0,3,60,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),
",2,0,0,1,2,0,0,0,0,3,54,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,50,"    BANDWIDTH(""bandwidth ({0})""),
",2,0,0,3,6,0,0,0,0,3,29,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n, k), got k = {0}, n = {1}""),
",2,0,0,4,8,0,0,0,0,3,108,2,0.25000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,58,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n, k), got n = {0}""),
",2,0,0,3,6,0,0,0,0,3,93,2,0.25000,0
defect4j,math,org/apache/commons/math/optimization/fitting/GaussianFitter,58,121,"        return fit(new Gaussian.Parametric(), guess);
",4,0,0,2,4,1,4,0,0,8,45,5,0.20000,1
defect4j,math,org/apache/commons/math/dfp/DfpField,59,174,"        this(decimalDigits, true);
",2,0,0,1,2,0,0,0,0,3,26,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,175,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,188,"    private DfpField(final int decimalDigits, final boolean computeConstants) {
",6,0,0,1,3,3,0,0,0,9,75,2,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,190,"        this.radixDigits = (decimalDigits < 13) ? 4 : (decimalDigits + 3) / 4;
",6,3,0,2,4,0,0,0,0,10,70,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,191,"        this.rMode       = RoundingMode.ROUND_HALF_EVEN;
",6,0,0,0,0,0,0,0,0,7,48,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,192,"        this.ieeeFlags   = 0;
",2,0,0,0,0,0,0,0,0,3,21,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,193,"        this.zero        = new Dfp(this, 0);
",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,194,"        this.one         = new Dfp(this, 1);
",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,195,"        this.two         = new Dfp(this, 2);
",2,0,0,1,2,0,0,2,0,5,36,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,197,"        if (computeConstants) {
",2,0,0,1,3,0,0,0,0,2,23,4,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,199,"            synchronized (DfpField.class) {
",0,0,0,1,3,0,0,2,0,2,31,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,205,"                computeStringConstants((decimalDigits < 67) ? 200 : (3 * decimalDigits));
",4,2,0,3,6,0,2,0,0,8,73,9,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,208,"                sqr2           = new Dfp(this, sqr2String);
",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,209,"                sqr2Split      = split(sqr2String);
",2,0,0,1,2,0,4,0,0,7,35,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,210,"                sqr2Reciprocal = new Dfp(this, sqr2ReciprocalString);
",4,0,0,1,2,0,0,2,0,7,53,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,211,"                sqr3           = new Dfp(this, sqr3String);
",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,212,"                sqr3Reciprocal = new Dfp(this, sqr3ReciprocalString);
",4,0,0,1,2,0,0,2,0,7,53,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,213,"                pi             = new Dfp(this, piString);
",4,0,0,1,2,0,0,2,0,7,41,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,214,"                piSplit        = split(piString);
",2,0,0,1,2,0,4,0,0,7,33,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,215,"                e              = new Dfp(this, eString);
",4,0,0,1,2,0,0,2,0,7,40,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,216,"                eSplit         = split(eString);
",2,0,0,1,2,0,4,0,0,7,32,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,217,"                ln2            = new Dfp(this, ln2String);
",4,0,0,1,2,0,0,2,0,7,42,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,218,"                ln2Split       = split(ln2String);
",2,0,0,1,2,0,4,0,0,7,34,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,219,"                ln5            = new Dfp(this, ln5String);
",4,0,0,1,2,0,0,2,0,7,42,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,220,"                ln5Split       = split(ln5String);
",2,0,0,1,2,0,4,0,0,7,34,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,221,"                ln10           = new Dfp(this, ln10String);
",4,0,0,1,2,0,0,2,0,7,43,8,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,223,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,226,"            sqr2           = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,227,"            sqr2Split      = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,228,"            sqr2Reciprocal = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,229,"            sqr3           = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,230,"            sqr3Reciprocal = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,231,"            pi             = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,232,"            piSplit        = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,233,"            e              = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,234,"            eSplit         = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,235,"            ln2            = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,236,"            ln2Split       = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,237,"            ln5            = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,238,"            ln5Split       = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,239,"            ln10           = null;
",2,0,0,0,0,0,0,0,0,3,22,6,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,242,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.03571,0
defect4j,math,org/apache/commons/math/dfp/DfpField,59,248,"        return radixDigits;
",2,0,0,0,0,1,0,0,0,2,19,4,0.03571,0
defect4j,math,org/apache/commons/math/util/FastMath,59,3482,"        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
",16,2,0,3,6,1,4,0,0,22,59,5,0.00000,1
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,149,"                double scaleFactor = 1d;
",2,0,0,0,0,0,0,0,0,2,24,9,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,150,"                double lastScaleFactor = 1d;
",2,0,0,0,0,0,0,0,0,2,28,9,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,151,"                final int maxPower = 5;
",2,0,0,0,0,1,0,0,0,3,23,8,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,152,"                final double scale = FastMath.max(a,b);
",2,0,0,1,2,1,8,0,0,11,39,8,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,153,"                if (scale <= 0) {  // Can't scale
",2,1,0,1,3,0,0,0,0,3,33,8,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,158,"                infinite = true;
",2,0,0,0,0,0,0,0,0,4,16,8,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,159,"                for (int i = 0; i < maxPower; i++) {
",8,1,0,1,3,0,0,0,0,10,36,8,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,160,"                    lastScaleFactor = scaleFactor;
",4,0,0,0,0,0,0,0,0,5,30,10,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,161,"                    scaleFactor *= scale;
",4,0,0,0,0,0,0,0,0,5,21,10,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,162,"                    if (a != 0.0 && a > b) {
",6,3,0,1,3,0,0,0,0,9,24,10,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,169,"                    infinite = Double.isInfinite(p2) || Double.isInfinite(q2);
",2,1,0,2,4,0,12,0,0,16,58,10,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,170,"                    if (!infinite) {
",2,0,0,1,3,0,0,0,0,3,16,10,0.50000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,171,"                        break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.50000,0
defect4j,math,org/apache/commons/math/util/FastMath,60,644,"                if (hiPrec != null) {
",2,1,0,1,3,0,0,0,0,3,21,8,0.25000,0
defect4j,math,org/apache/commons/math/util/FastMath,60,648,"                return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.25000,0
defect4j,math,org/apache/commons/math/special/Gamma,60,169,"            ret = 0.0;
",2,0,0,0,0,0,0,0,0,3,10,7,0.25000,0
defect4j,math,org/apache/commons/math/util/FastMath,60,3491,"        return (a <= b) ? b : (Double.isNaN(a + b) ? Double.NaN : a);
",16,2,0,3,6,1,4,0,0,22,61,5,0.16667,0
defect4j,math,org/apache/commons/math/special/Gamma,60,173,"            ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);
",2,1,0,1,2,0,10,0,0,14,60,8,0.16667,0
defect4j,math,org/apache/commons/math/special/Erf,60,53,"            ret = -ret;
",4,0,0,0,0,0,0,0,0,6,11,6,0.16667,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,125,"        final double dev = x - mean;
",6,1,0,0,0,1,0,0,0,8,28,4,0.14286,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,60,127,"        return 0.5 * (1.0 + Erf.erf((dev) /
",2,3,0,1,4,1,4,0,0,9,35,6,0.14286,0
defect4j,math,org/apache/commons/math/special/Erf,60,51,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);
",6,1,0,1,2,0,4,0,0,11,65,5,0.14286,0
defect4j,math,org/apache/commons/math/special/Erf,60,52,"        if (x < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.14286,0
defect4j,math,org/apache/commons/math/special/Erf,60,55,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.14286,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,47,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.07692,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07692,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,129,"        double p0 = 1.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.07692,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,130,"        double p1 = getA(0, x);
",2,0,0,1,2,0,4,0,0,6,23,5,0.07692,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,131,"        double q0 = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.07692,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,132,"        double q1 = 1.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.07692,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,60,133,"        double c = p1 / q1;
",6,1,0,0,0,0,0,0,0,7,19,5,0.07692,0
defect4j,math,org/apache/commons/math/MathRuntimeException,61,387,"        return new IllegalArgumentException() {
",0,0,0,1,3,1,0,2,0,2,39,6,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,316,"    private LocalizedFormats(final String sourceFormat) {
",4,0,0,1,3,2,0,2,0,8,53,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,317,"        this.sourceFormat = sourceFormat;
",4,0,0,0,0,0,0,0,0,5,33,4,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,318,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,44,"    ARGUMENT_OUTSIDE_DOMAIN(""Argument {0} outside domain [{1} ; {2}]""),
",2,0,0,5,10,0,0,0,0,3,67,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,45,"    ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1(""array sizes should have difference 1 ({0} != {1} + 1)""),
",2,0,0,4,8,0,0,0,0,3,94,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,46,"    ARRAY_SUMS_TO_ZERO(""array sums to zero""),
",2,0,0,1,2,0,0,0,0,3,41,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,47,"    ASSYMETRIC_EIGEN_NOT_SUPPORTED(""eigen decomposition of assymetric matrices not supported yet""),
",2,0,0,1,2,0,0,0,0,3,95,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,48,"    AT_LEAST_ONE_COLUMN(""matrix must have at least one column""),
",2,0,0,1,2,0,0,0,0,3,60,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,49,"    AT_LEAST_ONE_ROW(""matrix must have at least one row""),
",2,0,0,1,2,0,0,0,0,3,54,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,50,"    BANDWIDTH_OUT_OF_INTERVAL(""bandwidth must be in the interval [0,1], but got {0}""),
",2,0,0,3,6,0,0,0,0,3,82,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,51,"    BINOMIAL_INVALID_PARAMETERS_ORDER(""must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}""),
",2,0,0,4,8,0,0,0,0,3,107,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,52,"    BINOMIAL_NEGATIVE_PARAMETER(""must have n >= 0 for binomial coefficient (n,k), got n = {0}""),
",2,0,0,3,6,0,0,0,0,3,92,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,53,"    CANNOT_CLEAR_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be cleared""),
",2,0,0,1,2,0,0,0,0,3,123,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,54,"    CANNOT_COMPUTE_0TH_ROOT_OF_UNITY(""cannot compute 0-th root of unity, indefinite result""),
",2,0,0,1,2,0,0,0,0,3,89,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,55,"    CANNOT_COMPUTE_BETA_DENSITY_AT_0_FOR_SOME_ALPHA(""cannot compute beta density at 0 when alpha = {0,number}""),
",2,0,0,2,4,0,0,0,0,3,108,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,56,"    CANNOT_COMPUTE_BETA_DENSITY_AT_1_FOR_SOME_BETA(""cannot compute beta density at 1 when beta = %.3g""),
",2,0,0,1,2,0,0,0,0,3,100,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,57,"    CANNOT_COMPUTE_NTH_ROOT_FOR_NEGATIVE_N(""cannot compute nth root for null or negative n: {0}""),
",2,0,0,2,4,0,0,0,0,3,94,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,58,"    CANNOT_CONVERT_OBJECT_TO_FRACTION(""cannot convert given object to a fraction number: {0}""),
",2,0,0,2,4,0,0,0,0,3,91,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,59,"    CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(""cannot discard a negative number of elements ({0})""),
",2,0,0,3,6,0,0,0,0,3,97,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,60,"    CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR(""cannot format a {0} instance as a 3D vector""),
",2,0,0,2,4,0,0,0,0,3,83,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,61,"    CANNOT_FORMAT_INSTANCE_AS_COMPLEX(""cannot format a {0} instance as a complex number""),
",2,0,0,2,4,0,0,0,0,3,86,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,62,"    CANNOT_FORMAT_INSTANCE_AS_REAL_VECTOR(""cannot format a {0} instance as a real vector""),
",2,0,0,2,4,0,0,0,0,3,87,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,63,"    CANNOT_FORMAT_OBJECT_TO_FRACTION(""cannot format given object as a fraction number""),
",2,0,0,1,2,0,0,0,0,3,84,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,64,"    CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS(""statistics constructed from external moments cannot be incremented""),
",2,0,0,1,2,0,0,0,0,3,131,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,65,"    CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(""cannot normalize a zero norm vector""),
",2,0,0,1,2,0,0,0,0,3,75,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,66,"    CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(""elements cannot be retrieved from a negative array index {0}""),
",2,0,0,2,4,0,0,0,0,3,98,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,67,"    CANNOT_SET_AT_NEGATIVE_INDEX(""cannot set an element at a negative index {0}""),
",2,0,0,2,4,0,0,0,0,3,78,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,68,"    CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(""cannot substitute an element from an empty array""),
",2,0,0,1,2,0,0,0,0,3,95,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,69,"    CANNOT_TRANSFORM_TO_DOUBLE(""Conversion Exception in Transformation: {0}""),
",2,0,0,2,4,0,0,0,0,3,74,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,70,"    CARDAN_ANGLES_SINGULARITY(""Cardan angles singularity""),
",2,0,0,1,2,0,0,0,0,3,55,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,71,"    CLASS_DOESNT_IMPLEMENT_COMPARABLE(""class ({0}) does not implement Comparable""),
",2,0,0,3,6,0,0,0,0,3,79,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,72,"    CLOSEST_ORTHOGONAL_MATRIX_HAS_NEGATIVE_DETERMINANT(""the closest orthogonal matrix has a negative determinant {0}""),
",2,0,0,2,4,0,0,0,0,3,115,2,1.00000,0
defect4j,math,org/apache/commons/math/exception/util/LocalizedFormats,61,73,"    COLUMN_INDEX_OUT_OF_RANGE(""column index {0} out of allowed range [{1}, {2}]""),
",2,0,0,5,10,0,0,0,0,3,78,2,1.00000,0
defect4j,math,org/apache/commons/math/distribution/PoissonDistributionImpl,61,94,"            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);
",4,0,0,1,2,0,6,0,0,10,105,7,0.00000,1
defect4j,math,org/apache/commons/math/util/FastMath,62,35,"    private static final double EXP_INT_TABLE_A[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,40,"    private static final double EXP_INT_TABLE_B[] = new double[1500];
",2,0,0,2,4,3,0,0,0,5,65,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,45,"    private static final double EXP_FRAC_TABLE_A[] = new double[1025];
",2,0,0,2,4,3,0,0,0,5,66,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,50,"    private static final double EXP_FRAC_TABLE_B[] = new double[1025];
",2,0,0,2,4,3,0,0,0,5,66,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,53,"    private static final double FACT[] = new double[20];
",2,0,0,2,4,3,0,0,0,5,52,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,56,"    private static final double LN_MANT[][] = new double[1024][];
",2,0,0,4,8,3,0,0,0,5,61,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,65,"    private static final double LN_SPLIT_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,85,"    private static final double LN_QUICK_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,49,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,98,"    private static final double LN_HI_PREC_COEF[][] = {
",2,0,0,2,5,3,0,0,0,5,51,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,108,"    private static final double SINE_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,60,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,111,"    private static final double SINE_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,60,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,114,"    private static final double COSINE_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,62,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,117,"    private static final double COSINE_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,62,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,120,"    private static final double TANGENT_TABLE_A[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,63,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,123,"    private static final double TANGENT_TABLE_B[] = new double[14];
",2,0,0,2,4,3,0,0,0,5,63,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,126,"    private static long RECIP_2PI[] = new long[] {
",2,0,0,2,5,2,0,0,0,4,46,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,147,"    private static long PI_O_4_BITS[] = new long[] {
",2,0,0,2,5,2,0,0,0,4,48,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,155,"    private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};
",2,0,0,2,4,3,0,0,0,5,127,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,158,"    private static final double CBRTTWO[] = { 0.6299605249474366,
",2,0,0,1,3,3,0,0,0,5,61,2,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,169,"        FACT[0] = 1.0;
",0,0,1,1,2,0,0,0,0,3,14,4,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,170,"        for (i = 1; i < 20; i++) {
",6,1,0,1,3,0,0,0,0,9,26,4,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,171,"            FACT[i] = FACT[i-1] * i;
",4,2,1,2,4,0,0,0,0,13,24,6,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,174,"        double tmp[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,29,5,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,175,"        double recip[] = new double[2];
",2,0,0,2,4,0,0,0,0,2,31,5,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,178,"        for (i = 0; i < 750; i++) {
",6,1,0,1,3,0,0,0,0,9,27,4,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,179,"            expint(i, tmp);
",0,0,0,1,2,0,6,0,0,6,15,7,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,180,"            EXP_INT_TABLE_A[i+750] = tmp[0];
",2,1,1,2,4,0,0,0,0,8,32,6,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,181,"            EXP_INT_TABLE_B[i+750] = tmp[1];
",2,1,1,2,4,0,0,0,0,8,32,6,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,183,"            if (i != 0) {
",2,1,0,1,3,0,0,0,0,3,13,6,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,185,"                splitReciprocal(tmp, recip);
",0,0,0,1,2,0,6,0,0,6,28,9,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,186,"                EXP_INT_TABLE_A[750-i] = recip[0];
",2,1,1,2,4,0,0,0,0,8,34,8,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,187,"                EXP_INT_TABLE_B[750-i] = recip[1];
",2,1,1,2,4,0,0,0,0,8,34,8,1.00000,0
defect4j,math,org/apache/commons/math/util/FastMath,62,192,"        for (i = 0; i < 1025; i++) {
",6,1,0,1,3,0,0,0,0,9,28,4,1.00000,0
defect4j,math,org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer,62,162,"                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));
",0,0,1,4,8,0,24,0,0,29,100,8,1.00000,1
defect4j,math,org/apache/commons/math/util/MathUtils,63,33,"public final class MathUtils {
",2,0,0,0,1,2,0,0,0,4,30,1,0.00228,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,75,"    private static final long[] FACTORIALS = new long[] {
",2,0,0,2,5,3,0,0,0,5,53,2,0.00228,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,63,"        this(wrong, previous, index, MathUtils.OrderDirection.INCREASING, true);
",12,0,0,1,2,0,0,0,0,13,72,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,64,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,82,"        super(direction == MathUtils.OrderDirection.INCREASING ?
",8,1,0,0,1,0,0,0,0,9,56,5,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,91,"        this.direction = direction;
",4,0,0,0,0,0,0,0,0,5,27,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,92,"        this.strict = strict;
",4,0,0,0,0,0,0,0,0,5,21,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,93,"        this.index = index;
",4,0,0,0,0,0,0,0,0,5,19,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,94,"        this.previous = previous;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,95,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,101,"        return direction;
",2,0,0,0,0,1,0,0,0,2,17,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,107,"        return strict;
",2,0,0,0,0,1,0,0,0,2,14,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,115,"        return index;
",2,0,0,0,0,1,0,0,0,2,13,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/NonMonotonousSequenceException,63,121,"        return previous;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,50,"        super(specific, general, wrong, arguments);
",8,0,0,1,2,0,0,0,0,8,43,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,51,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,52,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,64,"        super(general, wrong, arguments);
",6,0,0,1,2,0,0,0,0,6,33,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,65,"        argument = wrong;
",4,0,0,0,0,0,0,0,0,5,17,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,66,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalNumberException,63,72,"        return argument;
",2,0,0,0,0,1,0,0,0,2,16,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,61,"                                           Object ... args) {
",2,0,0,0,2,0,0,2,0,4,18,3,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,62,"        this.specific = specific;
",4,0,0,0,0,0,0,0,0,5,25,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,63,"        this.general = general;
",4,0,0,0,0,0,0,0,0,5,23,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,64,"        arguments = ArgUtils.flatten(args);
",2,0,0,1,2,0,6,0,0,9,35,4,0.00000,0
defect4j,math,org/apache/commons/math/exception/MathIllegalArgumentException,63,65,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,63,417,"        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
",4,3,0,3,6,1,12,0,0,19,54,4,0.00000,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,402,"                            tmp = 0.1;
",2,0,0,0,0,0,0,0,0,3,10,12,0.28571,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,627,"            } else if (fp < 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.25000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,628,"                paru = Math.min(paru, lmPar);
",2,0,0,1,2,0,8,0,0,11,29,9,0.25000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,605,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.21053,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,606,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.21053,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,607,"                work1[pj] = work3[pj] * diag[pj] / dxNorm;
",2,2,1,3,6,0,0,0,0,17,42,8,0.21053,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,609,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.21053,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,610,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.21053,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,64,611,"                work1[pj] /= work2[j];
",0,0,1,2,4,0,0,0,0,9,22,8,0.21053,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,275,"        updateJacobian();
",0,0,0,1,2,0,2,0,0,2,17,5,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,278,"        double[][] jTj = new double[cols][cols];
",2,0,1,4,8,0,0,0,0,6,40,5,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,279,"        for (int i = 0; i < cols; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,280,"            for (int j = i; j < cols; ++j) {
",10,1,0,1,3,0,0,0,0,12,32,6,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,281,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,282,"                for (int k = 0; k < rows; ++k) {
",8,1,0,1,3,0,0,0,0,10,32,8,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,283,"                    sum += jacobian[k][i] * jacobian[k][j];
",2,1,1,4,8,0,0,0,0,16,39,10,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,285,"                jTj[i][j] = sum;
",2,0,1,2,4,0,0,0,0,9,16,8,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,286,"                jTj[j][i] = sum;
",2,0,1,2,4,0,0,0,0,9,16,8,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,292,"            RealMatrix inverse =
",2,0,0,0,0,0,0,2,0,4,20,6,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,312,"        if (rows <= cols) {
",4,1,0,1,3,0,0,0,0,5,19,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,44,"    protected AbstractRealMatrix() {
",2,0,0,1,3,1,0,0,0,3,32,2,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,45,"        lu = null;
",2,0,0,0,0,0,0,0,0,3,10,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,65,46,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,77,"        super(rowDimension, columnDimension);
",4,0,0,1,2,0,0,0,0,4,37,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,78,"        data = new double[rowDimension][columnDimension];
",2,0,1,2,4,0,0,0,0,7,49,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,79,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,95,"        throws IllegalArgumentException, NullPointerException {
",4,0,0,0,1,0,0,0,0,4,55,2,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,96,"        copyIn(d);
",0,0,0,1,2,0,4,0,0,4,10,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,97,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,298,"        return copyOut();
",0,0,0,1,2,1,2,0,0,2,17,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,316,"        if (data == null) {
",2,1,0,1,3,0,0,0,0,3,19,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,317,"            if (row > 0) {
",2,1,0,1,3,0,0,0,0,3,14,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,321,"            if (column > 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,325,"            final int nRows = subMatrix.length;
",6,0,0,0,0,1,0,0,0,7,35,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,326,"            if (nRows == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,331,"            final int nCols = subMatrix[0].length;
",4,0,1,1,2,1,0,0,0,7,38,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,332,"            if (nCols == 0) {
",2,1,0,1,3,0,0,0,0,3,17,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,336,"            data = new double[subMatrix.length][nCols];
",6,0,1,2,4,0,0,0,0,9,43,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,337,"            for (int i = 0; i < data.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,39,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,338,"                if (subMatrix[i].length != nCols) {
",4,1,1,2,5,0,0,0,0,9,35,8,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,342,"                System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols);
",4,1,1,3,6,0,8,0,0,19,64,9,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,344,"        } else {
",0,0,0,0,2,0,0,0,0,0,8,3,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,348,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,367,"            data[row][column] = value;
",2,0,1,2,4,0,0,0,0,9,26,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,371,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,372,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,401,"        return (data == null) ? 0 : data.length;
",6,1,0,1,2,1,0,0,0,7,40,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,407,"        return ((data == null) || (data[0] == null)) ? 0 : data[0].length;
",4,3,1,5,10,1,0,0,0,11,66,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,597,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,598,"        final double[][] out = new double[nRows][this.getColumnDimension()];
",2,0,1,5,10,1,2,0,0,7,68,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,600,"        for (int i = 0; i < nRows; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,601,"            System.arraycopy(data[i], 0, out[i], 0, data[i].length);
",2,0,1,4,8,0,4,0,0,18,56,7,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,603,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,617,"        setSubMatrix(in, 0, 0);
",0,0,0,1,2,0,4,0,0,4,23,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,65,618,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,361,"            final int m = pivot.length;
",6,0,0,0,0,1,0,0,0,7,27,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,362,"            if (b.getRowDimension() != m) {
",2,1,0,2,5,0,4,0,0,7,31,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,367,"            if (singular) {
",2,0,0,1,3,0,0,0,0,2,15,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/LUDecompositionImpl,65,417,"            return solve(MatrixUtils.createRealIdentityMatrix(pivot.length));
",4,0,0,2,4,1,6,0,0,10,65,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,62,"        return (rows * columns <= 4096) ?
",4,2,0,1,2,1,0,0,0,6,33,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,107,"        return (data.length * data[0].length <= 4096) ?
",6,2,1,2,4,1,0,0,0,10,47,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,143,"        final RealMatrix m = createRealMatrix(dimension, dimension);
",2,0,0,1,2,1,6,2,0,11,60,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,144,"        for (int i = 0; i < dimension; ++i) {
",8,1,0,1,3,0,0,0,0,10,37,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,65,145,"            m.setEntry(i, i, 1.0);
",0,0,0,1,2,0,8,0,0,8,22,7,1.00000,0
defect4j,math,org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer,65,258,"            chiSquare += residual * residual / residualsWeights[i];
",6,2,1,1,2,0,0,0,0,13,55,6,0.00000,1
defect4j,math,org/apache/commons/math/optimization/univariate/AbstractUnivariateRealOptimizer,66,152,"        return evaluations;
",2,0,0,0,0,1,0,0,0,2,19,4,1,0
defect4j,math,org/apache/commons/math/ConvergingAlgorithmImpl,66,82,"        return iterationCount;
",2,0,0,0,0,1,0,0,0,2,22,4,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,107,"            a = lo;
",4,0,0,0,0,0,0,0,0,5,7,6,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,108,"            b = hi;
",4,0,0,0,0,0,0,0,0,5,7,6,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,158,"                        d = p / q;
",6,1,0,0,0,0,0,0,0,8,10,12,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,159,"                        u = x + d;
",6,1,0,0,0,0,0,0,0,8,10,12,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,162,"                        if (u - a < tol2
",6,2,0,0,1,0,0,0,0,8,16,13,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,175,"                            e = a - x;
",6,1,0,0,0,0,0,0,0,8,10,14,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,182,"                        e = b - x;
",6,1,0,0,0,0,0,0,0,8,10,12,1,0
defect4j,math,org/apache/commons/math/optimization/GoalType,66,27,"public enum GoalType implements Serializable {
",2,0,0,0,1,1,0,2,0,5,46,1,1,0
defect4j,math,org/apache/commons/math/optimization/GoalType,66,30,"    MAXIMIZE,
",2,0,0,0,0,0,0,0,0,2,9,2,1,0
defect4j,math,org/apache/commons/math/optimization/GoalType,66,33,"    MINIMIZE
",2,0,0,0,0,0,0,0,0,2,8,2,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,43,"    public BrentOptimizer() {
",2,0,0,1,3,1,0,0,0,3,25,2,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,44,"        setMaxEvaluations(Integer.MAX_VALUE);
",4,0,0,1,2,0,2,0,0,6,37,5,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,45,"        setMaximalIterationCount(100);
",0,0,0,1,2,0,2,0,0,2,30,5,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,46,"        setAbsoluteAccuracy(1E-10);
",0,0,0,1,2,0,2,0,0,2,27,5,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,47,"        setRelativeAccuracy(1.0e-14);
",0,0,0,1,2,0,2,0,0,2,29,5,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,38,"    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));
",2,2,0,2,4,3,4,0,0,11,70,2,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,60,"        clearResult();
",0,0,0,1,2,0,2,0,0,2,14,5,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,61,"        return localMin(getGoalType() == GoalType.MINIMIZE,
",4,1,0,1,3,1,4,0,0,9,51,5,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,99,"        if (eps <= 0) {
",2,1,0,1,3,0,0,0,0,3,15,4,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,102,"        if (t <= 0) {
",2,1,0,1,3,0,0,0,0,3,13,4,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,106,"        if (lo < hi) {
",4,1,0,1,3,0,0,0,0,5,14,4,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,114,"        double x = mid;
",4,0,0,0,0,0,0,0,0,4,15,5,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,115,"        double v = x;
",4,0,0,0,0,0,0,0,0,4,13,5,1,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,66,243,"        throw new MaxIterationsExceededException(maximalIterationCount);
",2,0,0,1,2,0,0,2,0,4,64,5,0.00000,1
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,43,"        super(100, 1E-10);
",0,0,0,1,2,0,0,0,0,0,18,3,1.00000,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,44,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,37,"    private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));
",2,2,0,2,4,3,4,0,0,11,70,2,1.00000,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,57,"        clearResult();
",0,0,0,1,2,0,2,0,0,2,14,5,1.00000,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,58,"        return localMin(f, goalType, min, max, relativeAccuracy, absoluteAccuracy);
",0,0,0,1,2,1,14,0,0,14,75,5,1.00000,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,88,"        double x = a + GOLDEN_SECTION * (b - a);
",10,3,0,1,2,0,0,0,0,13,40,5,1.00000,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,89,"        double v = x;
",4,0,0,0,0,0,0,0,0,4,13,5,1.00000,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,90,"        double w = x;
",4,0,0,0,0,0,0,0,0,4,13,5,1.00000,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,91,"        double e = 0;
",2,0,0,0,0,0,0,0,0,2,13,5,1.00000,0
defect4j,math,org/apache/commons/math/optimization/univariate/BrentOptimizer,67,92,"        double fx = computeObjectiveValue(f, x);
",2,0,0,1,2,0,6,0,0,8,40,5,1.00000,0
defect4j,math,org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer,67,97,"        return optimizer.getResult();
",0,0,0,1,2,1,4,0,0,4,29,5,0.00000,1
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,381,"                            tmp = 0.1;
",2,0,0,0,0,0,0,0,0,3,10,12,0.28571,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,607,"            } else if (fp < 0) {
",2,1,0,1,4,0,0,0,0,3,20,7,0.28571,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,608,"                paru = Math.min(paru, lmPar);
",2,0,0,1,2,0,8,0,0,11,29,9,0.28571,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,510,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.25000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,511,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.25000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,512,"                work1[pj] *= diag[pj] / dxNorm;
",2,1,1,2,4,0,0,0,0,12,31,8,0.25000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,514,"            sum2 = 0;
",2,0,0,0,0,0,0,0,0,3,9,6,0.25000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,515,"            for (int j = 0; j < solvedCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,38,6,0.25000,0
defect4j,math,org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer,68,516,"                int pj = permutation[j];
",2,0,1,1,2,0,0,0,0,6,24,9,0.25000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,161,"        TDistribution tDistribution = new TDistributionImpl(nObs - 2);
",4,1,0,1,2,0,0,4,0,9,62,4,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,162,"        int nVars = correlationMatrix.getColumnDimension();
",2,0,0,1,2,0,4,0,0,6,51,5,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,163,"        double[][] out = new double[nVars][nVars];
",2,0,1,4,8,0,0,0,0,6,42,5,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,164,"        for (int i = 0; i < nVars; i++) {
",8,1,0,1,3,0,0,0,0,10,33,4,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,165,"            for (int j = 0; j < nVars; j++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,166,"                if (i == j) {
",4,1,0,1,3,0,0,0,0,5,13,8,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,167,"                    out[i][j] = 0d;
",0,0,1,2,4,0,0,0,0,7,15,10,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,169,"                    double r = correlationMatrix.getEntry(i, j);
",2,0,0,1,2,0,8,0,0,10,44,11,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,170,"                    double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));
",10,5,0,4,8,0,8,0,0,23,59,11,0.80000,0
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,171,"                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));
",0,2,1,4,8,0,6,0,0,15,61,10,0.80000,1
defect4j,math,org/apache/commons/math/stat/correlation/PearsonsCorrelation,69,175,"        return new BlockRealMatrix(out);
",2,0,0,1,2,1,0,2,0,4,32,5,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,46,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,47,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,128,"        double p0 = 1.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,129,"        double p1 = getA(0, x);
",2,0,0,1,2,0,4,0,0,6,23,5,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,130,"        double q0 = 0.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,131,"        double q1 = 1.0;
",2,0,0,0,0,0,0,0,0,2,16,5,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,132,"        double c = p1 / q1;
",6,1,0,0,0,0,0,0,0,7,19,5,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,133,"        int n = 0;
",2,0,0,0,0,0,0,0,0,2,10,5,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,134,"        double relativeError = Double.MAX_VALUE;
",6,0,0,0,0,0,0,0,0,6,40,5,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,135,"        while (n < maxIterations && relativeError > epsilon) {
",8,3,0,1,3,0,0,0,0,11,54,4,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,136,"            ++n;
",2,0,0,0,0,0,0,0,0,3,4,6,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,137,"            double a = getA(n, x);
",2,0,0,1,2,0,6,0,0,8,22,7,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,138,"            double b = getB(n, x);
",2,0,0,1,2,0,6,0,0,8,22,7,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,139,"            double p2 = a * p1 + b * p0;
",10,3,0,0,0,0,0,0,0,13,28,7,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,140,"            double q2 = a * q1 + b * q0;
",10,3,0,0,0,0,0,0,0,13,28,7,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,141,"            boolean infinite = false;
",2,0,0,0,0,0,0,0,0,3,25,7,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,142,"            if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
",0,1,0,3,7,0,12,0,0,13,53,6,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,175,"            if (infinite) {
",2,0,0,1,3,0,0,0,0,2,15,6,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,182,"            double r = p2 / q2;
",6,1,0,0,0,0,0,0,0,7,19,7,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,184,"            if (Double.isNaN(r)) {
",0,0,0,2,5,0,6,0,0,6,22,7,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,189,"            relativeError = Math.abs(r / c - 1.0);
",6,2,0,1,2,0,4,0,0,13,38,6,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,192,"            c = p2 / q2;
",6,1,0,0,0,0,0,0,0,8,12,6,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,193,"            p0 = p1;
",4,0,0,0,0,0,0,0,0,5,8,6,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,194,"            p1 = p2;
",4,0,0,0,0,0,0,0,0,5,8,6,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,195,"            q0 = q1;
",4,0,0,0,0,0,0,0,0,5,8,6,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,196,"            q1 = q2;
",4,0,0,0,0,0,0,0,0,5,8,6,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,197,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,199,"        if (n >= maxIterations) {
",4,1,0,1,3,0,0,0,0,5,25,4,0.80000,0
defect4j,math,org/apache/commons/math/util/ContinuedFraction,69,205,"        return c;
",2,0,0,0,0,1,0,0,0,2,9,4,0.80000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,128,"        if (x == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,0.80000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,131,"            double t =
",2,0,0,0,0,0,0,0,0,2,10,7,0.80000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,136,"            if (x < 0.0) {
",2,1,0,1,3,0,0,0,0,3,14,6,0.80000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,139,"                ret = 1.0 - 0.5 * t;
",4,2,0,0,0,0,0,0,0,7,20,8,0.80000,0
defect4j,math,org/apache/commons/math/distribution/TDistributionImpl,69,143,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.80000,0
defect4j,math,org/apache/commons/math/special/Gamma,69,41,"    private static final double[] LANCZOS =
",2,0,0,1,2,3,0,0,0,5,39,2,0.80000,0
defect4j,math,org/apache/commons/math/special/Gamma,69,61,"    private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);
",6,2,0,1,2,3,4,0,0,15,74,2,0.80000,0
defect4j,math,org/apache/commons/math/special/Gamma,69,97,"        if (Double.isNaN(x) || (x <= 0.0)) {
",2,2,0,3,7,0,6,0,0,10,36,4,0.80000,0
defect4j,math,org/apache/commons/math/special/Gamma,69,100,"            double g = 607.0 / 128.0;
",2,1,0,0,0,0,0,0,0,3,25,7,0.80000,0
defect4j,math,org/apache/commons/math/special/Gamma,69,102,"            double sum = 0.0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.80000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,66,"        return solve(f, min, max);
",0,0,0,1,2,1,8,0,0,8,26,5,1.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,70,223,"        return (a + b) * .5;
",4,2,0,1,2,1,0,0,0,6,20,4,0.33333,0
defect4j,math,org/apache/commons/math/analysis/solvers/BisectionSolver,70,72,"        return solve(min, max);
",0,0,0,1,2,1,6,0,0,6,23,5,0.00000,1
defect4j,math,org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator,71,180,"                loop     = false;
",2,0,0,0,0,0,0,0,0,4,17,12,1.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,71,300,"                  loop     = false;
",2,0,0,0,0,0,0,0,0,4,17,14,1.00000,1
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,150,"    if ((initialStepSize < minStep) || (initialStepSize > maxStep)) {
",8,3,0,3,7,0,0,0,0,11,65,4,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,153,"      initialStep = initialStepSize;
",4,0,0,0,0,0,0,0,0,5,30,6,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,155,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,211,"      return forward ? initialStep : -initialStep;
",6,0,0,0,0,1,0,0,0,7,44,7,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,71,292,"          filteredH = maxStep;
",4,0,0,0,0,0,0,0,0,5,20,6,0.33333,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,71,335,"                x1 = x1 + 0.5 * tolerance;
",6,2,0,0,0,0,0,0,0,9,26,9,0.28571,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,107,"      System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);
",4,0,0,1,2,0,8,0,0,12,88,5,0.18182,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,108,"      System.arraycopy(currentDerivative, 0, interpolatedDerivatives, 0, currentDerivative.length);
",4,0,0,1,2,0,8,0,0,12,93,5,0.18182,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,71,109,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.18182,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,107,"  protected AbstractStepInterpolator(final double[] y, final boolean forward) {
",6,0,0,2,5,3,0,0,0,9,77,2,0.17391,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,109,"    previousTime      = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.17391,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,110,"    currentTime       = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.17391,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,111,"    h                 = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.17391,0
defect4j,math,org/apache/commons/math/ode/sampling/AbstractStepInterpolator,71,112,"    interpolatedTime  = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,31,4,0.17391,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,196,"        return (start < mid) && (mid < end);
",8,3,0,2,4,1,0,0,0,11,36,4,0.50000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,225,"        if (!isSequence(lower, initial, upper)) {
",0,0,0,2,5,0,8,0,0,9,41,4,0.50000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,72,230,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,72,127,"            setResult(yMax, 0);
",0,0,0,1,2,0,4,0,0,4,19,7,0.00000,1
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,196,"        return (start < mid) && (mid < end);
",8,3,0,2,4,1,0,0,0,11,36,4,1.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,225,"        if (!isSequence(lower, initial, upper)) {
",0,0,0,2,5,0,8,0,0,9,41,4,1.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverImpl,73,230,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,73,102,"        clearResult();
",0,0,0,1,2,0,2,0,0,2,14,5,1.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator,74,292,"          filteredH = maxStep;
",4,0,0,0,0,0,0,0,0,5,20,6,1.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,309,"                    final double factor = computeStepGrowShrinkFactor(error);
",2,0,0,1,2,1,4,0,0,7,57,10,1.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,310,"                    hNew = filterStep(stepSize * factor, forward, false);
",6,1,0,1,2,0,4,0,0,13,53,10,1.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,311,"                    interpolator.rescale(hNew);
",0,0,0,1,2,0,6,0,0,6,27,11,1.00000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,290,"                        final double dt = manager.getEventTime() - stepStart;
",4,1,0,1,2,1,4,0,0,10,53,12,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,291,"                        if (Math.abs(dt) <= Math.ulp(stepStart)) {
",0,1,0,3,7,0,12,0,0,13,42,12,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,296,"                            hNew = dt;
",4,0,0,0,0,0,0,0,0,5,10,14,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,297,"                            interpolator.rescale(hNew);
",0,0,0,1,2,0,6,0,0,6,27,15,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,299,"                    } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,356,"        final double stopTime  = stepStart;
",4,0,0,0,0,1,0,0,0,5,35,4,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,357,"        stepStart = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,23,4,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,358,"        stepSize  = Double.NaN;
",6,0,0,0,0,0,0,0,0,7,23,4,0.50000,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,359,"        return stopTime;
",2,0,0,0,0,1,0,0,0,2,16,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,74,919,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.33333,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,496,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,497,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.33333,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,499,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,500,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.33333,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,501,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.33333,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,502,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.33333,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,74,505,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,236,"        interpolator.reinitialize(stepStart, stepSize, scaled, nordsieck);
",0,0,0,1,2,0,12,0,0,12,66,5,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,237,"        interpolator.storeTime(stepStart);
",0,0,0,1,2,0,6,0,0,6,34,5,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,239,"        double hNew = stepSize;
",4,0,0,0,0,0,0,0,0,4,23,5,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,240,"        interpolator.rescale(hNew);
",0,0,0,1,2,0,6,0,0,6,27,5,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,242,"        boolean lastStep = false;
",2,0,0,0,0,0,0,0,0,3,25,5,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,243,"        while (!lastStep) {
",2,0,0,1,3,0,0,0,0,3,19,4,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,246,"            interpolator.shift();
",0,0,0,1,2,0,4,0,0,4,21,7,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,248,"            double error = 0;
",2,0,0,0,0,0,0,0,0,2,17,7,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,249,"            for (boolean loop = true; loop;) {
",4,0,0,1,3,0,0,0,0,5,34,6,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,251,"                stepSize = hNew;
",4,0,0,0,0,0,0,0,0,5,16,8,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,254,"                final double stepEnd = stepStart + stepSize;
",6,1,0,0,0,1,0,0,0,8,44,8,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,255,"                interpolator.setInterpolatedTime(stepEnd);
",0,0,0,1,2,0,6,0,0,6,42,9,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,256,"                System.arraycopy(interpolator.getInterpolatedState(), 0, yTmp, 0, y0.length);
",4,0,0,2,4,0,10,0,0,14,77,9,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,259,"                computeDerivatives(stepEnd, yTmp, yDot);
",0,0,0,1,2,0,8,0,0,8,40,9,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,262,"                final double[] predictedScaled = new double[y0.length];
",6,0,0,2,4,1,0,0,0,7,55,8,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,263,"                for (int j = 0; j < y0.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,37,8,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,264,"                    predictedScaled[j] = stepSize * yDot[j];
",2,1,1,2,4,0,0,0,0,12,40,10,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,266,"                final Array2DRowRealMatrix nordsieckTmp = updateHighOrderDerivativesPhase1(nordsieck);
",2,0,0,1,2,1,4,2,0,9,86,8,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,267,"                updateHighOrderDerivativesPhase2(scaled, predictedScaled, nordsieckTmp);
",0,0,0,1,2,0,8,0,0,8,72,9,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,270,"                error = nordsieckTmp.walkInOptimizedOrder(new Corrector(y, predictedScaled, yTmp));
",8,0,0,2,4,0,4,2,0,15,83,8,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,272,"                if (error <= 1.0) {
",2,1,0,1,3,0,0,0,0,3,19,8,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,275,"                    computeDerivatives(stepEnd, yTmp, yDot);
",0,0,0,1,2,0,8,0,0,8,40,11,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,278,"                    final double[] correctedScaled = new double[y0.length];
",6,0,0,2,4,1,0,0,0,7,55,10,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,279,"                    for (int j = 0; j < y0.length; ++j) {
",10,1,0,1,3,0,0,0,0,12,37,10,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,280,"                        correctedScaled[j] = stepSize * yDot[j];
",2,1,1,2,4,0,0,0,0,12,40,12,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,282,"                    updateHighOrderDerivativesPhase2(predictedScaled, correctedScaled, nordsieckTmp);
",0,0,0,1,2,0,8,0,0,8,81,11,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,285,"                    interpolatorTmp.reinitialize(stepEnd, stepSize, correctedScaled, nordsieckTmp);
",0,0,0,1,2,0,12,0,0,12,79,11,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,286,"                    interpolatorTmp.storeTime(stepStart);
",0,0,0,1,2,0,6,0,0,6,37,11,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,287,"                    interpolatorTmp.shift();
",0,0,0,1,2,0,4,0,0,4,24,11,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,288,"                    interpolatorTmp.storeTime(stepEnd);
",0,0,0,1,2,0,6,0,0,6,35,11,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,289,"                    if (manager.evaluateStep(interpolatorTmp)) {
",0,0,0,2,5,0,6,0,0,6,44,11,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,301,"                        scaled    = correctedScaled;
",4,0,0,0,0,0,0,0,0,5,28,12,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,302,"                        nordsieck = nordsieckTmp;
",4,0,0,0,0,0,0,0,0,5,25,12,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,303,"                        interpolator.reinitialize(stepEnd, stepSize, scaled, nordsieck);
",0,0,0,1,2,0,12,0,0,12,64,13,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,304,"                        loop = false;
",2,0,0,0,0,0,0,0,0,4,13,12,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,307,"                } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,314,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,317,"            final double nextStep = stepStart + stepSize;
",6,1,0,0,0,1,0,0,0,8,45,6,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,318,"            System.arraycopy(yTmp, 0, y, 0, n);
",0,0,0,1,2,0,10,0,0,10,35,7,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,319,"            interpolator.storeTime(nextStep);
",0,0,0,1,2,0,6,0,0,6,33,7,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,320,"            manager.stepAccepted(nextStep, y);
",0,0,0,1,2,0,8,0,0,8,34,7,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,321,"            lastStep = manager.stop();
",2,0,0,1,2,0,4,0,0,7,26,6,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,324,"            for (StepHandler handler : stepHandlers) {
",4,0,0,1,3,0,0,2,0,6,42,6,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,325,"                interpolator.setInterpolatedTime(nextStep);
",0,0,0,1,2,0,6,0,0,6,43,9,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,326,"                handler.handleStep(interpolator, lastStep);
",0,0,0,1,2,0,8,0,0,8,43,9,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,327,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegrator,74,328,"            stepStart = nextStep;
",4,0,0,0,0,0,0,0,0,5,21,6,0.33333,0
defect4j,math,org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator,74,250,"              scale = vecAbsoluteTolerance;
",4,0,0,0,0,0,0,0,0,5,29,12,0.00000,1
defect4j,math,org/apache/commons/math/stat/Frequency,75,331,"        return getPct(Long.valueOf(v));
",0,0,0,2,4,1,8,0,0,8,31,5,1.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,75,303,"        return getCumPct((Comparable<?>) v);
",2,0,0,2,4,1,2,2,0,6,36,5,0.00000,1
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,143,"            --p;
",2,0,0,0,0,0,0,0,0,3,4,6,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,283,"        if (cachedVt == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,284,"            cachedVt = getV().transpose();
",2,0,0,2,4,0,4,0,0,7,30,6,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,288,"        return cachedVt;
",2,0,0,0,0,1,0,0,0,2,16,4,1,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,182,"                    wData[i] = new double[p];
",0,0,1,2,4,0,0,0,0,7,25,10,0.80000,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,217,"        if (cachedS == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.80000,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,220,"            cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);
",2,0,0,1,2,0,6,0,0,9,63,6,0.80000,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,223,"        return cachedS;
",2,0,0,0,0,1,0,0,0,2,15,4,0.80000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,202,"        final RealMatrix m = createRealMatrix(diagonal.length, diagonal.length);
",10,0,0,1,2,1,2,2,0,15,72,4,0.80000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,203,"        for (int i = 0; i < diagonal.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,43,4,0.80000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,204,"            m.setEntry(i, i, diagonal[i]);
",0,0,1,2,4,0,8,0,0,12,30,7,0.80000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,206,"        return m;
",2,0,0,0,0,1,0,0,0,2,9,4,0.80000,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,30,"public class DefaultRealMatrixPreservingVisitor implements RealMatrixPreservingVisitor {
",2,0,0,0,1,1,0,2,0,5,88,1,0.50000,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,35,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/DefaultRealMatrixPreservingVisitor,76,44,"        return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,603,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,604,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,605,"        final RealMatrix out = createMatrix(nCols, nRows);
",2,0,0,1,2,1,6,2,0,11,50,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,616,"        return out;
",2,0,0,0,0,1,0,0,0,2,11,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,919,"        return walkInRowOrder(visitor);
",0,0,0,1,2,1,4,0,0,4,31,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,195,"        return walkInColumnOrder(new RealMatrixPreservingVisitor() {
",0,0,0,1,4,1,2,2,0,4,60,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,210,"                this.endRow = endRow;
",4,0,0,0,0,0,0,0,0,5,21,10,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,211,"                columnSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,212,"                maxColSum   = 0;
",2,0,0,0,0,0,0,0,0,3,16,10,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,213,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,217,"                columnSum += Math.abs(value);
",2,0,0,1,2,0,6,0,0,9,29,10,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,218,"                if (row == endRow) {
",4,1,0,1,3,0,0,0,0,5,20,10,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,219,"                    maxColSum = Math.max(maxColSum, columnSum);
",2,0,0,1,2,0,8,0,0,11,43,12,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,220,"                    columnSum = 0;
",2,0,0,0,0,0,0,0,0,3,14,12,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,222,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,226,"                return maxColSum;
",2,0,0,0,0,1,0,0,0,2,17,10,0.50000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,633,"        if ((left.getRowDimension()    != right.getRowDimension()) ||
",0,2,0,3,7,0,8,0,0,10,61,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,76,640,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,235,"            return subtract((Array2DRowRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,42,7,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,252,"        MatrixUtils.checkSubtractionCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,48,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,254,"        final int rowCount    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,42,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,255,"        final int columnCount = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,45,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,256,"        final double[][] outData = new double[rowCount][columnCount];
",2,0,1,4,8,1,0,0,0,7,61,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,257,"        for (int row = 0; row < rowCount; row++) {
",8,1,0,1,3,0,0,0,0,10,42,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,258,"            final double[] dataRow    = data[row];
",2,0,1,2,4,1,0,0,0,7,38,6,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,259,"            final double[] mRow       = m.data[row];
",6,0,1,2,4,1,0,0,0,9,40,6,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,260,"            final double[] outDataRow = outData[row];
",2,0,1,2,4,1,0,0,0,7,41,6,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,261,"            for (int col = 0; col < columnCount; col++) {
",8,1,0,1,3,0,0,0,0,10,45,6,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,262,"                outDataRow[col] = dataRow[col] - mRow[col];
",0,1,1,3,6,0,0,0,0,14,43,8,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,266,"        return new Array2DRowRealMatrix(outData, false);
",2,0,0,1,2,1,0,2,0,5,48,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,496,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,497,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,498,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,499,"        for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,500,"            final double[] rowI = data[i];
",2,0,1,2,4,1,0,0,0,7,30,6,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,501,"            for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,6,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,502,"                visitor.visit(i, j, rowI[j]);
",0,0,1,2,4,0,8,0,0,12,29,9,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,505,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,564,"        final int rows    = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,38,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,565,"        final int columns = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,566,"        visitor.start(rows, columns, 0, rows - 1, 0, columns - 1);
",4,2,0,1,2,0,8,0,0,14,58,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,567,"        for (int j = 0; j < columns; ++j) {
",8,1,0,1,3,0,0,0,0,10,35,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,568,"            for (int i = 0; i < rows; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,6,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,569,"                visitor.visit(i, j, data[i][j]);
",0,0,1,3,6,0,8,0,0,14,32,9,0.50000,0
defect4j,math,org/apache/commons/math/linear/Array2DRowRealMatrix,76,572,"        return visitor.end();
",0,0,0,1,2,1,4,0,0,4,21,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,606,"        walkInOptimizedOrder(new DefaultRealMatrixPreservingVisitor() {
",0,0,0,1,4,0,2,2,0,4,63,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,611,"                out.setEntry(column, row, value);
",0,0,0,1,2,0,10,0,0,10,33,11,0.50000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,76,612,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,156,"        if (cachedU == null) {
",2,1,0,1,3,0,0,0,0,3,22,4,0.44444,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,158,"            final int p = singularValues.length;
",6,0,0,0,0,1,0,0,0,7,36,6,0.44444,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,159,"            if (m >= n) {
",4,1,0,1,3,0,0,0,0,5,13,6,0.44444,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,161,"                final RealMatrix e =
",2,0,0,0,0,1,0,2,0,5,20,8,0.44444,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,163,"                final double[][] eData = e.getData();
",2,0,0,3,6,1,4,0,0,7,37,8,0.44444,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,164,"                final double[][] wData = new double[m][p];
",2,0,1,4,8,1,0,0,0,7,42,8,0.44444,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,165,"                double[] ei1 = eData[0];
",2,0,1,2,4,0,0,0,0,4,24,9,0.44444,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,166,"                for (int i = 0; i < p - 1; ++i) {
",8,2,0,1,3,0,0,0,0,11,33,8,0.44444,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,177,"                        for (int j = 0; j < p; ++j) {
",8,1,0,1,3,0,0,0,0,10,29,8,0.44444,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,178,"                            wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];
",4,4,1,5,10,0,0,0,0,23,69,10,0.44444,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,181,"                for (int i = p; i < m; ++i) {
",10,1,0,1,3,0,0,0,0,12,29,8,0.44444,0
defect4j,math,org/apache/commons/math/linear/SingularValueDecompositionImpl,76,265,"                for (int i = p; i < n; ++i) {
",10,1,0,1,3,0,0,0,0,12,29,8,0.00000,1
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,210,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,211,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,213,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,214,"            final double value = e.getValue();
",2,0,0,1,2,1,4,0,0,7,34,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,215,"            sum += value * value;
",6,1,0,0,0,0,0,0,0,8,21,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,216,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,217,"        return Math.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,22,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,222,"        double norm = 0;
",2,0,0,0,0,0,0,0,0,2,16,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,223,"        Iterator<Entry> it = sparseIterator();
",2,0,0,1,2,0,2,4,0,8,38,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,225,"        while (it.hasNext() && (e = it.next()) != null) {
",2,2,0,4,9,0,8,0,0,13,49,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,226,"            norm += Math.abs(e.getValue());
",2,0,0,2,4,0,8,0,0,11,31,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealVector,77,228,"        return norm;
",2,0,0,0,0,1,0,0,0,2,12,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,499,"        double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,500,"        Iterator iter = entries.iterator();
",2,0,0,1,2,0,4,2,0,8,35,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,501,"        while (iter.hasNext()) {
",0,0,0,2,5,0,4,0,0,4,24,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,502,"            iter.advance();
",0,0,0,1,2,0,4,0,0,4,15,7,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,503,"            max += iter.value();
",2,0,0,1,2,0,4,0,0,7,20,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,505,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,709,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,710,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,711,"            sum += Math.abs(a);
",2,0,0,1,2,0,6,0,0,9,19,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,713,"        return sum;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,719,"        double max = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,720,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,721,"            max += Math.max(max, Math.abs(a));
",2,0,0,2,4,0,12,0,0,15,34,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,723,"        return max;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,863,"        protected OpenMapSparseIterator() {
",2,0,0,1,3,1,0,0,0,3,35,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,864,"            iter = entries.iterator();
",2,0,0,1,2,0,4,0,0,7,26,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,865,"            current = new OpenMapEntry(iter);
",4,0,0,1,2,0,0,2,0,7,33,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,866,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,870,"            return iter.hasNext();
",0,0,0,1,2,1,4,0,0,4,22,6,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,875,"            iter.advance();
",0,0,0,1,2,0,4,0,0,4,15,6,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,876,"            return current;
",2,0,0,0,0,1,0,0,0,2,15,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,854,"    protected class OpenMapSparseIterator implements java.util.Iterator<Entry> {
",8,0,0,0,1,1,0,2,0,11,76,2,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,809,"        return new OpenMapSparseIterator();
",0,0,0,1,2,1,0,2,0,2,35,6,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,30,"public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable {
",2,0,0,0,1,1,0,6,0,9,101,1,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,825,"        protected OpenMapEntry(Iterator iter) {
",4,0,0,1,3,1,0,2,0,7,39,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,826,"            this.iter = iter;
",4,0,0,0,0,0,0,0,0,5,17,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,827,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,832,"            return iter.value();
",0,0,0,1,2,1,4,0,0,4,20,6,0.50000,0
defect4j,math,org/apache/commons/math/linear/RealVector,77,72,"    public abstract class Entry {
",2,0,0,0,1,2,0,0,0,4,29,2,0.33333,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,117,"        this(values, DEFAULT_ZERO_TOLERANCE);
",4,0,0,1,2,0,0,0,0,4,37,4,0.14286,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,118,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,126,"    public OpenMapRealVector(double[] values, double epsilon) {
",6,0,0,2,5,1,0,0,0,7,59,2,0.14286,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,127,"        virtualSize = values.length;
",6,0,0,0,0,0,0,0,0,7,28,4,0.14286,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,128,"        entries = new OpenIntToDoubleHashMap(0.0);
",2,0,0,1,2,0,0,2,0,5,42,4,0.14286,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,129,"        this.epsilon = epsilon;
",4,0,0,0,0,0,0,0,0,5,23,4,0.14286,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,130,"        for (int key = 0; key < values.length; key++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.14286,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,131,"            double value = values[key];
",2,0,1,1,2,0,0,0,0,6,27,7,0.14286,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,132,"            if (!isDefaultValue(value)) {
",0,0,0,2,5,0,4,0,0,5,29,6,0.14286,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,133,"                entries.put(key, value);
",0,0,0,1,2,0,8,0,0,8,24,9,0.14286,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,136,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.14286,0
defect4j,math,org/apache/commons/math/linear/OpenMapRealVector,77,205,"        return Math.abs(value) < epsilon;
",2,1,0,1,2,1,6,0,0,9,33,4,0.14286,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,699,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.08333,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,700,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.08333,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,701,"            sum += a * a;
",6,1,0,0,0,0,0,0,0,8,13,6,0.08333,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,77,703,"        return Math.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,22,5,0.08333,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,248,"        return new Iterator();
",0,0,0,1,2,1,0,2,0,2,22,6,0.07143,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,39,"public class OpenIntToDoubleHashMap implements Serializable {
",2,0,0,0,1,1,0,2,0,5,61,1,0.07143,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,505,"        private Iterator() {
",2,0,0,1,3,1,0,0,0,3,20,3,0.07143,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,508,"            referenceCount = count;
",4,0,0,0,0,0,0,0,0,5,23,5,0.07143,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,511,"            next = -1;
",2,0,0,0,0,0,0,0,0,4,10,5,0.07143,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,513,"                advance();
",0,0,0,1,2,0,2,0,0,2,10,8,0.07143,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,516,"            }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,518,"        }
",0,0,0,0,1,0,0,0,0,0,1,3,0.07143,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,491,"    public class Iterator {
",2,0,0,0,1,1,0,0,0,3,23,2,0.07143,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,525,"            return next >= 0;
",2,1,0,0,0,1,0,0,0,3,17,5,0.07143,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,554,"            if (referenceCount != count) {
",4,1,0,1,3,0,0,0,0,5,30,5,0.07143,0
defect4j,math,org/apache/commons/math/util/OpenIntToDoubleHashMap,77,558,"            if (current < 0) {
",2,1,0,1,3,0,0,0,0,3,18,5,0.07143,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,267,"                    double r1 = y0 / y2;
",6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,268,"                    double r2 = y1 / y2;
",6,1,0,0,0,0,0,0,0,7,20,11,0.11111,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,269,"                    p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));
",18,7,0,4,8,0,0,0,0,26,56,10,0.11111,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,270,"                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);
",8,4,0,3,6,0,0,0,0,13,42,10,0.11111,0
defect4j,math,org/apache/commons/math/analysis/solvers/BrentSolver,78,296,"                x1 = x1 + 0.5 * tolerance;
",6,2,0,0,0,0,0,0,0,9,26,9,0.07143,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,99,"      System.arraycopy(currentState, 0, interpolatedState, 0, currentState.length);
",4,0,0,1,2,0,8,0,0,12,77,5,0.05882,0
defect4j,math,org/apache/commons/math/ode/sampling/DummyStepInterpolator,78,100,"  }
",0,0,0,0,1,0,0,0,0,0,1,3,0.05882,0
defect4j,math,org/apache/commons/math/stat/clustering/EuclideanIntegerPoint,79,30,"public class EuclideanIntegerPoint implements Clusterable<EuclideanIntegerPoint>, Serializable {
",2,0,0,0,1,1,0,6,0,9,96,1,1.00000,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,45,"    public Cluster(final T center) {
",4,0,0,1,3,2,0,2,0,8,32,2,1.00000,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,46,"        this.center = center;
",4,0,0,0,0,0,0,0,0,5,21,4,1.00000,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,47,"        points = new ArrayList<T>();
",2,0,0,1,2,0,0,4,0,7,28,4,1.00000,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,48,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/stat/clustering/Cluster,79,71,"        return center;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0
defect4j,math,org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer,79,40,"    public KMeansPlusPlusClusterer(final Random random) {
",4,0,0,1,3,2,0,2,0,8,53,2,1.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,79,1626,"          final int dp = p1[i] - p2[i];
",2,1,1,2,4,1,0,0,0,12,29,6,0.33333,1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1090,"                    work[4 * deflatedEnd - 3 - pingPong] = 0.0;
",4,3,1,1,2,0,0,0,0,10,43,11,1.00000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1091,"                    dMin = 0.0;
",2,0,0,0,0,0,0,0,0,3,11,11,1.00000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1092,"                    updateSigma(tau);
",0,0,0,1,2,0,4,0,0,4,17,12,1.00000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1093,"                    return deflatedEnd;
",2,0,0,0,0,1,0,0,0,2,19,11,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,870,"            return dotProduct((ArrayRealVector) v);
",2,0,0,2,4,1,2,2,0,6,39,7,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,886,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,887,"            dot += data[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,22,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,889,"        return dot;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,900,"        return dotProduct(v.data);
",4,0,0,1,2,1,2,0,0,6,26,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,336,"        if (eigenvectors == null) {
",2,1,0,1,3,0,0,0,0,3,27,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,337,"            findEigenVectors();
",0,0,0,1,2,0,2,0,0,2,19,7,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,339,"        return eigenvectors[i].copy();
",0,0,1,2,4,1,2,0,0,6,30,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,175,"    public ArrayRealVector(ArrayRealVector v, boolean deep) {
",6,0,0,1,3,1,0,2,0,9,57,2,0.50000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,176,"        data = deep ? v.data.clone() : v.data;
",12,0,0,1,2,0,2,0,0,15,38,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,177,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,225,"        return new ArrayRealVector(this, true);
",0,0,0,1,2,1,0,2,0,3,39,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1105,"                        tau *= 0.25;
",2,0,0,0,0,0,0,0,0,3,12,15,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1106,"                        tType -= 12;
",2,0,0,0,0,0,0,0,0,3,12,15,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1530,"                tType = -5;
",2,0,0,0,0,0,0,0,0,4,11,8,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1531,"                double s = 0.25 * dMin;
",4,1,0,0,0,0,0,0,0,5,23,9,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1534,"                final int np = nn - 2 * pingPong;
",6,2,0,0,0,1,0,0,0,9,33,8,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1535,"                double b1 = work[np - 2];
",4,1,1,1,2,0,0,0,0,7,25,9,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1536,"                double b2 = work[np - 6];
",4,1,1,1,2,0,0,0,0,7,25,9,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1537,"                final double gam = dN2;
",4,0,0,0,0,1,0,0,0,5,23,8,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1538,"                if (work[np - 8] > b2 || work[np - 4] > b1) {
",8,5,1,3,7,0,0,0,0,17,45,8,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1541,"                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
",10,6,1,4,8,0,0,0,0,20,58,9,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1544,"                if (end - start > 3) {
",4,2,0,1,3,0,0,0,0,6,22,8,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1564,"                if (a2 < cnst1) {
",4,1,0,1,3,0,0,0,0,5,17,8,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1565,"                    tau = gam * (1 - Math.sqrt(a2)) / (1 + a2);
",6,4,0,3,6,0,6,0,0,17,43,10,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1570,"            } else {
",0,0,0,0,2,0,0,0,0,0,8,3,0.33333,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,77,"    public ArrayRealVector(double[] d) {
",4,0,0,2,5,1,0,0,0,5,36,2,0.25000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,78,"        data = d.clone();
",2,0,0,1,2,0,4,0,0,7,17,4,0.25000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,79,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,269,"            return subtract((ArrayRealVector) v);
",2,0,0,2,4,1,2,2,0,6,37,7,0.25000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,283,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.25000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,284,"        double[] out = new double[data.length];
",6,0,0,2,4,0,0,0,0,6,39,5,0.25000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,285,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.25000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,286,"            out[i] = data[i] - v[i];
",0,1,1,3,6,0,0,0,0,14,24,6,0.25000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,288,"        return new ArrayRealVector(out);
",2,0,0,1,2,1,0,2,0,4,32,5,0.25000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,299,"        return (ArrayRealVector) subtract(v.data);
",4,0,0,2,4,1,2,2,0,8,42,5,0.25000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,905,"        double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.25000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,906,"        for (double a : data) {
",4,0,0,1,3,0,0,0,0,4,23,4,0.25000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,907,"            sum += a * a;
",6,1,0,0,0,0,0,0,0,8,13,6,0.25000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,909,"        return Math.sqrt(sum);
",0,0,0,1,2,1,6,0,0,6,22,5,0.25000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,1287,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.25000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,80,1292,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.25000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1488,"                        np = nn - 2 * pingPong;
",6,2,0,0,0,0,0,0,0,9,23,11,0.12500,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1489,"                        b2 = work[np - 2];
",4,1,1,1,2,0,0,0,0,8,18,11,0.12500,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1490,"                        gam = dN1;
",4,0,0,0,0,0,0,0,0,5,10,11,0.12500,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1491,"                        if (work[np - 4]  >  work[np - 2]) {
",4,3,1,3,7,0,0,0,0,11,36,11,0.12500,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1494,"                        a2 = work[np - 4] / work[np - 2];
",6,3,1,2,4,0,0,0,0,14,33,11,0.12500,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1495,"                        if (work[nn - 9]  >  work[nn - 11]) {
",4,3,1,3,7,0,0,0,0,11,37,11,0.12500,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1498,"                        b2 = work[nn - 9] / work[nn - 11];
",6,3,1,2,4,0,0,0,0,14,34,11,0.12500,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1499,"                        np = nn - 13;
",4,1,0,0,0,0,0,0,0,6,13,11,0.12500,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1085,"                } else if ((dMin < 0.0) &&
",2,2,0,1,4,0,0,0,0,4,26,9,0.11111,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1094,"                } else if (dMin < 0.0) {
",2,1,0,1,4,0,0,0,0,3,24,10,0.11111,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1096,"                    if (tType < -22) {
",2,1,0,1,3,0,0,0,0,4,18,12,0.11111,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1099,"                    } else if (dMin1 > 0.0) {
",2,1,0,1,4,0,0,0,0,3,25,13,0.11111,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1101,"                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
",10,4,0,2,4,0,0,0,0,15,53,15,0.11111,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1102,"                        tType -= 11;
",2,0,0,0,0,0,0,0,0,3,12,15,0.11111,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,666,"                    for (int i = 0; i < n; ++i) {
",8,1,0,1,3,0,0,0,0,10,29,9,0.10000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,667,"                        realEigenvalues[begin + i] = lambda - work[4 * i];
",8,3,1,2,4,0,0,0,0,16,50,11,0.10000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1475,"                    tType = -4;
",2,0,0,0,0,0,0,0,0,4,11,9,0.10000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1476,"                    double s = 0.25 * dMin;
",4,1,0,0,0,0,0,0,0,5,23,10,0.10000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,80,1135,"            int j = 4 * n - 1;
",4,2,0,0,0,0,0,0,0,6,18,7,0.00000,1
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1509,"                            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1529,"                tType = -5;
",2,0,0,0,0,0,0,0,0,4,11,8,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1530,"                double s = 0.25 * dMin;
",4,1,0,0,0,0,0,0,0,5,23,9,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1533,"                final int np = nn - 2 * pingPong;
",6,2,0,0,0,1,0,0,0,9,33,8,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1534,"                double b1 = work[np - 2];
",4,1,1,1,2,0,0,0,0,7,25,9,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1535,"                double b2 = work[np - 6];
",4,1,1,1,2,0,0,0,0,7,25,9,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1536,"                final double gam = dN2;
",4,0,0,0,0,1,0,0,0,5,23,8,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1537,"                if (work[np - 8] > b2 || work[np - 4] > b1) {
",8,5,1,3,7,0,0,0,0,17,45,8,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1540,"                double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
",10,6,1,4,8,0,0,0,0,20,58,9,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1543,"                if (end - start > 2) {
",4,2,0,1,3,0,0,0,0,6,22,8,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1544,"                    b2 = work[nn - 13] / work[nn - 15];
",6,3,1,2,4,0,0,0,0,14,35,10,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1621,"                tau = 0.25 * dMin1;
",4,1,0,0,0,0,0,0,0,6,19,7,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1622,"                if (dMin1 == dN1) {
",4,1,0,1,3,0,0,0,0,5,19,7,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1625,"                tType = -9;
",2,0,0,0,0,0,0,0,0,4,11,7,0.50000,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1627,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,77,"    public ArrayRealVector(double[] d) {
",4,0,0,2,5,1,0,0,0,5,36,2,0.33333,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,78,"        data = d.clone();
",2,0,0,1,2,0,4,0,0,7,17,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,81,79,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1479,"                        gam = dN;
",4,0,0,0,0,0,0,0,0,5,9,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1480,"                        a2 = 0.0;
",2,0,0,0,0,0,0,0,0,3,9,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1481,"                        if (work[nn - 5]  >  work[nn - 7]) {
",4,3,1,3,7,0,0,0,0,11,36,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1484,"                        b2 = work[nn - 5] / work[nn - 7];
",6,3,1,2,4,0,0,0,0,14,33,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1485,"                        np = nn - 9;
",4,1,0,0,0,0,0,0,0,6,12,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1504,"                        if(b2 == 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1507,"                        b1 = b2;
",4,0,0,0,0,0,0,0,0,5,8,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1508,"                        if (work[i4]  >  work[i4 - 2]) {
",2,2,1,3,7,0,0,0,0,10,32,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1511,"                        b2 = b2 * (work[i4] / work[i4 - 2]);
",6,3,1,3,6,0,0,0,0,16,36,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1512,"                        a2 = a2 + b2;
",6,1,0,0,0,0,0,0,0,8,13,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1513,"                        if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
",6,4,0,2,5,0,8,0,0,18,48,11,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1586,"            if (dMin1 == dN1 && dMin2 == dN2) {
",8,3,0,1,3,0,0,0,0,11,35,5,0.33333,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1084,"                } else if ((dMin < 0.0) &&
",2,2,0,1,4,0,0,0,0,4,26,9,0.12500,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1093,"                } else if (dMin < 0.0) {
",2,1,0,1,4,0,0,0,0,3,24,10,0.12500,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1095,"                    if (tType < -22) {
",2,1,0,1,3,0,0,0,0,4,18,12,0.12500,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1098,"                    } else if (dMin1 > 0.0) {
",2,1,0,1,4,0,0,0,0,3,25,13,0.12500,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1100,"                        tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
",10,4,0,2,4,0,0,0,0,15,53,15,0.12500,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1101,"                        tType -= 11;
",2,0,0,0,0,0,0,0,0,3,12,15,0.12500,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1474,"                    tType = -4;
",2,0,0,0,0,0,0,0,0,4,11,9,0.11111,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1475,"                    double s = 0.25 * dMin;
",4,1,0,0,0,0,0,0,0,5,23,10,0.11111,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1478,"                    if (dMin == dN) {
",4,1,0,1,3,0,0,0,0,5,17,9,0.11111,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1502,"                    a2 = a2 + b2;
",6,1,0,0,0,0,0,0,0,8,13,9,0.11111,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1503,"                    for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
",12,4,0,1,3,0,0,0,0,17,60,9,0.11111,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1517,"                    a2 = cnst3 * a2;
",6,1,0,0,0,0,0,0,0,8,16,9,0.11111,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1520,"                    if (a2 < cnst1) {
",4,1,0,1,3,0,0,0,0,5,17,9,0.11111,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1521,"                        s = gam * (1 - Math.sqrt(a2)) / (1 + a2);
",6,4,0,3,6,0,6,0,0,17,41,11,0.11111,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,1523,"                    tau = s;
",4,0,0,0,0,0,0,0,0,5,8,9,0.11111,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,191,"        throws InvalidMatrixException {
",2,0,0,0,1,0,0,0,0,2,31,2,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,193,"        this.main      = main.clone();
",2,0,0,1,2,0,4,0,0,7,30,4,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,194,"        this.secondary = secondary.clone();
",2,0,0,1,2,0,4,0,0,7,35,4,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,195,"        transformer    = null;
",2,0,0,0,0,0,0,0,0,3,22,4,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,198,"        squaredSecondary = new double[secondary.length];
",6,0,0,1,2,0,0,0,0,7,48,4,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,199,"        for (int i = 0; i < squaredSecondary.length; ++i) {
",10,1,0,1,3,0,0,0,0,12,51,4,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,200,"            final double s = secondary[i];
",2,0,1,1,2,1,0,0,0,7,30,6,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,201,"            squaredSecondary[i] = s * s;
",4,1,1,1,2,0,0,0,0,10,28,6,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,204,"        this.splitTolerance = splitTolerance;
",4,0,0,0,0,0,0,0,0,5,37,4,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,205,"        decompose();
",0,0,0,1,2,0,2,0,0,2,12,5,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,643,"                final double[] range       = eigenvaluesRange(begin, n);
",2,0,0,2,4,1,6,0,0,9,56,7,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,644,"                final double oneFourth     = 0.25 * (3 * range[0] + range[1]);
",2,3,1,3,6,1,0,0,0,10,62,7,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,645,"                final int oneFourthCount   = countEigenValues(oneFourth, begin, n);
",2,0,0,1,2,1,8,0,0,11,67,7,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,646,"                final double threeFourth   = 0.25 * (range[0] + 3 * range[1]);
",2,3,1,3,6,1,0,0,0,10,62,7,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,647,"                final int threeFourthCount = countEigenValues(threeFourth, begin, n);
",2,0,0,1,2,1,8,0,0,11,69,7,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,648,"                final boolean chooseLeft   = (oneFourthCount - 1) >= (n - threeFourthCount);
",8,3,0,2,4,1,0,0,0,12,76,7,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,649,"                final double lambda        = chooseLeft ? range[0] : range[1];
",4,0,1,2,4,1,0,0,0,9,62,7,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,651,"                tau = (range[1] - range[0]) * MathUtils.EPSILON * n + 2 * minPivot;
",10,4,1,3,6,0,0,0,0,19,67,7,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,654,"                ldlTDecomposition(lambda, begin, n);
",0,0,0,1,2,0,8,0,0,8,36,8,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,657,"                processGeneralBlock(n);
",0,0,0,1,2,0,4,0,0,4,23,8,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,826,"        double sumOffDiag = 0;
",2,0,0,0,0,0,0,0,0,2,22,5,0.06667,0
defect4j,math,org/apache/commons/math/linear/EigenDecompositionImpl,81,603,"        minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);
",10,2,0,1,2,0,4,0,0,17,59,4,0.02941,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,308,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.50000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,169,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.50000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,170,"                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  // slack
",2,1,1,3,6,0,2,0,0,11,65,8,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,152,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,191,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.12500,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,338,"        double[] out = new double[data.length];
",6,0,0,2,4,0,0,0,0,6,39,5,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,339,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,340,"            out[i] = data[i] * d;
",2,1,1,2,4,0,0,0,0,12,21,6,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,342,"        return new ArrayRealVector(out);
",2,0,0,1,2,1,0,2,0,4,32,5,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,297,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.09091,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.09091,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,886,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.09091,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,887,"            dot += data[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,22,6,0.09091,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,889,"        return dot;
",2,0,0,0,0,1,0,0,0,2,11,4,0.09091,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1287,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.09091,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,82,1292,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.09091,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,282,"        return getBasicRow(col, false);
",0,0,0,1,2,1,4,0,0,5,31,5,0.09091,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,340,"      double[] coefficients = new double[getOriginalNumDecisionVariables()];
",2,0,0,3,6,0,2,0,0,4,70,5,0.09091,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,341,"      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());
",2,0,0,2,4,0,4,2,0,8,90,4,0.09091,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,342,"      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
",4,1,0,2,4,0,6,0,0,13,102,5,0.09091,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,343,"      Set<Integer> basicRows = new HashSet<Integer>();
",2,0,0,1,2,0,0,8,0,10,48,4,0.09091,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,344,"      for (int i = 0; i < coefficients.length; i++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.09091,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,345,"          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);
",4,1,0,2,4,0,4,2,0,11,74,6,0.09091,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,346,"          if (basicRows.contains(basicRow)) {
",0,0,0,2,5,0,6,0,0,6,35,7,0.09091,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,351,"              basicRows.add(basicRow);
",0,0,0,1,2,0,6,0,0,6,24,9,0.09091,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,352,"              coefficients[i] =
",0,0,1,1,2,0,0,0,0,5,17,8,0.09091,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,357,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));
",2,0,0,2,4,1,6,2,0,10,70,5,0.09091,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,433,"        return getNumObjectiveFunctions() + numDecisionVariables;
",2,1,0,1,2,1,2,0,0,5,57,4,0.09091,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,82,458,"      return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();
",0,1,0,2,4,1,4,0,0,5,70,4,0.09091,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,82,82,"            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
",0,1,0,2,5,0,8,0,0,9,50,6,0.07692,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,349,"              coefficients[i] = 0;
",0,0,1,1,2,0,0,0,0,5,20,8,0.33333,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,151,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.14286,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,190,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.14286,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,179,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,297,"                return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.11111,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,886,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,887,"            dot += data[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,22,6,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,889,"        return dot;
",2,0,0,0,0,1,0,0,0,2,11,4,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1287,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.10000,0
defect4j,math,org/apache/commons/math/linear/ArrayRealVector,83,1292,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,129,"        if (tableau.getNumArtificialVariables() == 0) {
",0,1,0,2,5,0,4,0,0,5,47,4,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,132,"        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
",6,2,0,3,7,0,8,0,0,17,83,4,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,133,"            if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {
",0,1,0,3,7,0,12,0,0,13,66,6,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,134,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,137,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,154,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,171,"        while (!isPhase1Solved(tableau)) {
",0,0,0,2,5,0,4,0,0,5,34,4,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,172,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,176,"        if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) {
",0,0,0,4,9,0,14,0,0,15,81,4,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,83,192,"        return tableau.getSolution();
",0,0,0,1,2,1,4,0,0,4,29,5,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,310,"        int width = getWidth() - numArtificialVariables - 1;
",4,1,0,1,2,0,2,0,0,7,52,5,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,311,"        int height = getHeight() - 1;
",2,1,0,1,2,0,2,0,0,5,29,5,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,312,"        double[][] matrix = new double[height][width];
",2,0,1,4,8,0,0,0,0,6,46,5,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,313,"        for (int i = 0; i < height; i++) {
",8,1,0,1,3,0,0,0,0,10,34,4,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,314,"            for (int j = 0; j < width - 1; j++) {
",8,2,0,1,3,0,0,0,0,11,37,6,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,315,"                matrix[i][j] = getEntry(i + 1, j + 1);
",4,2,1,3,6,0,2,0,0,15,38,8,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,317,"            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());
",4,2,1,4,8,0,4,0,0,15,55,6,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,319,"        this.tableau = new Array2DRowRealMatrix(matrix);
",4,0,0,1,2,0,0,2,0,7,48,4,0.10000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,83,345,"          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);
",4,1,0,2,4,0,4,2,0,11,63,6,0.10000,1
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,61,"                                final boolean copyArray) {
",2,0,0,0,2,1,0,0,0,3,26,3,1,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,62,"        this.point = copyArray ? point.clone() : point;
",6,0,0,1,2,0,4,0,0,11,47,4,1,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,84,63,"        this.value  = value;
",4,0,0,0,0,0,0,0,0,5,20,4,1,0
defect4j,math,org/apache/commons/math/optimization/direct/MultiDirectional,84,94,"                return;
",0,0,0,0,0,1,0,0,0,0,7,3,0.33333,1
defect4j,math,org/apache/commons/math/MathException,85,106,"      super(buildMessage(Locale.US, pattern, arguments));
",4,0,0,2,4,0,6,0,0,10,51,5,1.00000,0
defect4j,math,org/apache/commons/math/MathException,85,107,"      this.pattern   = pattern;
",4,0,0,0,0,0,0,0,0,5,25,4,1.00000,0
defect4j,math,org/apache/commons/math/MathException,85,108,"      this.arguments = (arguments == null) ? new Object[0] : arguments.clone();
",4,1,0,3,6,0,4,2,0,12,73,4,1.00000,0
defect4j,math,org/apache/commons/math/MathException,85,109,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,1.00000,0
defect4j,math,org/apache/commons/math/MathException,85,60,"            ResourceBundle bundle =
",2,0,0,0,0,0,0,2,0,4,23,6,1.00000,0
defect4j,math,org/apache/commons/math/MathException,85,67,"        } catch (MissingResourceException mre) {
",2,0,0,1,4,0,0,2,0,4,40,6,1.00000,0
defect4j,math,org/apache/commons/math/MathException,85,73,"        return s;
",2,0,0,0,0,1,0,0,0,2,9,4,1.00000,0
defect4j,math,org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils,85,198,"        if (fa * fb >= 0.0 ) {
",4,2,0,1,3,0,0,0,0,6,22,4,0.06250,1
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,991,"        final int nRows = getRowDimension();
",2,0,0,1,2,1,2,0,0,5,36,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,992,"        final int nCols = getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,39,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,993,"        final StringBuffer res = new StringBuffer();
",2,0,0,1,2,1,0,4,0,7,44,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,994,"        String fullClassName = getClass().getName();
",2,0,0,2,4,0,4,2,0,8,44,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,995,"        String shortClassName = fullClassName.substring(fullClassName.lastIndexOf('.') + 1);
",2,1,0,2,4,0,8,2,0,14,84,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,996,"        res.append(shortClassName).append(""{"");
",0,0,0,2,5,0,8,0,0,9,39,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,998,"        for (int i = 0; i < nRows; ++i) {
",8,1,0,1,3,0,0,0,0,10,33,4,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,999,"            if (i > 0) {
",2,1,0,1,3,0,0,0,0,3,12,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1000,"                res.append("","");
",0,0,0,1,2,0,4,0,0,5,16,9,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1002,"            res.append(""{"");
",0,0,0,1,3,0,4,0,0,5,16,7,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1003,"            for (int j = 0; j < nCols; ++j) {
",8,1,0,1,3,0,0,0,0,10,33,6,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1004,"                if (j > 0) {
",2,1,0,1,3,0,0,0,0,3,12,8,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1005,"                    res.append("","");
",0,0,0,1,2,0,4,0,0,5,16,11,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1007,"                res.append(getEntry(i, j));
",0,0,0,2,4,0,10,0,0,10,27,9,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1009,"            res.append(""}"");
",0,0,0,1,3,0,4,0,0,5,16,7,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1012,"        res.append(""}"");
",0,0,0,1,3,0,4,0,0,5,16,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/AbstractRealMatrix,86,1013,"        return res.toString();
",0,0,0,1,2,1,4,0,0,4,22,5,1.00000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,627,"        if (left.getColumnDimension() != right.getRowDimension()) {
",0,1,0,3,7,0,8,0,0,9,59,4,0.50000,0
defect4j,math,org/apache/commons/math/linear/MatrixUtils,86,633,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.50000,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,492,"            return multiply((DenseRealMatrix) m);
",2,0,0,2,4,1,2,2,0,6,37,7,0.50000,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,555,"        MatrixUtils.checkMultiplicationCompatible(this, m);
",0,0,0,1,2,0,6,0,0,6,51,5,0.50000,0
defect4j,math,org/apache/commons/math/linear/DenseRealMatrix,86,557,"        final DenseRealMatrix out = new DenseRealMatrix(rows, m.columns);
",8,0,0,1,2,1,0,4,0,13,65,4,0.50000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,291,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,1.00000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,168,"            return;
",0,0,0,0,0,1,0,0,0,0,7,3,1.00000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,151,"                return false;
",0,0,0,0,0,1,0,0,0,1,13,8,0.16667,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,190,"            doIteration(tableau);
",0,0,0,1,2,0,4,0,0,4,21,7,0.16667,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,70,"        return point.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,0.14286,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.11111,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.11111,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,886,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.11111,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,887,"            dot += data[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,22,6,0.11111,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,889,"        return dot;
",2,0,0,0,0,1,0,0,0,2,11,4,0.11111,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1287,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.11111,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,87,1292,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,325,"        double[] coefficients = new double[getOriginalNumDecisionVariables()];
",2,0,0,3,6,0,2,0,0,4,70,5,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,326,"        Integer basicRow =
",2,0,0,0,0,0,0,2,0,4,18,4,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
",4,1,0,2,4,0,6,0,0,13,80,5,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,329,"        Set<Integer> basicRows = new HashSet<Integer>();
",2,0,0,1,2,0,0,8,0,10,48,4,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,330,"        for (int i = 0; i < coefficients.length; i++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,331,"            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
",4,1,0,2,4,0,4,0,0,10,55,6,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,332,"            if (basicRows.contains(basicRow)) {
",0,0,0,2,5,0,6,0,0,6,35,7,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,337,"                basicRows.add(basicRow);
",0,0,0,1,2,0,6,0,0,6,24,9,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,338,"                coefficients[i] =
",0,0,1,1,2,0,0,0,0,5,17,8,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,343,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));
",2,0,0,2,4,1,6,2,0,10,70,5,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,87,458,"        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;
",6,1,0,0,0,1,0,0,0,7,79,5,0.11111,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,48,"    public RealPointValuePair(final double[] point, final double value) {
",6,0,0,2,5,3,0,0,0,9,69,2,0.11111,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,49,"        this.point = point.clone();
",2,0,0,1,2,0,4,0,0,7,27,4,0.11111,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,50,"        this.value  = value;
",4,0,0,0,0,0,0,0,0,5,20,4,0.11111,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,87,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,87,92,"        return coefficients.dotProduct(point) + constantTerm;
",2,1,0,1,2,1,6,0,0,9,53,4,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,154,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,87,192,"        return tableau.getSolution();
",0,0,0,1,2,1,4,0,0,4,29,5,0.11111,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,339,"                         coefficients[i] = 0;
",0,0,1,1,2,0,0,0,0,5,20,12,0.50000,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,172,"                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; // excess
",2,1,1,3,6,0,2,0,0,12,66,9,0.20000,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,70,"        return point.clone();
",0,0,0,1,2,1,4,0,0,4,21,5,0.16667,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,279,"                    return null;
",0,0,0,0,0,1,0,0,0,0,12,3,0.14286,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,884,"        checkVectorDimensions(v.length);
",4,0,0,1,2,0,2,0,0,6,32,5,0.12500,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,885,"        double dot = 0;
",2,0,0,0,0,0,0,0,0,2,15,5,0.12500,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,886,"        for (int i = 0; i < data.length; i++) {
",10,1,0,1,3,0,0,0,0,12,39,4,0.12500,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,887,"            dot += data[i] * v[i];
",2,1,1,2,4,0,0,0,0,12,22,6,0.12500,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,889,"        return dot;
",2,0,0,0,0,1,0,0,0,2,11,4,0.12500,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1287,"        if (data.length != n) {
",6,1,0,1,3,0,0,0,0,7,23,4,0.12500,0
defect4j,math,org/apache/commons/math/linear/RealVectorImpl,88,1292,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,154,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,179,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexSolver,88,192,"        return tableau.getSolution();
",0,0,0,1,2,1,4,0,0,4,29,5,0.12500,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,48,"    public RealPointValuePair(final double[] point, final double value) {
",6,0,0,2,5,3,0,0,0,9,69,2,0.12500,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,49,"        this.point = point.clone();
",2,0,0,1,2,0,4,0,0,7,27,4,0.12500,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,50,"        this.value  = value;
",4,0,0,0,0,0,0,0,0,5,20,4,0.12500,0
defect4j,math,org/apache/commons/math/optimization/RealPointValuePair,88,51,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,325,"        double[] coefficients = new double[getOriginalNumDecisionVariables()];
",2,0,0,3,6,0,2,0,0,4,70,5,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,326,"        Integer basicRow =
",2,0,0,0,0,0,0,2,0,4,18,4,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,328,"        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
",4,1,0,2,4,0,6,0,0,13,80,5,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,329,"        for (int i = 0; i < coefficients.length; i++) {
",10,1,0,1,3,0,0,0,0,12,47,4,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,330,"            basicRow = getBasicRow(getNumObjectiveFunctions() + i);
",4,1,0,2,4,0,4,0,0,10,55,6,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,333,"                coefficients[i] =
",0,0,1,1,2,0,0,0,0,5,17,6,0.12500,1
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,336,"            if (basicRow != null) {
",2,1,0,1,3,0,0,0,0,3,23,6,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,337,"                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {
",8,2,0,3,7,0,4,0,0,15,83,8,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,338,"                    if (tableau.getEntry(basicRow, j) == 1) {
",0,1,0,2,5,0,8,0,0,9,41,10,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,344,"        return new RealPointValuePair(coefficients, f.getValue(coefficients));
",2,0,0,2,4,1,6,2,0,10,70,5,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/SimplexTableau,88,459,"        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;
",6,1,0,0,0,1,0,0,0,7,79,5,0.12500,0
defect4j,math,org/apache/commons/math/optimization/linear/LinearObjectiveFunction,88,92,"        return coefficients.dotProduct(point) + constantTerm;
",2,1,0,1,2,1,6,0,0,9,53,4,0.12500,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,110,"            addValue((Comparable<?>) v);            
",2,0,0,2,4,0,2,2,0,6,28,5,1.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,89,111,"    }
",0,0,0,0,1,0,0,0,0,0,1,3,0.00000,1
defect4j,math,org/apache/commons/math/stat/Frequency,90,132,"        } catch (ClassCastException ex) {   
",2,0,0,1,4,0,0,2,0,4,33,6,1.00000,0
defect4j,math,org/apache/commons/math/stat/Frequency,90,121,"        Object obj = v;
",4,0,0,0,0,0,0,2,0,6,15,4,0.20000,1
defect4j,math,org/apache/commons/math/fraction/Fraction,91,270,"        return (double)numerator / (double)denominator;
",4,1,0,2,4,1,0,0,0,5,47,4,0.03846,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,604,"                t /= 2; // cast out twos
",2,0,0,0,0,0,0,0,0,3,24,8,0.02439,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,434,"    private static final long[] factorials = new long[] 
",2,0,0,2,4,3,0,0,0,5,51,2,0.01818,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,561,"        int u = p;
",4,0,0,0,0,0,0,0,0,4,10,5,0.01818,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,562,"        int v = q;
",4,0,0,0,0,0,0,0,0,4,10,5,0.01818,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,563,"        if ((u == 0) || (v == 0)) {
",4,3,0,3,7,0,0,0,0,7,27,4,0.01818,0
defect4j,math,org/apache/commons/math/util/MathUtils,91,564,"            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {
",12,3,0,3,7,0,0,0,0,15,59,6,0.01818,0
defect4j,math,org/apache/commons/math/fraction/Fraction,91,260,"        double dOn = object.doubleValue();
",2,0,0,1,2,0,4,0,0,6,34,5,0.00000,1
defect4j,math,org/apache/commons/math/util/MathUtils,92,182,"            return n;
",2,0,0,0,0,1,0,0,0,2,9,6,1.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,208,"        return result;
",2,0,0,0,0,1,0,0,0,2,14,4,1.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,92,95,"        return addAndCheck(a, b, ""overflow: add"");
",0,0,0,1,2,1,6,0,0,7,42,5,0.50000,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,345,"        long result = Math.round(factorialDouble(n));
",2,0,0,2,4,0,8,0,0,10,45,5,1.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,346,"        if (result == Long.MAX_VALUE) {
",6,1,0,1,3,0,0,0,0,7,31,4,1.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,93,374,"        if (n < 0) {
",2,1,0,1,3,0,0,0,0,3,12,4,0.50000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,430,"            u /= 2;
",2,0,0,0,0,0,0,0,0,3,7,6,0.05000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,431,"            v /= 2;
",2,0,0,0,0,0,0,0,0,3,7,6,0.05000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,432,"            k++; // cast out twos.
",2,0,0,0,0,0,0,0,0,3,22,6,0.05000,0
defect4j,math,org/apache/commons/math/util/MathUtils,94,412,"        if (u * v == 0) {
",4,2,0,1,3,0,0,0,0,6,17,4,0.02222,1
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,36,"    private static UnivariateRealSolverFactory factory = null;
",2,0,0,0,0,2,0,2,0,6,58,2,0.50000,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,128,"        return bracket( function, initial, lowerBound, upperBound,
",0,0,0,0,1,1,10,0,0,10,58,5,0.50000,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,171,"        if (function == null) {
",2,1,0,1,3,0,0,0,0,3,23,4,0.50000,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,174,"        if (maximumIterations <= 0)  {
",2,1,0,1,3,0,0,0,0,3,30,4,0.50000,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverUtils,95,178,"        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {
",12,5,0,1,3,0,0,0,0,17,79,4,0.50000,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,119,"        return 0.0;
",0,0,0,0,0,1,0,0,0,0,11,3,0.50000,0
defect4j,math,org/apache/commons/math/distribution/FDistributionImpl,95,148,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,0.50000,1
defect4j,math,org/apache/commons/math/complex/Complex,96,277,"        if (isNaN()) {
",0,0,0,2,5,0,2,0,0,2,14,5,1.00000,0
defect4j,math,org/apache/commons/math/complex/Complex,96,258,"                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); 
",2,3,0,8,16,0,28,0,0,34,179,11,0.03448,1
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,141,"                throw new IllegalArgumentException
",0,0,0,0,0,0,0,2,0,2,34,8,0.33333,0
defect4j,math,org/apache/commons/math/analysis/UnivariateRealSolverImpl,97,169,"        return absoluteAccuracy;
",2,0,0,0,0,1,0,0,0,2,24,4,0.33333,0
defect4j,math,org/apache/commons/math/analysis/BrentSolver,97,193,"                setResult(x1, i);
",0,0,0,1,2,0,6,0,0,6,17,9,0.06250,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,986,"        if (v.length != this.getColumnDimension()) {
",4,1,0,2,5,0,2,0,0,7,44,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,989,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,990,"        final int nCols = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,44,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,991,"        final BigDecimal[] out = new BigDecimal[v.length];
",6,0,0,2,4,1,0,4,0,11,50,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,992,"        for (int row = 0; row < nRows; row++) {
",8,1,0,1,3,0,0,0,0,10,39,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,993,"            BigDecimal sum = ZERO;
",4,0,0,0,0,0,0,2,0,6,22,6,0.33333,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,994,"            for (int i = 0; i < nCols; i++) {
",8,1,0,1,3,0,0,0,0,10,33,6,0.33333,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,995,"                sum = sum.add(data[row][i].multiply(v[i]));
",2,0,1,5,10,0,6,0,0,19,43,8,0.33333,0
defect4j,math,org/apache/commons/math/linear/BigMatrixImpl,98,997,"            out[row] = sum;
",2,0,1,1,2,0,0,0,0,7,15,6,0.33333,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,774,"        final int nRows = this.getRowDimension();
",2,0,0,1,2,1,2,0,0,5,41,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,775,"        final int nCols = this.getColumnDimension();
",2,0,0,1,2,1,2,0,0,5,44,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,776,"        if (v.length != nCols) {
",6,1,0,1,3,0,0,0,0,7,24,4,0.33333,0
defect4j,math,org/apache/commons/math/linear/RealMatrixImpl,98,779,"        final double[] out = new double[v.length];
",6,0,0,2,4,1,0,0,0,7,42,4,0.33333,1
defect4j,math,org/apache/commons/math/util/MathUtils,99,710,"        if (a==0 || b==0){
",4,3,0,1,3,0,0,0,0,7,18,4,1.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,711,"            return 0;
",0,0,0,0,0,1,0,0,0,0,9,3,1.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,713,"        int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));
",4,1,0,3,6,0,14,0,0,19,50,5,1.00000,0
defect4j,math,org/apache/commons/math/util/MathUtils,99,714,"        return lcm;
",2,0,0,0,0,1,0,0,0,2,11,4,1.00000,1
defect4j,math,org/apache/commons/math/estimation/SimpleEstimationProblem,100,58,"        return (EstimatedParameter[]) parameters.toArray(new EstimatedParameter[parameters.size()]);
",0,0,0,5,10,1,8,4,0,12,92,5,1.00000,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,162,"        updateJacobian();
",0,0,0,1,2,0,2,0,0,2,17,5,0.50000,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,165,"        final int rows = problem.getMeasurements().length;
",4,0,0,1,2,1,4,0,0,9,50,4,0.50000,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,166,"        final int cols = problem.getAllParameters().length;
",4,0,0,1,2,1,4,0,0,9,51,4,0.50000,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,167,"        final int max  = cols * rows;
",6,1,0,0,0,1,0,0,0,8,29,4,0.50000,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,168,"        double[][] jTj = new double[cols][cols];
",2,0,1,4,8,0,0,0,0,6,40,5,0.50000,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,169,"        for (int i = 0; i < cols; ++i) {
",8,1,0,1,3,0,0,0,0,10,32,4,0.50000,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,170,"            for (int j = i; j < cols; ++j) {
",10,1,0,1,3,0,0,0,0,12,32,6,0.50000,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,171,"                double sum = 0;
",2,0,0,0,0,0,0,0,0,2,15,9,0.50000,0
defect4j,math,org/apache/commons/math/estimation/AbstractEstimator,100,207,"        double[] errors = new double[problem.getAllParameters().length];
",4,0,0,3,6,0,4,0,0,8,64,5,0.00000,1
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,349,"            sign = 1;
",2,0,0,0,0,0,0,0,0,3,9,5,0.33333,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,350,"            break;
",0,0,0,0,0,0,0,0,0,0,6,3,0.33333,0
defect4j,math,org/apache/commons/math/complex/ComplexFormat,101,377,"        if (
",0,0,0,0,1,0,0,0,0,0,4,3,0.18182,1
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,367,"        for (int i = 0; i < in.length; i ++) {
",10,1,0,1,3,0,0,0,0,12,38,4,1,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,368,"            if (in[i] < 0) {
",0,1,1,2,5,0,0,0,0,5,16,6,1,0
defect4j,math,org/apache/commons/math/stat/inference/ChiSquareTestImpl,102,372,"        return true;
",0,0,0,0,0,1,0,0,0,1,12,4,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,72,"        if (x <= 0.0) {
",2,1,0,1,3,0,0,0,0,3,15,4,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,75,"            ret = Gamma.regularizedGammaP(getAlpha(), x / getBeta());
",4,1,0,3,6,0,8,0,0,14,57,6,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,78,"        return ret;
",2,0,0,0,0,1,0,0,0,2,11,4,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,122,"        return alpha;
",2,0,0,0,0,1,0,0,0,2,13,4,1,0
defect4j,math,org/apache/commons/math/distribution/GammaDistributionImpl,102,142,"        return beta;
",2,0,0,0,0,1,0,0,0,2,12,4,1,0
defect4j,math,org/apache/commons/math/distribution/ChiSquaredDistributionImpl,102,82,"        return getGamma().cumulativeProbability(x);
",0,0,0,2,4,1,6,0,0,6,43,5,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,120,"        return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);
",4,0,0,1,2,1,8,0,0,12,67,5,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,158,"        if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {
",4,3,0,5,11,0,12,0,0,19,68,4,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,160,"        } else if (x == 0.0) {
",2,1,0,1,4,0,0,0,0,3,22,5,1,0
defect4j,math,org/apache/commons/math/special/Gamma,102,162,"        } else if (a >= 1.0 && x > a) {
",6,3,0,1,4,0,0,0,0,9,31,6,1,0
defect4j,math,org/apache/commons/math/special/Gamma,103,161,"            ret = 0.0;
",2,0,0,0,0,0,0,0,0,3,10,7,0.25000,0
defect4j,math,org/apache/commons/math/distribution/NormalDistributionImpl,103,109,"            return 0.5 * (1.0 + Erf.erf((x - mean) /
",4,4,0,1,4,1,4,0,0,12,40,4,0.14286,0
defect4j,math,org/apache/commons/math/special/Erf,103,56,"        double ret = Gamma.regularizedGammaP(0.5, x * x, 1.0e-15, 10000);
",6,1,0,1,2,0,4,0,0,11,65,5,0.14286,0
defect4j,math,org/apache/commons/math/special/Gamma,104,200,"        return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);
",4,0,0,1,2,1,8,0,0,12,67,5,0.16667,0
defect4j,math,org/apache/commons/math/special/Gamma,104,243,"            ContinuedFraction cf = new ContinuedFraction() {
",2,0,0,1,3,0,0,4,0,6,48,8,0.04000,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,89,"        super();
",0,0,0,1,2,0,0,0,0,0,8,3,0.12500,0
defect4j,math,org/apache/commons/math/stat/regression/SimpleRegression,105,264,"        return sumYY - sumXY * sumXY / sumXX;
",8,3,0,0,0,1,0,0,0,11,37,4,0.12500,1
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,290,"            pos.setIndex(initialIndex);
",0,0,0,1,2,0,6,0,0,6,27,6,0.50000,0
defect4j,math,org/apache/commons/math/fraction/FractionFormat,106,291,"            pos.setErrorIndex(startIndex);
",0,0,0,1,2,0,6,0,0,6,30,6,0.50000,0
